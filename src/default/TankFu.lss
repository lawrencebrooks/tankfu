
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000bf1e  0000c01e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bf1e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ee3  00800106  00800106  0000c026  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000c024  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c8e1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005b0  00000000  00000000  0000c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000083fb  00000000  00000000  0000cea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  000152a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001dd2  00000000  00000000  000167d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012ec  00000000  00000000  000185a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001917  00000000  00000000  00019890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007a15  00000000  00000000  0001b1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000650  00000000  00000000  00022bc0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__ctors_end>
       4:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
       8:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
       c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      10:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      14:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      18:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      1c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      20:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_8>
      24:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      28:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      2c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      30:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      34:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <__vector_13>
      38:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__vector_14>
      3c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      40:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      44:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      48:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      4c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      50:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      54:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      58:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      5c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      60:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      64:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      68:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      6c:	0c 94 49 34 	jmp	0x6892	; 0x6892 <__bad_interrupt>
      70:	ae 52       	subi	r26, 0x2E	; 46
      72:	b3 52       	subi	r27, 0x23	; 35
      74:	b6 52       	subi	r27, 0x26	; 38
      76:	b9 52       	subi	r27, 0x29	; 41
      78:	bc 52       	subi	r27, 0x2C	; 44
      7a:	bf 52       	subi	r27, 0x2F	; 47
      7c:	c2 52       	subi	r28, 0x22	; 34
      7e:	c5 52       	subi	r28, 0x25	; 37
      80:	c8 52       	subi	r28, 0x28	; 40

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	aa 39 ad 39 08 3a 0c 3a 14 3a b5 39 ba 39 bf 39     .9.9.:.:.:.9.9.9
      e0:	1c 3a c2 39 c5 39 c8 39 05 3a                       .:.9.9.9.:

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <default_scores>:
      f6:	00 01 14 0d 01 02 14 0e 02 03 14 0f 03 04 14 10     ................
     106:	04 05 14 11 05 06 14 12 06 00 14 13 00 00           ..............

00000114 <default_handles>:
     114:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     124:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000132 <strMap>:
     132:	32 30 31 35 20 2d 20 4c 61 77 72 65 6e 63 65 20     2015 - Lawrence 
     142:	42 72 6f 6f 6b 73 00 50 6c 61 79 65 72 20 76 73     Brooks.Player vs
     152:	20 43 50 55 00 50 6c 61 79 65 72 20 76 73 20 50      CPU.Player vs P
     162:	6c 61 79 65 72 00 54 61 6e 6b 20 52 61 6e 6b 00     layer.Tank Rank.
     172:	45 64 69 74 20 48 61 6e 64 6c 65 00 5f 5f 5f 5f     Edit Handle.____
     182:	5f 5f 5f 5f 5f 5f 5f 00 7c 00 50 31 00 50 32 00     _______.|.P1.P2.
     192:	53 65 6c 65 63 74 20 2d 20 41 00 43 6f 6e 66 69     Select - A.Confi
     1a2:	72 6d 20 2d 20 41 00 43 61 6e 63 65 6c 20 2d 20     rm - A.Cancel - 
     1b2:	58 00 52 65 73 65 74 20 44 65 66 61 75 6c 74 73     X.Reset Defaults
     1c2:	20 2d 20 53 4c 20 28 35 73 29 00 45 64 69 74 20      - SL (5s).Edit 
     1d2:	2d 20 55 50 2f 44 4f 57 4e 00 50 77 6e 73 00 42     - UP/DOWN.Pwns.B
     1e2:	79 00 46 69 6e 61 6c 20 53 63 6f 72 65 00 59 6f     y.Final Score.Yo
     1f2:	75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c 4f 4c     u suck bro  .LOL
     202:	20 20 20 20 20 20 20 20 20 20 20 00 42 72 6f 6b                .Brok
     212:	65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79 20 61     en button?.Try a
     222:	74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20 65 61     t least  .Too ea
     232:	73 79 20 20 20 20 20 20 00 2a 59 41 57 4e 2a 20     sy      .*YAWN* 
     242:	20 20 20 20 20 20 20 00 41 20 74 75 72 6b 65 79            .A turkey
     252:	20 73 68 6f 6f 74 00 54 68 61 74 27 73 20 69 74      shoot.That's it
     262:	3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c 70 3f     ?    .Need help?
     272:	20 20 20 20 00 52 54 46 4d 21 20 20 20 20 20 20         .RTFM!      
     282:	20 20 20 00 20 20 20 20 20 20 20 20 20 20 20 20        .            
     292:	20 20 00 53 63 6f 72 65 3a 00 54 6f 74 61 6c 3a       .Score:.Total:
     2a2:	00 42 61 69 6c 20 2d 20 58 00 50 61 75 73 65 64     .Bail - X.Paused
     2b2:	00 20 20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20     .   Boot Camp   
     2c2:	00 20 20 20 56 65 6c 6f 63 69 74 79 20 20 20 20     .   Velocity    
     2d2:	00 20 20 20 20 44 69 67 67 65 72 20 20 20 20 20     .    Digger     
     2e2:	00 41 63 74 20 31 20 54 68 65 79 20 4d 65 65 74     .Act 1 They Meet
     2f2:	00 20 20 20 52 69 63 68 6f 63 68 65 74 20 20 20     .   Richochet   
     302:	00 20 54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20     . The Honey Pot 
     312:	00 20 20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20     .  Focal Point  
     322:	00 49 74 27 73 20 4e 6f 74 20 46 61 69 72 21 20     .It's Not Fair! 
     332:	00 20 20 4d 75 63 68 20 42 65 74 74 65 72 20 20     .  Much Better  
     342:	00 20 20 20 46 61 63 65 20 4f 66 66 20 20 20 20     .   Face Off    
	...

00000353 <my_patches>:
     353:	02 a6 30 00 00 4f 07 50 07 02 c1 29 00 00 e3 06     ..0..O.P...)....
     363:	e4 06 02 7a 27 00 00 45 02 46 02 02 c9 25 00 00     ...z'..E.F...%..
     373:	af 01 b0 01 02 c7 25 00 00 00 00 01 00 02 c5 25     ......%........%
     383:	00 00 00 00 01 00 02 a5 23 00 00 1e 02 1f 02 02     ........#.......
     393:	33 22 00 00 70 01 71 01 02 7a 27 00 00 45 02 46     3"..p.q..z'..E.F
     3a3:	02 02 2f 22 00 00 00 00 01 00 02 c1 29 00 00 e3     ../"........)...
     3b3:	06 e4 06 02 2b 22 00 00 00 00 01 00 02 29 22 00     ....+".......)".
     3c3:	00 00 00 00 00                                      .....

000003c8 <level_data>:
     3c8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     3d8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     400:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     420:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     43c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     45c:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
     46c:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
     47c:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     48c:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     4a8:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4b8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     4d4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4e4:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4f4:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     510:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     520:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     530:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 02 02     ...X............
	...
     548:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
     558:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     568:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
     578:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     588:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     598:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5a8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     5c4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5d4:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5e4:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     5f4:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     60c:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
     61c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     63c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     658:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     678:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     694:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6a4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6b4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6c4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6d4:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6f0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     70c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     72c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     748:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     768:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     784:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
     79c:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     7ac:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7bc:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
     7cc:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
     7dc:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     7ec:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
     7fc:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
     80c:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
     81c:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
     82c:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
     83c:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
     84c:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
     85c:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
     86c:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
     87c:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
     88c:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
     89c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8ac:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     8c8:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
     8d8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e8:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
     90c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     928:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     948:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     964:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     984:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     994:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9a4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9b4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
     9c4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9d4:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     9e4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9f4:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     a04:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a14:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     a24:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a34:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     a44:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a54:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     a64:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     a74:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     a84:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     a94:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     aa4:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     ab4:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ac4:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     ad4:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ae4:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
     af4:	09 00 00 00 00 00 00 02 02 02 02 00 00 00 00 00     ................
     b04:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
     b14:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b24:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
     b34:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b44:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     b54:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b64:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     b74:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     b84:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     b94:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     ba4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bb4:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     bc4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bd4:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     be4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bf4:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     c04:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c14:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     c24:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c34:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
     c44:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c54:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c64:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
     c74:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c84:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c94:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     ca4:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
     ccc:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
     cdc:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
     cec:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d08:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
     d18:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
     d28:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
     d38:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
     d48:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
     d58:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
     d68:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     d78:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
     d88:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     d98:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
     dbc:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
     dcc:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
     ddc:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
     dec:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     dfc:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
     e0c:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
     e1c:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     e2c:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
     e3c:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     e4c:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
     e5c:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
     e6c:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
     e84:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
     e94:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     ea4:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
     eb4:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
     ec4:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
     ed4:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
     ee4:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
     ef4:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
     f04:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f20:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
     f30:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
     f40:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f5c:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
     f6c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f7c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f8c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f9c:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
     fb8:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     fd4:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     ff4:	00 00 04 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1014:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1030:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1050:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    106c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    108c:	00 02 02 00 00 00 00 00 00 06 05 00 00 00 00 00     ................
    109c:	06 05 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    10ac:	02 00 00 00 00 00 06 02 02 05 00 00 00 06 02 02     ................
    10bc:	05 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
    10cc:	00 00 00 06 02 01 01 02 05 00 06 02 01 01 02 05     ................
    10dc:	00 06 02 01 01 02 05 00 00 00 00 02 02 00 00 58     ...............X
    10ec:	00 04 02 01 01 02 03 00 04 02 01 01 02 03 00 04     ................
    10fc:	02 01 01 02 03 63 00 00 00 02 02 00 00 00 00 00     .....c..........
    110c:	04 02 02 03 00 00 00 04 02 02 03 00 00 00 04 02     ................
    111c:	02 03 00 00 00 00 00 02 02 00 00 00 00 00 00 04     ................
    112c:	03 00 00 00 00 00 04 03 00 00 00 00 00 04 03 00     ................
    113c:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    115c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    117c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1198:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11b8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11d4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11f4:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1210:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    122c:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    124c:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    125c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    126c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    127c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    128c:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    129c:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    12ac:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    12bc:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    12cc:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    12dc:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    12ec:	00 01 01 00 00 00 00 00 04 03 00 00 00 00 00 01     ................
    12fc:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    130c:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    131c:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    1334:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1344:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1354:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    1364:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1374:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    1384:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    1394:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    13a4:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    13b4:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    13c4:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    13d4:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    13e4:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    13f4:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    1404:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    141c:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    142c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    143c:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    144c:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    145c:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    146c:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    147c:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    148c:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    149c:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    14ac:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    14bc:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    14cc:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14dc:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    14ec:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    14fc:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    1518:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    153c:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    154c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    155c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    156c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    157c:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    158c:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    15a4:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    15b4:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    15c4:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    15d4:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    15e4:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    15f4:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1604:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1614:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1624:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1634:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1644:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1668:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1684:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1694:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    16a4:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    16b4:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    16c4:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    16d4:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    16e4:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    16f4:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    170c:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    171c:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1738:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1758:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1768:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1778:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1788:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1798:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    17a8:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    17b8:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    17c8:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    17d8:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    17e8:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    17f8:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1808:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1818:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1828:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1838:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1848:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1858:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1868:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1884:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18a0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18c0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18dc:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    18ec:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    18fc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1918:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1930:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1940:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1950:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    196c:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1988:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    1998:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    19a8:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    19c4:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    19e4:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    1a00:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a20:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1a3c:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a64:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a80:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1a90:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1aa0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1abc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1adc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1af8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b18:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b28:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b38:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b48:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b70:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b90:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bac:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bcc:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1bdc:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1bec:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c08:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1c24:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1c3c:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1c4c:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c5c:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1c6c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c7c:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    1c98:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    1ca8:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cb8:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    1cd8:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1cf8:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1d14:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1d34:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d50:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d70:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1d80:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1d90:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dac:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dc8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1de8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e04:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e14:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e24:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e34:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e44:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e60:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e7c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e9c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eb8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ed8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ef4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f14:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f30:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    1f4c:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1f6c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f8c:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    1fa4:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    1fc8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fe4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2004:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2020:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2040:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    205c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    207c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2098:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20b8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20d4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20f4:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2104:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

00002114 <map_rocket_right_1>:
    2114:	01 01 26                                            ..&

00002117 <map_rocket_right_0>:
    2117:	01 01 25                                            ..%

0000211a <map_rocket_up_1>:
    211a:	01 01 24                                            ..$

0000211d <map_rocket_up_0>:
    211d:	01 01 23                                            ..#

00002120 <map_ball>:
    2120:	01 01 22                                            .."

00002123 <map_explosion_2>:
    2123:	02 02 0c 0d 0d 0c                                   ......

00002129 <map_explosion_1>:
    2129:	02 02 0a 0b 18 19                                   ......

0000212f <map_explosion_0>:
    212f:	02 02 08 09 16 17                                   ......

00002135 <map_tank2_right_1>:
    2135:	02 02 20 21 2e 2f                                   .. !./

0000213b <map_tank2_right_0>:
    213b:	02 02 1e 1f 2c 2d                                   ....,-

00002141 <map_tank2_up_1>:
    2141:	02 02 1c 1d 2a 2b                                   ....*+

00002147 <map_tank2_up_0>:
    2147:	02 02 1a 1b 28 29                                   ....()

0000214d <map_tank1_right_1>:
    214d:	02 02 06 07 14 15                                   ......

00002153 <map_tank1_right_0>:
    2153:	02 02 04 05 12 13                                   ......

00002159 <map_tank1_up_1>:
    2159:	02 02 02 03 10 11                                   ......

0000215f <map_tank1_up_0>:
    215f:	02 02 00 01 0e 0f                                   ......

00002165 <map_none>:
    2165:	01 01 27                                            ..'

00002168 <map_tank_blank>:
    2168:	02 02 27 27 27 27                                   ..''''

0000216e <map_metal_bl>:
    216e:	01 01 0c                                            ...

00002171 <map_metal_tr>:
    2171:	01 01 0b                                            ...

00002174 <map_metal_br>:
    2174:	01 01 0a                                            ...

00002177 <map_metal_tl>:
    2177:	01 01 09                                            ...

0000217a <map_tile_exp_2>:
    217a:	01 01 08                                            ...

0000217d <map_tile_exp_1>:
    217d:	01 01 07                                            ...

00002180 <map_tile_exp_0>:
    2180:	01 01 06                                            ...

00002183 <map_rocket_itm>:
    2183:	01 01 04                                            ...

00002186 <map_explode_itm>:
    2186:	01 01 03                                            ...

00002189 <map_speed_itm>:
    2189:	01 01 02                                            ...

0000218c <map_metal>:
    218c:	01 01 05                                            ...

0000218f <map_brick>:
    218f:	01 01 01                                            ...

00002192 <map_tile_none>:
    2192:	01 01 00                                            ...

00002195 <map_pause>:
    2195:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21a5:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    21b5:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    21c5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000021d3 <map_splash>:
    21d3:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    21e3:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    21f3:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    2203:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    2213:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    2223:	2a 00 00 2c 2d 2e                                   *..,-.

00002229 <ad_silence>:
	...

0000222b <ad_tracks>:
	...

0000222d <ad_tank_explode>:
	...

0000222f <ad_splash>:
	...

00002231 <ad_rocket>:
	...

00002233 <ad_navigate>:
    2233:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    2243:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    2253:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    2263:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    2273:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    2283:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    2293:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    22a3:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    22b3:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    22c3:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    22d3:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    22e3:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    22f3:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    2303:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    2313:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    2323:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    2333:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    2343:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    2353:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    2363:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    2373:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    2383:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    2393:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

000023a5 <ad_metal>:
    23a5:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    23b5:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    23c5:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    23d5:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    23e5:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    23f5:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    2405:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    2415:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    2425:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    2435:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    2445:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    2455:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    2465:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    2475:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    2485:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    2495:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    24a5:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    24b5:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    24c5:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    24d5:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    24e5:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    24f5:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    2505:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    2515:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    2525:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    2535:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    2545:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    2555:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    2565:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    2575:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    2585:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    2595:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    25a5:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    25b5:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000025c5 <ad_level_start>:
	...

000025c7 <ad_level_clear>:
	...

000025c9 <ad_item>:
    25c9:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    25d9:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    25e9:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    25f9:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    2609:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    2619:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    2629:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    2639:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    2649:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    2659:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    2669:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    2679:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    2689:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    2699:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    26a9:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    26b9:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    26c9:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    26d9:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    26e9:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    26f9:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    2709:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    2719:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    2729:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    2739:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    2749:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    2759:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    2769:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

0000277a <ad_cannonball>:
    277a:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    278a:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    279a:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    27aa:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    27ba:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    27ca:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    27da:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    27ea:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    27fa:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    280a:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    281a:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    282a:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    283a:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    284a:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    285a:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    286a:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    287a:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    288a:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    289a:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    28aa:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    28ba:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    28ca:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    28da:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    28ea:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    28fa:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    290a:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    291a:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    292a:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    293a:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    294a:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    295a:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    296a:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    297a:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    298a:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    299a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    29aa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    29ba:	ff ff ff ff ff 00 00                                .......

000029c1 <ad_brick_explode>:
    29c1:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    29d1:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    29e1:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    29f1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    2a01:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    2a11:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    2a21:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    2a31:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    2a41:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    2a51:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    2a61:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    2a71:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    2a81:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    2a91:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    2aa1:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2ab1:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2ac1:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2ad1:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2ae1:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2af1:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2b01:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2b11:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2b21:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2b31:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2b41:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    2b51:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    2b61:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    2b71:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    2b81:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    2b91:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    2ba1:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2bb1:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2bc1:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2bd1:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2be1:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2bf1:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2c01:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2c11:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2c21:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2c31:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2c41:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    2c51:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    2c61:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    2c71:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    2c81:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    2c91:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    2ca1:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2cb1:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2cc1:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2cd1:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2ce1:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2cf1:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    2d01:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    2d11:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    2d21:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    2d31:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    2d41:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    2d51:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    2d61:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    2d71:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    2d81:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    2d91:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    2da1:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    2db1:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    2dc1:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    2dd1:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    2de1:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    2df1:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    2e01:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    2e11:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    2e21:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    2e31:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    2e41:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    2e51:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    2e61:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    2e71:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    2e81:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    2e91:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    2ea1:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    2eb1:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    2ec1:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    2ed1:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    2ee1:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    2ef1:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    2f01:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    2f11:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    2f21:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    2f31:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    2f41:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    2f51:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    2f61:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    2f71:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    2f81:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    2f91:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    2fa1:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    2fb1:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    2fc1:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    2fd1:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    2fe1:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    2ff1:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    3001:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    3011:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    3021:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    3031:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    3041:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    3051:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    3061:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    3071:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    3081:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    3091:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    30a1:	04 04 02 01 00                                      .....

000030a6 <ad_banter>:
    30a6:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    30b6:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    30c6:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    30d6:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    30e6:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    30f6:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    3106:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    3116:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    3126:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    3136:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    3146:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    3156:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    3166:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    3176:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    3186:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    3196:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    31a6:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    31b6:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    31c6:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    31d6:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    31e6:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    31f6:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    3206:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    3216:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    3226:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    3236:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    3246:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    3256:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    3266:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    3276:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    3286:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    3296:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    32a6:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    32b6:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    32c6:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    32d6:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    32e6:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    32f6:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    3306:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    3316:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    3326:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    3336:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    3346:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    3356:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    3366:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    3376:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    3386:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    3396:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    33a6:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    33b6:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    33c6:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    33d6:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    33e6:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    33f6:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    3406:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    3416:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    3426:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    3436:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    3446:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    3456:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    3466:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    3476:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    3486:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    3496:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    34a6:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    34b6:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    34c6:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    34d6:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    34e6:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    34f6:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    3506:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    3516:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    3526:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    3536:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    3546:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    3556:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    3566:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    3576:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    3586:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    3596:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    35a6:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    35b6:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    35c6:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    35d6:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    35e6:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    35f6:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    3606:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    3616:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    3626:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    3636:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    3646:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    3656:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    3666:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    3676:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    3686:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    3696:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    36a6:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    36b6:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    36c6:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    36d6:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    36e6:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    36f6:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    3706:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    3716:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    3726:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    3736:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    3746:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    3756:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    3766:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    3776:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    3786:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    3796:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    37a6:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    37b6:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    37c6:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    37d6:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    37e6:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000037f7 <sprites_data>:
    37f7:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3807:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3817:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3827:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3837:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3847:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3857:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3867:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3877:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3887:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    3897:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    38a7:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    38b7:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    38c7:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    38d7:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    38e7:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    38f7:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3907:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3917:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3927:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3937:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3947:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3957:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3967:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3977:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3987:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    3997:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    39a7:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    39b7:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    39c7:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    39d7:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    39e7:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    39f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a07:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3a17:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3a27:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a37:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a47:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a57:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a67:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3a77:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3a87:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3a97:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3aa7:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3ab7:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3ac7:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3ad7:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3ae7:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3af7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b07:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b17:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b37:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b47:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b57:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b67:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b77:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3b87:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3b97:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3ba7:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3bb7:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3bc7:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3bd7:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3be7:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3bf7:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3c07:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3c17:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3c27:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3c37:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3c47:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3c57:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3c67:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3c77:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c87:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c97:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3ca7:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3cb7:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3cc7:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3cd7:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3ce7:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3cf7:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3d07:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3d17:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3d27:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3d37:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3d47:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3d57:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3d67:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3d77:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d87:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d97:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3da7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3db7:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3dc7:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3dd7:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3de7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3df7:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3e07:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3e17:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e27:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e37:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e47:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e57:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3e67:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3e77:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e87:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3e97:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3ea7:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3eb7:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3ec7:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3ed7:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3ee7:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3ef7:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3f07:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3f17:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3f27:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3f37:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3f47:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3f57:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3f67:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3f77:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3f87:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3f97:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3fa7:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3fb7:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3fc7:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3fd7:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3fe7:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3ff7:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    4007:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    4017:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4027:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4037:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    4047:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4057:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4067:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4077:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4087:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    4097:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    40a7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40b7:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40c7:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40d7:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    40e7:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    40f7:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4107:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4117:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4127:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4137:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4147:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4157:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4167:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4177:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4187:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    4197:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    41a7:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41d7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41e7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41f7:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4207:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4217:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4227:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4237:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4247:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4257:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4267:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4277:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    4287:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    4297:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    42a7:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    42b7:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    42c7:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    42d7:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    42e7:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    42f7:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4307:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4317:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    4327:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4337:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4347:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4357:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4367:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4377:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4387:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4397:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    43a7:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    43b7:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    43c7:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    43d7:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    43e7:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000043f7 <tiles_data>:
	...
    4437:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4447:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4457:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4467:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4477:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    4487:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    4497:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    44a7:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44b7:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    44c7:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    44d7:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    44e7:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    44f7:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4507:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4517:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    4527:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4537:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4547:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4557:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4567:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    457f:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    458f:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    459f:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    45b7:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    45c7:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    45d7:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    45e7:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    45ff:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    461f:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4637:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4647:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4657:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4667:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4677:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4687:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4697:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    46a7:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    46b7:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    46c7:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    46d7:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    46e7:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    46f7:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4707:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4717:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4727:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4737:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4747:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4757:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4767:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    4777:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4787:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4797:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    47a7:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    47b7:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    47c7:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47d7:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47e7:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    47f7:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4807:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4817:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4827:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4837:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4847:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4857:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4867:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    4877:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4887:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4897:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    48a7:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    48b7:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    48c7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    48d7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    48e7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4917:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4927:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    4957:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4967:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4977:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    4987:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4997:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49a7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49b7:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    49c7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49d7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49e7:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    49f7:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4a07:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a17:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a27:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a37:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a47:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a57:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a67:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a77:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a87:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a97:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4aa7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ab7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ac7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ad7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ae7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4af7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b07:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4b17:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4b27:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4b37:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4b47:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4b77:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4b87:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b97:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ba7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4bb7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4bc7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4bd7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4be7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4bf7:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4c07:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c17:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c27:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c37:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c47:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c57:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c67:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4c9f:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4caf:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4cbf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ccf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cdf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cef:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4cff:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d0f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d1f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d2f:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4d3f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d4f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d5f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d6f:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4d7f:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d8f:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d9f:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4daf:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4dbf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4dcf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4ddf:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4def:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4dff:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4e0f:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4e37:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e47:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e57:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e67:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4e77:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e87:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e97:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ea7:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4eb7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ec7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ed7:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ee7:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4ef7:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4f07:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4f17:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4f27:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4f3f:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4f4f:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f5f:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f6f:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4f7f:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f8f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f9f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4faf:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4fff:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    500f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5027:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    503f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    504f:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    507f:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    508f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    509f:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    50b7:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    50c7:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    50d7:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    50e7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50ff:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    510f:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    511f:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    5137:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    5147:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    5157:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    5167:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    517f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    518f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    51c3:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    51d3:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    51e3:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    51ff:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    520f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    521f:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    523f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    524f:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    525f:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    527f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    528f:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    529f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52df:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52ef:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    530f:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    535f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5383:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5393:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    53a3:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    53bf:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    53cf:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    53df:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    53ff:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    540f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    541f:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    543f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    544f:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    545f:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    547f:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    548f:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    549f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    54c3:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    54d3:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    54e3:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    54ff:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    550f:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    551f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    553f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    554f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    555f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    557f:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    558f:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    559f:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    55bf:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55cf:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55df:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    55ff:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    560f:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    561f:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    5647:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    565f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5687:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    569f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    56af:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    56bf:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    56cf:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    56df:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5707:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    571f:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5737:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5747:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5757:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5767:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    577f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    578f:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    57a7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    57bf:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57cf:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    57df:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    57ff:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    580f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    581f:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    583f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    584f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    585f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    587f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    588f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    589f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    58bf:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    58cf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58df:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    58ff:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    590f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    591f:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    593f:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    594f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    595f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    597f:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    598f:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    599f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    59bf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    59cf:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    59df:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    59ff:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5a0f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a1f:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5a43:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a53:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5a63:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5a7f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5a8f:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5a9f:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5abf:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5acf:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5adf:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5aff:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5b0f:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5b1f:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5b3f:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5b4f:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5b5f:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5b7f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b8f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b9f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5bbf:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bcf:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5bdf:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5bff:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c0f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c1f:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5c3f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c4f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c5f:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5c7f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c8f:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5c9f:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5cbf:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5ccf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5cdf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5cff:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d0f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d1f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5d3f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d4f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d5f:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5d7f:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5d8f:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5d9f:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5dbf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5dcf:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5ddf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5dff:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e0f:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5e1f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e3f:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5e4f:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5e5f:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5e7f:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5e8f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e9f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5ebf:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5ecf:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5edf:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5eff:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f0f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f1f:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5f43:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5f53:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5fa7:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5fbf:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5fcf:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5fdf:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6007:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6017:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6027:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    603f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    604f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    605f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6087:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6097:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    60a7:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    60c3:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    60d3:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60e3:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    6107:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6117:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6127:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6143:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6153:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6163:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    6187:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6197:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    61a7:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    61bf:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    61cf:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    61df:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    61ff:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    620f:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    621f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6243:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6253:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6263:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6273:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    6283:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    6293:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    62a3:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    62bf:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62cf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62df:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6307:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    6317:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6327:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6347:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6357:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6367:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6387:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6397:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63a7:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    63c7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63d7:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    63e7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6407:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6417:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6427:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6447:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6457:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6467:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6487:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6497:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    64a7:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    64bf:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    64cf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    64df:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    6507:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6517:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6527:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6547:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6557:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6567:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6587:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    6597:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    65a7:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    65c7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    65d7:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    65e7:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6607:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6617:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6627:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6647:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6657:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6667:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    667f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    668f:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    669f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    66b7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66c7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66d7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66e7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66ff:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    670f:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    671f:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    673b:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    674b:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    675b:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    676b:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    677b:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    678b:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    679b:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

000067b8 <__ctors_end>:
    67b8:	11 24       	eor	r1, r1
    67ba:	1f be       	out	0x3f, r1	; 63
    67bc:	cf ef       	ldi	r28, 0xFF	; 255
    67be:	d0 e1       	ldi	r29, 0x10	; 16
    67c0:	de bf       	out	0x3e, r29	; 62
    67c2:	cd bf       	out	0x3d, r28	; 61

000067c4 <__do_copy_data>:
    67c4:	11 e0       	ldi	r17, 0x01	; 1
    67c6:	a0 e0       	ldi	r26, 0x00	; 0
    67c8:	b1 e0       	ldi	r27, 0x01	; 1
    67ca:	ee e1       	ldi	r30, 0x1E	; 30
    67cc:	ff eb       	ldi	r31, 0xBF	; 191
    67ce:	02 c0       	rjmp	.+4      	; 0x67d4 <__do_copy_data+0x10>
    67d0:	05 90       	lpm	r0, Z+
    67d2:	0d 92       	st	X+, r0
    67d4:	a6 30       	cpi	r26, 0x06	; 6
    67d6:	b1 07       	cpc	r27, r17
    67d8:	d9 f7       	brne	.-10     	; 0x67d0 <__do_copy_data+0xc>

000067da <__do_clear_bss>:
    67da:	1f e0       	ldi	r17, 0x0F	; 15
    67dc:	a6 e0       	ldi	r26, 0x06	; 6
    67de:	b1 e0       	ldi	r27, 0x01	; 1
    67e0:	01 c0       	rjmp	.+2      	; 0x67e4 <.do_clear_bss_start>

000067e2 <.do_clear_bss_loop>:
    67e2:	1d 92       	st	X+, r1

000067e4 <.do_clear_bss_start>:
    67e4:	a9 3e       	cpi	r26, 0xE9	; 233
    67e6:	b1 07       	cpc	r27, r17
    67e8:	e1 f7       	brne	.-8      	; 0x67e2 <.do_clear_bss_loop>

000067ea <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    67ea:	0e 94 29 38 	call	0x7052	; 0x7052 <wdt_randomize>
#endif

    MCUSR = 0;
    67ee:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    67f0:	88 e1       	ldi	r24, 0x18	; 24
    67f2:	0f b6       	in	r0, 0x3f	; 63
    67f4:	f8 94       	cli
    67f6:	80 93 60 00 	sts	0x0060, r24
    67fa:	10 92 60 00 	sts	0x0060, r1
    67fe:	0f be       	out	0x3f, r0	; 63

00006800 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6800:	0e 94 dd 38 	call	0x71ba	; 0x71ba <isEepromFormatted>
    6804:	81 11       	cpse	r24, r1
    6806:	02 c0       	rjmp	.+4      	; 0x680c <Initialize+0xc>
    6808:	0e 94 bb 38 	call	0x7176	; 0x7176 <FormatEeprom>

	cli();
    680c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    680e:	81 e0       	ldi	r24, 0x01	; 1
    6810:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    6814:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6818:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    681c:	10 92 02 0b 	sts	0x0B02, r1
    6820:	10 92 08 0b 	sts	0x0B08, r1
    6824:	10 92 0e 0b 	sts	0x0B0E, r1
    6828:	10 92 14 0b 	sts	0x0B14, r1
    682c:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6830:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    6834:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6838:	92 e1       	ldi	r25, 0x12	; 18
    683a:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    683e:	90 ee       	ldi	r25, 0xE0	; 224
    6840:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    6844:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    6848:	94 e1       	ldi	r25, 0x14	; 20
    684a:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    684e:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    6852:	10 92 f4 0a 	sts	0x0AF4, r1
    6856:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    685a:	10 92 f8 0a 	sts	0x0AF8, r1
    685e:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    6862:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    6866:	0e 94 60 45 	call	0x8ac0	; 0x8ac0 <InitializeVideoMode>
    686a:	82 e8       	ldi	r24, 0x82	; 130
    686c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    686e:	fc 01       	movw	r30, r24
    6870:	25 91       	lpm	r18, Z+
    6872:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6874:	f9 01       	movw	r30, r18
    6876:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6878:	30 83       	st	Z, r19
    687a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    687c:	20 e0       	ldi	r18, 0x00	; 0
    687e:	80 3b       	cpi	r24, 0xB0	; 176
    6880:	92 07       	cpc	r25, r18
    6882:	a9 f7       	brne	.-22     	; 0x686e <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6884:	78 94       	sei
	
	DisplayLogo();
    6886:	0e 94 5f 45 	call	0x8abe	; 0x8abe <DisplayLogo>
    688a:	0e 94 99 5c 	call	0xb932	; 0xb932 <main>
    688e:	0c 94 8d 5f 	jmp	0xbf1a	; 0xbf1a <_exit>

00006892 <__bad_interrupt>:
    6892:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006896 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6896:	0c e0       	ldi	r16, 0x0C	; 12
    6898:	0a 95       	dec	r16
    689a:	f1 f7       	brne	.-4      	; 0x6898 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    689c:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    689e:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    68a0:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    68a2:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    68a4:	20 91 bd 0b 	lds	r18, 0x0BBD


		clr r16
    68a8:	00 27       	eor	r16, r16

000068aa <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    68aa:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    68ac:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    68ae:	ac 0f       	add	r26, r28
		adc XH,YH
    68b0:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    68b2:	1c 91       	ld	r17, X
		std Z+2,r17
    68b4:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    68b6:	02 17       	cp	r16, r18
		brsh noov
    68b8:	08 f4       	brcc	.+2      	; 0x68bc <noov>
		mov r17,r16
    68ba:	10 2f       	mov	r17, r16

000068bc <noov>:
	noov:
		st X,r17
    68bc:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    68be:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    68c0:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    68c2:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    68c4:	90 f3       	brcs	.-28     	; 0x68aa <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    68c6:	05 e2       	ldi	r16, 0x25	; 37

000068c8 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    68c8:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    68ca:	1a 95       	dec	r17
		brne .-4
    68cc:	f1 f7       	brne	.-4      	; 0x68ca <wait_loop+0x2>

		dec r16
    68ce:	0a 95       	dec	r16
		brne wait_loop
    68d0:	d9 f7       	brne	.-10     	; 0x68c8 <wait_loop>

		lds r2,overlay_tile_table
    68d2:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    68d6:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    68da:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    68de:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    68e2:	68 01       	movw	r12, r16
		movw r6,r16
    68e4:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    68e6:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    68e8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    68ea:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    68ec:	4e 01       	movw	r8, r28
		clr r0
    68ee:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    68f0:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    68f4:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    68f6:	09 f0       	breq	.+2      	; 0x68fa <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    68f8:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    68fa:	09 f0       	breq	.+2      	; 0x68fe <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    68fc:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    68fe:	09 f0       	breq	.+2      	; 0x6902 <wait_loop+0x3a>
		mov r24,r19
    6900:	83 2f       	mov	r24, r19

		breq .+2
    6902:	09 f0       	breq	.+2      	; 0x6906 <wait_loop+0x3e>
		movw r12,r2
    6904:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6906:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6908:	a0 2e       	mov	r10, r16
		clr r22
    690a:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    690c:	78 e0       	ldi	r23, 0x08	; 8

0000690e <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    690e:	7d d2       	rcall	.+1274   	; 0x6e0a <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6910:	3c e0       	ldi	r19, 0x0C	; 12
    6912:	3a 95       	dec	r19
    6914:	f1 f7       	brne	.-4      	; 0x6912 <next_tile_line+0x4>
    6916:	00 00       	nop
    6918:	00 00       	nop

		;***draw line***
		call render_tile_line
    691a:	0e 94 be 34 	call	0x697c	; 0x697c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    691e:	3f e0       	ldi	r19, 0x0F	; 15
    6920:	3a 95       	dec	r19
    6922:	f1 f7       	brne	.-4      	; 0x6920 <next_tile_line+0x12>
    6924:	00 00       	nop
    6926:	00 00       	nop

		dec r10
    6928:	aa 94       	dec	r10
		breq frame_end
    692a:	a9 f0       	breq	.+42     	; 0x6956 <frame_end>
	
		inc r22
    692c:	63 95       	inc	r22
		lpm ;3 nop
    692e:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6930:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6932:	31 f0       	breq	.+12     	; 0x6940 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6934:	33 e0       	ldi	r19, 0x03	; 3
    6936:	3a 95       	dec	r19
    6938:	f1 f7       	brne	.-4      	; 0x6936 <next_tile_line+0x28>
    693a:	00 00       	nop
    693c:	00 00       	nop
		
		rjmp next_tile_line	
    693e:	e7 cf       	rjmp	.-50     	; 0x690e <next_tile_line>

00006940 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6940:	66 27       	eor	r22, r22

		clr r0
    6942:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6944:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6946:	c3 0f       	add	r28, r19
		adc YH,r0
    6948:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    694a:	8a 95       	dec	r24
		brne .+2
    694c:	09 f4       	brne	.+2      	; 0x6950 <next_tile_row+0x10>
		movw YL,r8	;main vram
    694e:	e4 01       	movw	r28, r8
		brne .+2
    6950:	09 f4       	brne	.+2      	; 0x6954 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6952:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6954:	dc cf       	rjmp	.-72     	; 0x690e <next_tile_line>

00006956 <frame_end>:

	frame_end:

		WAIT r19,18
    6956:	36 e0       	ldi	r19, 0x06	; 6
    6958:	3a 95       	dec	r19
    695a:	f1 f7       	brne	.-4      	; 0x6958 <frame_end+0x2>

		rcall hsync_pulse ;145
    695c:	56 d2       	rcall	.+1196   	; 0x6e0a <hsync_pulse>
	
		clr r1
    695e:	11 24       	eor	r1, r1
		call RestoreBackground
    6960:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6964:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    6968:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    696a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    696c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    696e:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6972:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6974:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6978:	11 24       	eor	r1, r1


		ret
    697a:	08 95       	ret

0000697c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    697c:	de 01       	movw	r26, r28

		mul r22,r23
    697e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6980:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6982:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6984:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    6986:	00 0d       	add	r16, r0
		adc r17,r1
    6988:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    698a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    698c:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    698e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6990:	00 0d       	add	r16, r0
		adc r17,r1
    6992:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6994:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6996:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6998:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    699a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    699c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    699e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    69a0:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    69a2:	08 f4       	brcc	.+2      	; 0x69a6 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    69a4:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    69a6:	04 0e       	add	r0, r20
	    adc r1,r21
    69a8:	15 1e       	adc	r1, r21

		movw ZL,r0
    69aa:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    69ac:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    69ae:	f0 f0       	brcs	.+60     	; 0x69ec <ramloop>

000069b0 <romloop>:
	

	romloop:
	    lpm r16,Z+
    69b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    69b2:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    69b4:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    69b6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    69b8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    69ba:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    69bc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    69be:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    69c0:	28 31       	cpi	r18, 0x18	; 24
		nop
    69c2:	00 00       	nop

	    lpm r16,Z+
    69c4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    69c6:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    69c8:	08 f4       	brcc	.+2      	; 0x69cc <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    69ca:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    69cc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    69ce:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    69d0:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    69d2:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    69d4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    69d6:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    69d8:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    69da:	1a 95       	dec	r17
   
	    lpm r16,Z+
    69dc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    69de:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    69e0:	05 91       	lpm	r16, Z+

		breq end	
    69e2:	31 f1       	breq	.+76     	; 0x6a30 <end>
	    movw ZL,r0   	;copy next tile adress
    69e4:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    69e6:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    69e8:	18 f7       	brcc	.-58     	; 0x69b0 <romloop>
	
		rjmp .
    69ea:	00 c0       	rjmp	.+0      	; 0x69ec <ramloop>

000069ec <ramloop>:

	ramloop:

	    ld r16,Z+
    69ec:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    69ee:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    69f0:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    69f2:	01 91       	ld	r16, Z+
		nop   
    69f4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    69f6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    69f8:	23 9f       	mul	r18, r19


	    ld r16,Z+
    69fa:	01 91       	ld	r16, Z+
		nop
    69fc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    69fe:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6a00:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    6a02:	00 c0       	rjmp	.+0      	; 0x6a04 <ramloop+0x18>

	    ld r16,Z+
    6a04:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6a06:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6a08:	08 f0       	brcs	.+2      	; 0x6a0c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6a0a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6a0c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6a0e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6a10:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6a12:	15 1e       	adc	r1, r21
		rjmp .
    6a14:	00 c0       	rjmp	.+0      	; 0x6a16 <ramloop+0x2a>
    
		ld r16,Z+		
    6a16:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6a18:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6a1a:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    6a1c:	00 c0       	rjmp	.+0      	; 0x6a1e <ramloop+0x32>

	    ld r16,Z+	
    6a1e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6a20:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6a22:	01 91       	ld	r16, Z+

	    dec r17
    6a24:	1a 95       	dec	r17
	    breq end
    6a26:	21 f0       	breq	.+8      	; 0x6a30 <end>
	
		movw ZL,r0
    6a28:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6a2a:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6a2c:	08 f6       	brcc	.-126    	; 0x69b0 <romloop>
		rjmp ramloop
    6a2e:	de cf       	rjmp	.-68     	; 0x69ec <ramloop>

00006a30 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6a30:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6a32:	00 27       	eor	r16, r16
		lpm	
    6a34:	c8 95       	lpm
		nop
    6a36:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6a38:	08 b9       	out	0x08, r16	; 8

		ret
    6a3a:	08 95       	ret

00006a3c <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6a3c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6a3e:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    6a42:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6a46:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    6a48:	82 9f       	mul	r24, r18
	add ZL,r0
    6a4a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a4c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6a4e:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6a50:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6a52:	62 9f       	mul	r22, r18
	add XL,r0
    6a54:	a0 0d       	add	r26, r0
	adc XH,r1
    6a56:	b1 1d       	adc	r27, r1

	clr r0
    6a58:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6a5a:	05 90       	lpm	r0, Z+
    6a5c:	0d 92       	st	X+, r0
    6a5e:	05 90       	lpm	r0, Z+
    6a60:	0d 92       	st	X+, r0
    6a62:	05 90       	lpm	r0, Z+
    6a64:	0d 92       	st	X+, r0
    6a66:	05 90       	lpm	r0, Z+
    6a68:	0d 92       	st	X+, r0
    6a6a:	05 90       	lpm	r0, Z+
    6a6c:	0d 92       	st	X+, r0
    6a6e:	05 90       	lpm	r0, Z+
    6a70:	0d 92       	st	X+, r0
    6a72:	05 90       	lpm	r0, Z+
    6a74:	0d 92       	st	X+, r0
    6a76:	05 90       	lpm	r0, Z+
    6a78:	0d 92       	st	X+, r0
    6a7a:	05 90       	lpm	r0, Z+
    6a7c:	0d 92       	st	X+, r0
    6a7e:	05 90       	lpm	r0, Z+
    6a80:	0d 92       	st	X+, r0
    6a82:	05 90       	lpm	r0, Z+
    6a84:	0d 92       	st	X+, r0
    6a86:	05 90       	lpm	r0, Z+
    6a88:	0d 92       	st	X+, r0
    6a8a:	05 90       	lpm	r0, Z+
    6a8c:	0d 92       	st	X+, r0
    6a8e:	05 90       	lpm	r0, Z+
    6a90:	0d 92       	st	X+, r0
    6a92:	05 90       	lpm	r0, Z+
    6a94:	0d 92       	st	X+, r0
    6a96:	05 90       	lpm	r0, Z+
    6a98:	0d 92       	st	X+, r0
    6a9a:	05 90       	lpm	r0, Z+
    6a9c:	0d 92       	st	X+, r0
    6a9e:	05 90       	lpm	r0, Z+
    6aa0:	0d 92       	st	X+, r0
    6aa2:	05 90       	lpm	r0, Z+
    6aa4:	0d 92       	st	X+, r0
    6aa6:	05 90       	lpm	r0, Z+
    6aa8:	0d 92       	st	X+, r0
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	0d 92       	st	X+, r0
    6aae:	05 90       	lpm	r0, Z+
    6ab0:	0d 92       	st	X+, r0
    6ab2:	05 90       	lpm	r0, Z+
    6ab4:	0d 92       	st	X+, r0
    6ab6:	05 90       	lpm	r0, Z+
    6ab8:	0d 92       	st	X+, r0
    6aba:	05 90       	lpm	r0, Z+
    6abc:	0d 92       	st	X+, r0
    6abe:	05 90       	lpm	r0, Z+
    6ac0:	0d 92       	st	X+, r0
    6ac2:	05 90       	lpm	r0, Z+
    6ac4:	0d 92       	st	X+, r0
    6ac6:	05 90       	lpm	r0, Z+
    6ac8:	0d 92       	st	X+, r0
    6aca:	05 90       	lpm	r0, Z+
    6acc:	0d 92       	st	X+, r0
    6ace:	05 90       	lpm	r0, Z+
    6ad0:	0d 92       	st	X+, r0
    6ad2:	05 90       	lpm	r0, Z+
    6ad4:	0d 92       	st	X+, r0
    6ad6:	05 90       	lpm	r0, Z+
    6ad8:	0d 92       	st	X+, r0
    6ada:	05 90       	lpm	r0, Z+
    6adc:	0d 92       	st	X+, r0
    6ade:	05 90       	lpm	r0, Z+
    6ae0:	0d 92       	st	X+, r0
    6ae2:	05 90       	lpm	r0, Z+
    6ae4:	0d 92       	st	X+, r0
    6ae6:	05 90       	lpm	r0, Z+
    6ae8:	0d 92       	st	X+, r0
    6aea:	05 90       	lpm	r0, Z+
    6aec:	0d 92       	st	X+, r0
    6aee:	05 90       	lpm	r0, Z+
    6af0:	0d 92       	st	X+, r0
    6af2:	05 90       	lpm	r0, Z+
    6af4:	0d 92       	st	X+, r0
    6af6:	05 90       	lpm	r0, Z+
    6af8:	0d 92       	st	X+, r0
    6afa:	05 90       	lpm	r0, Z+
    6afc:	0d 92       	st	X+, r0
    6afe:	05 90       	lpm	r0, Z+
    6b00:	0d 92       	st	X+, r0
    6b02:	05 90       	lpm	r0, Z+
    6b04:	0d 92       	st	X+, r0
    6b06:	05 90       	lpm	r0, Z+
    6b08:	0d 92       	st	X+, r0
    6b0a:	05 90       	lpm	r0, Z+
    6b0c:	0d 92       	st	X+, r0
    6b0e:	05 90       	lpm	r0, Z+
    6b10:	0d 92       	st	X+, r0
    6b12:	05 90       	lpm	r0, Z+
    6b14:	0d 92       	st	X+, r0
    6b16:	05 90       	lpm	r0, Z+
    6b18:	0d 92       	st	X+, r0
    6b1a:	05 90       	lpm	r0, Z+
    6b1c:	0d 92       	st	X+, r0
    6b1e:	05 90       	lpm	r0, Z+
    6b20:	0d 92       	st	X+, r0
    6b22:	05 90       	lpm	r0, Z+
    6b24:	0d 92       	st	X+, r0
    6b26:	05 90       	lpm	r0, Z+
    6b28:	0d 92       	st	X+, r0
    6b2a:	05 90       	lpm	r0, Z+
    6b2c:	0d 92       	st	X+, r0
    6b2e:	05 90       	lpm	r0, Z+
    6b30:	0d 92       	st	X+, r0
    6b32:	05 90       	lpm	r0, Z+
    6b34:	0d 92       	st	X+, r0
    6b36:	05 90       	lpm	r0, Z+
    6b38:	0d 92       	st	X+, r0
    6b3a:	05 90       	lpm	r0, Z+
    6b3c:	0d 92       	st	X+, r0
    6b3e:	05 90       	lpm	r0, Z+
    6b40:	0d 92       	st	X+, r0
    6b42:	05 90       	lpm	r0, Z+
    6b44:	0d 92       	st	X+, r0
    6b46:	05 90       	lpm	r0, Z+
    6b48:	0d 92       	st	X+, r0
    6b4a:	05 90       	lpm	r0, Z+
    6b4c:	0d 92       	st	X+, r0
    6b4e:	05 90       	lpm	r0, Z+
    6b50:	0d 92       	st	X+, r0
    6b52:	05 90       	lpm	r0, Z+
    6b54:	0d 92       	st	X+, r0
    6b56:	05 90       	lpm	r0, Z+
    6b58:	0d 92       	st	X+, r0


	clr r1
    6b5a:	11 24       	eor	r1, r1
	ret
    6b5c:	08 95       	ret

00006b5e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6b5e:	0f 93       	push	r16
	push r17
    6b60:	1f 93       	push	r17
	push YL
    6b62:	cf 93       	push	r28
	push YH
    6b64:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6b66:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6b68:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6b6a:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    6b6c:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6b6e:	e0 0d       	add	r30, r0
	adc ZH,r1
    6b70:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6b72:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6b74:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6b76:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6b78:	8e 9f       	mul	r24, r30
	movw r26,r0
    6b7a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6b7c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6b7e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6b80:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    6b82:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6b84:	00 24       	eor	r0, r0
	add YL,r1
    6b86:	c1 0d       	add	r28, r1
	adc YH,r0		
    6b88:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6b8a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6b8c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6b8e:	ea 0f       	add	r30, r26
	adc ZH,r27
    6b90:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6b92:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6b94:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6b96:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6b98:	69 9f       	mul	r22, r25
	add XL,r0
    6b9a:	a0 0d       	add	r26, r0
	adc XH,r1
    6b9c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6b9e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6ba0:	dd 27       	eor	r29, r29

	cpi r20,0	
    6ba2:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6ba4:	51 f4       	brne	.+20     	; 0x6bba <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6ba6:	a2 0f       	add	r26, r18
	adc XH,r1
    6ba8:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6baa:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6bac:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6bae:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6bb0:	11 c0       	rjmp	.+34     	; 0x6bd4 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6bb2:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6bb4:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6bb6:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6bb8:	0d c0       	rjmp	.+26     	; 0x6bd4 <x_check_end>

00006bba <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6bba:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6bbc:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6bbe:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6bc0:	04 c0       	rjmp	.+8      	; 0x6bca <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6bc2:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6bc4:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6bc6:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6bc8:	05 c0       	rjmp	.+10     	; 0x6bd4 <x_check_end>

00006bca <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6bca:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6bcc:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6bce:	e2 0f       	add	r30, r18
	adc ZH,r1
    6bd0:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6bd2:	31 97       	sbiw	r30, 0x01	; 1

00006bd4 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6bd4:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6bd6:	41 f4       	brne	.+16     	; 0x6be8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6bd8:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6bda:	93 9f       	mul	r25, r19
	add XL,r0
    6bdc:	a0 0d       	add	r26, r0
	adc XH,r1
    6bde:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6be0:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6be2:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6be4:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6be6:	0a c0       	rjmp	.+20     	; 0x6bfc <y_check_end>

00006be8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6be8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6bea:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6bec:	63 2f       	mov	r22, r19
	dec r22
    6bee:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6bf0:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6bf2:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6bf4:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6bf6:	56 9f       	mul	r21, r22
	add ZL,r0
    6bf8:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6bfa:	f1 1d       	adc	r31, r1

00006bfc <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6bfc:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6bfe:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6c00:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6c02:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6c04:	00 ff       	sbrs	r16, 0
	clr r23
    6c06:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c08:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6c0a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6c0c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6c0e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6c10:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6c12:	59 1b       	sub	r21, r25

00006c14 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6c14:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6c16:	48 1b       	sub	r20, r24

00006c18 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6c18:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6c1a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6c1c:	2c 93       	st	X, r18
	adiw XL,1
    6c1e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6c20:	e6 0f       	add	r30, r22
	adc ZH,r23
    6c22:	f7 1f       	adc	r31, r23
	dec r20
    6c24:	4a 95       	dec	r20
	brne x_loop
    6c26:	c1 f7       	brne	.-16     	; 0x6c18 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6c28:	ec 0f       	add	r30, r28
	adc ZH,YH
    6c2a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6c2c:	a8 0f       	add	r26, r24
	adc XH,r1
    6c2e:	b1 1d       	adc	r27, r1
	dec r21
    6c30:	5a 95       	dec	r21
	brne y_loop
    6c32:	81 f7       	brne	.-32     	; 0x6c14 <y_loop>


	pop YH
    6c34:	df 91       	pop	r29
	pop YL
    6c36:	cf 91       	pop	r28
	pop r17
    6c38:	1f 91       	pop	r17
	pop r16
    6c3a:	0f 91       	pop	r16
	ret
    6c3c:	08 95       	ret

00006c3e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6c3e:	0f 92       	push	r0
	push r1
    6c40:	1f 92       	push	r1
	push ZL;2
    6c42:	ef 93       	push	r30
	push ZH;2
    6c44:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c46:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c48:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c4a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6c4e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6c50:	f1 e0       	ldi	r31, 0x01	; 1

00006c52 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6c52:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6c54:	00 f0       	brcs	.+0      	; 0x6c56 <latency_loop+0x4>
	inc ZH
    6c56:	f3 95       	inc	r31
	cpi ZH,10
    6c58:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6c5a:	d8 f3       	brcs	.-10     	; 0x6c52 <latency_loop>
	jmp .
    6c5c:	0c 94 30 36 	jmp	0x6c60	; 0x6c60 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6c60:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    6c64:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6c66:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    6c6a:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    6c6e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6c70:	57 c0       	rjmp	.+174    	; 0x6d20 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6c72:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6c74:	98 f0       	brcs	.+38     	; 0x6c9c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6c76:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6c78:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6c7c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6c7e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6c82:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6c84:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6c86:	26 f4       	brtc	.+8      	; 0x6c90 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6c88:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c8a:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <update_sound>
	rjmp sync_end
    6c8e:	b6 c0       	rjmp	.+364    	; 0x6dfc <sync_end>

00006c90 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6c90:	e5 e1       	ldi	r30, 0x15	; 21
    6c92:	ea 95       	dec	r30
    6c94:	f1 f7       	brne	.-4      	; 0x6c92 <sync_pre_eq_no_sound_update+0x2>
    6c96:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6c98:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6c9a:	b0 c0       	rjmp	.+352    	; 0x6dfc <sync_end>

00006c9c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6c9c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6c9e:	38 f1       	brcs	.+78     	; 0x6cee <sync_post_eq>

	rjmp .
    6ca0:	00 c0       	rjmp	.+0      	; 0x6ca2 <sync_eq+0x6>
	rjmp .
    6ca2:	00 c0       	rjmp	.+0      	; 0x6ca4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ca4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6ca6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6ca8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6caa:	16 f4       	brtc	.+4      	; 0x6cb0 <sync_eq_skip>
	
	call update_sound
    6cac:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <update_sound>

00006cb0 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6cb0:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6cb2:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6cb6:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6cb8:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6cbc:	9f c0       	rjmp	.+318    	; 0x6dfc <sync_end>

00006cbe <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6cbe:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6cc0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6cc2:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6cc4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6cc8:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6cca:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6ccc:	00 f0       	brcs	.+0      	; 0x6cce <__vector_14+0x10>

	cpi ZL,2
    6cce:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6cd0:	00 f0       	brcs	.+0      	; 0x6cd2 <__vector_14+0x14>

	cpi ZL,3
    6cd2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6cd4:	00 f0       	brcs	.+0      	; 0x6cd6 <__vector_14+0x18>

	cpi ZL,4
    6cd6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6cd8:	00 f0       	brcs	.+0      	; 0x6cda <__vector_14+0x1c>

	cpi ZL,5
    6cda:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6cdc:	00 f0       	brcs	.+0      	; 0x6cde <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6cde:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6ce0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6ce2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6ce6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6ce8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6cea:	ef 91       	pop	r30
	reti
    6cec:	18 95       	reti

00006cee <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6cee:	00 c0       	rjmp	.+0      	; 0x6cf0 <sync_post_eq+0x2>

	bst ZL,0
    6cf0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6cf2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6cf4:	26 f4       	brtc	.+8      	; 0x6cfe <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6cf6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6cf8:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <update_sound>
	rjmp sync_pre_eq_cont
    6cfc:	05 c0       	rjmp	.+10     	; 0x6d08 <sync_pre_eq_cont>

00006cfe <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6cfe:	e5 e1       	ldi	r30, 0x15	; 21
    6d00:	ea 95       	dec	r30
    6d02:	f1 f7       	brne	.-4      	; 0x6d00 <sync_post_eq_no_sound_update+0x2>
    6d04:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6d06:	28 9a       	sbi	0x05, 0	; 5

00006d08 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6d08:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    6d0c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6d0e:	09 f0       	breq	.+2      	; 0x6d12 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6d10:	75 c0       	rjmp	.+234    	; 0x6dfc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6d12:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6d14:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    6d18:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6d1a:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    6d1e:	6e c0       	rjmp	.+220    	; 0x6dfc <sync_end>

00006d20 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6d20:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6d22:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6d26:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6d28:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6d2c:	00 c0       	rjmp	.+0      	; 0x6d2e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d2e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6d30:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d32:	00 c0       	rjmp	.+0      	; 0x6d34 <sync_hsync+0x14>
	call update_sound
    6d34:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6d38:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d3a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    6d3e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6d40:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    6d44:	ef 17       	cp	r30, r31
	brsh no_render
    6d46:	d0 f4       	brcc	.+52     	; 0x6d7c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6d48:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d4a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    6d4e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6d50:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    6d54:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6d56:	ef 17       	cp	r30, r31
	brlo no_render
    6d58:	88 f0       	brcs	.+34     	; 0x6d7c <no_render>

	;push r1-r29
	ldi ZL,29
    6d5a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6d5c:	ff 27       	eor	r31, r31

00006d5e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6d5e:	00 80       	ld	r0, Z
	push r0
    6d60:	0f 92       	push	r0
	dec ZL
    6d62:	ea 95       	dec	r30
	brne push_loop	
    6d64:	e1 f7       	brne	.-8      	; 0x6d5e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6d66:	06 e0       	ldi	r16, 0x06	; 6
    6d68:	0a 95       	dec	r16
    6d6a:	f1 f7       	brne	.-4      	; 0x6d68 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6d6c:	0e 94 4b 34 	call	0x6896	; 0x6896 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6d70:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6d72:	ff 27       	eor	r31, r31

00006d74 <pop_loop>:
pop_loop:
	pop r0
    6d74:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6d76:	01 92       	st	Z+, r0
	cpi ZL,30
    6d78:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6d7a:	e0 f3       	brcs	.-8      	; 0x6d74 <pop_loop>

00006d7c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6d7c:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    6d80:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6d82:	09 f0       	breq	.+2      	; 0x6d86 <no_render+0xa>
	rjmp sync_end
    6d84:	3b c0       	rjmp	.+118    	; 0x6dfc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6d86:	2f 93       	push	r18
	push r19
    6d88:	3f 93       	push	r19
	push r20
    6d8a:	4f 93       	push	r20
	push r21
    6d8c:	5f 93       	push	r21
	push r22
    6d8e:	6f 93       	push	r22
	push r23
    6d90:	7f 93       	push	r23
	push r24
    6d92:	8f 93       	push	r24
	push r25
    6d94:	9f 93       	push	r25
	push r26
    6d96:	af 93       	push	r26
	push r27
    6d98:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6d9a:	78 94       	sei
	clr r1
    6d9c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6d9e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6da0:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6da4:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6da6:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6daa:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    6dae:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    6db2:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    6db6:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6dba:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    6dbe:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    6dc2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6dc4:	f1 05       	cpc	r31, r1
	breq .+2 
    6dc6:	09 f0       	breq	.+2      	; 0x6dca <no_render+0x4e>
	icall
    6dc8:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6dca:	0e 94 ab 38 	call	0x7156	; 0x7156 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6dce:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6dd2:	0e 94 10 37 	call	0x6e20	; 0x6e20 <process_music>
	clr r1
    6dd6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6dd8:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    6ddc:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    6de0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6de2:	f1 05       	cpc	r31, r1
	breq .+2 
    6de4:	09 f0       	breq	.+2      	; 0x6de8 <no_render+0x6c>
	icall
    6de6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6de8:	bf 91       	pop	r27
	pop r26
    6dea:	af 91       	pop	r26
	pop r25
    6dec:	9f 91       	pop	r25
	pop r24
    6dee:	8f 91       	pop	r24
	pop r23
    6df0:	7f 91       	pop	r23
	pop r22
    6df2:	6f 91       	pop	r22
	pop r21
    6df4:	5f 91       	pop	r21
	pop r20
    6df6:	4f 91       	pop	r20
	pop r19
    6df8:	3f 91       	pop	r19
	pop r18
    6dfa:	2f 91       	pop	r18

00006dfc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6dfc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6dfe:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6e00:	ff 91       	pop	r31
	pop ZL
    6e02:	ef 91       	pop	r30
	pop r1
    6e04:	1f 90       	pop	r1
	pop r0
    6e06:	0f 90       	pop	r0
	reti
    6e08:	18 95       	reti

00006e0a <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e0a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6e0c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6e0e:	00 c0       	rjmp	.+0      	; 0x6e10 <hsync_pulse+0x6>
	call update_sound
    6e10:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <update_sound>

	lds ZL,sync_pulse
    6e14:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    6e18:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6e1a:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    6e1e:	08 95       	ret

00006e20 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6e20:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6e24:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6e26:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <ProcessMusic>
#endif

	ret
    6e2a:	08 95       	ret

00006e2c <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6e2c:	0f 93       	push	r16
	push r17
    6e2e:	1f 93       	push	r17
	push r18
    6e30:	2f 93       	push	r18
	push r28
    6e32:	cf 93       	push	r28
	push r29
    6e34:	df 93       	push	r29

	mov r18,ZL
    6e36:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6e38:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6e3c:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    6e40:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6e42:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6e46:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6e4a:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    6e4e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6e50:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6e52:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6e56:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6e5a:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    6e5e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6e60:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6e62:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6e64:	d0 2d       	mov	r29, r0
	nop
    6e66:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6e68:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6e6c:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    6e70:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6e72:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    6e76:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    6e7a:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    6e7e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6e80:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6e82:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    6e86:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    6e8a:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6e8e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6e90:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6e92:	20 ff       	sbrs	r18, 0
	rjmp .
    6e94:	00 c0       	rjmp	.+0      	; 0x6e96 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6e96:	01 03       	mulsu	r16, r17
	clr r0
    6e98:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6e9a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e9c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6e9e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6ea0:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    6ea4:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    6ea8:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6eaa:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    6eae:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    6eb2:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    6eb6:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6eb8:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6eba:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    6ebe:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    6ec2:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    6ec6:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6ec8:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6eca:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6ecc:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6ece:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    6ed2:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    6ed6:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    6eda:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6edc:	92 f4       	brpl	.+36     	; 0x6f02 <ch4_no_shift>

	lds ZH,tr4_params
    6ede:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    6ee2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6ee4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6ee6:	00 2e       	mov	r0, r16
	lsr r0
    6ee8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6eea:	00 26       	eor	r0, r16
	bst r0,0
    6eec:	00 fa       	bst	r0, 0
	lsr r17
    6eee:	16 95       	lsr	r17
	ror r16
    6ef0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6ef2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6ef4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6ef6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6ef8:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    6efc:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    6f00:	03 c0       	rjmp	.+6      	; 0x6f08 <ch4_end>

00006f02 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6f02:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6f04:	1a 95       	dec	r17
	brne .-4
    6f06:	f1 f7       	brne	.-4      	; 0x6f04 <ch4_no_shift+0x2>

00006f08 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6f08:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    6f0c:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6f0e:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6f10:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6f12:	21 ff       	sbrs	r18, 1
	rjmp .
    6f14:	00 c0       	rjmp	.+0      	; 0x6f16 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6f16:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6f18:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6f1a:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    6f1e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6f20:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f22:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6f24:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6f26:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    6f2a:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    6f2e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6f30:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    6f34:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    6f38:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    6f3c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6f3e:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    6f42:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6f44:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6f46:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6f48:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    6f4c:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    6f50:	00 19       	sub	r16, r0
	sbc r17,r1
    6f52:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6f54:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    6f58:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    6f5c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6f5e:	f1 05       	cpc	r31, r1
	brlo .+2
    6f60:	08 f0       	brcs	.+2      	; 0x6f64 <ch4_end+0x5c>
	movw ZL,r16
    6f62:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6f64:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    6f68:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    6f6c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6f6e:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    6f72:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6f74:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f76:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6f78:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6f7a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6f7c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6f7e:	d0 05       	cpc	r29, r0
	brlt .+2
    6f80:	0c f0       	brlt	.+2      	; 0x6f84 <ch4_end+0x7c>
	ldi r28,127
    6f82:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6f84:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6f86:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6f88:	d0 05       	cpc	r29, r0
	brge .+2
    6f8a:	0c f4       	brge	.+2      	; 0x6f8e <ch4_end+0x86>
	ldi r28,-128
    6f8c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6f8e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6f90:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6f94:	df 91       	pop	r29
	pop r28
    6f96:	cf 91       	pop	r28
	pop r18
    6f98:	2f 91       	pop	r18
	pop r17
    6f9a:	1f 91       	pop	r17
	pop r16
    6f9c:	0f 91       	pop	r16
	
	ret
    6f9e:	08 95       	ret

00006fa0 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6fa0:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    6fa4:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    6fa8:	08 95       	ret

00006faa <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6faa:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6fac:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6fae:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    6fb0:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6fb2:	68 e1       	ldi	r22, 0x18	; 24

00006fb4 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6fb4:	6d 93       	st	X+, r22
	sbiw r30,1
    6fb6:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6fb8:	e9 f7       	brne	.-6      	; 0x6fb4 <fill_vram_loop>

	clr r1
    6fba:	11 24       	eor	r1, r1

	ret
    6fbc:	08 95       	ret

00006fbe <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    6fbe:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    6fc2:	45 0f       	add	r20, r21
	rjmp SetTile	
    6fc4:	00 c0       	rjmp	.+0      	; 0x6fc6 <SetTile>

00006fc6 <SetTile>:

	ret

#else

	clr r25
    6fc6:	99 27       	eor	r25, r25
	clr r23	
    6fc8:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6fca:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    6fcc:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    6fce:	08 0e       	add	r0, r24
	adc r1,r25
    6fd0:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6fd2:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    6fd4:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    6fd6:	a0 0d       	add	r26, r0
	adc XH,r1
    6fd8:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6fda:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    6fdc:	4c 93       	st	X, r20

	clr r1
    6fde:	11 24       	eor	r1, r1

	ret
    6fe0:	08 95       	ret

00006fe2 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6fe2:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    6fe6:	08 95       	ret

00006fe8 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6fe8:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    6fec:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    6ff0:	08 95       	ret

00006ff2 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6ff2:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    6ff6:	81 70       	andi	r24, 0x01	; 1
	ret
    6ff8:	08 95       	ret

00006ffa <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6ffa:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    6ffe:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7000:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    7004:	08 95       	ret

00007006 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7006:	88 23       	and	r24, r24
	brne rj_p2
    7008:	29 f4       	brne	.+10     	; 0x7014 <rj_p2>
		
	lds r24,joypad1_status_lo
    700a:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    700e:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    7012:	08 95       	ret

00007014 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7014:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    7018:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    701c:	08 95       	ret

0000701e <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    701e:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7020:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7022:	f1 f7       	brne	.-4      	; 0x7020 <WaitUs+0x2>
	nop
    7024:	00 00       	nop
	sbiw r24,1
    7026:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7028:	d1 f7       	brne	.-12     	; 0x701e <WaitUs>

	ret
    702a:	08 95       	ret

0000702c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    702c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    702e:	fe cf       	rjmp	.-4      	; 0x702c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7030:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7032:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7034:	60 bd       	out	0x20, r22	; 32
   cli
    7036:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7038:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    703a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    703c:	78 94       	sei
   ret
    703e:	08 95       	ret

00007040 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7040:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7042:	fe cf       	rjmp	.-4      	; 0x7040 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7044:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7046:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7048:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    704a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    704c:	80 b5       	in	r24, 0x20	; 32
   sei
    704e:	78 94       	sei
   ret
    7050:	08 95       	ret

00007052 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7052:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7054:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7058:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    705c:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    705e:	80 93 81 00 	sts	0x0081, r24

		cli
    7062:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7064:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7066:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    706a:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    706c:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7070:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7072:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7076:	90 93 60 00 	sts	0x0060, r25
	
		sei
    707a:	78 94       	sei

0000707c <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    707c:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    7080:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7082:	e0 f3       	brcs	.-8      	; 0x707c <wait>

		ret
    7084:	08 95       	ret

00007086 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    7086:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    708a:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    708e:	08 95       	ret

00007090 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7090:	0f 93       	push	r16
		push r17
    7092:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    7094:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7096:	0f 93       	push	r16

		lds r16,sync_pulse
    7098:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    709c:	03 95       	inc	r16
		sts sync_pulse,r16
    709e:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    70a2:	00 fd       	sbrc	r16, 0
		rjmp 1f
    70a4:	08 c0       	rjmp	.+16     	; 0x70b6 <__vector_8+0x26>
		lds r17,random_value
    70a6:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    70aa:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    70ae:	10 27       	eor	r17, r16
		sts random_value,r17
    70b0:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    70b4:	07 c0       	rjmp	.+14     	; 0x70c4 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    70b6:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    70ba:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    70be:	10 27       	eor	r17, r16
		sts random_value+1,r17
    70c0:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    70c4:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    70c6:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    70ca:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    70cc:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    70ce:	1f 91       	pop	r17
		pop r16
    70d0:	0f 91       	pop	r16
		reti
    70d2:	18 95       	reti

000070d4 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    70d4:	98 e0       	ldi	r25, 0x08	; 8
    70d6:	88 e1       	ldi	r24, 0x18	; 24
    70d8:	0f b6       	in	r0, 0x3f	; 63
    70da:	f8 94       	cli
    70dc:	a8 95       	wdr
    70de:	80 93 60 00 	sts	0x0060, r24
    70e2:	0f be       	out	0x3f, r0	; 63
    70e4:	90 93 60 00 	sts	0x0060, r25
	while(1);
    70e8:	ff cf       	rjmp	.-2      	; 0x70e8 <SoftReset+0x14>

000070ea <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    70ea:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    70ec:	c8 95       	lpm
    70ee:	c8 95       	lpm
		Wait200ns();
    70f0:	c8 95       	lpm
    70f2:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    70f4:	12 98       	cbi	0x02, 2	; 2
    70f6:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    70f8:	80 e0       	ldi	r24, 0x00	; 0
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	20 e0       	ldi	r18, 0x00	; 0
    70fe:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7100:	36 95       	lsr	r19
    7102:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7104:	96 95       	lsr	r25
    7106:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7108:	c8 95       	lpm
    710a:	c8 95       	lpm
			Wait200ns();
    710c:	c8 95       	lpm
    710e:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7110:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7112:	00 9b       	sbis	0x00, 0	; 0
    7114:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7116:	01 9b       	sbis	0x00, 1	; 0
    7118:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    711a:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    711c:	c8 95       	lpm
    711e:	c8 95       	lpm
			Wait200ns();
    7120:	c8 95       	lpm
    7122:	c8 95       	lpm
    7124:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7126:	61 f7       	brne	.-40     	; 0x7100 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7128:	30 93 f2 0a 	sts	0x0AF2, r19
    712c:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    7130:	90 93 f6 0a 	sts	0x0AF6, r25
    7134:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7138:	80 91 f1 0a 	lds	r24, 0x0AF1
    713c:	90 91 f2 0a 	lds	r25, 0x0AF2
    7140:	0f 97       	sbiw	r24, 0x0f	; 15
    7142:	31 f0       	breq	.+12     	; 0x7150 <ReadButtons+0x66>
    7144:	80 91 f5 0a 	lds	r24, 0x0AF5
    7148:	90 91 f6 0a 	lds	r25, 0x0AF6
    714c:	0f 97       	sbiw	r24, 0x0f	; 15
    714e:	11 f4       	brne	.+4      	; 0x7154 <ReadButtons+0x6a>
		SoftReset();
    7150:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <SoftReset>
    7154:	08 95       	ret

00007156 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7156:	10 92 3c 0b 	sts	0x0B3C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    715a:	00 99       	sbic	0x00, 0	; 0
    715c:	03 c0       	rjmp	.+6      	; 0x7164 <ReadControllers+0xe>
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	80 93 3c 0b 	sts	0x0B3C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7164:	01 99       	sbic	0x00, 1	; 0
    7166:	05 c0       	rjmp	.+10     	; 0x7172 <ReadControllers+0x1c>
    7168:	80 91 3c 0b 	lds	r24, 0x0B3C
    716c:	82 60       	ori	r24, 0x02	; 2
    716e:	80 93 3c 0b 	sts	0x0B3C, r24
			
	//read the standard buttons
	ReadButtons();
    7172:	0c 94 75 38 	jmp	0x70ea	; 0x70ea <ReadButtons>

00007176 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7176:	cf 93       	push	r28
    7178:	df 93       	push	r29
    717a:	c0 e0       	ldi	r28, 0x00	; 0
    717c:	d0 e0       	ldi	r29, 0x00	; 0
    717e:	fe 01       	movw	r30, r28
    7180:	e0 55       	subi	r30, 0x50	; 80
    7182:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7184:	64 91       	lpm	r22, Z
    7186:	ce 01       	movw	r24, r28
    7188:	0e 94 16 38 	call	0x702c	; 0x702c <WriteEeprom>
    718c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    718e:	c0 32       	cpi	r28, 0x20	; 32
    7190:	d1 05       	cpc	r29, r1
    7192:	a9 f7       	brne	.-22     	; 0x717e <FormatEeprom+0x8>
    7194:	c0 e2       	ldi	r28, 0x20	; 32
    7196:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7198:	6f ef       	ldi	r22, 0xFF	; 255
    719a:	ce 01       	movw	r24, r28
    719c:	0e 94 16 38 	call	0x702c	; 0x702c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    71a0:	6f ef       	ldi	r22, 0xFF	; 255
    71a2:	ce 01       	movw	r24, r28
    71a4:	01 96       	adiw	r24, 0x01	; 1
    71a6:	0e 94 16 38 	call	0x702c	; 0x702c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    71aa:	a0 96       	adiw	r28, 0x20	; 32
    71ac:	c1 15       	cp	r28, r1
    71ae:	88 e0       	ldi	r24, 0x08	; 8
    71b0:	d8 07       	cpc	r29, r24
    71b2:	91 f7       	brne	.-28     	; 0x7198 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    71b4:	df 91       	pop	r29
    71b6:	cf 91       	pop	r28
    71b8:	08 95       	ret

000071ba <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    71ba:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    71bc:	80 e0       	ldi	r24, 0x00	; 0
    71be:	90 e0       	ldi	r25, 0x00	; 0
    71c0:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    71c4:	c8 2f       	mov	r28, r24
    71c6:	81 e0       	ldi	r24, 0x01	; 1
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    71ce:	28 2f       	mov	r18, r24
    71d0:	30 e0       	ldi	r19, 0x00	; 0
    71d2:	32 2f       	mov	r19, r18
    71d4:	22 27       	eor	r18, r18
    71d6:	2c 0f       	add	r18, r28
    71d8:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    71da:	81 e0       	ldi	r24, 0x01	; 1
    71dc:	2a 35       	cpi	r18, 0x5A	; 90
    71de:	35 45       	sbci	r19, 0x55	; 85
    71e0:	09 f0       	breq	.+2      	; 0x71e4 <isEepromFormatted+0x2a>
    71e2:	80 e0       	ldi	r24, 0x00	; 0
}
    71e4:	cf 91       	pop	r28
    71e6:	08 95       	ret

000071e8 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    71e8:	cf 92       	push	r12
    71ea:	df 92       	push	r13
    71ec:	ef 92       	push	r14
    71ee:	ff 92       	push	r15
    71f0:	0f 93       	push	r16
    71f2:	1f 93       	push	r17
    71f4:	cf 93       	push	r28
    71f6:	df 93       	push	r29
    71f8:	1f 92       	push	r1
    71fa:	cd b7       	in	r28, 0x3d	; 61
    71fc:	de b7       	in	r29, 0x3e	; 62
    71fe:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7200:	0e 94 dd 38 	call	0x71ba	; 0x71ba <isEepromFormatted>
    7204:	88 23       	and	r24, r24
    7206:	09 f4       	brne	.+2      	; 0x720a <EepromWriteBlock+0x22>
    7208:	4d c0       	rjmp	.+154    	; 0x72a4 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    720a:	f6 01       	movw	r30, r12
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	8f 3f       	cpi	r24, 0xFF	; 255
    7212:	ff ef       	ldi	r31, 0xFF	; 255
    7214:	9f 07       	cpc	r25, r31
    7216:	09 f4       	brne	.+2      	; 0x721a <EepromWriteBlock+0x32>
    7218:	47 c0       	rjmp	.+142    	; 0x72a8 <EepromWriteBlock+0xc0>
    721a:	8a 35       	cpi	r24, 0x5A	; 90
    721c:	95 45       	sbci	r25, 0x55	; 85
    721e:	09 f4       	brne	.+2      	; 0x7222 <EepromWriteBlock+0x3a>
    7220:	43 c0       	rjmp	.+134    	; 0x72a8 <EepromWriteBlock+0xc0>
    7222:	00 e2       	ldi	r16, 0x20	; 32
    7224:	10 e0       	ldi	r17, 0x00	; 0
    7226:	f1 2c       	mov	r15, r1
    7228:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    722a:	c8 01       	movw	r24, r16
    722c:	49 83       	std	Y+1, r20	; 0x01
    722e:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    7232:	e8 2e       	mov	r14, r24
    7234:	c8 01       	movw	r24, r16
    7236:	01 96       	adiw	r24, 0x01	; 1
    7238:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    723c:	28 2f       	mov	r18, r24
    723e:	30 e0       	ldi	r19, 0x00	; 0
    7240:	32 2f       	mov	r19, r18
    7242:	22 27       	eor	r18, r18
    7244:	c9 01       	movw	r24, r18
    7246:	8e 0d       	add	r24, r14
    7248:	91 1d       	adc	r25, r1
		if(id==block->id){
    724a:	f6 01       	movw	r30, r12
    724c:	20 81       	ld	r18, Z
    724e:	31 81       	ldd	r19, Z+1	; 0x01
    7250:	49 81       	ldd	r20, Y+1	; 0x01
    7252:	82 17       	cp	r24, r18
    7254:	93 07       	cpc	r25, r19
    7256:	19 f4       	brne	.+6      	; 0x725e <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7258:	ff 20       	and	r15, r15
    725a:	89 f0       	breq	.+34     	; 0x727e <EepromWriteBlock+0x96>
    725c:	0c c0       	rjmp	.+24     	; 0x7276 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    725e:	01 96       	adiw	r24, 0x01	; 1
    7260:	19 f4       	brne	.+6      	; 0x7268 <EepromWriteBlock+0x80>
    7262:	f1 10       	cpse	r15, r1
    7264:	01 c0       	rjmp	.+2      	; 0x7268 <EepromWriteBlock+0x80>
    7266:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7268:	4f 5f       	subi	r20, 0xFF	; 255
    726a:	00 5e       	subi	r16, 0xE0	; 224
    726c:	1f 4f       	sbci	r17, 0xFF	; 255
    726e:	40 34       	cpi	r20, 0x40	; 64
    7270:	e1 f6       	brne	.-72     	; 0x722a <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7272:	ff 20       	and	r15, r15
    7274:	d9 f0       	breq	.+54     	; 0x72ac <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7276:	20 e2       	ldi	r18, 0x20	; 32
    7278:	f2 9e       	mul	r15, r18
    727a:	80 01       	movw	r16, r0
    727c:	11 24       	eor	r1, r1
    727e:	76 01       	movw	r14, r12
    7280:	80 e2       	ldi	r24, 0x20	; 32
    7282:	e8 0e       	add	r14, r24
    7284:	f1 1c       	adc	r15, r1
    7286:	0c 19       	sub	r16, r12
    7288:	1d 09       	sbc	r17, r13
    728a:	c6 01       	movw	r24, r12
    728c:	80 0f       	add	r24, r16
    728e:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    7290:	f6 01       	movw	r30, r12
    7292:	61 91       	ld	r22, Z+
    7294:	6f 01       	movw	r12, r30
    7296:	0e 94 16 38 	call	0x702c	; 0x702c <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    729a:	ce 14       	cp	r12, r14
    729c:	df 04       	cpc	r13, r15
    729e:	a9 f7       	brne	.-22     	; 0x728a <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    72a0:	80 e0       	ldi	r24, 0x00	; 0
    72a2:	05 c0       	rjmp	.+10     	; 0x72ae <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    72a4:	84 e0       	ldi	r24, 0x04	; 4
    72a6:	03 c0       	rjmp	.+6      	; 0x72ae <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    72a8:	81 e0       	ldi	r24, 0x01	; 1
    72aa:	01 c0       	rjmp	.+2      	; 0x72ae <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    72ac:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    72ae:	0f 90       	pop	r0
    72b0:	df 91       	pop	r29
    72b2:	cf 91       	pop	r28
    72b4:	1f 91       	pop	r17
    72b6:	0f 91       	pop	r16
    72b8:	ff 90       	pop	r15
    72ba:	ef 90       	pop	r14
    72bc:	df 90       	pop	r13
    72be:	cf 90       	pop	r12
    72c0:	08 95       	ret

000072c2 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    72c2:	df 92       	push	r13
    72c4:	ef 92       	push	r14
    72c6:	ff 92       	push	r15
    72c8:	0f 93       	push	r16
    72ca:	1f 93       	push	r17
    72cc:	cf 93       	push	r28
    72ce:	df 93       	push	r29
    72d0:	7c 01       	movw	r14, r24
    72d2:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    72d4:	0e 94 dd 38 	call	0x71ba	; 0x71ba <isEepromFormatted>
    72d8:	88 23       	and	r24, r24
    72da:	89 f1       	breq	.+98     	; 0x733e <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    72dc:	8f ef       	ldi	r24, 0xFF	; 255
    72de:	e8 16       	cp	r14, r24
    72e0:	f8 06       	cpc	r15, r24
    72e2:	79 f1       	breq	.+94     	; 0x7342 <EepromReadBlock+0x80>
    72e4:	00 e0       	ldi	r16, 0x00	; 0
    72e6:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    72e8:	c8 01       	movw	r24, r16
    72ea:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    72ee:	d8 2e       	mov	r13, r24
    72f0:	c8 01       	movw	r24, r16
    72f2:	01 96       	adiw	r24, 0x01	; 1
    72f4:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    72f8:	28 2f       	mov	r18, r24
    72fa:	30 e0       	ldi	r19, 0x00	; 0
    72fc:	32 2f       	mov	r19, r18
    72fe:	22 27       	eor	r18, r18
    7300:	2d 0d       	add	r18, r13
    7302:	31 1d       	adc	r19, r1
		if(id==blockId){
    7304:	2e 15       	cp	r18, r14
    7306:	3f 05       	cpc	r19, r15
    7308:	39 f4       	brne	.+14     	; 0x7318 <EepromReadBlock+0x56>
    730a:	7e 01       	movw	r14, r28
    730c:	80 e2       	ldi	r24, 0x20	; 32
    730e:	e8 0e       	add	r14, r24
    7310:	f1 1c       	adc	r15, r1
    7312:	0c 1b       	sub	r16, r28
    7314:	1d 0b       	sbc	r17, r29
    7316:	08 c0       	rjmp	.+16     	; 0x7328 <EepromReadBlock+0x66>
    7318:	00 5e       	subi	r16, 0xE0	; 224
    731a:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    731c:	01 15       	cp	r16, r1
    731e:	84 e0       	ldi	r24, 0x04	; 4
    7320:	18 07       	cpc	r17, r24
    7322:	11 f7       	brne	.-60     	; 0x72e8 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7324:	83 e0       	ldi	r24, 0x03	; 3
    7326:	0e c0       	rjmp	.+28     	; 0x7344 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7328:	ce 01       	movw	r24, r28
    732a:	80 0f       	add	r24, r16
    732c:	91 1f       	adc	r25, r17
    732e:	0e 94 20 38 	call	0x7040	; 0x7040 <ReadEeprom>
    7332:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7334:	ce 15       	cp	r28, r14
    7336:	df 05       	cpc	r29, r15
    7338:	b9 f7       	brne	.-18     	; 0x7328 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    733a:	80 e0       	ldi	r24, 0x00	; 0
    733c:	03 c0       	rjmp	.+6      	; 0x7344 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    733e:	84 e0       	ldi	r24, 0x04	; 4
    7340:	01 c0       	rjmp	.+2      	; 0x7344 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7342:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    7344:	df 91       	pop	r29
    7346:	cf 91       	pop	r28
    7348:	1f 91       	pop	r17
    734a:	0f 91       	pop	r16
    734c:	ff 90       	pop	r15
    734e:	ef 90       	pop	r14
    7350:	df 90       	pop	r13
    7352:	08 95       	ret

00007354 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7354:	fc 01       	movw	r30, r24
    7356:	45 87       	std	Z+13, r20	; 0x0d
    7358:	08 95       	ret

0000735a <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    735a:	e2 e0       	ldi	r30, 0x02	; 2
    735c:	fb e0       	ldi	r31, 0x0B	; 11
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	91 e0       	ldi	r25, 0x01	; 1
    7362:	95 8b       	std	Z+21, r25	; 0x15
    7364:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7366:	43 8b       	std	Z+19, r20	; 0x13
    7368:	08 95       	ret

0000736a <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    736a:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    736c:	90 81       	ld	r25, Z
    736e:	9f 75       	andi	r25, 0x5F	; 95
    7370:	90 83       	st	Z, r25
    7372:	08 95       	ret

00007374 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    7374:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7376:	90 81       	ld	r25, Z
    7378:	90 64       	ori	r25, 0x40	; 64
    737a:	90 83       	st	Z, r25
    737c:	08 95       	ret

0000737e <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    737e:	fc 01       	movw	r30, r24
    7380:	44 87       	std	Z+12, r20	; 0x0c
    7382:	08 95       	ret

00007384 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    7384:	fc 01       	movw	r30, r24
    7386:	47 83       	std	Z+7, r20	; 0x07
    7388:	08 95       	ret

0000738a <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    738a:	fc 01       	movw	r30, r24
    738c:	40 87       	std	Z+8, r20	; 0x08
    738e:	08 95       	ret

00007390 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    7390:	1f 93       	push	r17
    7392:	cf 93       	push	r28
    7394:	df 93       	push	r29
    7396:	ec 01       	movw	r28, r24
    7398:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    739a:	29 81       	ldd	r18, Y+1	; 0x01
    739c:	30 e0       	ldi	r19, 0x00	; 0
    739e:	f9 01       	movw	r30, r18
    73a0:	ee 0f       	add	r30, r30
    73a2:	ff 1f       	adc	r31, r31
    73a4:	e8 5f       	subi	r30, 0xF8	; 248
    73a6:	f3 48       	sbci	r31, 0x83	; 131
    73a8:	65 91       	lpm	r22, Z+
    73aa:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    73ac:	f9 01       	movw	r30, r18
    73ae:	e4 0f       	add	r30, r20
    73b0:	f1 1d       	adc	r31, r1
    73b2:	47 fd       	sbrc	r20, 7
    73b4:	fa 95       	dec	r31
    73b6:	ee 0f       	add	r30, r30
    73b8:	ff 1f       	adc	r31, r31
    73ba:	e8 5f       	subi	r30, 0xF8	; 248
    73bc:	f3 48       	sbci	r31, 0x83	; 131
    73be:	85 91       	lpm	r24, Z+
    73c0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    73c2:	86 1b       	sub	r24, r22
    73c4:	97 0b       	sbc	r25, r23
    73c6:	60 91 44 0b 	lds	r22, 0x0B44
    73ca:	70 e0       	ldi	r23, 0x00	; 0
    73cc:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
	if(delta==0)delta++;
    73d0:	61 15       	cp	r22, r1
    73d2:	71 05       	cpc	r23, r1
    73d4:	11 f4       	brne	.+4      	; 0x73da <PatchCommand11+0x4a>
    73d6:	61 e0       	ldi	r22, 0x01	; 1
    73d8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    73da:	86 e0       	ldi	r24, 0x06	; 6
    73dc:	18 9f       	mul	r17, r24
    73de:	f0 01       	movw	r30, r0
    73e0:	11 24       	eor	r1, r1
    73e2:	ee 5f       	subi	r30, 0xFE	; 254
    73e4:	f4 4f       	sbci	r31, 0xF4	; 244
    73e6:	81 81       	ldd	r24, Z+1	; 0x01
    73e8:	92 81       	ldd	r25, Z+2	; 0x02
    73ea:	86 0f       	add	r24, r22
    73ec:	97 1f       	adc	r25, r23
    73ee:	92 83       	std	Z+2, r25	; 0x02
    73f0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    73f2:	7b 83       	std	Y+3, r23	; 0x03
    73f4:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    73f6:	88 81       	ld	r24, Y
    73f8:	88 60       	ori	r24, 0x08	; 8
    73fa:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    73fc:	89 81       	ldd	r24, Y+1	; 0x01
    73fe:	48 0f       	add	r20, r24
    7400:	4c 83       	std	Y+4, r20	; 0x04
}
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	08 95       	ret

0000740a <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    740a:	40 93 44 0b 	sts	0x0B44, r20
    740e:	08 95       	ret

00007410 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7410:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7412:	64 2f       	mov	r22, r20
    7414:	0c 94 a2 3d 	jmp	0x7b44	; 0x7b44 <SetMixerWave>

00007418 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    7418:	fc 01       	movw	r30, r24
    741a:	86 2f       	mov	r24, r22
	track->note+=param;
    741c:	91 81       	ldd	r25, Z+1	; 0x01
    741e:	64 2f       	mov	r22, r20
    7420:	69 0f       	add	r22, r25
    7422:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7424:	0c 94 8b 3d 	jmp	0x7b16	; 0x7b16 <SetMixerNote>

00007428 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    7428:	fc 01       	movw	r30, r24
    742a:	86 2f       	mov	r24, r22
	track->note-=param;
    742c:	91 81       	ldd	r25, Z+1	; 0x01
    742e:	69 2f       	mov	r22, r25
    7430:	64 1b       	sub	r22, r20
    7432:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7434:	0c 94 8b 3d 	jmp	0x7b16	; 0x7b16 <SetMixerNote>

00007438 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    7438:	0f 93       	push	r16
    743a:	1f 93       	push	r17
    743c:	cf 93       	push	r28
    743e:	df 93       	push	r29
    7440:	1f 92       	push	r1
    7442:	cd b7       	in	r28, 0x3d	; 61
    7444:	de b7       	in	r29, 0x3e	; 62
    7446:	8c 01       	movw	r16, r24
    7448:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    744a:	64 2f       	mov	r22, r20
    744c:	49 83       	std	Y+1, r20	; 0x01
    744e:	0e 94 8b 3d 	call	0x7b16	; 0x7b16 <SetMixerNote>
	track->note=param;
    7452:	49 81       	ldd	r20, Y+1	; 0x01
    7454:	f8 01       	movw	r30, r16
    7456:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7458:	80 81       	ld	r24, Z
    745a:	87 7f       	andi	r24, 0xF7	; 247
    745c:	80 83       	st	Z, r24
}
    745e:	0f 90       	pop	r0
    7460:	df 91       	pop	r29
    7462:	cf 91       	pop	r28
    7464:	1f 91       	pop	r17
    7466:	0f 91       	pop	r16
    7468:	08 95       	ret

0000746a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    746a:	90 93 b0 0b 	sts	0x0BB0, r25
    746e:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7472:	8f e6       	ldi	r24, 0x6F	; 111
    7474:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7478:	10 92 00 0b 	sts	0x0B00, r1
    747c:	ed e4       	ldi	r30, 0x4D	; 77
    747e:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7480:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7482:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7484:	28 e1       	ldi	r18, 0x18	; 24
    7486:	df 01       	movw	r26, r30
    7488:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    748a:	8c 93       	st	X, r24
    748c:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    748e:	1c 92       	st	X, r1
    7490:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7492:	9c 93       	st	X, r25
    7494:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7496:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    7498:	10 82       	st	Z, r1
    749a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    749c:	2c 93       	st	X, r18
    749e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    74a0:	8c 93       	st	X, r24
    74a2:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    74a4:	3b e0       	ldi	r19, 0x0B	; 11
    74a6:	eb 3b       	cpi	r30, 0xBB	; 187
    74a8:	f3 07       	cpc	r31, r19
    74aa:	69 f7       	brne	.-38     	; 0x7486 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    74ac:	08 95       	ret

000074ae <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    74ae:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    74b0:	ed 91       	ld	r30, X+
    74b2:	fc 91       	ld	r31, X
    74b4:	11 97       	sbiw	r26, 0x01	; 1
    74b6:	9f 01       	movw	r18, r30
    74b8:	2f 5f       	subi	r18, 0xFF	; 255
    74ba:	3f 4f       	sbci	r19, 0xFF	; 255
    74bc:	11 96       	adiw	r26, 0x01	; 1
    74be:	3c 93       	st	X, r19
    74c0:	2e 93       	st	-X, r18
    74c2:	e4 91       	lpm	r30, Z
    74c4:	e7 fd       	sbrc	r30, 7
    74c6:	03 c0       	rjmp	.+6      	; 0x74ce <ReadVarLen+0x20>
    74c8:	8e 2f       	mov	r24, r30
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	08 95       	ret
    {
       value &= 0x7F;
    74ce:	ef 77       	andi	r30, 0x7F	; 127
    74d0:	8e 2f       	mov	r24, r30
    74d2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    74d4:	96 95       	lsr	r25
    74d6:	98 2f       	mov	r25, r24
    74d8:	88 27       	eor	r24, r24
    74da:	97 95       	ror	r25
    74dc:	87 95       	ror	r24
    74de:	2f 5f       	subi	r18, 0xFF	; 255
    74e0:	3f 4f       	sbci	r19, 0xFF	; 255
    74e2:	f9 01       	movw	r30, r18
    74e4:	31 97       	sbiw	r30, 0x01	; 1
    74e6:	e4 91       	lpm	r30, Z
    74e8:	4e 2f       	mov	r20, r30
    74ea:	4f 77       	andi	r20, 0x7F	; 127
    74ec:	84 0f       	add	r24, r20
    74ee:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    74f0:	e7 fd       	sbrc	r30, 7
    74f2:	f0 cf       	rjmp	.-32     	; 0x74d4 <ReadVarLen+0x26>
    74f4:	2d 93       	st	X+, r18
    74f6:	3c 93       	st	X, r19
    }


    return value;
}
    74f8:	08 95       	ret

000074fa <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    74fa:	cf 92       	push	r12
    74fc:	df 92       	push	r13
    74fe:	ff 92       	push	r15
    7500:	0f 93       	push	r16
    7502:	1f 93       	push	r17
    7504:	cf 93       	push	r28
    7506:	df 93       	push	r29
    7508:	1f 92       	push	r1
    750a:	cd b7       	in	r28, 0x3d	; 61
    750c:	de b7       	in	r29, 0x3e	; 62
    750e:	18 2f       	mov	r17, r24
    7510:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7512:	c8 2e       	mov	r12, r24
    7514:	d1 2c       	mov	r13, r1
    7516:	36 e1       	ldi	r19, 0x16	; 22
    7518:	83 9f       	mul	r24, r19
    751a:	f0 01       	movw	r30, r0
    751c:	11 24       	eor	r1, r1
    751e:	e1 5c       	subi	r30, 0xC1	; 193
    7520:	f4 4f       	sbci	r31, 0xF4	; 244
    7522:	80 81       	ld	r24, Z
    7524:	f8 2e       	mov	r15, r24
    7526:	ff 1c       	adc	r15, r15
    7528:	ff 24       	eor	r15, r15
    752a:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    752c:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    752e:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7530:	9f ef       	ldi	r25, 0xFF	; 255
    7532:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    7534:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    7536:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7538:	87 7b       	andi	r24, 0xB7	; 183
    753a:	80 62       	ori	r24, 0x20	; 32
    753c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    753e:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7540:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    7542:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    7544:	13 30       	cpi	r17, 0x03	; 3
    7546:	69 f4       	brne	.+26     	; 0x7562 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    7548:	f1 10       	cpse	r15, r1
    754a:	01 c0       	rjmp	.+2      	; 0x754e <TriggerCommon+0x54>
    754c:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    754e:	81 e0       	ldi	r24, 0x01	; 1
    7550:	91 e0       	ldi	r25, 0x01	; 1
    7552:	90 93 17 0b 	sts	0x0B17, r25
    7556:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    755a:	81 e0       	ldi	r24, 0x01	; 1
    755c:	80 93 15 0b 	sts	0x0B15, r24
    7560:	3c c0       	rjmp	.+120    	; 0x75da <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    7562:	14 30       	cpi	r17, 0x04	; 4
    7564:	09 f0       	breq	.+2      	; 0x7568 <TriggerCommon+0x6e>
    7566:	2f c0       	rjmp	.+94     	; 0x75c6 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7568:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    756c:	80 91 af 0b 	lds	r24, 0x0BAF
    7570:	90 91 b0 0b 	lds	r25, 0x0BB0
    7574:	e9 e0       	ldi	r30, 0x09	; 9
    7576:	6e 9f       	mul	r22, r30
    7578:	80 0d       	add	r24, r0
    757a:	91 1d       	adc	r25, r1
    757c:	11 24       	eor	r1, r1
    757e:	fc 01       	movw	r30, r24
    7580:	31 96       	adiw	r30, 0x01	; 1
    7582:	65 91       	lpm	r22, Z+
    7584:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    7586:	70 93 1f 0b 	sts	0x0B1F, r23
    758a:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    758e:	ac 01       	movw	r20, r24
    7590:	49 5f       	subi	r20, 0xF9	; 249
    7592:	5f 4f       	sbci	r21, 0xFF	; 255
    7594:	fa 01       	movw	r30, r20
    7596:	a5 91       	lpm	r26, Z+
    7598:	b4 91       	lpm	r27, Z
    759a:	05 96       	adiw	r24, 0x05	; 5
    759c:	fc 01       	movw	r30, r24
    759e:	85 91       	lpm	r24, Z+
    75a0:	94 91       	lpm	r25, Z
    75a2:	a8 1b       	sub	r26, r24
    75a4:	b9 0b       	sbc	r27, r25
    75a6:	b0 93 21 0b 	sts	0x0B21, r27
    75aa:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    75ae:	fa 01       	movw	r30, r20
    75b0:	85 91       	lpm	r24, Z+
    75b2:	94 91       	lpm	r25, Z
    75b4:	68 0f       	add	r22, r24
    75b6:	79 1f       	adc	r23, r25
    75b8:	70 93 23 0b 	sts	0x0B23, r23
    75bc:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    75c0:	62 2f       	mov	r22, r18
    75c2:	84 e0       	ldi	r24, 0x04	; 4
    75c4:	08 c0       	rjmp	.+16     	; 0x75d6 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    75c6:	60 e0       	ldi	r22, 0x00	; 0
    75c8:	81 2f       	mov	r24, r17
    75ca:	29 83       	std	Y+1, r18	; 0x01
    75cc:	0e 94 a2 3d 	call	0x7b44	; 0x7b44 <SetMixerWave>
			SetMixerNote(channel,note);
    75d0:	29 81       	ldd	r18, Y+1	; 0x01
    75d2:	62 2f       	mov	r22, r18
    75d4:	81 2f       	mov	r24, r17
    75d6:	0e 94 8b 3d 	call	0x7b16	; 0x7b16 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    75da:	86 e1       	ldi	r24, 0x16	; 22
    75dc:	8c 9d       	mul	r24, r12
    75de:	f0 01       	movw	r30, r0
    75e0:	8d 9d       	mul	r24, r13
    75e2:	f0 0d       	add	r31, r0
    75e4:	11 24       	eor	r1, r1
    75e6:	e1 5c       	subi	r30, 0xC1	; 193
    75e8:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    75ea:	ff 20       	and	r15, r15
    75ec:	11 f0       	breq	.+4      	; 0x75f2 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    75ee:	07 87       	std	Z+15, r16	; 0x0f
    75f0:	01 c0       	rjmp	.+2      	; 0x75f4 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    75f2:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    75f4:	e0 91 af 0b 	lds	r30, 0x0BAF
    75f8:	f0 91 b0 0b 	lds	r31, 0x0BB0
    75fc:	39 e0       	ldi	r19, 0x09	; 9
    75fe:	03 9f       	mul	r16, r19
    7600:	e0 0d       	add	r30, r0
    7602:	f1 1d       	adc	r31, r1
    7604:	11 24       	eor	r1, r1
    7606:	33 96       	adiw	r30, 0x03	; 3
    7608:	85 91       	lpm	r24, Z+
    760a:	94 91       	lpm	r25, Z
	if(pos==NULL){
    760c:	00 97       	sbiw	r24, 0x00	; 0
    760e:	59 f4       	brne	.+22     	; 0x7626 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    7610:	86 e1       	ldi	r24, 0x16	; 22
    7612:	8c 9d       	mul	r24, r12
    7614:	f0 01       	movw	r30, r0
    7616:	8d 9d       	mul	r24, r13
    7618:	f0 0d       	add	r31, r0
    761a:	11 24       	eor	r1, r1
    761c:	e1 5c       	subi	r30, 0xC1	; 193
    761e:	f4 4f       	sbci	r31, 0xF4	; 244
    7620:	15 8a       	std	Z+21, r1	; 0x15
    7622:	14 8a       	std	Z+20, r1	; 0x14
    7624:	0e c0       	rjmp	.+28     	; 0x7642 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7626:	fc 01       	movw	r30, r24
    7628:	24 91       	lpm	r18, Z
    762a:	36 e1       	ldi	r19, 0x16	; 22
    762c:	3c 9d       	mul	r19, r12
    762e:	f0 01       	movw	r30, r0
    7630:	3d 9d       	mul	r19, r13
    7632:	f0 0d       	add	r31, r0
    7634:	11 24       	eor	r1, r1
    7636:	e1 5c       	subi	r30, 0xC1	; 193
    7638:	f4 4f       	sbci	r31, 0xF4	; 244
    763a:	21 8b       	std	Z+17, r18	; 0x11
    763c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    763e:	95 8b       	std	Z+21, r25	; 0x15
    7640:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7642:	0f 90       	pop	r0
    7644:	df 91       	pop	r29
    7646:	cf 91       	pop	r28
    7648:	1f 91       	pop	r17
    764a:	0f 91       	pop	r16
    764c:	ff 90       	pop	r15
    764e:	df 90       	pop	r13
    7650:	cf 90       	pop	r12
    7652:	08 95       	ret

00007654 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7654:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7656:	a8 2f       	mov	r26, r24
    7658:	b0 e0       	ldi	r27, 0x00	; 0
    765a:	96 e1       	ldi	r25, 0x16	; 22
    765c:	89 9f       	mul	r24, r25
    765e:	f0 01       	movw	r30, r0
    7660:	11 24       	eor	r1, r1
    7662:	e1 5c       	subi	r30, 0xC1	; 193
    7664:	f4 4f       	sbci	r31, 0xF4	; 244
    7666:	90 81       	ld	r25, Z
    7668:	95 ff       	sbrs	r25, 5
    766a:	02 c0       	rjmp	.+4      	; 0x7670 <TriggerNote+0x1c>
    766c:	97 fd       	sbrc	r25, 7
    766e:	28 c0       	rjmp	.+80     	; 0x76c0 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    7670:	31 11       	cpse	r19, r1
    7672:	18 c0       	rjmp	.+48     	; 0x76a4 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7674:	86 e1       	ldi	r24, 0x16	; 22
    7676:	8a 9f       	mul	r24, r26
    7678:	f0 01       	movw	r30, r0
    767a:	8b 9f       	mul	r24, r27
    767c:	f0 0d       	add	r31, r0
    767e:	11 24       	eor	r1, r1
    7680:	e1 5c       	subi	r30, 0xC1	; 193
    7682:	f4 4f       	sbci	r31, 0xF4	; 244
    7684:	85 85       	ldd	r24, Z+13	; 0x0d
    7686:	81 11       	cpse	r24, r1
    7688:	02 c0       	rjmp	.+4      	; 0x768e <TriggerNote+0x3a>
    768a:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    768c:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    768e:	86 e1       	ldi	r24, 0x16	; 22
    7690:	8a 9f       	mul	r24, r26
    7692:	f0 01       	movw	r30, r0
    7694:	8b 9f       	mul	r24, r27
    7696:	f0 0d       	add	r31, r0
    7698:	11 24       	eor	r1, r1
    769a:	e1 5c       	subi	r30, 0xC1	; 193
    769c:	f4 4f       	sbci	r31, 0xF4	; 244
    769e:	9f 7b       	andi	r25, 0xBF	; 191
    76a0:	90 83       	st	Z, r25
    76a2:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    76a4:	26 e1       	ldi	r18, 0x16	; 22
    76a6:	2a 9f       	mul	r18, r26
    76a8:	f0 01       	movw	r30, r0
    76aa:	2b 9f       	mul	r18, r27
    76ac:	f0 0d       	add	r31, r0
    76ae:	11 24       	eor	r1, r1
    76b0:	e1 5c       	subi	r30, 0xC1	; 193
    76b2:	f4 4f       	sbci	r31, 0xF4	; 244
    76b4:	9f 77       	andi	r25, 0x7F	; 127
    76b6:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    76b8:	24 2f       	mov	r18, r20
    76ba:	43 2f       	mov	r20, r19
    76bc:	0c 94 7d 3a 	jmp	0x74fa	; 0x74fa <TriggerCommon>
    76c0:	08 95       	ret

000076c2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    76c2:	5f 92       	push	r5
    76c4:	6f 92       	push	r6
    76c6:	7f 92       	push	r7
    76c8:	8f 92       	push	r8
    76ca:	9f 92       	push	r9
    76cc:	af 92       	push	r10
    76ce:	bf 92       	push	r11
    76d0:	cf 92       	push	r12
    76d2:	df 92       	push	r13
    76d4:	ef 92       	push	r14
    76d6:	ff 92       	push	r15
    76d8:	0f 93       	push	r16
    76da:	1f 93       	push	r17
    76dc:	cf 93       	push	r28
    76de:	df 93       	push	r29
    76e0:	cf e3       	ldi	r28, 0x3F	; 63
    76e2:	db e0       	ldi	r29, 0x0B	; 11
    76e4:	82 e0       	ldi	r24, 0x02	; 2
    76e6:	e8 2e       	mov	r14, r24
    76e8:	8b e0       	ldi	r24, 0x0B	; 11
    76ea:	f8 2e       	mov	r15, r24
    76ec:	d7 01       	movw	r26, r14
    76ee:	9e 01       	movw	r18, r28
    76f0:	40 e0       	ldi	r20, 0x00	; 0
    76f2:	50 e0       	ldi	r21, 0x00	; 0
    76f4:	ca 01       	movw	r24, r20
    76f6:	81 5c       	subi	r24, 0xC1	; 193
    76f8:	94 4f       	sbci	r25, 0xF4	; 244
    76fa:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    76fc:	fc 01       	movw	r30, r24
    76fe:	85 85       	ldd	r24, Z+13	; 0x0d
    7700:	88 23       	and	r24, r24
    7702:	91 f0       	breq	.+36     	; 0x7728 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    7704:	64 85       	ldd	r22, Z+12	; 0x0c
    7706:	99 27       	eor	r25, r25
    7708:	87 fd       	sbrc	r24, 7
    770a:	90 95       	com	r25
    770c:	86 0f       	add	r24, r22
    770e:	91 1d       	adc	r25, r1
    7710:	8f 3f       	cpi	r24, 0xFF	; 255
    7712:	91 05       	cpc	r25, r1
    7714:	19 f0       	breq	.+6      	; 0x771c <ProcessMusic+0x5a>
    7716:	14 f0       	brlt	.+4      	; 0x771c <ProcessMusic+0x5a>
    7718:	8f ef       	ldi	r24, 0xFF	; 255
    771a:	90 e0       	ldi	r25, 0x00	; 0
    771c:	97 ff       	sbrs	r25, 7
    771e:	02 c0       	rjmp	.+4      	; 0x7724 <ProcessMusic+0x62>
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7724:	f6 01       	movw	r30, r12
    7726:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7728:	f9 01       	movw	r30, r18
    772a:	10 81       	ld	r17, Z
    772c:	13 ff       	sbrs	r17, 3
    772e:	29 c0       	rjmp	.+82     	; 0x7782 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7730:	62 81       	ldd	r22, Z+2	; 0x02
    7732:	73 81       	ldd	r23, Z+3	; 0x03
    7734:	11 96       	adiw	r26, 0x01	; 1
    7736:	8d 91       	ld	r24, X+
    7738:	9c 91       	ld	r25, X
    773a:	12 97       	sbiw	r26, 0x02	; 2
    773c:	86 0f       	add	r24, r22
    773e:	97 1f       	adc	r25, r23
    7740:	12 96       	adiw	r26, 0x02	; 2
    7742:	9c 93       	st	X, r25
    7744:	8e 93       	st	-X, r24
    7746:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7748:	f6 01       	movw	r30, r12
    774a:	04 81       	ldd	r16, Z+4	; 0x04
    774c:	e0 2f       	mov	r30, r16
    774e:	f0 e0       	ldi	r31, 0x00	; 0
    7750:	ee 0f       	add	r30, r30
    7752:	ff 1f       	adc	r31, r31
    7754:	e8 5f       	subi	r30, 0xF8	; 248
    7756:	f3 48       	sbci	r31, 0x83	; 131
    7758:	c5 90       	lpm	r12, Z+
    775a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    775c:	16 16       	cp	r1, r22
    775e:	17 06       	cpc	r1, r23
    7760:	24 f4       	brge	.+8      	; 0x776a <ProcessMusic+0xa8>
    7762:	8c 15       	cp	r24, r12
    7764:	9d 05       	cpc	r25, r13
    7766:	30 f4       	brcc	.+12     	; 0x7774 <ProcessMusic+0xb2>
    7768:	0c c0       	rjmp	.+24     	; 0x7782 <ProcessMusic+0xc0>
    776a:	67 2b       	or	r22, r23
    776c:	51 f0       	breq	.+20     	; 0x7782 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    776e:	c8 16       	cp	r12, r24
    7770:	d9 06       	cpc	r13, r25
    7772:	38 f0       	brcs	.+14     	; 0x7782 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7774:	12 96       	adiw	r26, 0x02	; 2
    7776:	dc 92       	st	X, r13
    7778:	ce 92       	st	-X, r12
    777a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    777c:	17 7f       	andi	r17, 0xF7	; 247
    777e:	f9 01       	movw	r30, r18
    7780:	10 83       	st	Z, r17
    7782:	4a 5e       	subi	r20, 0xEA	; 234
    7784:	5f 4f       	sbci	r21, 0xFF	; 255
    7786:	2a 5e       	subi	r18, 0xEA	; 234
    7788:	3f 4f       	sbci	r19, 0xFF	; 255
    778a:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    778c:	4e 36       	cpi	r20, 0x6E	; 110
    778e:	51 05       	cpc	r21, r1
    7790:	09 f0       	breq	.+2      	; 0x7794 <ProcessMusic+0xd2>
    7792:	b0 cf       	rjmp	.-160    	; 0x76f4 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    7794:	80 91 00 0b 	lds	r24, 0x0B00
    7798:	88 23       	and	r24, r24
    779a:	09 f4       	brne	.+2      	; 0x779e <ProcessMusic+0xdc>
    779c:	cb c0       	rjmp	.+406    	; 0x7934 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    779e:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    77a0:	80 91 ad 0b 	lds	r24, 0x0BAD
    77a4:	90 91 ae 0b 	lds	r25, 0x0BAE
    77a8:	20 91 b3 0b 	lds	r18, 0x0BB3
    77ac:	30 91 b4 0b 	lds	r19, 0x0BB4
    77b0:	82 17       	cp	r24, r18
    77b2:	93 07       	cpc	r25, r19
    77b4:	09 f0       	breq	.+2      	; 0x77b8 <ProcessMusic+0xf6>
    77b6:	b9 c0       	rjmp	.+370    	; 0x792a <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    77b8:	20 91 b6 0b 	lds	r18, 0x0BB6
    77bc:	30 91 b7 0b 	lds	r19, 0x0BB7
    77c0:	b9 01       	movw	r22, r18
    77c2:	6f 5f       	subi	r22, 0xFF	; 255
    77c4:	7f 4f       	sbci	r23, 0xFF	; 255
    77c6:	70 93 b7 0b 	sts	0x0BB7, r23
    77ca:	60 93 b6 0b 	sts	0x0BB6, r22
    77ce:	f9 01       	movw	r30, r18
    77d0:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    77d2:	4f 3f       	cpi	r20, 0xFF	; 255
    77d4:	79 f5       	brne	.+94     	; 0x7834 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    77d6:	a9 01       	movw	r20, r18
    77d8:	4e 5f       	subi	r20, 0xFE	; 254
    77da:	5f 4f       	sbci	r21, 0xFF	; 255
    77dc:	50 93 b7 0b 	sts	0x0BB7, r21
    77e0:	40 93 b6 0b 	sts	0x0BB6, r20
    77e4:	fb 01       	movw	r30, r22
    77e6:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    77e8:	6f 32       	cpi	r22, 0x2F	; 47
    77ea:	19 f4       	brne	.+6      	; 0x77f2 <ProcessMusic+0x130>
						playSong=false;
    77ec:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    77f0:	9c c0       	rjmp	.+312    	; 0x792a <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    77f2:	66 30       	cpi	r22, 0x06	; 6
    77f4:	09 f0       	breq	.+2      	; 0x77f8 <ProcessMusic+0x136>
    77f6:	8c c0       	rjmp	.+280    	; 0x7910 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    77f8:	fa 01       	movw	r30, r20
    77fa:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    77fc:	c9 01       	movw	r24, r18
    77fe:	04 96       	adiw	r24, 0x04	; 4
    7800:	90 93 b7 0b 	sts	0x0BB7, r25
    7804:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7808:	f9 01       	movw	r30, r18
    780a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    780c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    780e:	e3 35       	cpi	r30, 0x53	; 83
    7810:	29 f4       	brne	.+10     	; 0x781c <ProcessMusic+0x15a>
							loopStart=songPos;
    7812:	90 93 b9 0b 	sts	0x0BB9, r25
    7816:	80 93 b8 0b 	sts	0x0BB8, r24
    781a:	7a c0       	rjmp	.+244    	; 0x7910 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    781c:	e5 34       	cpi	r30, 0x45	; 69
    781e:	09 f0       	breq	.+2      	; 0x7822 <ProcessMusic+0x160>
    7820:	77 c0       	rjmp	.+238    	; 0x7910 <ProcessMusic+0x24e>
							songPos=loopStart;
    7822:	80 91 b8 0b 	lds	r24, 0x0BB8
    7826:	90 91 b9 0b 	lds	r25, 0x0BB9
    782a:	90 93 b7 0b 	sts	0x0BB7, r25
    782e:	80 93 b6 0b 	sts	0x0BB6, r24
    7832:	6e c0       	rjmp	.+220    	; 0x7910 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7834:	47 fd       	sbrc	r20, 7
    7836:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    783a:	90 91 b1 0b 	lds	r25, 0x0BB1
    783e:	89 2f       	mov	r24, r25
    7840:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7842:	47 ff       	sbrs	r20, 7
    7844:	08 c0       	rjmp	.+16     	; 0x7856 <ProcessMusic+0x194>
    7846:	2e 5f       	subi	r18, 0xFE	; 254
    7848:	3f 4f       	sbci	r19, 0xFF	; 255
    784a:	30 93 b7 0b 	sts	0x0BB7, r19
    784e:	20 93 b6 0b 	sts	0x0BB6, r18
    7852:	fb 01       	movw	r30, r22
    7854:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7856:	90 7f       	andi	r25, 0xF0	; 240
    7858:	90 3b       	cpi	r25, 0xB0	; 176
    785a:	e1 f0       	breq	.+56     	; 0x7894 <ProcessMusic+0x1d2>
    785c:	90 3c       	cpi	r25, 0xC0	; 192
    785e:	09 f4       	brne	.+2      	; 0x7862 <ProcessMusic+0x1a0>
    7860:	51 c0       	rjmp	.+162    	; 0x7904 <ProcessMusic+0x242>
    7862:	90 39       	cpi	r25, 0x90	; 144
    7864:	09 f0       	breq	.+2      	; 0x7868 <ProcessMusic+0x1a6>
    7866:	54 c0       	rjmp	.+168    	; 0x7910 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7868:	e0 91 b6 0b 	lds	r30, 0x0BB6
    786c:	f0 91 b7 0b 	lds	r31, 0x0BB7
    7870:	9f 01       	movw	r18, r30
    7872:	2f 5f       	subi	r18, 0xFF	; 255
    7874:	3f 4f       	sbci	r19, 0xFF	; 255
    7876:	30 93 b7 0b 	sts	0x0BB7, r19
    787a:	20 93 b6 0b 	sts	0x0BB6, r18
    787e:	24 91       	lpm	r18, Z
    7880:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7882:	18 9f       	mul	r17, r24
    7884:	f0 01       	movw	r30, r0
    7886:	11 24       	eor	r1, r1
    7888:	e1 5c       	subi	r30, 0xC1	; 193
    788a:	f4 4f       	sbci	r31, 0xF4	; 244
    788c:	66 85       	ldd	r22, Z+14	; 0x0e
    788e:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
    7892:	3e c0       	rjmp	.+124    	; 0x7910 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7894:	e0 91 b6 0b 	lds	r30, 0x0BB6
    7898:	f0 91 b7 0b 	lds	r31, 0x0BB7
    789c:	9f 01       	movw	r18, r30
    789e:	2f 5f       	subi	r18, 0xFF	; 255
    78a0:	3f 4f       	sbci	r19, 0xFF	; 255
    78a2:	30 93 b7 0b 	sts	0x0BB7, r19
    78a6:	20 93 b6 0b 	sts	0x0BB6, r18
    78aa:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    78ac:	47 30       	cpi	r20, 0x07	; 7
    78ae:	49 f4       	brne	.+18     	; 0x78c2 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    78b0:	18 9f       	mul	r17, r24
    78b2:	d0 01       	movw	r26, r0
    78b4:	11 24       	eor	r1, r1
    78b6:	a1 5c       	subi	r26, 0xC1	; 193
    78b8:	b4 4f       	sbci	r27, 0xF4	; 244
    78ba:	ee 0f       	add	r30, r30
    78bc:	1a 96       	adiw	r26, 0x0a	; 10
    78be:	ec 93       	st	X, r30
    78c0:	27 c0       	rjmp	.+78     	; 0x7910 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    78c2:	4b 30       	cpi	r20, 0x0B	; 11
    78c4:	49 f4       	brne	.+18     	; 0x78d8 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    78c6:	18 9f       	mul	r17, r24
    78c8:	d0 01       	movw	r26, r0
    78ca:	11 24       	eor	r1, r1
    78cc:	a1 5c       	subi	r26, 0xC1	; 193
    78ce:	b4 4f       	sbci	r27, 0xF4	; 244
    78d0:	ee 0f       	add	r30, r30
    78d2:	19 96       	adiw	r26, 0x09	; 9
    78d4:	ec 93       	st	X, r30
    78d6:	1c c0       	rjmp	.+56     	; 0x7910 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    78d8:	4c 35       	cpi	r20, 0x5C	; 92
    78da:	49 f4       	brne	.+18     	; 0x78ee <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    78dc:	18 9f       	mul	r17, r24
    78de:	d0 01       	movw	r26, r0
    78e0:	11 24       	eor	r1, r1
    78e2:	a1 5c       	subi	r26, 0xC1	; 193
    78e4:	b4 4f       	sbci	r27, 0xF4	; 244
    78e6:	ee 0f       	add	r30, r30
    78e8:	17 96       	adiw	r26, 0x07	; 7
    78ea:	ec 93       	st	X, r30
    78ec:	11 c0       	rjmp	.+34     	; 0x7910 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    78ee:	44 36       	cpi	r20, 0x64	; 100
    78f0:	79 f4       	brne	.+30     	; 0x7910 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    78f2:	18 9f       	mul	r17, r24
    78f4:	d0 01       	movw	r26, r0
    78f6:	11 24       	eor	r1, r1
    78f8:	a1 5c       	subi	r26, 0xC1	; 193
    78fa:	b4 4f       	sbci	r27, 0xF4	; 244
    78fc:	ee 0f       	add	r30, r30
    78fe:	18 96       	adiw	r26, 0x08	; 8
    7900:	ec 93       	st	X, r30
    7902:	06 c0       	rjmp	.+12     	; 0x7910 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7904:	18 9f       	mul	r17, r24
    7906:	f0 01       	movw	r30, r0
    7908:	11 24       	eor	r1, r1
    790a:	e1 5c       	subi	r30, 0xC1	; 193
    790c:	f4 4f       	sbci	r31, 0xF4	; 244
    790e:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7910:	86 eb       	ldi	r24, 0xB6	; 182
    7912:	9b e0       	ldi	r25, 0x0B	; 11
    7914:	0e 94 57 3a 	call	0x74ae	; 0x74ae <ReadVarLen>
    7918:	90 93 b4 0b 	sts	0x0BB4, r25
    791c:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    7920:	10 92 ae 0b 	sts	0x0BAE, r1
    7924:	10 92 ad 0b 	sts	0x0BAD, r1
    7928:	3b cf       	rjmp	.-394    	; 0x77a0 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    792a:	01 96       	adiw	r24, 0x01	; 1
    792c:	90 93 ae 0b 	sts	0x0BAE, r25
    7930:	80 93 ad 0b 	sts	0x0BAD, r24
    7934:	95 e4       	ldi	r25, 0x45	; 69
    7936:	a9 2e       	mov	r10, r25
    7938:	9b e0       	ldi	r25, 0x0B	; 11
    793a:	b9 2e       	mov	r11, r25
    793c:	01 e5       	ldi	r16, 0x51	; 81
    793e:	1b e0       	ldi	r17, 0x0B	; 11
    7940:	20 e5       	ldi	r18, 0x50	; 80
    7942:	c2 2e       	mov	r12, r18
    7944:	2b e0       	ldi	r18, 0x0B	; 11
    7946:	d2 2e       	mov	r13, r18
    7948:	32 e5       	ldi	r19, 0x52	; 82
    794a:	83 2e       	mov	r8, r19
    794c:	3b e0       	ldi	r19, 0x0B	; 11
    794e:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7950:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7952:	66 24       	eor	r6, r6
    7954:	6a 94       	dec	r6
    7956:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7958:	88 81       	ld	r24, Y
    795a:	86 fd       	sbrc	r24, 6
    795c:	43 c0       	rjmp	.+134    	; 0x79e4 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    795e:	8c 89       	ldd	r24, Y+20	; 0x14
    7960:	9d 89       	ldd	r25, Y+21	; 0x15
    7962:	89 2b       	or	r24, r25
    7964:	09 f4       	brne	.+2      	; 0x7968 <ProcessMusic+0x2a6>
    7966:	3a c0       	rjmp	.+116    	; 0x79dc <ProcessMusic+0x31a>
    7968:	d8 01       	movw	r26, r16
    796a:	9c 91       	ld	r25, X
    796c:	f6 01       	movw	r30, r12
    796e:	80 81       	ld	r24, Z
    7970:	98 17       	cp	r25, r24
    7972:	08 f4       	brcc	.+2      	; 0x7976 <ProcessMusic+0x2b4>
    7974:	33 c0       	rjmp	.+102    	; 0x79dc <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7976:	d8 01       	movw	r26, r16
    7978:	9c 91       	ld	r25, X
    797a:	f6 01       	movw	r30, r12
    797c:	80 81       	ld	r24, Z
    797e:	98 13       	cpse	r25, r24
    7980:	2d c0       	rjmp	.+90     	; 0x79dc <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7982:	ec 89       	ldd	r30, Y+20	; 0x14
    7984:	fd 89       	ldd	r31, Y+21	; 0x15
    7986:	af 01       	movw	r20, r30
    7988:	4f 5f       	subi	r20, 0xFF	; 255
    798a:	5f 4f       	sbci	r21, 0xFF	; 255
    798c:	5d 8b       	std	Y+21, r21	; 0x15
    798e:	4c 8b       	std	Y+20, r20	; 0x14
    7990:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    7992:	8f 3f       	cpi	r24, 0xFF	; 255
    7994:	31 f4       	brne	.+12     	; 0x79a2 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7996:	88 81       	ld	r24, Y
    7998:	8f 77       	andi	r24, 0x7F	; 127
    799a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    799c:	1d 8a       	std	Y+21, r1	; 0x15
    799e:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    79a0:	1d c0       	rjmp	.+58     	; 0x79dc <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    79a2:	32 96       	adiw	r30, 0x02	; 2
    79a4:	fd 8b       	std	Y+21, r31	; 0x15
    79a6:	ec 8b       	std	Y+20, r30	; 0x14
    79a8:	fa 01       	movw	r30, r20
    79aa:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    79ac:	e8 2f       	mov	r30, r24
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	ee 0f       	add	r30, r30
    79b2:	ff 1f       	adc	r31, r31
    79b4:	e0 53       	subi	r30, 0x30	; 48
    79b6:	ff 4f       	sbci	r31, 0xFF	; 255
    79b8:	25 91       	lpm	r18, Z+
    79ba:	34 91       	lpm	r19, Z
    79bc:	65 2d       	mov	r22, r5
    79be:	ce 01       	movw	r24, r28
    79c0:	f9 01       	movw	r30, r18
    79c2:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    79c4:	ec 89       	ldd	r30, Y+20	; 0x14
    79c6:	fd 89       	ldd	r31, Y+21	; 0x15
    79c8:	cf 01       	movw	r24, r30
    79ca:	01 96       	adiw	r24, 0x01	; 1
    79cc:	9d 8b       	std	Y+21, r25	; 0x15
    79ce:	8c 8b       	std	Y+20, r24	; 0x14
    79d0:	e4 91       	lpm	r30, Z
    79d2:	d6 01       	movw	r26, r12
    79d4:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    79d6:	f8 01       	movw	r30, r16
    79d8:	10 82       	st	Z, r1
    79da:	cd cf       	rjmp	.-102    	; 0x7976 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    79dc:	d8 01       	movw	r26, r16
    79de:	8c 91       	ld	r24, X
    79e0:	8f 5f       	subi	r24, 0xFF	; 255
    79e2:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    79e4:	98 81       	ld	r25, Y
    79e6:	95 ff       	sbrs	r25, 5
    79e8:	6c c0       	rjmp	.+216    	; 0x7ac2 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    79ea:	f4 01       	movw	r30, r8
    79ec:	80 81       	ld	r24, Z
    79ee:	8f 3f       	cpi	r24, 0xFF	; 255
    79f0:	11 f0       	breq	.+4      	; 0x79f6 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    79f2:	8f 5f       	subi	r24, 0xFF	; 255
    79f4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    79f6:	97 fd       	sbrc	r25, 7
    79f8:	04 c0       	rjmp	.+8      	; 0x7a02 <ProcessMusic+0x340>
    79fa:	f8 01       	movw	r30, r16
    79fc:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    79fe:	90 81       	ld	r25, Z
    7a00:	01 c0       	rjmp	.+2      	; 0x7a04 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7a02:	9f ef       	ldi	r25, 0xFF	; 255
    7a04:	f8 01       	movw	r30, r16
    7a06:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7a08:	80 81       	ld	r24, Z
    7a0a:	88 23       	and	r24, r24
    7a0c:	09 f4       	brne	.+2      	; 0x7a10 <ProcessMusic+0x34e>
    7a0e:	4e c0       	rjmp	.+156    	; 0x7aac <ProcessMusic+0x3ea>
    7a10:	31 96       	adiw	r30, 0x01	; 1
    7a12:	50 81       	ld	r21, Z
    7a14:	55 23       	and	r21, r21
    7a16:	09 f4       	brne	.+2      	; 0x7a1a <ProcessMusic+0x358>
    7a18:	49 c0       	rjmp	.+146    	; 0x7aac <ProcessMusic+0x3ea>
    7a1a:	99 23       	and	r25, r25
    7a1c:	09 f4       	brne	.+2      	; 0x7a20 <ProcessMusic+0x35e>
    7a1e:	46 c0       	rjmp	.+140    	; 0x7aac <ProcessMusic+0x3ea>
    7a20:	40 91 b2 0b 	lds	r20, 0x0BB2
    7a24:	44 23       	and	r20, r20
    7a26:	09 f4       	brne	.+2      	; 0x7a2a <ProcessMusic+0x368>
    7a28:	41 c0       	rjmp	.+130    	; 0x7aac <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    7a2a:	89 9f       	mul	r24, r25
    7a2c:	c0 01       	movw	r24, r0
    7a2e:	11 24       	eor	r1, r1
    7a30:	93 95       	inc	r25
				uVol>>=8;
    7a32:	89 2f       	mov	r24, r25
    7a34:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7a36:	58 9f       	mul	r21, r24
    7a38:	90 01       	movw	r18, r0
    7a3a:	59 9f       	mul	r21, r25
    7a3c:	30 0d       	add	r19, r0
    7a3e:	11 24       	eor	r1, r1
    7a40:	c9 01       	movw	r24, r18
    7a42:	93 95       	inc	r25
				uVol>>=8;
    7a44:	89 2f       	mov	r24, r25
    7a46:	99 27       	eor	r25, r25
    7a48:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    7a4a:	50 81       	ld	r21, Z
    7a4c:	58 9f       	mul	r21, r24
    7a4e:	90 01       	movw	r18, r0
    7a50:	59 9f       	mul	r21, r25
    7a52:	30 0d       	add	r19, r0
    7a54:	11 24       	eor	r1, r1
    7a56:	33 95       	inc	r19
				uVol>>=8;
    7a58:	23 2f       	mov	r18, r19
    7a5a:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7a5c:	42 9f       	mul	r20, r18
    7a5e:	c0 01       	movw	r24, r0
    7a60:	43 9f       	mul	r20, r19
    7a62:	90 0d       	add	r25, r0
    7a64:	11 24       	eor	r1, r1
    7a66:	93 95       	inc	r25
				uVol>>=8;
    7a68:	89 2f       	mov	r24, r25
    7a6a:	99 27       	eor	r25, r25
    7a6c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7a6e:	20 81       	ld	r18, Z
    7a70:	22 23       	and	r18, r18
    7a72:	f1 f0       	breq	.+60     	; 0x7ab0 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7a74:	d5 01       	movw	r26, r10
    7a76:	ec 91       	ld	r30, X
    7a78:	f0 e0       	ldi	r31, 0x00	; 0
    7a7a:	e0 50       	subi	r30, 0x00	; 0
    7a7c:	f2 48       	sbci	r31, 0x82	; 130
    7a7e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7a80:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7a82:	2e 9f       	mul	r18, r30
    7a84:	f0 01       	movw	r30, r0
    7a86:	11 24       	eor	r1, r1
    7a88:	f3 95       	inc	r31
					tVol>>=8;
    7a8a:	ef 2f       	mov	r30, r31
    7a8c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7a8e:	a3 01       	movw	r20, r6
    7a90:	4e 1b       	sub	r20, r30
    7a92:	5f 0b       	sbc	r21, r31
    7a94:	48 9f       	mul	r20, r24
    7a96:	90 01       	movw	r18, r0
    7a98:	49 9f       	mul	r20, r25
    7a9a:	30 0d       	add	r19, r0
    7a9c:	58 9f       	mul	r21, r24
    7a9e:	30 0d       	add	r19, r0
    7aa0:	11 24       	eor	r1, r1
    7aa2:	c9 01       	movw	r24, r18
    7aa4:	93 95       	inc	r25
					uVol>>=8;
    7aa6:	89 2f       	mov	r24, r25
    7aa8:	99 27       	eor	r25, r25
    7aaa:	02 c0       	rjmp	.+4      	; 0x7ab0 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7aac:	80 e0       	ldi	r24, 0x00	; 0
    7aae:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7ab0:	f5 01       	movw	r30, r10
    7ab2:	30 81       	ld	r19, Z
    7ab4:	f8 01       	movw	r30, r16
    7ab6:	3a 97       	sbiw	r30, 0x0a	; 10
    7ab8:	20 81       	ld	r18, Z
    7aba:	23 0f       	add	r18, r19
    7abc:	d5 01       	movw	r26, r10
    7abe:	2c 93       	st	X, r18
    7ac0:	02 c0       	rjmp	.+4      	; 0x7ac6 <ProcessMusic+0x404>

		}else{
			uVol=0;
    7ac2:	80 e0       	ldi	r24, 0x00	; 0
    7ac4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7ac6:	f7 01       	movw	r30, r14
    7ac8:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7aca:	53 94       	inc	r5
    7acc:	66 96       	adiw	r28, 0x16	; 22
    7ace:	f6 e0       	ldi	r31, 0x06	; 6
    7ad0:	ef 0e       	add	r14, r31
    7ad2:	f1 1c       	adc	r15, r1
    7ad4:	86 e1       	ldi	r24, 0x16	; 22
    7ad6:	a8 0e       	add	r10, r24
    7ad8:	b1 1c       	adc	r11, r1
    7ada:	0a 5e       	subi	r16, 0xEA	; 234
    7adc:	1f 4f       	sbci	r17, 0xFF	; 255
    7ade:	96 e1       	ldi	r25, 0x16	; 22
    7ae0:	c9 0e       	add	r12, r25
    7ae2:	d1 1c       	adc	r13, r1
    7ae4:	a6 e1       	ldi	r26, 0x16	; 22
    7ae6:	8a 0e       	add	r8, r26
    7ae8:	91 1c       	adc	r9, r1
    7aea:	b5 e0       	ldi	r27, 0x05	; 5
    7aec:	5b 12       	cpse	r5, r27
    7aee:	34 cf       	rjmp	.-408    	; 0x7958 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7af0:	df 91       	pop	r29
    7af2:	cf 91       	pop	r28
    7af4:	1f 91       	pop	r17
    7af6:	0f 91       	pop	r16
    7af8:	ff 90       	pop	r15
    7afa:	ef 90       	pop	r14
    7afc:	df 90       	pop	r13
    7afe:	cf 90       	pop	r12
    7b00:	bf 90       	pop	r11
    7b02:	af 90       	pop	r10
    7b04:	9f 90       	pop	r9
    7b06:	8f 90       	pop	r8
    7b08:	7f 90       	pop	r7
    7b0a:	6f 90       	pop	r6
    7b0c:	5f 90       	pop	r5
    7b0e:	08 95       	ret

00007b10 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7b10:	80 93 b2 0b 	sts	0x0BB2, r24
    7b14:	08 95       	ret

00007b16 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7b16:	99 27       	eor	r25, r25
	clr r23
    7b18:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7b1a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7b1c:	09 f4       	brne	.+2      	; 0x7b20 <set_note_waves>
		ret
    7b1e:	08 95       	ret

00007b20 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7b20:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7b22:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7b24:	66 0f       	add	r22, r22
	rol r23
    7b26:	77 1f       	adc	r23, r23
	add ZL,r22
    7b28:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7b2a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7b2c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7b2e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7b30:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7b32:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7b34:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7b36:	28 9f       	mul	r18, r24
	add ZL,r0
    7b38:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b3a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b3c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b3e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b40:	11 24       	eor	r1, r1
	

	ret
    7b42:	08 95       	ret

00007b44 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b44:	99 27       	eor	r25, r25
	clr r23
    7b46:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b48:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7b4a:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7b4c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b4e:	28 9f       	mul	r18, r24
	add ZL,r0
    7b50:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b52:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7b54:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7b56:	31 f4       	brne	.+12     	; 0x7b64 <smw1>
	lds r22,tr4_params
    7b58:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7b5c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7b5e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7b62:	0b c0       	rjmp	.+22     	; 0x7b7a <esmw>

00007b64 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7b64:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7b66:	31 f4       	brne	.+12     	; 0x7b74 <smw2>
	lds r22,tr4_params
    7b68:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7b6c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7b6e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7b72:	03 c0       	rjmp	.+6      	; 0x7b7a <esmw>

00007b74 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7b74:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7b76:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7b78:	75 83       	std	Z+5, r23	; 0x05

00007b7a <esmw>:

esmw:
	clr r1	
    7b7a:	11 24       	eor	r1, r1
	ret
    7b7c:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <ReadEeprom+0x4>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <waves+0x63a>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <ProcessMusic+0x36e>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <LBPrintStr+0x58>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <LBCollides+0x44>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <ProcessMusic+0x3c2>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <waves+0x690>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <__vector_8+0xe>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <waves+0x8c8>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <InitializeVideoMode+0xe>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <LBLineIntersect+0x4e>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <EepromReadBlock+0x18>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <ProcessMusic+0x1e>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <ProcessMusic+0x424>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <waves+0x8f8>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawMap2+0x2a>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <LBLineIntersect+0x7e>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <EepromReadBlock+0x48>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x4e>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <SetMixerNote>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <PatchCommand08+0x12>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <doFade+0x6>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <waves+0x63e>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <PatchCommand04+0xa>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <WaitVsync+0x1c>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <waves+0x626>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <waves+0x862>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <LBCollides+0x3a>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <TriggerNote+0x22>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <waves+0x88a>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <LBLineIntersect+0xe>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <TriggerNote+0x4a>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	03 09       	sbc	r16, r3
    8402:	13 1e       	adc	r1, r19
    8404:	28 31       	cpi	r18, 0x18	; 24
    8406:	3a 40       	sbci	r19, 0x0A	; 10
    8408:	46 4c       	sbci	r20, 0xC6	; 198
    840a:	50 54       	subi	r21, 0x40	; 64
    840c:	58 5b       	subi	r21, 0xB8	; 184
    840e:	5e 61       	ori	r21, 0x1E	; 30
    8410:	63 65       	ori	r22, 0x53	; 83
    8412:	67 69       	ori	r22, 0x97	; 151
    8414:	6b 6c       	ori	r22, 0xCB	; 203
    8416:	6e 6f       	ori	r22, 0xFE	; 254
    8418:	70 71       	andi	r23, 0x10	; 16
    841a:	72 73       	andi	r23, 0x32	; 50
    841c:	74 75       	andi	r23, 0x54	; 84
    841e:	76 77       	andi	r23, 0x76	; 118
    8420:	77 78       	andi	r23, 0x87	; 135
    8422:	79 79       	andi	r23, 0x99	; 153
    8424:	7a 7a       	andi	r23, 0xAA	; 170
    8426:	7b 7b       	andi	r23, 0xBB	; 187
    8428:	7c 7c       	andi	r23, 0xCC	; 204
    842a:	7c 7d       	andi	r23, 0xDC	; 220
    842c:	7d 7d       	andi	r23, 0xDD	; 221
    842e:	7e 7e       	andi	r23, 0xEE	; 238
    8430:	7e 7e       	andi	r23, 0xEE	; 238
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7e       	andi	r23, 0xEF	; 239
    844e:	7e 7e       	andi	r23, 0xEE	; 238
    8450:	7e 7d       	andi	r23, 0xDE	; 222
    8452:	7d 7d       	andi	r23, 0xDD	; 221
    8454:	7c 7c       	andi	r23, 0xCC	; 204
    8456:	7c 7b       	andi	r23, 0xBC	; 188
    8458:	7b 7a       	andi	r23, 0xAB	; 171
    845a:	7a 79       	andi	r23, 0x9A	; 154
    845c:	79 78       	andi	r23, 0x89	; 137
    845e:	77 77       	andi	r23, 0x77	; 119
    8460:	76 75       	andi	r23, 0x56	; 86
    8462:	74 73       	andi	r23, 0x34	; 52
    8464:	72 71       	andi	r23, 0x12	; 18
    8466:	70 6f       	ori	r23, 0xF0	; 240
    8468:	6e 6c       	ori	r22, 0xCE	; 206
    846a:	6b 69       	ori	r22, 0x9B	; 155
    846c:	67 65       	ori	r22, 0x57	; 87
    846e:	63 61       	ori	r22, 0x13	; 19
    8470:	5e 5b       	subi	r21, 0xBE	; 190
    8472:	58 54       	subi	r21, 0x48	; 72
    8474:	50 4c       	sbci	r21, 0xC0	; 192
    8476:	46 40       	sbci	r20, 0x06	; 6
    8478:	3a 31       	cpi	r19, 0x1A	; 26
    847a:	28 1e       	adc	r2, r24
    847c:	13 09       	sbc	r17, r3
    847e:	03 00       	.word	0x0003	; ????
    8480:	c6 cc       	rjmp	.-1652   	; 0x7e0e <waves+0xe>
    8482:	d5 db       	rcall	.-2134   	; 0x7c2e <steptable+0x26>
    8484:	df e3       	ldi	r29, 0x3F	; 63
    8486:	e5 e7       	ldi	r30, 0x75	; 117
    8488:	e9 ea       	ldi	r30, 0xA9	; 169
    848a:	eb ec       	ldi	r30, 0xCB	; 203
    848c:	ed ee       	ldi	r30, 0xED	; 237
    848e:	ef ef       	ldi	r30, 0xFF	; 255
    8490:	f0 f0       	brcs	.+60     	; 0x84ce <waves+0x6ce>
    8492:	f0 f1       	brcs	.+124    	; 0x8510 <waves+0x710>
    8494:	f1 f1       	breq	.+124    	; 0x8512 <waves+0x712>
    8496:	f1 f2       	breq	.-68     	; 0x8454 <waves+0x654>
    8498:	f2 f2       	brmi	.-68     	; 0x8456 <waves+0x656>
    849a:	f2 f2       	brmi	.-68     	; 0x8458 <waves+0x658>
    849c:	f2 f2       	brmi	.-68     	; 0x845a <waves+0x65a>
    849e:	f2 f3       	brmi	.-4      	; 0x849c <waves+0x69c>
    84a0:	f3 f3       	brvs	.-4      	; 0x849e <waves+0x69e>
    84a2:	f3 f3       	brvs	.-4      	; 0x84a0 <waves+0x6a0>
    84a4:	f3 f3       	brvs	.-4      	; 0x84a2 <waves+0x6a2>
    84a6:	f3 f3       	brvs	.-4      	; 0x84a4 <waves+0x6a4>
    84a8:	f3 f3       	brvs	.-4      	; 0x84a6 <waves+0x6a6>
    84aa:	f3 f3       	brvs	.-4      	; 0x84a8 <waves+0x6a8>
    84ac:	f3 f3       	brvs	.-4      	; 0x84aa <waves+0x6aa>
    84ae:	f3 f3       	brvs	.-4      	; 0x84ac <waves+0x6ac>
    84b0:	f3 f3       	brvs	.-4      	; 0x84ae <waves+0x6ae>
    84b2:	f3 f3       	brvs	.-4      	; 0x84b0 <waves+0x6b0>
    84b4:	f3 f3       	brvs	.-4      	; 0x84b2 <waves+0x6b2>
    84b6:	f3 f3       	brvs	.-4      	; 0x84b4 <waves+0x6b4>
    84b8:	f3 f3       	brvs	.-4      	; 0x84b6 <waves+0x6b6>
    84ba:	f3 f3       	brvs	.-4      	; 0x84b8 <waves+0x6b8>
    84bc:	f3 f3       	brvs	.-4      	; 0x84ba <waves+0x6ba>
    84be:	f3 f3       	brvs	.-4      	; 0x84bc <waves+0x6bc>
    84c0:	f3 f3       	brvs	.-4      	; 0x84be <waves+0x6be>
    84c2:	f3 f3       	brvs	.-4      	; 0x84c0 <waves+0x6c0>
    84c4:	f3 f3       	brvs	.-4      	; 0x84c2 <waves+0x6c2>
    84c6:	f3 f3       	brvs	.-4      	; 0x84c4 <waves+0x6c4>
    84c8:	f3 f3       	brvs	.-4      	; 0x84c6 <waves+0x6c6>
    84ca:	f3 f3       	brvs	.-4      	; 0x84c8 <waves+0x6c8>
    84cc:	f3 f3       	brvs	.-4      	; 0x84ca <waves+0x6ca>
    84ce:	f3 f3       	brvs	.-4      	; 0x84cc <waves+0x6cc>
    84d0:	f3 f3       	brvs	.-4      	; 0x84ce <waves+0x6ce>
    84d2:	f3 f3       	brvs	.-4      	; 0x84d0 <waves+0x6d0>
    84d4:	f3 f3       	brvs	.-4      	; 0x84d2 <waves+0x6d2>
    84d6:	f3 f3       	brvs	.-4      	; 0x84d4 <waves+0x6d4>
    84d8:	f3 f3       	brvs	.-4      	; 0x84d6 <waves+0x6d6>
    84da:	f3 f3       	brvs	.-4      	; 0x84d8 <waves+0x6d8>
    84dc:	f3 f3       	brvs	.-4      	; 0x84da <waves+0x6da>
    84de:	f3 f3       	brvs	.-4      	; 0x84dc <waves+0x6dc>
    84e0:	f2 f2       	brmi	.-68     	; 0x849e <waves+0x69e>
    84e2:	f2 f2       	brmi	.-68     	; 0x84a0 <waves+0x6a0>
    84e4:	f2 f2       	brmi	.-68     	; 0x84a2 <waves+0x6a2>
    84e6:	f2 f2       	brmi	.-68     	; 0x84a4 <waves+0x6a4>
    84e8:	f1 f1       	breq	.+124    	; 0x8566 <waves+0x766>
    84ea:	f1 f1       	breq	.+124    	; 0x8568 <waves+0x768>
    84ec:	f0 f0       	brcs	.+60     	; 0x852a <waves+0x72a>
    84ee:	f0 ef       	ldi	r31, 0xF0	; 240
    84f0:	ef ee       	ldi	r30, 0xEF	; 239
    84f2:	ed ec       	ldi	r30, 0xCD	; 205
    84f4:	eb ea       	ldi	r30, 0xAB	; 171
    84f6:	e9 e7       	ldi	r30, 0x79	; 121
    84f8:	e5 e3       	ldi	r30, 0x35	; 53
    84fa:	df db       	rcall	.-2114   	; 0x7cba <steptable+0xb2>
    84fc:	d5 cc       	rjmp	.-1622   	; 0x7ea8 <waves+0xa8>
    84fe:	c6 00       	.word	0x00c6	; ????
    8500:	00 28       	or	r0, r0
    8502:	3d 42       	sbci	r19, 0x2D	; 45
    8504:	30 2d       	mov	r19, r0
    8506:	2c 2b       	or	r18, r28
    8508:	2c 2d       	mov	r18, r12
    850a:	2e 2f       	mov	r18, r30
    850c:	30 32       	cpi	r19, 0x20	; 32
    850e:	33 35       	cpi	r19, 0x53	; 83
    8510:	37 39       	cpi	r19, 0x97	; 151
    8512:	3b 3d       	cpi	r19, 0xDB	; 219
    8514:	3f 41       	sbci	r19, 0x1F	; 31
    8516:	43 45       	sbci	r20, 0x53	; 83
    8518:	48 4a       	sbci	r20, 0xA8	; 168
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	50 53       	subi	r21, 0x30	; 48
    851e:	55 57       	subi	r21, 0x75	; 117
    8520:	59 5b       	subi	r21, 0xB9	; 185
    8522:	5d 5f       	subi	r21, 0xFD	; 253
    8524:	61 63       	ori	r22, 0x31	; 49
    8526:	65 67       	ori	r22, 0x75	; 117
    8528:	69 6b       	ori	r22, 0xB9	; 185
    852a:	6c 6e       	ori	r22, 0xEC	; 236
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 77       	andi	r23, 0x75	; 117
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7b       	andi	r23, 0xBA	; 186
    8536:	7c 7d       	andi	r23, 0xDC	; 220
    8538:	7d 7e       	andi	r23, 0xED	; 237
    853a:	7e 7f       	andi	r23, 0xFE	; 254
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7e 7e       	andi	r23, 0xEE	; 238
    8548:	7d 7d       	andi	r23, 0xDD	; 221
    854a:	7c 7b       	andi	r23, 0xBC	; 188
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 77       	andi	r23, 0x78	; 120
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6e       	ori	r23, 0xE0	; 224
    8556:	6c 6b       	ori	r22, 0xBC	; 188
    8558:	69 67       	ori	r22, 0x79	; 121
    855a:	65 63       	ori	r22, 0x35	; 53
    855c:	61 5f       	subi	r22, 0xF1	; 241
    855e:	5d 5b       	subi	r21, 0xBD	; 189
    8560:	59 57       	subi	r21, 0x79	; 121
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	50 4e       	sbci	r21, 0xE0	; 224
    8566:	4c 4a       	sbci	r20, 0xAC	; 172
    8568:	48 45       	sbci	r20, 0x58	; 88
    856a:	43 41       	sbci	r20, 0x13	; 19
    856c:	3f 3d       	cpi	r19, 0xDF	; 223
    856e:	3b 39       	cpi	r19, 0x9B	; 155
    8570:	37 35       	cpi	r19, 0x57	; 87
    8572:	33 32       	cpi	r19, 0x23	; 35
    8574:	30 2f       	mov	r19, r16
    8576:	2e 2d       	mov	r18, r14
    8578:	2c 2b       	or	r18, r28
    857a:	2c 2d       	mov	r18, r12
    857c:	30 42       	sbci	r19, 0x20	; 32
    857e:	3d 28       	or	r3, r13
    8580:	00 e9       	ldi	r16, 0x90	; 144
    8582:	e5 fe       	sbrs	r14, 5
    8584:	d4 d7       	rcall	.+4008   	; 0x952e <print_level_score+0x32>
    8586:	d7 d7       	rcall	.+4014   	; 0x9536 <print_level_score+0x3a>
    8588:	d6 d4       	rcall	.+2476   	; 0x8f36 <LBLineIntersect+0xb0>
    858a:	d2 d0       	rcall	.+420    	; 0x8730 <waves+0x930>
    858c:	ce cc       	rjmp	.-1636   	; 0x7f2a <waves+0x12a>
    858e:	ca c8       	rjmp	.-3692   	; 0x7724 <ProcessMusic+0x62>
    8590:	c6 c3       	rjmp	.+1932   	; 0x8d1e <LBGetNextFrame+0x42>
    8592:	c1 bf       	out	0x31, r28	; 49
    8594:	bd ba       	out	0x1d, r11	; 29
    8596:	b8 b6       	in	r11, 0x38	; 56
    8598:	b4 b1       	in	r27, 0x04	; 4
    859a:	af ad       	ldd	r26, Y+63	; 0x3f
    859c:	ab a9       	ldd	r26, Y+51	; 0x33
    859e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    85a2:	9f 9e       	mul	r9, r31
    85a4:	9c 9a       	sbi	0x13, 4	; 19
    85a6:	99 97       	sbiw	r26, 0x29	; 41
    85a8:	95 94       	asr	r9
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	89 88       	ldd	r8, Y+17	; 0x11
    85b4:	88 87       	std	Y+8, r24	; 0x08
    85b6:	86 85       	ldd	r24, Z+14	; 0x0e
    85b8:	85 84       	ldd	r8, Z+13	; 0x0d
    85ba:	84 84       	ldd	r8, Z+12	; 0x0c
    85bc:	83 83       	std	Z+3, r24	; 0x03
    85be:	83 83       	std	Z+3, r24	; 0x03
    85c0:	83 83       	std	Z+3, r24	; 0x03
    85c2:	83 83       	std	Z+3, r24	; 0x03
    85c4:	83 84       	ldd	r8, Z+11	; 0x0b
    85c6:	84 84       	ldd	r8, Z+12	; 0x0c
    85c8:	85 85       	ldd	r24, Z+13	; 0x0d
    85ca:	86 87       	std	Z+14, r24	; 0x0e
    85cc:	88 88       	ldd	r8, Y+16	; 0x10
    85ce:	89 8a       	std	Y+17, r8	; 0x11
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 94 	lds	r25, 0x9493
    85d8:	95 97       	sbiw	r26, 0x25	; 37
    85da:	99 9a       	sbi	0x13, 1	; 19
    85dc:	9c 9e       	mul	r9, r28
    85de:	9f a1       	ldd	r25, Y+39	; 0x27
    85e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    85e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    85e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e6:	af b1       	in	r26, 0x0f	; 15
    85e8:	b4 b6       	in	r11, 0x34	; 52
    85ea:	b8 ba       	out	0x18, r11	; 24
    85ec:	bd bf       	out	0x3d, r27	; 61
    85ee:	c1 c3       	rjmp	.+1922   	; 0x8d72 <LBGetJoyPadState+0x50>
    85f0:	c6 c8       	rjmp	.-3700   	; 0x777e <ProcessMusic+0xbc>
    85f2:	ca cc       	rjmp	.-1644   	; 0x7f88 <waves+0x188>
    85f4:	ce d0       	rcall	.+412    	; 0x8792 <waves+0x992>
    85f6:	d2 d4       	rcall	.+2468   	; 0x8f9c <LBLineIntersect+0x116>
    85f8:	d6 d7       	rcall	.+4012   	; 0x95a6 <print_final_score+0x26>
    85fa:	d7 d7       	rcall	.+4014   	; 0x95aa <print_final_score+0x2a>
    85fc:	d4 fe       	sbrs	r13, 4
    85fe:	e5 e9       	ldi	r30, 0x95	; 149
    8600:	f9 f8       	.word	0xf8f9	; ????
    8602:	f9 f5       	brne	.+126    	; 0x8682 <waves+0x882>
    8604:	eb e1       	ldi	r30, 0x1B	; 27
    8606:	dd de       	rcall	.-582    	; 0x83c2 <waves+0x5c2>
    8608:	e0 e2       	ldi	r30, 0x20	; 32
    860a:	e4 e5       	ldi	r30, 0x54	; 84
    860c:	e6 e5       	ldi	r30, 0x56	; 86
    860e:	e4 e2       	ldi	r30, 0x24	; 36
    8610:	de d9       	rcall	.-3140   	; 0x79ce <ProcessMusic+0x30c>
    8612:	d2 ca       	rjmp	.-2652   	; 0x7bb8 <esmw+0x3e>
    8614:	c1 b7       	in	r28, 0x31	; 49
    8616:	ac a2       	std	Y+36, r10	; 0x24
    8618:	99 91       	ld	r25, Y+
    861a:	8a 86       	std	Y+10, r8	; 0x0a
    861c:	83 81       	ldd	r24, Z+3	; 0x03
    861e:	80 80       	ld	r8, Z
    8620:	81 82       	std	Z+1, r8	; 0x01
    8622:	83 85       	ldd	r24, Z+11	; 0x0b
    8624:	86 88       	ldd	r8, Z+22	; 0x16
    8626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8628:	8d 8f       	std	Y+29, r24	; 0x1d
    862a:	90 92 93 95 	sts	0x9593, r9
    862e:	96 97       	sbiw	r26, 0x26	; 38
    8630:	98 99       	sbic	0x13, 0	; 19
    8632:	9a 9b       	sbis	0x13, 2	; 19
    8634:	9b 9c       	mul	r9, r11
    8636:	9d 9d       	mul	r25, r13
    8638:	9d 9e       	mul	r9, r29
    863a:	9e 9e       	mul	r9, r30
    863c:	9f 9f       	mul	r25, r31
    863e:	9f 9f       	mul	r25, r31
    8640:	9f 9f       	mul	r25, r31
    8642:	9f 9e       	mul	r9, r31
    8644:	9e 9e       	mul	r9, r30
    8646:	9d 9d       	mul	r25, r13
    8648:	9d 9c       	mul	r9, r13
    864a:	9b 9b       	sbis	0x13, 3	; 19
    864c:	9a 99       	sbic	0x13, 2	; 19
    864e:	98 97       	sbiw	r26, 0x28	; 40
    8650:	96 95       	lsr	r25
    8652:	93 92       	.word	0x9293	; ????
    8654:	90 8f       	std	Z+24, r25	; 0x18
    8656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8658:	8a 88       	ldd	r8, Y+18	; 0x12
    865a:	86 85       	ldd	r24, Z+14	; 0x0e
    865c:	83 82       	std	Z+3, r8	; 0x03
    865e:	81 80       	ldd	r8, Z+1	; 0x01
    8660:	80 81       	ld	r24, Z
    8662:	83 86       	std	Z+11, r8	; 0x0b
    8664:	8a 91       	ld	r24, -Y
    8666:	99 a2       	std	Y+33, r9	; 0x21
    8668:	ac b7       	in	r26, 0x3c	; 60
    866a:	c1 ca       	rjmp	.-2686   	; 0x7bee <esmw+0x74>
    866c:	d2 d9       	rcall	.-3164   	; 0x7a12 <ProcessMusic+0x350>
    866e:	de e2       	ldi	r29, 0x2E	; 46
    8670:	e4 e5       	ldi	r30, 0x54	; 84
    8672:	e6 e5       	ldi	r30, 0x56	; 86
    8674:	e4 e2       	ldi	r30, 0x24	; 36
    8676:	e0 de       	rcall	.-576    	; 0x8438 <waves+0x638>
    8678:	dd e1       	ldi	r29, 0x1D	; 29
    867a:	eb f5       	brvc	.+122    	; 0x86f6 <waves+0x8f6>
    867c:	f9 f8       	.word	0xf8f9	; ????
    867e:	f9 00       	.word	0x00f9	; ????
    8680:	07 08       	sbc	r0, r7
    8682:	07 0b       	sbc	r16, r23
    8684:	15 1f       	adc	r17, r21
    8686:	23 22       	and	r2, r19
    8688:	20 1e       	adc	r2, r16
    868a:	1c 1b       	sub	r17, r28
    868c:	1a 1b       	sub	r17, r26
    868e:	1c 1e       	adc	r1, r28
    8690:	22 27       	eor	r18, r18
    8692:	2e 36       	cpi	r18, 0x6E	; 110
    8694:	3f 49       	sbci	r19, 0x9F	; 159
    8696:	54 5e       	subi	r21, 0xE4	; 228
    8698:	67 6f       	ori	r22, 0xF7	; 247
    869a:	76 7a       	andi	r23, 0xA6	; 166
    869c:	7e 7f       	andi	r23, 0xFE	; 254
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7e       	andi	r23, 0xEF	; 239
    86a2:	7d 7b       	andi	r23, 0xBD	; 189
    86a4:	7a 78       	andi	r23, 0x8A	; 138
    86a6:	76 74       	andi	r23, 0x46	; 70
    86a8:	73 71       	andi	r23, 0x13	; 19
    86aa:	70 6e       	ori	r23, 0xE0	; 224
    86ac:	6d 6b       	ori	r22, 0xBD	; 189
    86ae:	6a 69       	ori	r22, 0x9A	; 154
    86b0:	68 67       	ori	r22, 0x78	; 120
    86b2:	66 65       	ori	r22, 0x56	; 86
    86b4:	65 64       	ori	r22, 0x45	; 69
    86b6:	64 63       	ori	r22, 0x34	; 52
    86b8:	63 62       	ori	r22, 0x23	; 35
    86ba:	62 62       	ori	r22, 0x22	; 34
    86bc:	61 61       	ori	r22, 0x11	; 17
    86be:	61 61       	ori	r22, 0x11	; 17
    86c0:	61 61       	ori	r22, 0x11	; 17
    86c2:	61 62       	ori	r22, 0x21	; 33
    86c4:	62 62       	ori	r22, 0x22	; 34
    86c6:	63 63       	ori	r22, 0x33	; 51
    86c8:	63 64       	ori	r22, 0x43	; 67
    86ca:	65 65       	ori	r22, 0x55	; 85
    86cc:	66 67       	ori	r22, 0x76	; 118
    86ce:	68 69       	ori	r22, 0x98	; 152
    86d0:	6a 6b       	ori	r22, 0xBA	; 186
    86d2:	6d 6e       	ori	r22, 0xED	; 237
    86d4:	70 71       	andi	r23, 0x10	; 16
    86d6:	73 74       	andi	r23, 0x43	; 67
    86d8:	76 78       	andi	r23, 0x86	; 134
    86da:	7a 7b       	andi	r23, 0xBA	; 186
    86dc:	7d 7e       	andi	r23, 0xED	; 237
    86de:	7f 7f       	andi	r23, 0xFF	; 255
    86e0:	7f 7f       	andi	r23, 0xFF	; 255
    86e2:	7e 7a       	andi	r23, 0xAE	; 174
    86e4:	76 6f       	ori	r23, 0xF6	; 246
    86e6:	67 5e       	subi	r22, 0xE7	; 231
    86e8:	54 49       	sbci	r21, 0x94	; 148
    86ea:	3f 36       	cpi	r19, 0x6F	; 111
    86ec:	2e 27       	eor	r18, r30
    86ee:	22 1e       	adc	r2, r18
    86f0:	1c 1b       	sub	r17, r28
    86f2:	1a 1b       	sub	r17, r26
    86f4:	1c 1e       	adc	r1, r28
    86f6:	20 22       	and	r2, r16
    86f8:	23 1f       	adc	r18, r19
    86fa:	15 0b       	sbc	r17, r21
    86fc:	07 08       	sbc	r0, r7
    86fe:	07 00       	.word	0x0007	; ????
    8700:	1f 31       	cpi	r17, 0x1F	; 31
    8702:	3d 44       	sbci	r19, 0x4D	; 77
    8704:	4e 53       	subi	r20, 0x3E	; 62
    8706:	54 56       	subi	r21, 0x64	; 100
    8708:	5a 5f       	subi	r21, 0xFA	; 250
    870a:	64 69       	ori	r22, 0x94	; 148
    870c:	6e 74       	andi	r22, 0x4E	; 78
    870e:	76 79       	andi	r23, 0x96	; 150
    8710:	7c 7f       	andi	r23, 0xFC	; 252
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7c       	andi	r23, 0xCF	; 207
    877c:	78 71       	andi	r23, 0x18	; 24
    877e:	68 4c       	sbci	r22, 0xC8	; 200
    8780:	2c 1c       	adc	r2, r12
    8782:	12 0c       	add	r1, r2
    8784:	0a 0b       	sbc	r16, r26
    8786:	0a 05       	cpc	r16, r10
    8788:	fd f3       	brhs	.-2      	; 0x8788 <waves+0x988>
    878a:	e9 df       	rcall	.-46     	; 0x875e <waves+0x95e>
    878c:	d4 ca       	rjmp	.-2648   	; 0x7d36 <steptable+0x12e>
    878e:	c0 b7       	in	r28, 0x30	; 48
    8790:	ae a6       	std	Y+46, r10	; 0x2e
    8792:	9e 97       	sbiw	r26, 0x2e	; 46
    8794:	91 8b       	std	Z+17, r25	; 0x11
    8796:	86 85       	ldd	r24, Z+14	; 0x0e
    8798:	82 80       	ldd	r8, Z+2	; 0x02
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 87       	std	Z+8, r24	; 0x08
    87f6:	91 9d       	mul	r25, r1
    87f8:	ac c4       	rjmp	.+2392   	; 0x9152 <init_shot_state+0x22>
    87fa:	cb d4       	rcall	.+2454   	; 0x9192 <set_shot_animations+0x2a>
    87fc:	dd f2       	brhs	.-74     	; 0x87b4 <waves+0x9b4>
    87fe:	fa fa       	.word	0xfafa	; ????

00008800 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8800:	90 91 bd 0b 	lds	r25, 0x0BBD
    8804:	e0 e9       	ldi	r30, 0x90	; 144
    8806:	fa e0       	ldi	r31, 0x0A	; 10
    8808:	80 e0       	ldi	r24, 0x00	; 0
    880a:	89 17       	cp	r24, r25
    880c:	49 f0       	breq	.+18     	; 0x8820 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    880e:	a0 81       	ld	r26, Z
    8810:	b1 81       	ldd	r27, Z+1	; 0x01
    8812:	a0 5e       	subi	r26, 0xE0	; 224
    8814:	be 4f       	sbci	r27, 0xFE	; 254
    8816:	22 81       	ldd	r18, Z+2	; 0x02
    8818:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    881a:	8f 5f       	subi	r24, 0xFF	; 255
    881c:	33 96       	adiw	r30, 0x03	; 3
    881e:	f5 cf       	rjmp	.-22     	; 0x880a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8820:	08 95       	ret

00008822 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8822:	80 93 00 01 	sts	0x0100, r24
    8826:	08 95       	ret

00008828 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8828:	2f 92       	push	r2
    882a:	3f 92       	push	r3
    882c:	4f 92       	push	r4
    882e:	5f 92       	push	r5
    8830:	6f 92       	push	r6
    8832:	7f 92       	push	r7
    8834:	8f 92       	push	r8
    8836:	9f 92       	push	r9
    8838:	af 92       	push	r10
    883a:	bf 92       	push	r11
    883c:	cf 92       	push	r12
    883e:	df 92       	push	r13
    8840:	ef 92       	push	r14
    8842:	ff 92       	push	r15
    8844:	0f 93       	push	r16
    8846:	1f 93       	push	r17
    8848:	cf 93       	push	r28
    884a:	df 93       	push	r29
    884c:	00 d0       	rcall	.+0      	; 0x884e <ProcessSprites+0x26>
    884e:	1f 92       	push	r1
    8850:	cd b7       	in	r28, 0x3d	; 61
    8852:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8854:	10 92 bd 0b 	sts	0x0BBD, r1
		if(!spritesOn) return;
    8858:	80 91 00 01 	lds	r24, 0x0100
    885c:	88 23       	and	r24, r24
    885e:	09 f4       	brne	.+2      	; 0x8862 <ProcessSprites+0x3a>
    8860:	a1 c0       	rjmp	.+322    	; 0x89a4 <ProcessSprites+0x17c>
    8862:	e8 e6       	ldi	r30, 0x68	; 104
    8864:	ce 2e       	mov	r12, r30
    8866:	e4 e0       	ldi	r30, 0x04	; 4
    8868:	de 2e       	mov	r13, r30
    886a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    886c:	f6 01       	movw	r30, r12
    886e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8870:	80 3f       	cpi	r24, 0xF0	; 240
    8872:	09 f4       	brne	.+2      	; 0x8876 <ProcessSprites+0x4e>
    8874:	79 c0       	rjmp	.+242    	; 0x8968 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8876:	91 81       	ldd	r25, Z+1	; 0x01
    8878:	29 2f       	mov	r18, r25
    887a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    887c:	28 2e       	mov	r2, r24
    887e:	26 94       	lsr	r2
    8880:	26 94       	lsr	r2
    8882:	26 94       	lsr	r2
				dx=ssx&0x7;
    8884:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8886:	19 f0       	breq	.+6      	; 0x888e <ProcessSprites+0x66>
    8888:	72 e0       	ldi	r23, 0x02	; 2
    888a:	47 2e       	mov	r4, r23
    888c:	02 c0       	rjmp	.+4      	; 0x8892 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    888e:	44 24       	eor	r4, r4
    8890:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8892:	63 e0       	ldi	r22, 0x03	; 3
    8894:	36 95       	lsr	r19
    8896:	27 95       	ror	r18
    8898:	6a 95       	dec	r22
    889a:	e1 f7       	brne	.-8      	; 0x8894 <ProcessSprites+0x6c>
    889c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    889e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    88a0:	19 f0       	breq	.+6      	; 0x88a8 <ProcessSprites+0x80>
    88a2:	52 e0       	ldi	r21, 0x02	; 2
    88a4:	55 2e       	mov	r5, r21
    88a6:	02 c0       	rjmp	.+4      	; 0x88ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    88a8:	55 24       	eor	r5, r5
    88aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88ac:	29 2f       	mov	r18, r25
    88ae:	30 e0       	ldi	r19, 0x00	; 0
    88b0:	32 2f       	mov	r19, r18
    88b2:	22 27       	eor	r18, r18
    88b4:	a9 01       	movw	r20, r18
    88b6:	48 0f       	add	r20, r24
    88b8:	51 1d       	adc	r21, r1
    88ba:	5b 83       	std	Y+3, r21	; 0x03
    88bc:	4a 83       	std	Y+2, r20	; 0x02
    88be:	e1 2c       	mov	r14, r1
    88c0:	f1 2c       	mov	r15, r1
    88c2:	94 ee       	ldi	r25, 0xE4	; 228
    88c4:	93 0d       	add	r25, r3
    88c6:	99 83       	std	Y+1, r25	; 0x01
    88c8:	03 2d       	mov	r16, r3
    88ca:	0e 0d       	add	r16, r14
    88cc:	0c 31       	cpi	r16, 0x1C	; 28
    88ce:	10 f0       	brcs	.+4      	; 0x88d4 <ProcessSprites+0xac>
    88d0:	09 81       	ldd	r16, Y+1	; 0x01
    88d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    88d4:	5e e1       	ldi	r21, 0x1E	; 30
    88d6:	05 9f       	mul	r16, r21
    88d8:	80 01       	movw	r16, r0
    88da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88dc:	be 2c       	mov	r11, r14
    88de:	aa 24       	eor	r10, r10
    88e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    88e2:	ed e1       	ldi	r30, 0x1D	; 29
    88e4:	e7 15       	cp	r30, r7
    88e6:	18 f4       	brcc	.+6      	; 0x88ee <ProcessSprites+0xc6>
    88e8:	82 ee       	ldi	r24, 0xE2	; 226
    88ea:	87 0d       	add	r24, r7
    88ec:	01 c0       	rjmp	.+2      	; 0x88f0 <ProcessSprites+0xc8>
    88ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    88f0:	a8 01       	movw	r20, r16
    88f2:	48 0f       	add	r20, r24
    88f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    88f6:	ca 01       	movw	r24, r20
    88f8:	80 5e       	subi	r24, 0xE0	; 224
    88fa:	9e 4f       	sbci	r25, 0xFE	; 254
    88fc:	4c 01       	movw	r8, r24
    88fe:	fc 01       	movw	r30, r24
    8900:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8902:	88 31       	cpi	r24, 0x18	; 24
    8904:	e0 f0       	brcs	.+56     	; 0x893e <ProcessSprites+0x116>
    8906:	60 91 bd 0b 	lds	r22, 0x0BBD
    890a:	68 31       	cpi	r22, 0x18	; 24
    890c:	f8 f4       	brcc	.+62     	; 0x894c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    890e:	26 2f       	mov	r18, r22
    8910:	30 e0       	ldi	r19, 0x00	; 0
    8912:	f9 01       	movw	r30, r18
    8914:	ee 0f       	add	r30, r30
    8916:	ff 1f       	adc	r31, r31
    8918:	e2 0f       	add	r30, r18
    891a:	f3 1f       	adc	r31, r19
    891c:	e0 57       	subi	r30, 0x70	; 112
    891e:	f5 4f       	sbci	r31, 0xF5	; 245
    8920:	51 83       	std	Z+1, r21	; 0x01
    8922:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8924:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8926:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    892a:	80 91 bd 0b 	lds	r24, 0x0BBD
    892e:	f4 01       	movw	r30, r8
    8930:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8932:	91 e0       	ldi	r25, 0x01	; 1
    8934:	98 0f       	add	r25, r24
    8936:	90 93 bd 0b 	sts	0x0BBD, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    893a:	88 31       	cpi	r24, 0x18	; 24
    893c:	38 f4       	brcc	.+14     	; 0x894c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    893e:	2a 81       	ldd	r18, Y+2	; 0x02
    8940:	3b 81       	ldd	r19, Y+3	; 0x03
    8942:	a5 01       	movw	r20, r10
    8944:	68 2f       	mov	r22, r24
    8946:	86 2d       	mov	r24, r6
    8948:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <BlitSprite>
    894c:	ff ef       	ldi	r31, 0xFF	; 255
    894e:	af 1a       	sub	r10, r31
    8950:	bf 0a       	sbc	r11, r31
    8952:	73 94       	inc	r7
    8954:	87 2d       	mov	r24, r7
    8956:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8958:	84 15       	cp	r24, r4
    895a:	18 f2       	brcs	.-122    	; 0x88e2 <ProcessSprites+0xba>
    895c:	4f ef       	ldi	r20, 0xFF	; 255
    895e:	e4 1a       	sub	r14, r20
    8960:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8962:	e5 14       	cp	r14, r5
    8964:	08 f4       	brcc	.+2      	; 0x8968 <ProcessSprites+0x140>
    8966:	b0 cf       	rjmp	.-160    	; 0x88c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8968:	63 94       	inc	r6
    896a:	84 e0       	ldi	r24, 0x04	; 4
    896c:	c8 0e       	add	r12, r24
    896e:	d1 1c       	adc	r13, r1
    8970:	9a e0       	ldi	r25, 0x0A	; 10
    8972:	69 12       	cpse	r6, r25
    8974:	7b cf       	rjmp	.-266    	; 0x886c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8976:	0f 90       	pop	r0
    8978:	0f 90       	pop	r0
    897a:	0f 90       	pop	r0
    897c:	df 91       	pop	r29
    897e:	cf 91       	pop	r28
    8980:	1f 91       	pop	r17
    8982:	0f 91       	pop	r16
    8984:	ff 90       	pop	r15
    8986:	ef 90       	pop	r14
    8988:	df 90       	pop	r13
    898a:	cf 90       	pop	r12
    898c:	bf 90       	pop	r11
    898e:	af 90       	pop	r10
    8990:	9f 90       	pop	r9
    8992:	8f 90       	pop	r8
    8994:	7f 90       	pop	r7
    8996:	6f 90       	pop	r6
    8998:	5f 90       	pop	r5
    899a:	4f 90       	pop	r4
    899c:	3f 90       	pop	r3
    899e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    89a0:	0c 94 00 44 	jmp	0x8800	; 0x8800 <RestoreBackground>

	}
    89a4:	0f 90       	pop	r0
    89a6:	0f 90       	pop	r0
    89a8:	0f 90       	pop	r0
    89aa:	df 91       	pop	r29
    89ac:	cf 91       	pop	r28
    89ae:	1f 91       	pop	r17
    89b0:	0f 91       	pop	r16
    89b2:	ff 90       	pop	r15
    89b4:	ef 90       	pop	r14
    89b6:	df 90       	pop	r13
    89b8:	cf 90       	pop	r12
    89ba:	bf 90       	pop	r11
    89bc:	af 90       	pop	r10
    89be:	9f 90       	pop	r9
    89c0:	8f 90       	pop	r8
    89c2:	7f 90       	pop	r7
    89c4:	6f 90       	pop	r6
    89c6:	5f 90       	pop	r5
    89c8:	4f 90       	pop	r4
    89ca:	3f 90       	pop	r3
    89cc:	2f 90       	pop	r2
    89ce:	08 95       	ret

000089d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    89d0:	df 92       	push	r13
    89d2:	ef 92       	push	r14
    89d4:	ff 92       	push	r15
    89d6:	0f 93       	push	r16
    89d8:	1f 93       	push	r17
    89da:	cf 93       	push	r28
    89dc:	df 93       	push	r29
    89de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    89e0:	fb 01       	movw	r30, r22
    89e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    89e4:	31 96       	adiw	r30, 0x01	; 1
    89e6:	64 91       	lpm	r22, Z
    89e8:	5f ef       	ldi	r21, 0xFF	; 255
    89ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    89ec:	24 2f       	mov	r18, r20
    89ee:	21 70       	andi	r18, 0x01	; 1
    89f0:	40 ff       	sbrs	r20, 0
    89f2:	04 c0       	rjmp	.+8      	; 0x89fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    89f4:	95 2f       	mov	r25, r21
			dx=-1;
    89f6:	ff 24       	eor	r15, r15
    89f8:	fa 94       	dec	r15
    89fa:	03 c0       	rjmp	.+6      	; 0x8a02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    89fc:	ff 24       	eor	r15, r15
    89fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8a00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8a02:	41 ff       	sbrs	r20, 1
    8a04:	05 c0       	rjmp	.+10     	; 0x8a10 <MapSprite2+0x40>
			y=(mapHeight-1);
    8a06:	7f ef       	ldi	r23, 0xFF	; 255
    8a08:	76 0f       	add	r23, r22
			dy=-1;
    8a0a:	ee 24       	eor	r14, r14
    8a0c:	ea 94       	dec	r14
    8a0e:	03 c0       	rjmp	.+6      	; 0x8a16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8a10:	ee 24       	eor	r14, r14
    8a12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8a14:	70 e0       	ldi	r23, 0x00	; 0
    8a16:	21 11       	cpse	r18, r1
    8a18:	01 c0       	rjmp	.+2      	; 0x8a1c <MapSprite2+0x4c>
    8a1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8a1c:	00 e0       	ldi	r16, 0x00	; 0
    8a1e:	06 17       	cp	r16, r22
    8a20:	09 f1       	breq	.+66     	; 0x8a64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8a22:	71 03       	mulsu	r23, r17
    8a24:	e0 01       	movw	r28, r0
    8a26:	11 24       	eor	r1, r1
    8a28:	d8 2e       	mov	r13, r24
    8a2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    8a2c:	8d 15       	cp	r24, r13
    8a2e:	b1 f0       	breq	.+44     	; 0x8a5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8a30:	9e 01       	movw	r18, r28
    8a32:	29 0f       	add	r18, r25
    8a34:	31 1d       	adc	r19, r1
    8a36:	97 fd       	sbrc	r25, 7
    8a38:	3a 95       	dec	r19
    8a3a:	2e 5f       	subi	r18, 0xFE	; 254
    8a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a3e:	fd 01       	movw	r30, r26
    8a40:	e2 0f       	add	r30, r18
    8a42:	f3 1f       	adc	r31, r19
    8a44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8a46:	34 e0       	ldi	r19, 0x04	; 4
    8a48:	83 9f       	mul	r24, r19
    8a4a:	f0 01       	movw	r30, r0
    8a4c:	11 24       	eor	r1, r1
    8a4e:	e8 59       	subi	r30, 0x98	; 152
    8a50:	fb 4f       	sbci	r31, 0xFB	; 251
    8a52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8a54:	8f 5f       	subi	r24, 0xFF	; 255
    8a56:	43 83       	std	Z+3, r20	; 0x03
    8a58:	9f 0d       	add	r25, r15
    8a5a:	e8 cf       	rjmp	.-48     	; 0x8a2c <MapSprite2+0x5c>
    8a5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8a5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8a60:	95 2f       	mov	r25, r21
    8a62:	dd cf       	rjmp	.-70     	; 0x8a1e <MapSprite2+0x4e>
	    }
	}
    8a64:	df 91       	pop	r29
    8a66:	cf 91       	pop	r28
    8a68:	1f 91       	pop	r17
    8a6a:	0f 91       	pop	r16
    8a6c:	ff 90       	pop	r15
    8a6e:	ef 90       	pop	r14
    8a70:	df 90       	pop	r13
    8a72:	08 95       	ret

00008a74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8a74:	0f 93       	push	r16
    8a76:	cf 93       	push	r28
    8a78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8a7a:	30 e0       	ldi	r19, 0x00	; 0
    8a7c:	30 17       	cp	r19, r16
    8a7e:	e1 f0       	breq	.+56     	; 0x8ab8 <MoveSprite+0x44>
    8a80:	b4 2f       	mov	r27, r20
    8a82:	a0 e2       	ldi	r26, 0x20	; 32
    8a84:	a4 0f       	add	r26, r20
    8a86:	78 2f       	mov	r23, r24
    8a88:	72 0f       	add	r23, r18
    8a8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8a8c:	87 17       	cp	r24, r23
    8a8e:	81 f0       	breq	.+32     	; 0x8ab0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8a90:	c4 e0       	ldi	r28, 0x04	; 4
    8a92:	8c 9f       	mul	r24, r28
    8a94:	f0 01       	movw	r30, r0
    8a96:	11 24       	eor	r1, r1
    8a98:	e8 59       	subi	r30, 0x98	; 152
    8a9a:	fb 4f       	sbci	r31, 0xFB	; 251
    8a9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8a9e:	41 3e       	cpi	r20, 0xE1	; 225
    8aa0:	51 05       	cpc	r21, r1
    8aa2:	14 f0       	brlt	.+4      	; 0x8aa8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8aa4:	a1 83       	std	Z+1, r26	; 0x01
    8aa6:	01 c0       	rjmp	.+2      	; 0x8aaa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8aa8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8aaa:	8f 5f       	subi	r24, 0xFF	; 255
    8aac:	98 5f       	subi	r25, 0xF8	; 248
    8aae:	ee cf       	rjmp	.-36     	; 0x8a8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8ab0:	3f 5f       	subi	r19, 0xFF	; 255
    8ab2:	48 5f       	subi	r20, 0xF8	; 248
    8ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ab6:	e2 cf       	rjmp	.-60     	; 0x8a7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8ab8:	cf 91       	pop	r28
    8aba:	0f 91       	pop	r16
    8abc:	08 95       	ret

00008abe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8abe:	08 95       	ret

00008ac0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8ac0:	e8 e6       	ldi	r30, 0x68	; 104
    8ac2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8ac4:	80 ef       	ldi	r24, 0xF0	; 240
    8ac6:	80 83       	st	Z, r24
    8ac8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8aca:	94 e0       	ldi	r25, 0x04	; 4
    8acc:	e0 39       	cpi	r30, 0x90	; 144
    8ace:	f9 07       	cpc	r31, r25
    8ad0:	d1 f7       	brne	.-12     	; 0x8ac6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8ad2:	08 95       	ret

00008ad4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8ad4:	4f 92       	push	r4
    8ad6:	5f 92       	push	r5
    8ad8:	6f 92       	push	r6
    8ada:	7f 92       	push	r7
    8adc:	8f 92       	push	r8
    8ade:	9f 92       	push	r9
    8ae0:	af 92       	push	r10
    8ae2:	bf 92       	push	r11
    8ae4:	cf 92       	push	r12
    8ae6:	df 92       	push	r13
    8ae8:	ef 92       	push	r14
    8aea:	ff 92       	push	r15
    8aec:	0f 93       	push	r16
    8aee:	1f 93       	push	r17
    8af0:	cf 93       	push	r28
    8af2:	df 93       	push	r29
    8af4:	68 2e       	mov	r6, r24
    8af6:	56 2e       	mov	r5, r22
    8af8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8afa:	fa 01       	movw	r30, r20
    8afc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8afe:	31 96       	adiw	r30, 0x01	; 1
    8b00:	84 90       	lpm	r8, Z
    8b02:	c7 2c       	mov	r12, r7
    8b04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8b06:	00 e0       	ldi	r16, 0x00	; 0
    8b08:	10 e0       	ldi	r17, 0x00	; 0
    8b0a:	91 2c       	mov	r9, r1
    8b0c:	98 14       	cp	r9, r8
    8b0e:	f1 f0       	breq	.+60     	; 0x8b4c <DrawMap2+0x78>
    8b10:	c0 e0       	ldi	r28, 0x00	; 0
    8b12:	d0 e0       	ldi	r29, 0x00	; 0
    8b14:	58 01       	movw	r10, r16
    8b16:	f2 e0       	ldi	r31, 0x02	; 2
    8b18:	af 0e       	add	r10, r31
    8b1a:	b1 1c       	adc	r11, r1
    8b1c:	49 2c       	mov	r4, r9
    8b1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8b20:	c7 15       	cp	r28, r7
    8b22:	80 f4       	brcc	.+32     	; 0x8b44 <DrawMap2+0x70>
    8b24:	95 01       	movw	r18, r10
    8b26:	2c 0f       	add	r18, r28
    8b28:	3d 1f       	adc	r19, r29
    8b2a:	f7 01       	movw	r30, r14
    8b2c:	e2 0f       	add	r30, r18
    8b2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8b30:	24 91       	lpm	r18, Z
    8b32:	42 2f       	mov	r20, r18
    8b34:	50 e0       	ldi	r21, 0x00	; 0
    8b36:	64 2d       	mov	r22, r4
    8b38:	8c 2f       	mov	r24, r28
    8b3a:	86 0d       	add	r24, r6
    8b3c:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
    8b40:	21 96       	adiw	r28, 0x01	; 1
    8b42:	ee cf       	rjmp	.-36     	; 0x8b20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8b44:	93 94       	inc	r9
    8b46:	0c 0d       	add	r16, r12
    8b48:	1d 1d       	adc	r17, r13
    8b4a:	e0 cf       	rjmp	.-64     	; 0x8b0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8b4c:	df 91       	pop	r29
    8b4e:	cf 91       	pop	r28
    8b50:	1f 91       	pop	r17
    8b52:	0f 91       	pop	r16
    8b54:	ff 90       	pop	r15
    8b56:	ef 90       	pop	r14
    8b58:	df 90       	pop	r13
    8b5a:	cf 90       	pop	r12
    8b5c:	bf 90       	pop	r11
    8b5e:	af 90       	pop	r10
    8b60:	9f 90       	pop	r9
    8b62:	8f 90       	pop	r8
    8b64:	7f 90       	pop	r7
    8b66:	6f 90       	pop	r6
    8b68:	5f 90       	pop	r5
    8b6a:	4f 90       	pop	r4
    8b6c:	08 95       	ret

00008b6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8b6e:	df 92       	push	r13
    8b70:	ef 92       	push	r14
    8b72:	ff 92       	push	r15
    8b74:	0f 93       	push	r16
    8b76:	1f 93       	push	r17
    8b78:	cf 93       	push	r28
    8b7a:	df 93       	push	r29
    8b7c:	f6 2e       	mov	r15, r22
    8b7e:	04 2f       	mov	r16, r20
    8b80:	d2 2e       	mov	r13, r18
    8b82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8b84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8b86:	8a e0       	ldi	r24, 0x0A	; 10
    8b88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8b8a:	01 11       	cpse	r16, r1
    8b8c:	02 c0       	rjmp	.+4      	; 0x8b92 <PrintByte+0x24>
    8b8e:	11 11       	cpse	r17, r1
    8b90:	07 c0       	rjmp	.+14     	; 0x8ba0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8b92:	80 2f       	mov	r24, r16
    8b94:	6e 2d       	mov	r22, r14
    8b96:	0e 94 2f 5d 	call	0xba5e	; 0xba5e <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8b9a:	40 e1       	ldi	r20, 0x10	; 16
    8b9c:	49 0f       	add	r20, r25
    8b9e:	05 c0       	rjmp	.+10     	; 0x8baa <PrintByte+0x3c>
		}else{
			if(zeropad){
    8ba0:	dd 20       	and	r13, r13
    8ba2:	11 f0       	breq	.+4      	; 0x8ba8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8ba4:	40 e1       	ldi	r20, 0x10	; 16
    8ba6:	01 c0       	rjmp	.+2      	; 0x8baa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8ba8:	40 e0       	ldi	r20, 0x00	; 0
    8baa:	6f 2d       	mov	r22, r15
    8bac:	8c 2f       	mov	r24, r28
    8bae:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <SetFont>
			}
		}
		val=val/10;
    8bb2:	80 2f       	mov	r24, r16
    8bb4:	6e 2d       	mov	r22, r14
    8bb6:	0e 94 2f 5d 	call	0xba5e	; 0xba5e <__udivmodqi4>
    8bba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8bbc:	1f 5f       	subi	r17, 0xFF	; 255
    8bbe:	21 97       	sbiw	r28, 0x01	; 1
    8bc0:	13 30       	cpi	r17, 0x03	; 3
    8bc2:	19 f7       	brne	.-58     	; 0x8b8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8bc4:	df 91       	pop	r29
    8bc6:	cf 91       	pop	r28
    8bc8:	1f 91       	pop	r17
    8bca:	0f 91       	pop	r16
    8bcc:	ff 90       	pop	r15
    8bce:	ef 90       	pop	r14
    8bd0:	df 90       	pop	r13
    8bd2:	08 95       	ret

00008bd4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8bd4:	0f 93       	push	r16
    8bd6:	1f 93       	push	r17
    8bd8:	cf 93       	push	r28
    8bda:	df 93       	push	r29
    8bdc:	06 2f       	mov	r16, r22
    8bde:	c4 2f       	mov	r28, r20
    8be0:	d5 2f       	mov	r29, r21
    8be2:	18 2f       	mov	r17, r24
    8be4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8be6:	fe 01       	movw	r30, r28
    8be8:	44 91       	lpm	r20, Z
		if(c!=0){
    8bea:	44 23       	and	r20, r20
    8bec:	49 f0       	breq	.+18     	; 0x8c00 <Print+0x2c>
			c=((c&127)-32);			
    8bee:	4f 77       	andi	r20, 0x7F	; 127
    8bf0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8bf2:	60 2f       	mov	r22, r16
    8bf4:	8c 2f       	mov	r24, r28
    8bf6:	81 0f       	add	r24, r17
    8bf8:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <SetFont>
    8bfc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8bfe:	f3 cf       	rjmp	.-26     	; 0x8be6 <Print+0x12>
	
}
    8c00:	df 91       	pop	r29
    8c02:	cf 91       	pop	r28
    8c04:	1f 91       	pop	r17
    8c06:	0f 91       	pop	r16
    8c08:	08 95       	ret

00008c0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8c0a:	40 52       	subi	r20, 0x20	; 32
    8c0c:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <SetFont>

00008c10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8c10:	0f 93       	push	r16
    8c12:	1f 93       	push	r17
    8c14:	cf 93       	push	r28
    8c16:	df 93       	push	r29
    8c18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8c1a:	c0 e0       	ldi	r28, 0x00	; 0
    8c1c:	d0 e0       	ldi	r29, 0x00	; 0
    8c1e:	c0 17       	cp	r28, r16
    8c20:	d1 07       	cpc	r29, r17
    8c22:	44 f4       	brge	.+16     	; 0x8c34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8c24:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <GetVsyncFlag>
    8c28:	88 23       	and	r24, r24
    8c2a:	e1 f3       	breq	.-8      	; 0x8c24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8c2c:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8c30:	21 96       	adiw	r28, 0x01	; 1
    8c32:	f5 cf       	rjmp	.-22     	; 0x8c1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8c34:	df 91       	pop	r29
    8c36:	cf 91       	pop	r28
    8c38:	1f 91       	pop	r17
    8c3a:	0f 91       	pop	r16
    8c3c:	08 95       	ret

00008c3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8c3e:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    8c42:	10 92 bf 0b 	sts	0x0BBF, r1
	fadeActive=true;
    8c46:	81 e0       	ldi	r24, 0x01	; 1
    8c48:	80 93 be 0b 	sts	0x0BBE, r24
		
	if(blocking){
    8c4c:	66 23       	and	r22, r22
    8c4e:	21 f0       	breq	.+8      	; 0x8c58 <doFade+0x1a>
		while(fadeActive==true);
    8c50:	80 91 be 0b 	lds	r24, 0x0BBE
    8c54:	81 11       	cpse	r24, r1
    8c56:	fc cf       	rjmp	.-8      	; 0x8c50 <doFade+0x12>
    8c58:	08 95       	ret

00008c5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8c5a:	81 11       	cpse	r24, r1
    8c5c:	03 c0       	rjmp	.+6      	; 0x8c64 <FadeIn+0xa>
		DDRC=0xff;
    8c5e:	8f ef       	ldi	r24, 0xFF	; 255
    8c60:	87 b9       	out	0x07, r24	; 7
		return;
    8c62:	08 95       	ret
	}
	fadeStep=1;
    8c64:	91 e0       	ldi	r25, 0x01	; 1
    8c66:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=1;
    8c6a:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    8c6e:	0c 94 1f 46 	jmp	0x8c3e	; 0x8c3e <doFade>

00008c72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8c72:	81 11       	cpse	r24, r1
    8c74:	02 c0       	rjmp	.+4      	; 0x8c7a <FadeOut+0x8>
		DDRC=0;
    8c76:	17 b8       	out	0x07, r1	; 7
		return;
    8c78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8c7a:	9c e0       	ldi	r25, 0x0C	; 12
    8c7c:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=-1;
    8c80:	9f ef       	ldi	r25, 0xFF	; 255
    8c82:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    8c86:	0c 94 1f 46 	jmp	0x8c3e	; 0x8c3e <doFade>

00008c8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8c8a:	80 91 be 0b 	lds	r24, 0x0BBE
    8c8e:	88 23       	and	r24, r24
    8c90:	01 f1       	breq	.+64     	; 0x8cd2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8c92:	80 91 bf 0b 	lds	r24, 0x0BBF
    8c96:	81 11       	cpse	r24, r1
    8c98:	19 c0       	rjmp	.+50     	; 0x8ccc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8c9a:	80 91 bb 0b 	lds	r24, 0x0BBB
    8c9e:	80 93 bf 0b 	sts	0x0BBF, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8ca2:	e0 91 c0 0b 	lds	r30, 0x0BC0
    8ca6:	f0 e0       	ldi	r31, 0x00	; 0
    8ca8:	e7 51       	subi	r30, 0x17	; 23
    8caa:	ff 4f       	sbci	r31, 0xFF	; 255
    8cac:	e4 91       	lpm	r30, Z
    8cae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8cb0:	90 91 bc 0b 	lds	r25, 0x0BBC
    8cb4:	80 91 c0 0b 	lds	r24, 0x0BC0
    8cb8:	89 0f       	add	r24, r25
    8cba:	80 93 c0 0b 	sts	0x0BC0, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8cbe:	88 23       	and	r24, r24
    8cc0:	11 f0       	breq	.+4      	; 0x8cc6 <ProcessFading+0x3c>
    8cc2:	8d 30       	cpi	r24, 0x0D	; 13
    8cc4:	31 f4       	brne	.+12     	; 0x8cd2 <ProcessFading+0x48>
				fadeActive=false;
    8cc6:	10 92 be 0b 	sts	0x0BBE, r1
    8cca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8ccc:	81 50       	subi	r24, 0x01	; 1
    8cce:	80 93 bf 0b 	sts	0x0BBF, r24
    8cd2:	08 95       	ret

00008cd4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8cd4:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <ProcessFading>
		ProcessSprites();
    8cd8:	0c 94 14 44 	jmp	0x8828	; 0x8828 <ProcessSprites>

00008cdc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8cdc:	cf 93       	push	r28
    8cde:	df 93       	push	r29
    8ce0:	fc 01       	movw	r30, r24
    8ce2:	eb 01       	movw	r28, r22
	*looped = 0;
    8ce4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8ce6:	93 81       	ldd	r25, Z+3	; 0x03
    8ce8:	9f 5f       	subi	r25, 0xFF	; 255
    8cea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8cec:	22 81       	ldd	r18, Z+2	; 0x02
    8cee:	80 81       	ld	r24, Z
    8cf0:	92 17       	cp	r25, r18
    8cf2:	70 f0       	brcs	.+28     	; 0x8d10 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8cf4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8cf6:	90 e0       	ldi	r25, 0x00	; 0
    8cf8:	01 96       	adiw	r24, 0x01	; 1
    8cfa:	21 81       	ldd	r18, Z+1	; 0x01
    8cfc:	62 2f       	mov	r22, r18
    8cfe:	70 e0       	ldi	r23, 0x00	; 0
    8d00:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    8d04:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8d06:	81 11       	cpse	r24, r1
    8d08:	02 c0       	rjmp	.+4      	; 0x8d0e <LBGetNextFrame+0x32>
    8d0a:	81 e0       	ldi	r24, 0x01	; 1
    8d0c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    8d0e:	80 81       	ld	r24, Z
    8d10:	e8 0f       	add	r30, r24
    8d12:	f1 1d       	adc	r31, r1
    8d14:	e8 0f       	add	r30, r24
    8d16:	f1 1d       	adc	r31, r1
    8d18:	84 81       	ldd	r24, Z+4	; 0x04
    8d1a:	95 81       	ldd	r25, Z+5	; 0x05
}
    8d1c:	df 91       	pop	r29
    8d1e:	cf 91       	pop	r28
    8d20:	08 95       	ret

00008d22 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8d22:	0f 93       	push	r16
    8d24:	1f 93       	push	r17
    8d26:	cf 93       	push	r28
    8d28:	df 93       	push	r29
    8d2a:	1f 92       	push	r1
    8d2c:	cd b7       	in	r28, 0x3d	; 61
    8d2e:	de b7       	in	r29, 0x3e	; 62
    8d30:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    8d32:	86 2f       	mov	r24, r22
    8d34:	69 83       	std	Y+1, r22	; 0x01
    8d36:	0e 94 03 38 	call	0x7006	; 0x7006 <ReadJoypad>
    8d3a:	d8 01       	movw	r26, r16
    8d3c:	15 96       	adiw	r26, 0x05	; 5
    8d3e:	9c 93       	st	X, r25
    8d40:	8e 93       	st	-X, r24
    8d42:	14 97       	sbiw	r26, 0x04	; 4
    8d44:	69 81       	ldd	r22, Y+1	; 0x01
    8d46:	e6 2f       	mov	r30, r22
    8d48:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8d4a:	00 97       	sbiw	r24, 0x00	; 0
    8d4c:	51 f0       	breq	.+20     	; 0x8d62 <LBGetJoyPadState+0x40>
    8d4e:	df 01       	movw	r26, r30
    8d50:	aa 0f       	add	r26, r26
    8d52:	bb 1f       	adc	r27, r27
    8d54:	a8 5c       	subi	r26, 0xC8	; 200
    8d56:	b4 4f       	sbci	r27, 0xF4	; 244
    8d58:	2d 91       	ld	r18, X+
    8d5a:	3c 91       	ld	r19, X
    8d5c:	82 17       	cp	r24, r18
    8d5e:	93 07       	cpc	r25, r19
    8d60:	21 f0       	breq	.+8      	; 0x8d6a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8d62:	d8 01       	movw	r26, r16
    8d64:	16 96       	adiw	r26, 0x06	; 6
    8d66:	1c 92       	st	X, r1
    8d68:	07 c0       	rjmp	.+14     	; 0x8d78 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8d6a:	d8 01       	movw	r26, r16
    8d6c:	16 96       	adiw	r26, 0x06	; 6
    8d6e:	2c 91       	ld	r18, X
    8d70:	16 97       	sbiw	r26, 0x06	; 6
    8d72:	2f 5f       	subi	r18, 0xFF	; 255
    8d74:	16 96       	adiw	r26, 0x06	; 6
    8d76:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8d78:	ee 0f       	add	r30, r30
    8d7a:	ff 1f       	adc	r31, r31
    8d7c:	e8 5c       	subi	r30, 0xC8	; 200
    8d7e:	f4 4f       	sbci	r31, 0xF4	; 244
    8d80:	20 81       	ld	r18, Z
    8d82:	31 81       	ldd	r19, Z+1	; 0x01
    8d84:	a9 01       	movw	r20, r18
    8d86:	40 95       	com	r20
    8d88:	50 95       	com	r21
    8d8a:	48 23       	and	r20, r24
    8d8c:	59 23       	and	r21, r25
    8d8e:	d8 01       	movw	r26, r16
    8d90:	11 96       	adiw	r26, 0x01	; 1
    8d92:	5c 93       	st	X, r21
    8d94:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8d96:	ac 01       	movw	r20, r24
    8d98:	40 95       	com	r20
    8d9a:	50 95       	com	r21
    8d9c:	24 23       	and	r18, r20
    8d9e:	35 23       	and	r19, r21
    8da0:	13 96       	adiw	r26, 0x03	; 3
    8da2:	3c 93       	st	X, r19
    8da4:	2e 93       	st	-X, r18
    8da6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8da8:	91 83       	std	Z+1, r25	; 0x01
    8daa:	80 83       	st	Z, r24
}
    8dac:	0f 90       	pop	r0
    8dae:	df 91       	pop	r29
    8db0:	cf 91       	pop	r28
    8db2:	1f 91       	pop	r17
    8db4:	0f 91       	pop	r16
    8db6:	08 95       	ret

00008db8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8db8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    8dba:	fb 01       	movw	r30, r22
    8dbc:	2e 2f       	mov	r18, r30
    8dbe:	23 1b       	sub	r18, r19
    8dc0:	24 17       	cp	r18, r20
    8dc2:	28 f4       	brcc	.+10     	; 0x8dce <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8dc4:	21 91       	ld	r18, Z+
    8dc6:	dc 01       	movw	r26, r24
    8dc8:	2d 93       	st	X+, r18
    8dca:	cd 01       	movw	r24, r26
    8dcc:	f7 cf       	rjmp	.-18     	; 0x8dbc <LBCopyChars+0x4>
	}
}
    8dce:	08 95       	ret

00008dd0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    8dd0:	af 92       	push	r10
    8dd2:	bf 92       	push	r11
    8dd4:	cf 92       	push	r12
    8dd6:	df 92       	push	r13
    8dd8:	ef 92       	push	r14
    8dda:	ff 92       	push	r15
    8ddc:	0f 93       	push	r16
    8dde:	1f 93       	push	r17
    8de0:	cf 93       	push	r28
    8de2:	df 93       	push	r29
    8de4:	1f 92       	push	r1
    8de6:	cd b7       	in	r28, 0x3d	; 61
    8de8:	de b7       	in	r29, 0x3e	; 62
    8dea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    8dec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    8dee:	c6 2e       	mov	r12, r22
    8df0:	d1 2c       	mov	r13, r1
    8df2:	90 e0       	ldi	r25, 0x00	; 0
    8df4:	5c 01       	movw	r10, r24
    8df6:	a4 1a       	sub	r10, r20
    8df8:	b5 0a       	sbc	r11, r21
    8dfa:	80 2f       	mov	r24, r16
    8dfc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8dfe:	82 17       	cp	r24, r18
    8e00:	60 f4       	brcc	.+24     	; 0x8e1a <LBPrintStr+0x4a>
    8e02:	c5 01       	movw	r24, r10
    8e04:	80 0f       	add	r24, r16
    8e06:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    8e08:	f8 01       	movw	r30, r16
    8e0a:	41 91       	ld	r20, Z+
    8e0c:	8f 01       	movw	r16, r30
    8e0e:	b6 01       	movw	r22, r12
    8e10:	29 83       	std	Y+1, r18	; 0x01
    8e12:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
    8e16:	29 81       	ldd	r18, Y+1	; 0x01
    8e18:	f0 cf       	rjmp	.-32     	; 0x8dfa <LBPrintStr+0x2a>
	}
}
    8e1a:	0f 90       	pop	r0
    8e1c:	df 91       	pop	r29
    8e1e:	cf 91       	pop	r28
    8e20:	1f 91       	pop	r17
    8e22:	0f 91       	pop	r16
    8e24:	ff 90       	pop	r15
    8e26:	ef 90       	pop	r14
    8e28:	df 90       	pop	r13
    8e2a:	cf 90       	pop	r12
    8e2c:	bf 90       	pop	r11
    8e2e:	af 90       	pop	r10
    8e30:	08 95       	ret

00008e32 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8e32:	af 92       	push	r10
    8e34:	cf 92       	push	r12
    8e36:	ef 92       	push	r14
    8e38:	ff 92       	push	r15
    8e3a:	0f 93       	push	r16
    8e3c:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    8e3e:	70 e0       	ldi	r23, 0x00	; 0
    8e40:	f1 2c       	mov	r15, r1
    8e42:	fb 01       	movw	r30, r22
    8e44:	e2 0f       	add	r30, r18
    8e46:	f1 1d       	adc	r31, r1
    8e48:	ee 15       	cp	r30, r14
    8e4a:	ff 05       	cpc	r31, r15
    8e4c:	a4 f0       	brlt	.+40     	; 0x8e76 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    8e4e:	ea 0c       	add	r14, r10
    8e50:	f1 1c       	adc	r15, r1
    8e52:	e6 16       	cp	r14, r22
    8e54:	f7 06       	cpc	r15, r23
    8e56:	7c f0       	brlt	.+30     	; 0x8e76 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8e58:	28 2f       	mov	r18, r24
    8e5a:	30 e0       	ldi	r19, 0x00	; 0
    8e5c:	10 e0       	ldi	r17, 0x00	; 0
    8e5e:	c9 01       	movw	r24, r18
    8e60:	84 0f       	add	r24, r20
    8e62:	91 1d       	adc	r25, r1
    8e64:	80 17       	cp	r24, r16
    8e66:	91 07       	cpc	r25, r17
    8e68:	34 f0       	brlt	.+12     	; 0x8e76 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8e6a:	0c 0d       	add	r16, r12
    8e6c:	11 1d       	adc	r17, r1
    8e6e:	81 e0       	ldi	r24, 0x01	; 1
    8e70:	02 17       	cp	r16, r18
    8e72:	13 07       	cpc	r17, r19
    8e74:	0c f4       	brge	.+2      	; 0x8e78 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8e76:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8e78:	1f 91       	pop	r17
    8e7a:	0f 91       	pop	r16
    8e7c:	ff 90       	pop	r15
    8e7e:	ef 90       	pop	r14
    8e80:	cf 90       	pop	r12
    8e82:	af 90       	pop	r10
    8e84:	08 95       	ret

00008e86 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8e86:	2f 92       	push	r2
    8e88:	3f 92       	push	r3
    8e8a:	4f 92       	push	r4
    8e8c:	5f 92       	push	r5
    8e8e:	6f 92       	push	r6
    8e90:	7f 92       	push	r7
    8e92:	8f 92       	push	r8
    8e94:	9f 92       	push	r9
    8e96:	af 92       	push	r10
    8e98:	bf 92       	push	r11
    8e9a:	cf 92       	push	r12
    8e9c:	df 92       	push	r13
    8e9e:	ef 92       	push	r14
    8ea0:	ff 92       	push	r15
    8ea2:	0f 93       	push	r16
    8ea4:	1f 93       	push	r17
    8ea6:	cf 93       	push	r28
    8ea8:	df 93       	push	r29
    8eaa:	00 d0       	rcall	.+0      	; 0x8eac <LBLineIntersect+0x26>
    8eac:	00 d0       	rcall	.+0      	; 0x8eae <LBLineIntersect+0x28>
    8eae:	cd b7       	in	r28, 0x3d	; 61
    8eb0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8eb2:	f1 2c       	mov	r15, r1
    8eb4:	8a 2c       	mov	r8, r10
    8eb6:	91 2c       	mov	r9, r1
    8eb8:	8e 18       	sub	r8, r14
    8eba:	9f 08       	sbc	r9, r15
    8ebc:	a8 2e       	mov	r10, r24
    8ebe:	b1 2c       	mov	r11, r1
    8ec0:	24 2e       	mov	r2, r20
    8ec2:	31 2c       	mov	r3, r1
    8ec4:	2a 18       	sub	r2, r10
    8ec6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8ec8:	10 e0       	ldi	r17, 0x00	; 0
    8eca:	d1 2c       	mov	r13, r1
    8ecc:	c0 1a       	sub	r12, r16
    8ece:	d1 0a       	sbc	r13, r17
    8ed0:	46 2f       	mov	r20, r22
    8ed2:	50 e0       	ldi	r21, 0x00	; 0
    8ed4:	5c 83       	std	Y+4, r21	; 0x04
    8ed6:	4b 83       	std	Y+3, r20	; 0x03
    8ed8:	82 2f       	mov	r24, r18
    8eda:	90 e0       	ldi	r25, 0x00	; 0
    8edc:	9a 83       	std	Y+2, r25	; 0x02
    8ede:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8ee0:	82 9c       	mul	r8, r2
    8ee2:	90 01       	movw	r18, r0
    8ee4:	83 9c       	mul	r8, r3
    8ee6:	30 0d       	add	r19, r0
    8ee8:	92 9c       	mul	r9, r2
    8eea:	30 0d       	add	r19, r0
    8eec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8eee:	ca 01       	movw	r24, r20
    8ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    8ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    8ef4:	8e 1b       	sub	r24, r30
    8ef6:	9f 0b       	sbc	r25, r31
    8ef8:	c8 9e       	mul	r12, r24
    8efa:	b0 01       	movw	r22, r0
    8efc:	c9 9e       	mul	r12, r25
    8efe:	70 0d       	add	r23, r0
    8f00:	d8 9e       	mul	r13, r24
    8f02:	70 0d       	add	r23, r0
    8f04:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8f06:	62 0f       	add	r22, r18
    8f08:	73 1f       	adc	r23, r19
    8f0a:	88 27       	eor	r24, r24
    8f0c:	77 fd       	sbrc	r23, 7
    8f0e:	80 95       	com	r24
    8f10:	98 2f       	mov	r25, r24
    8f12:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    8f16:	2b 01       	movw	r4, r22
    8f18:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8f1a:	20 e0       	ldi	r18, 0x00	; 0
    8f1c:	30 e0       	ldi	r19, 0x00	; 0
    8f1e:	a9 01       	movw	r20, r18
    8f20:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    8f24:	88 23       	and	r24, r24
    8f26:	09 f4       	brne	.+2      	; 0x8f2a <LBLineIntersect+0xa4>
    8f28:	6c c0       	rjmp	.+216    	; 0x9002 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8f2a:	4b 81       	ldd	r20, Y+3	; 0x03
    8f2c:	5c 81       	ldd	r21, Y+4	; 0x04
    8f2e:	4e 19       	sub	r20, r14
    8f30:	5f 09       	sbc	r21, r15
    8f32:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8f34:	0a 19       	sub	r16, r10
    8f36:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8f38:	c4 9e       	mul	r12, r20
    8f3a:	c0 01       	movw	r24, r0
    8f3c:	c5 9e       	mul	r12, r21
    8f3e:	90 0d       	add	r25, r0
    8f40:	d4 9e       	mul	r13, r20
    8f42:	90 0d       	add	r25, r0
    8f44:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8f46:	80 9e       	mul	r8, r16
    8f48:	b0 01       	movw	r22, r0
    8f4a:	81 9e       	mul	r8, r17
    8f4c:	70 0d       	add	r23, r0
    8f4e:	90 9e       	mul	r9, r16
    8f50:	70 0d       	add	r23, r0
    8f52:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8f54:	68 0f       	add	r22, r24
    8f56:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8f58:	88 27       	eor	r24, r24
    8f5a:	77 fd       	sbrc	r23, 7
    8f5c:	80 95       	com	r24
    8f5e:	98 2f       	mov	r25, r24
    8f60:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8f64:	a3 01       	movw	r20, r6
    8f66:	92 01       	movw	r18, r4
    8f68:	0e 94 d2 5d 	call	0xbba4	; 0xbba4 <__divsf3>
    8f6c:	4b 01       	movw	r8, r22
    8f6e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8f70:	20 e0       	ldi	r18, 0x00	; 0
    8f72:	30 e0       	ldi	r19, 0x00	; 0
    8f74:	a9 01       	movw	r20, r18
    8f76:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    8f7a:	87 fd       	sbrc	r24, 7
    8f7c:	42 c0       	rjmp	.+132    	; 0x9002 <LBLineIntersect+0x17c>
    8f7e:	20 e0       	ldi	r18, 0x00	; 0
    8f80:	30 e0       	ldi	r19, 0x00	; 0
    8f82:	40 e8       	ldi	r20, 0x80	; 128
    8f84:	5f e3       	ldi	r21, 0x3F	; 63
    8f86:	c5 01       	movw	r24, r10
    8f88:	b4 01       	movw	r22, r8
    8f8a:	0e 94 1d 5f 	call	0xbe3a	; 0xbe3a <__gesf2>
    8f8e:	18 16       	cp	r1, r24
    8f90:	c4 f1       	brlt	.+112    	; 0x9002 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8f92:	2e 9c       	mul	r2, r14
    8f94:	b0 01       	movw	r22, r0
    8f96:	2f 9c       	mul	r2, r15
    8f98:	70 0d       	add	r23, r0
    8f9a:	3e 9c       	mul	r3, r14
    8f9c:	70 0d       	add	r23, r0
    8f9e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8fa0:	29 81       	ldd	r18, Y+1	; 0x01
    8fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    8fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    8fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    8fa8:	28 1b       	sub	r18, r24
    8faa:	39 0b       	sbc	r19, r25
    8fac:	20 9f       	mul	r18, r16
    8fae:	c0 01       	movw	r24, r0
    8fb0:	21 9f       	mul	r18, r17
    8fb2:	90 0d       	add	r25, r0
    8fb4:	30 9f       	mul	r19, r16
    8fb6:	90 0d       	add	r25, r0
    8fb8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8fba:	68 0f       	add	r22, r24
    8fbc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8fbe:	88 27       	eor	r24, r24
    8fc0:	77 fd       	sbrc	r23, 7
    8fc2:	80 95       	com	r24
    8fc4:	98 2f       	mov	r25, r24
    8fc6:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8fca:	a3 01       	movw	r20, r6
    8fcc:	92 01       	movw	r18, r4
    8fce:	0e 94 d2 5d 	call	0xbba4	; 0xbba4 <__divsf3>
    8fd2:	6b 01       	movw	r12, r22
    8fd4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8fd6:	20 e0       	ldi	r18, 0x00	; 0
    8fd8:	30 e0       	ldi	r19, 0x00	; 0
    8fda:	a9 01       	movw	r20, r18
    8fdc:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    8fe0:	87 fd       	sbrc	r24, 7
    8fe2:	0f c0       	rjmp	.+30     	; 0x9002 <LBLineIntersect+0x17c>
    8fe4:	11 e0       	ldi	r17, 0x01	; 1
    8fe6:	20 e0       	ldi	r18, 0x00	; 0
    8fe8:	30 e0       	ldi	r19, 0x00	; 0
    8fea:	40 e8       	ldi	r20, 0x80	; 128
    8fec:	5f e3       	ldi	r21, 0x3F	; 63
    8fee:	c7 01       	movw	r24, r14
    8ff0:	b6 01       	movw	r22, r12
    8ff2:	0e 94 1d 5f 	call	0xbe3a	; 0xbe3a <__gesf2>
    8ff6:	18 16       	cp	r1, r24
    8ff8:	0c f0       	brlt	.+2      	; 0x8ffc <LBLineIntersect+0x176>
    8ffa:	10 e0       	ldi	r17, 0x00	; 0
    8ffc:	81 e0       	ldi	r24, 0x01	; 1
    8ffe:	81 27       	eor	r24, r17
    9000:	01 c0       	rjmp	.+2      	; 0x9004 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9002:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9004:	0f 90       	pop	r0
    9006:	0f 90       	pop	r0
    9008:	0f 90       	pop	r0
    900a:	0f 90       	pop	r0
    900c:	df 91       	pop	r29
    900e:	cf 91       	pop	r28
    9010:	1f 91       	pop	r17
    9012:	0f 91       	pop	r16
    9014:	ff 90       	pop	r15
    9016:	ef 90       	pop	r14
    9018:	df 90       	pop	r13
    901a:	cf 90       	pop	r12
    901c:	bf 90       	pop	r11
    901e:	af 90       	pop	r10
    9020:	9f 90       	pop	r9
    9022:	8f 90       	pop	r8
    9024:	7f 90       	pop	r7
    9026:	6f 90       	pop	r6
    9028:	5f 90       	pop	r5
    902a:	4f 90       	pop	r4
    902c:	3f 90       	pop	r3
    902e:	2f 90       	pop	r2
    9030:	08 95       	ret

00009032 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9032:	0f 93       	push	r16
    9034:	1f 93       	push	r17
    9036:	cf 93       	push	r28
    9038:	df 93       	push	r29
    903a:	8c 01       	movw	r16, r24
    903c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    903e:	80 91 36 0b 	lds	r24, 0x0B36
    9042:	90 91 37 0b 	lds	r25, 0x0B37
    9046:	89 2b       	or	r24, r25
    9048:	31 f4       	brne	.+12     	; 0x9056 <LBRandom+0x24>
    904a:	0e 94 43 38 	call	0x7086	; 0x7086 <GetRandomSeed>
    904e:	90 93 37 0b 	sts	0x0B37, r25
    9052:	80 93 36 0b 	sts	0x0B36, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    9056:	90 91 35 0b 	lds	r25, 0x0B35
    905a:	20 91 36 0b 	lds	r18, 0x0B36
    905e:	30 91 37 0b 	lds	r19, 0x0B37
    9062:	09 2e       	mov	r0, r25
    9064:	02 c0       	rjmp	.+4      	; 0x906a <LBRandom+0x38>
    9066:	36 95       	lsr	r19
    9068:	27 95       	ror	r18
    906a:	0a 94       	dec	r0
    906c:	e2 f7       	brpl	.-8      	; 0x9066 <LBRandom+0x34>
	unsigned int delta = to - from;
    906e:	be 01       	movw	r22, r28
    9070:	60 1b       	sub	r22, r16
    9072:	71 0b       	sbc	r23, r17

	shift_count++;
    9074:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9076:	90 31       	cpi	r25, 0x10	; 16
    9078:	18 f4       	brcc	.+6      	; 0x9080 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    907a:	90 93 35 0b 	sts	0x0B35, r25
    907e:	02 c0       	rjmp	.+4      	; 0x9084 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9080:	10 92 35 0b 	sts	0x0B35, r1

	return from + ((delta + shifted) % delta);
    9084:	cb 01       	movw	r24, r22
    9086:	82 0f       	add	r24, r18
    9088:	93 1f       	adc	r25, r19
    908a:	0e 94 3b 5d 	call	0xba76	; 0xba76 <__udivmodhi4>
}
    908e:	80 0f       	add	r24, r16
    9090:	91 1f       	adc	r25, r17
    9092:	df 91       	pop	r29
    9094:	cf 91       	pop	r28
    9096:	1f 91       	pop	r17
    9098:	0f 91       	pop	r16
    909a:	08 95       	ret

0000909c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    909c:	cf 93       	push	r28
    909e:	df 93       	push	r29
    90a0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    90a2:	c0 e0       	ldi	r28, 0x00	; 0
    90a4:	cd 17       	cp	r28, r29
    90a6:	31 f0       	breq	.+12     	; 0x90b4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    90a8:	8f ef       	ldi	r24, 0xFF	; 255
    90aa:	9f ef       	ldi	r25, 0xFF	; 255
    90ac:	0e 94 0f 38 	call	0x701e	; 0x701e <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    90b0:	cf 5f       	subi	r28, 0xFF	; 255
    90b2:	f8 cf       	rjmp	.-16     	; 0x90a4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    90b4:	df 91       	pop	r29
    90b6:	cf 91       	pop	r28
    90b8:	08 95       	ret

000090ba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    90ba:	28 e8       	ldi	r18, 0x88	; 136
    90bc:	30 e0       	ldi	r19, 0x00	; 0
    90be:	fc 01       	movw	r30, r24
    90c0:	21 93       	st	Z+, r18
    90c2:	31 93       	st	Z+, r19
    90c4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    90c6:	4e e1       	ldi	r20, 0x1E	; 30
    90c8:	50 e0       	ldi	r21, 0x00	; 0
    90ca:	66 ef       	ldi	r22, 0xF6	; 246
    90cc:	70 e0       	ldi	r23, 0x00	; 0
    90ce:	0c 94 84 5f 	jmp	0xbf08	; 0xbf08 <memcpy_P>

000090d2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    90d2:	27 e8       	ldi	r18, 0x87	; 135
    90d4:	30 e0       	ldi	r19, 0x00	; 0
    90d6:	fc 01       	movw	r30, r24
    90d8:	21 93       	st	Z+, r18
    90da:	31 93       	st	Z+, r19
    90dc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    90de:	4e e1       	ldi	r20, 0x1E	; 30
    90e0:	50 e0       	ldi	r21, 0x00	; 0
    90e2:	64 e1       	ldi	r22, 0x14	; 20
    90e4:	71 e0       	ldi	r23, 0x01	; 1
    90e6:	0c 94 84 5f 	jmp	0xbf08	; 0xbf08 <memcpy_P>

000090ea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    90ea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    90ec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    90ee:	14 86       	std	Z+12, r1	; 0x0c
    90f0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    90f2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    90f4:	73 e0       	ldi	r23, 0x03	; 3
    90f6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    90f8:	65 e0       	ldi	r22, 0x05	; 5
    90fa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    90fc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    90fe:	40 e8       	ldi	r20, 0x80	; 128
    9100:	51 e2       	ldi	r21, 0x21	; 33
    9102:	56 83       	std	Z+6, r21	; 0x06
    9104:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9106:	2d e7       	ldi	r18, 0x7D	; 125
    9108:	31 e2       	ldi	r19, 0x21	; 33
    910a:	30 87       	std	Z+8, r19	; 0x08
    910c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    910e:	8a e7       	ldi	r24, 0x7A	; 122
    9110:	91 e2       	ldi	r25, 0x21	; 33
    9112:	92 87       	std	Z+10, r25	; 0x0a
    9114:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9116:	10 8e       	std	Z+24, r1	; 0x18
    9118:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    911a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    911c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    911e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    9120:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9122:	52 8b       	std	Z+18, r21	; 0x12
    9124:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9126:	34 8b       	std	Z+20, r19	; 0x14
    9128:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    912a:	96 8b       	std	Z+22, r25	; 0x16
    912c:	85 8b       	std	Z+21, r24	; 0x15
    912e:	08 95       	ret

00009130 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9130:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9132:	88 e7       	ldi	r24, 0x78	; 120
    9134:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9136:	10 82       	st	Z, r1
	s->active = 0;
    9138:	15 86       	std	Z+13, r1	; 0x0d
	s->distance = 0;
    913a:	16 86       	std	Z+14, r1	; 0x0e
	s->shot_type = shot_type;
    913c:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    913e:	84 e0       	ldi	r24, 0x04	; 4
    9140:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9142:	66 23       	and	r22, r22
    9144:	11 f0       	breq	.+4      	; 0x914a <init_shot_state+0x1a>
    9146:	85 e0       	ldi	r24, 0x05	; 5
    9148:	01 c0       	rjmp	.+2      	; 0x914c <init_shot_state+0x1c>
    914a:	81 e0       	ldi	r24, 0x01	; 1
    914c:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    914e:	80 e0       	ldi	r24, 0x00	; 0
    9150:	90 e0       	ldi	r25, 0x00	; 0
    9152:	a0 e7       	ldi	r26, 0x70	; 112
    9154:	b3 e4       	ldi	r27, 0x43	; 67
    9156:	82 83       	std	Z+2, r24	; 0x02
    9158:	93 83       	std	Z+3, r25	; 0x03
    915a:	a4 83       	std	Z+4, r26	; 0x04
    915c:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    915e:	16 82       	std	Z+6, r1	; 0x06
    9160:	17 82       	std	Z+7, r1	; 0x07
    9162:	10 86       	std	Z+8, r1	; 0x08
    9164:	11 86       	std	Z+9, r1	; 0x09
    9166:	08 95       	ret

00009168 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9168:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    916a:	17 86       	std	Z+15, r1	; 0x0f
	s->up_anim.anim_count = 2;
    916c:	82 e0       	ldi	r24, 0x02	; 2
    916e:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9170:	85 e0       	ldi	r24, 0x05	; 5
    9172:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frame_count = 0;
    9174:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9176:	66 23       	and	r22, r22
    9178:	19 f0       	breq	.+6      	; 0x9180 <set_shot_animations+0x18>
    917a:	8d e1       	ldi	r24, 0x1D	; 29
    917c:	91 e2       	ldi	r25, 0x21	; 33
    917e:	02 c0       	rjmp	.+4      	; 0x9184 <set_shot_animations+0x1c>
    9180:	80 e2       	ldi	r24, 0x20	; 32
    9182:	91 e2       	ldi	r25, 0x21	; 33
    9184:	94 8b       	std	Z+20, r25	; 0x14
    9186:	83 8b       	std	Z+19, r24	; 0x13
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    9188:	66 23       	and	r22, r22
    918a:	19 f0       	breq	.+6      	; 0x9192 <set_shot_animations+0x2a>
    918c:	8a e1       	ldi	r24, 0x1A	; 26
    918e:	91 e2       	ldi	r25, 0x21	; 33
    9190:	02 c0       	rjmp	.+4      	; 0x9196 <set_shot_animations+0x2e>
    9192:	80 e2       	ldi	r24, 0x20	; 32
    9194:	91 e2       	ldi	r25, 0x21	; 33
    9196:	96 8b       	std	Z+22, r25	; 0x16
    9198:	85 8b       	std	Z+21, r24	; 0x15
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    919a:	82 e0       	ldi	r24, 0x02	; 2
    919c:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    919e:	85 e0       	ldi	r24, 0x05	; 5
    91a0:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frame_count = 0;
    91a2:	14 8e       	std	Z+28, r1	; 0x1c
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    91a4:	66 23       	and	r22, r22
    91a6:	19 f0       	breq	.+6      	; 0x91ae <set_shot_animations+0x46>
    91a8:	87 e1       	ldi	r24, 0x17	; 23
    91aa:	91 e2       	ldi	r25, 0x21	; 33
    91ac:	02 c0       	rjmp	.+4      	; 0x91b2 <set_shot_animations+0x4a>
    91ae:	80 e2       	ldi	r24, 0x20	; 32
    91b0:	91 e2       	ldi	r25, 0x21	; 33
    91b2:	96 8f       	std	Z+30, r25	; 0x1e
    91b4:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    91b6:	66 23       	and	r22, r22
    91b8:	19 f0       	breq	.+6      	; 0x91c0 <set_shot_animations+0x58>
    91ba:	84 e1       	ldi	r24, 0x14	; 20
    91bc:	91 e2       	ldi	r25, 0x21	; 33
    91be:	02 c0       	rjmp	.+4      	; 0x91c4 <set_shot_animations+0x5c>
    91c0:	80 e2       	ldi	r24, 0x20	; 32
    91c2:	91 e2       	ldi	r25, 0x21	; 33
    91c4:	90 a3       	std	Z+32, r25	; 0x20
    91c6:	87 8f       	std	Z+31, r24	; 0x1f
    91c8:	08 95       	ret

000091ca <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    91ca:	0f 93       	push	r16
    91cc:	1f 93       	push	r17
    91ce:	cf 93       	push	r28
    91d0:	df 93       	push	r29
    91d2:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    91d4:	8a e5       	ldi	r24, 0x5A	; 90
    91d6:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    91d8:	88 e7       	ldi	r24, 0x78	; 120
    91da:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    91dc:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    91de:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    91e0:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    91e2:	18 82       	st	Y, r1
	p->shared.speed = 0;
    91e4:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    91e6:	82 e3       	ldi	r24, 0x32	; 50
    91e8:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    91ea:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    91ec:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    91ee:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    91f0:	fe 01       	movw	r30, r28
    91f2:	e7 5b       	subi	r30, 0xB7	; 183
    91f4:	ff 4f       	sbci	r31, 0xFF	; 255
    91f6:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    91f8:	31 96       	adiw	r30, 0x01	; 1
    91fa:	91 e0       	ldi	r25, 0x01	; 1
    91fc:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    91fe:	31 96       	adiw	r30, 0x01	; 1
    9200:	85 e0       	ldi	r24, 0x05	; 5
    9202:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9204:	31 96       	adiw	r30, 0x01	; 1
    9206:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9208:	31 96       	adiw	r30, 0x01	; 1
    920a:	71 83       	std	Z+1, r23	; 0x01
    920c:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    920e:	36 96       	adiw	r30, 0x06	; 6
    9210:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9212:	31 96       	adiw	r30, 0x01	; 1
    9214:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9216:	31 96       	adiw	r30, 0x01	; 1
    9218:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    921a:	31 96       	adiw	r30, 0x01	; 1
    921c:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    921e:	31 96       	adiw	r30, 0x01	; 1
    9220:	51 83       	std	Z+1, r21	; 0x01
    9222:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9224:	36 96       	adiw	r30, 0x06	; 6
    9226:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9228:	31 96       	adiw	r30, 0x01	; 1
    922a:	93 e0       	ldi	r25, 0x03	; 3
    922c:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    922e:	31 96       	adiw	r30, 0x01	; 1
    9230:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9232:	31 96       	adiw	r30, 0x01	; 1
    9234:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9236:	31 96       	adiw	r30, 0x01	; 1
    9238:	8f e2       	ldi	r24, 0x2F	; 47
    923a:	91 e2       	ldi	r25, 0x21	; 33
    923c:	91 83       	std	Z+1, r25	; 0x01
    923e:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9240:	32 96       	adiw	r30, 0x02	; 2
    9242:	89 e2       	ldi	r24, 0x29	; 41
    9244:	91 e2       	ldi	r25, 0x21	; 33
    9246:	91 83       	std	Z+1, r25	; 0x01
    9248:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    924a:	32 96       	adiw	r30, 0x02	; 2
    924c:	83 e2       	ldi	r24, 0x23	; 35
    924e:	91 e2       	ldi	r25, 0x21	; 33
    9250:	91 83       	std	Z+1, r25	; 0x01
    9252:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9254:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9256:	8e 01       	movw	r16, r28
    9258:	0a 5d       	subi	r16, 0xDA	; 218
    925a:	1f 4f       	sbci	r17, 0xFF	; 255
    925c:	60 e0       	ldi	r22, 0x00	; 0
    925e:	c8 01       	movw	r24, r16
    9260:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9264:	60 e0       	ldi	r22, 0x00	; 0
    9266:	c8 01       	movw	r24, r16
    9268:	0e 94 b4 48 	call	0x9168	; 0x9168 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->goal_direction = 0;
    926c:	1b 8e       	std	Y+27, r1	; 0x1b
    926e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal = 0;
    9270:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal_reached = 0;
    9272:	1d 8e       	std	Y+29, r1	; 0x1d
	p->old_x = 0;
    9274:	1e 8e       	std	Y+30, r1	; 0x1e
    9276:	1f 8e       	std	Y+31, r1	; 0x1f
    9278:	18 a2       	std	Y+32, r1	; 0x20
    927a:	19 a2       	std	Y+33, r1	; 0x21
	p->old_y = 0;
    927c:	1a a2       	std	Y+34, r1	; 0x22
    927e:	1b a2       	std	Y+35, r1	; 0x23
    9280:	1c a2       	std	Y+36, r1	; 0x24
    9282:	1d a2       	std	Y+37, r1	; 0x25
}
    9284:	df 91       	pop	r29
    9286:	cf 91       	pop	r28
    9288:	1f 91       	pop	r17
    928a:	0f 91       	pop	r16
    928c:	08 95       	ret

0000928e <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    928e:	fc 01       	movw	r30, r24
    9290:	10 8a       	std	Z+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9292:	60 e0       	ldi	r22, 0x00	; 0
    9294:	86 96       	adiw	r24, 0x26	; 38
    9296:	0c 94 98 48 	jmp	0x9130	; 0x9130 <init_shot_state>

0000929a <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    929a:	e8 e0       	ldi	r30, 0x08	; 8
    929c:	fc e0       	ldi	r31, 0x0C	; 12
    929e:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    92a0:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    92a2:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    92a4:	43 e5       	ldi	r20, 0x53	; 83
    92a6:	51 e2       	ldi	r21, 0x21	; 33
    92a8:	6f e5       	ldi	r22, 0x5F	; 95
    92aa:	71 e2       	ldi	r23, 0x21	; 33
    92ac:	85 e2       	ldi	r24, 0x25	; 37
    92ae:	9c e0       	ldi	r25, 0x0C	; 12
    92b0:	0e 94 e5 48 	call	0x91ca	; 0x91ca <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    92b4:	4b e3       	ldi	r20, 0x3B	; 59
    92b6:	51 e2       	ldi	r21, 0x21	; 33
    92b8:	67 e4       	ldi	r22, 0x47	; 71
    92ba:	71 e2       	ldi	r23, 0x21	; 33
    92bc:	82 e8       	ldi	r24, 0x82	; 130
    92be:	9f e0       	ldi	r25, 0x0F	; 15
    92c0:	0c 94 e5 48 	jmp	0x91ca	; 0x91ca <init_player>

000092c4 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    92c4:	cf 93       	push	r28
    92c6:	df 93       	push	r29
    92c8:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    92ca:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    92cc:	69 89       	ldd	r22, Y+17	; 0x11
    92ce:	70 e0       	ldi	r23, 0x00	; 0
    92d0:	80 e0       	ldi	r24, 0x00	; 0
    92d2:	90 e0       	ldi	r25, 0x00	; 0
    92d4:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <__floatunsisf>
    92d8:	6a 83       	std	Y+2, r22	; 0x02
    92da:	7b 83       	std	Y+3, r23	; 0x03
    92dc:	8c 83       	std	Y+4, r24	; 0x04
    92de:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    92e0:	6a 89       	ldd	r22, Y+18	; 0x12
    92e2:	70 e0       	ldi	r23, 0x00	; 0
    92e4:	80 e0       	ldi	r24, 0x00	; 0
    92e6:	90 e0       	ldi	r25, 0x00	; 0
    92e8:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <__floatunsisf>
    92ec:	6e 83       	std	Y+6, r22	; 0x06
    92ee:	7f 83       	std	Y+7, r23	; 0x07
    92f0:	88 87       	std	Y+8, r24	; 0x08
    92f2:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    92f4:	18 82       	st	Y, r1
	player->shared.speed = 0;
    92f6:	19 82       	std	Y+1, r1	; 0x01
	
}
    92f8:	df 91       	pop	r29
    92fa:	cf 91       	pop	r28
    92fc:	08 95       	ret

000092fe <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    92fe:	cf 93       	push	r28
    9300:	df 93       	push	r29
    9302:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9304:	bc 01       	movw	r22, r24
    9306:	88 81       	ld	r24, Y
    9308:	99 81       	ldd	r25, Y+1	; 0x01
    930a:	0e 94 61 39 	call	0x72c2	; 0x72c2 <EepromReadBlock>
	if (status == 0x03)
    930e:	83 30       	cpi	r24, 0x03	; 3
    9310:	29 f4       	brne	.+10     	; 0x931c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9312:	ce 01       	movw	r24, r28
	}
}
    9314:	df 91       	pop	r29
    9316:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9318:	0c 94 f4 38 	jmp	0x71e8	; 0x71e8 <EepromWriteBlock>
	}
}
    931c:	df 91       	pop	r29
    931e:	cf 91       	pop	r28
    9320:	08 95       	ret

00009322 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9322:	61 e0       	ldi	r22, 0x01	; 1
    9324:	83 e0       	ldi	r24, 0x03	; 3
    9326:	0e 94 39 46 	call	0x8c72	; 0x8c72 <FadeOut>
	ClearVram();
    932a:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    932e:	60 e0       	ldi	r22, 0x00	; 0
    9330:	83 e0       	ldi	r24, 0x03	; 3
    9332:	0c 94 2d 46 	jmp	0x8c5a	; 0x8c5a <FadeIn>

00009336 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9336:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9338:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    933a:	40 e0       	ldi	r20, 0x00	; 0
    933c:	65 e6       	ldi	r22, 0x65	; 101
    933e:	71 e2       	ldi	r23, 0x21	; 33
    9340:	8c 2f       	mov	r24, r28
    9342:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
    9346:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9348:	ca 30       	cpi	r28, 0x0A	; 10
    934a:	b9 f7       	brne	.-18     	; 0x933a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    934c:	cf 91       	pop	r28
    934e:	08 95       	ret

00009350 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9350:	cf 92       	push	r12
    9352:	df 92       	push	r13
    9354:	ff 92       	push	r15
    9356:	0f 93       	push	r16
    9358:	1f 93       	push	r17
    935a:	cf 93       	push	r28
    935c:	df 93       	push	r29
    935e:	cd b7       	in	r28, 0x3d	; 61
    9360:	de b7       	in	r29, 0x3e	; 62
    9362:	28 97       	sbiw	r28, 0x08	; 8
    9364:	0f b6       	in	r0, 0x3f	; 63
    9366:	f8 94       	cli
    9368:	de bf       	out	0x3e, r29	; 62
    936a:	0f be       	out	0x3f, r0	; 63
    936c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    936e:	90 91 33 0c 	lds	r25, 0x0C33
    9372:	80 91 90 0f 	lds	r24, 0x0F90
    9376:	98 17       	cp	r25, r24
    9378:	28 f4       	brcc	.+10     	; 0x9384 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    937a:	e5 e2       	ldi	r30, 0x25	; 37
    937c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    937e:	a2 e8       	ldi	r26, 0x82	; 130
    9380:	bf e0       	ldi	r27, 0x0F	; 15
    9382:	04 c0       	rjmp	.+8      	; 0x938c <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9384:	e2 e8       	ldi	r30, 0x82	; 130
    9386:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9388:	a5 e2       	ldi	r26, 0x25	; 37
    938a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    938c:	1a 96       	adiw	r26, 0x0a	; 10
    938e:	8c 91       	ld	r24, X
    9390:	1a 97       	sbiw	r26, 0x0a	; 10
    9392:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    9394:	82 85       	ldd	r24, Z+10	; 0x0a
    9396:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    9398:	1e 96       	adiw	r26, 0x0e	; 14
    939a:	8c 91       	ld	r24, X
    939c:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    939e:	96 85       	ldd	r25, Z+14	; 0x0e
    93a0:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    93a2:	f8 2e       	mov	r15, r24
    93a4:	f9 1a       	sub	r15, r25
    93a6:	00 e0       	ldi	r16, 0x00	; 0
    93a8:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    93aa:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    93ac:	81 11       	cpse	r24, r1
    93ae:	08 c0       	rjmp	.+16     	; 0x93c0 <save_score+0x70>
    93b0:	f8 01       	movw	r30, r16
    93b2:	ef 53       	subi	r30, 0x3F	; 63
    93b4:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    93b6:	94 81       	ldd	r25, Z+4	; 0x04
    93b8:	25 81       	ldd	r18, Z+5	; 0x05
    93ba:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    93bc:	9f 15       	cp	r25, r15
    93be:	d0 f4       	brcc	.+52     	; 0x93f4 <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    93c0:	44 e0       	ldi	r20, 0x04	; 4
    93c2:	c8 01       	movw	r24, r16
    93c4:	8d 53       	subi	r24, 0x3D	; 61
    93c6:	94 4f       	sbci	r25, 0xF4	; 244
    93c8:	6c 01       	movw	r12, r24
    93ca:	bc 01       	movw	r22, r24
    93cc:	ce 01       	movw	r24, r28
    93ce:	05 96       	adiw	r24, 0x05	; 5
    93d0:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    93d4:	44 e0       	ldi	r20, 0x04	; 4
    93d6:	be 01       	movw	r22, r28
    93d8:	6f 5f       	subi	r22, 0xFF	; 255
    93da:	7f 4f       	sbci	r23, 0xFF	; 255
    93dc:	c6 01       	movw	r24, r12
    93de:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    93e2:	44 e0       	ldi	r20, 0x04	; 4
    93e4:	be 01       	movw	r22, r28
    93e6:	6b 5f       	subi	r22, 0xFB	; 251
    93e8:	7f 4f       	sbci	r23, 0xFF	; 255
    93ea:	ce 01       	movw	r24, r28
    93ec:	01 96       	adiw	r24, 0x01	; 1
    93ee:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
				saved = 1;
    93f2:	81 e0       	ldi	r24, 0x01	; 1
    93f4:	0c 5f       	subi	r16, 0xFC	; 252
    93f6:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    93f8:	0c 31       	cpi	r16, 0x1C	; 28
    93fa:	11 05       	cpc	r17, r1
    93fc:	b9 f6       	brne	.-82     	; 0x93ac <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    93fe:	81 ec       	ldi	r24, 0xC1	; 193
    9400:	9b e0       	ldi	r25, 0x0B	; 11
    9402:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9406:	28 96       	adiw	r28, 0x08	; 8
    9408:	0f b6       	in	r0, 0x3f	; 63
    940a:	f8 94       	cli
    940c:	de bf       	out	0x3e, r29	; 62
    940e:	0f be       	out	0x3f, r0	; 63
    9410:	cd bf       	out	0x3d, r28	; 61
    9412:	df 91       	pop	r29
    9414:	cf 91       	pop	r28
    9416:	1f 91       	pop	r17
    9418:	0f 91       	pop	r16
    941a:	ff 90       	pop	r15
    941c:	df 90       	pop	r13
    941e:	cf 90       	pop	r12
    9420:	08 95       	ret

00009422 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9422:	0f 93       	push	r16
    9424:	1f 93       	push	r17
    9426:	cf 93       	push	r28
    9428:	df 93       	push	r29
    942a:	8c 01       	movw	r16, r24
    942c:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    942e:	88 81       	ld	r24, Y
    9430:	81 30       	cpi	r24, 0x01	; 1
    9432:	69 f1       	breq	.+90     	; 0x948e <position_shot+0x6c>
    9434:	98 f0       	brcs	.+38     	; 0x945c <position_shot+0x3a>
    9436:	82 30       	cpi	r24, 0x02	; 2
    9438:	f1 f1       	breq	.+124    	; 0x94b6 <position_shot+0x94>
    943a:	83 30       	cpi	r24, 0x03	; 3
    943c:	09 f0       	breq	.+2      	; 0x9440 <position_shot+0x1e>
    943e:	59 c0       	rjmp	.+178    	; 0x94f2 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9440:	f8 01       	movw	r30, r16
    9442:	82 81       	ldd	r24, Z+2	; 0x02
    9444:	93 81       	ldd	r25, Z+3	; 0x03
    9446:	a4 81       	ldd	r26, Z+4	; 0x04
    9448:	b5 81       	ldd	r27, Z+5	; 0x05
    944a:	8a 83       	std	Y+2, r24	; 0x02
    944c:	9b 83       	std	Y+3, r25	; 0x03
    944e:	ac 83       	std	Y+4, r26	; 0x04
    9450:	bd 83       	std	Y+5, r27	; 0x05
			shot->shared.y = player->shared.y + 4;
    9452:	20 e0       	ldi	r18, 0x00	; 0
    9454:	30 e0       	ldi	r19, 0x00	; 0
    9456:	40 e8       	ldi	r20, 0x80	; 128
    9458:	50 e4       	ldi	r21, 0x40	; 64
    945a:	41 c0       	rjmp	.+130    	; 0x94de <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    945c:	20 e0       	ldi	r18, 0x00	; 0
    945e:	30 e0       	ldi	r19, 0x00	; 0
    9460:	40 e8       	ldi	r20, 0x80	; 128
    9462:	50 e4       	ldi	r21, 0x40	; 64
    9464:	f8 01       	movw	r30, r16
    9466:	62 81       	ldd	r22, Z+2	; 0x02
    9468:	73 81       	ldd	r23, Z+3	; 0x03
    946a:	84 81       	ldd	r24, Z+4	; 0x04
    946c:	95 81       	ldd	r25, Z+5	; 0x05
    946e:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9472:	6a 83       	std	Y+2, r22	; 0x02
    9474:	7b 83       	std	Y+3, r23	; 0x03
    9476:	8c 83       	std	Y+4, r24	; 0x04
    9478:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y;
    947a:	f8 01       	movw	r30, r16
    947c:	86 81       	ldd	r24, Z+6	; 0x06
    947e:	97 81       	ldd	r25, Z+7	; 0x07
    9480:	a0 85       	ldd	r26, Z+8	; 0x08
    9482:	b1 85       	ldd	r27, Z+9	; 0x09
    9484:	8e 83       	std	Y+6, r24	; 0x06
    9486:	9f 83       	std	Y+7, r25	; 0x07
    9488:	a8 87       	std	Y+8, r26	; 0x08
    948a:	b9 87       	std	Y+9, r27	; 0x09
			break;
    948c:	32 c0       	rjmp	.+100    	; 0x94f2 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    948e:	20 e0       	ldi	r18, 0x00	; 0
    9490:	30 e0       	ldi	r19, 0x00	; 0
    9492:	40 e0       	ldi	r20, 0x00	; 0
    9494:	51 e4       	ldi	r21, 0x41	; 65
    9496:	f8 01       	movw	r30, r16
    9498:	62 81       	ldd	r22, Z+2	; 0x02
    949a:	73 81       	ldd	r23, Z+3	; 0x03
    949c:	84 81       	ldd	r24, Z+4	; 0x04
    949e:	95 81       	ldd	r25, Z+5	; 0x05
    94a0:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    94a4:	6a 83       	std	Y+2, r22	; 0x02
    94a6:	7b 83       	std	Y+3, r23	; 0x03
    94a8:	8c 83       	std	Y+4, r24	; 0x04
    94aa:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    94ac:	20 e0       	ldi	r18, 0x00	; 0
    94ae:	30 e0       	ldi	r19, 0x00	; 0
    94b0:	40 e8       	ldi	r20, 0x80	; 128
    94b2:	50 e4       	ldi	r21, 0x40	; 64
    94b4:	13 c0       	rjmp	.+38     	; 0x94dc <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    94b6:	20 e0       	ldi	r18, 0x00	; 0
    94b8:	30 e0       	ldi	r19, 0x00	; 0
    94ba:	40 e8       	ldi	r20, 0x80	; 128
    94bc:	50 e4       	ldi	r21, 0x40	; 64
    94be:	f8 01       	movw	r30, r16
    94c0:	62 81       	ldd	r22, Z+2	; 0x02
    94c2:	73 81       	ldd	r23, Z+3	; 0x03
    94c4:	84 81       	ldd	r24, Z+4	; 0x04
    94c6:	95 81       	ldd	r25, Z+5	; 0x05
    94c8:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    94cc:	6a 83       	std	Y+2, r22	; 0x02
    94ce:	7b 83       	std	Y+3, r23	; 0x03
    94d0:	8c 83       	std	Y+4, r24	; 0x04
    94d2:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 8;
    94d4:	20 e0       	ldi	r18, 0x00	; 0
    94d6:	30 e0       	ldi	r19, 0x00	; 0
    94d8:	40 e0       	ldi	r20, 0x00	; 0
    94da:	51 e4       	ldi	r21, 0x41	; 65
    94dc:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    94de:	66 81       	ldd	r22, Z+6	; 0x06
    94e0:	77 81       	ldd	r23, Z+7	; 0x07
    94e2:	80 85       	ldd	r24, Z+8	; 0x08
    94e4:	91 85       	ldd	r25, Z+9	; 0x09
    94e6:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    94ea:	6e 83       	std	Y+6, r22	; 0x06
    94ec:	7f 83       	std	Y+7, r23	; 0x07
    94ee:	88 87       	std	Y+8, r24	; 0x08
    94f0:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    94f2:	df 91       	pop	r29
    94f4:	cf 91       	pop	r28
    94f6:	1f 91       	pop	r17
    94f8:	0f 91       	pop	r16
    94fa:	08 95       	ret

000094fc <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    94fc:	0f 93       	push	r16
    94fe:	1f 93       	push	r17
    9500:	cf 93       	push	r28
    9502:	df 93       	push	r29
    9504:	8c 01       	movw	r16, r24
    9506:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9508:	ac 01       	movw	r20, r24
    950a:	45 5f       	subi	r20, 0xF5	; 245
    950c:	5f 4f       	sbci	r21, 0xFF	; 255
    950e:	23 e0       	ldi	r18, 0x03	; 3
    9510:	6e e0       	ldi	r22, 0x0E	; 14
    9512:	84 e0       	ldi	r24, 0x04	; 4
    9514:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
	Print(8, 14, &strMap[strOwns]);
    9518:	4c ed       	ldi	r20, 0xDC	; 220
    951a:	51 e0       	ldi	r21, 0x01	; 1
    951c:	6e e0       	ldi	r22, 0x0E	; 14
    951e:	70 e0       	ldi	r23, 0x00	; 0
    9520:	88 e0       	ldi	r24, 0x08	; 8
    9522:	90 e0       	ldi	r25, 0x00	; 0
    9524:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    9528:	ae 01       	movw	r20, r28
    952a:	45 5f       	subi	r20, 0xF5	; 245
    952c:	5f 4f       	sbci	r21, 0xFF	; 255
    952e:	23 e0       	ldi	r18, 0x03	; 3
    9530:	6e e0       	ldi	r22, 0x0E	; 14
    9532:	8d e0       	ldi	r24, 0x0D	; 13
    9534:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
	Print(17, 14, &strMap[strBy]);
    9538:	41 ee       	ldi	r20, 0xE1	; 225
    953a:	51 e0       	ldi	r21, 0x01	; 1
    953c:	6e e0       	ldi	r22, 0x0E	; 14
    953e:	70 e0       	ldi	r23, 0x00	; 0
    9540:	81 e1       	ldi	r24, 0x11	; 17
    9542:	90 e0       	ldi	r25, 0x00	; 0
    9544:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    9548:	21 e0       	ldi	r18, 0x01	; 1
    954a:	f8 01       	movw	r30, r16
    954c:	47 85       	ldd	r20, Z+15	; 0x0f
    954e:	6e e0       	ldi	r22, 0x0E	; 14
    9550:	70 e0       	ldi	r23, 0x00	; 0
    9552:	86 e1       	ldi	r24, 0x16	; 22
    9554:	90 e0       	ldi	r25, 0x00	; 0
    9556:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
	PrintChar(23, 14, '-');
    955a:	4d e2       	ldi	r20, 0x2D	; 45
    955c:	6e e0       	ldi	r22, 0x0E	; 14
    955e:	70 e0       	ldi	r23, 0x00	; 0
    9560:	87 e1       	ldi	r24, 0x17	; 23
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    9568:	21 e0       	ldi	r18, 0x01	; 1
    956a:	4f 85       	ldd	r20, Y+15	; 0x0f
    956c:	6e e0       	ldi	r22, 0x0E	; 14
    956e:	70 e0       	ldi	r23, 0x00	; 0
    9570:	8a e1       	ldi	r24, 0x1A	; 26
    9572:	90 e0       	ldi	r25, 0x00	; 0
}
    9574:	df 91       	pop	r29
    9576:	cf 91       	pop	r28
    9578:	1f 91       	pop	r17
    957a:	0f 91       	pop	r16
	Print(8, 14, &strMap[strOwns]);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, &strMap[strBy]);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    957c:	0c 94 b7 45 	jmp	0x8b6e	; 0x8b6e <PrintByte>

00009580 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    9580:	0f 93       	push	r16
    9582:	1f 93       	push	r17
    9584:	cf 93       	push	r28
    9586:	df 93       	push	r29
    9588:	8c 01       	movw	r16, r24
    958a:	eb 01       	movw	r28, r22
    Print(9, 13, &strMap[strFinalScore]);
    958c:	44 ee       	ldi	r20, 0xE4	; 228
    958e:	51 e0       	ldi	r21, 0x01	; 1
    9590:	6d e0       	ldi	r22, 0x0D	; 13
    9592:	70 e0       	ldi	r23, 0x00	; 0
    9594:	89 e0       	ldi	r24, 0x09	; 9
    9596:	90 e0       	ldi	r25, 0x00	; 0
    9598:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    959c:	a8 01       	movw	r20, r16
    959e:	45 5f       	subi	r20, 0xF5	; 245
    95a0:	5f 4f       	sbci	r21, 0xFF	; 255
    95a2:	23 e0       	ldi	r18, 0x03	; 3
    95a4:	6e e0       	ldi	r22, 0x0E	; 14
    95a6:	84 e0       	ldi	r24, 0x04	; 4
    95a8:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
    Print(8, 14, &strMap[strOwns]);
    95ac:	4c ed       	ldi	r20, 0xDC	; 220
    95ae:	51 e0       	ldi	r21, 0x01	; 1
    95b0:	6e e0       	ldi	r22, 0x0E	; 14
    95b2:	70 e0       	ldi	r23, 0x00	; 0
    95b4:	88 e0       	ldi	r24, 0x08	; 8
    95b6:	90 e0       	ldi	r25, 0x00	; 0
    95b8:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    95bc:	ae 01       	movw	r20, r28
    95be:	45 5f       	subi	r20, 0xF5	; 245
    95c0:	5f 4f       	sbci	r21, 0xFF	; 255
    95c2:	23 e0       	ldi	r18, 0x03	; 3
    95c4:	6e e0       	ldi	r22, 0x0E	; 14
    95c6:	8d e0       	ldi	r24, 0x0D	; 13
    95c8:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
    Print(17, 14, &strMap[strBy]);
    95cc:	41 ee       	ldi	r20, 0xE1	; 225
    95ce:	51 e0       	ldi	r21, 0x01	; 1
    95d0:	6e e0       	ldi	r22, 0x0E	; 14
    95d2:	70 e0       	ldi	r23, 0x00	; 0
    95d4:	81 e1       	ldi	r24, 0x11	; 17
    95d6:	90 e0       	ldi	r25, 0x00	; 0
    95d8:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    PrintByte(22, 14, winner->score ,true);
    95dc:	21 e0       	ldi	r18, 0x01	; 1
    95de:	f8 01       	movw	r30, r16
    95e0:	46 85       	ldd	r20, Z+14	; 0x0e
    95e2:	6e e0       	ldi	r22, 0x0E	; 14
    95e4:	70 e0       	ldi	r23, 0x00	; 0
    95e6:	86 e1       	ldi	r24, 0x16	; 22
    95e8:	90 e0       	ldi	r25, 0x00	; 0
    95ea:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
    PrintChar(23, 14, '-');
    95ee:	4d e2       	ldi	r20, 0x2D	; 45
    95f0:	6e e0       	ldi	r22, 0x0E	; 14
    95f2:	70 e0       	ldi	r23, 0x00	; 0
    95f4:	87 e1       	ldi	r24, 0x17	; 23
    95f6:	90 e0       	ldi	r25, 0x00	; 0
    95f8:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    95fc:	21 e0       	ldi	r18, 0x01	; 1
    95fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    9600:	6e e0       	ldi	r22, 0x0E	; 14
    9602:	70 e0       	ldi	r23, 0x00	; 0
    9604:	8a e1       	ldi	r24, 0x1A	; 26
    9606:	90 e0       	ldi	r25, 0x00	; 0
}
    9608:	df 91       	pop	r29
    960a:	cf 91       	pop	r28
    960c:	1f 91       	pop	r17
    960e:	0f 91       	pop	r16
    Print(8, 14, &strMap[strOwns]);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, &strMap[strBy]);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9610:	0c 94 b7 45 	jmp	0x8b6e	; 0x8b6e <PrintByte>

00009614 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9614:	cf 93       	push	r28
    9616:	df 93       	push	r29
    9618:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    961a:	ac 01       	movw	r20, r24
    961c:	45 5f       	subi	r20, 0xF5	; 245
    961e:	5f 4f       	sbci	r21, 0xFF	; 255
    9620:	23 e0       	ldi	r18, 0x03	; 3
    9622:	60 e0       	ldi	r22, 0x00	; 0
    9624:	8a e0       	ldi	r24, 0x0A	; 10
    9626:	8c 0f       	add	r24, r28
    9628:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
	Print(x, 0, &strMap[strScore]);
    962c:	d0 e0       	ldi	r29, 0x00	; 0
    962e:	45 e9       	ldi	r20, 0x95	; 149
    9630:	52 e0       	ldi	r21, 0x02	; 2
    9632:	60 e0       	ldi	r22, 0x00	; 0
    9634:	70 e0       	ldi	r23, 0x00	; 0
    9636:	ce 01       	movw	r24, r28
    9638:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(x, 1, &strMap[strTotal]);
    963c:	4c e9       	ldi	r20, 0x9C	; 156
    963e:	52 e0       	ldi	r21, 0x02	; 2
    9640:	61 e0       	ldi	r22, 0x01	; 1
    9642:	70 e0       	ldi	r23, 0x00	; 0
    9644:	ce 01       	movw	r24, r28
	
}
    9646:	df 91       	pop	r29
    9648:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, &strMap[strScore]);
	Print(x, 1, &strMap[strTotal]);
    964a:	0c 94 ea 45 	jmp	0x8bd4	; 0x8bd4 <Print>

0000964e <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    964e:	0f 93       	push	r16
    9650:	1f 93       	push	r17
    9652:	cf 93       	push	r28
    9654:	df 93       	push	r29
    9656:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    9658:	c6 2f       	mov	r28, r22
    965a:	d0 e0       	ldi	r29, 0x00	; 0
    965c:	28 96       	adiw	r28, 0x08	; 8
    965e:	20 e0       	ldi	r18, 0x00	; 0
    9660:	fc 01       	movw	r30, r24
    9662:	47 85       	ldd	r20, Z+15	; 0x0f
    9664:	60 e0       	ldi	r22, 0x00	; 0
    9666:	70 e0       	ldi	r23, 0x00	; 0
    9668:	ce 01       	movw	r24, r28
    966a:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    966e:	20 e0       	ldi	r18, 0x00	; 0
    9670:	f8 01       	movw	r30, r16
    9672:	46 85       	ldd	r20, Z+14	; 0x0e
    9674:	61 e0       	ldi	r22, 0x01	; 1
    9676:	70 e0       	ldi	r23, 0x00	; 0
    9678:	ce 01       	movw	r24, r28
}
    967a:	df 91       	pop	r29
    967c:	cf 91       	pop	r28
    967e:	1f 91       	pop	r17
    9680:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    9682:	0c 94 b7 45 	jmp	0x8b6e	; 0x8b6e <PrintByte>

00009686 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    9686:	cf 93       	push	r28
    9688:	df 93       	push	r29
    968a:	ec 01       	movw	r28, r24
    968c:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    968e:	9c 89       	ldd	r25, Y+20	; 0x14
    9690:	9a 35       	cpi	r25, 0x5A	; 90
    9692:	99 f0       	breq	.+38     	; 0x96ba <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    9694:	91 11       	cpse	r25, r1
    9696:	0c c0       	rjmp	.+24     	; 0x96b0 <render_banter+0x2a>
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
    9698:	4d 89       	ldd	r20, Y+21	; 0x15
    969a:	9f e0       	ldi	r25, 0x0F	; 15
    969c:	49 9f       	mul	r20, r25
    969e:	a0 01       	movw	r20, r0
    96a0:	11 24       	eor	r1, r1
    96a2:	40 51       	subi	r20, 0x10	; 16
    96a4:	5e 4f       	sbci	r21, 0xFE	; 254
    96a6:	62 e0       	ldi	r22, 0x02	; 2
    96a8:	70 e0       	ldi	r23, 0x00	; 0
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    96b0:	8c 89       	ldd	r24, Y+20	; 0x14
    96b2:	8f 5f       	subi	r24, 0xFF	; 255
    96b4:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
		}
		clear_banter = 1;
    96b6:	41 e0       	ldi	r20, 0x01	; 1
    96b8:	0a c0       	rjmp	.+20     	; 0x96ce <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    96ba:	44 23       	and	r20, r20
    96bc:	41 f0       	breq	.+16     	; 0x96ce <render_banter+0x48>
	{
		Print(banter_x, 2, &strMap[strBanterClear]);
    96be:	46 e8       	ldi	r20, 0x86	; 134
    96c0:	52 e0       	ldi	r21, 0x02	; 2
    96c2:	62 e0       	ldi	r22, 0x02	; 2
    96c4:	70 e0       	ldi	r23, 0x00	; 0
    96c6:	90 e0       	ldi	r25, 0x00	; 0
    96c8:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    96cc:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    96ce:	84 2f       	mov	r24, r20
    96d0:	df 91       	pop	r29
    96d2:	cf 91       	pop	r28
    96d4:	08 95       	ret

000096d6 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    96d6:	ef 92       	push	r14
    96d8:	ff 92       	push	r15
    96da:	0f 93       	push	r16
    96dc:	1f 93       	push	r17
    96de:	cf 93       	push	r28
    96e0:	df 93       	push	r29
    96e2:	1f 92       	push	r1
    96e4:	cd b7       	in	r28, 0x3d	; 61
    96e6:	de b7       	in	r29, 0x3e	; 62
    96e8:	7c 01       	movw	r14, r24
    96ea:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    96ec:	fc 01       	movw	r30, r24
    96ee:	66 81       	ldd	r22, Z+6	; 0x06
    96f0:	77 81       	ldd	r23, Z+7	; 0x07
    96f2:	80 85       	ldd	r24, Z+8	; 0x08
    96f4:	91 85       	ldd	r25, Z+9	; 0x09
    96f6:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    96fa:	46 2f       	mov	r20, r22
    96fc:	f7 01       	movw	r30, r14
    96fe:	62 81       	ldd	r22, Z+2	; 0x02
    9700:	73 81       	ldd	r23, Z+3	; 0x03
    9702:	84 81       	ldd	r24, Z+4	; 0x04
    9704:	95 81       	ldd	r25, Z+5	; 0x05
    9706:	49 83       	std	Y+1, r20	; 0x01
    9708:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    970c:	02 e0       	ldi	r16, 0x02	; 2
    970e:	22 e0       	ldi	r18, 0x02	; 2
    9710:	49 81       	ldd	r20, Y+1	; 0x01
    9712:	81 2f       	mov	r24, r17
    9714:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
}
    9718:	0f 90       	pop	r0
    971a:	df 91       	pop	r29
    971c:	cf 91       	pop	r28
    971e:	1f 91       	pop	r17
    9720:	0f 91       	pop	r16
    9722:	ff 90       	pop	r15
    9724:	ef 90       	pop	r14
    9726:	08 95       	ret

00009728 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    9728:	ef 92       	push	r14
    972a:	ff 92       	push	r15
    972c:	0f 93       	push	r16
    972e:	1f 93       	push	r17
    9730:	cf 93       	push	r28
    9732:	df 93       	push	r29
    9734:	1f 92       	push	r1
    9736:	cd b7       	in	r28, 0x3d	; 61
    9738:	de b7       	in	r29, 0x3e	; 62
    973a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    973c:	80 89       	ldd	r24, Z+16	; 0x10
    973e:	88 23       	and	r24, r24
    9740:	b9 f0       	breq	.+46     	; 0x9770 <render_shot+0x48>
    9742:	16 2f       	mov	r17, r22
    9744:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9746:	64 a5       	ldd	r22, Z+44	; 0x2c
    9748:	75 a5       	ldd	r23, Z+45	; 0x2d
    974a:	86 a5       	ldd	r24, Z+46	; 0x2e
    974c:	97 a5       	ldd	r25, Z+47	; 0x2f
    974e:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9752:	46 2f       	mov	r20, r22
    9754:	f7 01       	movw	r30, r14
    9756:	60 a5       	ldd	r22, Z+40	; 0x28
    9758:	71 a5       	ldd	r23, Z+41	; 0x29
    975a:	82 a5       	ldd	r24, Z+42	; 0x2a
    975c:	93 a5       	ldd	r25, Z+43	; 0x2b
    975e:	49 83       	std	Y+1, r20	; 0x01
    9760:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9764:	01 e0       	ldi	r16, 0x01	; 1
    9766:	21 e0       	ldi	r18, 0x01	; 1
    9768:	49 81       	ldd	r20, Y+1	; 0x01
    976a:	81 2f       	mov	r24, r17
    976c:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
			sprite_index++;
		}
	}
}
    9770:	0f 90       	pop	r0
    9772:	df 91       	pop	r29
    9774:	cf 91       	pop	r28
    9776:	1f 91       	pop	r17
    9778:	0f 91       	pop	r16
    977a:	ff 90       	pop	r15
    977c:	ef 90       	pop	r14
    977e:	08 95       	ret

00009780 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    9780:	cf 92       	push	r12
    9782:	df 92       	push	r13
    9784:	ef 92       	push	r14
    9786:	ff 92       	push	r15
    9788:	0f 93       	push	r16
    978a:	1f 93       	push	r17
    978c:	cf 93       	push	r28
    978e:	df 93       	push	r29
    9790:	1f 92       	push	r1
    9792:	cd b7       	in	r28, 0x3d	; 61
    9794:	de b7       	in	r29, 0x3e	; 62
    9796:	8c 01       	movw	r16, r24
    9798:	0f 5f       	subi	r16, 0xFF	; 255
    979a:	1f 4f       	sbci	r17, 0xFF	; 255
    979c:	7c 01       	movw	r14, r24
    979e:	29 e1       	ldi	r18, 0x19	; 25
    97a0:	e2 0e       	add	r14, r18
    97a2:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    97a4:	8e e1       	ldi	r24, 0x1E	; 30
    97a6:	c8 2e       	mov	r12, r24
    97a8:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    97aa:	f8 01       	movw	r30, r16
    97ac:	82 85       	ldd	r24, Z+10	; 0x0a
    97ae:	93 85       	ldd	r25, Z+11	; 0x0b
    97b0:	89 2b       	or	r24, r25
    97b2:	e1 f0       	breq	.+56     	; 0x97ec <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    97b4:	be 01       	movw	r22, r28
    97b6:	6f 5f       	subi	r22, 0xFF	; 255
    97b8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ba:	c8 01       	movw	r24, r16
    97bc:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    97c0:	9c 01       	movw	r18, r24
			if (looped)
    97c2:	49 81       	ldd	r20, Y+1	; 0x01
    97c4:	f8 01       	movw	r30, r16
    97c6:	82 85       	ldd	r24, Z+10	; 0x0a
    97c8:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    97ca:	b6 01       	movw	r22, r12
    97cc:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    97d0:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    97d2:	44 23       	and	r20, r20
    97d4:	41 f0       	breq	.+16     	; 0x97e6 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    97d6:	40 e0       	ldi	r20, 0x00	; 0
    97d8:	50 e0       	ldi	r21, 0x00	; 0
    97da:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
				ta->anims[i].tile_index = 0;
    97de:	f8 01       	movw	r30, r16
    97e0:	13 86       	std	Z+11, r1	; 0x0b
    97e2:	12 86       	std	Z+10, r1	; 0x0a
    97e4:	03 c0       	rjmp	.+6      	; 0x97ec <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    97e6:	a9 01       	movw	r20, r18
    97e8:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
    97ec:	04 5f       	subi	r16, 0xF4	; 244
    97ee:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    97f0:	0e 15       	cp	r16, r14
    97f2:	1f 05       	cpc	r17, r15
    97f4:	d1 f6       	brne	.-76     	; 0x97aa <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    97f6:	0f 90       	pop	r0
    97f8:	df 91       	pop	r29
    97fa:	cf 91       	pop	r28
    97fc:	1f 91       	pop	r17
    97fe:	0f 91       	pop	r16
    9800:	ff 90       	pop	r15
    9802:	ef 90       	pop	r14
    9804:	df 90       	pop	r13
    9806:	cf 90       	pop	r12
    9808:	08 95       	ret

0000980a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    980a:	ff 92       	push	r15
    980c:	0f 93       	push	r16
    980e:	1f 93       	push	r17
    9810:	cf 93       	push	r28
    9812:	df 93       	push	r29
    9814:	1f 92       	push	r1
    9816:	cd b7       	in	r28, 0x3d	; 61
    9818:	de b7       	in	r29, 0x3e	; 62
    981a:	8c 01       	movw	r16, r24
    981c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    981e:	fc 01       	movw	r30, r24
    9820:	83 89       	ldd	r24, Z+19	; 0x13
    9822:	80 ff       	sbrs	r24, 0
    9824:	18 c0       	rjmp	.+48     	; 0x9856 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9826:	be 01       	movw	r22, r28
    9828:	6f 5f       	subi	r22, 0xFF	; 255
    982a:	7f 4f       	sbci	r23, 0xFF	; 255
    982c:	c8 01       	movw	r24, r16
    982e:	83 5a       	subi	r24, 0xA3	; 163
    9830:	9f 4f       	sbci	r25, 0xFF	; 255
    9832:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9836:	29 81       	ldd	r18, Y+1	; 0x01
    9838:	22 23       	and	r18, r18
    983a:	09 f4       	brne	.+2      	; 0x983e <tank_map+0x34>
    983c:	5a c0       	rjmp	.+180    	; 0x98f2 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    983e:	f8 01       	movw	r30, r16
    9840:	83 89       	ldd	r24, Z+19	; 0x13
    9842:	91 e0       	ldi	r25, 0x01	; 1
    9844:	98 27       	eor	r25, r24
    9846:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9848:	c8 01       	movw	r24, r16
    984a:	0e 94 62 49 	call	0x92c4	; 0x92c4 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    984e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9850:	88 e6       	ldi	r24, 0x68	; 104
    9852:	91 e2       	ldi	r25, 0x21	; 33
    9854:	4f c0       	rjmp	.+158    	; 0x98f4 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9856:	f8 01       	movw	r30, r16
    9858:	96 89       	ldd	r25, Z+22	; 0x16
    985a:	98 37       	cpi	r25, 0x78	; 120
    985c:	11 f0       	breq	.+4      	; 0x9862 <tank_map+0x58>
		{
			player->grace_frame++;
    985e:	9f 5f       	subi	r25, 0xFF	; 255
    9860:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    9862:	f8 01       	movw	r30, r16
    9864:	90 81       	ld	r25, Z
    9866:	91 30       	cpi	r25, 0x01	; 1
    9868:	79 f0       	breq	.+30     	; 0x9888 <tank_map+0x7e>
    986a:	f8 f0       	brcs	.+62     	; 0x98aa <tank_map+0xa0>
    986c:	92 30       	cpi	r25, 0x02	; 2
    986e:	99 f0       	breq	.+38     	; 0x9896 <tank_map+0x8c>
    9870:	93 30       	cpi	r25, 0x03	; 3
    9872:	d9 f4       	brne	.+54     	; 0x98aa <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9874:	be 01       	movw	r22, r28
    9876:	6f 5f       	subi	r22, 0xFF	; 255
    9878:	7f 4f       	sbci	r23, 0xFF	; 255
    987a:	c8 01       	movw	r24, r16
    987c:	8d 5a       	subi	r24, 0xAD	; 173
    987e:	9f 4f       	sbci	r25, 0xFF	; 255
    9880:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    9884:	41 e0       	ldi	r20, 0x01	; 1
    9886:	1a c0       	rjmp	.+52     	; 0x98bc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    9888:	be 01       	movw	r22, r28
    988a:	6f 5f       	subi	r22, 0xFF	; 255
    988c:	7f 4f       	sbci	r23, 0xFF	; 255
    988e:	c8 01       	movw	r24, r16
    9890:	8d 5a       	subi	r24, 0xAD	; 173
    9892:	9f 4f       	sbci	r25, 0xFF	; 255
    9894:	10 c0       	rjmp	.+32     	; 0x98b6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    9896:	be 01       	movw	r22, r28
    9898:	6f 5f       	subi	r22, 0xFF	; 255
    989a:	7f 4f       	sbci	r23, 0xFF	; 255
    989c:	c8 01       	movw	r24, r16
    989e:	87 5b       	subi	r24, 0xB7	; 183
    98a0:	9f 4f       	sbci	r25, 0xFF	; 255
    98a2:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    98a6:	42 e0       	ldi	r20, 0x02	; 2
    98a8:	09 c0       	rjmp	.+18     	; 0x98bc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    98aa:	be 01       	movw	r22, r28
    98ac:	6f 5f       	subi	r22, 0xFF	; 255
    98ae:	7f 4f       	sbci	r23, 0xFF	; 255
    98b0:	c8 01       	movw	r24, r16
    98b2:	87 5b       	subi	r24, 0xB7	; 183
    98b4:	9f 4f       	sbci	r25, 0xFF	; 255
    98b6:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    98ba:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    98bc:	f8 01       	movw	r30, r16
    98be:	26 89       	ldd	r18, Z+22	; 0x16
    98c0:	28 37       	cpi	r18, 0x78	; 120
    98c2:	31 f0       	breq	.+12     	; 0x98d0 <tank_map+0xc6>
    98c4:	20 91 34 0b 	lds	r18, 0x0B34
    98c8:	22 23       	and	r18, r18
    98ca:	11 f0       	breq	.+4      	; 0x98d0 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    98cc:	88 e6       	ldi	r24, 0x68	; 104
    98ce:	91 e2       	ldi	r25, 0x21	; 33
		}
		toggle_counter--;
    98d0:	20 91 03 01 	lds	r18, 0x0103
    98d4:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    98d6:	19 f0       	breq	.+6      	; 0x98de <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    98d8:	20 93 03 01 	sts	0x0103, r18
    98dc:	0b c0       	rjmp	.+22     	; 0x98f4 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    98de:	24 e1       	ldi	r18, 0x14	; 20
    98e0:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    98e4:	30 91 34 0b 	lds	r19, 0x0B34
    98e8:	21 e0       	ldi	r18, 0x01	; 1
    98ea:	23 27       	eor	r18, r19
    98ec:	20 93 34 0b 	sts	0x0B34, r18
    98f0:	01 c0       	rjmp	.+2      	; 0x98f4 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    98f2:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    98f4:	bc 01       	movw	r22, r24
    98f6:	8f 2d       	mov	r24, r15
    98f8:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    98fc:	84 e0       	ldi	r24, 0x04	; 4
    98fe:	8f 0d       	add	r24, r15
    9900:	0f 90       	pop	r0
    9902:	df 91       	pop	r29
    9904:	cf 91       	pop	r28
    9906:	1f 91       	pop	r17
    9908:	0f 91       	pop	r16
    990a:	ff 90       	pop	r15
    990c:	08 95       	ret

0000990e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    990e:	1f 93       	push	r17
    9910:	cf 93       	push	r28
    9912:	df 93       	push	r29
    9914:	1f 92       	push	r1
    9916:	cd b7       	in	r28, 0x3d	; 61
    9918:	de b7       	in	r29, 0x3e	; 62
    991a:	16 2f       	mov	r17, r22
	char looped = 0;
    991c:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    991e:	fc 01       	movw	r30, r24
    9920:	23 a9       	ldd	r18, Z+51	; 0x33
    9922:	22 23       	and	r18, r18
    9924:	29 f1       	breq	.+74     	; 0x9970 <shot_map+0x62>
		{
			switch (shot->shared.direction)
    9926:	26 a1       	ldd	r18, Z+38	; 0x26
    9928:	21 30       	cpi	r18, 0x01	; 1
    992a:	69 f0       	breq	.+26     	; 0x9946 <shot_map+0x38>
    992c:	e0 f0       	brcs	.+56     	; 0x9966 <shot_map+0x58>
    992e:	22 30       	cpi	r18, 0x02	; 2
    9930:	91 f0       	breq	.+36     	; 0x9956 <shot_map+0x48>
    9932:	23 30       	cpi	r18, 0x03	; 3
    9934:	c1 f4       	brne	.+48     	; 0x9966 <shot_map+0x58>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9936:	be 01       	movw	r22, r28
    9938:	6f 5f       	subi	r22, 0xFF	; 255
    993a:	7f 4f       	sbci	r23, 0xFF	; 255
    993c:	cf 96       	adiw	r24, 0x3f	; 63
    993e:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    9942:	41 e0       	ldi	r20, 0x01	; 1
    9944:	18 c0       	rjmp	.+48     	; 0x9976 <shot_map+0x68>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9946:	be 01       	movw	r22, r28
    9948:	6f 5f       	subi	r22, 0xFF	; 255
    994a:	7f 4f       	sbci	r23, 0xFF	; 255
    994c:	cf 96       	adiw	r24, 0x3f	; 63
    994e:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    9952:	40 e0       	ldi	r20, 0x00	; 0
    9954:	10 c0       	rjmp	.+32     	; 0x9976 <shot_map+0x68>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9956:	be 01       	movw	r22, r28
    9958:	6f 5f       	subi	r22, 0xFF	; 255
    995a:	7f 4f       	sbci	r23, 0xFF	; 255
    995c:	c5 96       	adiw	r24, 0x35	; 53
    995e:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <LBGetNextFrame>
    9962:	42 e0       	ldi	r20, 0x02	; 2
    9964:	08 c0       	rjmp	.+16     	; 0x9976 <shot_map+0x68>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    9966:	be 01       	movw	r22, r28
    9968:	6f 5f       	subi	r22, 0xFF	; 255
    996a:	7f 4f       	sbci	r23, 0xFF	; 255
    996c:	c5 96       	adiw	r24, 0x35	; 53
    996e:	ef cf       	rjmp	.-34     	; 0x994e <shot_map+0x40>
    9970:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    9972:	88 e6       	ldi	r24, 0x68	; 104
    9974:	91 e2       	ldi	r25, 0x21	; 33
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    9976:	bc 01       	movw	r22, r24
    9978:	81 2f       	mov	r24, r17
    997a:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    997e:	81 e0       	ldi	r24, 0x01	; 1
    9980:	81 0f       	add	r24, r17
    9982:	0f 90       	pop	r0
    9984:	df 91       	pop	r29
    9986:	cf 91       	pop	r28
    9988:	1f 91       	pop	r17
    998a:	08 95       	ret

0000998c <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    998c:	cf 93       	push	r28
    998e:	df 93       	push	r29
    9990:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9992:	88 81       	ld	r24, Y
    9994:	81 11       	cpse	r24, r1
    9996:	15 c0       	rjmp	.+42     	; 0x99c2 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9998:	69 81       	ldd	r22, Y+1	; 0x01
    999a:	70 e0       	ldi	r23, 0x00	; 0
    999c:	80 e0       	ldi	r24, 0x00	; 0
    999e:	90 e0       	ldi	r25, 0x00	; 0
    99a0:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    99a4:	25 e6       	ldi	r18, 0x65	; 101
    99a6:	38 e8       	ldi	r19, 0x88	; 136
    99a8:	48 e8       	ldi	r20, 0x88	; 136
    99aa:	5c e3       	ldi	r21, 0x3C	; 60
    99ac:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    99b0:	9b 01       	movw	r18, r22
    99b2:	ac 01       	movw	r20, r24
    99b4:	6e 81       	ldd	r22, Y+6	; 0x06
    99b6:	7f 81       	ldd	r23, Y+7	; 0x07
    99b8:	88 85       	ldd	r24, Y+8	; 0x08
    99ba:	99 85       	ldd	r25, Y+9	; 0x09
    99bc:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    99c0:	2d c0       	rjmp	.+90     	; 0x9a1c <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    99c2:	81 30       	cpi	r24, 0x01	; 1
    99c4:	a9 f4       	brne	.+42     	; 0x99f0 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    99c6:	69 81       	ldd	r22, Y+1	; 0x01
    99c8:	70 e0       	ldi	r23, 0x00	; 0
    99ca:	80 e0       	ldi	r24, 0x00	; 0
    99cc:	90 e0       	ldi	r25, 0x00	; 0
    99ce:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    99d2:	25 e6       	ldi	r18, 0x65	; 101
    99d4:	38 e8       	ldi	r19, 0x88	; 136
    99d6:	48 e8       	ldi	r20, 0x88	; 136
    99d8:	5c e3       	ldi	r21, 0x3C	; 60
    99da:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    99de:	9b 01       	movw	r18, r22
    99e0:	ac 01       	movw	r20, r24
    99e2:	6a 81       	ldd	r22, Y+2	; 0x02
    99e4:	7b 81       	ldd	r23, Y+3	; 0x03
    99e6:	8c 81       	ldd	r24, Y+4	; 0x04
    99e8:	9d 81       	ldd	r25, Y+5	; 0x05
    99ea:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    99ee:	31 c0       	rjmp	.+98     	; 0x9a52 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    99f0:	82 30       	cpi	r24, 0x02	; 2
    99f2:	c9 f4       	brne	.+50     	; 0x9a26 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    99f4:	69 81       	ldd	r22, Y+1	; 0x01
    99f6:	70 e0       	ldi	r23, 0x00	; 0
    99f8:	80 e0       	ldi	r24, 0x00	; 0
    99fa:	90 e0       	ldi	r25, 0x00	; 0
    99fc:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    9a00:	25 e6       	ldi	r18, 0x65	; 101
    9a02:	38 e8       	ldi	r19, 0x88	; 136
    9a04:	48 e8       	ldi	r20, 0x88	; 136
    9a06:	5c e3       	ldi	r21, 0x3C	; 60
    9a08:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9a0c:	9b 01       	movw	r18, r22
    9a0e:	ac 01       	movw	r20, r24
    9a10:	6e 81       	ldd	r22, Y+6	; 0x06
    9a12:	7f 81       	ldd	r23, Y+7	; 0x07
    9a14:	88 85       	ldd	r24, Y+8	; 0x08
    9a16:	99 85       	ldd	r25, Y+9	; 0x09
    9a18:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    9a1c:	6e 83       	std	Y+6, r22	; 0x06
    9a1e:	7f 83       	std	Y+7, r23	; 0x07
    9a20:	88 87       	std	Y+8, r24	; 0x08
    9a22:	99 87       	std	Y+9, r25	; 0x09
    9a24:	1a c0       	rjmp	.+52     	; 0x9a5a <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    9a26:	83 30       	cpi	r24, 0x03	; 3
    9a28:	c1 f4       	brne	.+48     	; 0x9a5a <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    9a2a:	69 81       	ldd	r22, Y+1	; 0x01
    9a2c:	70 e0       	ldi	r23, 0x00	; 0
    9a2e:	80 e0       	ldi	r24, 0x00	; 0
    9a30:	90 e0       	ldi	r25, 0x00	; 0
    9a32:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    9a36:	25 e6       	ldi	r18, 0x65	; 101
    9a38:	38 e8       	ldi	r19, 0x88	; 136
    9a3a:	48 e8       	ldi	r20, 0x88	; 136
    9a3c:	5c e3       	ldi	r21, 0x3C	; 60
    9a3e:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9a42:	9b 01       	movw	r18, r22
    9a44:	ac 01       	movw	r20, r24
    9a46:	6a 81       	ldd	r22, Y+2	; 0x02
    9a48:	7b 81       	ldd	r23, Y+3	; 0x03
    9a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    9a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    9a4e:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9a52:	6a 83       	std	Y+2, r22	; 0x02
    9a54:	7b 83       	std	Y+3, r23	; 0x03
    9a56:	8c 83       	std	Y+4, r24	; 0x04
    9a58:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    9a5a:	df 91       	pop	r29
    9a5c:	cf 91       	pop	r28
    9a5e:	08 95       	ret

00009a60 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9a60:	8d 56       	subi	r24, 0x6D	; 109
    9a62:	93 4f       	sbci	r25, 0xF3	; 243
    9a64:	fc 01       	movw	r30, r24
    9a66:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9a68:	81 30       	cpi	r24, 0x01	; 1
    9a6a:	21 f0       	breq	.+8      	; 0x9a74 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    9a6c:	82 30       	cpi	r24, 0x02	; 2
    9a6e:	21 f0       	breq	.+8      	; 0x9a78 <solid_square_tile+0x18>

	return 0;
    9a70:	80 e0       	ldi	r24, 0x00	; 0
    9a72:	08 95       	ret
    9a74:	81 e0       	ldi	r24, 0x01	; 1
    9a76:	08 95       	ret
    9a78:	82 e0       	ldi	r24, 0x02	; 2
}
    9a7a:	08 95       	ret

00009a7c <solid_directional_tile>:

	return 0;
}

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    9a7c:	7f 92       	push	r7
    9a7e:	8f 92       	push	r8
    9a80:	9f 92       	push	r9
    9a82:	af 92       	push	r10
    9a84:	bf 92       	push	r11
    9a86:	cf 92       	push	r12
    9a88:	df 92       	push	r13
    9a8a:	ef 92       	push	r14
    9a8c:	ff 92       	push	r15
    9a8e:	0f 93       	push	r16
    9a90:	1f 93       	push	r17
    9a92:	cf 93       	push	r28
    9a94:	df 93       	push	r29
    9a96:	86 2e       	mov	r8, r22
    9a98:	74 2e       	mov	r7, r20
    9a9a:	f2 2e       	mov	r15, r18
	u8 tile = level.level_map[tile_index];
    9a9c:	fc 01       	movw	r30, r24
    9a9e:	ed 56       	subi	r30, 0x6D	; 109
    9aa0:	f3 4f       	sbci	r31, 0xF3	; 243
    9aa2:	91 80       	ldd	r9, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9aa4:	6e e1       	ldi	r22, 0x1E	; 30
    9aa6:	70 e0       	ldi	r23, 0x00	; 0
    9aa8:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    9aac:	d8 2f       	mov	r29, r24
    9aae:	dd 0f       	add	r29, r29
    9ab0:	dd 0f       	add	r29, r29
    9ab2:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9ab4:	6d 5f       	subi	r22, 0xFD	; 253
    9ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ab8:	c6 2f       	mov	r28, r22
    9aba:	cc 0f       	add	r28, r28
    9abc:	cc 0f       	add	r28, r28
    9abe:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    9ac0:	83 e0       	ldi	r24, 0x03	; 3
    9ac2:	98 16       	cp	r9, r24
    9ac4:	19 f0       	breq	.+6      	; 0x9acc <solid_directional_tile+0x50>
    9ac6:	86 e0       	ldi	r24, 0x06	; 6
    9ac8:	98 12       	cpse	r9, r24
    9aca:	2f c0       	rjmp	.+94     	; 0x9b2a <solid_directional_tile+0xae>
	{
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x, y+height)) return tile;
    9acc:	17 2d       	mov	r17, r7
    9ace:	10 0f       	add	r17, r16
    9ad0:	28 e0       	ldi	r18, 0x08	; 8
    9ad2:	b2 2e       	mov	r11, r18
    9ad4:	bd 0e       	add	r11, r29
    9ad6:	38 e0       	ldi	r19, 0x08	; 8
    9ad8:	d3 2e       	mov	r13, r19
    9ada:	dc 0e       	add	r13, r28
    9adc:	a1 2e       	mov	r10, r17
    9ade:	c8 2c       	mov	r12, r8
    9ae0:	e7 2c       	mov	r14, r7
    9ae2:	08 2d       	mov	r16, r8
    9ae4:	2c 2f       	mov	r18, r28
    9ae6:	4b 2d       	mov	r20, r11
    9ae8:	6d 2d       	mov	r22, r13
    9aea:	8d 2f       	mov	r24, r29
    9aec:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9af0:	81 11       	cpse	r24, r1
    9af2:	55 c0       	rjmp	.+170    	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x+width, y)) return tile;
    9af4:	f8 0c       	add	r15, r8
    9af6:	a7 2c       	mov	r10, r7
    9af8:	cf 2c       	mov	r12, r15
    9afa:	2c 2f       	mov	r18, r28
    9afc:	4b 2d       	mov	r20, r11
    9afe:	6d 2d       	mov	r22, r13
    9b00:	8d 2f       	mov	r24, r29
    9b02:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b06:	81 11       	cpse	r24, r1
    9b08:	4a c0       	rjmp	.+148    	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x+width, y, x+width, y+height)) return tile;
    9b0a:	a1 2e       	mov	r10, r17
    9b0c:	0f 2d       	mov	r16, r15
    9b0e:	2c 2f       	mov	r18, r28
    9b10:	4b 2d       	mov	r20, r11
    9b12:	6d 2d       	mov	r22, r13
    9b14:	8d 2f       	mov	r24, r29
    9b16:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b1a:	81 11       	cpse	r24, r1
    9b1c:	40 c0       	rjmp	.+128    	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y+height, x+width, y+height)) return tile;
    9b1e:	e1 2e       	mov	r14, r17
    9b20:	08 2d       	mov	r16, r8
    9b22:	2c 2f       	mov	r18, r28
    9b24:	4b 2d       	mov	r20, r11
    9b26:	6d 2d       	mov	r22, r13
    9b28:	32 c0       	rjmp	.+100    	; 0x9b8e <solid_directional_tile+0x112>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    9b2a:	8c ef       	ldi	r24, 0xFC	; 252
    9b2c:	89 0d       	add	r24, r9
    9b2e:	82 30       	cpi	r24, 0x02	; 2
    9b30:	a0 f5       	brcc	.+104    	; 0x9b9a <solid_directional_tile+0x11e>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x, y+height)) return tile;
    9b32:	14 2f       	mov	r17, r20
    9b34:	10 0f       	add	r17, r16
    9b36:	88 e0       	ldi	r24, 0x08	; 8
    9b38:	b8 2e       	mov	r11, r24
    9b3a:	bc 0e       	add	r11, r28
    9b3c:	98 e0       	ldi	r25, 0x08	; 8
    9b3e:	d9 2e       	mov	r13, r25
    9b40:	dd 0e       	add	r13, r29
    9b42:	a1 2e       	mov	r10, r17
    9b44:	c8 2c       	mov	r12, r8
    9b46:	e4 2e       	mov	r14, r20
    9b48:	08 2d       	mov	r16, r8
    9b4a:	2b 2d       	mov	r18, r11
    9b4c:	4d 2d       	mov	r20, r13
    9b4e:	6c 2f       	mov	r22, r28
    9b50:	8d 2f       	mov	r24, r29
    9b52:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b56:	81 11       	cpse	r24, r1
    9b58:	22 c0       	rjmp	.+68     	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x+width, y)) return tile;
    9b5a:	f8 0c       	add	r15, r8
    9b5c:	a7 2c       	mov	r10, r7
    9b5e:	cf 2c       	mov	r12, r15
    9b60:	2b 2d       	mov	r18, r11
    9b62:	4d 2d       	mov	r20, r13
    9b64:	6c 2f       	mov	r22, r28
    9b66:	8d 2f       	mov	r24, r29
    9b68:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b6c:	81 11       	cpse	r24, r1
    9b6e:	17 c0       	rjmp	.+46     	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x+width, y, x+width, y+height)) return tile;
    9b70:	a1 2e       	mov	r10, r17
    9b72:	0f 2d       	mov	r16, r15
    9b74:	2b 2d       	mov	r18, r11
    9b76:	4d 2d       	mov	r20, r13
    9b78:	6c 2f       	mov	r22, r28
    9b7a:	8d 2f       	mov	r24, r29
    9b7c:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b80:	81 11       	cpse	r24, r1
    9b82:	0d c0       	rjmp	.+26     	; 0x9b9e <solid_directional_tile+0x122>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y+height, x+width, y+height)) return tile;
    9b84:	e1 2e       	mov	r14, r17
    9b86:	08 2d       	mov	r16, r8
    9b88:	2b 2d       	mov	r18, r11
    9b8a:	4d 2d       	mov	r20, r13
    9b8c:	6c 2f       	mov	r22, r28
    9b8e:	8d 2f       	mov	r24, r29
    9b90:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBLineIntersect>
    9b94:	81 11       	cpse	r24, r1
    9b96:	03 c0       	rjmp	.+6      	; 0x9b9e <solid_directional_tile+0x122>
    9b98:	03 c0       	rjmp	.+6      	; 0x9ba0 <solid_directional_tile+0x124>
	}
	
	return 0;
    9b9a:	80 e0       	ldi	r24, 0x00	; 0
    9b9c:	01 c0       	rjmp	.+2      	; 0x9ba0 <solid_directional_tile+0x124>
    9b9e:	89 2d       	mov	r24, r9
}
    9ba0:	df 91       	pop	r29
    9ba2:	cf 91       	pop	r28
    9ba4:	1f 91       	pop	r17
    9ba6:	0f 91       	pop	r16
    9ba8:	ff 90       	pop	r15
    9baa:	ef 90       	pop	r14
    9bac:	df 90       	pop	r13
    9bae:	cf 90       	pop	r12
    9bb0:	bf 90       	pop	r11
    9bb2:	af 90       	pop	r10
    9bb4:	9f 90       	pop	r9
    9bb6:	8f 90       	pop	r8
    9bb8:	7f 90       	pop	r7
    9bba:	08 95       	ret

00009bbc <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9bbc:	8f 92       	push	r8
    9bbe:	9f 92       	push	r9
    9bc0:	af 92       	push	r10
    9bc2:	cf 92       	push	r12
    9bc4:	ef 92       	push	r14
    9bc6:	0f 93       	push	r16
    9bc8:	1f 93       	push	r17
    9bca:	cf 93       	push	r28
    9bcc:	df 93       	push	r29
    9bce:	4c 01       	movw	r8, r24
    9bd0:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9bd2:	20 e0       	ldi	r18, 0x00	; 0
    9bd4:	30 e0       	ldi	r19, 0x00	; 0
    9bd6:	40 e0       	ldi	r20, 0x00	; 0
    9bd8:	50 e4       	ldi	r21, 0x40	; 64
    9bda:	6e 81       	ldd	r22, Y+6	; 0x06
    9bdc:	7f 81       	ldd	r23, Y+7	; 0x07
    9bde:	88 85       	ldd	r24, Y+8	; 0x08
    9be0:	99 85       	ldd	r25, Y+9	; 0x09
    9be2:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9be6:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9bea:	e6 2e       	mov	r14, r22
    9bec:	20 e0       	ldi	r18, 0x00	; 0
    9bee:	30 e0       	ldi	r19, 0x00	; 0
    9bf0:	40 e0       	ldi	r20, 0x00	; 0
    9bf2:	50 e4       	ldi	r21, 0x40	; 64
    9bf4:	6a 81       	ldd	r22, Y+2	; 0x02
    9bf6:	7b 81       	ldd	r23, Y+3	; 0x03
    9bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    9bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    9bfc:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9c00:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9c04:	06 2f       	mov	r16, r22
    9c06:	20 e0       	ldi	r18, 0x00	; 0
    9c08:	30 e0       	ldi	r19, 0x00	; 0
    9c0a:	40 e8       	ldi	r20, 0x80	; 128
    9c0c:	5f e3       	ldi	r21, 0x3F	; 63
    9c0e:	f4 01       	movw	r30, r8
    9c10:	66 81       	ldd	r22, Z+6	; 0x06
    9c12:	77 81       	ldd	r23, Z+7	; 0x07
    9c14:	80 85       	ldd	r24, Z+8	; 0x08
    9c16:	91 85       	ldd	r25, Z+9	; 0x09
    9c18:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9c1c:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9c20:	16 2f       	mov	r17, r22
    9c22:	20 e0       	ldi	r18, 0x00	; 0
    9c24:	30 e0       	ldi	r19, 0x00	; 0
    9c26:	40 e8       	ldi	r20, 0x80	; 128
    9c28:	5f e3       	ldi	r21, 0x3F	; 63
    9c2a:	f4 01       	movw	r30, r8
    9c2c:	62 81       	ldd	r22, Z+2	; 0x02
    9c2e:	73 81       	ldd	r23, Z+3	; 0x03
    9c30:	84 81       	ldd	r24, Z+4	; 0x04
    9c32:	95 81       	ldd	r25, Z+5	; 0x05
    9c34:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9c38:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9c3c:	86 2f       	mov	r24, r22
    9c3e:	94 e0       	ldi	r25, 0x04	; 4
    9c40:	a9 2e       	mov	r10, r25
    9c42:	24 e0       	ldi	r18, 0x04	; 4
    9c44:	c2 2e       	mov	r12, r18
    9c46:	2e e0       	ldi	r18, 0x0E	; 14
    9c48:	4e e0       	ldi	r20, 0x0E	; 14
    9c4a:	61 2f       	mov	r22, r17
    9c4c:	0e 94 19 47 	call	0x8e32	; 0x8e32 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9c50:	88 23       	and	r24, r24
    9c52:	41 f0       	breq	.+16     	; 0x9c64 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9c54:	f4 01       	movw	r30, r8
    9c56:	86 89       	ldd	r24, Z+22	; 0x16
    9c58:	88 37       	cpi	r24, 0x78	; 120
    9c5a:	21 f4       	brne	.+8      	; 0x9c64 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9c5c:	81 e0       	ldi	r24, 0x01	; 1
    9c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9c60:	99 30       	cpi	r25, 0x09	; 9
    9c62:	08 f4       	brcc	.+2      	; 0x9c66 <player_shot+0xaa>
    9c64:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    9c66:	df 91       	pop	r29
    9c68:	cf 91       	pop	r28
    9c6a:	1f 91       	pop	r17
    9c6c:	0f 91       	pop	r16
    9c6e:	ef 90       	pop	r14
    9c70:	cf 90       	pop	r12
    9c72:	af 90       	pop	r10
    9c74:	9f 90       	pop	r9
    9c76:	8f 90       	pop	r8
    9c78:	08 95       	ret

00009c7a <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    9c7a:	cf 92       	push	r12
    9c7c:	df 92       	push	r13
    9c7e:	ef 92       	push	r14
    9c80:	ff 92       	push	r15
    9c82:	cf 93       	push	r28
    9c84:	df 93       	push	r29
    9c86:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9c88:	ca 80       	ldd	r12, Y+2	; 0x02
    9c8a:	db 80       	ldd	r13, Y+3	; 0x03
    9c8c:	ec 80       	ldd	r14, Y+4	; 0x04
    9c8e:	fd 80       	ldd	r15, Y+5	; 0x05
    9c90:	20 e0       	ldi	r18, 0x00	; 0
    9c92:	30 e0       	ldi	r19, 0x00	; 0
    9c94:	a9 01       	movw	r20, r18
    9c96:	c7 01       	movw	r24, r14
    9c98:	b6 01       	movw	r22, r12
    9c9a:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    9c9e:	87 fd       	sbrc	r24, 7
    9ca0:	31 c0       	rjmp	.+98     	; 0x9d04 <collision_detect_boundries+0x8a>
    9ca2:	20 e0       	ldi	r18, 0x00	; 0
    9ca4:	30 e0       	ldi	r19, 0x00	; 0
    9ca6:	40 ee       	ldi	r20, 0xE0	; 224
    9ca8:	50 e4       	ldi	r21, 0x40	; 64
    9caa:	c7 01       	movw	r24, r14
    9cac:	b6 01       	movw	r22, r12
    9cae:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9cb2:	20 e0       	ldi	r18, 0x00	; 0
    9cb4:	30 e0       	ldi	r19, 0x00	; 0
    9cb6:	40 e7       	ldi	r20, 0x70	; 112
    9cb8:	53 e4       	ldi	r21, 0x43	; 67
    9cba:	0e 94 1d 5f 	call	0xbe3a	; 0xbe3a <__gesf2>
    9cbe:	18 16       	cp	r1, r24
    9cc0:	0c f1       	brlt	.+66     	; 0x9d04 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9cc2:	ce 80       	ldd	r12, Y+6	; 0x06
    9cc4:	df 80       	ldd	r13, Y+7	; 0x07
    9cc6:	e8 84       	ldd	r14, Y+8	; 0x08
    9cc8:	f9 84       	ldd	r15, Y+9	; 0x09
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9cca:	20 e0       	ldi	r18, 0x00	; 0
    9ccc:	30 e0       	ldi	r19, 0x00	; 0
    9cce:	40 ec       	ldi	r20, 0xC0	; 192
    9cd0:	51 e4       	ldi	r21, 0x41	; 65
    9cd2:	c7 01       	movw	r24, r14
    9cd4:	b6 01       	movw	r22, r12
    9cd6:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    9cda:	87 fd       	sbrc	r24, 7
    9cdc:	13 c0       	rjmp	.+38     	; 0x9d04 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9cde:	20 e0       	ldi	r18, 0x00	; 0
    9ce0:	30 e0       	ldi	r19, 0x00	; 0
    9ce2:	40 ee       	ldi	r20, 0xE0	; 224
    9ce4:	50 e4       	ldi	r21, 0x40	; 64
    9ce6:	c7 01       	movw	r24, r14
    9ce8:	b6 01       	movw	r22, r12
    9cea:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    9cee:	c1 e0       	ldi	r28, 0x01	; 1
    9cf0:	20 e0       	ldi	r18, 0x00	; 0
    9cf2:	30 e0       	ldi	r19, 0x00	; 0
    9cf4:	40 e6       	ldi	r20, 0x60	; 96
    9cf6:	53 e4       	ldi	r21, 0x43	; 67
    9cf8:	0e 94 1d 5f 	call	0xbe3a	; 0xbe3a <__gesf2>
    9cfc:	18 16       	cp	r1, r24
    9cfe:	1c f0       	brlt	.+6      	; 0x9d06 <collision_detect_boundries+0x8c>
    9d00:	c0 e0       	ldi	r28, 0x00	; 0
    9d02:	01 c0       	rjmp	.+2      	; 0x9d06 <collision_detect_boundries+0x8c>
	{
		return 1;
    9d04:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    9d06:	8c 2f       	mov	r24, r28
    9d08:	df 91       	pop	r29
    9d0a:	cf 91       	pop	r28
    9d0c:	ff 90       	pop	r15
    9d0e:	ef 90       	pop	r14
    9d10:	df 90       	pop	r13
    9d12:	cf 90       	pop	r12
    9d14:	08 95       	ret

00009d16 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    9d16:	ff 92       	push	r15
    9d18:	0f 93       	push	r16
    9d1a:	1f 93       	push	r17
    9d1c:	cf 93       	push	r28
    9d1e:	df 93       	push	r29
    9d20:	8c 01       	movw	r16, r24
    9d22:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9d24:	20 e0       	ldi	r18, 0x00	; 0
    9d26:	30 e0       	ldi	r19, 0x00	; 0
    9d28:	40 e0       	ldi	r20, 0x00	; 0
    9d2a:	5e e3       	ldi	r21, 0x3E	; 62
    9d2c:	fc 01       	movw	r30, r24
    9d2e:	66 81       	ldd	r22, Z+6	; 0x06
    9d30:	77 81       	ldd	r23, Z+7	; 0x07
    9d32:	80 85       	ldd	r24, Z+8	; 0x08
    9d34:	91 85       	ldd	r25, Z+9	; 0x09
    9d36:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9d3a:	20 e0       	ldi	r18, 0x00	; 0
    9d3c:	30 e0       	ldi	r19, 0x00	; 0
    9d3e:	40 e4       	ldi	r20, 0x40	; 64
    9d40:	50 e4       	ldi	r21, 0x40	; 64
    9d42:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    9d46:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9d4a:	fe e1       	ldi	r31, 0x1E	; 30
    9d4c:	6f 9f       	mul	r22, r31
    9d4e:	e0 01       	movw	r28, r0
    9d50:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9d52:	20 e0       	ldi	r18, 0x00	; 0
    9d54:	30 e0       	ldi	r19, 0x00	; 0
    9d56:	40 e0       	ldi	r20, 0x00	; 0
    9d58:	5e e3       	ldi	r21, 0x3E	; 62
    9d5a:	f8 01       	movw	r30, r16
    9d5c:	62 81       	ldd	r22, Z+2	; 0x02
    9d5e:	73 81       	ldd	r23, Z+3	; 0x03
    9d60:	84 81       	ldd	r24, Z+4	; 0x04
    9d62:	95 81       	ldd	r25, Z+5	; 0x05
    9d64:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9d68:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9d6c:	c6 0f       	add	r28, r22
    9d6e:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    9d70:	f8 01       	movw	r30, r16
    9d72:	81 8d       	ldd	r24, Z+25	; 0x19
    9d74:	88 23       	and	r24, r24
    9d76:	c9 f0       	breq	.+50     	; 0x9daa <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    9d78:	40 e0       	ldi	r20, 0x00	; 0
    9d7a:	50 e0       	ldi	r21, 0x00	; 0
    9d7c:	61 e0       	ldi	r22, 0x01	; 1
    9d7e:	8a e0       	ldi	r24, 0x0A	; 10
    9d80:	8f 0d       	add	r24, r15
    9d82:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    9d86:	ce 01       	movw	r24, r28
    9d88:	6e e1       	ldi	r22, 0x1E	; 30
    9d8a:	70 e0       	ldi	r23, 0x00	; 0
    9d8c:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    9d90:	6c 5f       	subi	r22, 0xFC	; 252
    9d92:	49 e8       	ldi	r20, 0x89	; 137
    9d94:	51 e2       	ldi	r21, 0x21	; 33
    9d96:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    9d9a:	87 e0       	ldi	r24, 0x07	; 7
    9d9c:	fe 01       	movw	r30, r28
    9d9e:	ed 56       	subi	r30, 0x6D	; 109
    9da0:	f3 4f       	sbci	r31, 0xF3	; 243
    9da2:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    9da4:	82 e3       	ldi	r24, 0x32	; 50
    9da6:	f8 01       	movw	r30, r16
    9da8:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    9daa:	f8 01       	movw	r30, r16
    9dac:	80 8d       	ldd	r24, Z+24	; 0x18
    9dae:	88 23       	and	r24, r24
    9db0:	b1 f0       	breq	.+44     	; 0x9dde <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    9db2:	40 e0       	ldi	r20, 0x00	; 0
    9db4:	50 e0       	ldi	r21, 0x00	; 0
    9db6:	61 e0       	ldi	r22, 0x01	; 1
    9db8:	8b e0       	ldi	r24, 0x0B	; 11
    9dba:	8f 0d       	add	r24, r15
    9dbc:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    9dc0:	ce 01       	movw	r24, r28
    9dc2:	6e e1       	ldi	r22, 0x1E	; 30
    9dc4:	70 e0       	ldi	r23, 0x00	; 0
    9dc6:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    9dca:	6c 5f       	subi	r22, 0xFC	; 252
    9dcc:	43 e8       	ldi	r20, 0x83	; 131
    9dce:	51 e2       	ldi	r21, 0x21	; 33
    9dd0:	8f 5f       	subi	r24, 0xFF	; 255
    9dd2:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    9dd6:	cd 56       	subi	r28, 0x6D	; 109
    9dd8:	d3 4f       	sbci	r29, 0xF3	; 243
    9dda:	89 e0       	ldi	r24, 0x09	; 9
    9ddc:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9dde:	f8 01       	movw	r30, r16
    9de0:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    9de2:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    9de4:	83 89       	ldd	r24, Z+19	; 0x13
    9de6:	81 60       	ori	r24, 0x01	; 1
    9de8:	83 8b       	std	Z+19, r24	; 0x13
}
    9dea:	df 91       	pop	r29
    9dec:	cf 91       	pop	r28
    9dee:	1f 91       	pop	r17
    9df0:	0f 91       	pop	r16
    9df2:	ff 90       	pop	r15
    9df4:	08 95       	ret

00009df6 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    9df6:	fc 01       	movw	r30, r24
    9df8:	8e e1       	ldi	r24, 0x1E	; 30
    9dfa:	48 9f       	mul	r20, r24
    9dfc:	a0 01       	movw	r20, r0
    9dfe:	11 24       	eor	r1, r1
    9e00:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9e02:	64 0f       	add	r22, r20
    9e04:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9e06:	21 11       	cpse	r18, r1
    9e08:	05 c0       	rjmp	.+10     	; 0x9e14 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9e0a:	71 83       	std	Z+1, r23	; 0x01
    9e0c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9e0e:	6f 5f       	subi	r22, 0xFF	; 255
    9e10:	7f 4f       	sbci	r23, 0xFF	; 255
    9e12:	12 c0       	rjmp	.+36     	; 0x9e38 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    9e14:	21 30       	cpi	r18, 0x01	; 1
    9e16:	19 f4       	brne	.+6      	; 0x9e1e <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    9e18:	cb 01       	movw	r24, r22
    9e1a:	01 96       	adiw	r24, 0x01	; 1
    9e1c:	04 c0       	rjmp	.+8      	; 0x9e26 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9e1e:	22 30       	cpi	r18, 0x02	; 2
    9e20:	39 f4       	brne	.+14     	; 0x9e30 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9e22:	cb 01       	movw	r24, r22
    9e24:	4e 96       	adiw	r24, 0x1e	; 30
    9e26:	91 83       	std	Z+1, r25	; 0x01
    9e28:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9e2a:	61 5e       	subi	r22, 0xE1	; 225
    9e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    9e2e:	04 c0       	rjmp	.+8      	; 0x9e38 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9e30:	71 83       	std	Z+1, r23	; 0x01
    9e32:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9e34:	62 5e       	subi	r22, 0xE2	; 226
    9e36:	7f 4f       	sbci	r23, 0xFF	; 255
    9e38:	73 83       	std	Z+3, r23	; 0x03
    9e3a:	62 83       	std	Z+2, r22	; 0x02
    9e3c:	08 95       	ret

00009e3e <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9e3e:	ef 92       	push	r14
    9e40:	ff 92       	push	r15
    9e42:	0f 93       	push	r16
    9e44:	1f 93       	push	r17
    9e46:	cf 93       	push	r28
    9e48:	df 93       	push	r29
    9e4a:	ec 01       	movw	r28, r24
    9e4c:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9e4e:	8e e1       	ldi	r24, 0x1E	; 30
    9e50:	e8 2e       	mov	r14, r24
    9e52:	f1 2c       	mov	r15, r1
    9e54:	cb 01       	movw	r24, r22
    9e56:	b7 01       	movw	r22, r14
    9e58:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    9e5c:	6d 5f       	subi	r22, 0xFD	; 253
    9e5e:	40 e0       	ldi	r20, 0x00	; 0
    9e60:	50 e0       	ldi	r21, 0x00	; 0
    9e62:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    9e66:	88 81       	ld	r24, Y
    9e68:	fe 01       	movw	r30, r28
    9e6a:	9c e0       	ldi	r25, 0x0C	; 12
    9e6c:	89 9f       	mul	r24, r25
    9e6e:	e0 0d       	add	r30, r0
    9e70:	f1 1d       	adc	r31, r1
    9e72:	11 24       	eor	r1, r1
    9e74:	83 85       	ldd	r24, Z+11	; 0x0b
    9e76:	94 85       	ldd	r25, Z+12	; 0x0c
    9e78:	00 97       	sbiw	r24, 0x00	; 0
    9e7a:	41 f0       	breq	.+16     	; 0x9e8c <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    9e7c:	b7 01       	movw	r22, r14
    9e7e:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    9e82:	6d 5f       	subi	r22, 0xFD	; 253
    9e84:	40 e0       	ldi	r20, 0x00	; 0
    9e86:	50 e0       	ldi	r21, 0x00	; 0
    9e88:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    9e8c:	88 81       	ld	r24, Y
    9e8e:	fe 01       	movw	r30, r28
    9e90:	9c e0       	ldi	r25, 0x0C	; 12
    9e92:	89 9f       	mul	r24, r25
    9e94:	e0 0d       	add	r30, r0
    9e96:	f1 1d       	adc	r31, r1
    9e98:	11 24       	eor	r1, r1
    9e9a:	14 87       	std	Z+12, r17	; 0x0c
    9e9c:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    9e9e:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    9ea0:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    9ea2:	82 30       	cpi	r24, 0x02	; 2
    9ea4:	11 f0       	breq	.+4      	; 0x9eaa <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    9ea6:	88 83       	st	Y, r24
    9ea8:	01 c0       	rjmp	.+2      	; 0x9eac <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    9eaa:	18 82       	st	Y, r1
	}
}
    9eac:	df 91       	pop	r29
    9eae:	cf 91       	pop	r28
    9eb0:	1f 91       	pop	r17
    9eb2:	0f 91       	pop	r16
    9eb4:	ff 90       	pop	r15
    9eb6:	ef 90       	pop	r14
    9eb8:	08 95       	ret

00009eba <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    9eba:	2f 92       	push	r2
    9ebc:	3f 92       	push	r3
    9ebe:	4f 92       	push	r4
    9ec0:	5f 92       	push	r5
    9ec2:	6f 92       	push	r6
    9ec4:	7f 92       	push	r7
    9ec6:	8f 92       	push	r8
    9ec8:	9f 92       	push	r9
    9eca:	af 92       	push	r10
    9ecc:	bf 92       	push	r11
    9ece:	cf 92       	push	r12
    9ed0:	df 92       	push	r13
    9ed2:	ef 92       	push	r14
    9ed4:	ff 92       	push	r15
    9ed6:	0f 93       	push	r16
    9ed8:	1f 93       	push	r17
    9eda:	cf 93       	push	r28
    9edc:	df 93       	push	r29
    9ede:	00 d0       	rcall	.+0      	; 0x9ee0 <collision_detect_shot+0x26>
    9ee0:	00 d0       	rcall	.+0      	; 0x9ee2 <collision_detect_shot+0x28>
    9ee2:	00 d0       	rcall	.+0      	; 0x9ee4 <collision_detect_shot+0x2a>
    9ee4:	cd b7       	in	r28, 0x3d	; 61
    9ee6:	de b7       	in	r29, 0x3e	; 62
    9ee8:	3c 01       	movw	r6, r24
    9eea:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    9eec:	1a 82       	std	Y+2, r1	; 0x02
    9eee:	19 82       	std	Y+1, r1	; 0x01
    9ef0:	1c 82       	std	Y+4, r1	; 0x04
    9ef2:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9ef4:	20 e0       	ldi	r18, 0x00	; 0
    9ef6:	30 e0       	ldi	r19, 0x00	; 0
    9ef8:	40 e0       	ldi	r20, 0x00	; 0
    9efa:	5e e3       	ldi	r21, 0x3E	; 62
    9efc:	fb 01       	movw	r30, r22
    9efe:	66 81       	ldd	r22, Z+6	; 0x06
    9f00:	77 81       	ldd	r23, Z+7	; 0x07
    9f02:	80 85       	ldd	r24, Z+8	; 0x08
    9f04:	91 85       	ldd	r25, Z+9	; 0x09
    9f06:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9f0a:	20 e0       	ldi	r18, 0x00	; 0
    9f0c:	30 e0       	ldi	r19, 0x00	; 0
    9f0e:	40 e4       	ldi	r20, 0x40	; 64
    9f10:	50 e4       	ldi	r21, 0x40	; 64
    9f12:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    9f16:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    9f1a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    9f1c:	20 e0       	ldi	r18, 0x00	; 0
    9f1e:	30 e0       	ldi	r19, 0x00	; 0
    9f20:	40 e0       	ldi	r20, 0x00	; 0
    9f22:	5e e3       	ldi	r21, 0x3E	; 62
    9f24:	f4 01       	movw	r30, r8
    9f26:	62 81       	ldd	r22, Z+2	; 0x02
    9f28:	73 81       	ldd	r23, Z+3	; 0x03
    9f2a:	84 81       	ldd	r24, Z+4	; 0x04
    9f2c:	95 81       	ldd	r25, Z+5	; 0x05
    9f2e:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    9f32:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
	u8 tile;
	u8 hud_x;
	Player* p = 0;
    char hit_metal = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9f36:	f4 01       	movw	r30, r8
    9f38:	20 81       	ld	r18, Z
    9f3a:	41 2f       	mov	r20, r17
    9f3c:	ce 01       	movw	r24, r28
    9f3e:	01 96       	adiw	r24, 0x01	; 1
    9f40:	0e 94 fb 4e 	call	0x9df6	; 0x9df6 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9f44:	c4 01       	movw	r24, r8
    9f46:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <collision_detect_boundries>
    9f4a:	88 23       	and	r24, r24
    9f4c:	51 f0       	breq	.+20     	; 0x9f62 <collision_detect_shot+0xa8>
	{
		init_shot_state(shot, shot->shot_type);
    9f4e:	f4 01       	movw	r30, r8
    9f50:	62 85       	ldd	r22, Z+10	; 0x0a
    9f52:	c4 01       	movw	r24, r8
    9f54:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
		player->active_shots--;
    9f58:	f3 01       	movw	r30, r6
    9f5a:	80 89       	ldd	r24, Z+16	; 0x10
    9f5c:	81 50       	subi	r24, 0x01	; 1
    9f5e:	80 8b       	std	Z+16, r24	; 0x10
		return;
    9f60:	50 c1       	rjmp	.+672    	; 0xa202 <collision_detect_shot+0x348>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    9f62:	b4 01       	movw	r22, r8
    9f64:	85 e2       	ldi	r24, 0x25	; 37
    9f66:	9c e0       	ldi	r25, 0x0C	; 12
    9f68:	0e 94 de 4d 	call	0x9bbc	; 0x9bbc <player_shot>
    9f6c:	88 23       	and	r24, r24
    9f6e:	b9 f0       	breq	.+46     	; 0x9f9e <collision_detect_shot+0xe4>
    9f70:	80 91 38 0c 	lds	r24, 0x0C38
    9f74:	80 fd       	sbrc	r24, 0
    9f76:	13 c0       	rjmp	.+38     	; 0x9f9e <collision_detect_shot+0xe4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    9f78:	80 91 91 0f 	lds	r24, 0x0F91
    9f7c:	8f 5f       	subi	r24, 0xFF	; 255
    9f7e:	80 93 91 0f 	sts	0x0F91, r24
		player2.score++;
    9f82:	80 91 90 0f 	lds	r24, 0x0F90
    9f86:	8f 5f       	subi	r24, 0xFF	; 255
    9f88:	80 93 90 0f 	sts	0x0F90, r24
		render_score(&player2, 15);
    9f8c:	6f e0       	ldi	r22, 0x0F	; 15
    9f8e:	82 e8       	ldi	r24, 0x82	; 130
    9f90:	9f e0       	ldi	r25, 0x0F	; 15
    9f92:	0e 94 27 4b 	call	0x964e	; 0x964e <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    9f96:	05 e2       	ldi	r16, 0x25	; 37
    9f98:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    9f9a:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    9f9c:	26 c0       	rjmp	.+76     	; 0x9fea <collision_detect_shot+0x130>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    9f9e:	b4 01       	movw	r22, r8
    9fa0:	82 e8       	ldi	r24, 0x82	; 130
    9fa2:	9f e0       	ldi	r25, 0x0F	; 15
    9fa4:	0e 94 de 4d 	call	0x9bbc	; 0x9bbc <player_shot>
    9fa8:	81 11       	cpse	r24, r1
    9faa:	08 c0       	rjmp	.+16     	; 0x9fbc <collision_detect_shot+0x102>
    9fac:	ce 01       	movw	r24, r28
    9fae:	01 96       	adiw	r24, 0x01	; 1
    9fb0:	9e 83       	std	Y+6, r25	; 0x06
    9fb2:	8d 83       	std	Y+5, r24	; 0x05
    9fb4:	41 2c       	mov	r4, r1
    9fb6:	51 2c       	mov	r5, r1
    9fb8:	d1 2c       	mov	r13, r1
    9fba:	5b c0       	rjmp	.+182    	; 0xa072 <collision_detect_shot+0x1b8>
    9fbc:	80 91 95 0f 	lds	r24, 0x0F95
    9fc0:	80 fd       	sbrc	r24, 0
    9fc2:	f4 cf       	rjmp	.-24     	; 0x9fac <collision_detect_shot+0xf2>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    9fc4:	80 91 34 0c 	lds	r24, 0x0C34
    9fc8:	8f 5f       	subi	r24, 0xFF	; 255
    9fca:	80 93 34 0c 	sts	0x0C34, r24
		player1.score++;
    9fce:	80 91 33 0c 	lds	r24, 0x0C33
    9fd2:	8f 5f       	subi	r24, 0xFF	; 255
    9fd4:	80 93 33 0c 	sts	0x0C33, r24
		render_score(&player1, 0);
    9fd8:	60 e0       	ldi	r22, 0x00	; 0
    9fda:	85 e2       	ldi	r24, 0x25	; 37
    9fdc:	9c e0       	ldi	r25, 0x0C	; 12
    9fde:	0e 94 27 4b 	call	0x964e	; 0x964e <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    9fe2:	02 e8       	ldi	r16, 0x82	; 130
    9fe4:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    9fe6:	6f e0       	ldi	r22, 0x0F	; 15
    9fe8:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    9fea:	01 15       	cp	r16, r1
    9fec:	11 05       	cpc	r17, r1
    9fee:	f1 f2       	breq	.-68     	; 0x9fac <collision_detect_shot+0xf2>
	{
		init_shot_state(shot, shot->shot_type);
    9ff0:	f4 01       	movw	r30, r8
    9ff2:	62 85       	ldd	r22, Z+10	; 0x0a
    9ff4:	c4 01       	movw	r24, r8
    9ff6:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
		player->active_shots--;
    9ffa:	f3 01       	movw	r30, r6
    9ffc:	80 89       	ldd	r24, Z+16	; 0x10
    9ffe:	81 50       	subi	r24, 0x01	; 1
    a000:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    a002:	6f 2d       	mov	r22, r15
    a004:	c8 01       	movw	r24, r16
    a006:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <kill_player>
		SFX_TANK_EXPLODE;
    a00a:	2f ef       	ldi	r18, 0xFF	; 255
    a00c:	40 e1       	ldi	r20, 0x10	; 16
    a00e:	6a e0       	ldi	r22, 0x0A	; 10
    a010:	f5 c0       	rjmp	.+490    	; 0xa1fc <collision_detect_shot+0x342>
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a012:	11 30       	cpi	r17, 0x01	; 1
    a014:	d9 f1       	breq	.+118    	; 0xa08c <collision_detect_shot+0x1d2>
			}
			SFX_BRICK_EXPLODE;
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    a016:	20 e0       	ldi	r18, 0x00	; 0
    a018:	30 e0       	ldi	r19, 0x00	; 0
    a01a:	40 e0       	ldi	r20, 0x00	; 0
    a01c:	50 e4       	ldi	r21, 0x40	; 64
    a01e:	f4 01       	movw	r30, r8
    a020:	66 81       	ldd	r22, Z+6	; 0x06
    a022:	77 81       	ldd	r23, Z+7	; 0x07
    a024:	80 85       	ldd	r24, Z+8	; 0x08
    a026:	91 85       	ldd	r25, Z+9	; 0x09
    a028:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a02c:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a030:	f6 2e       	mov	r15, r22
    a032:	20 e0       	ldi	r18, 0x00	; 0
    a034:	30 e0       	ldi	r19, 0x00	; 0
    a036:	40 e0       	ldi	r20, 0x00	; 0
    a038:	50 e4       	ldi	r21, 0x40	; 64
    a03a:	f4 01       	movw	r30, r8
    a03c:	62 81       	ldd	r22, Z+2	; 0x02
    a03e:	73 81       	ldd	r23, Z+3	; 0x03
    a040:	84 81       	ldd	r24, Z+4	; 0x04
    a042:	95 81       	ldd	r25, Z+5	; 0x05
    a044:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a048:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a04c:	b6 2e       	mov	r11, r22
    a04e:	04 e0       	ldi	r16, 0x04	; 4
    a050:	24 e0       	ldi	r18, 0x04	; 4
    a052:	4f 2d       	mov	r20, r15
    a054:	c1 01       	movw	r24, r2
    a056:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <solid_directional_tile>
    a05a:	81 11       	cpse	r24, r1
    a05c:	73 c0       	rjmp	.+230    	; 0xa144 <collision_detect_shot+0x28a>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a05e:	12 30       	cpi	r17, 0x02	; 2
    a060:	09 f4       	brne	.+2      	; 0xa064 <collision_detect_shot+0x1aa>
    a062:	9f c0       	rjmp	.+318    	; 0xa1a2 <collision_detect_shot+0x2e8>
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    a064:	4a 94       	dec	r4
    a066:	45 28       	or	r4, r5
    a068:	09 f4       	brne	.+2      	; 0xa06c <collision_detect_shot+0x1b2>
    a06a:	ba c0       	rjmp	.+372    	; 0xa1e0 <collision_detect_shot+0x326>
    a06c:	44 24       	eor	r4, r4
    a06e:	43 94       	inc	r4
    a070:	51 2c       	mov	r5, r1
	{
		tile = level.level_map[tiles[i]];
    a072:	ed 81       	ldd	r30, Y+5	; 0x05
    a074:	fe 81       	ldd	r31, Y+6	; 0x06
    a076:	21 90       	ld	r2, Z+
    a078:	31 90       	ld	r3, Z+
    a07a:	fe 83       	std	Y+6, r31	; 0x06
    a07c:	ed 83       	std	Y+5, r30	; 0x05
    a07e:	f1 01       	movw	r30, r2
    a080:	ed 56       	subi	r30, 0x6D	; 109
    a082:	f3 4f       	sbci	r31, 0xF3	; 243
    a084:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    a086:	11 23       	and	r17, r17
    a088:	69 f3       	breq	.-38     	; 0xa064 <collision_detect_shot+0x1aa>
    a08a:	c3 cf       	rjmp	.-122    	; 0xa012 <collision_detect_shot+0x158>
		if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a08c:	c1 01       	movw	r24, r2
    a08e:	6e e1       	ldi	r22, 0x1E	; 30
    a090:	70 e0       	ldi	r23, 0x00	; 0
    a092:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a096:	6d 5f       	subi	r22, 0xFD	; 253
    a098:	7f 4f       	sbci	r23, 0xFF	; 255
    a09a:	e6 2e       	mov	r14, r22
    a09c:	ee 0c       	add	r14, r14
    a09e:	ee 0c       	add	r14, r14
    a0a0:	ee 0c       	add	r14, r14
    a0a2:	08 2f       	mov	r16, r24
    a0a4:	00 0f       	add	r16, r16
    a0a6:	00 0f       	add	r16, r16
    a0a8:	00 0f       	add	r16, r16
    a0aa:	20 e0       	ldi	r18, 0x00	; 0
    a0ac:	30 e0       	ldi	r19, 0x00	; 0
    a0ae:	40 e0       	ldi	r20, 0x00	; 0
    a0b0:	50 e4       	ldi	r21, 0x40	; 64
    a0b2:	f4 01       	movw	r30, r8
    a0b4:	66 81       	ldd	r22, Z+6	; 0x06
    a0b6:	77 81       	ldd	r23, Z+7	; 0x07
    a0b8:	80 85       	ldd	r24, Z+8	; 0x08
    a0ba:	91 85       	ldd	r25, Z+9	; 0x09
    a0bc:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a0c0:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a0c4:	f6 2e       	mov	r15, r22
    a0c6:	20 e0       	ldi	r18, 0x00	; 0
    a0c8:	30 e0       	ldi	r19, 0x00	; 0
    a0ca:	40 e0       	ldi	r20, 0x00	; 0
    a0cc:	50 e4       	ldi	r21, 0x40	; 64
    a0ce:	f4 01       	movw	r30, r8
    a0d0:	62 81       	ldd	r22, Z+2	; 0x02
    a0d2:	73 81       	ldd	r23, Z+3	; 0x03
    a0d4:	84 81       	ldd	r24, Z+4	; 0x04
    a0d6:	95 81       	ldd	r25, Z+5	; 0x05
    a0d8:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a0dc:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a0e0:	86 2f       	mov	r24, r22
    a0e2:	38 e0       	ldi	r19, 0x08	; 8
    a0e4:	a3 2e       	mov	r10, r19
    a0e6:	48 e0       	ldi	r20, 0x08	; 8
    a0e8:	c4 2e       	mov	r12, r20
    a0ea:	24 e0       	ldi	r18, 0x04	; 4
    a0ec:	44 e0       	ldi	r20, 0x04	; 4
    a0ee:	6f 2d       	mov	r22, r15
    a0f0:	0e 94 19 47 	call	0x8e32	; 0x8e32 <LBCollides>
    a0f4:	88 23       	and	r24, r24
    a0f6:	09 f4       	brne	.+2      	; 0xa0fa <collision_detect_shot+0x240>
    a0f8:	8e cf       	rjmp	.-228    	; 0xa016 <collision_detect_shot+0x15c>
		{
			explode_tile(&tile_animations, tiles[i]);
    a0fa:	b1 01       	movw	r22, r2
    a0fc:	8c e0       	ldi	r24, 0x0C	; 12
    a0fe:	9c e0       	ldi	r25, 0x0C	; 12
    a100:	0e 94 1f 4f 	call	0x9e3e	; 0x9e3e <explode_tile>
			level.level_map[tiles[i]] = L_EMPTY;
    a104:	44 0c       	add	r4, r4
    a106:	55 1c       	adc	r5, r5
    a108:	e1 e0       	ldi	r30, 0x01	; 1
    a10a:	f0 e0       	ldi	r31, 0x00	; 0
    a10c:	ec 0f       	add	r30, r28
    a10e:	fd 1f       	adc	r31, r29
    a110:	e4 0d       	add	r30, r4
    a112:	f5 1d       	adc	r31, r5
    a114:	01 90       	ld	r0, Z+
    a116:	f0 81       	ld	r31, Z
    a118:	e0 2d       	mov	r30, r0
    a11a:	ed 56       	subi	r30, 0x6D	; 109
    a11c:	f3 4f       	sbci	r31, 0xF3	; 243
    a11e:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    a120:	f4 01       	movw	r30, r8
    a122:	83 85       	ldd	r24, Z+11	; 0x0b
    a124:	81 50       	subi	r24, 0x01	; 1
    a126:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    a128:	81 11       	cpse	r24, r1
    a12a:	08 c0       	rjmp	.+16     	; 0xa13c <collision_detect_shot+0x282>
			{
				init_shot_state(shot, shot->shot_type);
    a12c:	62 85       	ldd	r22, Z+10	; 0x0a
    a12e:	c4 01       	movw	r24, r8
    a130:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
				player->active_shots--;
    a134:	f3 01       	movw	r30, r6
    a136:	80 89       	ldd	r24, Z+16	; 0x10
    a138:	81 50       	subi	r24, 0x01	; 1
    a13a:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    a13c:	2f ed       	ldi	r18, 0xDF	; 223
    a13e:	47 e1       	ldi	r20, 0x17	; 23
    a140:	61 e0       	ldi	r22, 0x01	; 1
    a142:	5c c0       	rjmp	.+184    	; 0xa1fc <collision_detect_shot+0x342>
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			recoil_sprite(&shot->shared);
    a144:	c4 01       	movw	r24, r8
    a146:	0e 94 c6 4c 	call	0x998c	; 0x998c <recoil_sprite>
			switch (tile)
    a14a:	14 30       	cpi	r17, 0x04	; 4
    a14c:	79 f0       	breq	.+30     	; 0xa16c <collision_detect_shot+0x2b2>
    a14e:	18 f4       	brcc	.+6      	; 0xa156 <collision_detect_shot+0x29c>
    a150:	13 30       	cpi	r17, 0x03	; 3
    a152:	31 f0       	breq	.+12     	; 0xa160 <collision_detect_shot+0x2a6>
    a154:	1f c0       	rjmp	.+62     	; 0xa194 <collision_detect_shot+0x2da>
    a156:	15 30       	cpi	r17, 0x05	; 5
    a158:	b9 f0       	breq	.+46     	; 0xa188 <collision_detect_shot+0x2ce>
    a15a:	16 30       	cpi	r17, 0x06	; 6
    a15c:	79 f0       	breq	.+30     	; 0xa17c <collision_detect_shot+0x2c2>
    a15e:	1a c0       	rjmp	.+52     	; 0xa194 <collision_detect_shot+0x2da>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    a160:	f4 01       	movw	r30, r8
    a162:	80 81       	ld	r24, Z
    a164:	81 11       	cpse	r24, r1
    a166:	06 c0       	rjmp	.+12     	; 0xa174 <collision_detect_shot+0x2ba>
						shot->shared.direction = D_RIGHT;
    a168:	81 e0       	ldi	r24, 0x01	; 1
    a16a:	05 c0       	rjmp	.+10     	; 0xa176 <collision_detect_shot+0x2bc>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    a16c:	f4 01       	movw	r30, r8
    a16e:	80 81       	ld	r24, Z
    a170:	88 23       	and	r24, r24
    a172:	41 f0       	breq	.+16     	; 0xa184 <collision_detect_shot+0x2ca>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    a174:	82 e0       	ldi	r24, 0x02	; 2
    a176:	f4 01       	movw	r30, r8
    a178:	80 83       	st	Z, r24
    a17a:	0c c0       	rjmp	.+24     	; 0xa194 <collision_detect_shot+0x2da>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    a17c:	f4 01       	movw	r30, r8
    a17e:	80 81       	ld	r24, Z
    a180:	82 30       	cpi	r24, 0x02	; 2
    a182:	31 f4       	brne	.+12     	; 0xa190 <collision_detect_shot+0x2d6>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    a184:	83 e0       	ldi	r24, 0x03	; 3
    a186:	f7 cf       	rjmp	.-18     	; 0xa176 <collision_detect_shot+0x2bc>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    a188:	f4 01       	movw	r30, r8
    a18a:	80 81       	ld	r24, Z
    a18c:	82 30       	cpi	r24, 0x02	; 2
    a18e:	61 f3       	breq	.-40     	; 0xa168 <collision_detect_shot+0x2ae>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    a190:	f4 01       	movw	r30, r8
    a192:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    a194:	f4 01       	movw	r30, r8
    a196:	84 85       	ldd	r24, Z+12	; 0x0c
    a198:	81 50       	subi	r24, 0x01	; 1
    a19a:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    a19c:	81 11       	cpse	r24, r1
    a19e:	2b c0       	rjmp	.+86     	; 0xa1f6 <collision_detect_shot+0x33c>
    a1a0:	22 c0       	rjmp	.+68     	; 0xa1e6 <collision_detect_shot+0x32c>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a1a2:	c1 01       	movw	r24, r2
    a1a4:	6e e1       	ldi	r22, 0x1E	; 30
    a1a6:	70 e0       	ldi	r23, 0x00	; 0
    a1a8:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a1ac:	6d 5f       	subi	r22, 0xFD	; 253
    a1ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a1b0:	e6 2e       	mov	r14, r22
    a1b2:	ee 0c       	add	r14, r14
    a1b4:	ee 0c       	add	r14, r14
    a1b6:	ee 0c       	add	r14, r14
    a1b8:	08 2f       	mov	r16, r24
    a1ba:	00 0f       	add	r16, r16
    a1bc:	00 0f       	add	r16, r16
    a1be:	00 0f       	add	r16, r16
    a1c0:	88 e0       	ldi	r24, 0x08	; 8
    a1c2:	a8 2e       	mov	r10, r24
    a1c4:	98 e0       	ldi	r25, 0x08	; 8
    a1c6:	c9 2e       	mov	r12, r25
    a1c8:	24 e0       	ldi	r18, 0x04	; 4
    a1ca:	44 e0       	ldi	r20, 0x04	; 4
    a1cc:	6f 2d       	mov	r22, r15
    a1ce:	8b 2d       	mov	r24, r11
    a1d0:	0e 94 19 47 	call	0x8e32	; 0x8e32 <LBCollides>
    a1d4:	88 23       	and	r24, r24
    a1d6:	09 f4       	brne	.+2      	; 0xa1da <collision_detect_shot+0x320>
    a1d8:	45 cf       	rjmp	.-374    	; 0xa064 <collision_detect_shot+0x1aa>
        {
		    hit_metal = 1;
    a1da:	dd 24       	eor	r13, r13
    a1dc:	d3 94       	inc	r13
    a1de:	42 cf       	rjmp	.-380    	; 0xa064 <collision_detect_shot+0x1aa>
        }
	}
	if (hit_metal)
    a1e0:	dd 20       	and	r13, r13
    a1e2:	79 f0       	breq	.+30     	; 0xa202 <collision_detect_shot+0x348>
	{
        init_shot_state(shot, shot->shot_type);
    a1e4:	f4 01       	movw	r30, r8
    a1e6:	62 85       	ldd	r22, Z+10	; 0x0a
    a1e8:	c4 01       	movw	r24, r8
    a1ea:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
        player->active_shots--;
    a1ee:	f3 01       	movw	r30, r6
    a1f0:	80 89       	ldd	r24, Z+16	; 0x10
    a1f2:	81 50       	subi	r24, 0x01	; 1
    a1f4:	80 8b       	std	Z+16, r24	; 0x10
        SFX_METAL;
    a1f6:	2f ef       	ldi	r18, 0xFF	; 255
    a1f8:	47 e1       	ldi	r20, 0x17	; 23
    a1fa:	66 e0       	ldi	r22, 0x06	; 6
    a1fc:	84 e0       	ldi	r24, 0x04	; 4
    a1fe:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
	}
}
    a202:	26 96       	adiw	r28, 0x06	; 6
    a204:	0f b6       	in	r0, 0x3f	; 63
    a206:	f8 94       	cli
    a208:	de bf       	out	0x3e, r29	; 62
    a20a:	0f be       	out	0x3f, r0	; 63
    a20c:	cd bf       	out	0x3d, r28	; 61
    a20e:	df 91       	pop	r29
    a210:	cf 91       	pop	r28
    a212:	1f 91       	pop	r17
    a214:	0f 91       	pop	r16
    a216:	ff 90       	pop	r15
    a218:	ef 90       	pop	r14
    a21a:	df 90       	pop	r13
    a21c:	cf 90       	pop	r12
    a21e:	bf 90       	pop	r11
    a220:	af 90       	pop	r10
    a222:	9f 90       	pop	r9
    a224:	8f 90       	pop	r8
    a226:	7f 90       	pop	r7
    a228:	6f 90       	pop	r6
    a22a:	5f 90       	pop	r5
    a22c:	4f 90       	pop	r4
    a22e:	3f 90       	pop	r3
    a230:	2f 90       	pop	r2
    a232:	08 95       	ret

0000a234 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a234:	fc 01       	movw	r30, r24
    a236:	8e e1       	ldi	r24, 0x1E	; 30
    a238:	48 9f       	mul	r20, r24
    a23a:	a0 01       	movw	r20, r0
    a23c:	11 24       	eor	r1, r1
    a23e:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a240:	64 0f       	add	r22, r20
    a242:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a244:	21 11       	cpse	r18, r1
    a246:	09 c0       	rjmp	.+18     	; 0xa25a <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a248:	71 83       	std	Z+1, r23	; 0x01
    a24a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a24c:	cb 01       	movw	r24, r22
    a24e:	01 96       	adiw	r24, 0x01	; 1
    a250:	93 83       	std	Z+3, r25	; 0x03
    a252:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a254:	6e 5f       	subi	r22, 0xFE	; 254
    a256:	7f 4f       	sbci	r23, 0xFF	; 255
    a258:	1c c0       	rjmp	.+56     	; 0xa292 <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    a25a:	21 30       	cpi	r18, 0x01	; 1
    a25c:	31 f4       	brne	.+12     	; 0xa26a <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    a25e:	cb 01       	movw	r24, r22
    a260:	02 96       	adiw	r24, 0x02	; 2
    a262:	91 83       	std	Z+1, r25	; 0x01
    a264:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a266:	4e 96       	adiw	r24, 0x1e	; 30
    a268:	07 c0       	rjmp	.+14     	; 0xa278 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a26a:	22 30       	cpi	r18, 0x02	; 2
    a26c:	51 f4       	brne	.+20     	; 0xa282 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    a26e:	cb 01       	movw	r24, r22
    a270:	cc 96       	adiw	r24, 0x3c	; 60
    a272:	91 83       	std	Z+1, r25	; 0x01
    a274:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a276:	01 96       	adiw	r24, 0x01	; 1
    a278:	93 83       	std	Z+3, r25	; 0x03
    a27a:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a27c:	62 5c       	subi	r22, 0xC2	; 194
    a27e:	7f 4f       	sbci	r23, 0xFF	; 255
    a280:	08 c0       	rjmp	.+16     	; 0xa292 <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a282:	71 83       	std	Z+1, r23	; 0x01
    a284:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a286:	cb 01       	movw	r24, r22
    a288:	4e 96       	adiw	r24, 0x1e	; 30
    a28a:	93 83       	std	Z+3, r25	; 0x03
    a28c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a28e:	64 5c       	subi	r22, 0xC4	; 196
    a290:	7f 4f       	sbci	r23, 0xFF	; 255
    a292:	75 83       	std	Z+5, r23	; 0x05
    a294:	64 83       	std	Z+4, r22	; 0x04
    a296:	08 95       	ret

0000a298 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a298:	2f 92       	push	r2
    a29a:	3f 92       	push	r3
    a29c:	4f 92       	push	r4
    a29e:	5f 92       	push	r5
    a2a0:	6f 92       	push	r6
    a2a2:	7f 92       	push	r7
    a2a4:	8f 92       	push	r8
    a2a6:	9f 92       	push	r9
    a2a8:	af 92       	push	r10
    a2aa:	bf 92       	push	r11
    a2ac:	cf 92       	push	r12
    a2ae:	df 92       	push	r13
    a2b0:	ef 92       	push	r14
    a2b2:	ff 92       	push	r15
    a2b4:	0f 93       	push	r16
    a2b6:	1f 93       	push	r17
    a2b8:	cf 93       	push	r28
    a2ba:	df 93       	push	r29
    a2bc:	cd b7       	in	r28, 0x3d	; 61
    a2be:	de b7       	in	r29, 0x3e	; 62
    a2c0:	2d 97       	sbiw	r28, 0x0d	; 13
    a2c2:	0f b6       	in	r0, 0x3f	; 63
    a2c4:	f8 94       	cli
    a2c6:	de bf       	out	0x3e, r29	; 62
    a2c8:	0f be       	out	0x3f, r0	; 63
    a2ca:	cd bf       	out	0x3d, r28	; 61
    a2cc:	4c 01       	movw	r8, r24
    a2ce:	7a 87       	std	Y+10, r23	; 0x0a
    a2d0:	69 87       	std	Y+9, r22	; 0x09
    a2d2:	14 2f       	mov	r17, r20
    a2d4:	d2 2e       	mov	r13, r18
	int tiles[3] = {0,0,0};
    a2d6:	1a 82       	std	Y+2, r1	; 0x02
    a2d8:	19 82       	std	Y+1, r1	; 0x01
    a2da:	1c 82       	std	Y+4, r1	; 0x04
    a2dc:	1b 82       	std	Y+3, r1	; 0x03
    a2de:	1e 82       	std	Y+6, r1	; 0x06
    a2e0:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a2e2:	20 e0       	ldi	r18, 0x00	; 0
    a2e4:	30 e0       	ldi	r19, 0x00	; 0
    a2e6:	40 e0       	ldi	r20, 0x00	; 0
    a2e8:	5e e3       	ldi	r21, 0x3E	; 62
    a2ea:	fc 01       	movw	r30, r24
    a2ec:	66 81       	ldd	r22, Z+6	; 0x06
    a2ee:	77 81       	ldd	r23, Z+7	; 0x07
    a2f0:	80 85       	ldd	r24, Z+8	; 0x08
    a2f2:	91 85       	ldd	r25, Z+9	; 0x09
    a2f4:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    a2f8:	20 e0       	ldi	r18, 0x00	; 0
    a2fa:	30 e0       	ldi	r19, 0x00	; 0
    a2fc:	40 e4       	ldi	r20, 0x40	; 64
    a2fe:	50 e4       	ldi	r21, 0x40	; 64
    a300:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    a304:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a308:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a30a:	20 e0       	ldi	r18, 0x00	; 0
    a30c:	30 e0       	ldi	r19, 0x00	; 0
    a30e:	40 e0       	ldi	r20, 0x00	; 0
    a310:	5e e3       	ldi	r21, 0x3E	; 62
    a312:	f4 01       	movw	r30, r8
    a314:	62 81       	ldd	r22, Z+2	; 0x02
    a316:	73 81       	ldd	r23, Z+3	; 0x03
    a318:	84 81       	ldd	r24, Z+4	; 0x04
    a31a:	95 81       	ldd	r25, Z+5	; 0x05
    a31c:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    a320:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a324:	f4 01       	movw	r30, r8
    a326:	20 81       	ld	r18, Z
    a328:	40 2f       	mov	r20, r16
    a32a:	ce 01       	movw	r24, r28
    a32c:	01 96       	adiw	r24, 0x01	; 1
    a32e:	0e 94 1a 51 	call	0xa234	; 0xa234 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a332:	c4 01       	movw	r24, r8
    a334:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <collision_detect_boundries>
    a338:	88 23       	and	r24, r24
    a33a:	31 f0       	breq	.+12     	; 0xa348 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    a33c:	c4 01       	movw	r24, r8
    a33e:	0e 94 c6 4c 	call	0x998c	; 0x998c <recoil_sprite>
		player->shared.speed = 0;
    a342:	f4 01       	movw	r30, r8
    a344:	11 82       	std	Z+1, r1	; 0x01
    a346:	ca c0       	rjmp	.+404    	; 0xa4dc <collision_detect_player+0x244>
    a348:	ce 01       	movw	r24, r28
    a34a:	01 96       	adiw	r24, 0x01	; 1
    a34c:	3c 01       	movw	r6, r24
    a34e:	fe 01       	movw	r30, r28
    a350:	37 96       	adiw	r30, 0x07	; 7
    a352:	f8 87       	std	Y+8, r31	; 0x08
    a354:	ef 83       	std	Y+7, r30	; 0x07
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a356:	3e e1       	ldi	r19, 0x1E	; 30
    a358:	23 2e       	mov	r2, r19
    a35a:	31 2c       	mov	r3, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a35c:	bb 24       	eor	r11, r11
    a35e:	b3 94       	inc	r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a360:	fb e0       	ldi	r31, 0x0B	; 11
    a362:	f1 0f       	add	r31, r17
    a364:	fb 87       	std	Y+11, r31	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a366:	8a e0       	ldi	r24, 0x0A	; 10
    a368:	81 0f       	add	r24, r17
    a36a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x+1,player->shared.y+1,14,14,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a36c:	f3 01       	movw	r30, r6
    a36e:	40 80       	ld	r4, Z
    a370:	51 80       	ldd	r5, Z+1	; 0x01
    a372:	c2 01       	movw	r24, r4
    a374:	0e 94 30 4d 	call	0x9a60	; 0x9a60 <solid_square_tile>
    a378:	88 23       	and	r24, r24
    a37a:	a9 f1       	breq	.+106    	; 0xa3e6 <collision_detect_player+0x14e>
    a37c:	c2 01       	movw	r24, r4
    a37e:	b1 01       	movw	r22, r2
    a380:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a384:	6d 5f       	subi	r22, 0xFD	; 253
    a386:	7f 4f       	sbci	r23, 0xFF	; 255
    a388:	e6 2e       	mov	r14, r22
    a38a:	ee 0c       	add	r14, r14
    a38c:	ee 0c       	add	r14, r14
    a38e:	ee 0c       	add	r14, r14
    a390:	08 2f       	mov	r16, r24
    a392:	00 0f       	add	r16, r16
    a394:	00 0f       	add	r16, r16
    a396:	00 0f       	add	r16, r16
    a398:	20 e0       	ldi	r18, 0x00	; 0
    a39a:	30 e0       	ldi	r19, 0x00	; 0
    a39c:	40 e8       	ldi	r20, 0x80	; 128
    a39e:	5f e3       	ldi	r21, 0x3F	; 63
    a3a0:	f4 01       	movw	r30, r8
    a3a2:	66 81       	ldd	r22, Z+6	; 0x06
    a3a4:	77 81       	ldd	r23, Z+7	; 0x07
    a3a6:	80 85       	ldd	r24, Z+8	; 0x08
    a3a8:	91 85       	ldd	r25, Z+9	; 0x09
    a3aa:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a3ae:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a3b2:	f6 2e       	mov	r15, r22
    a3b4:	20 e0       	ldi	r18, 0x00	; 0
    a3b6:	30 e0       	ldi	r19, 0x00	; 0
    a3b8:	40 e8       	ldi	r20, 0x80	; 128
    a3ba:	5f e3       	ldi	r21, 0x3F	; 63
    a3bc:	f4 01       	movw	r30, r8
    a3be:	62 81       	ldd	r22, Z+2	; 0x02
    a3c0:	73 81       	ldd	r23, Z+3	; 0x03
    a3c2:	84 81       	ldd	r24, Z+4	; 0x04
    a3c4:	95 81       	ldd	r25, Z+5	; 0x05
    a3c6:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    a3ca:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a3ce:	86 2f       	mov	r24, r22
    a3d0:	98 e0       	ldi	r25, 0x08	; 8
    a3d2:	a9 2e       	mov	r10, r25
    a3d4:	28 e0       	ldi	r18, 0x08	; 8
    a3d6:	c2 2e       	mov	r12, r18
    a3d8:	2e e0       	ldi	r18, 0x0E	; 14
    a3da:	4e e0       	ldi	r20, 0x0E	; 14
    a3dc:	6f 2d       	mov	r22, r15
    a3de:	0e 94 19 47 	call	0x8e32	; 0x8e32 <LBCollides>
    a3e2:	81 11       	cpse	r24, r1
    a3e4:	18 c0       	rjmp	.+48     	; 0xa416 <collision_detect_player+0x17e>
		{
			recoil_sprite(&player->shared);
			player->shared.speed = 0;
		}
		else if (solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a3e6:	f4 01       	movw	r30, r8
    a3e8:	66 81       	ldd	r22, Z+6	; 0x06
    a3ea:	77 81       	ldd	r23, Z+7	; 0x07
    a3ec:	80 85       	ldd	r24, Z+8	; 0x08
    a3ee:	91 85       	ldd	r25, Z+9	; 0x09
    a3f0:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a3f4:	46 2f       	mov	r20, r22
    a3f6:	f4 01       	movw	r30, r8
    a3f8:	62 81       	ldd	r22, Z+2	; 0x02
    a3fa:	73 81       	ldd	r23, Z+3	; 0x03
    a3fc:	84 81       	ldd	r24, Z+4	; 0x04
    a3fe:	95 81       	ldd	r25, Z+5	; 0x05
    a400:	4d 87       	std	Y+13, r20	; 0x0d
    a402:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    a406:	00 e1       	ldi	r16, 0x10	; 16
    a408:	20 e1       	ldi	r18, 0x10	; 16
    a40a:	4d 85       	ldd	r20, Y+13	; 0x0d
    a40c:	c2 01       	movw	r24, r4
    a40e:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <solid_directional_tile>
    a412:	88 23       	and	r24, r24
    a414:	31 f0       	breq	.+12     	; 0xa422 <collision_detect_player+0x18a>
		{
			recoil_sprite(&player->shared);
    a416:	c4 01       	movw	r24, r8
    a418:	0e 94 c6 4c 	call	0x998c	; 0x998c <recoil_sprite>
			player->shared.speed = 0;
    a41c:	f4 01       	movw	r30, r8
    a41e:	11 82       	std	Z+1, r1	; 0x01
    a420:	54 c0       	rjmp	.+168    	; 0xa4ca <collision_detect_player+0x232>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    a422:	f2 01       	movw	r30, r4
    a424:	ed 56       	subi	r30, 0x6D	; 109
    a426:	f3 4f       	sbci	r31, 0xF3	; 243
    a428:	81 81       	ldd	r24, Z+1	; 0x01
    a42a:	87 30       	cpi	r24, 0x07	; 7
    a42c:	51 f4       	brne	.+20     	; 0xa442 <collision_detect_player+0x1aa>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a42e:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a430:	81 e4       	ldi	r24, 0x41	; 65
    a432:	f4 01       	movw	r30, r8
    a434:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    a436:	b1 8e       	std	Z+25, r11	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a438:	49 e8       	ldi	r20, 0x89	; 137
    a43a:	51 e2       	ldi	r21, 0x21	; 33
    a43c:	61 e0       	ldi	r22, 0x01	; 1
    a43e:	8c 85       	ldd	r24, Y+12	; 0x0c
    a440:	09 c0       	rjmp	.+18     	; 0xa454 <collision_detect_player+0x1bc>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    a442:	89 30       	cpi	r24, 0x09	; 9
    a444:	d9 f4       	brne	.+54     	; 0xa47c <collision_detect_player+0x1e4>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a446:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a448:	f4 01       	movw	r30, r8
    a44a:	b0 8e       	std	Z+24, r11	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a44c:	43 e8       	ldi	r20, 0x83	; 131
    a44e:	51 e2       	ldi	r21, 0x21	; 33
    a450:	61 e0       	ldi	r22, 0x01	; 1
    a452:	8b 85       	ldd	r24, Y+11	; 0x0b
    a454:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a458:	f3 01       	movw	r30, r6
    a45a:	80 81       	ld	r24, Z
    a45c:	91 81       	ldd	r25, Z+1	; 0x01
    a45e:	b1 01       	movw	r22, r2
    a460:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a464:	6d 5f       	subi	r22, 0xFD	; 253
    a466:	40 e0       	ldi	r20, 0x00	; 0
    a468:	50 e0       	ldi	r21, 0x00	; 0
    a46a:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
			SFX_ITEM;
    a46e:	2f ef       	ldi	r18, 0xFF	; 255
    a470:	47 e1       	ldi	r20, 0x17	; 23
    a472:	63 e0       	ldi	r22, 0x03	; 3
    a474:	84 e0       	ldi	r24, 0x04	; 4
    a476:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
    a47a:	27 c0       	rjmp	.+78     	; 0xa4ca <collision_detect_player+0x232>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    a47c:	88 30       	cpi	r24, 0x08	; 8
    a47e:	29 f5       	brne	.+74     	; 0xa4ca <collision_detect_player+0x232>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a480:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a482:	c2 01       	movw	r24, r4
    a484:	b1 01       	movw	r22, r2
    a486:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a48a:	6d 5f       	subi	r22, 0xFD	; 253
    a48c:	40 e0       	ldi	r20, 0x00	; 0
    a48e:	50 e0       	ldi	r21, 0x00	; 0
    a490:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
			SFX_ITEM;
    a494:	2f ef       	ldi	r18, 0xFF	; 255
    a496:	47 e1       	ldi	r20, 0x17	; 23
    a498:	63 e0       	ldi	r22, 0x03	; 3
    a49a:	84 e0       	ldi	r24, 0x04	; 4
    a49c:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    a4a0:	e9 85       	ldd	r30, Y+9	; 0x09
    a4a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    a4a4:	83 89       	ldd	r24, Z+19	; 0x13
    a4a6:	80 fd       	sbrc	r24, 0
    a4a8:	10 c0       	rjmp	.+32     	; 0xa4ca <collision_detect_player+0x232>
			{
				player->level_score++;
    a4aa:	f4 01       	movw	r30, r8
    a4ac:	87 85       	ldd	r24, Z+15	; 0x0f
    a4ae:	8f 5f       	subi	r24, 0xFF	; 255
    a4b0:	87 87       	std	Z+15, r24	; 0x0f
				player->score++;
    a4b2:	86 85       	ldd	r24, Z+14	; 0x0e
    a4b4:	8f 5f       	subi	r24, 0xFF	; 255
    a4b6:	86 87       	std	Z+14, r24	; 0x0e
				render_score(player, hud_x);
    a4b8:	61 2f       	mov	r22, r17
    a4ba:	c4 01       	movw	r24, r8
    a4bc:	0e 94 27 4b 	call	0x964e	; 0x964e <render_score>
				kill_player(other_player, other_player_hud_x);
    a4c0:	6d 2d       	mov	r22, r13
    a4c2:	89 85       	ldd	r24, Y+9	; 0x09
    a4c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a4c6:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <kill_player>
    a4ca:	f2 e0       	ldi	r31, 0x02	; 2
    a4cc:	6f 0e       	add	r6, r31
    a4ce:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a4d0:	8f 81       	ldd	r24, Y+7	; 0x07
    a4d2:	98 85       	ldd	r25, Y+8	; 0x08
    a4d4:	68 16       	cp	r6, r24
    a4d6:	79 06       	cpc	r7, r25
    a4d8:	09 f0       	breq	.+2      	; 0xa4dc <collision_detect_player+0x244>
    a4da:	48 cf       	rjmp	.-368    	; 0xa36c <collision_detect_player+0xd4>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    a4dc:	2d 96       	adiw	r28, 0x0d	; 13
    a4de:	0f b6       	in	r0, 0x3f	; 63
    a4e0:	f8 94       	cli
    a4e2:	de bf       	out	0x3e, r29	; 62
    a4e4:	0f be       	out	0x3f, r0	; 63
    a4e6:	cd bf       	out	0x3d, r28	; 61
    a4e8:	df 91       	pop	r29
    a4ea:	cf 91       	pop	r28
    a4ec:	1f 91       	pop	r17
    a4ee:	0f 91       	pop	r16
    a4f0:	ff 90       	pop	r15
    a4f2:	ef 90       	pop	r14
    a4f4:	df 90       	pop	r13
    a4f6:	cf 90       	pop	r12
    a4f8:	bf 90       	pop	r11
    a4fa:	af 90       	pop	r10
    a4fc:	9f 90       	pop	r9
    a4fe:	8f 90       	pop	r8
    a500:	7f 90       	pop	r7
    a502:	6f 90       	pop	r6
    a504:	5f 90       	pop	r5
    a506:	4f 90       	pop	r4
    a508:	3f 90       	pop	r3
    a50a:	2f 90       	pop	r2
    a50c:	08 95       	ret

0000a50e <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a50e:	bf 92       	push	r11
    a510:	cf 92       	push	r12
    a512:	df 92       	push	r13
    a514:	ef 92       	push	r14
    a516:	ff 92       	push	r15
    a518:	0f 93       	push	r16
    a51a:	1f 93       	push	r17
    a51c:	cf 93       	push	r28
    a51e:	df 93       	push	r29
    a520:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a522:	c0 e0       	ldi	r28, 0x00	; 0
    a524:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a526:	0e e1       	ldi	r16, 0x1E	; 30
    a528:	10 e0       	ldi	r17, 0x00	; 0
    a52a:	ce 01       	movw	r24, r28
    a52c:	b8 01       	movw	r22, r16
    a52e:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
		y = 3 + i / 30;
    a532:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a534:	bb 20       	and	r11, r11
    a536:	19 f0       	breq	.+6      	; 0xa53e <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    a538:	42 e9       	ldi	r20, 0x92	; 146
    a53a:	51 e2       	ldi	r21, 0x21	; 33
    a53c:	11 c0       	rjmp	.+34     	; 0xa560 <load_level_tiles+0x52>
    a53e:	fe 01       	movw	r30, r28
    a540:	ed 56       	subi	r30, 0x6D	; 109
    a542:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    a544:	e1 81       	ldd	r30, Z+1	; 0x01
    a546:	ce 2e       	mov	r12, r30
    a548:	d1 2c       	mov	r13, r1
    a54a:	f6 01       	movw	r30, r12
    a54c:	31 97       	sbiw	r30, 0x01	; 1
    a54e:	e9 30       	cpi	r30, 0x09	; 9
    a550:	f1 05       	cpc	r31, r1
    a552:	08 f5       	brcc	.+66     	; 0xa596 <load_level_tiles+0x88>
    a554:	e8 5c       	subi	r30, 0xC8	; 200
    a556:	ff 4f       	sbci	r31, 0xFF	; 255
    a558:	0c 94 63 5d 	jmp	0xbac6	; 0xbac6 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    a55c:	4f e8       	ldi	r20, 0x8F	; 143
    a55e:	51 e2       	ldi	r21, 0x21	; 33
    a560:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
    a564:	1c c0       	rjmp	.+56     	; 0xa59e <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    a566:	4c e8       	ldi	r20, 0x8C	; 140
    a568:	51 e2       	ldi	r21, 0x21	; 33
    a56a:	fa cf       	rjmp	.-12     	; 0xa560 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    a56c:	47 e7       	ldi	r20, 0x77	; 119
    a56e:	51 e2       	ldi	r21, 0x21	; 33
    a570:	f7 cf       	rjmp	.-18     	; 0xa560 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    a572:	41 e7       	ldi	r20, 0x71	; 113
    a574:	51 e2       	ldi	r21, 0x21	; 33
    a576:	f4 cf       	rjmp	.-24     	; 0xa560 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    a578:	4e e6       	ldi	r20, 0x6E	; 110
    a57a:	51 e2       	ldi	r21, 0x21	; 33
    a57c:	f1 cf       	rjmp	.-30     	; 0xa560 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    a57e:	44 e7       	ldi	r20, 0x74	; 116
    a580:	51 e2       	ldi	r21, 0x21	; 33
    a582:	ee cf       	rjmp	.-36     	; 0xa560 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    a584:	49 e8       	ldi	r20, 0x89	; 137
    a586:	51 e2       	ldi	r21, 0x21	; 33
    a588:	eb cf       	rjmp	.-42     	; 0xa560 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    a58a:	46 e8       	ldi	r20, 0x86	; 134
    a58c:	51 e2       	ldi	r21, 0x21	; 33
    a58e:	e8 cf       	rjmp	.-48     	; 0xa560 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    a590:	43 e8       	ldi	r20, 0x83	; 131
    a592:	51 e2       	ldi	r21, 0x21	; 33
    a594:	e5 cf       	rjmp	.-54     	; 0xa560 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    a596:	40 e0       	ldi	r20, 0x00	; 0
    a598:	50 e0       	ldi	r21, 0x00	; 0
    a59a:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a59e:	21 96       	adiw	r28, 0x01	; 1
    a5a0:	ce 3e       	cpi	r28, 0xEE	; 238
    a5a2:	82 e0       	ldi	r24, 0x02	; 2
    a5a4:	d8 07       	cpc	r29, r24
    a5a6:	09 f6       	brne	.-126    	; 0xa52a <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    a5a8:	df 91       	pop	r29
    a5aa:	cf 91       	pop	r28
    a5ac:	1f 91       	pop	r17
    a5ae:	0f 91       	pop	r16
    a5b0:	ff 90       	pop	r15
    a5b2:	ef 90       	pop	r14
    a5b4:	df 90       	pop	r13
    a5b6:	cf 90       	pop	r12
    a5b8:	bf 90       	pop	r11
    a5ba:	08 95       	ret

0000a5bc <load_level>:

void load_level(int level_number)
{
    a5bc:	9f 92       	push	r9
    a5be:	af 92       	push	r10
    a5c0:	bf 92       	push	r11
    a5c2:	cf 92       	push	r12
    a5c4:	df 92       	push	r13
    a5c6:	ef 92       	push	r14
    a5c8:	ff 92       	push	r15
    a5ca:	0f 93       	push	r16
    a5cc:	1f 93       	push	r17
    a5ce:	cf 93       	push	r28
    a5d0:	df 93       	push	r29
    a5d2:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    a5d4:	8e ee       	ldi	r24, 0xEE	; 238
    a5d6:	92 e0       	ldi	r25, 0x02	; 2
    a5d8:	c8 9f       	mul	r28, r24
    a5da:	70 01       	movw	r14, r0
    a5dc:	c9 9f       	mul	r28, r25
    a5de:	f0 0c       	add	r15, r0
    a5e0:	d8 9f       	mul	r29, r24
    a5e2:	f0 0c       	add	r15, r0
    a5e4:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    a5e6:	83 e0       	ldi	r24, 0x03	; 3
    a5e8:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    a5ec:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
	game.current_level = level_number;
    a5f0:	c0 93 09 0c 	sts	0x0C09, r28
    a5f4:	84 e9       	ldi	r24, 0x94	; 148
    a5f6:	c8 2e       	mov	r12, r24
    a5f8:	8c e0       	ldi	r24, 0x0C	; 12
    a5fa:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    a5fc:	c0 e0       	ldi	r28, 0x00	; 0
    a5fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    a600:	0e e1       	ldi	r16, 0x1E	; 30
    a602:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    a604:	92 e3       	ldi	r25, 0x32	; 50
    a606:	99 2e       	mov	r9, r25
    a608:	fe 01       	movw	r30, r28
    a60a:	ee 0d       	add	r30, r14
    a60c:	ff 1d       	adc	r31, r15
    a60e:	e8 53       	subi	r30, 0x38	; 56
    a610:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    a612:	e4 91       	lpm	r30, Z
    a614:	56 01       	movw	r10, r12
    a616:	d6 01       	movw	r26, r12
    a618:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    a61a:	e8 35       	cpi	r30, 0x58	; 88
    a61c:	01 f5       	brne	.+64     	; 0xa65e <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    a61e:	ce 01       	movw	r24, r28
    a620:	b8 01       	movw	r22, r16
    a622:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a626:	88 0f       	add	r24, r24
    a628:	88 0f       	add	r24, r24
    a62a:	88 0f       	add	r24, r24
    a62c:	80 93 36 0c 	sts	0x0C36, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    a630:	6d 5f       	subi	r22, 0xFD	; 253
    a632:	7f 4f       	sbci	r23, 0xFF	; 255
    a634:	66 0f       	add	r22, r22
    a636:	66 0f       	add	r22, r22
    a638:	66 0f       	add	r22, r22
    a63a:	60 93 37 0c 	sts	0x0C37, r22
			player1.level_score = 0;
    a63e:	10 92 34 0c 	sts	0x0C34, r1
			player1.has_over_speed = false;
    a642:	10 92 3e 0c 	sts	0x0C3E, r1
			player1.has_rocket = false;
    a646:	10 92 3d 0c 	sts	0x0C3D, r1
			player1.max_speed = MAX_SPEED;
    a64a:	90 92 3c 0c 	sts	0x0C3C, r9
			player_init_shot_state(&player1);
    a64e:	85 e2       	ldi	r24, 0x25	; 37
    a650:	9c e0       	ldi	r25, 0x0C	; 12
    a652:	0e 94 47 49 	call	0x928e	; 0x928e <player_init_shot_state>
			player_spawn(&player1);
    a656:	85 e2       	ldi	r24, 0x25	; 37
    a658:	9c e0       	ldi	r25, 0x0C	; 12
    a65a:	0e 94 62 49 	call	0x92c4	; 0x92c4 <player_spawn>
    a65e:	bf ef       	ldi	r27, 0xFF	; 255
    a660:	cb 1a       	sub	r12, r27
    a662:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    a664:	f5 01       	movw	r30, r10
    a666:	80 81       	ld	r24, Z
    a668:	83 36       	cpi	r24, 0x63	; 99
    a66a:	01 f5       	brne	.+64     	; 0xa6ac <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    a66c:	ce 01       	movw	r24, r28
    a66e:	b8 01       	movw	r22, r16
    a670:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    a674:	88 0f       	add	r24, r24
    a676:	88 0f       	add	r24, r24
    a678:	88 0f       	add	r24, r24
    a67a:	80 93 93 0f 	sts	0x0F93, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    a67e:	6d 5f       	subi	r22, 0xFD	; 253
    a680:	7f 4f       	sbci	r23, 0xFF	; 255
    a682:	66 0f       	add	r22, r22
    a684:	66 0f       	add	r22, r22
    a686:	66 0f       	add	r22, r22
    a688:	60 93 94 0f 	sts	0x0F94, r22
			player2.level_score = 0;
    a68c:	10 92 91 0f 	sts	0x0F91, r1
			player2.has_over_speed = false;
    a690:	10 92 9b 0f 	sts	0x0F9B, r1
			player2.has_rocket = false;
    a694:	10 92 9a 0f 	sts	0x0F9A, r1
			player2.max_speed = MAX_SPEED;
    a698:	90 92 99 0f 	sts	0x0F99, r9
			player_init_shot_state(&player2);
    a69c:	82 e8       	ldi	r24, 0x82	; 130
    a69e:	9f e0       	ldi	r25, 0x0F	; 15
    a6a0:	0e 94 47 49 	call	0x928e	; 0x928e <player_init_shot_state>
			player_spawn(&player2);
    a6a4:	82 e8       	ldi	r24, 0x82	; 130
    a6a6:	9f e0       	ldi	r25, 0x0F	; 15
    a6a8:	0e 94 62 49 	call	0x92c4	; 0x92c4 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    a6ac:	21 96       	adiw	r28, 0x01	; 1
    a6ae:	ce 3e       	cpi	r28, 0xEE	; 238
    a6b0:	f2 e0       	ldi	r31, 0x02	; 2
    a6b2:	df 07       	cpc	r29, r31
    a6b4:	09 f0       	breq	.+2      	; 0xa6b8 <load_level+0xfc>
    a6b6:	a8 cf       	rjmp	.-176    	; 0xa608 <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    a6b8:	60 e0       	ldi	r22, 0x00	; 0
    a6ba:	85 e2       	ldi	r24, 0x25	; 37
    a6bc:	9c e0       	ldi	r25, 0x0C	; 12
    a6be:	0e 94 0a 4b 	call	0x9614	; 0x9614 <render_hud>
	render_hud(&player2, 15);
    a6c2:	6f e0       	ldi	r22, 0x0F	; 15
    a6c4:	82 e8       	ldi	r24, 0x82	; 130
    a6c6:	9f e0       	ldi	r25, 0x0F	; 15
    a6c8:	0e 94 0a 4b 	call	0x9614	; 0x9614 <render_hud>
	render_score(&player1, 0);
    a6cc:	60 e0       	ldi	r22, 0x00	; 0
    a6ce:	85 e2       	ldi	r24, 0x25	; 37
    a6d0:	9c e0       	ldi	r25, 0x0C	; 12
    a6d2:	0e 94 27 4b 	call	0x964e	; 0x964e <render_score>
	render_score(&player2, 15);
    a6d6:	6f e0       	ldi	r22, 0x0F	; 15
    a6d8:	82 e8       	ldi	r24, 0x82	; 130
    a6da:	9f e0       	ldi	r25, 0x0F	; 15
    a6dc:	0e 94 27 4b 	call	0x964e	; 0x964e <render_score>
	Print(14, 0, &strMap[strVertSep]);
    a6e0:	4a e8       	ldi	r20, 0x8A	; 138
    a6e2:	51 e0       	ldi	r21, 0x01	; 1
    a6e4:	60 e0       	ldi	r22, 0x00	; 0
    a6e6:	70 e0       	ldi	r23, 0x00	; 0
    a6e8:	8e e0       	ldi	r24, 0x0E	; 14
    a6ea:	90 e0       	ldi	r25, 0x00	; 0
    a6ec:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(14, 1, &strMap[strVertSep]);
    a6f0:	4a e8       	ldi	r20, 0x8A	; 138
    a6f2:	51 e0       	ldi	r21, 0x01	; 1
    a6f4:	61 e0       	ldi	r22, 0x01	; 1
    a6f6:	70 e0       	ldi	r23, 0x00	; 0
    a6f8:	8e e0       	ldi	r24, 0x0E	; 14
    a6fa:	90 e0       	ldi	r25, 0x00	; 0
    a6fc:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(14, 2, &strMap[strVertSep]);
    a700:	4a e8       	ldi	r20, 0x8A	; 138
    a702:	51 e0       	ldi	r21, 0x01	; 1
    a704:	62 e0       	ldi	r22, 0x02	; 2
    a706:	70 e0       	ldi	r23, 0x00	; 0
    a708:	8e e0       	ldi	r24, 0x0E	; 14
    a70a:	90 e0       	ldi	r25, 0x00	; 0
    a70c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	load_level_tiles(false);
    a710:	80 e0       	ldi	r24, 0x00	; 0
    a712:	0e 94 87 52 	call	0xa50e	; 0xa50e <load_level_tiles>
	SFX_LEVEL_START;
    a716:	2f ef       	ldi	r18, 0xFF	; 255
    a718:	47 e1       	ldi	r20, 0x17	; 23
    a71a:	65 e0       	ldi	r22, 0x05	; 5
    a71c:	84 e0       	ldi	r24, 0x04	; 4
}
    a71e:	df 91       	pop	r29
    a720:	cf 91       	pop	r28
    a722:	1f 91       	pop	r17
    a724:	0f 91       	pop	r16
    a726:	ff 90       	pop	r15
    a728:	ef 90       	pop	r14
    a72a:	df 90       	pop	r13
    a72c:	cf 90       	pop	r12
    a72e:	bf 90       	pop	r11
    a730:	af 90       	pop	r10
    a732:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, &strMap[strVertSep]);
	Print(14, 1, &strMap[strVertSep]);
	Print(14, 2, &strMap[strVertSep]);
	load_level_tiles(false);
	SFX_LEVEL_START;
    a734:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <TriggerNote>

0000a738 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    a738:	cf 93       	push	r28
    a73a:	df 93       	push	r29
    a73c:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    a73e:	61 e0       	ldi	r22, 0x01	; 1
    a740:	83 e0       	ldi	r24, 0x03	; 3
    a742:	0e 94 39 46 	call	0x8c72	; 0x8c72 <FadeOut>
	ClearVram();
    a746:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ClearVram>
	clear_sprites();
    a74a:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
	Print(8, 12, &strMap[strLevels+index*16]);
    a74e:	d0 e0       	ldi	r29, 0x00	; 0
    a750:	ae 01       	movw	r20, r28
    a752:	84 e0       	ldi	r24, 0x04	; 4
    a754:	44 0f       	add	r20, r20
    a756:	55 1f       	adc	r21, r21
    a758:	8a 95       	dec	r24
    a75a:	e1 f7       	brne	.-8      	; 0xa754 <level_transition+0x1c>
    a75c:	4d 54       	subi	r20, 0x4D	; 77
    a75e:	5d 4f       	sbci	r21, 0xFD	; 253
    a760:	6c e0       	ldi	r22, 0x0C	; 12
    a762:	70 e0       	ldi	r23, 0x00	; 0
    a764:	88 e0       	ldi	r24, 0x08	; 8
    a766:	90 e0       	ldi	r25, 0x00	; 0
    a768:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	FadeIn(1, true);
    a76c:	61 e0       	ldi	r22, 0x01	; 1
    a76e:	81 e0       	ldi	r24, 0x01	; 1
    a770:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    a774:	82 e0       	ldi	r24, 0x02	; 2
    a776:	0e 94 4e 48 	call	0x909c	; 0x909c <LBWaitSeconds>
	FadeOut(1, true);
    a77a:	61 e0       	ldi	r22, 0x01	; 1
    a77c:	81 e0       	ldi	r24, 0x01	; 1
    a77e:	0e 94 39 46 	call	0x8c72	; 0x8c72 <FadeOut>
	ClearVram();
    a782:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a786:	60 e0       	ldi	r22, 0x00	; 0
    a788:	83 e0       	ldi	r24, 0x03	; 3
    a78a:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <FadeIn>
	load_level(index);
    a78e:	ce 01       	movw	r24, r28
}
    a790:	df 91       	pop	r29
    a792:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    a794:	0c 94 de 52 	jmp	0xa5bc	; 0xa5bc <load_level>

0000a798 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    a798:	10 92 08 0c 	sts	0x0C08, r1
	clear_sprites();
    a79c:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
	Print(7, 13, &strMap[str1Player]);
    a7a0:	49 e4       	ldi	r20, 0x49	; 73
    a7a2:	51 e0       	ldi	r21, 0x01	; 1
    a7a4:	6d e0       	ldi	r22, 0x0D	; 13
    a7a6:	70 e0       	ldi	r23, 0x00	; 0
    a7a8:	87 e0       	ldi	r24, 0x07	; 7
    a7aa:	90 e0       	ldi	r25, 0x00	; 0
    a7ac:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(7, 14, &strMap[str2Player]);
    a7b0:	47 e5       	ldi	r20, 0x57	; 87
    a7b2:	51 e0       	ldi	r21, 0x01	; 1
    a7b4:	6e e0       	ldi	r22, 0x0E	; 14
    a7b6:	70 e0       	ldi	r23, 0x00	; 0
    a7b8:	87 e0       	ldi	r24, 0x07	; 7
    a7ba:	90 e0       	ldi	r25, 0x00	; 0
    a7bc:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(7, 15, &strMap[strHighscores]);
    a7c0:	48 e6       	ldi	r20, 0x68	; 104
    a7c2:	51 e0       	ldi	r21, 0x01	; 1
    a7c4:	6f e0       	ldi	r22, 0x0F	; 15
    a7c6:	70 e0       	ldi	r23, 0x00	; 0
    a7c8:	87 e0       	ldi	r24, 0x07	; 7
    a7ca:	90 e0       	ldi	r25, 0x00	; 0
    a7cc:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(4, 26, &strMap[strCopyright]);
    a7d0:	42 e3       	ldi	r20, 0x32	; 50
    a7d2:	51 e0       	ldi	r21, 0x01	; 1
    a7d4:	6a e1       	ldi	r22, 0x1A	; 26
    a7d6:	70 e0       	ldi	r23, 0x00	; 0
    a7d8:	84 e0       	ldi	r24, 0x04	; 4
    a7da:	90 e0       	ldi	r25, 0x00	; 0
    a7dc:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    a7e0:	43 ed       	ldi	r20, 0xD3	; 211
    a7e2:	51 e2       	ldi	r21, 0x21	; 33
    a7e4:	65 e0       	ldi	r22, 0x05	; 5
    a7e6:	84 e0       	ldi	r24, 0x04	; 4
    a7e8:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    a7ec:	40 e0       	ldi	r20, 0x00	; 0
    a7ee:	60 e2       	ldi	r22, 0x20	; 32
    a7f0:	71 e2       	ldi	r23, 0x21	; 33
    a7f2:	80 e0       	ldi	r24, 0x00	; 0
    a7f4:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	SFX_SPLASH;
    a7f8:	2f ef       	ldi	r18, 0xFF	; 255
    a7fa:	47 e1       	ldi	r20, 0x17	; 23
    a7fc:	69 e0       	ldi	r22, 0x09	; 9
    a7fe:	84 e0       	ldi	r24, 0x04	; 4
    a800:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <TriggerNote>

0000a804 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    a804:	ef 92       	push	r14
    a806:	ff 92       	push	r15
    a808:	0f 93       	push	r16
    a80a:	1f 93       	push	r17
    a80c:	cf 93       	push	r28
    a80e:	df 93       	push	r29
    a810:	1f 92       	push	r1
    a812:	cd b7       	in	r28, 0x3d	; 61
    a814:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    a816:	81 e0       	ldi	r24, 0x01	; 1
    a818:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    a81c:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a820:	40 e0       	ldi	r20, 0x00	; 0
    a822:	6f e5       	ldi	r22, 0x5F	; 95
    a824:	71 e2       	ldi	r23, 0x21	; 33
    a826:	80 e0       	ldi	r24, 0x00	; 0
    a828:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a82c:	40 e0       	ldi	r20, 0x00	; 0
    a82e:	67 e4       	ldi	r22, 0x47	; 71
    a830:	71 e2       	ldi	r23, 0x21	; 33
    a832:	84 e0       	ldi	r24, 0x04	; 4
    a834:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    a838:	02 e0       	ldi	r16, 0x02	; 2
    a83a:	22 e0       	ldi	r18, 0x02	; 2
    a83c:	48 e0       	ldi	r20, 0x08	; 8
    a83e:	68 e3       	ldi	r22, 0x38	; 56
    a840:	80 e0       	ldi	r24, 0x00	; 0
    a842:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    a846:	22 e0       	ldi	r18, 0x02	; 2
    a848:	48 e0       	ldi	r20, 0x08	; 8
    a84a:	60 ea       	ldi	r22, 0xA0	; 160
    a84c:	84 e0       	ldi	r24, 0x04	; 4
    a84e:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
	Print(10, 2, &strMap[strHighscores]);
    a852:	48 e6       	ldi	r20, 0x68	; 104
    a854:	51 e0       	ldi	r21, 0x01	; 1
    a856:	62 e0       	ldi	r22, 0x02	; 2
    a858:	70 e0       	ldi	r23, 0x00	; 0
    a85a:	8a e0       	ldi	r24, 0x0A	; 10
    a85c:	90 e0       	ldi	r25, 0x00	; 0
    a85e:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    a862:	06 ec       	ldi	r16, 0xC6	; 198
    a864:	1b e0       	ldi	r17, 0x0B	; 11
    a866:	87 e0       	ldi	r24, 0x07	; 7
    a868:	e8 2e       	mov	r14, r24
    a86a:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    a86c:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    a86e:	20 e0       	ldi	r18, 0x00	; 0
    a870:	43 2f       	mov	r20, r19
    a872:	b7 01       	movw	r22, r14
    a874:	82 e0       	ldi	r24, 0x02	; 2
    a876:	90 e0       	ldi	r25, 0x00	; 0
    a878:	39 83       	std	Y+1, r19	; 0x01
    a87a:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
		PrintChar(3, y, '.');
    a87e:	4e e2       	ldi	r20, 0x2E	; 46
    a880:	b7 01       	movw	r22, r14
    a882:	83 e0       	ldi	r24, 0x03	; 3
    a884:	90 e0       	ldi	r25, 0x00	; 0
    a886:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
    a88a:	f8 01       	movw	r30, r16
    a88c:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    a88e:	80 81       	ld	r24, Z
    a890:	93 e0       	ldi	r25, 0x03	; 3
    a892:	89 9f       	mul	r24, r25
    a894:	a0 01       	movw	r20, r0
    a896:	11 24       	eor	r1, r1
    a898:	46 51       	subi	r20, 0x16	; 22
    a89a:	54 4f       	sbci	r21, 0xF4	; 244
    a89c:	23 e0       	ldi	r18, 0x03	; 3
    a89e:	6e 2d       	mov	r22, r14
    a8a0:	85 e0       	ldi	r24, 0x05	; 5
    a8a2:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
		Print(9, y, &strMap[strOwns]);
    a8a6:	4c ed       	ldi	r20, 0xDC	; 220
    a8a8:	51 e0       	ldi	r21, 0x01	; 1
    a8aa:	b7 01       	movw	r22, r14
    a8ac:	89 e0       	ldi	r24, 0x09	; 9
    a8ae:	90 e0       	ldi	r25, 0x00	; 0
    a8b0:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    a8b4:	f8 01       	movw	r30, r16
    a8b6:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    a8b8:	80 81       	ld	r24, Z
    a8ba:	e3 e0       	ldi	r30, 0x03	; 3
    a8bc:	8e 9f       	mul	r24, r30
    a8be:	a0 01       	movw	r20, r0
    a8c0:	11 24       	eor	r1, r1
    a8c2:	46 51       	subi	r20, 0x16	; 22
    a8c4:	54 4f       	sbci	r21, 0xF4	; 244
    a8c6:	23 e0       	ldi	r18, 0x03	; 3
    a8c8:	6e 2d       	mov	r22, r14
    a8ca:	8e e0       	ldi	r24, 0x0E	; 14
    a8cc:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
		Print(18, y, &strMap[strBy]);
    a8d0:	41 ee       	ldi	r20, 0xE1	; 225
    a8d2:	51 e0       	ldi	r21, 0x01	; 1
    a8d4:	b7 01       	movw	r22, r14
    a8d6:	82 e1       	ldi	r24, 0x12	; 18
    a8d8:	90 e0       	ldi	r25, 0x00	; 0
    a8da:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    a8de:	f8 01       	movw	r30, r16
    a8e0:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    a8e2:	21 e0       	ldi	r18, 0x01	; 1
    a8e4:	40 81       	ld	r20, Z
    a8e6:	b7 01       	movw	r22, r14
    a8e8:	87 e1       	ldi	r24, 0x17	; 23
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
		PrintChar(24, y, '-');
    a8f0:	4d e2       	ldi	r20, 0x2D	; 45
    a8f2:	b7 01       	movw	r22, r14
    a8f4:	88 e1       	ldi	r24, 0x18	; 24
    a8f6:	90 e0       	ldi	r25, 0x00	; 0
    a8f8:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    a8fc:	21 e0       	ldi	r18, 0x01	; 1
    a8fe:	f8 01       	movw	r30, r16
    a900:	40 81       	ld	r20, Z
    a902:	b7 01       	movw	r22, r14
    a904:	8b e1       	ldi	r24, 0x1B	; 27
    a906:	90 e0       	ldi	r25, 0x00	; 0
    a908:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <PrintByte>
		y += 3;
		rank += 1;
    a90c:	39 81       	ldd	r19, Y+1	; 0x01
    a90e:	3f 5f       	subi	r19, 0xFF	; 255
    a910:	f3 e0       	ldi	r31, 0x03	; 3
    a912:	ef 0e       	add	r14, r31
    a914:	f1 1c       	adc	r15, r1
    a916:	0c 5f       	subi	r16, 0xFC	; 252
    a918:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
    a91a:	36 30       	cpi	r19, 0x06	; 6
    a91c:	09 f0       	breq	.+2      	; 0xa920 <load_tank_rank+0x11c>
    a91e:	a7 cf       	rjmp	.-178    	; 0xa86e <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
    a920:	44 eb       	ldi	r20, 0xB4	; 180
    a922:	51 e0       	ldi	r21, 0x01	; 1
    a924:	66 e1       	ldi	r22, 0x16	; 22
    a926:	70 e0       	ldi	r23, 0x00	; 0
    a928:	83 e0       	ldi	r24, 0x03	; 3
    a92a:	90 e0       	ldi	r25, 0x00	; 0
    a92c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(10, 24, &strMap[strCancelHandle]);
    a930:	49 ea       	ldi	r20, 0xA9	; 169
    a932:	51 e0       	ldi	r21, 0x01	; 1
    a934:	68 e1       	ldi	r22, 0x18	; 24
    a936:	70 e0       	ldi	r23, 0x00	; 0
    a938:	8a e0       	ldi	r24, 0x0A	; 10
    a93a:	90 e0       	ldi	r25, 0x00	; 0
}
    a93c:	0f 90       	pop	r0
    a93e:	df 91       	pop	r29
    a940:	cf 91       	pop	r28
    a942:	1f 91       	pop	r17
    a944:	0f 91       	pop	r16
    a946:	ff 90       	pop	r15
    a948:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
    a94a:	0c 94 ea 45 	jmp	0x8bd4	; 0x8bd4 <Print>

0000a94e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    a94e:	0e 94 a8 49 	call	0x9350	; 0x9350 <save_score>
	fade_through();
    a952:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
	SetSpriteVisibility(true);
    a956:	81 e0       	ldi	r24, 0x01	; 1
    a958:	0e 94 11 44 	call	0x8822	; 0x8822 <SetSpriteVisibility>
	init_game_state();
    a95c:	0e 94 4d 49 	call	0x929a	; 0x929a <init_game_state>
	load_tank_rank();
    a960:	0c 94 02 54 	jmp	0xa804	; 0xa804 <load_tank_rank>

0000a964 <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a964:	6f 92       	push	r6
    a966:	7f 92       	push	r7
    a968:	8f 92       	push	r8
    a96a:	9f 92       	push	r9
    a96c:	af 92       	push	r10
    a96e:	bf 92       	push	r11
    a970:	df 92       	push	r13
    a972:	ef 92       	push	r14
    a974:	ff 92       	push	r15
    a976:	0f 93       	push	r16
    a978:	1f 93       	push	r17
    a97a:	cf 93       	push	r28
    a97c:	df 93       	push	r29
    a97e:	1f 92       	push	r1
    a980:	cd b7       	in	r28, 0x3d	; 61
    a982:	de b7       	in	r29, 0x3e	; 62
    a984:	7c 01       	movw	r14, r24
    a986:	3b 01       	movw	r6, r22
    a988:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	if ((p->pressed & BTN_START))
    a98a:	fc 01       	movw	r30, r24
    a98c:	80 81       	ld	r24, Z
    a98e:	83 ff       	sbrs	r24, 3
    a990:	0f c0       	rjmp	.+30     	; 0xa9b0 <update_level_helper+0x4c>
	{
		SFX_NAVIGATE;
    a992:	2f ef       	ldi	r18, 0xFF	; 255
    a994:	47 e1       	ldi	r20, 0x17	; 23
    a996:	67 e0       	ldi	r22, 0x07	; 7
    a998:	84 e0       	ldi	r24, 0x04	; 4
    a99a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		game.paused = game.paused ^ 1;
    a99e:	90 91 0a 0c 	lds	r25, 0x0C0A
    a9a2:	81 e0       	ldi	r24, 0x01	; 1
    a9a4:	89 27       	eor	r24, r25
    a9a6:	80 93 0a 0c 	sts	0x0C0A, r24
		load_level_tiles(false);
    a9aa:	80 e0       	ldi	r24, 0x00	; 0
    a9ac:	0e 94 87 52 	call	0xa50e	; 0xa50e <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    a9b0:	20 91 0a 0c 	lds	r18, 0x0C0A
    a9b4:	f7 01       	movw	r30, r14
    a9b6:	80 81       	ld	r24, Z
    a9b8:	91 81       	ldd	r25, Z+1	; 0x01
    a9ba:	21 11       	cpse	r18, r1
    a9bc:	72 c1       	rjmp	.+740    	; 0xaca2 <update_level_helper+0x33e>
    a9be:	f3 01       	movw	r30, r6
    a9c0:	23 89       	ldd	r18, Z+19	; 0x13
    a9c2:	20 fd       	sbrc	r18, 0
    a9c4:	6e c1       	rjmp	.+732    	; 0xaca2 <update_level_helper+0x33e>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    a9c6:	93 ff       	sbrs	r25, 3
    a9c8:	12 c0       	rjmp	.+36     	; 0xa9ee <update_level_helper+0x8a>
    a9ca:	84 89       	ldd	r24, Z+20	; 0x14
    a9cc:	8a 35       	cpi	r24, 0x5A	; 90
    a9ce:	79 f4       	brne	.+30     	; 0xa9ee <update_level_helper+0x8a>
		{
			player->banter_frame = 0;
    a9d0:	14 8a       	std	Z+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    a9d2:	69 e0       	ldi	r22, 0x09	; 9
    a9d4:	70 e0       	ldi	r23, 0x00	; 0
    a9d6:	80 e0       	ldi	r24, 0x00	; 0
    a9d8:	90 e0       	ldi	r25, 0x00	; 0
    a9da:	0e 94 19 48 	call	0x9032	; 0x9032 <LBRandom>
    a9de:	f3 01       	movw	r30, r6
    a9e0:	85 8b       	std	Z+21, r24	; 0x15
			SFX_BANTER;
    a9e2:	2f e5       	ldi	r18, 0x5F	; 95
    a9e4:	4e e1       	ldi	r20, 0x1E	; 30
    a9e6:	60 e0       	ldi	r22, 0x00	; 0
    a9e8:	84 e0       	ldi	r24, 0x04	; 4
    a9ea:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    a9ee:	f3 01       	movw	r30, r6
    a9f0:	67 89       	ldd	r22, Z+23	; 0x17
    a9f2:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    a9f4:	f7 01       	movw	r30, r14
    a9f6:	84 81       	ldd	r24, Z+4	; 0x04
    a9f8:	84 ff       	sbrs	r24, 4
    a9fa:	17 c0       	rjmp	.+46     	; 0xaa2a <update_level_helper+0xc6>
		{
			player->shared.direction = D_UP;
    a9fc:	f3 01       	movw	r30, r6
    a9fe:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    aa00:	70 e0       	ldi	r23, 0x00	; 0
    aa02:	80 e0       	ldi	r24, 0x00	; 0
    aa04:	90 e0       	ldi	r25, 0x00	; 0
    aa06:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    aa0a:	25 e6       	ldi	r18, 0x65	; 101
    aa0c:	38 e8       	ldi	r19, 0x88	; 136
    aa0e:	48 e8       	ldi	r20, 0x88	; 136
    aa10:	5c e3       	ldi	r21, 0x3C	; 60
    aa12:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    aa16:	9b 01       	movw	r18, r22
    aa18:	ac 01       	movw	r20, r24
    aa1a:	f3 01       	movw	r30, r6
    aa1c:	66 81       	ldd	r22, Z+6	; 0x06
    aa1e:	77 81       	ldd	r23, Z+7	; 0x07
    aa20:	80 85       	ldd	r24, Z+8	; 0x08
    aa22:	91 85       	ldd	r25, Z+9	; 0x09
    aa24:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    aa28:	33 c0       	rjmp	.+102    	; 0xaa90 <update_level_helper+0x12c>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    aa2a:	87 ff       	sbrs	r24, 7
    aa2c:	18 c0       	rjmp	.+48     	; 0xaa5e <update_level_helper+0xfa>
		{
			player->shared.direction = D_RIGHT;
    aa2e:	81 e0       	ldi	r24, 0x01	; 1
    aa30:	f3 01       	movw	r30, r6
    aa32:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    aa34:	70 e0       	ldi	r23, 0x00	; 0
    aa36:	80 e0       	ldi	r24, 0x00	; 0
    aa38:	90 e0       	ldi	r25, 0x00	; 0
    aa3a:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    aa3e:	25 e6       	ldi	r18, 0x65	; 101
    aa40:	38 e8       	ldi	r19, 0x88	; 136
    aa42:	48 e8       	ldi	r20, 0x88	; 136
    aa44:	5c e3       	ldi	r21, 0x3C	; 60
    aa46:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    aa4a:	9b 01       	movw	r18, r22
    aa4c:	ac 01       	movw	r20, r24
    aa4e:	f3 01       	movw	r30, r6
    aa50:	62 81       	ldd	r22, Z+2	; 0x02
    aa52:	73 81       	ldd	r23, Z+3	; 0x03
    aa54:	84 81       	ldd	r24, Z+4	; 0x04
    aa56:	95 81       	ldd	r25, Z+5	; 0x05
    aa58:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    aa5c:	38 c0       	rjmp	.+112    	; 0xaace <update_level_helper+0x16a>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    aa5e:	85 ff       	sbrs	r24, 5
    aa60:	1d c0       	rjmp	.+58     	; 0xaa9c <update_level_helper+0x138>
		{
			player->shared.direction = D_DOWN;
    aa62:	82 e0       	ldi	r24, 0x02	; 2
    aa64:	f3 01       	movw	r30, r6
    aa66:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    aa68:	70 e0       	ldi	r23, 0x00	; 0
    aa6a:	80 e0       	ldi	r24, 0x00	; 0
    aa6c:	90 e0       	ldi	r25, 0x00	; 0
    aa6e:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    aa72:	25 e6       	ldi	r18, 0x65	; 101
    aa74:	38 e8       	ldi	r19, 0x88	; 136
    aa76:	48 e8       	ldi	r20, 0x88	; 136
    aa78:	5c e3       	ldi	r21, 0x3C	; 60
    aa7a:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    aa7e:	9b 01       	movw	r18, r22
    aa80:	ac 01       	movw	r20, r24
    aa82:	f3 01       	movw	r30, r6
    aa84:	66 81       	ldd	r22, Z+6	; 0x06
    aa86:	77 81       	ldd	r23, Z+7	; 0x07
    aa88:	80 85       	ldd	r24, Z+8	; 0x08
    aa8a:	91 85       	ldd	r25, Z+9	; 0x09
    aa8c:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    aa90:	f3 01       	movw	r30, r6
    aa92:	66 83       	std	Z+6, r22	; 0x06
    aa94:	77 83       	std	Z+7, r23	; 0x07
    aa96:	80 87       	std	Z+8, r24	; 0x08
    aa98:	91 87       	std	Z+9, r25	; 0x09
    aa9a:	21 c0       	rjmp	.+66     	; 0xaade <update_level_helper+0x17a>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    aa9c:	86 ff       	sbrs	r24, 6
    aa9e:	1d c0       	rjmp	.+58     	; 0xaada <update_level_helper+0x176>
		{
			player->shared.direction = D_LEFT;
    aaa0:	83 e0       	ldi	r24, 0x03	; 3
    aaa2:	f3 01       	movw	r30, r6
    aaa4:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    aaa6:	70 e0       	ldi	r23, 0x00	; 0
    aaa8:	80 e0       	ldi	r24, 0x00	; 0
    aaaa:	90 e0       	ldi	r25, 0x00	; 0
    aaac:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    aab0:	25 e6       	ldi	r18, 0x65	; 101
    aab2:	38 e8       	ldi	r19, 0x88	; 136
    aab4:	48 e8       	ldi	r20, 0x88	; 136
    aab6:	5c e3       	ldi	r21, 0x3C	; 60
    aab8:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    aabc:	9b 01       	movw	r18, r22
    aabe:	ac 01       	movw	r20, r24
    aac0:	f3 01       	movw	r30, r6
    aac2:	62 81       	ldd	r22, Z+2	; 0x02
    aac4:	73 81       	ldd	r23, Z+3	; 0x03
    aac6:	84 81       	ldd	r24, Z+4	; 0x04
    aac8:	95 81       	ldd	r25, Z+5	; 0x05
    aaca:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    aace:	f3 01       	movw	r30, r6
    aad0:	62 83       	std	Z+2, r22	; 0x02
    aad2:	73 83       	std	Z+3, r23	; 0x03
    aad4:	84 83       	std	Z+4, r24	; 0x04
    aad6:	95 83       	std	Z+5, r25	; 0x05
    aad8:	02 c0       	rjmp	.+4      	; 0xaade <update_level_helper+0x17a>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    aada:	f3 01       	movw	r30, r6
    aadc:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    aade:	f7 01       	movw	r30, r14
    aae0:	80 81       	ld	r24, Z
    aae2:	91 81       	ldd	r25, Z+1	; 0x01
    aae4:	93 01       	movw	r18, r6
    aae6:	2a 5d       	subi	r18, 0xDA	; 218
    aae8:	3f 4f       	sbci	r19, 0xFF	; 255
    aaea:	79 01       	movw	r14, r18
    aaec:	90 ff       	sbrs	r25, 0
    aaee:	36 c0       	rjmp	.+108    	; 0xab5c <update_level_helper+0x1f8>
    aaf0:	f3 01       	movw	r30, r6
    aaf2:	80 89       	ldd	r24, Z+16	; 0x10
    aaf4:	81 11       	cpse	r24, r1
    aaf6:	32 c0       	rjmp	.+100    	; 0xab5c <update_level_helper+0x1f8>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    aaf8:	83 a9       	ldd	r24, Z+51	; 0x33
    aafa:	81 11       	cpse	r24, r1
    aafc:	2f c0       	rjmp	.+94     	; 0xab5c <update_level_helper+0x1f8>
				{
					if (player->has_rocket)
    aafe:	80 8d       	ldd	r24, Z+24	; 0x18
    ab00:	88 23       	and	r24, r24
    ab02:	61 f0       	breq	.+24     	; 0xab1c <update_level_helper+0x1b8>
					{
						init_shot_state(shot, ROCKET_SHOT);
    ab04:	61 e0       	ldi	r22, 0x01	; 1
    ab06:	c9 01       	movw	r24, r18
    ab08:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    ab0c:	61 e0       	ldi	r22, 0x01	; 1
    ab0e:	c7 01       	movw	r24, r14
    ab10:	0e 94 b4 48 	call	0x9168	; 0x9168 <set_shot_animations>
						SFX_ROCKET;
    ab14:	2f ef       	ldi	r18, 0xFF	; 255
    ab16:	47 e1       	ldi	r20, 0x17	; 23
    ab18:	68 e0       	ldi	r22, 0x08	; 8
    ab1a:	0b c0       	rjmp	.+22     	; 0xab32 <update_level_helper+0x1ce>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    ab1c:	60 e0       	ldi	r22, 0x00	; 0
    ab1e:	c9 01       	movw	r24, r18
    ab20:	0e 94 98 48 	call	0x9130	; 0x9130 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    ab24:	60 e0       	ldi	r22, 0x00	; 0
    ab26:	c7 01       	movw	r24, r14
    ab28:	0e 94 b4 48 	call	0x9168	; 0x9168 <set_shot_animations>
						SFX_CANNONBALL;
    ab2c:	2f ef       	ldi	r18, 0xFF	; 255
    ab2e:	47 e1       	ldi	r20, 0x17	; 23
    ab30:	62 e0       	ldi	r22, 0x02	; 2
    ab32:	84 e0       	ldi	r24, 0x04	; 4
    ab34:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
					}
					player->active_shots++;
    ab38:	f3 01       	movw	r30, r6
    ab3a:	80 89       	ldd	r24, Z+16	; 0x10
    ab3c:	8f 5f       	subi	r24, 0xFF	; 255
    ab3e:	80 8b       	std	Z+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    ab40:	80 81       	ld	r24, Z
    ab42:	86 a3       	std	Z+38, r24	; 0x26
					position_shot(player, shot);
    ab44:	b7 01       	movw	r22, r14
    ab46:	c3 01       	movw	r24, r6
    ab48:	0e 94 11 4a 	call	0x9422	; 0x9422 <position_shot>
					shot->active = 1;
    ab4c:	81 e0       	ldi	r24, 0x01	; 1
    ab4e:	f3 01       	movw	r30, r6
    ab50:	83 ab       	std	Z+51, r24	; 0x33
					if (player->has_over_speed)
    ab52:	81 8d       	ldd	r24, Z+25	; 0x19
    ab54:	88 23       	and	r24, r24
    ab56:	11 f0       	breq	.+4      	; 0xab5c <update_level_helper+0x1f8>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    ab58:	8a ea       	ldi	r24, 0xAA	; 170
    ab5a:	87 a3       	std	Z+39, r24	; 0x27

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    ab5c:	f3 01       	movw	r30, r6
    ab5e:	83 a9       	ldd	r24, Z+51	; 0x33
    ab60:	88 23       	and	r24, r24
    ab62:	09 f4       	brne	.+2      	; 0xab66 <update_level_helper+0x202>
    ab64:	a8 c0       	rjmp	.+336    	; 0xacb6 <update_level_helper+0x352>
			{
				switch (shot->shared.direction)
    ab66:	86 a1       	ldd	r24, Z+38	; 0x26
    ab68:	81 30       	cpi	r24, 0x01	; 1
    ab6a:	a9 f1       	breq	.+106    	; 0xabd6 <update_level_helper+0x272>
    ab6c:	e8 f0       	brcs	.+58     	; 0xaba8 <update_level_helper+0x244>
    ab6e:	82 30       	cpi	r24, 0x02	; 2
    ab70:	09 f4       	brne	.+2      	; 0xab74 <update_level_helper+0x210>
    ab72:	48 c0       	rjmp	.+144    	; 0xac04 <update_level_helper+0x2a0>
    ab74:	83 30       	cpi	r24, 0x03	; 3
    ab76:	09 f0       	breq	.+2      	; 0xab7a <update_level_helper+0x216>
    ab78:	66 c0       	rjmp	.+204    	; 0xac46 <update_level_helper+0x2e2>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    ab7a:	f3 01       	movw	r30, r6
    ab7c:	67 a1       	ldd	r22, Z+39	; 0x27
    ab7e:	70 e0       	ldi	r23, 0x00	; 0
    ab80:	80 e0       	ldi	r24, 0x00	; 0
    ab82:	90 e0       	ldi	r25, 0x00	; 0
    ab84:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    ab88:	25 e6       	ldi	r18, 0x65	; 101
    ab8a:	38 e8       	ldi	r19, 0x88	; 136
    ab8c:	48 e8       	ldi	r20, 0x88	; 136
    ab8e:	5c e3       	ldi	r21, 0x3C	; 60
    ab90:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    ab94:	9b 01       	movw	r18, r22
    ab96:	ac 01       	movw	r20, r24
    ab98:	f3 01       	movw	r30, r6
    ab9a:	60 a5       	ldd	r22, Z+40	; 0x28
    ab9c:	71 a5       	ldd	r23, Z+41	; 0x29
    ab9e:	82 a5       	ldd	r24, Z+42	; 0x2a
    aba0:	93 a5       	ldd	r25, Z+43	; 0x2b
    aba2:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    aba6:	4a c0       	rjmp	.+148    	; 0xac3c <update_level_helper+0x2d8>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    aba8:	f3 01       	movw	r30, r6
    abaa:	67 a1       	ldd	r22, Z+39	; 0x27
    abac:	70 e0       	ldi	r23, 0x00	; 0
    abae:	80 e0       	ldi	r24, 0x00	; 0
    abb0:	90 e0       	ldi	r25, 0x00	; 0
    abb2:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    abb6:	25 e6       	ldi	r18, 0x65	; 101
    abb8:	38 e8       	ldi	r19, 0x88	; 136
    abba:	48 e8       	ldi	r20, 0x88	; 136
    abbc:	5c e3       	ldi	r21, 0x3C	; 60
    abbe:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    abc2:	9b 01       	movw	r18, r22
    abc4:	ac 01       	movw	r20, r24
    abc6:	f3 01       	movw	r30, r6
    abc8:	64 a5       	ldd	r22, Z+44	; 0x2c
    abca:	75 a5       	ldd	r23, Z+45	; 0x2d
    abcc:	86 a5       	ldd	r24, Z+46	; 0x2e
    abce:	97 a5       	ldd	r25, Z+47	; 0x2f
    abd0:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    abd4:	2d c0       	rjmp	.+90     	; 0xac30 <update_level_helper+0x2cc>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    abd6:	f3 01       	movw	r30, r6
    abd8:	67 a1       	ldd	r22, Z+39	; 0x27
    abda:	70 e0       	ldi	r23, 0x00	; 0
    abdc:	80 e0       	ldi	r24, 0x00	; 0
    abde:	90 e0       	ldi	r25, 0x00	; 0
    abe0:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    abe4:	25 e6       	ldi	r18, 0x65	; 101
    abe6:	38 e8       	ldi	r19, 0x88	; 136
    abe8:	48 e8       	ldi	r20, 0x88	; 136
    abea:	5c e3       	ldi	r21, 0x3C	; 60
    abec:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    abf0:	9b 01       	movw	r18, r22
    abf2:	ac 01       	movw	r20, r24
    abf4:	f3 01       	movw	r30, r6
    abf6:	60 a5       	ldd	r22, Z+40	; 0x28
    abf8:	71 a5       	ldd	r23, Z+41	; 0x29
    abfa:	82 a5       	ldd	r24, Z+42	; 0x2a
    abfc:	93 a5       	ldd	r25, Z+43	; 0x2b
    abfe:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    ac02:	1c c0       	rjmp	.+56     	; 0xac3c <update_level_helper+0x2d8>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    ac04:	f3 01       	movw	r30, r6
    ac06:	67 a1       	ldd	r22, Z+39	; 0x27
    ac08:	70 e0       	ldi	r23, 0x00	; 0
    ac0a:	80 e0       	ldi	r24, 0x00	; 0
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    ac12:	25 e6       	ldi	r18, 0x65	; 101
    ac14:	38 e8       	ldi	r19, 0x88	; 136
    ac16:	48 e8       	ldi	r20, 0x88	; 136
    ac18:	5c e3       	ldi	r21, 0x3C	; 60
    ac1a:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    ac1e:	9b 01       	movw	r18, r22
    ac20:	ac 01       	movw	r20, r24
    ac22:	f3 01       	movw	r30, r6
    ac24:	64 a5       	ldd	r22, Z+44	; 0x2c
    ac26:	75 a5       	ldd	r23, Z+45	; 0x2d
    ac28:	86 a5       	ldd	r24, Z+46	; 0x2e
    ac2a:	97 a5       	ldd	r25, Z+47	; 0x2f
    ac2c:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    ac30:	f3 01       	movw	r30, r6
    ac32:	64 a7       	std	Z+44, r22	; 0x2c
    ac34:	75 a7       	std	Z+45, r23	; 0x2d
    ac36:	86 a7       	std	Z+46, r24	; 0x2e
    ac38:	97 a7       	std	Z+47, r25	; 0x2f
    ac3a:	05 c0       	rjmp	.+10     	; 0xac46 <update_level_helper+0x2e2>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    ac3c:	f3 01       	movw	r30, r6
    ac3e:	60 a7       	std	Z+40, r22	; 0x28
    ac40:	71 a7       	std	Z+41, r23	; 0x29
    ac42:	82 a7       	std	Z+42, r24	; 0x2a
    ac44:	93 a7       	std	Z+43, r25	; 0x2b
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    ac46:	f3 01       	movw	r30, r6
    ac48:	d4 a8       	ldd	r13, Z+52	; 0x34
    ac4a:	6d 2d       	mov	r22, r13
    ac4c:	70 e0       	ldi	r23, 0x00	; 0
    ac4e:	80 e0       	ldi	r24, 0x00	; 0
    ac50:	90 e0       	ldi	r25, 0x00	; 0
    ac52:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    ac56:	4b 01       	movw	r8, r22
    ac58:	5c 01       	movw	r10, r24
    ac5a:	f8 e0       	ldi	r31, 0x08	; 8
    ac5c:	fd 15       	cp	r31, r13
    ac5e:	88 f0       	brcs	.+34     	; 0xac82 <update_level_helper+0x31e>
    ac60:	f3 01       	movw	r30, r6
    ac62:	87 a1       	ldd	r24, Z+39	; 0x27
    ac64:	68 2f       	mov	r22, r24
    ac66:	70 e0       	ldi	r23, 0x00	; 0
    ac68:	80 e0       	ldi	r24, 0x00	; 0
    ac6a:	90 e0       	ldi	r25, 0x00	; 0
    ac6c:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <__floatsisf>
    ac70:	25 e6       	ldi	r18, 0x65	; 101
    ac72:	38 e8       	ldi	r19, 0x88	; 136
    ac74:	48 e8       	ldi	r20, 0x88	; 136
    ac76:	5c e3       	ldi	r21, 0x3C	; 60
    ac78:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    ac7c:	9b 01       	movw	r18, r22
    ac7e:	ac 01       	movw	r20, r24
    ac80:	03 c0       	rjmp	.+6      	; 0xac88 <update_level_helper+0x324>
    ac82:	20 e0       	ldi	r18, 0x00	; 0
    ac84:	30 e0       	ldi	r19, 0x00	; 0
    ac86:	a9 01       	movw	r20, r18
    ac88:	c5 01       	movw	r24, r10
    ac8a:	b4 01       	movw	r22, r8
    ac8c:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <__addsf3>
    ac90:	0e 94 3f 5e 	call	0xbc7e	; 0xbc7e <__fixunssfsi>
    ac94:	f3 01       	movw	r30, r6
    ac96:	64 ab       	std	Z+52, r22	; 0x34
				collision_detect_shot(player, shot);
    ac98:	b7 01       	movw	r22, r14
    ac9a:	c3 01       	movw	r24, r6
    ac9c:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <collision_detect_shot>
    aca0:	0a c0       	rjmp	.+20     	; 0xacb6 <update_level_helper+0x352>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    aca2:	91 ff       	sbrs	r25, 1
    aca4:	08 c0       	rjmp	.+16     	; 0xacb6 <update_level_helper+0x352>
		{
			SFX_NAVIGATE;
    aca6:	2f ef       	ldi	r18, 0xFF	; 255
    aca8:	47 e1       	ldi	r20, 0x17	; 23
    acaa:	67 e0       	ldi	r22, 0x07	; 7
    acac:	84 e0       	ldi	r24, 0x04	; 4
    acae:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
			exit_game();
    acb2:	0e 94 a7 54 	call	0xa94e	; 0xa94e <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    acb6:	f3 01       	movw	r30, r6
    acb8:	87 85       	ldd	r24, Z+15	; 0x0f
    acba:	8a 30       	cpi	r24, 0x0A	; 10
    acbc:	08 f4       	brcc	.+2      	; 0xacc0 <update_level_helper+0x35c>
    acbe:	5c c0       	rjmp	.+184    	; 0xad78 <update_level_helper+0x414>
    acc0:	f8 01       	movw	r30, r16
    acc2:	83 89       	ldd	r24, Z+19	; 0x13
    acc4:	80 fd       	sbrc	r24, 0
    acc6:	58 c0       	rjmp	.+176    	; 0xad78 <update_level_helper+0x414>
	{
	    next_level = game.current_level + 1;
    acc8:	30 91 09 0c 	lds	r19, 0x0C09
    accc:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    acce:	3a 30       	cpi	r19, 0x0A	; 10
    acd0:	30 f0       	brcs	.+12     	; 0xacde <update_level_helper+0x37a>
    acd2:	96 85       	ldd	r25, Z+14	; 0x0e
    acd4:	f3 01       	movw	r30, r6
    acd6:	86 85       	ldd	r24, Z+14	; 0x0e
    acd8:	98 17       	cp	r25, r24
    acda:	09 f4       	brne	.+2      	; 0xacde <update_level_helper+0x37a>
    acdc:	4d c0       	rjmp	.+154    	; 0xad78 <update_level_helper+0x414>

		load_level_tiles(true);
    acde:	81 e0       	ldi	r24, 0x01	; 1
    ace0:	39 83       	std	Y+1, r19	; 0x01
    ace2:	0e 94 87 52 	call	0xa50e	; 0xa50e <load_level_tiles>
		SetSpriteVisibility(false);
    ace6:	80 e0       	ldi	r24, 0x00	; 0
    ace8:	0e 94 11 44 	call	0x8822	; 0x8822 <SetSpriteVisibility>
		print_level_score(player, other_player);
    acec:	b8 01       	movw	r22, r16
    acee:	c3 01       	movw	r24, r6
    acf0:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    acf4:	82 e0       	ldi	r24, 0x02	; 2
    acf6:	0e 94 4e 48 	call	0x909c	; 0x909c <LBWaitSeconds>
		player->level_score = 0;
    acfa:	f3 01       	movw	r30, r6
    acfc:	17 86       	std	Z+15, r1	; 0x0f
		other_player->level_score = 0;
    acfe:	f8 01       	movw	r30, r16
    ad00:	17 86       	std	Z+15, r1	; 0x0f
		SFX_LEVEL_CLEAR;
    ad02:	2f ef       	ldi	r18, 0xFF	; 255
    ad04:	47 e1       	ldi	r20, 0x17	; 23
    ad06:	64 e0       	ldi	r22, 0x04	; 4
    ad08:	84 e0       	ldi	r24, 0x04	; 4
    ad0a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    ad0e:	39 81       	ldd	r19, Y+1	; 0x01
    ad10:	3a 30       	cpi	r19, 0x0A	; 10
    ad12:	08 f1       	brcs	.+66     	; 0xad56 <update_level_helper+0x3f2>
		{
		    if (other_player->score > player->score)
    ad14:	f8 01       	movw	r30, r16
    ad16:	96 85       	ldd	r25, Z+14	; 0x0e
    ad18:	f3 01       	movw	r30, r6
    ad1a:	86 85       	ldd	r24, Z+14	; 0x0e
    ad1c:	89 17       	cp	r24, r25
    ad1e:	20 f4       	brcc	.+8      	; 0xad28 <update_level_helper+0x3c4>
    ad20:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    ad22:	38 01       	movw	r6, r16
		        other_player = tmp;
    ad24:	0e 2f       	mov	r16, r30
    ad26:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    ad28:	b8 01       	movw	r22, r16
    ad2a:	c3 01       	movw	r24, r6
    ad2c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    ad30:	82 e0       	ldi	r24, 0x02	; 2
    ad32:	0e 94 4e 48 	call	0x909c	; 0x909c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    ad36:	0f 90       	pop	r0
    ad38:	df 91       	pop	r29
    ad3a:	cf 91       	pop	r28
    ad3c:	1f 91       	pop	r17
    ad3e:	0f 91       	pop	r16
    ad40:	ff 90       	pop	r15
    ad42:	ef 90       	pop	r14
    ad44:	df 90       	pop	r13
    ad46:	bf 90       	pop	r11
    ad48:	af 90       	pop	r10
    ad4a:	9f 90       	pop	r9
    ad4c:	8f 90       	pop	r8
    ad4e:	7f 90       	pop	r7
    ad50:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    ad52:	0c 94 a7 54 	jmp	0xa94e	; 0xa94e <exit_game>
		}
		else
		{
			level_transition(next_level);
    ad56:	83 2f       	mov	r24, r19
		}
	}
}
    ad58:	0f 90       	pop	r0
    ad5a:	df 91       	pop	r29
    ad5c:	cf 91       	pop	r28
    ad5e:	1f 91       	pop	r17
    ad60:	0f 91       	pop	r16
    ad62:	ff 90       	pop	r15
    ad64:	ef 90       	pop	r14
    ad66:	df 90       	pop	r13
    ad68:	bf 90       	pop	r11
    ad6a:	af 90       	pop	r10
    ad6c:	9f 90       	pop	r9
    ad6e:	8f 90       	pop	r8
    ad70:	7f 90       	pop	r7
    ad72:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    ad74:	0c 94 9c 53 	jmp	0xa738	; 0xa738 <level_transition>
		}
	}
}
    ad78:	0f 90       	pop	r0
    ad7a:	df 91       	pop	r29
    ad7c:	cf 91       	pop	r28
    ad7e:	1f 91       	pop	r17
    ad80:	0f 91       	pop	r16
    ad82:	ff 90       	pop	r15
    ad84:	ef 90       	pop	r14
    ad86:	df 90       	pop	r13
    ad88:	bf 90       	pop	r11
    ad8a:	af 90       	pop	r10
    ad8c:	9f 90       	pop	r9
    ad8e:	8f 90       	pop	r8
    ad90:	7f 90       	pop	r7
    ad92:	6f 90       	pop	r6
    ad94:	08 95       	ret

0000ad96 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    ad96:	cf 92       	push	r12
    ad98:	df 92       	push	r13
    ad9a:	ef 92       	push	r14
    ad9c:	ff 92       	push	r15
    ad9e:	1f 93       	push	r17
    ada0:	cf 93       	push	r28
    ada2:	df 93       	push	r29
    ada4:	6c 01       	movw	r12, r24
    ada6:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    ada8:	80 91 0a 0c 	lds	r24, 0x0C0A
    adac:	88 23       	and	r24, r24
    adae:	d1 f0       	breq	.+52     	; 0xade4 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    adb0:	80 e0       	ldi	r24, 0x00	; 0
    adb2:	0e 94 11 44 	call	0x8822	; 0x8822 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    adb6:	45 e9       	ldi	r20, 0x95	; 149
    adb8:	51 e2       	ldi	r21, 0x21	; 33
    adba:	6c e0       	ldi	r22, 0x0C	; 12
    adbc:	88 e0       	ldi	r24, 0x08	; 8
    adbe:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <DrawMap2>
		Print(12, 13, &strMap[strPaused]);
    adc2:	4c ea       	ldi	r20, 0xAC	; 172
    adc4:	52 e0       	ldi	r21, 0x02	; 2
    adc6:	6d e0       	ldi	r22, 0x0D	; 13
    adc8:	70 e0       	ldi	r23, 0x00	; 0
    adca:	8c e0       	ldi	r24, 0x0C	; 12
    adcc:	90 e0       	ldi	r25, 0x00	; 0
    adce:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
		Print(11, 14, &strMap[strExit]);
    add2:	43 ea       	ldi	r20, 0xA3	; 163
    add4:	52 e0       	ldi	r21, 0x02	; 2
    add6:	6e e0       	ldi	r22, 0x0E	; 14
    add8:	70 e0       	ldi	r23, 0x00	; 0
    adda:	8b e0       	ldi	r24, 0x0B	; 11
    addc:	90 e0       	ldi	r25, 0x00	; 0
    adde:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    ade2:	44 c0       	rjmp	.+136    	; 0xae6c <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    ade4:	81 e0       	ldi	r24, 0x01	; 1
    ade6:	0e 94 11 44 	call	0x8822	; 0x8822 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    adea:	60 e0       	ldi	r22, 0x00	; 0
    adec:	85 e2       	ldi	r24, 0x25	; 37
    adee:	9c e0       	ldi	r25, 0x0C	; 12
    adf0:	0e 94 05 4c 	call	0x980a	; 0x980a <tank_map>
    adf4:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    adf6:	68 2f       	mov	r22, r24
    adf8:	82 e8       	ldi	r24, 0x82	; 130
    adfa:	9f e0       	ldi	r25, 0x0F	; 15
    adfc:	0e 94 05 4c 	call	0x980a	; 0x980a <tank_map>
    ae00:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    ae02:	68 2f       	mov	r22, r24
    ae04:	85 e2       	ldi	r24, 0x25	; 37
    ae06:	9c e0       	ldi	r25, 0x0C	; 12
    ae08:	0e 94 87 4c 	call	0x990e	; 0x990e <shot_map>
    ae0c:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    ae0e:	68 2f       	mov	r22, r24
    ae10:	82 e8       	ldi	r24, 0x82	; 130
    ae12:	9f e0       	ldi	r25, 0x0F	; 15
    ae14:	0e 94 87 4c 	call	0x990e	; 0x990e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    ae18:	40 91 02 01 	lds	r20, 0x0102
    ae1c:	6f e0       	ldi	r22, 0x0F	; 15
    ae1e:	85 e2       	ldi	r24, 0x25	; 37
    ae20:	9c e0       	ldi	r25, 0x0C	; 12
    ae22:	0e 94 43 4b 	call	0x9686	; 0x9686 <render_banter>
    ae26:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    ae2a:	40 91 01 01 	lds	r20, 0x0101
    ae2e:	60 e0       	ldi	r22, 0x00	; 0
    ae30:	82 e8       	ldi	r24, 0x82	; 130
    ae32:	9f e0       	ldi	r25, 0x0F	; 15
    ae34:	0e 94 43 4b 	call	0x9686	; 0x9686 <render_banter>
    ae38:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    ae3c:	60 e0       	ldi	r22, 0x00	; 0
    ae3e:	85 e2       	ldi	r24, 0x25	; 37
    ae40:	9c e0       	ldi	r25, 0x0C	; 12
    ae42:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <render_player>
		render_player(&player2, p2_index);
    ae46:	61 2f       	mov	r22, r17
    ae48:	82 e8       	ldi	r24, 0x82	; 130
    ae4a:	9f e0       	ldi	r25, 0x0F	; 15
    ae4c:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <render_player>
		render_shot(&player1, p1_shot_index);
    ae50:	6d 2f       	mov	r22, r29
    ae52:	85 e2       	ldi	r24, 0x25	; 37
    ae54:	9c e0       	ldi	r25, 0x0C	; 12
    ae56:	0e 94 94 4b 	call	0x9728	; 0x9728 <render_shot>
		render_shot(&player2, p2_shot_index);
    ae5a:	6c 2f       	mov	r22, r28
    ae5c:	82 e8       	ldi	r24, 0x82	; 130
    ae5e:	9f e0       	ldi	r25, 0x0F	; 15
    ae60:	0e 94 94 4b 	call	0x9728	; 0x9728 <render_shot>
		render_tile_explosions(&tile_animations);
    ae64:	8c e0       	ldi	r24, 0x0C	; 12
    ae66:	9c e0       	ldi	r25, 0x0C	; 12
    ae68:	0e 94 c0 4b 	call	0x9780	; 0x9780 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    ae6c:	2f e0       	ldi	r18, 0x0F	; 15
    ae6e:	42 e8       	ldi	r20, 0x82	; 130
    ae70:	5f e0       	ldi	r21, 0x0F	; 15
    ae72:	65 e2       	ldi	r22, 0x25	; 37
    ae74:	7c e0       	ldi	r23, 0x0C	; 12
    ae76:	c6 01       	movw	r24, r12
    ae78:	0e 94 b2 54 	call	0xa964	; 0xa964 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    ae7c:	20 e0       	ldi	r18, 0x00	; 0
    ae7e:	45 e2       	ldi	r20, 0x25	; 37
    ae80:	5c e0       	ldi	r21, 0x0C	; 12
    ae82:	62 e8       	ldi	r22, 0x82	; 130
    ae84:	7f e0       	ldi	r23, 0x0F	; 15
    ae86:	c7 01       	movw	r24, r14
    ae88:	0e 94 b2 54 	call	0xa964	; 0xa964 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    ae8c:	2f e0       	ldi	r18, 0x0F	; 15
    ae8e:	40 e0       	ldi	r20, 0x00	; 0
    ae90:	62 e8       	ldi	r22, 0x82	; 130
    ae92:	7f e0       	ldi	r23, 0x0F	; 15
    ae94:	85 e2       	ldi	r24, 0x25	; 37
    ae96:	9c e0       	ldi	r25, 0x0C	; 12
    ae98:	0e 94 4c 51 	call	0xa298	; 0xa298 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    ae9c:	20 e0       	ldi	r18, 0x00	; 0
    ae9e:	4f e0       	ldi	r20, 0x0F	; 15
    aea0:	65 e2       	ldi	r22, 0x25	; 37
    aea2:	7c e0       	ldi	r23, 0x0C	; 12
    aea4:	82 e8       	ldi	r24, 0x82	; 130
    aea6:	9f e0       	ldi	r25, 0x0F	; 15
    aea8:	0e 94 4c 51 	call	0xa298	; 0xa298 <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    aeac:	80 91 0b 0c 	lds	r24, 0x0C0B
    aeb0:	83 30       	cpi	r24, 0x03	; 3
    aeb2:	69 f4       	brne	.+26     	; 0xaece <update_level+0x138>
	{
		demo_counter++;
    aeb4:	80 91 32 0b 	lds	r24, 0x0B32
    aeb8:	90 91 33 0b 	lds	r25, 0x0B33
    aebc:	01 96       	adiw	r24, 0x01	; 1
    aebe:	90 93 33 0b 	sts	0x0B33, r25
    aec2:	80 93 32 0b 	sts	0x0B32, r24
		held = ReadJoypad(0);
    aec6:	80 e0       	ldi	r24, 0x00	; 0
    aec8:	0e 94 03 38 	call	0x7006	; 0x7006 <ReadJoypad>
    aecc:	02 c0       	rjmp	.+4      	; 0xaed2 <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    aece:	80 e0       	ldi	r24, 0x00	; 0
    aed0:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    aed2:	20 91 0b 0c 	lds	r18, 0x0C0B
    aed6:	23 30       	cpi	r18, 0x03	; 3
    aed8:	e1 f4       	brne	.+56     	; 0xaf12 <update_level+0x17c>
    aeda:	8f 70       	andi	r24, 0x0F	; 15
    aedc:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    aede:	89 2b       	or	r24, r25
    aee0:	39 f4       	brne	.+14     	; 0xaef0 <update_level+0x15a>
		 (held & BTN_B)) ||
    aee2:	80 91 32 0b 	lds	r24, 0x0B32
    aee6:	90 91 33 0b 	lds	r25, 0x0B33
    aeea:	88 30       	cpi	r24, 0x08	; 8
    aeec:	97 40       	sbci	r25, 0x07	; 7
    aeee:	88 f0       	brcs	.+34     	; 0xaf12 <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    aef0:	10 92 33 0b 	sts	0x0B33, r1
    aef4:	10 92 32 0b 	sts	0x0B32, r1
		fade_through();
    aef8:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		init_game_state();
    aefc:	0e 94 4d 49 	call	0x929a	; 0x929a <init_game_state>
		load_splash();
	}
}
    af00:	df 91       	pop	r29
    af02:	cf 91       	pop	r28
    af04:	1f 91       	pop	r17
    af06:	ff 90       	pop	r15
    af08:	ef 90       	pop	r14
    af0a:	df 90       	pop	r13
    af0c:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    af0e:	0c 94 cc 53 	jmp	0xa798	; 0xa798 <load_splash>
	}
}
    af12:	df 91       	pop	r29
    af14:	cf 91       	pop	r28
    af16:	1f 91       	pop	r17
    af18:	ff 90       	pop	r15
    af1a:	ef 90       	pop	r14
    af1c:	df 90       	pop	r13
    af1e:	cf 90       	pop	r12
    af20:	08 95       	ret

0000af22 <update_tank_rank>:
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    af22:	cf 93       	push	r28
    af24:	df 93       	push	r29
    af26:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    af28:	88 81       	ld	r24, Y
    af2a:	99 81       	ldd	r25, Y+1	; 0x01
    af2c:	91 ff       	sbrs	r25, 1
    af2e:	0a c0       	rjmp	.+20     	; 0xaf44 <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    af30:	2f ef       	ldi	r18, 0xFF	; 255
    af32:	47 e1       	ldi	r20, 0x17	; 23
    af34:	67 e0       	ldi	r22, 0x07	; 7
    af36:	84 e0       	ldi	r24, 0x04	; 4
    af38:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		fade_through();
    af3c:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		load_splash();
    af40:	0e 94 cc 53 	call	0xa798	; 0xa798 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    af44:	8c 81       	ldd	r24, Y+4	; 0x04
    af46:	9d 81       	ldd	r25, Y+5	; 0x05
    af48:	92 ff       	sbrs	r25, 2
    af4a:	1d c0       	rjmp	.+58     	; 0xaf86 <update_tank_rank+0x64>
    af4c:	8e 81       	ldd	r24, Y+6	; 0x06
    af4e:	8f 3f       	cpi	r24, 0xFF	; 255
    af50:	d1 f4       	brne	.+52     	; 0xaf86 <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    af52:	2f ef       	ldi	r18, 0xFF	; 255
    af54:	47 e1       	ldi	r20, 0x17	; 23
    af56:	67 e0       	ldi	r22, 0x07	; 7
    af58:	84 e0       	ldi	r24, 0x04	; 4
    af5a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
	    init_scores(&scores);
    af5e:	81 ec       	ldi	r24, 0xC1	; 193
    af60:	9b e0       	ldi	r25, 0x0B	; 11
    af62:	0e 94 5d 48 	call	0x90ba	; 0x90ba <init_scores>
	    init_handles(&handles);
    af66:	88 ee       	ldi	r24, 0xE8	; 232
    af68:	9b e0       	ldi	r25, 0x0B	; 11
    af6a:	0e 94 69 48 	call	0x90d2	; 0x90d2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    af6e:	81 ec       	ldi	r24, 0xC1	; 193
    af70:	9b e0       	ldi	r25, 0x0B	; 11
    af72:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <EepromWriteBlock>
    af76:	88 ee       	ldi	r24, 0xE8	; 232
    af78:	9b e0       	ldi	r25, 0x0B	; 11
    af7a:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    af7e:	df 91       	pop	r29
    af80:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    af82:	0c 94 02 54 	jmp	0xa804	; 0xa804 <load_tank_rank>
	}
}
    af86:	df 91       	pop	r29
    af88:	cf 91       	pop	r28
    af8a:	08 95       	ret

0000af8c <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    af8c:	0f 93       	push	r16
    af8e:	1f 93       	push	r17
    af90:	cf 93       	push	r28
    af92:	df 93       	push	r29
    af94:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    af96:	fb 01       	movw	r30, r22
    af98:	20 81       	ld	r18, Z
    af9a:	31 81       	ldd	r19, Z+1	; 0x01
    af9c:	f9 01       	movw	r30, r18
    af9e:	e0 71       	andi	r30, 0x10	; 16
    afa0:	ff 27       	eor	r31, r31
    afa2:	24 ff       	sbrs	r18, 4
    afa4:	09 c0       	rjmp	.+18     	; 0xafb8 <_handle_select_helper+0x2c>
    afa6:	8d 81       	ldd	r24, Y+5	; 0x05
    afa8:	81 11       	cpse	r24, r1
    afaa:	06 c0       	rjmp	.+12     	; 0xafb8 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    afac:	88 81       	ld	r24, Y
    afae:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    afb0:	87 ff       	sbrs	r24, 7
    afb2:	0f c0       	rjmp	.+30     	; 0xafd2 <_handle_select_helper+0x46>
    afb4:	18 82       	st	Y, r1
    afb6:	25 c0       	rjmp	.+74     	; 0xb002 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    afb8:	b9 01       	movw	r22, r18
    afba:	60 72       	andi	r22, 0x20	; 32
    afbc:	77 27       	eor	r23, r23
    afbe:	25 ff       	sbrs	r18, 5
    afc0:	0a c0       	rjmp	.+20     	; 0xafd6 <_handle_select_helper+0x4a>
    afc2:	8d 81       	ldd	r24, Y+5	; 0x05
    afc4:	81 11       	cpse	r24, r1
    afc6:	07 c0       	rjmp	.+14     	; 0xafd6 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    afc8:	88 81       	ld	r24, Y
    afca:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    afcc:	89 30       	cpi	r24, 0x09	; 9
    afce:	0c f0       	brlt	.+2      	; 0xafd2 <_handle_select_helper+0x46>
    afd0:	88 e0       	ldi	r24, 0x08	; 8
    afd2:	88 83       	st	Y, r24
    afd4:	16 c0       	rjmp	.+44     	; 0xb002 <_handle_select_helper+0x76>
    afd6:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    afd8:	a9 01       	movw	r20, r18
    afda:	44 27       	eor	r20, r20
    afdc:	51 70       	andi	r21, 0x01	; 1
    afde:	30 ff       	sbrs	r19, 0
    afe0:	1a c0       	rjmp	.+52     	; 0xb016 <_handle_select_helper+0x8a>
    afe2:	ad 81       	ldd	r26, Y+5	; 0x05
    afe4:	a1 11       	cpse	r26, r1
    afe6:	17 c0       	rjmp	.+46     	; 0xb016 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    afe8:	81 e0       	ldi	r24, 0x01	; 1
    afea:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    afec:	69 91       	ld	r22, Y+
    afee:	f3 e0       	ldi	r31, 0x03	; 3
    aff0:	6f 02       	muls	r22, r31
    aff2:	b0 01       	movw	r22, r0
    aff4:	11 24       	eor	r1, r1
    aff6:	66 51       	subi	r22, 0x16	; 22
    aff8:	74 4f       	sbci	r23, 0xF4	; 244
    affa:	43 e0       	ldi	r20, 0x03	; 3
    affc:	ce 01       	movw	r24, r28
    affe:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		SFX_NAVIGATE;
    b002:	2f ef       	ldi	r18, 0xFF	; 255
    b004:	47 e1       	ldi	r20, 0x17	; 23
    b006:	67 e0       	ldi	r22, 0x07	; 7
    b008:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    b00a:	df 91       	pop	r29
    b00c:	cf 91       	pop	r28
    b00e:	1f 91       	pop	r17
    b010:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    b012:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    b016:	27 ff       	sbrs	r18, 7
    b018:	09 c0       	rjmp	.+18     	; 0xb02c <_handle_select_helper+0xa0>
    b01a:	ad 81       	ldd	r26, Y+5	; 0x05
    b01c:	a1 30       	cpi	r26, 0x01	; 1
    b01e:	31 f4       	brne	.+12     	; 0xb02c <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    b020:	8c 81       	ldd	r24, Y+4	; 0x04
    b022:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    b024:	83 30       	cpi	r24, 0x03	; 3
    b026:	5c f0       	brlt	.+22     	; 0xb03e <_handle_select_helper+0xb2>
    b028:	82 e0       	ldi	r24, 0x02	; 2
    b02a:	09 c0       	rjmp	.+18     	; 0xb03e <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    b02c:	26 ff       	sbrs	r18, 6
    b02e:	0b c0       	rjmp	.+22     	; 0xb046 <_handle_select_helper+0xba>
    b030:	ed 81       	ldd	r30, Y+5	; 0x05
    b032:	e1 30       	cpi	r30, 0x01	; 1
    b034:	41 f5       	brne	.+80     	; 0xb086 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    b036:	8c 81       	ldd	r24, Y+4	; 0x04
    b038:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    b03a:	87 fd       	sbrc	r24, 7
    b03c:	02 c0       	rjmp	.+4      	; 0xb042 <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    b03e:	8c 83       	std	Y+4, r24	; 0x04
    b040:	e0 cf       	rjmp	.-64     	; 0xb002 <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    b042:	1c 82       	std	Y+4, r1	; 0x04
    b044:	de cf       	rjmp	.-68     	; 0xb002 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    b046:	ef 2b       	or	r30, r31
    b048:	69 f0       	breq	.+26     	; 0xb064 <_handle_select_helper+0xd8>
    b04a:	8d 81       	ldd	r24, Y+5	; 0x05
    b04c:	81 30       	cpi	r24, 0x01	; 1
    b04e:	09 f0       	breq	.+2      	; 0xb052 <_handle_select_helper+0xc6>
    b050:	43 c0       	rjmp	.+134    	; 0xb0d8 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    b052:	8c 81       	ldd	r24, Y+4	; 0x04
    b054:	c8 0f       	add	r28, r24
    b056:	d1 1d       	adc	r29, r1
    b058:	99 81       	ldd	r25, Y+1	; 0x01
    b05a:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    b05c:	91 34       	cpi	r25, 0x41	; 65
    b05e:	70 f4       	brcc	.+28     	; 0xb07c <_handle_select_helper+0xf0>
    b060:	81 e4       	ldi	r24, 0x41	; 65
    b062:	0f c0       	rjmp	.+30     	; 0xb082 <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b064:	67 2b       	or	r22, r23
    b066:	89 f0       	breq	.+34     	; 0xb08a <_handle_select_helper+0xfe>
    b068:	8d 81       	ldd	r24, Y+5	; 0x05
    b06a:	81 30       	cpi	r24, 0x01	; 1
    b06c:	a9 f5       	brne	.+106    	; 0xb0d8 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    b06e:	8c 81       	ldd	r24, Y+4	; 0x04
    b070:	c8 0f       	add	r28, r24
    b072:	d1 1d       	adc	r29, r1
    b074:	99 81       	ldd	r25, Y+1	; 0x01
    b076:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b078:	9b 35       	cpi	r25, 0x5B	; 91
    b07a:	10 f4       	brcc	.+4      	; 0xb080 <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    b07c:	99 83       	std	Y+1, r25	; 0x01
    b07e:	c1 cf       	rjmp	.-126    	; 0xb002 <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b080:	8a e5       	ldi	r24, 0x5A	; 90
    b082:	89 83       	std	Y+1, r24	; 0x01
    b084:	be cf       	rjmp	.-132    	; 0xb002 <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b086:	67 2b       	or	r22, r23
    b088:	39 f5       	brne	.+78     	; 0xb0d8 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    b08a:	45 2b       	or	r20, r21
    b08c:	29 f1       	breq	.+74     	; 0xb0d8 <_handle_select_helper+0x14c>
    b08e:	4d 81       	ldd	r20, Y+5	; 0x05
    b090:	41 30       	cpi	r20, 0x01	; 1
    b092:	11 f5       	brne	.+68     	; 0xb0d8 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    b094:	fe 01       	movw	r30, r28
    b096:	21 91       	ld	r18, Z+
    b098:	8f 01       	movw	r16, r30
    b09a:	fc 01       	movw	r30, r24
    b09c:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    b09e:	43 e0       	ldi	r20, 0x03	; 3
    b0a0:	b8 01       	movw	r22, r16
    b0a2:	0b 96       	adiw	r24, 0x0b	; 11
    b0a4:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    b0a8:	88 81       	ld	r24, Y
    b0aa:	f3 e0       	ldi	r31, 0x03	; 3
    b0ac:	8f 02       	muls	r24, r31
    b0ae:	c0 01       	movw	r24, r0
    b0b0:	11 24       	eor	r1, r1
    b0b2:	43 e0       	ldi	r20, 0x03	; 3
    b0b4:	b8 01       	movw	r22, r16
    b0b6:	86 51       	subi	r24, 0x16	; 22
    b0b8:	94 4f       	sbci	r25, 0xF4	; 244
    b0ba:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		SFX_NAVIGATE;
    b0be:	2f ef       	ldi	r18, 0xFF	; 255
    b0c0:	47 e1       	ldi	r20, 0x17	; 23
    b0c2:	67 e0       	ldi	r22, 0x07	; 7
    b0c4:	84 e0       	ldi	r24, 0x04	; 4
    b0c6:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b0ca:	88 ee       	ldi	r24, 0xE8	; 232
    b0cc:	9b e0       	ldi	r25, 0x0B	; 11
    b0ce:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    b0d2:	82 e0       	ldi	r24, 0x02	; 2
    b0d4:	8d 83       	std	Y+5, r24	; 0x05
    b0d6:	1a c0       	rjmp	.+52     	; 0xb10c <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    b0d8:	31 ff       	sbrs	r19, 1
    b0da:	18 c0       	rjmp	.+48     	; 0xb10c <_handle_select_helper+0x180>
    b0dc:	8d 81       	ldd	r24, Y+5	; 0x05
    b0de:	81 30       	cpi	r24, 0x01	; 1
    b0e0:	11 f4       	brne	.+4      	; 0xb0e6 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    b0e2:	1d 82       	std	Y+5, r1	; 0x05
    b0e4:	8e cf       	rjmp	.-228    	; 0xb002 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    b0e6:	82 30       	cpi	r24, 0x02	; 2
    b0e8:	19 f4       	brne	.+6      	; 0xb0f0 <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    b0ea:	81 e0       	ldi	r24, 0x01	; 1
    b0ec:	8d 83       	std	Y+5, r24	; 0x05
    b0ee:	89 cf       	rjmp	.-238    	; 0xb002 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    b0f0:	2f ef       	ldi	r18, 0xFF	; 255
    b0f2:	47 e1       	ldi	r20, 0x17	; 23
    b0f4:	67 e0       	ldi	r22, 0x07	; 7
    b0f6:	84 e0       	ldi	r24, 0x04	; 4
    b0f8:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		fade_through();
    b0fc:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		load_splash();
	}
}
    b100:	df 91       	pop	r29
    b102:	cf 91       	pop	r28
    b104:	1f 91       	pop	r17
    b106:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    b108:	0c 94 cc 53 	jmp	0xa798	; 0xa798 <load_splash>
	}
}
    b10c:	df 91       	pop	r29
    b10e:	cf 91       	pop	r28
    b110:	1f 91       	pop	r17
    b112:	0f 91       	pop	r16
    b114:	08 95       	ret

0000b116 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b116:	af 92       	push	r10
    b118:	bf 92       	push	r11
    b11a:	df 92       	push	r13
    b11c:	ef 92       	push	r14
    b11e:	ff 92       	push	r15
    b120:	0f 93       	push	r16
    b122:	1f 93       	push	r17
    b124:	cf 93       	push	r28
    b126:	df 93       	push	r29
    b128:	00 d0       	rcall	.+0      	; 0xb12a <_handle_select_render_helper+0x14>
    b12a:	1f 92       	push	r1
    b12c:	cd b7       	in	r28, 0x3d	; 61
    b12e:	de b7       	in	r29, 0x3e	; 62
    b130:	7c 01       	movw	r14, r24
    b132:	14 2f       	mov	r17, r20
    b134:	d2 2e       	mov	r13, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b136:	80 e2       	ldi	r24, 0x20	; 32
    b138:	89 83       	std	Y+1, r24	; 0x01
    b13a:	8a 83       	std	Y+2, r24	; 0x02
    b13c:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b13e:	f7 01       	movw	r30, r14
    b140:	85 81       	ldd	r24, Z+5	; 0x05
    b142:	81 11       	cpse	r24, r1
    b144:	16 c0       	rjmp	.+44     	; 0xb172 <_handle_select_render_helper+0x5c>
	{
		MapSprite2(idx, map_ball, 0);
    b146:	40 e0       	ldi	r20, 0x00	; 0
    b148:	60 e2       	ldi	r22, 0x20	; 32
    b14a:	71 e2       	ldi	r23, 0x21	; 33
    b14c:	82 2f       	mov	r24, r18
    b14e:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b152:	f7 01       	movw	r30, r14
    b154:	40 81       	ld	r20, Z
    b156:	44 0f       	add	r20, r20
    b158:	44 0f       	add	r20, r20
    b15a:	44 0f       	add	r20, r20
    b15c:	40 5c       	subi	r20, 0xC0	; 192
    b15e:	01 e0       	ldi	r16, 0x01	; 1
    b160:	21 e0       	ldi	r18, 0x01	; 1
    b162:	61 2f       	mov	r22, r17
    b164:	66 0f       	add	r22, r22
    b166:	66 0f       	add	r22, r22
    b168:	66 0f       	add	r22, r22
    b16a:	8d 2d       	mov	r24, r13
    b16c:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
    b170:	49 c0       	rjmp	.+146    	; 0xb204 <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == EDITING)
    b172:	81 30       	cpi	r24, 0x01	; 1
    b174:	31 f5       	brne	.+76     	; 0xb1c2 <_handle_select_render_helper+0xac>
	{
		MapSprite2(idx, map_ball, 0);
    b176:	40 e0       	ldi	r20, 0x00	; 0
    b178:	60 e2       	ldi	r22, 0x20	; 32
    b17a:	71 e2       	ldi	r23, 0x21	; 33
    b17c:	82 2f       	mov	r24, r18
    b17e:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b182:	f7 01       	movw	r30, r14
    b184:	40 81       	ld	r20, Z
    b186:	44 0f       	add	r20, r20
    b188:	44 0f       	add	r20, r20
    b18a:	44 0f       	add	r20, r20
    b18c:	48 5c       	subi	r20, 0xC8	; 200
    b18e:	61 2f       	mov	r22, r17
    b190:	70 e0       	ldi	r23, 0x00	; 0
    b192:	6b 5f       	subi	r22, 0xFB	; 251
    b194:	7f 4f       	sbci	r23, 0xFF	; 255
    b196:	84 81       	ldd	r24, Z+4	; 0x04
    b198:	68 0f       	add	r22, r24
    b19a:	71 1d       	adc	r23, r1
    b19c:	87 fd       	sbrc	r24, 7
    b19e:	7a 95       	dec	r23
    b1a0:	66 0f       	add	r22, r22
    b1a2:	66 0f       	add	r22, r22
    b1a4:	66 0f       	add	r22, r22
    b1a6:	01 e0       	ldi	r16, 0x01	; 1
    b1a8:	21 e0       	ldi	r18, 0x01	; 1
    b1aa:	8d 2d       	mov	r24, r13
    b1ac:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    b1b0:	43 e0       	ldi	r20, 0x03	; 3
    b1b2:	b7 01       	movw	r22, r14
    b1b4:	6f 5f       	subi	r22, 0xFF	; 255
    b1b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b8:	ce 01       	movw	r24, r28
    b1ba:	01 96       	adiw	r24, 0x01	; 1
    b1bc:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
    b1c0:	21 c0       	rjmp	.+66     	; 0xb204 <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == CONFIRMED)
    b1c2:	82 30       	cpi	r24, 0x02	; 2
    b1c4:	f9 f4       	brne	.+62     	; 0xb204 <_handle_select_render_helper+0xee>
	{
		PrintChar(x_offset+6, 5, '(');
    b1c6:	a4 2e       	mov	r10, r20
    b1c8:	b1 2c       	mov	r11, r1
    b1ca:	48 e2       	ldi	r20, 0x28	; 40
    b1cc:	65 e0       	ldi	r22, 0x05	; 5
    b1ce:	70 e0       	ldi	r23, 0x00	; 0
    b1d0:	c5 01       	movw	r24, r10
    b1d2:	06 96       	adiw	r24, 0x06	; 6
    b1d4:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b1d8:	23 e0       	ldi	r18, 0x03	; 3
    b1da:	a7 01       	movw	r20, r14
    b1dc:	4f 5f       	subi	r20, 0xFF	; 255
    b1de:	5f 4f       	sbci	r21, 0xFF	; 255
    b1e0:	65 e0       	ldi	r22, 0x05	; 5
    b1e2:	87 e0       	ldi	r24, 0x07	; 7
    b1e4:	81 0f       	add	r24, r17
    b1e6:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b1ea:	49 e2       	ldi	r20, 0x29	; 41
    b1ec:	65 e0       	ldi	r22, 0x05	; 5
    b1ee:	70 e0       	ldi	r23, 0x00	; 0
    b1f0:	c5 01       	movw	r24, r10
    b1f2:	0a 96       	adiw	r24, 0x0a	; 10
    b1f4:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    b1f8:	40 e0       	ldi	r20, 0x00	; 0
    b1fa:	65 e6       	ldi	r22, 0x65	; 101
    b1fc:	71 e2       	ldi	r23, 0x21	; 33
    b1fe:	8d 2d       	mov	r24, r13
    b200:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b204:	f7 01       	movw	r30, r14
    b206:	60 81       	ld	r22, Z
    b208:	68 5f       	subi	r22, 0xF8	; 248
    b20a:	23 e0       	ldi	r18, 0x03	; 3
    b20c:	ae 01       	movw	r20, r28
    b20e:	4f 5f       	subi	r20, 0xFF	; 255
    b210:	5f 4f       	sbci	r21, 0xFF	; 255
    b212:	85 e0       	ldi	r24, 0x05	; 5
    b214:	81 0f       	add	r24, r17
    b216:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <LBPrintStr>
}
    b21a:	0f 90       	pop	r0
    b21c:	0f 90       	pop	r0
    b21e:	0f 90       	pop	r0
    b220:	df 91       	pop	r29
    b222:	cf 91       	pop	r28
    b224:	1f 91       	pop	r17
    b226:	0f 91       	pop	r16
    b228:	ff 90       	pop	r15
    b22a:	ef 90       	pop	r14
    b22c:	df 90       	pop	r13
    b22e:	bf 90       	pop	r11
    b230:	af 90       	pop	r10
    b232:	08 95       	ret

0000b234 <load_handle_select>:

void load_handle_select()
{
    b234:	8f 92       	push	r8
    b236:	9f 92       	push	r9
    b238:	af 92       	push	r10
    b23a:	bf 92       	push	r11
    b23c:	cf 92       	push	r12
    b23e:	df 92       	push	r13
    b240:	ef 92       	push	r14
    b242:	ff 92       	push	r15
    b244:	0f 93       	push	r16
    b246:	1f 93       	push	r17
    b248:	cf 93       	push	r28
    b24a:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b24c:	82 e0       	ldi	r24, 0x02	; 2
    b24e:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    b252:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    b256:	40 e0       	ldi	r20, 0x00	; 0
    b258:	6f e5       	ldi	r22, 0x5F	; 95
    b25a:	71 e2       	ldi	r23, 0x21	; 33
    b25c:	80 e0       	ldi	r24, 0x00	; 0
    b25e:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    b262:	40 e0       	ldi	r20, 0x00	; 0
    b264:	67 e4       	ldi	r22, 0x47	; 71
    b266:	71 e2       	ldi	r23, 0x21	; 33
    b268:	84 e0       	ldi	r24, 0x04	; 4
    b26a:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    b26e:	02 e0       	ldi	r16, 0x02	; 2
    b270:	22 e0       	ldi	r18, 0x02	; 2
    b272:	40 e2       	ldi	r20, 0x20	; 32
    b274:	68 e1       	ldi	r22, 0x18	; 24
    b276:	80 e0       	ldi	r24, 0x00	; 0
    b278:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    b27c:	22 e0       	ldi	r18, 0x02	; 2
    b27e:	40 e2       	ldi	r20, 0x20	; 32
    b280:	60 ea       	ldi	r22, 0xA0	; 160
    b282:	84 e0       	ldi	r24, 0x04	; 4
    b284:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
	Print(9, 1, &strMap[strHandlesTitle]);
    b288:	42 e7       	ldi	r20, 0x72	; 114
    b28a:	51 e0       	ldi	r21, 0x01	; 1
    b28c:	61 e0       	ldi	r22, 0x01	; 1
    b28e:	70 e0       	ldi	r23, 0x00	; 0
    b290:	89 e0       	ldi	r24, 0x09	; 9
    b292:	90 e0       	ldi	r25, 0x00	; 0
    b294:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(6, 5, &strMap[strPlayer1]);
    b298:	4c e8       	ldi	r20, 0x8C	; 140
    b29a:	51 e0       	ldi	r21, 0x01	; 1
    b29c:	65 e0       	ldi	r22, 0x05	; 5
    b29e:	70 e0       	ldi	r23, 0x00	; 0
    b2a0:	86 e0       	ldi	r24, 0x06	; 6
    b2a2:	90 e0       	ldi	r25, 0x00	; 0
    b2a4:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(23, 5, &strMap[strPlayer2]);
    b2a8:	4f e8       	ldi	r20, 0x8F	; 143
    b2aa:	51 e0       	ldi	r21, 0x01	; 1
    b2ac:	65 e0       	ldi	r22, 0x05	; 5
    b2ae:	70 e0       	ldi	r23, 0x00	; 0
    b2b0:	87 e1       	ldi	r24, 0x17	; 23
    b2b2:	90 e0       	ldi	r25, 0x00	; 0
    b2b4:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
    b2b8:	8a ee       	ldi	r24, 0xEA	; 234
    b2ba:	e8 2e       	mov	r14, r24
    b2bc:	8b e0       	ldi	r24, 0x0B	; 11
    b2be:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b2c0:	c0 e0       	ldi	r28, 0x00	; 0
    b2c2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b2c4:	93 e0       	ldi	r25, 0x03	; 3
    b2c6:	a9 2e       	mov	r10, r25
    b2c8:	b1 2c       	mov	r11, r1
    b2ca:	67 01       	movw	r12, r14
    b2cc:	ce 01       	movw	r24, r28
    b2ce:	b5 01       	movw	r22, r10
    b2d0:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <__divmodhi4>
    b2d4:	4c 01       	movw	r8, r24
    b2d6:	8b 01       	movw	r16, r22
    b2d8:	08 5f       	subi	r16, 0xF8	; 248
    b2da:	1f 4f       	sbci	r17, 0xFF	; 255
    b2dc:	f7 01       	movw	r30, r14
    b2de:	41 91       	ld	r20, Z+
    b2e0:	7f 01       	movw	r14, r30
    b2e2:	b8 01       	movw	r22, r16
    b2e4:	03 96       	adiw	r24, 0x03	; 3
    b2e6:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b2ea:	f6 01       	movw	r30, r12
    b2ec:	40 81       	ld	r20, Z
    b2ee:	b8 01       	movw	r22, r16
    b2f0:	c4 01       	movw	r24, r8
    b2f2:	44 96       	adiw	r24, 0x14	; 20
    b2f4:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, &strMap[strHandlesTitle]);
	Print(6, 5, &strMap[strPlayer1]);
	Print(23, 5, &strMap[strPlayer2]);
	for (int i = 0; i < 27; i += 1)
    b2f8:	21 96       	adiw	r28, 0x01	; 1
    b2fa:	cb 31       	cpi	r28, 0x1B	; 27
    b2fc:	d1 05       	cpc	r29, r1
    b2fe:	29 f7       	brne	.-54     	; 0xb2ca <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
    b300:	42 e9       	ldi	r20, 0x92	; 146
    b302:	51 e0       	ldi	r21, 0x01	; 1
    b304:	65 e1       	ldi	r22, 0x15	; 21
    b306:	70 e0       	ldi	r23, 0x00	; 0
    b308:	88 e0       	ldi	r24, 0x08	; 8
    b30a:	90 e0       	ldi	r25, 0x00	; 0
    b30c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(8, 22, &strMap[strConfirmHandle]);
    b310:	4d e9       	ldi	r20, 0x9D	; 157
    b312:	51 e0       	ldi	r21, 0x01	; 1
    b314:	66 e1       	ldi	r22, 0x16	; 22
    b316:	70 e0       	ldi	r23, 0x00	; 0
    b318:	88 e0       	ldi	r24, 0x08	; 8
    b31a:	90 e0       	ldi	r25, 0x00	; 0
    b31c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(8, 23, &strMap[strCancelHandle]);
    b320:	49 ea       	ldi	r20, 0xA9	; 169
    b322:	51 e0       	ldi	r21, 0x01	; 1
    b324:	67 e1       	ldi	r22, 0x17	; 23
    b326:	70 e0       	ldi	r23, 0x00	; 0
    b328:	88 e0       	ldi	r24, 0x08	; 8
    b32a:	90 e0       	ldi	r25, 0x00	; 0
    b32c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>
	Print(8, 24, &strMap[strChangeHandle]);
    b330:	4d ec       	ldi	r20, 0xCD	; 205
    b332:	51 e0       	ldi	r21, 0x01	; 1
    b334:	68 e1       	ldi	r22, 0x18	; 24
    b336:	70 e0       	ldi	r23, 0x00	; 0
    b338:	88 e0       	ldi	r24, 0x08	; 8
    b33a:	90 e0       	ldi	r25, 0x00	; 0
}
    b33c:	df 91       	pop	r29
    b33e:	cf 91       	pop	r28
    b340:	1f 91       	pop	r17
    b342:	0f 91       	pop	r16
    b344:	ff 90       	pop	r15
    b346:	ef 90       	pop	r14
    b348:	df 90       	pop	r13
    b34a:	cf 90       	pop	r12
    b34c:	bf 90       	pop	r11
    b34e:	af 90       	pop	r10
    b350:	9f 90       	pop	r9
    b352:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
	Print(8, 22, &strMap[strConfirmHandle]);
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
    b354:	0c 94 ea 45 	jmp	0x8bd4	; 0x8bd4 <Print>

0000b358 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b358:	0f 93       	push	r16
    b35a:	cf 93       	push	r28
    b35c:	df 93       	push	r29
    b35e:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    b360:	90 91 0b 0c 	lds	r25, 0x0C0B
    b364:	91 30       	cpi	r25, 0x01	; 1
    b366:	41 f0       	breq	.+16     	; 0xb378 <update_splash+0x20>
    b368:	92 30       	cpi	r25, 0x02	; 2
    b36a:	51 f0       	breq	.+20     	; 0xb380 <update_splash+0x28>
    b36c:	91 11       	cpse	r25, r1
    b36e:	0f c0       	rjmp	.+30     	; 0xb38e <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b370:	01 e0       	ldi	r16, 0x01	; 1
    b372:	21 e0       	ldi	r18, 0x01	; 1
    b374:	48 e6       	ldi	r20, 0x68	; 104
    b376:	07 c0       	rjmp	.+14     	; 0xb386 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b378:	01 e0       	ldi	r16, 0x01	; 1
    b37a:	21 e0       	ldi	r18, 0x01	; 1
    b37c:	40 e7       	ldi	r20, 0x70	; 112
    b37e:	03 c0       	rjmp	.+6      	; 0xb386 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b380:	01 e0       	ldi	r16, 0x01	; 1
    b382:	21 e0       	ldi	r18, 0x01	; 1
    b384:	48 e7       	ldi	r20, 0x78	; 120
    b386:	60 e3       	ldi	r22, 0x30	; 48
    b388:	80 e0       	ldi	r24, 0x00	; 0
    b38a:	0e 94 3a 45 	call	0x8a74	; 0x8a74 <MoveSprite>
			break;
	}
	Print(9, 21, &strMap[strSelectHandle]);
    b38e:	42 e9       	ldi	r20, 0x92	; 146
    b390:	51 e0       	ldi	r21, 0x01	; 1
    b392:	65 e1       	ldi	r22, 0x15	; 21
    b394:	70 e0       	ldi	r23, 0x00	; 0
    b396:	89 e0       	ldi	r24, 0x09	; 9
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    b39e:	88 81       	ld	r24, Y
    b3a0:	99 81       	ldd	r25, Y+1	; 0x01
    b3a2:	00 97       	sbiw	r24, 0x00	; 0
    b3a4:	21 f0       	breq	.+8      	; 0xb3ae <update_splash+0x56>
    b3a6:	10 92 31 0b 	sts	0x0B31, r1
    b3aa:	10 92 30 0b 	sts	0x0B30, r1
	
	if (p1->pressed & BTN_UP)
    b3ae:	84 ff       	sbrs	r24, 4
    b3b0:	0e c0       	rjmp	.+28     	; 0xb3ce <update_splash+0x76>
	{
		game.selection--;
    b3b2:	80 91 0b 0c 	lds	r24, 0x0C0B
    b3b6:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b3b8:	87 ff       	sbrs	r24, 7
    b3ba:	11 c0       	rjmp	.+34     	; 0xb3de <update_splash+0x86>
    b3bc:	10 92 0b 0c 	sts	0x0C0B, r1
		SFX_NAVIGATE;
    b3c0:	2f ef       	ldi	r18, 0xFF	; 255
    b3c2:	47 e1       	ldi	r20, 0x17	; 23
    b3c4:	67 e0       	ldi	r22, 0x07	; 7
    b3c6:	84 e0       	ldi	r24, 0x04	; 4
    b3c8:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
    b3cc:	6f c0       	rjmp	.+222    	; 0xb4ac <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    b3ce:	85 ff       	sbrs	r24, 5
    b3d0:	09 c0       	rjmp	.+18     	; 0xb3e4 <update_splash+0x8c>
	{
		game.selection++;
    b3d2:	80 91 0b 0c 	lds	r24, 0x0C0B
    b3d6:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b3d8:	83 30       	cpi	r24, 0x03	; 3
    b3da:	0c f0       	brlt	.+2      	; 0xb3de <update_splash+0x86>
    b3dc:	82 e0       	ldi	r24, 0x02	; 2
    b3de:	80 93 0b 0c 	sts	0x0C0B, r24
    b3e2:	ee cf       	rjmp	.-36     	; 0xb3c0 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b3e4:	90 ff       	sbrs	r25, 0
    b3e6:	2c c0       	rjmp	.+88     	; 0xb440 <update_splash+0xe8>
    b3e8:	80 91 0b 0c 	lds	r24, 0x0C0B
    b3ec:	82 30       	cpi	r24, 0x02	; 2
    b3ee:	a8 f4       	brcc	.+42     	; 0xb41a <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    b3f0:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    b3f4:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    b3f8:	2f ef       	ldi	r18, 0xFF	; 255
    b3fa:	47 e1       	ldi	r20, 0x17	; 23
    b3fc:	67 e0       	ldi	r22, 0x07	; 7
    b3fe:	84 e0       	ldi	r24, 0x04	; 4
    b400:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		fade_through();
    b404:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		load_eeprom(&handles);
    b408:	88 ee       	ldi	r24, 0xE8	; 232
    b40a:	9b e0       	ldi	r25, 0x0B	; 11
    b40c:	0e 94 7f 49 	call	0x92fe	; 0x92fe <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    b410:	df 91       	pop	r29
    b412:	cf 91       	pop	r28
    b414:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    b416:	0c 94 1a 59 	jmp	0xb234	; 0xb234 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    b41a:	82 30       	cpi	r24, 0x02	; 2
    b41c:	89 f4       	brne	.+34     	; 0xb440 <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    b41e:	2f ef       	ldi	r18, 0xFF	; 255
    b420:	47 e1       	ldi	r20, 0x17	; 23
    b422:	67 e0       	ldi	r22, 0x07	; 7
    b424:	84 e0       	ldi	r24, 0x04	; 4
    b426:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		fade_through();
    b42a:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		load_eeprom(&scores);
    b42e:	81 ec       	ldi	r24, 0xC1	; 193
    b430:	9b e0       	ldi	r25, 0x0B	; 11
    b432:	0e 94 7f 49 	call	0x92fe	; 0x92fe <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    b436:	df 91       	pop	r29
    b438:	cf 91       	pop	r28
    b43a:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    b43c:	0c 94 02 54 	jmp	0xa804	; 0xa804 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    b440:	80 91 30 0b 	lds	r24, 0x0B30
    b444:	90 91 31 0b 	lds	r25, 0x0B31
    b448:	88 35       	cpi	r24, 0x58	; 88
    b44a:	92 40       	sbci	r25, 0x02	; 2
    b44c:	78 f1       	brcs	.+94     	; 0xb4ac <update_splash+0x154>
	{
		demo_counter = 0;
    b44e:	10 92 31 0b 	sts	0x0B31, r1
    b452:	10 92 30 0b 	sts	0x0B30, r1
		game.selection = CPUVCPU;
    b456:	83 e0       	ldi	r24, 0x03	; 3
    b458:	80 93 0b 0c 	sts	0x0C0B, r24
		player1.handle_id = 9;
    b45c:	c9 e0       	ldi	r28, 0x09	; 9
    b45e:	c0 93 2f 0c 	sts	0x0C2F, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    b462:	43 e0       	ldi	r20, 0x03	; 3
    b464:	65 e0       	ldi	r22, 0x05	; 5
    b466:	7c e0       	ldi	r23, 0x0C	; 12
    b468:	80 e3       	ldi	r24, 0x30	; 48
    b46a:	9c e0       	ldi	r25, 0x0C	; 12
    b46c:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		player2.handle_id = 9;
    b470:	c0 93 8c 0f 	sts	0x0F8C, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b474:	43 e0       	ldi	r20, 0x03	; 3
    b476:	65 e0       	ldi	r22, 0x05	; 5
    b478:	7c e0       	ldi	r23, 0x0C	; 12
    b47a:	8d e8       	ldi	r24, 0x8D	; 141
    b47c:	9f e0       	ldi	r25, 0x0F	; 15
    b47e:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		SFX_NAVIGATE;
    b482:	2f ef       	ldi	r18, 0xFF	; 255
    b484:	47 e1       	ldi	r20, 0x17	; 23
    b486:	67 e0       	ldi	r22, 0x07	; 7
    b488:	84 e0       	ldi	r24, 0x04	; 4
    b48a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <TriggerNote>
		clear_sprites();
    b48e:	0e 94 9b 49 	call	0x9336	; 0x9336 <clear_sprites>
		fade_through();
    b492:	0e 94 91 49 	call	0x9322	; 0x9322 <fade_through>
		level_transition(LBRandom(0, 9));
    b496:	69 e0       	ldi	r22, 0x09	; 9
    b498:	70 e0       	ldi	r23, 0x00	; 0
    b49a:	80 e0       	ldi	r24, 0x00	; 0
    b49c:	90 e0       	ldi	r25, 0x00	; 0
    b49e:	0e 94 19 48 	call	0x9032	; 0x9032 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    b4a2:	df 91       	pop	r29
    b4a4:	cf 91       	pop	r28
    b4a6:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 9));
    b4a8:	0c 94 9c 53 	jmp	0xa738	; 0xa738 <level_transition>
		return;
		
	}
	demo_counter++;
    b4ac:	80 91 30 0b 	lds	r24, 0x0B30
    b4b0:	90 91 31 0b 	lds	r25, 0x0B31
    b4b4:	01 96       	adiw	r24, 0x01	; 1
    b4b6:	90 93 31 0b 	sts	0x0B31, r25
    b4ba:	80 93 30 0b 	sts	0x0B30, r24
}
    b4be:	df 91       	pop	r29
    b4c0:	cf 91       	pop	r28
    b4c2:	0f 91       	pop	r16
    b4c4:	08 95       	ret

0000b4c6 <update_handle_select>:
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b4c6:	0f 93       	push	r16
    b4c8:	1f 93       	push	r17
    b4ca:	cf 93       	push	r28
    b4cc:	df 93       	push	r29
    b4ce:	8c 01       	movw	r16, r24
    b4d0:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    b4d2:	28 e0       	ldi	r18, 0x08	; 8
    b4d4:	42 e0       	ldi	r20, 0x02	; 2
    b4d6:	bc 01       	movw	r22, r24
    b4d8:	8a e2       	ldi	r24, 0x2A	; 42
    b4da:	9b e0       	ldi	r25, 0x0B	; 11
    b4dc:	0e 94 8b 58 	call	0xb116	; 0xb116 <_handle_select_render_helper>
	if (game.selection == PVP)
    b4e0:	80 91 0b 0c 	lds	r24, 0x0C0B
    b4e4:	81 30       	cpi	r24, 0x01	; 1
    b4e6:	39 f4       	brne	.+14     	; 0xb4f6 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 9);
    b4e8:	29 e0       	ldi	r18, 0x09	; 9
    b4ea:	43 e1       	ldi	r20, 0x13	; 19
    b4ec:	be 01       	movw	r22, r28
    b4ee:	84 e2       	ldi	r24, 0x24	; 36
    b4f0:	9b e0       	ldi	r25, 0x0B	; 11
    b4f2:	0e 94 8b 58 	call	0xb116	; 0xb116 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    b4f6:	45 e2       	ldi	r20, 0x25	; 37
    b4f8:	5c e0       	ldi	r21, 0x0C	; 12
    b4fa:	b8 01       	movw	r22, r16
    b4fc:	8a e2       	ldi	r24, 0x2A	; 42
    b4fe:	9b e0       	ldi	r25, 0x0B	; 11
    b500:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    b504:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    b508:	80 91 0b 0c 	lds	r24, 0x0C0B
    b50c:	81 30       	cpi	r24, 0x01	; 1
    b50e:	19 f0       	breq	.+6      	; 0xb516 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    b510:	12 30       	cpi	r17, 0x02	; 2
    b512:	69 f0       	breq	.+26     	; 0xb52e <update_handle_select+0x68>
    b514:	21 c0       	rjmp	.+66     	; 0xb558 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    b516:	42 e8       	ldi	r20, 0x82	; 130
    b518:	5f e0       	ldi	r21, 0x0F	; 15
    b51a:	be 01       	movw	r22, r28
    b51c:	84 e2       	ldi	r24, 0x24	; 36
    b51e:	9b e0       	ldi	r25, 0x0B	; 11
    b520:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    b524:	80 91 29 0b 	lds	r24, 0x0B29
    b528:	82 30       	cpi	r24, 0x02	; 2
    b52a:	b1 f4       	brne	.+44     	; 0xb558 <update_handle_select+0x92>
    b52c:	f1 cf       	rjmp	.-30     	; 0xb510 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    b52e:	80 91 0b 0c 	lds	r24, 0x0C0B
    b532:	81 11       	cpse	r24, r1
    b534:	0a c0       	rjmp	.+20     	; 0xb54a <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    b536:	89 e0       	ldi	r24, 0x09	; 9
    b538:	80 93 8c 0f 	sts	0x0F8C, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b53c:	43 e0       	ldi	r20, 0x03	; 3
    b53e:	65 e0       	ldi	r22, 0x05	; 5
    b540:	7c e0       	ldi	r23, 0x0C	; 12
    b542:	8d e8       	ldi	r24, 0x8D	; 141
    b544:	9f e0       	ldi	r25, 0x0F	; 15
    b546:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <LBCopyChars>
		}
		level_transition(0);
    b54a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    b54c:	df 91       	pop	r29
    b54e:	cf 91       	pop	r28
    b550:	1f 91       	pop	r17
    b552:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    b554:	0c 94 9c 53 	jmp	0xa738	; 0xa738 <level_transition>
	}
}
    b558:	df 91       	pop	r29
    b55a:	cf 91       	pop	r28
    b55c:	1f 91       	pop	r17
    b55e:	0f 91       	pop	r16
    b560:	08 95       	ret

0000b562 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    b562:	00 97       	sbiw	r24, 0x00	; 0
    b564:	41 f0       	breq	.+16     	; 0xb576 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    b566:	81 30       	cpi	r24, 0x01	; 1
    b568:	91 05       	cpc	r25, r1
    b56a:	41 f0       	breq	.+16     	; 0xb57c <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    b56c:	82 30       	cpi	r24, 0x02	; 2
    b56e:	91 05       	cpc	r25, r1
    b570:	41 f0       	breq	.+16     	; 0xb582 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    b572:	03 97       	sbiw	r24, 0x03	; 3
    b574:	49 f0       	breq	.+18     	; 0xb588 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    b576:	80 e1       	ldi	r24, 0x10	; 16
    b578:	90 e0       	ldi	r25, 0x00	; 0
    b57a:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    b57c:	80 e2       	ldi	r24, 0x20	; 32
    b57e:	90 e0       	ldi	r25, 0x00	; 0
    b580:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    b582:	80 e4       	ldi	r24, 0x40	; 64
    b584:	90 e0       	ldi	r25, 0x00	; 0
    b586:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    b588:	80 e8       	ldi	r24, 0x80	; 128
    b58a:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    b58c:	08 95       	ret

0000b58e <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, char moved, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Randomize direction when hitting a wall
 */
{	
    b58e:	ef 92       	push	r14
    b590:	ff 92       	push	r15
    b592:	0f 93       	push	r16
    b594:	1f 93       	push	r17
    b596:	cf 93       	push	r28
    b598:	df 93       	push	r29
    b59a:	f8 2e       	mov	r15, r24
    b59c:	e6 2e       	mov	r14, r22
    b59e:	e9 01       	movw	r28, r18
	if ((p->held & BTN_LEFT) && !moved)
    b5a0:	f8 01       	movw	r30, r16
    b5a2:	94 81       	ldd	r25, Z+4	; 0x04
    b5a4:	96 ff       	sbrs	r25, 6
    b5a6:	0e c0       	rjmp	.+28     	; 0xb5c4 <crash_and_turn+0x36>
    b5a8:	41 11       	cpse	r20, r1
    b5aa:	0c c0       	rjmp	.+24     	; 0xb5c4 <crash_and_turn+0x36>
	{
		p->held = button_map(LBRandom(0, 4));
    b5ac:	64 e0       	ldi	r22, 0x04	; 4
    b5ae:	70 e0       	ldi	r23, 0x00	; 0
    b5b0:	80 e0       	ldi	r24, 0x00	; 0
    b5b2:	90 e0       	ldi	r25, 0x00	; 0
    b5b4:	0e 94 19 48 	call	0x9032	; 0x9032 <LBRandom>
    b5b8:	0e 94 b1 5a 	call	0xb562	; 0xb562 <button_map>
    b5bc:	f8 01       	movw	r30, r16
    b5be:	95 83       	std	Z+5, r25	; 0x05
    b5c0:	84 83       	std	Z+4, r24	; 0x04
    b5c2:	0c c0       	rjmp	.+24     	; 0xb5dc <crash_and_turn+0x4e>
	}
	else if ((p->held & BTN_UP) && !moved)
    b5c4:	94 ff       	sbrs	r25, 4
    b5c6:	02 c0       	rjmp	.+4      	; 0xb5cc <crash_and_turn+0x3e>
    b5c8:	44 23       	and	r20, r20
    b5ca:	81 f3       	breq	.-32     	; 0xb5ac <crash_and_turn+0x1e>
	{
		p->held = button_map(LBRandom(0, 4));
	}
	else if ((p->held & BTN_RIGHT) && !moved)
    b5cc:	97 ff       	sbrs	r25, 7
    b5ce:	02 c0       	rjmp	.+4      	; 0xb5d4 <crash_and_turn+0x46>
    b5d0:	44 23       	and	r20, r20
    b5d2:	61 f3       	breq	.-40     	; 0xb5ac <crash_and_turn+0x1e>
	{
		p->held = button_map(LBRandom(0, 4));
	}
	else if ((p->held & BTN_DOWN) && !moved)
    b5d4:	95 ff       	sbrs	r25, 5
    b5d6:	02 c0       	rjmp	.+4      	; 0xb5dc <crash_and_turn+0x4e>
    b5d8:	44 23       	and	r20, r20
    b5da:	41 f3       	breq	.-48     	; 0xb5ac <crash_and_turn+0x1e>
	{
		p->held = button_map(LBRandom(0, 4));
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    b5dc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    b5de:	5b 8d       	ldd	r21, Y+27	; 0x1b
    b5e0:	40 31       	cpi	r20, 0x10	; 16
    b5e2:	51 05       	cpc	r21, r1
    b5e4:	19 f0       	breq	.+6      	; 0xb5ec <crash_and_turn+0x5e>
    b5e6:	40 32       	cpi	r20, 0x20	; 32
    b5e8:	51 05       	cpc	r21, r1
    b5ea:	19 f4       	brne	.+6      	; 0xb5f2 <crash_and_turn+0x64>
    b5ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b5ee:	e8 16       	cp	r14, r24
    b5f0:	59 f0       	breq	.+22     	; 0xb608 <crash_and_turn+0x7a>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    b5f2:	40 34       	cpi	r20, 0x40	; 64
    b5f4:	51 05       	cpc	r21, r1
    b5f6:	19 f0       	breq	.+6      	; 0xb5fe <crash_and_turn+0x70>
    b5f8:	40 38       	cpi	r20, 0x80	; 128
    b5fa:	51 05       	cpc	r21, r1
    b5fc:	39 f4       	brne	.+14     	; 0xb60c <crash_and_turn+0x7e>
    b5fe:	81 e0       	ldi	r24, 0x01	; 1
    b600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b602:	f9 12       	cpse	r15, r25
    b604:	03 c0       	rjmp	.+6      	; 0xb60c <crash_and_turn+0x7e>
    b606:	03 c0       	rjmp	.+6      	; 0xb60e <crash_and_turn+0x80>
	else if ((p->held & BTN_DOWN) && !moved)
	{
		p->held = button_map(LBRandom(0, 4));
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    b608:	81 e0       	ldi	r24, 0x01	; 1
    b60a:	01 c0       	rjmp	.+2      	; 0xb60e <crash_and_turn+0x80>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    b60c:	80 e0       	ldi	r24, 0x00	; 0
}
    b60e:	df 91       	pop	r29
    b610:	cf 91       	pop	r28
    b612:	1f 91       	pop	r17
    b614:	0f 91       	pop	r16
    b616:	ff 90       	pop	r15
    b618:	ef 90       	pop	r14
    b61a:	08 95       	ret

0000b61c <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    b61c:	48 2f       	mov	r20, r24
    b61e:	55 27       	eor	r21, r21
    b620:	47 fd       	sbrc	r20, 7
    b622:	50 95       	com	r21
    b624:	57 ff       	sbrs	r21, 7
    b626:	03 c0       	rjmp	.+6      	; 0xb62e <get_cpu_goal_direction+0x12>
    b628:	51 95       	neg	r21
    b62a:	41 95       	neg	r20
    b62c:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    b62e:	26 2f       	mov	r18, r22
    b630:	33 27       	eor	r19, r19
    b632:	27 fd       	sbrc	r18, 7
    b634:	30 95       	com	r19
    b636:	37 ff       	sbrs	r19, 7
    b638:	03 c0       	rjmp	.+6      	; 0xb640 <get_cpu_goal_direction+0x24>
    b63a:	31 95       	neg	r19
    b63c:	21 95       	neg	r18
    b63e:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    b640:	24 17       	cp	r18, r20
    b642:	2c f4       	brge	.+10     	; 0xb64e <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    b644:	18 16       	cp	r1, r24
    b646:	44 f4       	brge	.+16     	; 0xb658 <get_cpu_goal_direction+0x3c>
    b648:	80 e8       	ldi	r24, 0x80	; 128
    b64a:	90 e0       	ldi	r25, 0x00	; 0
    b64c:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    b64e:	16 16       	cp	r1, r22
    b650:	34 f4       	brge	.+12     	; 0xb65e <get_cpu_goal_direction+0x42>
    b652:	80 e2       	ldi	r24, 0x20	; 32
    b654:	90 e0       	ldi	r25, 0x00	; 0
    b656:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    b658:	80 e4       	ldi	r24, 0x40	; 64
    b65a:	90 e0       	ldi	r25, 0x00	; 0
    b65c:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    b65e:	80 e1       	ldi	r24, 0x10	; 16
    b660:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    b662:	08 95       	ret

0000b664 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    b664:	2f 92       	push	r2
    b666:	3f 92       	push	r3
    b668:	4f 92       	push	r4
    b66a:	5f 92       	push	r5
    b66c:	6f 92       	push	r6
    b66e:	7f 92       	push	r7
    b670:	8f 92       	push	r8
    b672:	9f 92       	push	r9
    b674:	af 92       	push	r10
    b676:	bf 92       	push	r11
    b678:	cf 92       	push	r12
    b67a:	df 92       	push	r13
    b67c:	ef 92       	push	r14
    b67e:	ff 92       	push	r15
    b680:	0f 93       	push	r16
    b682:	1f 93       	push	r17
    b684:	cf 93       	push	r28
    b686:	df 93       	push	r29
    b688:	00 d0       	rcall	.+0      	; 0xb68a <get_cpu_joypad_state+0x26>
    b68a:	00 d0       	rcall	.+0      	; 0xb68c <get_cpu_joypad_state+0x28>
    b68c:	00 d0       	rcall	.+0      	; 0xb68e <get_cpu_joypad_state+0x2a>
    b68e:	cd b7       	in	r28, 0x3d	; 61
    b690:	de b7       	in	r29, 0x3e	; 62
    b692:	1c 01       	movw	r2, r24
    b694:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    b696:	db 01       	movw	r26, r22
    b698:	12 96       	adiw	r26, 0x02	; 2
    b69a:	4d 90       	ld	r4, X+
    b69c:	5d 90       	ld	r5, X+
    b69e:	6d 90       	ld	r6, X+
    b6a0:	7c 90       	ld	r7, X
    b6a2:	15 97       	sbiw	r26, 0x05	; 5
	goal_y = other_player->shared.y / 8 - 3;
    b6a4:	16 96       	adiw	r26, 0x06	; 6
    b6a6:	8d 90       	ld	r8, X+
    b6a8:	9d 90       	ld	r9, X+
    b6aa:	ad 90       	ld	r10, X+
    b6ac:	bc 90       	ld	r11, X
    b6ae:	19 97       	sbiw	r26, 0x09	; 9
	player_x = player->shared.x / 8;
    b6b0:	fc 01       	movw	r30, r24
    b6b2:	c2 80       	ldd	r12, Z+2	; 0x02
    b6b4:	d3 80       	ldd	r13, Z+3	; 0x03
    b6b6:	e4 80       	ldd	r14, Z+4	; 0x04
    b6b8:	f5 80       	ldd	r15, Z+5	; 0x05
	player_y =  player->shared.y / 8 - 3;
    b6ba:	86 81       	ldd	r24, Z+6	; 0x06
    b6bc:	97 81       	ldd	r25, Z+7	; 0x07
    b6be:	a0 85       	ldd	r26, Z+8	; 0x08
    b6c0:	b1 85       	ldd	r27, Z+9	; 0x09
    b6c2:	89 83       	std	Y+1, r24	; 0x01
    b6c4:	9a 83       	std	Y+2, r25	; 0x02
    b6c6:	ab 83       	std	Y+3, r26	; 0x03
    b6c8:	bc 83       	std	Y+4, r27	; 0x04
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    b6ca:	86 89       	ldd	r24, Z+22	; 0x16
    b6cc:	81 11       	cpse	r24, r1
    b6ce:	06 c0       	rjmp	.+12     	; 0xb6dc <get_cpu_joypad_state+0x78>
	{
		p->held = 0;
    b6d0:	da 01       	movw	r26, r20
    b6d2:	15 96       	adiw	r26, 0x05	; 5
    b6d4:	1c 92       	st	X, r1
    b6d6:	1e 92       	st	-X, r1
    b6d8:	14 97       	sbiw	r26, 0x04	; 4
		return;
    b6da:	12 c1       	rjmp	.+548    	; 0xb900 <get_cpu_joypad_state+0x29c>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    b6dc:	fa 01       	movw	r30, r20
    b6de:	80 81       	ld	r24, Z
    b6e0:	91 81       	ldd	r25, Z+1	; 0x01
    b6e2:	90 ff       	sbrs	r25, 0
    b6e4:	02 c0       	rjmp	.+4      	; 0xb6ea <get_cpu_joypad_state+0x86>
	{
		p->pressed = 0;
    b6e6:	11 82       	std	Z+1, r1	; 0x01
    b6e8:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    b6ea:	20 91 04 01 	lds	r18, 0x0104
    b6ee:	30 91 05 01 	lds	r19, 0x0105
    b6f2:	c9 01       	movw	r24, r18
    b6f4:	64 e1       	ldi	r22, 0x14	; 20
    b6f6:	70 e0       	ldi	r23, 0x00	; 0
    b6f8:	0e 94 3b 5d 	call	0xba76	; 0xba76 <__udivmodhi4>
    b6fc:	89 2b       	or	r24, r25
    b6fe:	51 f4       	brne	.+20     	; 0xb714 <get_cpu_joypad_state+0xb0>
    b700:	d1 01       	movw	r26, r2
    b702:	56 96       	adiw	r26, 0x16	; 22
    b704:	8c 91       	ld	r24, X
    b706:	83 33       	cpi	r24, 0x33	; 51
    b708:	28 f0       	brcs	.+10     	; 0xb714 <get_cpu_joypad_state+0xb0>
	{
		p->pressed = BTN_A;
    b70a:	80 e0       	ldi	r24, 0x00	; 0
    b70c:	91 e0       	ldi	r25, 0x01	; 1
    b70e:	f8 01       	movw	r30, r16
    b710:	91 83       	std	Z+1, r25	; 0x01
    b712:	80 83       	st	Z, r24
    b714:	3e 82       	std	Y+6, r3	; 0x06
    b716:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Movement
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 50 || player->goal_reached)
    b718:	c9 01       	movw	r24, r18
    b71a:	6c e2       	ldi	r22, 0x2C	; 44
    b71c:	71 e0       	ldi	r23, 0x01	; 1
    b71e:	0e 94 3b 5d 	call	0xba76	; 0xba76 <__udivmodhi4>
    b722:	89 2b       	or	r24, r25
    b724:	59 f0       	breq	.+22     	; 0xb73c <get_cpu_joypad_state+0xd8>
    b726:	d1 01       	movw	r26, r2
    b728:	56 96       	adiw	r26, 0x16	; 22
    b72a:	8c 91       	ld	r24, X
    b72c:	56 97       	sbiw	r26, 0x16	; 22
    b72e:	82 33       	cpi	r24, 0x32	; 50
    b730:	29 f0       	breq	.+10     	; 0xb73c <get_cpu_joypad_state+0xd8>
    b732:	5d 96       	adiw	r26, 0x1d	; 29
    b734:	8c 91       	ld	r24, X
    b736:	88 23       	and	r24, r24
    b738:	09 f4       	brne	.+2      	; 0xb73c <get_cpu_joypad_state+0xd8>
    b73a:	88 c0       	rjmp	.+272    	; 0xb84c <get_cpu_joypad_state+0x1e8>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    b73c:	20 e0       	ldi	r18, 0x00	; 0
    b73e:	30 e0       	ldi	r19, 0x00	; 0
    b740:	40 e0       	ldi	r20, 0x00	; 0
    b742:	5e e3       	ldi	r21, 0x3E	; 62
    b744:	c3 01       	movw	r24, r6
    b746:	b2 01       	movw	r22, r4
    b748:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b74c:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
    b750:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    b752:	20 e0       	ldi	r18, 0x00	; 0
    b754:	30 e0       	ldi	r19, 0x00	; 0
    b756:	40 e0       	ldi	r20, 0x00	; 0
    b758:	5e e3       	ldi	r21, 0x3E	; 62
    b75a:	c5 01       	movw	r24, r10
    b75c:	b4 01       	movw	r22, r8
    b75e:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b762:	20 e0       	ldi	r18, 0x00	; 0
    b764:	30 e0       	ldi	r19, 0x00	; 0
    b766:	40 e4       	ldi	r20, 0x40	; 64
    b768:	50 e4       	ldi	r21, 0x40	; 64
    b76a:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    b76e:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
    b772:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    b774:	20 e0       	ldi	r18, 0x00	; 0
    b776:	30 e0       	ldi	r19, 0x00	; 0
    b778:	40 e0       	ldi	r20, 0x00	; 0
    b77a:	5e e3       	ldi	r21, 0x3E	; 62
    b77c:	c7 01       	movw	r24, r14
    b77e:	b6 01       	movw	r22, r12
    b780:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b784:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    b788:	f7 2c       	mov	r15, r7
    b78a:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    b78c:	20 e0       	ldi	r18, 0x00	; 0
    b78e:	30 e0       	ldi	r19, 0x00	; 0
    b790:	40 e0       	ldi	r20, 0x00	; 0
    b792:	5e e3       	ldi	r21, 0x3E	; 62
    b794:	69 81       	ldd	r22, Y+1	; 0x01
    b796:	7a 81       	ldd	r23, Y+2	; 0x02
    b798:	8b 81       	ldd	r24, Y+3	; 0x03
    b79a:	9c 81       	ldd	r25, Y+4	; 0x04
    b79c:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b7a0:	20 e0       	ldi	r18, 0x00	; 0
    b7a2:	30 e0       	ldi	r19, 0x00	; 0
    b7a4:	40 e4       	ldi	r20, 0x40	; 64
    b7a6:	50 e4       	ldi	r21, 0x40	; 64
    b7a8:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    b7ac:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    b7b0:	bb 2d       	mov	r27, r11
    b7b2:	b6 1b       	sub	r27, r22
    b7b4:	6b 2f       	mov	r22, r27
	}
		
	// Movement
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 50 || player->goal_reached)
	{
		player->goal_reached = 0;
    b7b6:	ed 81       	ldd	r30, Y+5	; 0x05
    b7b8:	fe 81       	ldd	r31, Y+6	; 0x06
    b7ba:	15 8e       	std	Z+29, r1	; 0x1d
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    b7bc:	82 e0       	ldi	r24, 0x02	; 2
    b7be:	8f 0d       	add	r24, r15
    b7c0:	85 30       	cpi	r24, 0x05	; 5
    b7c2:	e0 f4       	brcc	.+56     	; 0xb7fc <get_cpu_joypad_state+0x198>
    b7c4:	be 3f       	cpi	r27, 0xFE	; 254
    b7c6:	d4 f0       	brlt	.+52     	; 0xb7fc <get_cpu_joypad_state+0x198>
    b7c8:	b3 30       	cpi	r27, 0x03	; 3
    b7ca:	c4 f4       	brge	.+48     	; 0xb7fc <get_cpu_joypad_state+0x198>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    b7cc:	64 e0       	ldi	r22, 0x04	; 4
    b7ce:	70 e0       	ldi	r23, 0x00	; 0
    b7d0:	80 e0       	ldi	r24, 0x00	; 0
    b7d2:	90 e0       	ldi	r25, 0x00	; 0
    b7d4:	0e 94 19 48 	call	0x9032	; 0x9032 <LBRandom>
    b7d8:	0e 94 b1 5a 	call	0xb562	; 0xb562 <button_map>
    b7dc:	ad 81       	ldd	r26, Y+5	; 0x05
    b7de:	be 81       	ldd	r27, Y+6	; 0x06
    b7e0:	5b 96       	adiw	r26, 0x1b	; 27
    b7e2:	9c 93       	st	X, r25
    b7e4:	8e 93       	st	-X, r24
    b7e6:	5a 97       	sbiw	r26, 0x1a	; 26
			player->goal = LBRandom(5, 18);
    b7e8:	62 e1       	ldi	r22, 0x12	; 18
    b7ea:	70 e0       	ldi	r23, 0x00	; 0
    b7ec:	85 e0       	ldi	r24, 0x05	; 5
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	0e 94 19 48 	call	0x9032	; 0x9032 <LBRandom>
    b7f4:	ed 81       	ldd	r30, Y+5	; 0x05
    b7f6:	fe 81       	ldd	r31, Y+6	; 0x06
    b7f8:	84 8f       	std	Z+28, r24	; 0x1c
    b7fa:	14 c0       	rjmp	.+40     	; 0xb824 <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    b7fc:	8f 2d       	mov	r24, r15
    b7fe:	0e 94 0e 5b 	call	0xb61c	; 0xb61c <get_cpu_goal_direction>
    b802:	ad 81       	ldd	r26, Y+5	; 0x05
    b804:	be 81       	ldd	r27, Y+6	; 0x06
    b806:	5b 96       	adiw	r26, 0x1b	; 27
    b808:	9c 93       	st	X, r25
    b80a:	8e 93       	st	-X, r24
    b80c:	5a 97       	sbiw	r26, 0x1a	; 26
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    b80e:	80 31       	cpi	r24, 0x10	; 16
    b810:	91 05       	cpc	r25, r1
    b812:	29 f0       	breq	.+10     	; 0xb81e <get_cpu_joypad_state+0x1ba>
    b814:	80 97       	sbiw	r24, 0x20	; 32
    b816:	19 f0       	breq	.+6      	; 0xb81e <get_cpu_joypad_state+0x1ba>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    b818:	5c 96       	adiw	r26, 0x1c	; 28
    b81a:	7c 92       	st	X, r7
    b81c:	03 c0       	rjmp	.+6      	; 0xb824 <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    b81e:	ed 81       	ldd	r30, Y+5	; 0x05
    b820:	fe 81       	ldd	r31, Y+6	; 0x06
    b822:	b4 8e       	std	Z+28, r11	; 0x1c
		}
		p->held = player->goal_direction;
    b824:	ad 81       	ldd	r26, Y+5	; 0x05
    b826:	be 81       	ldd	r27, Y+6	; 0x06
    b828:	5a 96       	adiw	r26, 0x1a	; 26
    b82a:	8d 91       	ld	r24, X+
    b82c:	9c 91       	ld	r25, X
    b82e:	5b 97       	sbiw	r26, 0x1b	; 27
    b830:	f8 01       	movw	r30, r16
    b832:	95 83       	std	Z+5, r25	; 0x05
    b834:	84 83       	std	Z+4, r24	; 0x04
		player->old_x = 0;
    b836:	5e 96       	adiw	r26, 0x1e	; 30
    b838:	1d 92       	st	X+, r1
    b83a:	1d 92       	st	X+, r1
    b83c:	1d 92       	st	X+, r1
    b83e:	1c 92       	st	X, r1
    b840:	91 97       	sbiw	r26, 0x21	; 33
		player->old_y = 0;
    b842:	fd 01       	movw	r30, r26
    b844:	12 a2       	std	Z+34, r1	; 0x22
    b846:	13 a2       	std	Z+35, r1	; 0x23
    b848:	14 a2       	std	Z+36, r1	; 0x24
    b84a:	15 a2       	std	Z+37, r1	; 0x25
	}
	if (player->shared.x != player->old_x) moved = 1;
    b84c:	ad 81       	ldd	r26, Y+5	; 0x05
    b84e:	be 81       	ldd	r27, Y+6	; 0x06
    b850:	12 96       	adiw	r26, 0x02	; 2
    b852:	cd 90       	ld	r12, X+
    b854:	dd 90       	ld	r13, X+
    b856:	ed 90       	ld	r14, X+
    b858:	fc 90       	ld	r15, X
    b85a:	15 97       	sbiw	r26, 0x05	; 5
    b85c:	5e 96       	adiw	r26, 0x1e	; 30
    b85e:	4d 90       	ld	r4, X+
    b860:	5d 90       	ld	r5, X+
    b862:	6d 90       	ld	r6, X+
    b864:	7c 90       	ld	r7, X
    b866:	91 97       	sbiw	r26, 0x21	; 33
	if (player->shared.y != player->old_y) moved = 1;
    b868:	16 96       	adiw	r26, 0x06	; 6
    b86a:	8d 90       	ld	r8, X+
    b86c:	9d 90       	ld	r9, X+
    b86e:	ad 90       	ld	r10, X+
    b870:	bc 90       	ld	r11, X
    b872:	19 97       	sbiw	r26, 0x09	; 9
    b874:	92 96       	adiw	r26, 0x22	; 34
    b876:	2d 91       	ld	r18, X+
    b878:	3d 91       	ld	r19, X+
    b87a:	4d 91       	ld	r20, X+
    b87c:	5c 91       	ld	r21, X
    b87e:	95 97       	sbiw	r26, 0x25	; 37
    b880:	c5 01       	movw	r24, r10
    b882:	b4 01       	movw	r22, r8
    b884:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    b888:	33 24       	eor	r3, r3
    b88a:	33 94       	inc	r3
    b88c:	81 11       	cpse	r24, r1
    b88e:	09 c0       	rjmp	.+18     	; 0xb8a2 <get_cpu_joypad_state+0x23e>
		}
		p->held = player->goal_direction;
		player->old_x = 0;
		player->old_y = 0;
	}
	if (player->shared.x != player->old_x) moved = 1;
    b890:	a3 01       	movw	r20, r6
    b892:	92 01       	movw	r18, r4
    b894:	c7 01       	movw	r24, r14
    b896:	b6 01       	movw	r22, r12
    b898:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <__cmpsf2>
    b89c:	81 11       	cpse	r24, r1
    b89e:	01 c0       	rjmp	.+2      	; 0xb8a2 <get_cpu_joypad_state+0x23e>
    b8a0:	31 2c       	mov	r3, r1
	if (player->shared.y != player->old_y) moved = 1;
	player->old_x = player->shared.x;
    b8a2:	ed 81       	ldd	r30, Y+5	; 0x05
    b8a4:	fe 81       	ldd	r31, Y+6	; 0x06
    b8a6:	c6 8e       	std	Z+30, r12	; 0x1e
    b8a8:	d7 8e       	std	Z+31, r13	; 0x1f
    b8aa:	e0 a2       	std	Z+32, r14	; 0x20
    b8ac:	f1 a2       	std	Z+33, r15	; 0x21
	player->old_y = player->shared.y;
    b8ae:	82 a2       	std	Z+34, r8	; 0x22
    b8b0:	93 a2       	std	Z+35, r9	; 0x23
    b8b2:	a4 a2       	std	Z+36, r10	; 0x24
    b8b4:	b5 a2       	std	Z+37, r11	; 0x25
	player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, moved, player, p);
    b8b6:	20 e0       	ldi	r18, 0x00	; 0
    b8b8:	30 e0       	ldi	r19, 0x00	; 0
    b8ba:	40 e0       	ldi	r20, 0x00	; 0
    b8bc:	5e e3       	ldi	r21, 0x3E	; 62
    b8be:	c5 01       	movw	r24, r10
    b8c0:	b4 01       	movw	r22, r8
    b8c2:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b8c6:	20 e0       	ldi	r18, 0x00	; 0
    b8c8:	30 e0       	ldi	r19, 0x00	; 0
    b8ca:	40 e4       	ldi	r20, 0x40	; 64
    b8cc:	50 e4       	ldi	r21, 0x40	; 64
    b8ce:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <__subsf3>
    b8d2:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
    b8d6:	b6 2e       	mov	r11, r22
    b8d8:	20 e0       	ldi	r18, 0x00	; 0
    b8da:	30 e0       	ldi	r19, 0x00	; 0
    b8dc:	40 e0       	ldi	r20, 0x00	; 0
    b8de:	5e e3       	ldi	r21, 0x3E	; 62
    b8e0:	c7 01       	movw	r24, r14
    b8e2:	b6 01       	movw	r22, r12
    b8e4:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <__mulsf3>
    b8e8:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <__fixsfsi>
    b8ec:	86 2f       	mov	r24, r22
    b8ee:	2d 81       	ldd	r18, Y+5	; 0x05
    b8f0:	3e 81       	ldd	r19, Y+6	; 0x06
    b8f2:	43 2d       	mov	r20, r3
    b8f4:	6b 2d       	mov	r22, r11
    b8f6:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <crash_and_turn>
    b8fa:	ed 81       	ldd	r30, Y+5	; 0x05
    b8fc:	fe 81       	ldd	r31, Y+6	; 0x06
    b8fe:	85 8f       	std	Z+29, r24	; 0x1d
}
    b900:	26 96       	adiw	r28, 0x06	; 6
    b902:	0f b6       	in	r0, 0x3f	; 63
    b904:	f8 94       	cli
    b906:	de bf       	out	0x3e, r29	; 62
    b908:	0f be       	out	0x3f, r0	; 63
    b90a:	cd bf       	out	0x3d, r28	; 61
    b90c:	df 91       	pop	r29
    b90e:	cf 91       	pop	r28
    b910:	1f 91       	pop	r17
    b912:	0f 91       	pop	r16
    b914:	ff 90       	pop	r15
    b916:	ef 90       	pop	r14
    b918:	df 90       	pop	r13
    b91a:	cf 90       	pop	r12
    b91c:	bf 90       	pop	r11
    b91e:	af 90       	pop	r10
    b920:	9f 90       	pop	r9
    b922:	8f 90       	pop	r8
    b924:	7f 90       	pop	r7
    b926:	6f 90       	pop	r6
    b928:	5f 90       	pop	r5
    b92a:	4f 90       	pop	r4
    b92c:	3f 90       	pop	r3
    b92e:	2f 90       	pop	r2
    b930:	08 95       	ret

0000b932 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b932:	83 e5       	ldi	r24, 0x53	; 83
    b934:	93 e0       	ldi	r25, 0x03	; 3
    b936:	0e 94 35 3a 	call	0x746a	; 0x746a <InitMusicPlayer>
	SetMasterVolume(0xff);
    b93a:	8f ef       	ldi	r24, 0xFF	; 255
    b93c:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <SetMasterVolume>
	SetTileTable(tiles_data);
    b940:	87 ef       	ldi	r24, 0xF7	; 247
    b942:	93 e4       	ldi	r25, 0x43	; 67
    b944:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b948:	87 ef       	ldi	r24, 0xF7	; 247
    b94a:	97 e3       	ldi	r25, 0x37	; 55
    b94c:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    b950:	8f e2       	ldi	r24, 0x2F	; 47
    b952:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    b956:	60 e0       	ldi	r22, 0x00	; 0
    b958:	83 e0       	ldi	r24, 0x03	; 3
    b95a:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <FadeIn>
	ClearVram();
    b95e:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ClearVram>
	init_scores(&scores);
    b962:	81 ec       	ldi	r24, 0xC1	; 193
    b964:	9b e0       	ldi	r25, 0x0B	; 11
    b966:	0e 94 5d 48 	call	0x90ba	; 0x90ba <init_scores>
	init_handles(&handles);
    b96a:	88 ee       	ldi	r24, 0xE8	; 232
    b96c:	9b e0       	ldi	r25, 0x0B	; 11
    b96e:	0e 94 69 48 	call	0x90d2	; 0x90d2 <init_handles>
	init_game_state();
    b972:	0e 94 4d 49 	call	0x929a	; 0x929a <init_game_state>
	init_tile_animations(&tile_animations);
    b976:	8c e0       	ldi	r24, 0x0C	; 12
    b978:	9c e0       	ldi	r25, 0x0C	; 12
    b97a:	0e 94 75 48 	call	0x90ea	; 0x90ea <init_tile_animations>
	load_splash();
    b97e:	0e 94 cc 53 	call	0xa798	; 0xa798 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    b982:	81 e0       	ldi	r24, 0x01	; 1
    b984:	90 e0       	ldi	r25, 0x00	; 0
    b986:	0e 94 08 46 	call	0x8c10	; 0x8c10 <WaitVsync>
		switch (game.current_screen)
    b98a:	80 91 08 0c 	lds	r24, 0x0C08
    b98e:	81 30       	cpi	r24, 0x01	; 1
    b990:	91 f0       	breq	.+36     	; 0xb9b6 <main+0x84>
    b992:	28 f0       	brcs	.+10     	; 0xb99e <main+0x6c>
    b994:	82 30       	cpi	r24, 0x02	; 2
    b996:	d9 f0       	breq	.+54     	; 0xb9ce <main+0x9c>
    b998:	83 30       	cpi	r24, 0x03	; 3
    b99a:	51 f1       	breq	.+84     	; 0xb9f0 <main+0xbe>
    b99c:	56 c0       	rjmp	.+172    	; 0xba4a <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    b99e:	60 e0       	ldi	r22, 0x00	; 0
    b9a0:	8c e8       	ldi	r24, 0x8C	; 140
    b9a2:	9c e0       	ldi	r25, 0x0C	; 12
    b9a4:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    b9a8:	61 ee       	ldi	r22, 0xE1	; 225
    b9aa:	7b e0       	ldi	r23, 0x0B	; 11
    b9ac:	8c e8       	ldi	r24, 0x8C	; 140
    b9ae:	9c e0       	ldi	r25, 0x0C	; 12
    b9b0:	0e 94 ac 59 	call	0xb358	; 0xb358 <update_splash>
				break;
    b9b4:	4a c0       	rjmp	.+148    	; 0xba4a <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    b9b6:	60 e0       	ldi	r22, 0x00	; 0
    b9b8:	8c e8       	ldi	r24, 0x8C	; 140
    b9ba:	9c e0       	ldi	r25, 0x0C	; 12
    b9bc:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    b9c0:	61 ee       	ldi	r22, 0xE1	; 225
    b9c2:	7b e0       	ldi	r23, 0x0B	; 11
    b9c4:	8c e8       	ldi	r24, 0x8C	; 140
    b9c6:	9c e0       	ldi	r25, 0x0C	; 12
    b9c8:	0e 94 91 57 	call	0xaf22	; 0xaf22 <update_tank_rank>
				break;
    b9cc:	3e c0       	rjmp	.+124    	; 0xba4a <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    b9ce:	60 e0       	ldi	r22, 0x00	; 0
    b9d0:	8c e8       	ldi	r24, 0x8C	; 140
    b9d2:	9c e0       	ldi	r25, 0x0C	; 12
    b9d4:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    b9d8:	61 e0       	ldi	r22, 0x01	; 1
    b9da:	81 ee       	ldi	r24, 0xE1	; 225
    b9dc:	9b e0       	ldi	r25, 0x0B	; 11
    b9de:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    b9e2:	61 ee       	ldi	r22, 0xE1	; 225
    b9e4:	7b e0       	ldi	r23, 0x0B	; 11
    b9e6:	8c e8       	ldi	r24, 0x8C	; 140
    b9e8:	9c e0       	ldi	r25, 0x0C	; 12
    b9ea:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <update_handle_select>
				break;
    b9ee:	2d c0       	rjmp	.+90     	; 0xba4a <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    b9f0:	80 91 0b 0c 	lds	r24, 0x0C0B
    b9f4:	81 11       	cpse	r24, r1
    b9f6:	06 c0       	rjmp	.+12     	; 0xba04 <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    b9f8:	60 e0       	ldi	r22, 0x00	; 0
    b9fa:	8c e8       	ldi	r24, 0x8C	; 140
    b9fc:	9c e0       	ldi	r25, 0x0C	; 12
    b9fe:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
    ba02:	0a c0       	rjmp	.+20     	; 0xba18 <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    ba04:	83 30       	cpi	r24, 0x03	; 3
    ba06:	89 f4       	brne	.+34     	; 0xba2a <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    ba08:	4c e8       	ldi	r20, 0x8C	; 140
    ba0a:	5c e0       	ldi	r21, 0x0C	; 12
    ba0c:	62 e8       	ldi	r22, 0x82	; 130
    ba0e:	7f e0       	ldi	r23, 0x0F	; 15
    ba10:	85 e2       	ldi	r24, 0x25	; 37
    ba12:	9c e0       	ldi	r25, 0x0C	; 12
    ba14:	0e 94 32 5b 	call	0xb664	; 0xb664 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    ba18:	41 ee       	ldi	r20, 0xE1	; 225
    ba1a:	5b e0       	ldi	r21, 0x0B	; 11
    ba1c:	65 e2       	ldi	r22, 0x25	; 37
    ba1e:	7c e0       	ldi	r23, 0x0C	; 12
    ba20:	82 e8       	ldi	r24, 0x82	; 130
    ba22:	9f e0       	ldi	r25, 0x0F	; 15
    ba24:	0e 94 32 5b 	call	0xb664	; 0xb664 <get_cpu_joypad_state>
    ba28:	0a c0       	rjmp	.+20     	; 0xba3e <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    ba2a:	60 e0       	ldi	r22, 0x00	; 0
    ba2c:	8c e8       	ldi	r24, 0x8C	; 140
    ba2e:	9c e0       	ldi	r25, 0x0C	; 12
    ba30:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    ba34:	61 e0       	ldi	r22, 0x01	; 1
    ba36:	81 ee       	ldi	r24, 0xE1	; 225
    ba38:	9b e0       	ldi	r25, 0x0B	; 11
    ba3a:	0e 94 91 46 	call	0x8d22	; 0x8d22 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    ba3e:	61 ee       	ldi	r22, 0xE1	; 225
    ba40:	7b e0       	ldi	r23, 0x0B	; 11
    ba42:	8c e8       	ldi	r24, 0x8C	; 140
    ba44:	9c e0       	ldi	r25, 0x0C	; 12
    ba46:	0e 94 cb 56 	call	0xad96	; 0xad96 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    ba4a:	80 91 04 01 	lds	r24, 0x0104
    ba4e:	90 91 05 01 	lds	r25, 0x0105
    ba52:	01 96       	adiw	r24, 0x01	; 1
    ba54:	90 93 05 01 	sts	0x0105, r25
    ba58:	80 93 04 01 	sts	0x0104, r24
	}
    ba5c:	92 cf       	rjmp	.-220    	; 0xb982 <main+0x50>

0000ba5e <__udivmodqi4>:
    ba5e:	99 1b       	sub	r25, r25
    ba60:	79 e0       	ldi	r23, 0x09	; 9
    ba62:	04 c0       	rjmp	.+8      	; 0xba6c <__udivmodqi4_ep>

0000ba64 <__udivmodqi4_loop>:
    ba64:	99 1f       	adc	r25, r25
    ba66:	96 17       	cp	r25, r22
    ba68:	08 f0       	brcs	.+2      	; 0xba6c <__udivmodqi4_ep>
    ba6a:	96 1b       	sub	r25, r22

0000ba6c <__udivmodqi4_ep>:
    ba6c:	88 1f       	adc	r24, r24
    ba6e:	7a 95       	dec	r23
    ba70:	c9 f7       	brne	.-14     	; 0xba64 <__udivmodqi4_loop>
    ba72:	80 95       	com	r24
    ba74:	08 95       	ret

0000ba76 <__udivmodhi4>:
    ba76:	aa 1b       	sub	r26, r26
    ba78:	bb 1b       	sub	r27, r27
    ba7a:	51 e1       	ldi	r21, 0x11	; 17
    ba7c:	07 c0       	rjmp	.+14     	; 0xba8c <__udivmodhi4_ep>

0000ba7e <__udivmodhi4_loop>:
    ba7e:	aa 1f       	adc	r26, r26
    ba80:	bb 1f       	adc	r27, r27
    ba82:	a6 17       	cp	r26, r22
    ba84:	b7 07       	cpc	r27, r23
    ba86:	10 f0       	brcs	.+4      	; 0xba8c <__udivmodhi4_ep>
    ba88:	a6 1b       	sub	r26, r22
    ba8a:	b7 0b       	sbc	r27, r23

0000ba8c <__udivmodhi4_ep>:
    ba8c:	88 1f       	adc	r24, r24
    ba8e:	99 1f       	adc	r25, r25
    ba90:	5a 95       	dec	r21
    ba92:	a9 f7       	brne	.-22     	; 0xba7e <__udivmodhi4_loop>
    ba94:	80 95       	com	r24
    ba96:	90 95       	com	r25
    ba98:	bc 01       	movw	r22, r24
    ba9a:	cd 01       	movw	r24, r26
    ba9c:	08 95       	ret

0000ba9e <__divmodhi4>:
    ba9e:	97 fb       	bst	r25, 7
    baa0:	07 2e       	mov	r0, r23
    baa2:	16 f4       	brtc	.+4      	; 0xbaa8 <__divmodhi4+0xa>
    baa4:	00 94       	com	r0
    baa6:	07 d0       	rcall	.+14     	; 0xbab6 <__divmodhi4_neg1>
    baa8:	77 fd       	sbrc	r23, 7
    baaa:	09 d0       	rcall	.+18     	; 0xbabe <__divmodhi4_neg2>
    baac:	0e 94 3b 5d 	call	0xba76	; 0xba76 <__udivmodhi4>
    bab0:	07 fc       	sbrc	r0, 7
    bab2:	05 d0       	rcall	.+10     	; 0xbabe <__divmodhi4_neg2>
    bab4:	3e f4       	brtc	.+14     	; 0xbac4 <__divmodhi4_exit>

0000bab6 <__divmodhi4_neg1>:
    bab6:	90 95       	com	r25
    bab8:	81 95       	neg	r24
    baba:	9f 4f       	sbci	r25, 0xFF	; 255
    babc:	08 95       	ret

0000babe <__divmodhi4_neg2>:
    babe:	70 95       	com	r23
    bac0:	61 95       	neg	r22
    bac2:	7f 4f       	sbci	r23, 0xFF	; 255

0000bac4 <__divmodhi4_exit>:
    bac4:	08 95       	ret

0000bac6 <__tablejump2__>:
    bac6:	ee 0f       	add	r30, r30
    bac8:	ff 1f       	adc	r31, r31
    baca:	05 90       	lpm	r0, Z+
    bacc:	f4 91       	lpm	r31, Z
    bace:	e0 2d       	mov	r30, r0
    bad0:	09 94       	ijmp

0000bad2 <__subsf3>:
    bad2:	50 58       	subi	r21, 0x80	; 128

0000bad4 <__addsf3>:
    bad4:	bb 27       	eor	r27, r27
    bad6:	aa 27       	eor	r26, r26
    bad8:	0e d0       	rcall	.+28     	; 0xbaf6 <__addsf3x>
    bada:	75 c1       	rjmp	.+746    	; 0xbdc6 <__fp_round>
    badc:	66 d1       	rcall	.+716    	; 0xbdaa <__fp_pscA>
    bade:	30 f0       	brcs	.+12     	; 0xbaec <__addsf3+0x18>
    bae0:	6b d1       	rcall	.+726    	; 0xbdb8 <__fp_pscB>
    bae2:	20 f0       	brcs	.+8      	; 0xbaec <__addsf3+0x18>
    bae4:	31 f4       	brne	.+12     	; 0xbaf2 <__addsf3+0x1e>
    bae6:	9f 3f       	cpi	r25, 0xFF	; 255
    bae8:	11 f4       	brne	.+4      	; 0xbaee <__addsf3+0x1a>
    baea:	1e f4       	brtc	.+6      	; 0xbaf2 <__addsf3+0x1e>
    baec:	5b c1       	rjmp	.+694    	; 0xbda4 <__fp_nan>
    baee:	0e f4       	brtc	.+2      	; 0xbaf2 <__addsf3+0x1e>
    baf0:	e0 95       	com	r30
    baf2:	e7 fb       	bst	r30, 7
    baf4:	51 c1       	rjmp	.+674    	; 0xbd98 <__fp_inf>

0000baf6 <__addsf3x>:
    baf6:	e9 2f       	mov	r30, r25
    baf8:	77 d1       	rcall	.+750    	; 0xbde8 <__fp_split3>
    bafa:	80 f3       	brcs	.-32     	; 0xbadc <__addsf3+0x8>
    bafc:	ba 17       	cp	r27, r26
    bafe:	62 07       	cpc	r22, r18
    bb00:	73 07       	cpc	r23, r19
    bb02:	84 07       	cpc	r24, r20
    bb04:	95 07       	cpc	r25, r21
    bb06:	18 f0       	brcs	.+6      	; 0xbb0e <__addsf3x+0x18>
    bb08:	71 f4       	brne	.+28     	; 0xbb26 <__addsf3x+0x30>
    bb0a:	9e f5       	brtc	.+102    	; 0xbb72 <__addsf3x+0x7c>
    bb0c:	8f c1       	rjmp	.+798    	; 0xbe2c <__fp_zero>
    bb0e:	0e f4       	brtc	.+2      	; 0xbb12 <__addsf3x+0x1c>
    bb10:	e0 95       	com	r30
    bb12:	0b 2e       	mov	r0, r27
    bb14:	ba 2f       	mov	r27, r26
    bb16:	a0 2d       	mov	r26, r0
    bb18:	0b 01       	movw	r0, r22
    bb1a:	b9 01       	movw	r22, r18
    bb1c:	90 01       	movw	r18, r0
    bb1e:	0c 01       	movw	r0, r24
    bb20:	ca 01       	movw	r24, r20
    bb22:	a0 01       	movw	r20, r0
    bb24:	11 24       	eor	r1, r1
    bb26:	ff 27       	eor	r31, r31
    bb28:	59 1b       	sub	r21, r25
    bb2a:	99 f0       	breq	.+38     	; 0xbb52 <__addsf3x+0x5c>
    bb2c:	59 3f       	cpi	r21, 0xF9	; 249
    bb2e:	50 f4       	brcc	.+20     	; 0xbb44 <__addsf3x+0x4e>
    bb30:	50 3e       	cpi	r21, 0xE0	; 224
    bb32:	68 f1       	brcs	.+90     	; 0xbb8e <__addsf3x+0x98>
    bb34:	1a 16       	cp	r1, r26
    bb36:	f0 40       	sbci	r31, 0x00	; 0
    bb38:	a2 2f       	mov	r26, r18
    bb3a:	23 2f       	mov	r18, r19
    bb3c:	34 2f       	mov	r19, r20
    bb3e:	44 27       	eor	r20, r20
    bb40:	58 5f       	subi	r21, 0xF8	; 248
    bb42:	f3 cf       	rjmp	.-26     	; 0xbb2a <__addsf3x+0x34>
    bb44:	46 95       	lsr	r20
    bb46:	37 95       	ror	r19
    bb48:	27 95       	ror	r18
    bb4a:	a7 95       	ror	r26
    bb4c:	f0 40       	sbci	r31, 0x00	; 0
    bb4e:	53 95       	inc	r21
    bb50:	c9 f7       	brne	.-14     	; 0xbb44 <__addsf3x+0x4e>
    bb52:	7e f4       	brtc	.+30     	; 0xbb72 <__addsf3x+0x7c>
    bb54:	1f 16       	cp	r1, r31
    bb56:	ba 0b       	sbc	r27, r26
    bb58:	62 0b       	sbc	r22, r18
    bb5a:	73 0b       	sbc	r23, r19
    bb5c:	84 0b       	sbc	r24, r20
    bb5e:	ba f0       	brmi	.+46     	; 0xbb8e <__addsf3x+0x98>
    bb60:	91 50       	subi	r25, 0x01	; 1
    bb62:	a1 f0       	breq	.+40     	; 0xbb8c <__addsf3x+0x96>
    bb64:	ff 0f       	add	r31, r31
    bb66:	bb 1f       	adc	r27, r27
    bb68:	66 1f       	adc	r22, r22
    bb6a:	77 1f       	adc	r23, r23
    bb6c:	88 1f       	adc	r24, r24
    bb6e:	c2 f7       	brpl	.-16     	; 0xbb60 <__addsf3x+0x6a>
    bb70:	0e c0       	rjmp	.+28     	; 0xbb8e <__addsf3x+0x98>
    bb72:	ba 0f       	add	r27, r26
    bb74:	62 1f       	adc	r22, r18
    bb76:	73 1f       	adc	r23, r19
    bb78:	84 1f       	adc	r24, r20
    bb7a:	48 f4       	brcc	.+18     	; 0xbb8e <__addsf3x+0x98>
    bb7c:	87 95       	ror	r24
    bb7e:	77 95       	ror	r23
    bb80:	67 95       	ror	r22
    bb82:	b7 95       	ror	r27
    bb84:	f7 95       	ror	r31
    bb86:	9e 3f       	cpi	r25, 0xFE	; 254
    bb88:	08 f0       	brcs	.+2      	; 0xbb8c <__addsf3x+0x96>
    bb8a:	b3 cf       	rjmp	.-154    	; 0xbaf2 <__addsf3+0x1e>
    bb8c:	93 95       	inc	r25
    bb8e:	88 0f       	add	r24, r24
    bb90:	08 f0       	brcs	.+2      	; 0xbb94 <__addsf3x+0x9e>
    bb92:	99 27       	eor	r25, r25
    bb94:	ee 0f       	add	r30, r30
    bb96:	97 95       	ror	r25
    bb98:	87 95       	ror	r24
    bb9a:	08 95       	ret

0000bb9c <__cmpsf2>:
    bb9c:	d9 d0       	rcall	.+434    	; 0xbd50 <__fp_cmp>
    bb9e:	08 f4       	brcc	.+2      	; 0xbba2 <__cmpsf2+0x6>
    bba0:	81 e0       	ldi	r24, 0x01	; 1
    bba2:	08 95       	ret

0000bba4 <__divsf3>:
    bba4:	0c d0       	rcall	.+24     	; 0xbbbe <__divsf3x>
    bba6:	0f c1       	rjmp	.+542    	; 0xbdc6 <__fp_round>
    bba8:	07 d1       	rcall	.+526    	; 0xbdb8 <__fp_pscB>
    bbaa:	40 f0       	brcs	.+16     	; 0xbbbc <__divsf3+0x18>
    bbac:	fe d0       	rcall	.+508    	; 0xbdaa <__fp_pscA>
    bbae:	30 f0       	brcs	.+12     	; 0xbbbc <__divsf3+0x18>
    bbb0:	21 f4       	brne	.+8      	; 0xbbba <__divsf3+0x16>
    bbb2:	5f 3f       	cpi	r21, 0xFF	; 255
    bbb4:	19 f0       	breq	.+6      	; 0xbbbc <__divsf3+0x18>
    bbb6:	f0 c0       	rjmp	.+480    	; 0xbd98 <__fp_inf>
    bbb8:	51 11       	cpse	r21, r1
    bbba:	39 c1       	rjmp	.+626    	; 0xbe2e <__fp_szero>
    bbbc:	f3 c0       	rjmp	.+486    	; 0xbda4 <__fp_nan>

0000bbbe <__divsf3x>:
    bbbe:	14 d1       	rcall	.+552    	; 0xbde8 <__fp_split3>
    bbc0:	98 f3       	brcs	.-26     	; 0xbba8 <__divsf3+0x4>

0000bbc2 <__divsf3_pse>:
    bbc2:	99 23       	and	r25, r25
    bbc4:	c9 f3       	breq	.-14     	; 0xbbb8 <__divsf3+0x14>
    bbc6:	55 23       	and	r21, r21
    bbc8:	b1 f3       	breq	.-20     	; 0xbbb6 <__divsf3+0x12>
    bbca:	95 1b       	sub	r25, r21
    bbcc:	55 0b       	sbc	r21, r21
    bbce:	bb 27       	eor	r27, r27
    bbd0:	aa 27       	eor	r26, r26
    bbd2:	62 17       	cp	r22, r18
    bbd4:	73 07       	cpc	r23, r19
    bbd6:	84 07       	cpc	r24, r20
    bbd8:	38 f0       	brcs	.+14     	; 0xbbe8 <__divsf3_pse+0x26>
    bbda:	9f 5f       	subi	r25, 0xFF	; 255
    bbdc:	5f 4f       	sbci	r21, 0xFF	; 255
    bbde:	22 0f       	add	r18, r18
    bbe0:	33 1f       	adc	r19, r19
    bbe2:	44 1f       	adc	r20, r20
    bbe4:	aa 1f       	adc	r26, r26
    bbe6:	a9 f3       	breq	.-22     	; 0xbbd2 <__divsf3_pse+0x10>
    bbe8:	33 d0       	rcall	.+102    	; 0xbc50 <__divsf3_pse+0x8e>
    bbea:	0e 2e       	mov	r0, r30
    bbec:	3a f0       	brmi	.+14     	; 0xbbfc <__divsf3_pse+0x3a>
    bbee:	e0 e8       	ldi	r30, 0x80	; 128
    bbf0:	30 d0       	rcall	.+96     	; 0xbc52 <__divsf3_pse+0x90>
    bbf2:	91 50       	subi	r25, 0x01	; 1
    bbf4:	50 40       	sbci	r21, 0x00	; 0
    bbf6:	e6 95       	lsr	r30
    bbf8:	00 1c       	adc	r0, r0
    bbfa:	ca f7       	brpl	.-14     	; 0xbbee <__divsf3_pse+0x2c>
    bbfc:	29 d0       	rcall	.+82     	; 0xbc50 <__divsf3_pse+0x8e>
    bbfe:	fe 2f       	mov	r31, r30
    bc00:	27 d0       	rcall	.+78     	; 0xbc50 <__divsf3_pse+0x8e>
    bc02:	66 0f       	add	r22, r22
    bc04:	77 1f       	adc	r23, r23
    bc06:	88 1f       	adc	r24, r24
    bc08:	bb 1f       	adc	r27, r27
    bc0a:	26 17       	cp	r18, r22
    bc0c:	37 07       	cpc	r19, r23
    bc0e:	48 07       	cpc	r20, r24
    bc10:	ab 07       	cpc	r26, r27
    bc12:	b0 e8       	ldi	r27, 0x80	; 128
    bc14:	09 f0       	breq	.+2      	; 0xbc18 <__divsf3_pse+0x56>
    bc16:	bb 0b       	sbc	r27, r27
    bc18:	80 2d       	mov	r24, r0
    bc1a:	bf 01       	movw	r22, r30
    bc1c:	ff 27       	eor	r31, r31
    bc1e:	93 58       	subi	r25, 0x83	; 131
    bc20:	5f 4f       	sbci	r21, 0xFF	; 255
    bc22:	2a f0       	brmi	.+10     	; 0xbc2e <__divsf3_pse+0x6c>
    bc24:	9e 3f       	cpi	r25, 0xFE	; 254
    bc26:	51 05       	cpc	r21, r1
    bc28:	68 f0       	brcs	.+26     	; 0xbc44 <__divsf3_pse+0x82>
    bc2a:	b6 c0       	rjmp	.+364    	; 0xbd98 <__fp_inf>
    bc2c:	00 c1       	rjmp	.+512    	; 0xbe2e <__fp_szero>
    bc2e:	5f 3f       	cpi	r21, 0xFF	; 255
    bc30:	ec f3       	brlt	.-6      	; 0xbc2c <__divsf3_pse+0x6a>
    bc32:	98 3e       	cpi	r25, 0xE8	; 232
    bc34:	dc f3       	brlt	.-10     	; 0xbc2c <__divsf3_pse+0x6a>
    bc36:	86 95       	lsr	r24
    bc38:	77 95       	ror	r23
    bc3a:	67 95       	ror	r22
    bc3c:	b7 95       	ror	r27
    bc3e:	f7 95       	ror	r31
    bc40:	9f 5f       	subi	r25, 0xFF	; 255
    bc42:	c9 f7       	brne	.-14     	; 0xbc36 <__divsf3_pse+0x74>
    bc44:	88 0f       	add	r24, r24
    bc46:	91 1d       	adc	r25, r1
    bc48:	96 95       	lsr	r25
    bc4a:	87 95       	ror	r24
    bc4c:	97 f9       	bld	r25, 7
    bc4e:	08 95       	ret
    bc50:	e1 e0       	ldi	r30, 0x01	; 1
    bc52:	66 0f       	add	r22, r22
    bc54:	77 1f       	adc	r23, r23
    bc56:	88 1f       	adc	r24, r24
    bc58:	bb 1f       	adc	r27, r27
    bc5a:	62 17       	cp	r22, r18
    bc5c:	73 07       	cpc	r23, r19
    bc5e:	84 07       	cpc	r24, r20
    bc60:	ba 07       	cpc	r27, r26
    bc62:	20 f0       	brcs	.+8      	; 0xbc6c <__divsf3_pse+0xaa>
    bc64:	62 1b       	sub	r22, r18
    bc66:	73 0b       	sbc	r23, r19
    bc68:	84 0b       	sbc	r24, r20
    bc6a:	ba 0b       	sbc	r27, r26
    bc6c:	ee 1f       	adc	r30, r30
    bc6e:	88 f7       	brcc	.-30     	; 0xbc52 <__divsf3_pse+0x90>
    bc70:	e0 95       	com	r30
    bc72:	08 95       	ret

0000bc74 <__fixsfsi>:
    bc74:	04 d0       	rcall	.+8      	; 0xbc7e <__fixunssfsi>
    bc76:	68 94       	set
    bc78:	b1 11       	cpse	r27, r1
    bc7a:	d9 c0       	rjmp	.+434    	; 0xbe2e <__fp_szero>
    bc7c:	08 95       	ret

0000bc7e <__fixunssfsi>:
    bc7e:	bc d0       	rcall	.+376    	; 0xbdf8 <__fp_splitA>
    bc80:	88 f0       	brcs	.+34     	; 0xbca4 <__fixunssfsi+0x26>
    bc82:	9f 57       	subi	r25, 0x7F	; 127
    bc84:	90 f0       	brcs	.+36     	; 0xbcaa <__fixunssfsi+0x2c>
    bc86:	b9 2f       	mov	r27, r25
    bc88:	99 27       	eor	r25, r25
    bc8a:	b7 51       	subi	r27, 0x17	; 23
    bc8c:	a0 f0       	brcs	.+40     	; 0xbcb6 <__fixunssfsi+0x38>
    bc8e:	d1 f0       	breq	.+52     	; 0xbcc4 <__fixunssfsi+0x46>
    bc90:	66 0f       	add	r22, r22
    bc92:	77 1f       	adc	r23, r23
    bc94:	88 1f       	adc	r24, r24
    bc96:	99 1f       	adc	r25, r25
    bc98:	1a f0       	brmi	.+6      	; 0xbca0 <__fixunssfsi+0x22>
    bc9a:	ba 95       	dec	r27
    bc9c:	c9 f7       	brne	.-14     	; 0xbc90 <__fixunssfsi+0x12>
    bc9e:	12 c0       	rjmp	.+36     	; 0xbcc4 <__fixunssfsi+0x46>
    bca0:	b1 30       	cpi	r27, 0x01	; 1
    bca2:	81 f0       	breq	.+32     	; 0xbcc4 <__fixunssfsi+0x46>
    bca4:	c3 d0       	rcall	.+390    	; 0xbe2c <__fp_zero>
    bca6:	b1 e0       	ldi	r27, 0x01	; 1
    bca8:	08 95       	ret
    bcaa:	c0 c0       	rjmp	.+384    	; 0xbe2c <__fp_zero>
    bcac:	67 2f       	mov	r22, r23
    bcae:	78 2f       	mov	r23, r24
    bcb0:	88 27       	eor	r24, r24
    bcb2:	b8 5f       	subi	r27, 0xF8	; 248
    bcb4:	39 f0       	breq	.+14     	; 0xbcc4 <__fixunssfsi+0x46>
    bcb6:	b9 3f       	cpi	r27, 0xF9	; 249
    bcb8:	cc f3       	brlt	.-14     	; 0xbcac <__fixunssfsi+0x2e>
    bcba:	86 95       	lsr	r24
    bcbc:	77 95       	ror	r23
    bcbe:	67 95       	ror	r22
    bcc0:	b3 95       	inc	r27
    bcc2:	d9 f7       	brne	.-10     	; 0xbcba <__fixunssfsi+0x3c>
    bcc4:	3e f4       	brtc	.+14     	; 0xbcd4 <__fixunssfsi+0x56>
    bcc6:	90 95       	com	r25
    bcc8:	80 95       	com	r24
    bcca:	70 95       	com	r23
    bccc:	61 95       	neg	r22
    bcce:	7f 4f       	sbci	r23, 0xFF	; 255
    bcd0:	8f 4f       	sbci	r24, 0xFF	; 255
    bcd2:	9f 4f       	sbci	r25, 0xFF	; 255
    bcd4:	08 95       	ret

0000bcd6 <__floatunsisf>:
    bcd6:	e8 94       	clt
    bcd8:	09 c0       	rjmp	.+18     	; 0xbcec <__floatsisf+0x12>

0000bcda <__floatsisf>:
    bcda:	97 fb       	bst	r25, 7
    bcdc:	3e f4       	brtc	.+14     	; 0xbcec <__floatsisf+0x12>
    bcde:	90 95       	com	r25
    bce0:	80 95       	com	r24
    bce2:	70 95       	com	r23
    bce4:	61 95       	neg	r22
    bce6:	7f 4f       	sbci	r23, 0xFF	; 255
    bce8:	8f 4f       	sbci	r24, 0xFF	; 255
    bcea:	9f 4f       	sbci	r25, 0xFF	; 255
    bcec:	99 23       	and	r25, r25
    bcee:	a9 f0       	breq	.+42     	; 0xbd1a <__floatsisf+0x40>
    bcf0:	f9 2f       	mov	r31, r25
    bcf2:	96 e9       	ldi	r25, 0x96	; 150
    bcf4:	bb 27       	eor	r27, r27
    bcf6:	93 95       	inc	r25
    bcf8:	f6 95       	lsr	r31
    bcfa:	87 95       	ror	r24
    bcfc:	77 95       	ror	r23
    bcfe:	67 95       	ror	r22
    bd00:	b7 95       	ror	r27
    bd02:	f1 11       	cpse	r31, r1
    bd04:	f8 cf       	rjmp	.-16     	; 0xbcf6 <__floatsisf+0x1c>
    bd06:	fa f4       	brpl	.+62     	; 0xbd46 <__floatsisf+0x6c>
    bd08:	bb 0f       	add	r27, r27
    bd0a:	11 f4       	brne	.+4      	; 0xbd10 <__floatsisf+0x36>
    bd0c:	60 ff       	sbrs	r22, 0
    bd0e:	1b c0       	rjmp	.+54     	; 0xbd46 <__floatsisf+0x6c>
    bd10:	6f 5f       	subi	r22, 0xFF	; 255
    bd12:	7f 4f       	sbci	r23, 0xFF	; 255
    bd14:	8f 4f       	sbci	r24, 0xFF	; 255
    bd16:	9f 4f       	sbci	r25, 0xFF	; 255
    bd18:	16 c0       	rjmp	.+44     	; 0xbd46 <__floatsisf+0x6c>
    bd1a:	88 23       	and	r24, r24
    bd1c:	11 f0       	breq	.+4      	; 0xbd22 <__floatsisf+0x48>
    bd1e:	96 e9       	ldi	r25, 0x96	; 150
    bd20:	11 c0       	rjmp	.+34     	; 0xbd44 <__floatsisf+0x6a>
    bd22:	77 23       	and	r23, r23
    bd24:	21 f0       	breq	.+8      	; 0xbd2e <__floatsisf+0x54>
    bd26:	9e e8       	ldi	r25, 0x8E	; 142
    bd28:	87 2f       	mov	r24, r23
    bd2a:	76 2f       	mov	r23, r22
    bd2c:	05 c0       	rjmp	.+10     	; 0xbd38 <__floatsisf+0x5e>
    bd2e:	66 23       	and	r22, r22
    bd30:	71 f0       	breq	.+28     	; 0xbd4e <__floatsisf+0x74>
    bd32:	96 e8       	ldi	r25, 0x86	; 134
    bd34:	86 2f       	mov	r24, r22
    bd36:	70 e0       	ldi	r23, 0x00	; 0
    bd38:	60 e0       	ldi	r22, 0x00	; 0
    bd3a:	2a f0       	brmi	.+10     	; 0xbd46 <__floatsisf+0x6c>
    bd3c:	9a 95       	dec	r25
    bd3e:	66 0f       	add	r22, r22
    bd40:	77 1f       	adc	r23, r23
    bd42:	88 1f       	adc	r24, r24
    bd44:	da f7       	brpl	.-10     	; 0xbd3c <__floatsisf+0x62>
    bd46:	88 0f       	add	r24, r24
    bd48:	96 95       	lsr	r25
    bd4a:	87 95       	ror	r24
    bd4c:	97 f9       	bld	r25, 7
    bd4e:	08 95       	ret

0000bd50 <__fp_cmp>:
    bd50:	99 0f       	add	r25, r25
    bd52:	00 08       	sbc	r0, r0
    bd54:	55 0f       	add	r21, r21
    bd56:	aa 0b       	sbc	r26, r26
    bd58:	e0 e8       	ldi	r30, 0x80	; 128
    bd5a:	fe ef       	ldi	r31, 0xFE	; 254
    bd5c:	16 16       	cp	r1, r22
    bd5e:	17 06       	cpc	r1, r23
    bd60:	e8 07       	cpc	r30, r24
    bd62:	f9 07       	cpc	r31, r25
    bd64:	c0 f0       	brcs	.+48     	; 0xbd96 <__fp_cmp+0x46>
    bd66:	12 16       	cp	r1, r18
    bd68:	13 06       	cpc	r1, r19
    bd6a:	e4 07       	cpc	r30, r20
    bd6c:	f5 07       	cpc	r31, r21
    bd6e:	98 f0       	brcs	.+38     	; 0xbd96 <__fp_cmp+0x46>
    bd70:	62 1b       	sub	r22, r18
    bd72:	73 0b       	sbc	r23, r19
    bd74:	84 0b       	sbc	r24, r20
    bd76:	95 0b       	sbc	r25, r21
    bd78:	39 f4       	brne	.+14     	; 0xbd88 <__fp_cmp+0x38>
    bd7a:	0a 26       	eor	r0, r26
    bd7c:	61 f0       	breq	.+24     	; 0xbd96 <__fp_cmp+0x46>
    bd7e:	23 2b       	or	r18, r19
    bd80:	24 2b       	or	r18, r20
    bd82:	25 2b       	or	r18, r21
    bd84:	21 f4       	brne	.+8      	; 0xbd8e <__fp_cmp+0x3e>
    bd86:	08 95       	ret
    bd88:	0a 26       	eor	r0, r26
    bd8a:	09 f4       	brne	.+2      	; 0xbd8e <__fp_cmp+0x3e>
    bd8c:	a1 40       	sbci	r26, 0x01	; 1
    bd8e:	a6 95       	lsr	r26
    bd90:	8f ef       	ldi	r24, 0xFF	; 255
    bd92:	81 1d       	adc	r24, r1
    bd94:	81 1d       	adc	r24, r1
    bd96:	08 95       	ret

0000bd98 <__fp_inf>:
    bd98:	97 f9       	bld	r25, 7
    bd9a:	9f 67       	ori	r25, 0x7F	; 127
    bd9c:	80 e8       	ldi	r24, 0x80	; 128
    bd9e:	70 e0       	ldi	r23, 0x00	; 0
    bda0:	60 e0       	ldi	r22, 0x00	; 0
    bda2:	08 95       	ret

0000bda4 <__fp_nan>:
    bda4:	9f ef       	ldi	r25, 0xFF	; 255
    bda6:	80 ec       	ldi	r24, 0xC0	; 192
    bda8:	08 95       	ret

0000bdaa <__fp_pscA>:
    bdaa:	00 24       	eor	r0, r0
    bdac:	0a 94       	dec	r0
    bdae:	16 16       	cp	r1, r22
    bdb0:	17 06       	cpc	r1, r23
    bdb2:	18 06       	cpc	r1, r24
    bdb4:	09 06       	cpc	r0, r25
    bdb6:	08 95       	ret

0000bdb8 <__fp_pscB>:
    bdb8:	00 24       	eor	r0, r0
    bdba:	0a 94       	dec	r0
    bdbc:	12 16       	cp	r1, r18
    bdbe:	13 06       	cpc	r1, r19
    bdc0:	14 06       	cpc	r1, r20
    bdc2:	05 06       	cpc	r0, r21
    bdc4:	08 95       	ret

0000bdc6 <__fp_round>:
    bdc6:	09 2e       	mov	r0, r25
    bdc8:	03 94       	inc	r0
    bdca:	00 0c       	add	r0, r0
    bdcc:	11 f4       	brne	.+4      	; 0xbdd2 <__fp_round+0xc>
    bdce:	88 23       	and	r24, r24
    bdd0:	52 f0       	brmi	.+20     	; 0xbde6 <__fp_round+0x20>
    bdd2:	bb 0f       	add	r27, r27
    bdd4:	40 f4       	brcc	.+16     	; 0xbde6 <__fp_round+0x20>
    bdd6:	bf 2b       	or	r27, r31
    bdd8:	11 f4       	brne	.+4      	; 0xbdde <__fp_round+0x18>
    bdda:	60 ff       	sbrs	r22, 0
    bddc:	04 c0       	rjmp	.+8      	; 0xbde6 <__fp_round+0x20>
    bdde:	6f 5f       	subi	r22, 0xFF	; 255
    bde0:	7f 4f       	sbci	r23, 0xFF	; 255
    bde2:	8f 4f       	sbci	r24, 0xFF	; 255
    bde4:	9f 4f       	sbci	r25, 0xFF	; 255
    bde6:	08 95       	ret

0000bde8 <__fp_split3>:
    bde8:	57 fd       	sbrc	r21, 7
    bdea:	90 58       	subi	r25, 0x80	; 128
    bdec:	44 0f       	add	r20, r20
    bdee:	55 1f       	adc	r21, r21
    bdf0:	59 f0       	breq	.+22     	; 0xbe08 <__fp_splitA+0x10>
    bdf2:	5f 3f       	cpi	r21, 0xFF	; 255
    bdf4:	71 f0       	breq	.+28     	; 0xbe12 <__fp_splitA+0x1a>
    bdf6:	47 95       	ror	r20

0000bdf8 <__fp_splitA>:
    bdf8:	88 0f       	add	r24, r24
    bdfa:	97 fb       	bst	r25, 7
    bdfc:	99 1f       	adc	r25, r25
    bdfe:	61 f0       	breq	.+24     	; 0xbe18 <__fp_splitA+0x20>
    be00:	9f 3f       	cpi	r25, 0xFF	; 255
    be02:	79 f0       	breq	.+30     	; 0xbe22 <__fp_splitA+0x2a>
    be04:	87 95       	ror	r24
    be06:	08 95       	ret
    be08:	12 16       	cp	r1, r18
    be0a:	13 06       	cpc	r1, r19
    be0c:	14 06       	cpc	r1, r20
    be0e:	55 1f       	adc	r21, r21
    be10:	f2 cf       	rjmp	.-28     	; 0xbdf6 <__fp_split3+0xe>
    be12:	46 95       	lsr	r20
    be14:	f1 df       	rcall	.-30     	; 0xbdf8 <__fp_splitA>
    be16:	08 c0       	rjmp	.+16     	; 0xbe28 <__fp_splitA+0x30>
    be18:	16 16       	cp	r1, r22
    be1a:	17 06       	cpc	r1, r23
    be1c:	18 06       	cpc	r1, r24
    be1e:	99 1f       	adc	r25, r25
    be20:	f1 cf       	rjmp	.-30     	; 0xbe04 <__fp_splitA+0xc>
    be22:	86 95       	lsr	r24
    be24:	71 05       	cpc	r23, r1
    be26:	61 05       	cpc	r22, r1
    be28:	08 94       	sec
    be2a:	08 95       	ret

0000be2c <__fp_zero>:
    be2c:	e8 94       	clt

0000be2e <__fp_szero>:
    be2e:	bb 27       	eor	r27, r27
    be30:	66 27       	eor	r22, r22
    be32:	77 27       	eor	r23, r23
    be34:	cb 01       	movw	r24, r22
    be36:	97 f9       	bld	r25, 7
    be38:	08 95       	ret

0000be3a <__gesf2>:
    be3a:	8a df       	rcall	.-236    	; 0xbd50 <__fp_cmp>
    be3c:	08 f4       	brcc	.+2      	; 0xbe40 <__gesf2+0x6>
    be3e:	8f ef       	ldi	r24, 0xFF	; 255
    be40:	08 95       	ret

0000be42 <__mulsf3>:
    be42:	0b d0       	rcall	.+22     	; 0xbe5a <__mulsf3x>
    be44:	c0 cf       	rjmp	.-128    	; 0xbdc6 <__fp_round>
    be46:	b1 df       	rcall	.-158    	; 0xbdaa <__fp_pscA>
    be48:	28 f0       	brcs	.+10     	; 0xbe54 <__mulsf3+0x12>
    be4a:	b6 df       	rcall	.-148    	; 0xbdb8 <__fp_pscB>
    be4c:	18 f0       	brcs	.+6      	; 0xbe54 <__mulsf3+0x12>
    be4e:	95 23       	and	r25, r21
    be50:	09 f0       	breq	.+2      	; 0xbe54 <__mulsf3+0x12>
    be52:	a2 cf       	rjmp	.-188    	; 0xbd98 <__fp_inf>
    be54:	a7 cf       	rjmp	.-178    	; 0xbda4 <__fp_nan>
    be56:	11 24       	eor	r1, r1
    be58:	ea cf       	rjmp	.-44     	; 0xbe2e <__fp_szero>

0000be5a <__mulsf3x>:
    be5a:	c6 df       	rcall	.-116    	; 0xbde8 <__fp_split3>
    be5c:	a0 f3       	brcs	.-24     	; 0xbe46 <__mulsf3+0x4>

0000be5e <__mulsf3_pse>:
    be5e:	95 9f       	mul	r25, r21
    be60:	d1 f3       	breq	.-12     	; 0xbe56 <__mulsf3+0x14>
    be62:	95 0f       	add	r25, r21
    be64:	50 e0       	ldi	r21, 0x00	; 0
    be66:	55 1f       	adc	r21, r21
    be68:	62 9f       	mul	r22, r18
    be6a:	f0 01       	movw	r30, r0
    be6c:	72 9f       	mul	r23, r18
    be6e:	bb 27       	eor	r27, r27
    be70:	f0 0d       	add	r31, r0
    be72:	b1 1d       	adc	r27, r1
    be74:	63 9f       	mul	r22, r19
    be76:	aa 27       	eor	r26, r26
    be78:	f0 0d       	add	r31, r0
    be7a:	b1 1d       	adc	r27, r1
    be7c:	aa 1f       	adc	r26, r26
    be7e:	64 9f       	mul	r22, r20
    be80:	66 27       	eor	r22, r22
    be82:	b0 0d       	add	r27, r0
    be84:	a1 1d       	adc	r26, r1
    be86:	66 1f       	adc	r22, r22
    be88:	82 9f       	mul	r24, r18
    be8a:	22 27       	eor	r18, r18
    be8c:	b0 0d       	add	r27, r0
    be8e:	a1 1d       	adc	r26, r1
    be90:	62 1f       	adc	r22, r18
    be92:	73 9f       	mul	r23, r19
    be94:	b0 0d       	add	r27, r0
    be96:	a1 1d       	adc	r26, r1
    be98:	62 1f       	adc	r22, r18
    be9a:	83 9f       	mul	r24, r19
    be9c:	a0 0d       	add	r26, r0
    be9e:	61 1d       	adc	r22, r1
    bea0:	22 1f       	adc	r18, r18
    bea2:	74 9f       	mul	r23, r20
    bea4:	33 27       	eor	r19, r19
    bea6:	a0 0d       	add	r26, r0
    bea8:	61 1d       	adc	r22, r1
    beaa:	23 1f       	adc	r18, r19
    beac:	84 9f       	mul	r24, r20
    beae:	60 0d       	add	r22, r0
    beb0:	21 1d       	adc	r18, r1
    beb2:	82 2f       	mov	r24, r18
    beb4:	76 2f       	mov	r23, r22
    beb6:	6a 2f       	mov	r22, r26
    beb8:	11 24       	eor	r1, r1
    beba:	9f 57       	subi	r25, 0x7F	; 127
    bebc:	50 40       	sbci	r21, 0x00	; 0
    bebe:	8a f0       	brmi	.+34     	; 0xbee2 <__mulsf3_pse+0x84>
    bec0:	e1 f0       	breq	.+56     	; 0xbefa <__mulsf3_pse+0x9c>
    bec2:	88 23       	and	r24, r24
    bec4:	4a f0       	brmi	.+18     	; 0xbed8 <__mulsf3_pse+0x7a>
    bec6:	ee 0f       	add	r30, r30
    bec8:	ff 1f       	adc	r31, r31
    beca:	bb 1f       	adc	r27, r27
    becc:	66 1f       	adc	r22, r22
    bece:	77 1f       	adc	r23, r23
    bed0:	88 1f       	adc	r24, r24
    bed2:	91 50       	subi	r25, 0x01	; 1
    bed4:	50 40       	sbci	r21, 0x00	; 0
    bed6:	a9 f7       	brne	.-22     	; 0xbec2 <__mulsf3_pse+0x64>
    bed8:	9e 3f       	cpi	r25, 0xFE	; 254
    beda:	51 05       	cpc	r21, r1
    bedc:	70 f0       	brcs	.+28     	; 0xbefa <__mulsf3_pse+0x9c>
    bede:	5c cf       	rjmp	.-328    	; 0xbd98 <__fp_inf>
    bee0:	a6 cf       	rjmp	.-180    	; 0xbe2e <__fp_szero>
    bee2:	5f 3f       	cpi	r21, 0xFF	; 255
    bee4:	ec f3       	brlt	.-6      	; 0xbee0 <__mulsf3_pse+0x82>
    bee6:	98 3e       	cpi	r25, 0xE8	; 232
    bee8:	dc f3       	brlt	.-10     	; 0xbee0 <__mulsf3_pse+0x82>
    beea:	86 95       	lsr	r24
    beec:	77 95       	ror	r23
    beee:	67 95       	ror	r22
    bef0:	b7 95       	ror	r27
    bef2:	f7 95       	ror	r31
    bef4:	e7 95       	ror	r30
    bef6:	9f 5f       	subi	r25, 0xFF	; 255
    bef8:	c1 f7       	brne	.-16     	; 0xbeea <__mulsf3_pse+0x8c>
    befa:	fe 2b       	or	r31, r30
    befc:	88 0f       	add	r24, r24
    befe:	91 1d       	adc	r25, r1
    bf00:	96 95       	lsr	r25
    bf02:	87 95       	ror	r24
    bf04:	97 f9       	bld	r25, 7
    bf06:	08 95       	ret

0000bf08 <memcpy_P>:
    bf08:	fb 01       	movw	r30, r22
    bf0a:	dc 01       	movw	r26, r24
    bf0c:	02 c0       	rjmp	.+4      	; 0xbf12 <memcpy_P+0xa>
    bf0e:	05 90       	lpm	r0, Z+
    bf10:	0d 92       	st	X+, r0
    bf12:	41 50       	subi	r20, 0x01	; 1
    bf14:	50 40       	sbci	r21, 0x00	; 0
    bf16:	d8 f7       	brcc	.-10     	; 0xbf0e <memcpy_P+0x6>
    bf18:	08 95       	ret

0000bf1a <_exit>:
    bf1a:	f8 94       	cli

0000bf1c <__stop_program>:
    bf1c:	ff cf       	rjmp	.-2      	; 0xbf1c <__stop_program>
