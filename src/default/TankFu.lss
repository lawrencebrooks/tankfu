
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000abd2  0000acd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000abd2  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e87  00800144  00800144  0000ad24  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000ad18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b5d5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  0000b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007cf0  00000000  00000000  0000bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ff  00000000  00000000  00013830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b40  00000000  00000000  00014d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a4  00000000  00000000  00016870  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018b3  00000000  00000000  00017a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006e20  00000000  00000000  000192c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  000200e8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 2e 	jmp	0x5db8	; 0x5db8 <__ctors_end>
       4:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
       8:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
       c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      10:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      14:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      18:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      1c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      20:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      24:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      28:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      2c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      30:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      34:	0c 94 1d 31 	jmp	0x623a	; 0x623a <__vector_13>
      38:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__vector_14>
      3c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      40:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      44:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      48:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      4c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      50:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      54:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      58:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      5c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      60:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      64:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      68:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      6c:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__bad_interrupt>
      70:	08 4c       	sbci	r16, 0xC8	; 200
      72:	0d 4c       	sbci	r16, 0xCD	; 205
      74:	10 4c       	sbci	r17, 0xC0	; 192
      76:	13 4c       	sbci	r17, 0xC3	; 195
      78:	16 4c       	sbci	r17, 0xC6	; 198
      7a:	19 4c       	sbci	r17, 0xC9	; 201
      7c:	1c 4c       	sbci	r17, 0xCC	; 204
      7e:	1f 4c       	sbci	r17, 0xCF	; 207
      80:	22 4c       	sbci	r18, 0xC2	; 194

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	67 34 6a 34 c5 34 c9 34 d1 34 72 34 77 34 7c 34     g4j4.4.4.4r4w4|4
      e0:	d9 34 7f 34 82 34 85 34 c2 34                       .4.4.4.4.4

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 4c 65 76 65 6c 20 4f 6e 65 00 20 20 4c 65       Level One.  Le
     106:	76 65 6c 20 54 77 6f 00 4c 65 76 65 6c 20 54 68     vel Two.Level Th
     116:	72 65 65 00 20 4c 65 76 65 6c 20 46 6f 75 72 00     ree. Level Four.
     126:	20 4c 65 76 65 6c 20 46 69 76 65 00 20 20 4c 65      Level Five.  Le
     136:	76 65 6c 20 53 69 78 00 4c 65 76 65 6c 20 53 65     vel Six.Level Se
     146:	76 65 6e 00 4c 65 76 65 6c 20 45 69 67 68 74 00     ven.Level Eight.
     156:	20 4c 65 76 65 6c 20 4e 69 6e 65 00 20 20 4c 65      Level Nine.  Le
     166:	76 65 6c 20 54 65 6e 00                             vel Ten.

0000016e <strPaused>:
     16e:	50 61 75 73 65 64 00                                Paused.

00000175 <strExit>:
     175:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

0000017e <strTotal>:
     17e:	54 6f 74 61 6c 3a 00                                Total:.

00000185 <strScore>:
     185:	53 63 6f 72 65 3a 00                                Score:.

0000018c <strBanterClear>:
     18c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

0000019b <banter_map>:
     19b:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1ab:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1bb:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1cb:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     1db:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     1eb:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     1fb:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     20b:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     21b:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     22b:	20 20 20 20 20 00                                        .

00000231 <strBy>:
     231:	42 79 00                                            By.

00000234 <strOwns>:
     234:	50 77 6e 73 00                                      Pwns.

00000239 <strChangeHandle>:
     239:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000248 <strCancelHandle>:
     248:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000253 <strConfirmHandle>:
     253:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

0000025f <strSelectHandle>:
     25f:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

0000026a <strPlayer2>:
     26a:	50 32 00                                            P2.

0000026d <strPlayer1>:
     26d:	50 31 00                                            P1.

00000270 <strVertSep>:
     270:	7c 00                                               |.

00000272 <strUnderline>:
     272:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000027e <strHandlesTitle>:
     27e:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

0000028a <strHighscores>:
     28a:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000294 <str2Player>:
     294:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002a5 <str1Player>:
     2a5:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000002b3 <strCopyright>:
     2b3:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     2c3:	42 72 6f 6f 6b 73 00                                Brooks.

000002ca <my_patches>:
     2ca:	02 f7 2d 00 00 ff ff 00 00 02 12 27 00 00 e3 06     ..-........'....
     2da:	e4 06 02 cb 24 00 00 45 02 46 02 02 1a 23 00 00     ....$..E.F...#..
     2ea:	af 01 b0 01 02 19 23 00 00 ff ff 00 00 02 18 23     ......#........#
     2fa:	00 00 ff ff 00 00 02 17 23 00 00 ff ff 00 00 02     ........#.......
     30a:	a5 21 00 00 70 01 71 01 02 a4 21 00 00 ff ff 00     .!..p.q...!.....
     31a:	00 02 a3 21 00 00 ff ff 00 00 02 a2 21 00 00 ff     ...!........!...
     32a:	ff 00 00 02 a1 21 00 00 ff ff 00 00 02 a0 21 00     .....!........!.
     33a:	00 00 00 00 00                                      .....

0000033f <level_data>:
     33f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     34f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     35f:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     36f:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     37f:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     38f:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     3b3:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     3cf:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     3ef:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     407:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     417:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     427:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     443:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     453:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     463:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     47f:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     48f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     49f:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     4bb:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     4cb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4db:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     4f7:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     507:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     517:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     533:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     543:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     553:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     563:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     573:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     593:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     5af:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     5cf:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     5eb:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     607:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     617:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     627:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     797:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     7a7:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
     a83:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
     a9b:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
     d73:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     d83:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    105f:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1077:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    134f:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    135f:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    163b:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1653:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    192b:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    193b:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1c17:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1c2f:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1f07:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1f17:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

0000208b <map_rocket_right_1>:
    208b:	01 01 26                                            ..&

0000208e <map_rocket_right_0>:
    208e:	01 01 25                                            ..%

00002091 <map_rocket_up_1>:
    2091:	01 01 24                                            ..$

00002094 <map_rocket_up_0>:
    2094:	01 01 23                                            ..#

00002097 <map_ball>:
    2097:	01 01 22                                            .."

0000209a <map_explosion_2>:
    209a:	02 02 0c 0d 0d 0c                                   ......

000020a0 <map_explosion_1>:
    20a0:	02 02 0a 0b 18 19                                   ......

000020a6 <map_explosion_0>:
    20a6:	02 02 08 09 16 17                                   ......

000020ac <map_tank2_right_1>:
    20ac:	02 02 20 21 2e 2f                                   .. !./

000020b2 <map_tank2_right_0>:
    20b2:	02 02 1e 1f 2c 2d                                   ....,-

000020b8 <map_tank2_up_1>:
    20b8:	02 02 1c 1d 2a 2b                                   ....*+

000020be <map_tank2_up_0>:
    20be:	02 02 1a 1b 28 29                                   ....()

000020c4 <map_tank1_right_1>:
    20c4:	02 02 06 07 14 15                                   ......

000020ca <map_tank1_right_0>:
    20ca:	02 02 04 05 12 13                                   ......

000020d0 <map_tank1_up_1>:
    20d0:	02 02 02 03 10 11                                   ......

000020d6 <map_tank1_up_0>:
    20d6:	02 02 00 01 0e 0f                                   ......

000020dc <map_none>:
    20dc:	01 01 27                                            ..'

000020df <map_tank_blank>:
    20df:	02 02 27 27 27 27                                   ..''''

000020e5 <map_metal_bl>:
    20e5:	01 01 0c                                            ...

000020e8 <map_metal_tr>:
    20e8:	01 01 0b                                            ...

000020eb <map_metal_br>:
    20eb:	01 01 0a                                            ...

000020ee <map_metal_tl>:
    20ee:	01 01 09                                            ...

000020f1 <map_tile_exp_2>:
    20f1:	01 01 08                                            ...

000020f4 <map_tile_exp_1>:
    20f4:	01 01 07                                            ...

000020f7 <map_tile_exp_0>:
    20f7:	01 01 06                                            ...

000020fa <map_rocket_itm>:
    20fa:	01 01 04                                            ...

000020fd <map_explode_itm>:
    20fd:	01 01 03                                            ...

00002100 <map_speed_itm>:
    2100:	01 01 02                                            ...

00002103 <map_metal>:
    2103:	01 01 05                                            ...

00002106 <map_brick>:
    2106:	01 01 01                                            ...

00002109 <map_tile_none>:
    2109:	01 01 00                                            ...

0000210c <map_pause>:
    210c:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    211c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    212c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    213c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000214a <map_splash>:
    214a:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    215a:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    216a:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    217a:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    218a:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    219a:	2a 00 00 2c 2d 2e                                   *..,-.

000021a0 <ad_silence>:
	...

000021a1 <ad_tracks>:
	...

000021a2 <ad_tank_explode>:
	...

000021a3 <ad_splash>:
	...

000021a4 <ad_rocket>:
	...

000021a5 <ad_navigate>:
    21a5:	ff fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    21b5:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    21c5:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    21d5:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    21e5:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    21f5:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    2205:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    2215:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    2225:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    2235:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    2245:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    2255:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    2265:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    2275:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    2285:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    2295:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    22a5:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    22b5:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    22c5:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    22d5:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    22e5:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    22f5:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    2305:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
    2315:	fe 00                                               ..

00002317 <ad_metal>:
	...

00002318 <ad_level_start>:
	...

00002319 <ad_level_clear>:
	...

0000231a <ad_item>:
    231a:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    232a:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    233a:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    234a:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    235a:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    236a:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    237a:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    238a:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    239a:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    23aa:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    23ba:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    23ca:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    23da:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    23ea:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    23fa:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    240a:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    241a:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    242a:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    243a:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    244a:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    245a:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    246a:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    247a:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    248a:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    249a:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    24aa:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    24ba:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

000024cb <ad_cannonball>:
    24cb:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    24db:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    24eb:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    24fb:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    250b:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    251b:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    252b:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    253b:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    254b:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    255b:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    256b:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    257b:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    258b:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    259b:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    25ab:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    25bb:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    25cb:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    25db:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    25eb:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    25fb:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    260b:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    261b:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    262b:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    263b:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    264b:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    265b:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    266b:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    267b:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    268b:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    269b:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    26ab:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    26bb:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    26cb:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    26db:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    26eb:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    26fb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    270b:	ff ff ff ff ff ff 00                                .......

00002712 <ad_brick_explode>:
    2712:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    2722:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    2732:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    2742:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    2752:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    2762:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    2772:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    2782:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    2792:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    27a2:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    27b2:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    27c2:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    27d2:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    27e2:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    27f2:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2802:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2812:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2822:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2832:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2842:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2852:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2862:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2872:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2882:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2892:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    28a2:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    28b2:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    28c2:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    28d2:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    28e2:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    28f2:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2902:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2912:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2922:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2932:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2942:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2952:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2962:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2972:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2982:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2992:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    29a2:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    29b2:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    29c2:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    29d2:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    29e2:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    29f2:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2a02:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2a12:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2a22:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2a32:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2a42:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    2a52:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    2a62:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    2a72:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    2a82:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    2a92:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    2aa2:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    2ab2:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    2ac2:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    2ad2:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    2ae2:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    2af2:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    2b02:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    2b12:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    2b22:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    2b32:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    2b42:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    2b52:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    2b62:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    2b72:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    2b82:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    2b92:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    2ba2:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    2bb2:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    2bc2:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    2bd2:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    2be2:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    2bf2:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    2c02:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    2c12:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    2c22:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    2c32:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    2c42:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    2c52:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    2c62:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    2c72:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    2c82:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    2c92:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    2ca2:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    2cb2:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    2cc2:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    2cd2:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    2ce2:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    2cf2:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    2d02:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    2d12:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    2d22:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    2d32:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    2d42:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    2d52:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    2d62:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    2d72:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    2d82:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    2d92:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    2da2:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    2db2:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    2dc2:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    2dd2:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    2de2:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    2df2:	04 04 02 01 00                                      .....

00002df7 <ad_banter>:
	...

00002df8 <sprites_data>:
    2df8:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2e08:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    2e18:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    2e28:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2e38:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2e48:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2e58:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    2e68:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    2e78:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2e88:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    2e98:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    2ea8:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    2eb8:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2ec8:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    2ed8:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    2ee8:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    2ef8:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2f08:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2f18:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2f28:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2f38:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2f48:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2f58:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2f68:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2f78:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2f88:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    2f98:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2fa8:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2fb8:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2fc8:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    2fd8:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2fe8:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2ff8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3008:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3018:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3028:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3038:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3048:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3058:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3068:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3078:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3088:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3098:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    30a8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    30b8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    30c8:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    30d8:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    30e8:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    30f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3108:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3118:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3128:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3138:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3148:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3158:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3168:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3178:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3188:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3198:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    31a8:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    31b8:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    31c8:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    31d8:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    31e8:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    31f8:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3208:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3218:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3228:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3238:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3248:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3258:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3268:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3278:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3288:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3298:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    32a8:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    32b8:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    32c8:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    32d8:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    32e8:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    32f8:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3308:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3318:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3328:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3338:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3348:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3358:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3368:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3378:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3388:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3398:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    33a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    33b8:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    33c8:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    33d8:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    33e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    33f8:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3408:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3418:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3428:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3438:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3448:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3458:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3468:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3478:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3488:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3498:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    34a8:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    34b8:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    34c8:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    34d8:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    34e8:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    34f8:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3508:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3518:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3528:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3538:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3548:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3558:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3568:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3578:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3588:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3598:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    35a8:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    35b8:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    35c8:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    35d8:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    35e8:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    35f8:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3608:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3618:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3628:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3638:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3648:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3658:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3668:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3678:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3688:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3698:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    36a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    36b8:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    36c8:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    36d8:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    36e8:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    36f8:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3708:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3718:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3728:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3738:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3748:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3758:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3768:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3778:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3788:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3798:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    37a8:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37f8:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3808:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3818:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3828:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3838:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3848:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3858:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3868:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3878:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3888:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    3898:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    38a8:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    38b8:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    38c8:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    38d8:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    38e8:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    38f8:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3908:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3918:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3928:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3938:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3948:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3958:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3968:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3978:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3988:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3998:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    39a8:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    39b8:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    39c8:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    39d8:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    39e8:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000039f8 <tiles_data>:
	...
    3a38:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3a48:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3a58:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3a68:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3a78:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    3a88:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    3a98:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    3aa8:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3ab8:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    3ac8:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    3ad8:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    3ae8:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    3af8:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    3b08:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    3b18:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    3b28:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3b38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3b48:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3b58:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    3b68:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3b80:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3b90:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3ba0:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3bb8:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3bc8:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3bd8:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3be8:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3c00:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3c20:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3c38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3c48:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    3c58:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    3c68:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    3c78:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3c88:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3c98:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3ca8:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3cb8:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3cc8:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3cd8:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3ce8:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3cf8:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3d08:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3d18:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    3d28:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3d38:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3d48:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d58:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d68:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    3d78:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3d88:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3d98:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3da8:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    3db8:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3dc8:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3dd8:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3de8:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3df8:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3e08:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e18:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e28:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3e38:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3e48:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3e58:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3e68:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    3e78:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3e88:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e98:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3ea8:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3eb8:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3ec8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3ed8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3ee8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3f18:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3f28:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    3f58:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3f68:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3f78:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3f88:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f98:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3fa8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3fb8:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3fc8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3fd8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3fe8:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3ff8:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4008:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4018:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4028:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4038:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4048:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4058:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4068:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4078:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4088:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4098:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    40a8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    40b8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    40c8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    40d8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    40e8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    40f8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4108:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4118:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4128:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4138:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4148:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4178:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4188:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4198:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    41a8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    41b8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    41c8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    41d8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    41e8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    41f8:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4208:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4218:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4228:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4238:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4248:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4258:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4268:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    42a0:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    42b0:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    42c0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    42d0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    42e0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    42f0:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4300:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4310:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4320:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4330:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4340:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4350:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4360:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4370:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4380:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4390:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    43a0:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    43b0:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    43c0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    43d0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    43e0:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    43f0:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4400:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4410:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4438:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4448:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4458:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4468:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4478:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4488:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4498:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    44a8:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    44b8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44c8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44d8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44e8:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    44f8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4508:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4518:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4528:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4540:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4550:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4560:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4570:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4580:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4590:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    45a0:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    45b0:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4600:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4610:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4628:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4640:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4650:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4680:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    4690:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    46a0:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    46b8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    46c8:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    46d8:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    46e8:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4700:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4710:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4720:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    4738:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    4748:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    4758:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    4768:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    4780:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4790:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    47c4:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    47d4:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    47e4:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    4800:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    4810:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4820:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    4840:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    4850:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    4860:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4880:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4890:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    48a0:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    48e0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    48f0:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4910:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4960:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4984:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    4994:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    49a4:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    49c0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    49d0:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    49e0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4a00:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    4a10:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4a20:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4a40:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4a50:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4a60:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4a80:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4a90:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    4aa0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4ac4:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    4ad4:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    4ae4:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    4b00:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4b10:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4b20:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4b40:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4b50:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4b60:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4b80:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    4b90:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4ba0:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    4bc0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4bd0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4be0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4c00:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4c10:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    4c20:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    4c48:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4c60:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4c88:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4ca0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4cb0:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    4cc0:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4cd0:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    4ce0:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    4d08:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4d20:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4d38:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    4d48:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    4d58:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4d68:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d90:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4da8:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4dc0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4dd0:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    4de0:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    4e00:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4e10:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e20:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4e40:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4e50:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4e60:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4e80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4e90:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4ea0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4ec0:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4ed0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ee0:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4f00:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4f10:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4f20:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4f40:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4f50:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4f60:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4f80:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4f90:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4fa0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4fc0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4fd0:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4fe0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5000:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5010:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5020:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5044:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5054:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5064:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5080:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5090:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    50a0:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    50c0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    50d0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    50e0:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5100:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5110:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5120:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5140:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5150:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5160:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5180:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5190:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    51a0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    51c0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    51d0:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    51e0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5200:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5210:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5220:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5240:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5250:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5260:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5280:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5290:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    52a0:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    52c0:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    52d0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52e0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5300:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5310:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5320:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5340:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5350:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5360:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5380:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5390:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    53a0:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    53c0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    53d0:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    53e0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5400:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5410:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5420:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5440:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5450:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5460:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5480:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5490:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    54a0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    54c0:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    54d0:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    54e0:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5500:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5510:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5520:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5544:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5554:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    55a8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    55c0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    55d0:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    55e0:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5608:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5618:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5628:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5640:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5650:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5660:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5688:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5698:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    56a8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    56c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    56d4:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56e4:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    5708:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5718:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5728:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5744:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5754:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5764:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    5788:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5798:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    57a8:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    57c0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    57d0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57e0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5800:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    5810:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5820:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5844:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5854:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5864:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    5874:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5884:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    5894:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    58a4:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    58c0:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    58d0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    58e0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5908:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    5918:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5928:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5948:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5958:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5968:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5988:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5998:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    59a8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    59d8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    59e8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5a08:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5a18:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5a28:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5a48:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5a58:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a68:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a88:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5a98:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5aa8:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5ac0:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    5ad0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ae0:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    5b08:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b18:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b28:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5b48:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b58:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5b68:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b88:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    5b98:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    5ba8:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5bc8:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5bd8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5be8:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5c08:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c18:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5c28:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5c48:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5c58:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5c68:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5c80:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5c90:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5ca0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5cb8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5cc8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5cd8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ce8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5d00:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    5d10:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    5d20:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5d3c:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5d4c:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    5d5c:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    5d6c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    5d7c:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5d8c:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    5d9c:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00005db8 <__ctors_end>:
    5db8:	11 24       	eor	r1, r1
    5dba:	1f be       	out	0x3f, r1	; 63
    5dbc:	cf ef       	ldi	r28, 0xFF	; 255
    5dbe:	d0 e1       	ldi	r29, 0x10	; 16
    5dc0:	de bf       	out	0x3e, r29	; 62
    5dc2:	cd bf       	out	0x3d, r28	; 61

00005dc4 <__do_copy_data>:
    5dc4:	11 e0       	ldi	r17, 0x01	; 1
    5dc6:	a0 e0       	ldi	r26, 0x00	; 0
    5dc8:	b1 e0       	ldi	r27, 0x01	; 1
    5dca:	e2 ed       	ldi	r30, 0xD2	; 210
    5dcc:	fb ea       	ldi	r31, 0xAB	; 171
    5dce:	02 c0       	rjmp	.+4      	; 0x5dd4 <__do_copy_data+0x10>
    5dd0:	05 90       	lpm	r0, Z+
    5dd2:	0d 92       	st	X+, r0
    5dd4:	a4 34       	cpi	r26, 0x44	; 68
    5dd6:	b1 07       	cpc	r27, r17
    5dd8:	d9 f7       	brne	.-10     	; 0x5dd0 <__do_copy_data+0xc>

00005dda <__do_clear_bss>:
    5dda:	1f e0       	ldi	r17, 0x0F	; 15
    5ddc:	a4 e4       	ldi	r26, 0x44	; 68
    5dde:	b1 e0       	ldi	r27, 0x01	; 1
    5de0:	01 c0       	rjmp	.+2      	; 0x5de4 <.do_clear_bss_start>

00005de2 <.do_clear_bss_loop>:
    5de2:	1d 92       	st	X+, r1

00005de4 <.do_clear_bss_start>:
    5de4:	ab 3c       	cpi	r26, 0xCB	; 203
    5de6:	b1 07       	cpc	r27, r17
    5de8:	e1 f7       	brne	.-8      	; 0x5de2 <.do_clear_bss_loop>

00005dea <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    5dea:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    5dec:	88 e1       	ldi	r24, 0x18	; 24
    5dee:	0f b6       	in	r0, 0x3f	; 63
    5df0:	f8 94       	cli
    5df2:	80 93 60 00 	sts	0x0060, r24
    5df6:	10 92 60 00 	sts	0x0060, r1
    5dfa:	0f be       	out	0x3f, r0	; 63

00005dfc <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    5dfc:	0e 94 9a 33 	call	0x6734	; 0x6734 <isEepromFormatted>
    5e00:	81 11       	cpse	r24, r1
    5e02:	02 c0       	rjmp	.+4      	; 0x5e08 <Initialize+0xc>
    5e04:	0e 94 78 33 	call	0x66f0	; 0x66f0 <FormatEeprom>

	cli();
    5e08:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    5e10:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    5e14:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    5e18:	10 92 02 0b 	sts	0x0B02, r1
    5e1c:	10 92 08 0b 	sts	0x0B08, r1
    5e20:	10 92 0e 0b 	sts	0x0B0E, r1
    5e24:	10 92 14 0b 	sts	0x0B14, r1
    5e28:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    5e2c:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_flags=0;
    5e30:	10 92 ee 0a 	sts	0x0AEE, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    5e34:	92 e1       	ldi	r25, 0x12	; 18
    5e36:	90 93 ed 0a 	sts	0x0AED, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    5e3a:	90 ee       	ldi	r25, 0xE0	; 224
    5e3c:	90 93 f6 0a 	sts	0x0AF6, r25
	render_lines_count=FRAME_LINES;
    5e40:	90 93 f4 0a 	sts	0x0AF4, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    5e44:	94 e1       	ldi	r25, 0x14	; 20
    5e46:	90 93 f5 0a 	sts	0x0AF5, r25
	first_render_line=FIRST_RENDER_LINE;
    5e4a:	90 93 f3 0a 	sts	0x0AF3, r25

	joypad1_status_hi=0;
    5e4e:	10 92 fa 0a 	sts	0x0AFA, r1
    5e52:	10 92 f9 0a 	sts	0x0AF9, r1
	joypad2_status_hi=0;
    5e56:	10 92 fe 0a 	sts	0x0AFE, r1
    5e5a:	10 92 fd 0a 	sts	0x0AFD, r1
	sound_enabled=1;
    5e5e:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    5e62:	0e 94 e0 3f 	call	0x7fc0	; 0x7fc0 <InitializeVideoMode>
    5e66:	82 e8       	ldi	r24, 0x82	; 130
    5e68:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5e6a:	fc 01       	movw	r30, r24
    5e6c:	25 91       	lpm	r18, Z+
    5e6e:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    5e70:	f9 01       	movw	r30, r18
    5e72:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5e74:	30 83       	st	Z, r19
    5e76:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    5e78:	20 e0       	ldi	r18, 0x00	; 0
    5e7a:	80 3b       	cpi	r24, 0xB0	; 176
    5e7c:	92 07       	cpc	r25, r18
    5e7e:	a9 f7       	brne	.-22     	; 0x5e6a <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    5e80:	78 94       	sei
	
	DisplayLogo();
    5e82:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <DisplayLogo>
    5e86:	0e 94 4b 53 	call	0xa696	; 0xa696 <main>
    5e8a:	0c 94 e7 55 	jmp	0xabce	; 0xabce <_exit>

00005e8e <__bad_interrupt>:
    5e8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005e92 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    5e92:	0c e0       	ldi	r16, 0x0C	; 12
    5e94:	0a 95       	dec	r16
    5e96:	f1 f7       	brne	.-4      	; 0x5e94 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    5e98:	e8 e9       	ldi	r30, 0x98	; 152
		ldi ZH,hi8(ram_tiles_restore);
    5e9a:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    5e9c:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    5e9e:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    5ea0:	20 91 b7 0b 	lds	r18, 0x0BB7


		clr r16
    5ea4:	00 27       	eor	r16, r16

00005ea6 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    5ea6:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    5ea8:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    5eaa:	ac 0f       	add	r26, r28
		adc XH,YH
    5eac:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    5eae:	1c 91       	ld	r17, X
		std Z+2,r17
    5eb0:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    5eb2:	02 17       	cp	r16, r18
		brsh noov
    5eb4:	08 f4       	brcc	.+2      	; 0x5eb8 <noov>
		mov r17,r16
    5eb6:	10 2f       	mov	r17, r16

00005eb8 <noov>:
	noov:
		st X,r17
    5eb8:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    5eba:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    5ebc:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    5ebe:	07 31       	cpi	r16, 0x17	; 23
		brlo upd_loop ;23
    5ec0:	90 f3       	brcs	.-28     	; 0x5ea6 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    5ec2:	06 e2       	ldi	r16, 0x26	; 38

00005ec4 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    5ec4:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    5ec6:	1a 95       	dec	r17
		brne .-4
    5ec8:	f1 f7       	brne	.-4      	; 0x5ec6 <wait_loop+0x2>

		dec r16
    5eca:	0a 95       	dec	r16
		brne wait_loop
    5ecc:	d9 f7       	brne	.-10     	; 0x5ec4 <wait_loop>

		lds r2,overlay_tile_table
    5ece:	20 90 e9 0a 	lds	r2, 0x0AE9
		lds r3,overlay_tile_table+1
    5ed2:	30 90 ea 0a 	lds	r3, 0x0AEA
		lds r16,tile_table_lo 
    5ed6:	00 91 e5 0a 	lds	r16, 0x0AE5
		lds r17,tile_table_hi
    5eda:	10 91 e6 0a 	lds	r17, 0x0AE6
		movw r12,r16
    5ede:	68 01       	movw	r12, r16
		movw r6,r16
    5ee0:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    5ee2:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    5ee4:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    5ee6:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    5ee8:	4e 01       	movw	r8, r28
		clr r0
    5eea:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    5eec:	30 91 e8 0a 	lds	r19, 0x0AE8
		cpi r19,0
    5ef0:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    5ef2:	09 f0       	breq	.+2      	; 0x5ef6 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    5ef4:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    5ef6:	09 f0       	breq	.+2      	; 0x5efa <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    5ef8:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    5efa:	09 f0       	breq	.+2      	; 0x5efe <wait_loop+0x3a>
		mov r24,r19
    5efc:	83 2f       	mov	r24, r19

		breq .+2
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <wait_loop+0x3e>
		movw r12,r2
    5f00:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    5f02:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    5f04:	a0 2e       	mov	r10, r16
		clr r22
    5f06:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    5f08:	78 e0       	ldi	r23, 0x08	; 8

00005f0a <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    5f0a:	7d d2       	rcall	.+1274   	; 0x6406 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    5f0c:	3c e0       	ldi	r19, 0x0C	; 12
    5f0e:	3a 95       	dec	r19
    5f10:	f1 f7       	brne	.-4      	; 0x5f0e <next_tile_line+0x4>
    5f12:	00 00       	nop
    5f14:	00 00       	nop

		;***draw line***
		call render_tile_line
    5f16:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    5f1a:	3f e0       	ldi	r19, 0x0F	; 15
    5f1c:	3a 95       	dec	r19
    5f1e:	f1 f7       	brne	.-4      	; 0x5f1c <next_tile_line+0x12>
    5f20:	00 00       	nop
    5f22:	00 00       	nop

		dec r10
    5f24:	aa 94       	dec	r10
		breq frame_end
    5f26:	a9 f0       	breq	.+42     	; 0x5f52 <frame_end>
	
		inc r22
    5f28:	63 95       	inc	r22
		lpm ;3 nop
    5f2a:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    5f2c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    5f2e:	31 f0       	breq	.+12     	; 0x5f3c <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    5f30:	33 e0       	ldi	r19, 0x03	; 3
    5f32:	3a 95       	dec	r19
    5f34:	f1 f7       	brne	.-4      	; 0x5f32 <next_tile_line+0x28>
    5f36:	00 00       	nop
    5f38:	00 00       	nop
		
		rjmp next_tile_line	
    5f3a:	e7 cf       	rjmp	.-50     	; 0x5f0a <next_tile_line>

00005f3c <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    5f3c:	66 27       	eor	r22, r22

		clr r0
    5f3e:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    5f40:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    5f42:	c3 0f       	add	r28, r19
		adc YH,r0
    5f44:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    5f46:	8a 95       	dec	r24
		brne .+2
    5f48:	09 f4       	brne	.+2      	; 0x5f4c <next_tile_row+0x10>
		movw YL,r8	;main vram
    5f4a:	e4 01       	movw	r28, r8
		brne .+2
    5f4c:	09 f4       	brne	.+2      	; 0x5f50 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    5f4e:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    5f50:	dc cf       	rjmp	.-72     	; 0x5f0a <next_tile_line>

00005f52 <frame_end>:

	frame_end:

		WAIT r19,18
    5f52:	36 e0       	ldi	r19, 0x06	; 6
    5f54:	3a 95       	dec	r19
    5f56:	f1 f7       	brne	.-4      	; 0x5f54 <frame_end+0x2>

		rcall hsync_pulse ;145
    5f58:	56 d2       	rcall	.+1196   	; 0x6406 <hsync_pulse>
	
		clr r1
    5f5a:	11 24       	eor	r1, r1
		call RestoreBackground
    5f5c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    5f60:	e0 91 ee 0a 	lds	r30, 0x0AEE
		ldi r20,SYNC_FLAG_FIELD
    5f64:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    5f66:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    5f68:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    5f6a:	e0 93 ee 0a 	sts	0x0AEE, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    5f6e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    5f70:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    5f74:	11 24       	eor	r1, r1


		ret
    5f76:	08 95       	ret

00005f78 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    5f78:	de 01       	movw	r26, r28

		mul r22,r23
    5f7a:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    5f7c:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5f7e:	00 5c       	subi	r16, 0xC0	; 192
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5f80:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    5f82:	00 0d       	add	r16, r0
		adc r17,r1
    5f84:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    5f86:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    5f88:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    5f8a:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    5f8c:	00 0d       	add	r16, r0
		adc r17,r1
    5f8e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    5f90:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5f92:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    5f94:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    5f96:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    5f98:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5f9a:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    5f9c:	27 31       	cpi	r18, 0x17	; 23
		brcc .+2
    5f9e:	08 f4       	brcc	.+2      	; 0x5fa2 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    5fa0:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    5fa2:	04 0e       	add	r0, r20
	    adc r1,r21
    5fa4:	15 1e       	adc	r1, r21

		movw ZL,r0
    5fa6:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    5fa8:	27 31       	cpi	r18, 0x17	; 23
		brcs ramloop
    5faa:	f0 f0       	brcs	.+60     	; 0x5fe8 <ramloop>

00005fac <romloop>:
	

	romloop:
	    lpm r16,Z+
    5fac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5fae:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5fb0:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    5fb2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    5fb4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5fb6:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    5fb8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5fba:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5fbc:	27 31       	cpi	r18, 0x17	; 23
		nop
    5fbe:	00 00       	nop

	    lpm r16,Z+
    5fc0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5fc2:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    5fc4:	08 f4       	brcc	.+2      	; 0x5fc8 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    5fc6:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    5fc8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5fca:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    5fcc:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    5fce:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    5fd0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5fd2:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    5fd4:	27 31       	cpi	r18, 0x17	; 23
		dec r17			;decrement tiles to draw on line
    5fd6:	1a 95       	dec	r17
   
	    lpm r16,Z+
    5fd8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5fda:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5fdc:	05 91       	lpm	r16, Z+

		breq end	
    5fde:	31 f1       	breq	.+76     	; 0x602c <end>
	    movw ZL,r0   	;copy next tile adress
    5fe0:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5fe2:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    5fe4:	18 f7       	brcc	.-58     	; 0x5fac <romloop>
	
		rjmp .
    5fe6:	00 c0       	rjmp	.+0      	; 0x5fe8 <ramloop>

00005fe8 <ramloop>:

	ramloop:

	    ld r16,Z+
    5fe8:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5fea:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5fec:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    5fee:	01 91       	ld	r16, Z+
		nop   
    5ff0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5ff2:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5ff4:	23 9f       	mul	r18, r19


	    ld r16,Z+
    5ff6:	01 91       	ld	r16, Z+
		nop
    5ff8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5ffa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5ffc:	27 31       	cpi	r18, 0x17	; 23
   		rjmp .
    5ffe:	00 c0       	rjmp	.+0      	; 0x6000 <ramloop+0x18>

	    ld r16,Z+
    6000:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6002:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6004:	08 f0       	brcs	.+2      	; 0x6008 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6006:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6008:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    600a:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    600c:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    600e:	15 1e       	adc	r1, r21
		rjmp .
    6010:	00 c0       	rjmp	.+0      	; 0x6012 <ramloop+0x2a>
    
		ld r16,Z+		
    6012:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6014:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6016:	27 31       	cpi	r18, 0x17	; 23
		rjmp .  
    6018:	00 c0       	rjmp	.+0      	; 0x601a <ramloop+0x32>

	    ld r16,Z+	
    601a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    601c:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    601e:	01 91       	ld	r16, Z+

	    dec r17
    6020:	1a 95       	dec	r17
	    breq end
    6022:	21 f0       	breq	.+8      	; 0x602c <end>
	
		movw ZL,r0
    6024:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6026:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6028:	08 f6       	brcc	.-126    	; 0x5fac <romloop>
		rjmp ramloop
    602a:	de cf       	rjmp	.-68     	; 0x5fe8 <ramloop>

0000602c <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    602c:	08 b9       	out	0x08, r16	; 8
		clr r16	
    602e:	00 27       	eor	r16, r16
		lpm	
    6030:	c8 95       	lpm
		nop
    6032:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6034:	08 b9       	out	0x08, r16	; 8

		ret
    6036:	08 95       	ret

00006038 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6038:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    603a:	e0 91 e5 0a 	lds	r30, 0x0AE5
	lds ZH,tile_table_hi
    603e:	f0 91 e6 0a 	lds	r31, 0x0AE6
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6042:	87 51       	subi	r24, 0x17	; 23
	mul r24,r18
    6044:	82 9f       	mul	r24, r18
	add ZL,r0
    6046:	e0 0d       	add	r30, r0
	adc ZH,r1
    6048:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    604a:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    604c:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    604e:	62 9f       	mul	r22, r18
	add XL,r0
    6050:	a0 0d       	add	r26, r0
	adc XH,r1
    6052:	b1 1d       	adc	r27, r1

	clr r0
    6054:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6056:	05 90       	lpm	r0, Z+
    6058:	0d 92       	st	X+, r0
    605a:	05 90       	lpm	r0, Z+
    605c:	0d 92       	st	X+, r0
    605e:	05 90       	lpm	r0, Z+
    6060:	0d 92       	st	X+, r0
    6062:	05 90       	lpm	r0, Z+
    6064:	0d 92       	st	X+, r0
    6066:	05 90       	lpm	r0, Z+
    6068:	0d 92       	st	X+, r0
    606a:	05 90       	lpm	r0, Z+
    606c:	0d 92       	st	X+, r0
    606e:	05 90       	lpm	r0, Z+
    6070:	0d 92       	st	X+, r0
    6072:	05 90       	lpm	r0, Z+
    6074:	0d 92       	st	X+, r0
    6076:	05 90       	lpm	r0, Z+
    6078:	0d 92       	st	X+, r0
    607a:	05 90       	lpm	r0, Z+
    607c:	0d 92       	st	X+, r0
    607e:	05 90       	lpm	r0, Z+
    6080:	0d 92       	st	X+, r0
    6082:	05 90       	lpm	r0, Z+
    6084:	0d 92       	st	X+, r0
    6086:	05 90       	lpm	r0, Z+
    6088:	0d 92       	st	X+, r0
    608a:	05 90       	lpm	r0, Z+
    608c:	0d 92       	st	X+, r0
    608e:	05 90       	lpm	r0, Z+
    6090:	0d 92       	st	X+, r0
    6092:	05 90       	lpm	r0, Z+
    6094:	0d 92       	st	X+, r0
    6096:	05 90       	lpm	r0, Z+
    6098:	0d 92       	st	X+, r0
    609a:	05 90       	lpm	r0, Z+
    609c:	0d 92       	st	X+, r0
    609e:	05 90       	lpm	r0, Z+
    60a0:	0d 92       	st	X+, r0
    60a2:	05 90       	lpm	r0, Z+
    60a4:	0d 92       	st	X+, r0
    60a6:	05 90       	lpm	r0, Z+
    60a8:	0d 92       	st	X+, r0
    60aa:	05 90       	lpm	r0, Z+
    60ac:	0d 92       	st	X+, r0
    60ae:	05 90       	lpm	r0, Z+
    60b0:	0d 92       	st	X+, r0
    60b2:	05 90       	lpm	r0, Z+
    60b4:	0d 92       	st	X+, r0
    60b6:	05 90       	lpm	r0, Z+
    60b8:	0d 92       	st	X+, r0
    60ba:	05 90       	lpm	r0, Z+
    60bc:	0d 92       	st	X+, r0
    60be:	05 90       	lpm	r0, Z+
    60c0:	0d 92       	st	X+, r0
    60c2:	05 90       	lpm	r0, Z+
    60c4:	0d 92       	st	X+, r0
    60c6:	05 90       	lpm	r0, Z+
    60c8:	0d 92       	st	X+, r0
    60ca:	05 90       	lpm	r0, Z+
    60cc:	0d 92       	st	X+, r0
    60ce:	05 90       	lpm	r0, Z+
    60d0:	0d 92       	st	X+, r0
    60d2:	05 90       	lpm	r0, Z+
    60d4:	0d 92       	st	X+, r0
    60d6:	05 90       	lpm	r0, Z+
    60d8:	0d 92       	st	X+, r0
    60da:	05 90       	lpm	r0, Z+
    60dc:	0d 92       	st	X+, r0
    60de:	05 90       	lpm	r0, Z+
    60e0:	0d 92       	st	X+, r0
    60e2:	05 90       	lpm	r0, Z+
    60e4:	0d 92       	st	X+, r0
    60e6:	05 90       	lpm	r0, Z+
    60e8:	0d 92       	st	X+, r0
    60ea:	05 90       	lpm	r0, Z+
    60ec:	0d 92       	st	X+, r0
    60ee:	05 90       	lpm	r0, Z+
    60f0:	0d 92       	st	X+, r0
    60f2:	05 90       	lpm	r0, Z+
    60f4:	0d 92       	st	X+, r0
    60f6:	05 90       	lpm	r0, Z+
    60f8:	0d 92       	st	X+, r0
    60fa:	05 90       	lpm	r0, Z+
    60fc:	0d 92       	st	X+, r0
    60fe:	05 90       	lpm	r0, Z+
    6100:	0d 92       	st	X+, r0
    6102:	05 90       	lpm	r0, Z+
    6104:	0d 92       	st	X+, r0
    6106:	05 90       	lpm	r0, Z+
    6108:	0d 92       	st	X+, r0
    610a:	05 90       	lpm	r0, Z+
    610c:	0d 92       	st	X+, r0
    610e:	05 90       	lpm	r0, Z+
    6110:	0d 92       	st	X+, r0
    6112:	05 90       	lpm	r0, Z+
    6114:	0d 92       	st	X+, r0
    6116:	05 90       	lpm	r0, Z+
    6118:	0d 92       	st	X+, r0
    611a:	05 90       	lpm	r0, Z+
    611c:	0d 92       	st	X+, r0
    611e:	05 90       	lpm	r0, Z+
    6120:	0d 92       	st	X+, r0
    6122:	05 90       	lpm	r0, Z+
    6124:	0d 92       	st	X+, r0
    6126:	05 90       	lpm	r0, Z+
    6128:	0d 92       	st	X+, r0
    612a:	05 90       	lpm	r0, Z+
    612c:	0d 92       	st	X+, r0
    612e:	05 90       	lpm	r0, Z+
    6130:	0d 92       	st	X+, r0
    6132:	05 90       	lpm	r0, Z+
    6134:	0d 92       	st	X+, r0
    6136:	05 90       	lpm	r0, Z+
    6138:	0d 92       	st	X+, r0
    613a:	05 90       	lpm	r0, Z+
    613c:	0d 92       	st	X+, r0
    613e:	05 90       	lpm	r0, Z+
    6140:	0d 92       	st	X+, r0
    6142:	05 90       	lpm	r0, Z+
    6144:	0d 92       	st	X+, r0
    6146:	05 90       	lpm	r0, Z+
    6148:	0d 92       	st	X+, r0
    614a:	05 90       	lpm	r0, Z+
    614c:	0d 92       	st	X+, r0
    614e:	05 90       	lpm	r0, Z+
    6150:	0d 92       	st	X+, r0
    6152:	05 90       	lpm	r0, Z+
    6154:	0d 92       	st	X+, r0


	clr r1
    6156:	11 24       	eor	r1, r1
	ret
    6158:	08 95       	ret

0000615a <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    615a:	0f 93       	push	r16
	push r17
    615c:	1f 93       	push	r17
	push YL
    615e:	cf 93       	push	r28
	push YH
    6160:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6162:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6164:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6166:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    6168:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    616a:	e0 0d       	add	r30, r0
	adc ZH,r1
    616c:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    616e:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6170:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6172:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6174:	8e 9f       	mul	r24, r30
	movw r26,r0
    6176:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6178:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    617a:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    617c:	cd ed       	ldi	r28, 0xDD	; 221
	ldi YH,hi8(sprites_tile_banks)	
    617e:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6180:	00 24       	eor	r0, r0
	add YL,r1
    6182:	c1 0d       	add	r28, r1
	adc YH,r0		
    6184:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6186:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6188:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    618a:	ea 0f       	add	r30, r26
	adc ZH,r27
    618c:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    618e:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6190:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6192:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6194:	69 9f       	mul	r22, r25
	add XL,r0
    6196:	a0 0d       	add	r26, r0
	adc XH,r1
    6198:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    619a:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    619c:	dd 27       	eor	r29, r29

	cpi r20,0	
    619e:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    61a0:	51 f4       	brne	.+20     	; 0x61b6 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    61a2:	a2 0f       	add	r26, r18
	adc XH,r1
    61a4:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    61a6:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    61a8:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    61aa:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    61ac:	11 c0       	rjmp	.+34     	; 0x61d0 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    61ae:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    61b0:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    61b2:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    61b4:	0d c0       	rjmp	.+26     	; 0x61d0 <x_check_end>

000061b6 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    61b6:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    61b8:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    61ba:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    61be:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    61c0:	e8 0f       	add	r30, r24
	adc ZH,r1	
    61c2:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    61c4:	05 c0       	rjmp	.+10     	; 0x61d0 <x_check_end>

000061c6 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    61c6:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    61c8:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    61ca:	e2 0f       	add	r30, r18
	adc ZH,r1
    61cc:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    61ce:	31 97       	sbiw	r30, 0x01	; 1

000061d0 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    61d0:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    61d2:	41 f4       	brne	.+16     	; 0x61e4 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    61d4:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    61d6:	93 9f       	mul	r25, r19
	add XL,r0
    61d8:	a0 0d       	add	r26, r0
	adc XH,r1
    61da:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    61dc:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    61de:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    61e0:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    61e2:	0a c0       	rjmp	.+20     	; 0x61f8 <y_check_end>

000061e4 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    61e4:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    61e6:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    61e8:	63 2f       	mov	r22, r19
	dec r22
    61ea:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    61ec:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    61ee:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    61f0:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    61f2:	56 9f       	mul	r21, r22
	add ZL,r0
    61f4:	e0 0d       	add	r30, r0
	adc ZH,r1	
    61f6:	f1 1d       	adc	r31, r1

000061f8 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    61f8:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    61fa:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    61fc:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    61fe:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6200:	00 ff       	sbrs	r16, 0
	clr r23
    6202:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6204:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6206:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6208:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    620a:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    620c:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    620e:	59 1b       	sub	r21, r25

00006210 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6210:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6212:	48 1b       	sub	r20, r24

00006214 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6214:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6216:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6218:	2c 93       	st	X, r18
	adiw XL,1
    621a:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    621c:	e6 0f       	add	r30, r22
	adc ZH,r23
    621e:	f7 1f       	adc	r31, r23
	dec r20
    6220:	4a 95       	dec	r20
	brne x_loop
    6222:	c1 f7       	brne	.-16     	; 0x6214 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6224:	ec 0f       	add	r30, r28
	adc ZH,YH
    6226:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6228:	a8 0f       	add	r26, r24
	adc XH,r1
    622a:	b1 1d       	adc	r27, r1
	dec r21
    622c:	5a 95       	dec	r21
	brne y_loop
    622e:	81 f7       	brne	.-32     	; 0x6210 <y_loop>


	pop YH
    6230:	df 91       	pop	r29
	pop YL
    6232:	cf 91       	pop	r28
	pop r17
    6234:	1f 91       	pop	r17
	pop r16
    6236:	0f 91       	pop	r16
	ret
    6238:	08 95       	ret

0000623a <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    623a:	0f 92       	push	r0
	push r1
    623c:	1f 92       	push	r1
	push ZL;2
    623e:	ef 93       	push	r30
	push ZH;2
    6240:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6242:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6244:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6246:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    624a:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    624c:	f1 e0       	ldi	r31, 0x01	; 1

0000624e <latency_loop>:
latency_loop:
	cp ZL,ZH
    624e:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6250:	00 f0       	brcs	.+0      	; 0x6252 <latency_loop+0x4>
	inc ZH
    6252:	f3 95       	inc	r31
	cpi ZH,10
    6254:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6256:	d8 f3       	brcs	.-10     	; 0x624e <latency_loop>
	jmp .
    6258:	0c 94 2e 31 	jmp	0x625c	; 0x625c <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    625c:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6260:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6262:	e0 93 ed 0a 	sts	0x0AED, r30

	;process sync phases
	lds ZH,sync_phase
    6266:	f0 91 ec 0a 	lds	r31, 0x0AEC
	sbrc ZH,0
    626a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    626c:	57 c0       	rjmp	.+174    	; 0x631c <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    626e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6270:	98 f0       	brcs	.+38     	; 0x6298 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6272:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6274:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6278:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    627a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    627e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6280:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6282:	26 f4       	brtc	.+8      	; 0x628c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6284:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6286:	0e 94 14 32 	call	0x6428	; 0x6428 <update_sound>
	rjmp sync_end
    628a:	b6 c0       	rjmp	.+364    	; 0x63f8 <sync_end>

0000628c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    628c:	e5 e1       	ldi	r30, 0x15	; 21
    628e:	ea 95       	dec	r30
    6290:	f1 f7       	brne	.-4      	; 0x628e <sync_pre_eq_no_sound_update+0x2>
    6292:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6294:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6296:	b0 c0       	rjmp	.+352    	; 0x63f8 <sync_end>

00006298 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6298:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    629a:	38 f1       	brcs	.+78     	; 0x62ea <sync_post_eq>

	rjmp .
    629c:	00 c0       	rjmp	.+0      	; 0x629e <sync_eq+0x6>
	rjmp .
    629e:	00 c0       	rjmp	.+0      	; 0x62a0 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    62a0:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    62a2:	e0 fb       	bst	r30, 0
	ldi ZL,4
    62a4:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    62a6:	16 f4       	brtc	.+4      	; 0x62ac <sync_eq_skip>
	
	call update_sound
    62a8:	0e 94 14 32 	call	0x6428	; 0x6428 <update_sound>

000062ac <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    62ac:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    62ae:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    62b2:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    62b4:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    62b8:	9f c0       	rjmp	.+318    	; 0x63f8 <sync_end>

000062ba <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    62ba:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    62bc:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    62be:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    62c0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    62c4:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    62c6:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    62c8:	00 f0       	brcs	.+0      	; 0x62ca <__vector_14+0x10>

	cpi ZL,2
    62ca:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    62cc:	00 f0       	brcs	.+0      	; 0x62ce <__vector_14+0x14>

	cpi ZL,3
    62ce:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    62d0:	00 f0       	brcs	.+0      	; 0x62d2 <__vector_14+0x18>

	cpi ZL,4
    62d2:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    62d4:	00 f0       	brcs	.+0      	; 0x62d6 <__vector_14+0x1c>

	cpi ZL,5
    62d6:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    62d8:	00 f0       	brcs	.+0      	; 0x62da <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    62da:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    62dc:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    62de:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    62e2:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    62e4:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    62e6:	ef 91       	pop	r30
	reti
    62e8:	18 95       	reti

000062ea <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    62ea:	00 c0       	rjmp	.+0      	; 0x62ec <sync_post_eq+0x2>

	bst ZL,0
    62ec:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    62ee:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    62f0:	26 f4       	brtc	.+8      	; 0x62fa <sync_post_eq_no_sound_update>
	ldi ZL,1	
    62f2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    62f4:	0e 94 14 32 	call	0x6428	; 0x6428 <update_sound>
	rjmp sync_pre_eq_cont
    62f8:	05 c0       	rjmp	.+10     	; 0x6304 <sync_pre_eq_cont>

000062fa <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    62fa:	e5 e1       	ldi	r30, 0x15	; 21
    62fc:	ea 95       	dec	r30
    62fe:	f1 f7       	brne	.-4      	; 0x62fc <sync_post_eq_no_sound_update+0x2>
    6300:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6302:	28 9a       	sbi	0x05, 0	; 5

00006304 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6304:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6308:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    630a:	09 f0       	breq	.+2      	; 0x630e <sync_pre_eq_cont+0xa>
	rjmp sync_end
    630c:	75 c0       	rjmp	.+234    	; 0x63f8 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    630e:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6310:	e0 93 ed 0a 	sts	0x0AED, r30
	ldi ZL,1
    6314:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6316:	e0 93 ec 0a 	sts	0x0AEC, r30
	
	rjmp sync_end
    631a:	6e c0       	rjmp	.+220    	; 0x63f8 <sync_end>

0000631c <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    631c:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    631e:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6322:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6324:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6328:	00 c0       	rjmp	.+0      	; 0x632a <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    632a:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    632c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    632e:	00 c0       	rjmp	.+0      	; 0x6330 <sync_hsync+0x14>
	call update_sound
    6330:	0e 94 14 32 	call	0x6428	; 0x6428 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6334:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6336:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    633a:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    633c:	e0 91 ed 0a 	lds	r30, 0x0AED
	cp ZL,ZH
    6340:	ef 17       	cp	r30, r31
	brsh no_render
    6342:	d0 f4       	brcc	.+52     	; 0x6378 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6344:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6346:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    634a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    634c:	00 90 f4 0a 	lds	r0, 0x0AF4
	sub ZH,r0			
    6350:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6352:	ef 17       	cp	r30, r31
	brlo no_render
    6354:	88 f0       	brcs	.+34     	; 0x6378 <no_render>

	;push r1-r29
	ldi ZL,29
    6356:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6358:	ff 27       	eor	r31, r31

0000635a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    635a:	00 80       	ld	r0, Z
	push r0
    635c:	0f 92       	push	r0
	dec ZL
    635e:	ea 95       	dec	r30
	brne push_loop	
    6360:	e1 f7       	brne	.-8      	; 0x635a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6362:	06 e0       	ldi	r16, 0x06	; 6
    6364:	0a 95       	dec	r16
    6366:	f1 f7       	brne	.-4      	; 0x6364 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6368:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    636c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    636e:	ff 27       	eor	r31, r31

00006370 <pop_loop>:
pop_loop:
	pop r0
    6370:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6372:	01 92       	st	Z+, r0
	cpi ZL,30
    6374:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6376:	e0 f3       	brcs	.-8      	; 0x6370 <pop_loop>

00006378 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6378:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    637c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    637e:	09 f0       	breq	.+2      	; 0x6382 <no_render+0xa>
	rjmp sync_end
    6380:	3b c0       	rjmp	.+118    	; 0x63f8 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6382:	2f 93       	push	r18
	push r19
    6384:	3f 93       	push	r19
	push r20
    6386:	4f 93       	push	r20
	push r21
    6388:	5f 93       	push	r21
	push r22
    638a:	6f 93       	push	r22
	push r23
    638c:	7f 93       	push	r23
	push r24
    638e:	8f 93       	push	r24
	push r25
    6390:	9f 93       	push	r25
	push r26
    6392:	af 93       	push	r26
	push r27
    6394:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6396:	78 94       	sei
	clr r1
    6398:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    639a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    639c:	e0 93 ec 0a 	sts	0x0AEC, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    63a0:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    63a2:	e0 93 ed 0a 	sts	0x0AED, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    63a6:	f0 91 f5 0a 	lds	r31, 0x0AF5
	sts first_render_line,ZH
    63aa:	f0 93 f3 0a 	sts	0x0AF3, r31
	
	lds ZH,render_lines_count_tmp
    63ae:	f0 91 f6 0a 	lds	r31, 0x0AF6
	sts render_lines_count,ZH
    63b2:	f0 93 f4 0a 	sts	0x0AF4, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    63b6:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,pre_vsync_user_callback+1
    63ba:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    63be:	e1 15       	cp	r30, r1
	cpc ZH,r1
    63c0:	f1 05       	cpc	r31, r1
	breq .+2 
    63c2:	09 f0       	breq	.+2      	; 0x63c6 <no_render+0x4e>
	icall
    63c4:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    63c6:	0e 94 68 33 	call	0x66d0	; 0x66d0 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    63ca:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    63ce:	0e 94 0e 32 	call	0x641c	; 0x641c <process_music>
	clr r1
    63d2:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    63d4:	e0 91 f1 0a 	lds	r30, 0x0AF1
	lds ZH,post_vsync_user_callback+1
    63d8:	f0 91 f2 0a 	lds	r31, 0x0AF2
	cp  ZL,r1
    63dc:	e1 15       	cp	r30, r1
	cpc ZH,r1
    63de:	f1 05       	cpc	r31, r1
	breq .+2 
    63e0:	09 f0       	breq	.+2      	; 0x63e4 <no_render+0x6c>
	icall
    63e2:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    63e4:	bf 91       	pop	r27
	pop r26
    63e6:	af 91       	pop	r26
	pop r25
    63e8:	9f 91       	pop	r25
	pop r24
    63ea:	8f 91       	pop	r24
	pop r23
    63ec:	7f 91       	pop	r23
	pop r22
    63ee:	6f 91       	pop	r22
	pop r21
    63f0:	5f 91       	pop	r21
	pop r20
    63f2:	4f 91       	pop	r20
	pop r19
    63f4:	3f 91       	pop	r19
	pop r18
    63f6:	2f 91       	pop	r18

000063f8 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    63f8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    63fa:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    63fc:	ff 91       	pop	r31
	pop ZL
    63fe:	ef 91       	pop	r30
	pop r1
    6400:	1f 90       	pop	r1
	pop r0
    6402:	0f 90       	pop	r0
	reti
    6404:	18 95       	reti

00006406 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6406:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6408:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    640a:	00 c0       	rjmp	.+0      	; 0x640c <hsync_pulse+0x6>
	call update_sound
    640c:	0e 94 14 32 	call	0x6428	; 0x6428 <update_sound>

	lds ZL,sync_pulse
    6410:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6414:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6416:	e0 93 ed 0a 	sts	0x0AED, r30

	ret
    641a:	08 95       	ret

0000641c <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    641c:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6420:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6422:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <ProcessMusic>
#endif

	ret
    6426:	08 95       	ret

00006428 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6428:	0f 93       	push	r16
	push r17
    642a:	1f 93       	push	r17
	push r18
    642c:	2f 93       	push	r18
	push r28
    642e:	cf 93       	push	r28
	push r29
    6430:	df 93       	push	r29

	mov r18,ZL
    6432:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6434:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6438:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    643c:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    643e:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6442:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6446:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    644a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    644c:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    644e:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6452:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6456:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    645a:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    645c:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    645e:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6460:	d0 2d       	mov	r29, r0
	nop
    6462:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6464:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6468:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    646c:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    646e:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    6472:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    6476:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    647a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    647c:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    647e:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    6482:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    6486:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    648a:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    648c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    648e:	20 ff       	sbrs	r18, 0
	rjmp .
    6490:	00 c0       	rjmp	.+0      	; 0x6492 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6492:	01 03       	mulsu	r16, r17
	clr r0
    6494:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6496:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6498:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    649a:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    649c:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    64a0:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    64a4:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    64a6:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    64aa:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    64ae:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    64b2:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    64b4:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    64b6:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    64ba:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    64be:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    64c2:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    64c4:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    64c6:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    64c8:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    64ca:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    64ce:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    64d2:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    64d6:	ea 95       	dec	r30
	brpl ch4_no_shift	
    64d8:	92 f4       	brpl	.+36     	; 0x64fe <ch4_no_shift>

	lds ZH,tr4_params
    64da:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    64de:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    64e0:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    64e2:	00 2e       	mov	r0, r16
	lsr r0
    64e4:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    64e6:	00 26       	eor	r0, r16
	bst r0,0
    64e8:	00 fa       	bst	r0, 0
	lsr r17
    64ea:	16 95       	lsr	r17
	ror r16
    64ec:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    64ee:	16 f9       	bld	r17, 6
	sbrs ZH,0
    64f0:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    64f2:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    64f4:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    64f8:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    64fc:	03 c0       	rjmp	.+6      	; 0x6504 <ch4_end>

000064fe <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    64fe:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6500:	1a 95       	dec	r17
	brne .-4
    6502:	f1 f7       	brne	.-4      	; 0x6500 <ch4_no_shift+0x2>

00006504 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6504:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    6508:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    650a:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    650c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    650e:	21 ff       	sbrs	r18, 1
	rjmp .
    6510:	00 c0       	rjmp	.+0      	; 0x6512 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6512:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6514:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6516:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    651a:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    651c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    651e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6520:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6522:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    6526:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    652a:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    652c:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    6530:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    6534:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    6538:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    653a:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    653e:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6540:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6542:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6544:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    6548:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    654c:	00 19       	sub	r16, r0
	sbc r17,r1
    654e:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6550:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    6554:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    6558:	e0 15       	cp	r30, r0
	cpc ZH,r1
    655a:	f1 05       	cpc	r31, r1
	brlo .+2
    655c:	08 f0       	brcs	.+2      	; 0x6560 <ch4_end+0x5c>
	movw ZL,r16
    655e:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6560:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    6564:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    6568:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    656a:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    656e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6570:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6572:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6574:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6576:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6578:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    657a:	d0 05       	cpc	r29, r0
	brlt .+2
    657c:	0c f0       	brlt	.+2      	; 0x6580 <ch4_end+0x7c>
	ldi r28,127
    657e:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6580:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6582:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6584:	d0 05       	cpc	r29, r0
	brge .+2
    6586:	0c f4       	brge	.+2      	; 0x658a <ch4_end+0x86>
	ldi r28,-128
    6588:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    658a:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    658c:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6590:	df 91       	pop	r29
	pop r28
    6592:	cf 91       	pop	r28
	pop r18
    6594:	2f 91       	pop	r18
	pop r17
    6596:	1f 91       	pop	r17
	pop r16
    6598:	0f 91       	pop	r16
	
	ret
    659a:	08 95       	ret

0000659c <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    659c:	80 93 dd 0a 	sts	0x0ADD, r24
	sts sprites_tile_banks+1,r25
    65a0:	90 93 de 0a 	sts	0x0ADE, r25
	ret
    65a4:	08 95       	ret

000065a6 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    65a6:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    65a8:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    65aa:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    65ac:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    65ae:	67 e1       	ldi	r22, 0x17	; 23

000065b0 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    65b0:	6d 93       	st	X+, r22
	sbiw r30,1
    65b2:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    65b4:	e9 f7       	brne	.-6      	; 0x65b0 <fill_vram_loop>

	clr r1
    65b6:	11 24       	eor	r1, r1

	ret
    65b8:	08 95       	ret

000065ba <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    65ba:	50 91 e7 0a 	lds	r21, 0x0AE7
	add r20,21
    65be:	45 0f       	add	r20, r21
	rjmp SetTile	
    65c0:	00 c0       	rjmp	.+0      	; 0x65c2 <SetTile>

000065c2 <SetTile>:

	ret

#else

	clr r25
    65c2:	99 27       	eor	r25, r25
	clr r23	
    65c4:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    65c6:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    65c8:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    65ca:	08 0e       	add	r0, r24
	adc r1,r25
    65cc:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    65ce:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    65d0:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    65d2:	a0 0d       	add	r26, r0
	adc XH,r1
    65d4:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    65d6:	49 5e       	subi	r20, 0xE9	; 233
	st X,r20
    65d8:	4c 93       	st	X, r20

	clr r1
    65da:	11 24       	eor	r1, r1

	ret
    65dc:	08 95       	ret

000065de <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    65de:	80 93 e7 0a 	sts	0x0AE7, r24
	ret
    65e2:	08 95       	ret

000065e4 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    65e4:	80 93 e5 0a 	sts	0x0AE5, r24
	sts tile_table_hi,r25	
    65e8:	90 93 e6 0a 	sts	0x0AE6, r25
	ret
    65ec:	08 95       	ret

000065ee <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    65ee:	80 91 ee 0a 	lds	r24, 0x0AEE
	andi r24,SYNC_FLAG_VSYNC
    65f2:	81 70       	andi	r24, 0x01	; 1
	ret
    65f4:	08 95       	ret

000065f6 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    65f6:	20 91 ee 0a 	lds	r18, 0x0AEE
	andi r18,~SYNC_FLAG_VSYNC
    65fa:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    65fc:	20 93 ee 0a 	sts	0x0AEE, r18
	ret
    6600:	08 95       	ret

00006602 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6602:	88 23       	and	r24, r24
	brne rj_p2
    6604:	29 f4       	brne	.+10     	; 0x6610 <rj_p2>
		
	lds r24,joypad1_status_lo
    6606:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad1_status_lo+1
    660a:	90 91 f8 0a 	lds	r25, 0x0AF8
	ret
    660e:	08 95       	ret

00006610 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6610:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,joypad2_status_lo+1	
    6614:	90 91 fc 0a 	lds	r25, 0x0AFC

	ret
    6618:	08 95       	ret

0000661a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    661a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    661c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    661e:	f1 f7       	brne	.-4      	; 0x661c <WaitUs+0x2>
	nop
    6620:	00 00       	nop
	sbiw r24,1
    6622:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6624:	d1 f7       	brne	.-12     	; 0x661a <WaitUs>

	ret
    6626:	08 95       	ret

00006628 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6628:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    662a:	fe cf       	rjmp	.-4      	; 0x6628 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    662c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    662e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6630:	60 bd       	out	0x20, r22	; 32
   cli
    6632:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6634:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6636:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6638:	78 94       	sei
   ret
    663a:	08 95       	ret

0000663c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    663c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    663e:	fe cf       	rjmp	.-4      	; 0x663c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6640:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6642:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6644:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6646:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6648:	80 b5       	in	r24, 0x20	; 32
   sei
    664a:	78 94       	sei
   ret
    664c:	08 95       	ret

0000664e <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    664e:	98 e0       	ldi	r25, 0x08	; 8
    6650:	88 e1       	ldi	r24, 0x18	; 24
    6652:	0f b6       	in	r0, 0x3f	; 63
    6654:	f8 94       	cli
    6656:	a8 95       	wdr
    6658:	80 93 60 00 	sts	0x0060, r24
    665c:	0f be       	out	0x3f, r0	; 63
    665e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6662:	ff cf       	rjmp	.-2      	; 0x6662 <SoftReset+0x14>

00006664 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6664:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6666:	c8 95       	lpm
    6668:	c8 95       	lpm
		Wait200ns();
    666a:	c8 95       	lpm
    666c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    666e:	12 98       	cbi	0x02, 2	; 2
    6670:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    6672:	80 e0       	ldi	r24, 0x00	; 0
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	20 e0       	ldi	r18, 0x00	; 0
    6678:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    667a:	36 95       	lsr	r19
    667c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    667e:	96 95       	lsr	r25
    6680:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6682:	c8 95       	lpm
    6684:	c8 95       	lpm
			Wait200ns();
    6686:	c8 95       	lpm
    6688:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    668a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    668c:	00 9b       	sbis	0x00, 0	; 0
    668e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    6690:	01 9b       	sbis	0x00, 1	; 0
    6692:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    6694:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6696:	c8 95       	lpm
    6698:	c8 95       	lpm
			Wait200ns();
    669a:	c8 95       	lpm
    669c:	c8 95       	lpm
    669e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    66a0:	61 f7       	brne	.-40     	; 0x667a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    66a2:	30 93 f8 0a 	sts	0x0AF8, r19
    66a6:	20 93 f7 0a 	sts	0x0AF7, r18
		joypad2_status_lo=p2ButtonsLo;
    66aa:	90 93 fc 0a 	sts	0x0AFC, r25
    66ae:	80 93 fb 0a 	sts	0x0AFB, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    66b2:	80 91 f7 0a 	lds	r24, 0x0AF7
    66b6:	90 91 f8 0a 	lds	r25, 0x0AF8
    66ba:	0f 97       	sbiw	r24, 0x0f	; 15
    66bc:	31 f0       	breq	.+12     	; 0x66ca <ReadButtons+0x66>
    66be:	80 91 fb 0a 	lds	r24, 0x0AFB
    66c2:	90 91 fc 0a 	lds	r25, 0x0AFC
    66c6:	0f 97       	sbiw	r24, 0x0f	; 15
    66c8:	11 f4       	brne	.+4      	; 0x66ce <ReadButtons+0x6a>
		SoftReset();
    66ca:	0e 94 27 33 	call	0x664e	; 0x664e <SoftReset>
    66ce:	08 95       	ret

000066d0 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    66d0:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    66d4:	00 99       	sbic	0x00, 0	; 0
    66d6:	03 c0       	rjmp	.+6      	; 0x66de <ReadControllers+0xe>
    66d8:	81 e0       	ldi	r24, 0x01	; 1
    66da:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    66de:	01 99       	sbic	0x00, 1	; 0
    66e0:	05 c0       	rjmp	.+10     	; 0x66ec <ReadControllers+0x1c>
    66e2:	80 91 36 0b 	lds	r24, 0x0B36
    66e6:	82 60       	ori	r24, 0x02	; 2
    66e8:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    66ec:	0c 94 32 33 	jmp	0x6664	; 0x6664 <ReadButtons>

000066f0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    66f0:	cf 93       	push	r28
    66f2:	df 93       	push	r29
    66f4:	c0 e0       	ldi	r28, 0x00	; 0
    66f6:	d0 e0       	ldi	r29, 0x00	; 0
    66f8:	fe 01       	movw	r30, r28
    66fa:	e0 55       	subi	r30, 0x50	; 80
    66fc:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    66fe:	64 91       	lpm	r22, Z
    6700:	ce 01       	movw	r24, r28
    6702:	0e 94 14 33 	call	0x6628	; 0x6628 <WriteEeprom>
    6706:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    6708:	c0 32       	cpi	r28, 0x20	; 32
    670a:	d1 05       	cpc	r29, r1
    670c:	a9 f7       	brne	.-22     	; 0x66f8 <FormatEeprom+0x8>
    670e:	c0 e2       	ldi	r28, 0x20	; 32
    6710:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    6712:	6f ef       	ldi	r22, 0xFF	; 255
    6714:	ce 01       	movw	r24, r28
    6716:	0e 94 14 33 	call	0x6628	; 0x6628 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    671a:	6f ef       	ldi	r22, 0xFF	; 255
    671c:	ce 01       	movw	r24, r28
    671e:	01 96       	adiw	r24, 0x01	; 1
    6720:	0e 94 14 33 	call	0x6628	; 0x6628 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6724:	a0 96       	adiw	r28, 0x20	; 32
    6726:	c1 15       	cp	r28, r1
    6728:	88 e0       	ldi	r24, 0x08	; 8
    672a:	d8 07       	cpc	r29, r24
    672c:	91 f7       	brne	.-28     	; 0x6712 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    672e:	df 91       	pop	r29
    6730:	cf 91       	pop	r28
    6732:	08 95       	ret

00006734 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6734:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6736:	80 e0       	ldi	r24, 0x00	; 0
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    673e:	c8 2f       	mov	r28, r24
    6740:	81 e0       	ldi	r24, 0x01	; 1
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    6748:	28 2f       	mov	r18, r24
    674a:	30 e0       	ldi	r19, 0x00	; 0
    674c:	32 2f       	mov	r19, r18
    674e:	22 27       	eor	r18, r18
    6750:	2c 0f       	add	r18, r28
    6752:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    6754:	81 e0       	ldi	r24, 0x01	; 1
    6756:	2a 35       	cpi	r18, 0x5A	; 90
    6758:	35 45       	sbci	r19, 0x55	; 85
    675a:	09 f0       	breq	.+2      	; 0x675e <isEepromFormatted+0x2a>
    675c:	80 e0       	ldi	r24, 0x00	; 0
}
    675e:	cf 91       	pop	r28
    6760:	08 95       	ret

00006762 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    6762:	cf 92       	push	r12
    6764:	df 92       	push	r13
    6766:	ef 92       	push	r14
    6768:	ff 92       	push	r15
    676a:	0f 93       	push	r16
    676c:	1f 93       	push	r17
    676e:	cf 93       	push	r28
    6770:	df 93       	push	r29
    6772:	1f 92       	push	r1
    6774:	cd b7       	in	r28, 0x3d	; 61
    6776:	de b7       	in	r29, 0x3e	; 62
    6778:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    677a:	0e 94 9a 33 	call	0x6734	; 0x6734 <isEepromFormatted>
    677e:	88 23       	and	r24, r24
    6780:	09 f4       	brne	.+2      	; 0x6784 <EepromWriteBlock+0x22>
    6782:	4d c0       	rjmp	.+154    	; 0x681e <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6784:	f6 01       	movw	r30, r12
    6786:	80 81       	ld	r24, Z
    6788:	91 81       	ldd	r25, Z+1	; 0x01
    678a:	8f 3f       	cpi	r24, 0xFF	; 255
    678c:	ff ef       	ldi	r31, 0xFF	; 255
    678e:	9f 07       	cpc	r25, r31
    6790:	09 f4       	brne	.+2      	; 0x6794 <EepromWriteBlock+0x32>
    6792:	47 c0       	rjmp	.+142    	; 0x6822 <EepromWriteBlock+0xc0>
    6794:	8a 35       	cpi	r24, 0x5A	; 90
    6796:	95 45       	sbci	r25, 0x55	; 85
    6798:	09 f4       	brne	.+2      	; 0x679c <EepromWriteBlock+0x3a>
    679a:	43 c0       	rjmp	.+134    	; 0x6822 <EepromWriteBlock+0xc0>
    679c:	00 e2       	ldi	r16, 0x20	; 32
    679e:	10 e0       	ldi	r17, 0x00	; 0
    67a0:	f1 2c       	mov	r15, r1
    67a2:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    67a4:	c8 01       	movw	r24, r16
    67a6:	49 83       	std	Y+1, r20	; 0x01
    67a8:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    67ac:	e8 2e       	mov	r14, r24
    67ae:	c8 01       	movw	r24, r16
    67b0:	01 96       	adiw	r24, 0x01	; 1
    67b2:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    67b6:	28 2f       	mov	r18, r24
    67b8:	30 e0       	ldi	r19, 0x00	; 0
    67ba:	32 2f       	mov	r19, r18
    67bc:	22 27       	eor	r18, r18
    67be:	c9 01       	movw	r24, r18
    67c0:	8e 0d       	add	r24, r14
    67c2:	91 1d       	adc	r25, r1
		if(id==block->id){
    67c4:	f6 01       	movw	r30, r12
    67c6:	20 81       	ld	r18, Z
    67c8:	31 81       	ldd	r19, Z+1	; 0x01
    67ca:	49 81       	ldd	r20, Y+1	; 0x01
    67cc:	82 17       	cp	r24, r18
    67ce:	93 07       	cpc	r25, r19
    67d0:	19 f4       	brne	.+6      	; 0x67d8 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    67d2:	ff 20       	and	r15, r15
    67d4:	89 f0       	breq	.+34     	; 0x67f8 <EepromWriteBlock+0x96>
    67d6:	0c c0       	rjmp	.+24     	; 0x67f0 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    67d8:	01 96       	adiw	r24, 0x01	; 1
    67da:	19 f4       	brne	.+6      	; 0x67e2 <EepromWriteBlock+0x80>
    67dc:	f1 10       	cpse	r15, r1
    67de:	01 c0       	rjmp	.+2      	; 0x67e2 <EepromWriteBlock+0x80>
    67e0:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    67e2:	4f 5f       	subi	r20, 0xFF	; 255
    67e4:	00 5e       	subi	r16, 0xE0	; 224
    67e6:	1f 4f       	sbci	r17, 0xFF	; 255
    67e8:	40 34       	cpi	r20, 0x40	; 64
    67ea:	e1 f6       	brne	.-72     	; 0x67a4 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    67ec:	ff 20       	and	r15, r15
    67ee:	d9 f0       	breq	.+54     	; 0x6826 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    67f0:	20 e2       	ldi	r18, 0x20	; 32
    67f2:	f2 9e       	mul	r15, r18
    67f4:	80 01       	movw	r16, r0
    67f6:	11 24       	eor	r1, r1
    67f8:	76 01       	movw	r14, r12
    67fa:	80 e2       	ldi	r24, 0x20	; 32
    67fc:	e8 0e       	add	r14, r24
    67fe:	f1 1c       	adc	r15, r1
    6800:	0c 19       	sub	r16, r12
    6802:	1d 09       	sbc	r17, r13
    6804:	c6 01       	movw	r24, r12
    6806:	80 0f       	add	r24, r16
    6808:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    680a:	f6 01       	movw	r30, r12
    680c:	61 91       	ld	r22, Z+
    680e:	6f 01       	movw	r12, r30
    6810:	0e 94 14 33 	call	0x6628	; 0x6628 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6814:	ce 14       	cp	r12, r14
    6816:	df 04       	cpc	r13, r15
    6818:	a9 f7       	brne	.-22     	; 0x6804 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	05 c0       	rjmp	.+10     	; 0x6828 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    681e:	84 e0       	ldi	r24, 0x04	; 4
    6820:	03 c0       	rjmp	.+6      	; 0x6828 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	01 c0       	rjmp	.+2      	; 0x6828 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6826:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    6828:	0f 90       	pop	r0
    682a:	df 91       	pop	r29
    682c:	cf 91       	pop	r28
    682e:	1f 91       	pop	r17
    6830:	0f 91       	pop	r16
    6832:	ff 90       	pop	r15
    6834:	ef 90       	pop	r14
    6836:	df 90       	pop	r13
    6838:	cf 90       	pop	r12
    683a:	08 95       	ret

0000683c <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    683c:	df 92       	push	r13
    683e:	ef 92       	push	r14
    6840:	ff 92       	push	r15
    6842:	0f 93       	push	r16
    6844:	1f 93       	push	r17
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	7c 01       	movw	r14, r24
    684c:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    684e:	0e 94 9a 33 	call	0x6734	; 0x6734 <isEepromFormatted>
    6852:	88 23       	and	r24, r24
    6854:	89 f1       	breq	.+98     	; 0x68b8 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6856:	8f ef       	ldi	r24, 0xFF	; 255
    6858:	e8 16       	cp	r14, r24
    685a:	f8 06       	cpc	r15, r24
    685c:	79 f1       	breq	.+94     	; 0x68bc <EepromReadBlock+0x80>
    685e:	00 e0       	ldi	r16, 0x00	; 0
    6860:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6862:	c8 01       	movw	r24, r16
    6864:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    6868:	d8 2e       	mov	r13, r24
    686a:	c8 01       	movw	r24, r16
    686c:	01 96       	adiw	r24, 0x01	; 1
    686e:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    6872:	28 2f       	mov	r18, r24
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	32 2f       	mov	r19, r18
    6878:	22 27       	eor	r18, r18
    687a:	2d 0d       	add	r18, r13
    687c:	31 1d       	adc	r19, r1
		if(id==blockId){
    687e:	2e 15       	cp	r18, r14
    6880:	3f 05       	cpc	r19, r15
    6882:	39 f4       	brne	.+14     	; 0x6892 <EepromReadBlock+0x56>
    6884:	7e 01       	movw	r14, r28
    6886:	80 e2       	ldi	r24, 0x20	; 32
    6888:	e8 0e       	add	r14, r24
    688a:	f1 1c       	adc	r15, r1
    688c:	0c 1b       	sub	r16, r28
    688e:	1d 0b       	sbc	r17, r29
    6890:	08 c0       	rjmp	.+16     	; 0x68a2 <EepromReadBlock+0x66>
    6892:	00 5e       	subi	r16, 0xE0	; 224
    6894:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    6896:	01 15       	cp	r16, r1
    6898:	84 e0       	ldi	r24, 0x04	; 4
    689a:	18 07       	cpc	r17, r24
    689c:	11 f7       	brne	.-60     	; 0x6862 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    689e:	83 e0       	ldi	r24, 0x03	; 3
    68a0:	0e c0       	rjmp	.+28     	; 0x68be <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    68a2:	ce 01       	movw	r24, r28
    68a4:	80 0f       	add	r24, r16
    68a6:	91 1f       	adc	r25, r17
    68a8:	0e 94 1e 33 	call	0x663c	; 0x663c <ReadEeprom>
    68ac:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    68ae:	ce 15       	cp	r28, r14
    68b0:	df 05       	cpc	r29, r15
    68b2:	b9 f7       	brne	.-18     	; 0x68a2 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    68b4:	80 e0       	ldi	r24, 0x00	; 0
    68b6:	03 c0       	rjmp	.+6      	; 0x68be <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    68b8:	84 e0       	ldi	r24, 0x04	; 4
    68ba:	01 c0       	rjmp	.+2      	; 0x68be <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    68bc:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    68be:	df 91       	pop	r29
    68c0:	cf 91       	pop	r28
    68c2:	1f 91       	pop	r17
    68c4:	0f 91       	pop	r16
    68c6:	ff 90       	pop	r15
    68c8:	ef 90       	pop	r14
    68ca:	df 90       	pop	r13
    68cc:	08 95       	ret

000068ce <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    68ce:	fc 01       	movw	r30, r24
    68d0:	45 87       	std	Z+13, r20	; 0x0d
    68d2:	08 95       	ret

000068d4 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    68d4:	e2 e0       	ldi	r30, 0x02	; 2
    68d6:	fb e0       	ldi	r31, 0x0B	; 11
    68d8:	81 e0       	ldi	r24, 0x01	; 1
    68da:	91 e0       	ldi	r25, 0x01	; 1
    68dc:	95 8b       	std	Z+21, r25	; 0x15
    68de:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    68e0:	43 8b       	std	Z+19, r20	; 0x13
    68e2:	08 95       	ret

000068e4 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    68e4:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    68e6:	90 81       	ld	r25, Z
    68e8:	9f 75       	andi	r25, 0x5F	; 95
    68ea:	90 83       	st	Z, r25
    68ec:	08 95       	ret

000068ee <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    68ee:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    68f0:	90 81       	ld	r25, Z
    68f2:	90 64       	ori	r25, 0x40	; 64
    68f4:	90 83       	st	Z, r25
    68f6:	08 95       	ret

000068f8 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    68f8:	fc 01       	movw	r30, r24
    68fa:	44 87       	std	Z+12, r20	; 0x0c
    68fc:	08 95       	ret

000068fe <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    68fe:	fc 01       	movw	r30, r24
    6900:	47 83       	std	Z+7, r20	; 0x07
    6902:	08 95       	ret

00006904 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    6904:	fc 01       	movw	r30, r24
    6906:	40 87       	std	Z+8, r20	; 0x08
    6908:	08 95       	ret

0000690a <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    690a:	1f 93       	push	r17
    690c:	cf 93       	push	r28
    690e:	df 93       	push	r29
    6910:	ec 01       	movw	r28, r24
    6912:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    6914:	29 81       	ldd	r18, Y+1	; 0x01
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	f9 01       	movw	r30, r18
    691a:	ee 0f       	add	r30, r30
    691c:	ff 1f       	adc	r31, r31
    691e:	e8 5f       	subi	r30, 0xF8	; 248
    6920:	fe 48       	sbci	r31, 0x8E	; 142
    6922:	65 91       	lpm	r22, Z+
    6924:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    6926:	f9 01       	movw	r30, r18
    6928:	e4 0f       	add	r30, r20
    692a:	f1 1d       	adc	r31, r1
    692c:	47 fd       	sbrc	r20, 7
    692e:	fa 95       	dec	r31
    6930:	ee 0f       	add	r30, r30
    6932:	ff 1f       	adc	r31, r31
    6934:	e8 5f       	subi	r30, 0xF8	; 248
    6936:	fe 48       	sbci	r31, 0x8E	; 142
    6938:	85 91       	lpm	r24, Z+
    693a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    693c:	86 1b       	sub	r24, r22
    693e:	97 0b       	sbc	r25, r23
    6940:	60 91 3e 0b 	lds	r22, 0x0B3E
    6944:	70 e0       	ldi	r23, 0x00	; 0
    6946:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
	if(delta==0)delta++;
    694a:	61 15       	cp	r22, r1
    694c:	71 05       	cpc	r23, r1
    694e:	11 f4       	brne	.+4      	; 0x6954 <PatchCommand11+0x4a>
    6950:	61 e0       	ldi	r22, 0x01	; 1
    6952:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    6954:	86 e0       	ldi	r24, 0x06	; 6
    6956:	18 9f       	mul	r17, r24
    6958:	f0 01       	movw	r30, r0
    695a:	11 24       	eor	r1, r1
    695c:	ee 5f       	subi	r30, 0xFE	; 254
    695e:	f4 4f       	sbci	r31, 0xF4	; 244
    6960:	81 81       	ldd	r24, Z+1	; 0x01
    6962:	92 81       	ldd	r25, Z+2	; 0x02
    6964:	86 0f       	add	r24, r22
    6966:	97 1f       	adc	r25, r23
    6968:	92 83       	std	Z+2, r25	; 0x02
    696a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    696c:	7b 83       	std	Y+3, r23	; 0x03
    696e:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    6970:	88 81       	ld	r24, Y
    6972:	88 60       	ori	r24, 0x08	; 8
    6974:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    6976:	89 81       	ldd	r24, Y+1	; 0x01
    6978:	48 0f       	add	r20, r24
    697a:	4c 83       	std	Y+4, r20	; 0x04
}
    697c:	df 91       	pop	r29
    697e:	cf 91       	pop	r28
    6980:	1f 91       	pop	r17
    6982:	08 95       	ret

00006984 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    6984:	40 93 3e 0b 	sts	0x0B3E, r20
    6988:	08 95       	ret

0000698a <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    698a:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    698c:	64 2f       	mov	r22, r20
    698e:	0c 94 5c 38 	jmp	0x70b8	; 0x70b8 <SetMixerWave>

00006992 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    6992:	fc 01       	movw	r30, r24
    6994:	86 2f       	mov	r24, r22
	track->note+=param;
    6996:	91 81       	ldd	r25, Z+1	; 0x01
    6998:	64 2f       	mov	r22, r20
    699a:	69 0f       	add	r22, r25
    699c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    699e:	0c 94 45 38 	jmp	0x708a	; 0x708a <SetMixerNote>

000069a2 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    69a2:	fc 01       	movw	r30, r24
    69a4:	86 2f       	mov	r24, r22
	track->note-=param;
    69a6:	91 81       	ldd	r25, Z+1	; 0x01
    69a8:	69 2f       	mov	r22, r25
    69aa:	64 1b       	sub	r22, r20
    69ac:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    69ae:	0c 94 45 38 	jmp	0x708a	; 0x708a <SetMixerNote>

000069b2 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    69b2:	0f 93       	push	r16
    69b4:	1f 93       	push	r17
    69b6:	cf 93       	push	r28
    69b8:	df 93       	push	r29
    69ba:	1f 92       	push	r1
    69bc:	cd b7       	in	r28, 0x3d	; 61
    69be:	de b7       	in	r29, 0x3e	; 62
    69c0:	8c 01       	movw	r16, r24
    69c2:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    69c4:	64 2f       	mov	r22, r20
    69c6:	49 83       	std	Y+1, r20	; 0x01
    69c8:	0e 94 45 38 	call	0x708a	; 0x708a <SetMixerNote>
	track->note=param;
    69cc:	49 81       	ldd	r20, Y+1	; 0x01
    69ce:	f8 01       	movw	r30, r16
    69d0:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    69d2:	80 81       	ld	r24, Z
    69d4:	87 7f       	andi	r24, 0xF7	; 247
    69d6:	80 83       	st	Z, r24
}
    69d8:	0f 90       	pop	r0
    69da:	df 91       	pop	r29
    69dc:	cf 91       	pop	r28
    69de:	1f 91       	pop	r17
    69e0:	0f 91       	pop	r16
    69e2:	08 95       	ret

000069e4 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    69e4:	90 93 aa 0b 	sts	0x0BAA, r25
    69e8:	80 93 a9 0b 	sts	0x0BA9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    69ec:	8f e6       	ldi	r24, 0x6F	; 111
    69ee:	80 93 ac 0b 	sts	0x0BAC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    69f2:	10 92 00 0b 	sts	0x0B00, r1
    69f6:	e7 e4       	ldi	r30, 0x47	; 71
    69f8:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    69fa:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    69fc:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    69fe:	28 e1       	ldi	r18, 0x18	; 24
    6a00:	df 01       	movw	r26, r30
    6a02:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6a04:	8c 93       	st	X, r24
    6a06:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    6a08:	1c 92       	st	X, r1
    6a0a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6a0c:	9c 93       	st	X, r25
    6a0e:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    6a10:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    6a12:	10 82       	st	Z, r1
    6a14:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    6a16:	2c 93       	st	X, r18
    6a18:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    6a1a:	8c 93       	st	X, r24
    6a1c:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6a1e:	3b e0       	ldi	r19, 0x0B	; 11
    6a20:	e5 3b       	cpi	r30, 0xB5	; 181
    6a22:	f3 07       	cpc	r31, r19
    6a24:	69 f7       	brne	.-38     	; 0x6a00 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    6a26:	08 95       	ret

00006a28 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    6a28:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    6a2a:	ed 91       	ld	r30, X+
    6a2c:	fc 91       	ld	r31, X
    6a2e:	11 97       	sbiw	r26, 0x01	; 1
    6a30:	9f 01       	movw	r18, r30
    6a32:	2f 5f       	subi	r18, 0xFF	; 255
    6a34:	3f 4f       	sbci	r19, 0xFF	; 255
    6a36:	11 96       	adiw	r26, 0x01	; 1
    6a38:	3c 93       	st	X, r19
    6a3a:	2e 93       	st	-X, r18
    6a3c:	e4 91       	lpm	r30, Z
    6a3e:	e7 fd       	sbrc	r30, 7
    6a40:	03 c0       	rjmp	.+6      	; 0x6a48 <ReadVarLen+0x20>
    6a42:	8e 2f       	mov	r24, r30
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	08 95       	ret
    {
       value &= 0x7F;
    6a48:	ef 77       	andi	r30, 0x7F	; 127
    6a4a:	8e 2f       	mov	r24, r30
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    6a4e:	96 95       	lsr	r25
    6a50:	98 2f       	mov	r25, r24
    6a52:	88 27       	eor	r24, r24
    6a54:	97 95       	ror	r25
    6a56:	87 95       	ror	r24
    6a58:	2f 5f       	subi	r18, 0xFF	; 255
    6a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5c:	f9 01       	movw	r30, r18
    6a5e:	31 97       	sbiw	r30, 0x01	; 1
    6a60:	e4 91       	lpm	r30, Z
    6a62:	4e 2f       	mov	r20, r30
    6a64:	4f 77       	andi	r20, 0x7F	; 127
    6a66:	84 0f       	add	r24, r20
    6a68:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    6a6a:	e7 fd       	sbrc	r30, 7
    6a6c:	f0 cf       	rjmp	.-32     	; 0x6a4e <ReadVarLen+0x26>
    6a6e:	2d 93       	st	X+, r18
    6a70:	3c 93       	st	X, r19
    }


    return value;
}
    6a72:	08 95       	ret

00006a74 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    6a74:	cf 92       	push	r12
    6a76:	df 92       	push	r13
    6a78:	ff 92       	push	r15
    6a7a:	0f 93       	push	r16
    6a7c:	1f 93       	push	r17
    6a7e:	cf 93       	push	r28
    6a80:	df 93       	push	r29
    6a82:	1f 92       	push	r1
    6a84:	cd b7       	in	r28, 0x3d	; 61
    6a86:	de b7       	in	r29, 0x3e	; 62
    6a88:	18 2f       	mov	r17, r24
    6a8a:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    6a8c:	c8 2e       	mov	r12, r24
    6a8e:	d1 2c       	mov	r13, r1
    6a90:	36 e1       	ldi	r19, 0x16	; 22
    6a92:	83 9f       	mul	r24, r19
    6a94:	f0 01       	movw	r30, r0
    6a96:	11 24       	eor	r1, r1
    6a98:	e7 5c       	subi	r30, 0xC7	; 199
    6a9a:	f4 4f       	sbci	r31, 0xF4	; 244
    6a9c:	80 81       	ld	r24, Z
    6a9e:	f8 2e       	mov	r15, r24
    6aa0:	ff 1c       	adc	r15, r15
    6aa2:	ff 24       	eor	r15, r15
    6aa4:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    6aa6:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    6aa8:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    6aaa:	9f ef       	ldi	r25, 0xFF	; 255
    6aac:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    6aae:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    6ab0:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    6ab2:	87 7b       	andi	r24, 0xB7	; 183
    6ab4:	80 62       	ori	r24, 0x20	; 32
    6ab6:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    6ab8:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    6aba:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    6abc:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    6abe:	13 30       	cpi	r17, 0x03	; 3
    6ac0:	69 f4       	brne	.+26     	; 0x6adc <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    6ac2:	f1 10       	cpse	r15, r1
    6ac4:	01 c0       	rjmp	.+2      	; 0x6ac8 <TriggerCommon+0x54>
    6ac6:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	91 e0       	ldi	r25, 0x01	; 1
    6acc:	90 93 17 0b 	sts	0x0B17, r25
    6ad0:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	80 93 15 0b 	sts	0x0B15, r24
    6ada:	3c c0       	rjmp	.+120    	; 0x6b54 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    6adc:	14 30       	cpi	r17, 0x04	; 4
    6ade:	09 f0       	breq	.+2      	; 0x6ae2 <TriggerCommon+0x6e>
    6ae0:	2f c0       	rjmp	.+94     	; 0x6b40 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    6ae2:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    6ae6:	80 91 a9 0b 	lds	r24, 0x0BA9
    6aea:	90 91 aa 0b 	lds	r25, 0x0BAA
    6aee:	e9 e0       	ldi	r30, 0x09	; 9
    6af0:	6e 9f       	mul	r22, r30
    6af2:	80 0d       	add	r24, r0
    6af4:	91 1d       	adc	r25, r1
    6af6:	11 24       	eor	r1, r1
    6af8:	fc 01       	movw	r30, r24
    6afa:	31 96       	adiw	r30, 0x01	; 1
    6afc:	65 91       	lpm	r22, Z+
    6afe:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    6b00:	70 93 1f 0b 	sts	0x0B1F, r23
    6b04:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    6b08:	ac 01       	movw	r20, r24
    6b0a:	49 5f       	subi	r20, 0xF9	; 249
    6b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b0e:	fa 01       	movw	r30, r20
    6b10:	a5 91       	lpm	r26, Z+
    6b12:	b4 91       	lpm	r27, Z
    6b14:	05 96       	adiw	r24, 0x05	; 5
    6b16:	fc 01       	movw	r30, r24
    6b18:	85 91       	lpm	r24, Z+
    6b1a:	94 91       	lpm	r25, Z
    6b1c:	a8 1b       	sub	r26, r24
    6b1e:	b9 0b       	sbc	r27, r25
    6b20:	b0 93 21 0b 	sts	0x0B21, r27
    6b24:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    6b28:	fa 01       	movw	r30, r20
    6b2a:	85 91       	lpm	r24, Z+
    6b2c:	94 91       	lpm	r25, Z
    6b2e:	68 0f       	add	r22, r24
    6b30:	79 1f       	adc	r23, r25
    6b32:	70 93 23 0b 	sts	0x0B23, r23
    6b36:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    6b3a:	62 2f       	mov	r22, r18
    6b3c:	84 e0       	ldi	r24, 0x04	; 4
    6b3e:	08 c0       	rjmp	.+16     	; 0x6b50 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    6b40:	60 e0       	ldi	r22, 0x00	; 0
    6b42:	81 2f       	mov	r24, r17
    6b44:	29 83       	std	Y+1, r18	; 0x01
    6b46:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <SetMixerWave>
			SetMixerNote(channel,note);
    6b4a:	29 81       	ldd	r18, Y+1	; 0x01
    6b4c:	62 2f       	mov	r22, r18
    6b4e:	81 2f       	mov	r24, r17
    6b50:	0e 94 45 38 	call	0x708a	; 0x708a <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    6b54:	86 e1       	ldi	r24, 0x16	; 22
    6b56:	8c 9d       	mul	r24, r12
    6b58:	f0 01       	movw	r30, r0
    6b5a:	8d 9d       	mul	r24, r13
    6b5c:	f0 0d       	add	r31, r0
    6b5e:	11 24       	eor	r1, r1
    6b60:	e7 5c       	subi	r30, 0xC7	; 199
    6b62:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    6b64:	ff 20       	and	r15, r15
    6b66:	11 f0       	breq	.+4      	; 0x6b6c <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    6b68:	07 87       	std	Z+15, r16	; 0x0f
    6b6a:	01 c0       	rjmp	.+2      	; 0x6b6e <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    6b6c:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    6b6e:	e0 91 a9 0b 	lds	r30, 0x0BA9
    6b72:	f0 91 aa 0b 	lds	r31, 0x0BAA
    6b76:	39 e0       	ldi	r19, 0x09	; 9
    6b78:	03 9f       	mul	r16, r19
    6b7a:	e0 0d       	add	r30, r0
    6b7c:	f1 1d       	adc	r31, r1
    6b7e:	11 24       	eor	r1, r1
    6b80:	33 96       	adiw	r30, 0x03	; 3
    6b82:	85 91       	lpm	r24, Z+
    6b84:	94 91       	lpm	r25, Z
	if(pos==NULL){
    6b86:	00 97       	sbiw	r24, 0x00	; 0
    6b88:	59 f4       	brne	.+22     	; 0x6ba0 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    6b8a:	86 e1       	ldi	r24, 0x16	; 22
    6b8c:	8c 9d       	mul	r24, r12
    6b8e:	f0 01       	movw	r30, r0
    6b90:	8d 9d       	mul	r24, r13
    6b92:	f0 0d       	add	r31, r0
    6b94:	11 24       	eor	r1, r1
    6b96:	e7 5c       	subi	r30, 0xC7	; 199
    6b98:	f4 4f       	sbci	r31, 0xF4	; 244
    6b9a:	15 8a       	std	Z+21, r1	; 0x15
    6b9c:	14 8a       	std	Z+20, r1	; 0x14
    6b9e:	0e c0       	rjmp	.+28     	; 0x6bbc <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	24 91       	lpm	r18, Z
    6ba4:	36 e1       	ldi	r19, 0x16	; 22
    6ba6:	3c 9d       	mul	r19, r12
    6ba8:	f0 01       	movw	r30, r0
    6baa:	3d 9d       	mul	r19, r13
    6bac:	f0 0d       	add	r31, r0
    6bae:	11 24       	eor	r1, r1
    6bb0:	e7 5c       	subi	r30, 0xC7	; 199
    6bb2:	f4 4f       	sbci	r31, 0xF4	; 244
    6bb4:	21 8b       	std	Z+17, r18	; 0x11
    6bb6:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    6bb8:	95 8b       	std	Z+21, r25	; 0x15
    6bba:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    6bbc:	0f 90       	pop	r0
    6bbe:	df 91       	pop	r29
    6bc0:	cf 91       	pop	r28
    6bc2:	1f 91       	pop	r17
    6bc4:	0f 91       	pop	r16
    6bc6:	ff 90       	pop	r15
    6bc8:	df 90       	pop	r13
    6bca:	cf 90       	pop	r12
    6bcc:	08 95       	ret

00006bce <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    6bce:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    6bd0:	a8 2f       	mov	r26, r24
    6bd2:	b0 e0       	ldi	r27, 0x00	; 0
    6bd4:	96 e1       	ldi	r25, 0x16	; 22
    6bd6:	89 9f       	mul	r24, r25
    6bd8:	f0 01       	movw	r30, r0
    6bda:	11 24       	eor	r1, r1
    6bdc:	e7 5c       	subi	r30, 0xC7	; 199
    6bde:	f4 4f       	sbci	r31, 0xF4	; 244
    6be0:	90 81       	ld	r25, Z
    6be2:	95 ff       	sbrs	r25, 5
    6be4:	02 c0       	rjmp	.+4      	; 0x6bea <TriggerNote+0x1c>
    6be6:	97 fd       	sbrc	r25, 7
    6be8:	28 c0       	rjmp	.+80     	; 0x6c3a <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    6bea:	31 11       	cpse	r19, r1
    6bec:	18 c0       	rjmp	.+48     	; 0x6c1e <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    6bee:	86 e1       	ldi	r24, 0x16	; 22
    6bf0:	8a 9f       	mul	r24, r26
    6bf2:	f0 01       	movw	r30, r0
    6bf4:	8b 9f       	mul	r24, r27
    6bf6:	f0 0d       	add	r31, r0
    6bf8:	11 24       	eor	r1, r1
    6bfa:	e7 5c       	subi	r30, 0xC7	; 199
    6bfc:	f4 4f       	sbci	r31, 0xF4	; 244
    6bfe:	85 85       	ldd	r24, Z+13	; 0x0d
    6c00:	81 11       	cpse	r24, r1
    6c02:	02 c0       	rjmp	.+4      	; 0x6c08 <TriggerNote+0x3a>
    6c04:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    6c06:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    6c08:	86 e1       	ldi	r24, 0x16	; 22
    6c0a:	8a 9f       	mul	r24, r26
    6c0c:	f0 01       	movw	r30, r0
    6c0e:	8b 9f       	mul	r24, r27
    6c10:	f0 0d       	add	r31, r0
    6c12:	11 24       	eor	r1, r1
    6c14:	e7 5c       	subi	r30, 0xC7	; 199
    6c16:	f4 4f       	sbci	r31, 0xF4	; 244
    6c18:	9f 7b       	andi	r25, 0xBF	; 191
    6c1a:	90 83       	st	Z, r25
    6c1c:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    6c1e:	26 e1       	ldi	r18, 0x16	; 22
    6c20:	2a 9f       	mul	r18, r26
    6c22:	f0 01       	movw	r30, r0
    6c24:	2b 9f       	mul	r18, r27
    6c26:	f0 0d       	add	r31, r0
    6c28:	11 24       	eor	r1, r1
    6c2a:	e7 5c       	subi	r30, 0xC7	; 199
    6c2c:	f4 4f       	sbci	r31, 0xF4	; 244
    6c2e:	9f 77       	andi	r25, 0x7F	; 127
    6c30:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    6c32:	24 2f       	mov	r18, r20
    6c34:	43 2f       	mov	r20, r19
    6c36:	0c 94 3a 35 	jmp	0x6a74	; 0x6a74 <TriggerCommon>
    6c3a:	08 95       	ret

00006c3c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    6c3c:	5f 92       	push	r5
    6c3e:	6f 92       	push	r6
    6c40:	7f 92       	push	r7
    6c42:	8f 92       	push	r8
    6c44:	9f 92       	push	r9
    6c46:	af 92       	push	r10
    6c48:	bf 92       	push	r11
    6c4a:	cf 92       	push	r12
    6c4c:	df 92       	push	r13
    6c4e:	ef 92       	push	r14
    6c50:	ff 92       	push	r15
    6c52:	0f 93       	push	r16
    6c54:	1f 93       	push	r17
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	c9 e3       	ldi	r28, 0x39	; 57
    6c5c:	db e0       	ldi	r29, 0x0B	; 11
    6c5e:	82 e0       	ldi	r24, 0x02	; 2
    6c60:	e8 2e       	mov	r14, r24
    6c62:	8b e0       	ldi	r24, 0x0B	; 11
    6c64:	f8 2e       	mov	r15, r24
    6c66:	d7 01       	movw	r26, r14
    6c68:	9e 01       	movw	r18, r28
    6c6a:	40 e0       	ldi	r20, 0x00	; 0
    6c6c:	50 e0       	ldi	r21, 0x00	; 0
    6c6e:	ca 01       	movw	r24, r20
    6c70:	87 5c       	subi	r24, 0xC7	; 199
    6c72:	94 4f       	sbci	r25, 0xF4	; 244
    6c74:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    6c76:	fc 01       	movw	r30, r24
    6c78:	85 85       	ldd	r24, Z+13	; 0x0d
    6c7a:	88 23       	and	r24, r24
    6c7c:	91 f0       	breq	.+36     	; 0x6ca2 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    6c7e:	64 85       	ldd	r22, Z+12	; 0x0c
    6c80:	99 27       	eor	r25, r25
    6c82:	87 fd       	sbrc	r24, 7
    6c84:	90 95       	com	r25
    6c86:	86 0f       	add	r24, r22
    6c88:	91 1d       	adc	r25, r1
    6c8a:	8f 3f       	cpi	r24, 0xFF	; 255
    6c8c:	91 05       	cpc	r25, r1
    6c8e:	19 f0       	breq	.+6      	; 0x6c96 <ProcessMusic+0x5a>
    6c90:	14 f0       	brlt	.+4      	; 0x6c96 <ProcessMusic+0x5a>
    6c92:	8f ef       	ldi	r24, 0xFF	; 255
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	97 ff       	sbrs	r25, 7
    6c98:	02 c0       	rjmp	.+4      	; 0x6c9e <ProcessMusic+0x62>
    6c9a:	80 e0       	ldi	r24, 0x00	; 0
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    6c9e:	f6 01       	movw	r30, r12
    6ca0:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    6ca2:	f9 01       	movw	r30, r18
    6ca4:	10 81       	ld	r17, Z
    6ca6:	13 ff       	sbrs	r17, 3
    6ca8:	29 c0       	rjmp	.+82     	; 0x6cfc <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    6caa:	62 81       	ldd	r22, Z+2	; 0x02
    6cac:	73 81       	ldd	r23, Z+3	; 0x03
    6cae:	11 96       	adiw	r26, 0x01	; 1
    6cb0:	8d 91       	ld	r24, X+
    6cb2:	9c 91       	ld	r25, X
    6cb4:	12 97       	sbiw	r26, 0x02	; 2
    6cb6:	86 0f       	add	r24, r22
    6cb8:	97 1f       	adc	r25, r23
    6cba:	12 96       	adiw	r26, 0x02	; 2
    6cbc:	9c 93       	st	X, r25
    6cbe:	8e 93       	st	-X, r24
    6cc0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    6cc2:	f6 01       	movw	r30, r12
    6cc4:	04 81       	ldd	r16, Z+4	; 0x04
    6cc6:	e0 2f       	mov	r30, r16
    6cc8:	f0 e0       	ldi	r31, 0x00	; 0
    6cca:	ee 0f       	add	r30, r30
    6ccc:	ff 1f       	adc	r31, r31
    6cce:	e8 5f       	subi	r30, 0xF8	; 248
    6cd0:	fe 48       	sbci	r31, 0x8E	; 142
    6cd2:	c5 90       	lpm	r12, Z+
    6cd4:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    6cd6:	16 16       	cp	r1, r22
    6cd8:	17 06       	cpc	r1, r23
    6cda:	24 f4       	brge	.+8      	; 0x6ce4 <ProcessMusic+0xa8>
    6cdc:	8c 15       	cp	r24, r12
    6cde:	9d 05       	cpc	r25, r13
    6ce0:	30 f4       	brcc	.+12     	; 0x6cee <ProcessMusic+0xb2>
    6ce2:	0c c0       	rjmp	.+24     	; 0x6cfc <ProcessMusic+0xc0>
    6ce4:	67 2b       	or	r22, r23
    6ce6:	51 f0       	breq	.+20     	; 0x6cfc <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    6ce8:	c8 16       	cp	r12, r24
    6cea:	d9 06       	cpc	r13, r25
    6cec:	38 f0       	brcs	.+14     	; 0x6cfc <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    6cee:	12 96       	adiw	r26, 0x02	; 2
    6cf0:	dc 92       	st	X, r13
    6cf2:	ce 92       	st	-X, r12
    6cf4:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6cf6:	17 7f       	andi	r17, 0xF7	; 247
    6cf8:	f9 01       	movw	r30, r18
    6cfa:	10 83       	st	Z, r17
    6cfc:	4a 5e       	subi	r20, 0xEA	; 234
    6cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    6d00:	2a 5e       	subi	r18, 0xEA	; 234
    6d02:	3f 4f       	sbci	r19, 0xFF	; 255
    6d04:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6d06:	4e 36       	cpi	r20, 0x6E	; 110
    6d08:	51 05       	cpc	r21, r1
    6d0a:	09 f0       	breq	.+2      	; 0x6d0e <ProcessMusic+0xd2>
    6d0c:	b0 cf       	rjmp	.-160    	; 0x6c6e <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    6d0e:	80 91 00 0b 	lds	r24, 0x0B00
    6d12:	88 23       	and	r24, r24
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <ProcessMusic+0xdc>
    6d16:	cb c0       	rjmp	.+406    	; 0x6eae <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    6d18:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    6d1a:	80 91 a7 0b 	lds	r24, 0x0BA7
    6d1e:	90 91 a8 0b 	lds	r25, 0x0BA8
    6d22:	20 91 ad 0b 	lds	r18, 0x0BAD
    6d26:	30 91 ae 0b 	lds	r19, 0x0BAE
    6d2a:	82 17       	cp	r24, r18
    6d2c:	93 07       	cpc	r25, r19
    6d2e:	09 f0       	breq	.+2      	; 0x6d32 <ProcessMusic+0xf6>
    6d30:	b9 c0       	rjmp	.+370    	; 0x6ea4 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    6d32:	20 91 b0 0b 	lds	r18, 0x0BB0
    6d36:	30 91 b1 0b 	lds	r19, 0x0BB1
    6d3a:	b9 01       	movw	r22, r18
    6d3c:	6f 5f       	subi	r22, 0xFF	; 255
    6d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d40:	70 93 b1 0b 	sts	0x0BB1, r23
    6d44:	60 93 b0 0b 	sts	0x0BB0, r22
    6d48:	f9 01       	movw	r30, r18
    6d4a:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    6d4c:	4f 3f       	cpi	r20, 0xFF	; 255
    6d4e:	79 f5       	brne	.+94     	; 0x6dae <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    6d50:	a9 01       	movw	r20, r18
    6d52:	4e 5f       	subi	r20, 0xFE	; 254
    6d54:	5f 4f       	sbci	r21, 0xFF	; 255
    6d56:	50 93 b1 0b 	sts	0x0BB1, r21
    6d5a:	40 93 b0 0b 	sts	0x0BB0, r20
    6d5e:	fb 01       	movw	r30, r22
    6d60:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    6d62:	6f 32       	cpi	r22, 0x2F	; 47
    6d64:	19 f4       	brne	.+6      	; 0x6d6c <ProcessMusic+0x130>
						playSong=false;
    6d66:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    6d6a:	9c c0       	rjmp	.+312    	; 0x6ea4 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    6d6c:	66 30       	cpi	r22, 0x06	; 6
    6d6e:	09 f0       	breq	.+2      	; 0x6d72 <ProcessMusic+0x136>
    6d70:	8c c0       	rjmp	.+280    	; 0x6e8a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    6d72:	fa 01       	movw	r30, r20
    6d74:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    6d76:	c9 01       	movw	r24, r18
    6d78:	04 96       	adiw	r24, 0x04	; 4
    6d7a:	90 93 b1 0b 	sts	0x0BB1, r25
    6d7e:	80 93 b0 0b 	sts	0x0BB0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    6d82:	f9 01       	movw	r30, r18
    6d84:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    6d86:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    6d88:	e3 35       	cpi	r30, 0x53	; 83
    6d8a:	29 f4       	brne	.+10     	; 0x6d96 <ProcessMusic+0x15a>
							loopStart=songPos;
    6d8c:	90 93 b3 0b 	sts	0x0BB3, r25
    6d90:	80 93 b2 0b 	sts	0x0BB2, r24
    6d94:	7a c0       	rjmp	.+244    	; 0x6e8a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    6d96:	e5 34       	cpi	r30, 0x45	; 69
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <ProcessMusic+0x160>
    6d9a:	77 c0       	rjmp	.+238    	; 0x6e8a <ProcessMusic+0x24e>
							songPos=loopStart;
    6d9c:	80 91 b2 0b 	lds	r24, 0x0BB2
    6da0:	90 91 b3 0b 	lds	r25, 0x0BB3
    6da4:	90 93 b1 0b 	sts	0x0BB1, r25
    6da8:	80 93 b0 0b 	sts	0x0BB0, r24
    6dac:	6e c0       	rjmp	.+220    	; 0x6e8a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    6dae:	47 fd       	sbrc	r20, 7
    6db0:	40 93 ab 0b 	sts	0x0BAB, r20
					channel=lastStatus&0x0f;
    6db4:	90 91 ab 0b 	lds	r25, 0x0BAB
    6db8:	89 2f       	mov	r24, r25
    6dba:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    6dbc:	47 ff       	sbrs	r20, 7
    6dbe:	08 c0       	rjmp	.+16     	; 0x6dd0 <ProcessMusic+0x194>
    6dc0:	2e 5f       	subi	r18, 0xFE	; 254
    6dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc4:	30 93 b1 0b 	sts	0x0BB1, r19
    6dc8:	20 93 b0 0b 	sts	0x0BB0, r18
    6dcc:	fb 01       	movw	r30, r22
    6dce:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    6dd0:	90 7f       	andi	r25, 0xF0	; 240
    6dd2:	90 3b       	cpi	r25, 0xB0	; 176
    6dd4:	e1 f0       	breq	.+56     	; 0x6e0e <ProcessMusic+0x1d2>
    6dd6:	90 3c       	cpi	r25, 0xC0	; 192
    6dd8:	09 f4       	brne	.+2      	; 0x6ddc <ProcessMusic+0x1a0>
    6dda:	51 c0       	rjmp	.+162    	; 0x6e7e <ProcessMusic+0x242>
    6ddc:	90 39       	cpi	r25, 0x90	; 144
    6dde:	09 f0       	breq	.+2      	; 0x6de2 <ProcessMusic+0x1a6>
    6de0:	54 c0       	rjmp	.+168    	; 0x6e8a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6de2:	e0 91 b0 0b 	lds	r30, 0x0BB0
    6de6:	f0 91 b1 0b 	lds	r31, 0x0BB1
    6dea:	9f 01       	movw	r18, r30
    6dec:	2f 5f       	subi	r18, 0xFF	; 255
    6dee:	3f 4f       	sbci	r19, 0xFF	; 255
    6df0:	30 93 b1 0b 	sts	0x0BB1, r19
    6df4:	20 93 b0 0b 	sts	0x0BB0, r18
    6df8:	24 91       	lpm	r18, Z
    6dfa:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    6dfc:	18 9f       	mul	r17, r24
    6dfe:	f0 01       	movw	r30, r0
    6e00:	11 24       	eor	r1, r1
    6e02:	e7 5c       	subi	r30, 0xC7	; 199
    6e04:	f4 4f       	sbci	r31, 0xF4	; 244
    6e06:	66 85       	ldd	r22, Z+14	; 0x0e
    6e08:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
    6e0c:	3e c0       	rjmp	.+124    	; 0x6e8a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    6e0e:	e0 91 b0 0b 	lds	r30, 0x0BB0
    6e12:	f0 91 b1 0b 	lds	r31, 0x0BB1
    6e16:	9f 01       	movw	r18, r30
    6e18:	2f 5f       	subi	r18, 0xFF	; 255
    6e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1c:	30 93 b1 0b 	sts	0x0BB1, r19
    6e20:	20 93 b0 0b 	sts	0x0BB0, r18
    6e24:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    6e26:	47 30       	cpi	r20, 0x07	; 7
    6e28:	49 f4       	brne	.+18     	; 0x6e3c <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    6e2a:	18 9f       	mul	r17, r24
    6e2c:	d0 01       	movw	r26, r0
    6e2e:	11 24       	eor	r1, r1
    6e30:	a7 5c       	subi	r26, 0xC7	; 199
    6e32:	b4 4f       	sbci	r27, 0xF4	; 244
    6e34:	ee 0f       	add	r30, r30
    6e36:	1a 96       	adiw	r26, 0x0a	; 10
    6e38:	ec 93       	st	X, r30
    6e3a:	27 c0       	rjmp	.+78     	; 0x6e8a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    6e3c:	4b 30       	cpi	r20, 0x0B	; 11
    6e3e:	49 f4       	brne	.+18     	; 0x6e52 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    6e40:	18 9f       	mul	r17, r24
    6e42:	d0 01       	movw	r26, r0
    6e44:	11 24       	eor	r1, r1
    6e46:	a7 5c       	subi	r26, 0xC7	; 199
    6e48:	b4 4f       	sbci	r27, 0xF4	; 244
    6e4a:	ee 0f       	add	r30, r30
    6e4c:	19 96       	adiw	r26, 0x09	; 9
    6e4e:	ec 93       	st	X, r30
    6e50:	1c c0       	rjmp	.+56     	; 0x6e8a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    6e52:	4c 35       	cpi	r20, 0x5C	; 92
    6e54:	49 f4       	brne	.+18     	; 0x6e68 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    6e56:	18 9f       	mul	r17, r24
    6e58:	d0 01       	movw	r26, r0
    6e5a:	11 24       	eor	r1, r1
    6e5c:	a7 5c       	subi	r26, 0xC7	; 199
    6e5e:	b4 4f       	sbci	r27, 0xF4	; 244
    6e60:	ee 0f       	add	r30, r30
    6e62:	17 96       	adiw	r26, 0x07	; 7
    6e64:	ec 93       	st	X, r30
    6e66:	11 c0       	rjmp	.+34     	; 0x6e8a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    6e68:	44 36       	cpi	r20, 0x64	; 100
    6e6a:	79 f4       	brne	.+30     	; 0x6e8a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    6e6c:	18 9f       	mul	r17, r24
    6e6e:	d0 01       	movw	r26, r0
    6e70:	11 24       	eor	r1, r1
    6e72:	a7 5c       	subi	r26, 0xC7	; 199
    6e74:	b4 4f       	sbci	r27, 0xF4	; 244
    6e76:	ee 0f       	add	r30, r30
    6e78:	18 96       	adiw	r26, 0x08	; 8
    6e7a:	ec 93       	st	X, r30
    6e7c:	06 c0       	rjmp	.+12     	; 0x6e8a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6e7e:	18 9f       	mul	r17, r24
    6e80:	f0 01       	movw	r30, r0
    6e82:	11 24       	eor	r1, r1
    6e84:	e7 5c       	subi	r30, 0xC7	; 199
    6e86:	f4 4f       	sbci	r31, 0xF4	; 244
    6e88:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6e8a:	80 eb       	ldi	r24, 0xB0	; 176
    6e8c:	9b e0       	ldi	r25, 0x0B	; 11
    6e8e:	0e 94 14 35 	call	0x6a28	; 0x6a28 <ReadVarLen>
    6e92:	90 93 ae 0b 	sts	0x0BAE, r25
    6e96:	80 93 ad 0b 	sts	0x0BAD, r24
				currDeltaTime=0;
    6e9a:	10 92 a8 0b 	sts	0x0BA8, r1
    6e9e:	10 92 a7 0b 	sts	0x0BA7, r1
    6ea2:	3b cf       	rjmp	.-394    	; 0x6d1a <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    6ea4:	01 96       	adiw	r24, 0x01	; 1
    6ea6:	90 93 a8 0b 	sts	0x0BA8, r25
    6eaa:	80 93 a7 0b 	sts	0x0BA7, r24
    6eae:	9f e3       	ldi	r25, 0x3F	; 63
    6eb0:	a9 2e       	mov	r10, r25
    6eb2:	9b e0       	ldi	r25, 0x0B	; 11
    6eb4:	b9 2e       	mov	r11, r25
    6eb6:	0b e4       	ldi	r16, 0x4B	; 75
    6eb8:	1b e0       	ldi	r17, 0x0B	; 11
    6eba:	2a e4       	ldi	r18, 0x4A	; 74
    6ebc:	c2 2e       	mov	r12, r18
    6ebe:	2b e0       	ldi	r18, 0x0B	; 11
    6ec0:	d2 2e       	mov	r13, r18
    6ec2:	3c e4       	ldi	r19, 0x4C	; 76
    6ec4:	83 2e       	mov	r8, r19
    6ec6:	3b e0       	ldi	r19, 0x0B	; 11
    6ec8:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    6eca:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6ecc:	66 24       	eor	r6, r6
    6ece:	6a 94       	dec	r6
    6ed0:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    6ed2:	88 81       	ld	r24, Y
    6ed4:	86 fd       	sbrc	r24, 6
    6ed6:	43 c0       	rjmp	.+134    	; 0x6f5e <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    6ed8:	8c 89       	ldd	r24, Y+20	; 0x14
    6eda:	9d 89       	ldd	r25, Y+21	; 0x15
    6edc:	89 2b       	or	r24, r25
    6ede:	09 f4       	brne	.+2      	; 0x6ee2 <ProcessMusic+0x2a6>
    6ee0:	3a c0       	rjmp	.+116    	; 0x6f56 <ProcessMusic+0x31a>
    6ee2:	d8 01       	movw	r26, r16
    6ee4:	9c 91       	ld	r25, X
    6ee6:	f6 01       	movw	r30, r12
    6ee8:	80 81       	ld	r24, Z
    6eea:	98 17       	cp	r25, r24
    6eec:	08 f4       	brcc	.+2      	; 0x6ef0 <ProcessMusic+0x2b4>
    6eee:	33 c0       	rjmp	.+102    	; 0x6f56 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    6ef0:	d8 01       	movw	r26, r16
    6ef2:	9c 91       	ld	r25, X
    6ef4:	f6 01       	movw	r30, r12
    6ef6:	80 81       	ld	r24, Z
    6ef8:	98 13       	cpse	r25, r24
    6efa:	2d c0       	rjmp	.+90     	; 0x6f56 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    6efc:	ec 89       	ldd	r30, Y+20	; 0x14
    6efe:	fd 89       	ldd	r31, Y+21	; 0x15
    6f00:	af 01       	movw	r20, r30
    6f02:	4f 5f       	subi	r20, 0xFF	; 255
    6f04:	5f 4f       	sbci	r21, 0xFF	; 255
    6f06:	5d 8b       	std	Y+21, r21	; 0x15
    6f08:	4c 8b       	std	Y+20, r20	; 0x14
    6f0a:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    6f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f0e:	31 f4       	brne	.+12     	; 0x6f1c <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6f10:	88 81       	ld	r24, Y
    6f12:	8f 77       	andi	r24, 0x7F	; 127
    6f14:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    6f16:	1d 8a       	std	Y+21, r1	; 0x15
    6f18:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    6f1a:	1d c0       	rjmp	.+58     	; 0x6f56 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    6f1c:	32 96       	adiw	r30, 0x02	; 2
    6f1e:	fd 8b       	std	Y+21, r31	; 0x15
    6f20:	ec 8b       	std	Y+20, r30	; 0x14
    6f22:	fa 01       	movw	r30, r20
    6f24:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    6f26:	e8 2f       	mov	r30, r24
    6f28:	f0 e0       	ldi	r31, 0x00	; 0
    6f2a:	ee 0f       	add	r30, r30
    6f2c:	ff 1f       	adc	r31, r31
    6f2e:	e0 53       	subi	r30, 0x30	; 48
    6f30:	ff 4f       	sbci	r31, 0xFF	; 255
    6f32:	25 91       	lpm	r18, Z+
    6f34:	34 91       	lpm	r19, Z
    6f36:	65 2d       	mov	r22, r5
    6f38:	ce 01       	movw	r24, r28
    6f3a:	f9 01       	movw	r30, r18
    6f3c:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    6f3e:	ec 89       	ldd	r30, Y+20	; 0x14
    6f40:	fd 89       	ldd	r31, Y+21	; 0x15
    6f42:	cf 01       	movw	r24, r30
    6f44:	01 96       	adiw	r24, 0x01	; 1
    6f46:	9d 8b       	std	Y+21, r25	; 0x15
    6f48:	8c 8b       	std	Y+20, r24	; 0x14
    6f4a:	e4 91       	lpm	r30, Z
    6f4c:	d6 01       	movw	r26, r12
    6f4e:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    6f50:	f8 01       	movw	r30, r16
    6f52:	10 82       	st	Z, r1
    6f54:	cd cf       	rjmp	.-102    	; 0x6ef0 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    6f56:	d8 01       	movw	r26, r16
    6f58:	8c 91       	ld	r24, X
    6f5a:	8f 5f       	subi	r24, 0xFF	; 255
    6f5c:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    6f5e:	98 81       	ld	r25, Y
    6f60:	95 ff       	sbrs	r25, 5
    6f62:	6c c0       	rjmp	.+216    	; 0x703c <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    6f64:	f4 01       	movw	r30, r8
    6f66:	80 81       	ld	r24, Z
    6f68:	8f 3f       	cpi	r24, 0xFF	; 255
    6f6a:	11 f0       	breq	.+4      	; 0x6f70 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    6f6c:	8f 5f       	subi	r24, 0xFF	; 255
    6f6e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6f70:	97 fd       	sbrc	r25, 7
    6f72:	04 c0       	rjmp	.+8      	; 0x6f7c <ProcessMusic+0x340>
    6f74:	f8 01       	movw	r30, r16
    6f76:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    6f78:	90 81       	ld	r25, Z
    6f7a:	01 c0       	rjmp	.+2      	; 0x6f7e <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6f7c:	9f ef       	ldi	r25, 0xFF	; 255
    6f7e:	f8 01       	movw	r30, r16
    6f80:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6f82:	80 81       	ld	r24, Z
    6f84:	88 23       	and	r24, r24
    6f86:	09 f4       	brne	.+2      	; 0x6f8a <ProcessMusic+0x34e>
    6f88:	4e c0       	rjmp	.+156    	; 0x7026 <ProcessMusic+0x3ea>
    6f8a:	31 96       	adiw	r30, 0x01	; 1
    6f8c:	50 81       	ld	r21, Z
    6f8e:	55 23       	and	r21, r21
    6f90:	09 f4       	brne	.+2      	; 0x6f94 <ProcessMusic+0x358>
    6f92:	49 c0       	rjmp	.+146    	; 0x7026 <ProcessMusic+0x3ea>
    6f94:	99 23       	and	r25, r25
    6f96:	09 f4       	brne	.+2      	; 0x6f9a <ProcessMusic+0x35e>
    6f98:	46 c0       	rjmp	.+140    	; 0x7026 <ProcessMusic+0x3ea>
    6f9a:	40 91 ac 0b 	lds	r20, 0x0BAC
    6f9e:	44 23       	and	r20, r20
    6fa0:	09 f4       	brne	.+2      	; 0x6fa4 <ProcessMusic+0x368>
    6fa2:	41 c0       	rjmp	.+130    	; 0x7026 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    6fa4:	89 9f       	mul	r24, r25
    6fa6:	c0 01       	movw	r24, r0
    6fa8:	11 24       	eor	r1, r1
    6faa:	93 95       	inc	r25
				uVol>>=8;
    6fac:	89 2f       	mov	r24, r25
    6fae:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    6fb0:	58 9f       	mul	r21, r24
    6fb2:	90 01       	movw	r18, r0
    6fb4:	59 9f       	mul	r21, r25
    6fb6:	30 0d       	add	r19, r0
    6fb8:	11 24       	eor	r1, r1
    6fba:	c9 01       	movw	r24, r18
    6fbc:	93 95       	inc	r25
				uVol>>=8;
    6fbe:	89 2f       	mov	r24, r25
    6fc0:	99 27       	eor	r25, r25
    6fc2:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    6fc4:	50 81       	ld	r21, Z
    6fc6:	58 9f       	mul	r21, r24
    6fc8:	90 01       	movw	r18, r0
    6fca:	59 9f       	mul	r21, r25
    6fcc:	30 0d       	add	r19, r0
    6fce:	11 24       	eor	r1, r1
    6fd0:	33 95       	inc	r19
				uVol>>=8;
    6fd2:	23 2f       	mov	r18, r19
    6fd4:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    6fd6:	42 9f       	mul	r20, r18
    6fd8:	c0 01       	movw	r24, r0
    6fda:	43 9f       	mul	r20, r19
    6fdc:	90 0d       	add	r25, r0
    6fde:	11 24       	eor	r1, r1
    6fe0:	93 95       	inc	r25
				uVol>>=8;
    6fe2:	89 2f       	mov	r24, r25
    6fe4:	99 27       	eor	r25, r25
    6fe6:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    6fe8:	20 81       	ld	r18, Z
    6fea:	22 23       	and	r18, r18
    6fec:	f1 f0       	breq	.+60     	; 0x702a <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    6fee:	d5 01       	movw	r26, r10
    6ff0:	ec 91       	ld	r30, X
    6ff2:	f0 e0       	ldi	r31, 0x00	; 0
    6ff4:	e0 50       	subi	r30, 0x00	; 0
    6ff6:	fd 48       	sbci	r31, 0x8D	; 141
    6ff8:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6ffa:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    6ffc:	2e 9f       	mul	r18, r30
    6ffe:	f0 01       	movw	r30, r0
    7000:	11 24       	eor	r1, r1
    7002:	f3 95       	inc	r31
					tVol>>=8;
    7004:	ef 2f       	mov	r30, r31
    7006:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7008:	a3 01       	movw	r20, r6
    700a:	4e 1b       	sub	r20, r30
    700c:	5f 0b       	sbc	r21, r31
    700e:	48 9f       	mul	r20, r24
    7010:	90 01       	movw	r18, r0
    7012:	49 9f       	mul	r20, r25
    7014:	30 0d       	add	r19, r0
    7016:	58 9f       	mul	r21, r24
    7018:	30 0d       	add	r19, r0
    701a:	11 24       	eor	r1, r1
    701c:	c9 01       	movw	r24, r18
    701e:	93 95       	inc	r25
					uVol>>=8;
    7020:	89 2f       	mov	r24, r25
    7022:	99 27       	eor	r25, r25
    7024:	02 c0       	rjmp	.+4      	; 0x702a <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7026:	80 e0       	ldi	r24, 0x00	; 0
    7028:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    702a:	f5 01       	movw	r30, r10
    702c:	30 81       	ld	r19, Z
    702e:	f8 01       	movw	r30, r16
    7030:	3a 97       	sbiw	r30, 0x0a	; 10
    7032:	20 81       	ld	r18, Z
    7034:	23 0f       	add	r18, r19
    7036:	d5 01       	movw	r26, r10
    7038:	2c 93       	st	X, r18
    703a:	02 c0       	rjmp	.+4      	; 0x7040 <ProcessMusic+0x404>

		}else{
			uVol=0;
    703c:	80 e0       	ldi	r24, 0x00	; 0
    703e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7040:	f7 01       	movw	r30, r14
    7042:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7044:	53 94       	inc	r5
    7046:	66 96       	adiw	r28, 0x16	; 22
    7048:	f6 e0       	ldi	r31, 0x06	; 6
    704a:	ef 0e       	add	r14, r31
    704c:	f1 1c       	adc	r15, r1
    704e:	86 e1       	ldi	r24, 0x16	; 22
    7050:	a8 0e       	add	r10, r24
    7052:	b1 1c       	adc	r11, r1
    7054:	0a 5e       	subi	r16, 0xEA	; 234
    7056:	1f 4f       	sbci	r17, 0xFF	; 255
    7058:	96 e1       	ldi	r25, 0x16	; 22
    705a:	c9 0e       	add	r12, r25
    705c:	d1 1c       	adc	r13, r1
    705e:	a6 e1       	ldi	r26, 0x16	; 22
    7060:	8a 0e       	add	r8, r26
    7062:	91 1c       	adc	r9, r1
    7064:	b5 e0       	ldi	r27, 0x05	; 5
    7066:	5b 12       	cpse	r5, r27
    7068:	34 cf       	rjmp	.-408    	; 0x6ed2 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    706a:	df 91       	pop	r29
    706c:	cf 91       	pop	r28
    706e:	1f 91       	pop	r17
    7070:	0f 91       	pop	r16
    7072:	ff 90       	pop	r15
    7074:	ef 90       	pop	r14
    7076:	df 90       	pop	r13
    7078:	cf 90       	pop	r12
    707a:	bf 90       	pop	r11
    707c:	af 90       	pop	r10
    707e:	9f 90       	pop	r9
    7080:	8f 90       	pop	r8
    7082:	7f 90       	pop	r7
    7084:	6f 90       	pop	r6
    7086:	5f 90       	pop	r5
    7088:	08 95       	ret

0000708a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    708a:	99 27       	eor	r25, r25
	clr r23
    708c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    708e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7090:	09 f4       	brne	.+2      	; 0x7094 <set_note_waves>
		ret
    7092:	08 95       	ret

00007094 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7094:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7096:	f1 e7       	ldi	r31, 0x71	; 113
	lsl r22
    7098:	66 0f       	add	r22, r22
	rol r23
    709a:	77 1f       	adc	r23, r23
	add ZL,r22
    709c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    709e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    70a0:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    70a2:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    70a4:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    70a6:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    70a8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    70aa:	28 9f       	mul	r18, r24
	add ZL,r0
    70ac:	e0 0d       	add	r30, r0
	adc ZH,r1
    70ae:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    70b0:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    70b2:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    70b4:	11 24       	eor	r1, r1
	

	ret
    70b6:	08 95       	ret

000070b8 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    70b8:	99 27       	eor	r25, r25
	clr r23
    70ba:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    70bc:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    70be:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    70c0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    70c2:	28 9f       	mul	r18, r24
	add ZL,r0
    70c4:	e0 0d       	add	r30, r0
	adc ZH,r1
    70c6:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    70c8:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    70ca:	31 f4       	brne	.+12     	; 0x70d8 <smw1>
	lds r22,tr4_params
    70cc:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    70d0:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    70d2:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    70d6:	0b c0       	rjmp	.+22     	; 0x70ee <esmw>

000070d8 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    70d8:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    70da:	31 f4       	brne	.+12     	; 0x70e8 <smw2>
	lds r22,tr4_params
    70dc:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    70e0:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    70e2:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    70e6:	03 c0       	rjmp	.+6      	; 0x70ee <esmw>

000070e8 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    70e8:	73 e7       	ldi	r23, 0x73	; 115
	add r23,r22
    70ea:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    70ec:	75 83       	std	Z+5, r23	; 0x05

000070ee <esmw>:

esmw:
	clr r1	
    70ee:	11 24       	eor	r1, r1
	ret
    70f0:	08 95       	ret
	...

00007100 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7100:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7102:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7106:	08 95       	ret

00007108 <steptable>:
    7108:	22 00       	.word	0x0022	; ????
    710a:	24 00       	.word	0x0024	; ????
    710c:	26 00       	.word	0x0026	; ????
    710e:	28 00       	.word	0x0028	; ????
    7110:	2b 00       	.word	0x002b	; ????
    7112:	2d 00       	.word	0x002d	; ????
    7114:	30 00       	.word	0x0030	; ????
    7116:	33 00       	.word	0x0033	; ????
    7118:	36 00       	.word	0x0036	; ????
    711a:	39 00       	.word	0x0039	; ????
    711c:	3d 00       	.word	0x003d	; ????
    711e:	40 00       	.word	0x0040	; ????
    7120:	44 00       	.word	0x0044	; ????
    7122:	48 00       	.word	0x0048	; ????
    7124:	4c 00       	.word	0x004c	; ????
    7126:	51 00       	.word	0x0051	; ????
    7128:	56 00       	.word	0x0056	; ????
    712a:	5b 00       	.word	0x005b	; ????
    712c:	60 00       	.word	0x0060	; ????
    712e:	66 00       	.word	0x0066	; ????
    7130:	6c 00       	.word	0x006c	; ????
    7132:	73 00       	.word	0x0073	; ????
    7134:	79 00       	.word	0x0079	; ????
    7136:	81 00       	.word	0x0081	; ????
    7138:	88 00       	.word	0x0088	; ????
    713a:	90 00       	.word	0x0090	; ????
    713c:	99 00       	.word	0x0099	; ????
    713e:	a2 00       	.word	0x00a2	; ????
    7140:	ac 00       	.word	0x00ac	; ????
    7142:	b6 00       	.word	0x00b6	; ????
    7144:	c1 00       	.word	0x00c1	; ????
    7146:	cc 00       	.word	0x00cc	; ????
    7148:	d8 00       	.word	0x00d8	; ????
    714a:	e5 00       	.word	0x00e5	; ????
    714c:	f3 00       	.word	0x00f3	; ????
    714e:	01 01       	movw	r0, r2
    7150:	10 01       	movw	r2, r0
    7152:	21 01       	movw	r4, r2
    7154:	32 01       	movw	r6, r4
    7156:	44 01       	movw	r8, r8
    7158:	57 01       	movw	r10, r14
    715a:	6c 01       	movw	r12, r24
    715c:	81 01       	movw	r16, r2
    715e:	98 01       	movw	r18, r16
    7160:	b0 01       	movw	r22, r0
    7162:	ca 01       	movw	r24, r20
    7164:	e5 01       	movw	r28, r10
    7166:	02 02       	muls	r16, r18
    7168:	21 02       	muls	r18, r17
    716a:	41 02       	muls	r20, r17
    716c:	64 02       	muls	r22, r20
    716e:	88 02       	muls	r24, r24
    7170:	ae 02       	muls	r26, r30
    7172:	d7 02       	muls	r29, r23
    7174:	03 03       	mulsu	r16, r19
    7176:	30 03       	mulsu	r19, r16
    7178:	61 03       	mulsu	r22, r17
    717a:	94 03       	fmuls	r17, r20
    717c:	cb 03       	fmulsu	r20, r19
    717e:	05 04       	cpc	r0, r5
    7180:	42 04       	cpc	r4, r2
    7182:	83 04       	cpc	r8, r3
    7184:	c7 04       	cpc	r12, r7
    7186:	10 05       	cpc	r17, r0
    7188:	5d 05       	cpc	r21, r13
    718a:	af 05       	cpc	r26, r15
    718c:	05 06       	cpc	r0, r21
    718e:	61 06       	cpc	r6, r17
    7190:	c2 06       	cpc	r12, r18
    7192:	29 07       	cpc	r18, r25
    7194:	96 07       	cpc	r25, r22
    7196:	09 08       	sbc	r0, r9
    7198:	83 08       	sbc	r8, r3
    719a:	05 09       	sbc	r16, r5
    719c:	8e 09       	sbc	r24, r14
    719e:	20 0a       	sbc	r2, r16
    71a0:	ba 0a       	sbc	r11, r26
    71a2:	5d 0b       	sbc	r21, r29
    71a4:	0a 0c       	add	r0, r10
    71a6:	c1 0c       	add	r12, r1
    71a8:	84 0d       	add	r24, r4
    71aa:	51 0e       	add	r5, r17
    71ac:	2b 0f       	add	r18, r27
    71ae:	12 10       	cpse	r1, r2
    71b0:	07 11       	cpse	r16, r7
    71b2:	0a 12       	cpse	r0, r26
    71b4:	1d 13       	cpse	r17, r29
    71b6:	40 14       	cp	r4, r0
    71b8:	74 15       	cp	r23, r4
    71ba:	ba 16       	cp	r11, r26
    71bc:	14 18       	sub	r1, r4
    71be:	83 19       	sub	r24, r3
    71c0:	07 1b       	sub	r16, r23
    71c2:	a3 1c       	adc	r10, r3
    71c4:	57 1e       	adc	r5, r23
    71c6:	24 20       	and	r2, r4
    71c8:	0e 22       	and	r0, r30
    71ca:	14 24       	eor	r1, r4
    71cc:	39 26       	eor	r3, r25
    71ce:	7f 28       	or	r7, r15
    71d0:	e8 2a       	or	r14, r24
    71d2:	75 2d       	mov	r23, r5
    71d4:	29 30       	cpi	r18, 0x09	; 9
    71d6:	06 33       	cpi	r16, 0x36	; 54
    71d8:	0f 36       	cpi	r16, 0x6F	; 111
    71da:	45 39       	cpi	r20, 0x95	; 149
    71dc:	ad 3c       	cpi	r26, 0xCD	; 205
    71de:	49 40       	sbci	r20, 0x09	; 9
    71e0:	1b 44       	sbci	r17, 0x4B	; 75
    71e2:	28 48       	sbci	r18, 0x88	; 136
    71e4:	73 4c       	sbci	r23, 0xC3	; 195
    71e6:	fe 50       	subi	r31, 0x0E	; 14
    71e8:	cf 55       	subi	r28, 0x5F	; 95
    71ea:	ea 5a       	subi	r30, 0xAA	; 170
    71ec:	51 60       	ori	r21, 0x01	; 1
    71ee:	0c 66       	ori	r16, 0x6C	; 108
    71f0:	1d 6c       	ori	r17, 0xCD	; 205
    71f2:	8b 72       	andi	r24, 0x2B	; 43
    71f4:	5a 79       	andi	r21, 0x9A	; 154
    71f6:	92 80       	ldd	r9, Z+2	; 0x02
    71f8:	37 88       	ldd	r3, Z+23	; 0x17
    71fa:	50 90 e5 98 	lds	r5, 0x98E5
    71fe:	fd a1       	ldd	r31, Y+37	; 0x25
    7200:	9f ab       	std	Y+55, r25	; 0x37
    7202:	d3 b5       	in	r29, 0x23	; 35
    7204:	a3 c0       	rjmp	.+326    	; 0x734c <waves+0x4c>
	...

00007300 <waves>:
    7300:	00 03       	mulsu	r16, r16
    7302:	06 09       	sbc	r16, r6
    7304:	0c 10       	cpse	r0, r12
    7306:	13 16       	cp	r1, r19
    7308:	19 1c       	adc	r1, r9
    730a:	1f 22       	and	r1, r31
    730c:	25 28       	or	r2, r5
    730e:	2b 2e       	mov	r2, r27
    7310:	31 33       	cpi	r19, 0x31	; 49
    7312:	36 39       	cpi	r19, 0x96	; 150
    7314:	3c 3f       	cpi	r19, 0xFC	; 252
    7316:	41 44       	sbci	r20, 0x41	; 65
    7318:	47 49       	sbci	r20, 0x97	; 151
    731a:	4c 4e       	sbci	r20, 0xEC	; 236
    731c:	51 53       	subi	r21, 0x31	; 49
    731e:	55 58       	subi	r21, 0x85	; 133
    7320:	5a 5c       	subi	r21, 0xCA	; 202
    7322:	5e 60       	ori	r21, 0x0E	; 14
    7324:	62 64       	ori	r22, 0x42	; 66
    7326:	66 68       	ori	r22, 0x86	; 134
    7328:	6a 6b       	ori	r22, 0xBA	; 186
    732a:	6d 6f       	ori	r22, 0xFD	; 253
    732c:	70 71       	andi	r23, 0x10	; 16
    732e:	73 74       	andi	r23, 0x43	; 67
    7330:	75 76       	andi	r23, 0x65	; 101
    7332:	78 79       	andi	r23, 0x98	; 152
    7334:	7a 7a       	andi	r23, 0xAA	; 170
    7336:	7b 7c       	andi	r23, 0xCB	; 203
    7338:	7d 7d       	andi	r23, 0xDD	; 221
    733a:	7e 7e       	andi	r23, 0xEE	; 238
    733c:	7e 7f       	andi	r23, 0xFE	; 254
    733e:	7f 7f       	andi	r23, 0xFF	; 255
    7340:	7f 7f       	andi	r23, 0xFF	; 255
    7342:	7f 7f       	andi	r23, 0xFF	; 255
    7344:	7e 7e       	andi	r23, 0xEE	; 238
    7346:	7e 7d       	andi	r23, 0xDE	; 222
    7348:	7d 7c       	andi	r23, 0xCD	; 205
    734a:	7b 7a       	andi	r23, 0xAB	; 171
    734c:	7a 79       	andi	r23, 0x9A	; 154
    734e:	78 76       	andi	r23, 0x68	; 104
    7350:	75 74       	andi	r23, 0x45	; 69
    7352:	73 71       	andi	r23, 0x13	; 19
    7354:	70 6f       	ori	r23, 0xF0	; 240
    7356:	6d 6b       	ori	r22, 0xBD	; 189
    7358:	6a 68       	ori	r22, 0x8A	; 138
    735a:	66 64       	ori	r22, 0x46	; 70
    735c:	62 60       	ori	r22, 0x02	; 2
    735e:	5e 5c       	subi	r21, 0xCE	; 206
    7360:	5a 58       	subi	r21, 0x8A	; 138
    7362:	55 53       	subi	r21, 0x35	; 53
    7364:	51 4e       	sbci	r21, 0xE1	; 225
    7366:	4c 49       	sbci	r20, 0x9C	; 156
    7368:	47 44       	sbci	r20, 0x47	; 71
    736a:	41 3f       	cpi	r20, 0xF1	; 241
    736c:	3c 39       	cpi	r19, 0x9C	; 156
    736e:	36 33       	cpi	r19, 0x36	; 54
    7370:	31 2e       	mov	r3, r17
    7372:	2b 28       	or	r2, r11
    7374:	25 22       	and	r2, r21
    7376:	1f 1c       	adc	r1, r15
    7378:	19 16       	cp	r1, r25
    737a:	13 10       	cpse	r1, r3
    737c:	0c 09       	sbc	r16, r12
    737e:	06 03       	mulsu	r16, r22
    7380:	00 fd       	sbrc	r16, 0
    7382:	fa f7       	brpl	.-2      	; 0x7382 <waves+0x82>
    7384:	f4 f0       	brlt	.+60     	; 0x73c2 <waves+0xc2>
    7386:	ed ea       	ldi	r30, 0xAD	; 173
    7388:	e7 e4       	ldi	r30, 0x47	; 71
    738a:	e1 de       	rcall	.-574    	; 0x714e <steptable+0x46>
    738c:	db d8       	rcall	.-3658   	; 0x6544 <ch4_end+0x40>
    738e:	d5 d2       	rcall	.+1450   	; 0x793a <waves+0x63a>
    7390:	cf cd       	rjmp	.-1122   	; 0x6f30 <ProcessMusic+0x2f4>
    7392:	ca c7       	rjmp	.+3988   	; 0x8328 <LBCollides+0x8>
    7394:	c4 c1       	rjmp	.+904    	; 0x771e <waves+0x41e>
    7396:	bf bc       	out	0x2f, r11	; 47
    7398:	b9 b7       	in	r27, 0x39	; 57
    739a:	b4 b2       	in	r11, 0x14	; 20
    739c:	af ad       	ldd	r26, Y+63	; 0x3f
    739e:	ab a8       	ldd	r10, Y+51	; 0x33
    73a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    73a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    73a4:	9e 9c       	mul	r9, r14
    73a6:	9a 98       	cbi	0x13, 2	; 19
    73a8:	96 95       	lsr	r25
    73aa:	93 91       	.word	0x9193	; ????
    73ac:	90 8f       	std	Z+24, r25	; 0x18
    73ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    73b0:	8b 8a       	std	Y+19, r8	; 0x13
    73b2:	88 87       	std	Y+8, r24	; 0x08
    73b4:	86 86       	std	Z+14, r8	; 0x0e
    73b6:	85 84       	ldd	r8, Z+13	; 0x0d
    73b8:	83 83       	std	Z+3, r24	; 0x03
    73ba:	82 82       	std	Z+2, r8	; 0x02
    73bc:	82 81       	ldd	r24, Z+2	; 0x02
    73be:	81 81       	ldd	r24, Z+1	; 0x01
    73c0:	81 81       	ldd	r24, Z+1	; 0x01
    73c2:	81 81       	ldd	r24, Z+1	; 0x01
    73c4:	82 82       	std	Z+2, r8	; 0x02
    73c6:	82 83       	std	Z+2, r24	; 0x02
    73c8:	83 84       	ldd	r8, Z+11	; 0x0b
    73ca:	85 86       	std	Z+13, r8	; 0x0d
    73cc:	86 87       	std	Z+14, r24	; 0x0e
    73ce:	88 8a       	std	Y+16, r8	; 0x10
    73d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    73d2:	8d 8f       	std	Y+29, r24	; 0x1d
    73d4:	90 91 93 95 	lds	r25, 0x9593
    73d8:	96 98       	cbi	0x12, 6	; 18
    73da:	9a 9c       	mul	r9, r10
    73dc:	9e a0       	ldd	r9, Y+38	; 0x26
    73de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    73e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    73e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    73e4:	af b2       	in	r10, 0x1f	; 31
    73e6:	b4 b7       	in	r27, 0x34	; 52
    73e8:	b9 bc       	out	0x29, r11	; 41
    73ea:	bf c1       	rjmp	.+894    	; 0x776a <waves+0x46a>
    73ec:	c4 c7       	rjmp	.+3976   	; 0x8376 <LBLineIntersect+0x2>
    73ee:	ca cd       	rjmp	.-1132   	; 0x6f84 <ProcessMusic+0x348>
    73f0:	cf d2       	rcall	.+1438   	; 0x7990 <waves+0x690>
    73f2:	d5 d8       	rcall	.-3670   	; 0x659e <SetSpritesTileTable+0x2>
    73f4:	db de       	rcall	.-586    	; 0x71ac <steptable+0xa4>
    73f6:	e1 e4       	ldi	r30, 0x41	; 65
    73f8:	e7 ea       	ldi	r30, 0xA7	; 167
    73fa:	ed f0       	brhs	.+58     	; 0x7436 <waves+0x136>
    73fc:	f4 f7       	brge	.-4      	; 0x73fa <waves+0xfa>
    73fe:	fa fd       	.word	0xfdfa	; ????
    7400:	80 81       	ld	r24, Z
    7402:	82 83       	std	Z+2, r24	; 0x02
    7404:	84 85       	ldd	r24, Z+12	; 0x0c
    7406:	86 87       	std	Z+14, r24	; 0x0e
    7408:	88 89       	ldd	r24, Y+16	; 0x10
    740a:	8a 8b       	std	Y+18, r24	; 0x12
    740c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    740e:	8e 8f       	std	Y+30, r24	; 0x1e
    7410:	90 91 92 93 	lds	r25, 0x9392
    7414:	94 95       	.word	0x9594	; ????
    7416:	96 97       	sbiw	r26, 0x26	; 38
    7418:	98 99       	sbic	0x13, 0	; 19
    741a:	9a 9b       	sbis	0x13, 2	; 19
    741c:	9c 9d       	mul	r25, r12
    741e:	9e 9f       	mul	r25, r30
    7420:	a0 a1       	ldd	r26, Z+32	; 0x20
    7422:	a2 a3       	std	Z+34, r26	; 0x22
    7424:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7426:	a6 a7       	std	Z+46, r26	; 0x2e
    7428:	a8 a9       	ldd	r26, Y+48	; 0x30
    742a:	aa ab       	std	Y+50, r26	; 0x32
    742c:	ac ad       	ldd	r26, Y+60	; 0x3c
    742e:	ae af       	std	Y+62, r26	; 0x3e
    7430:	b0 b1       	in	r27, 0x00	; 0
    7432:	b2 b3       	in	r27, 0x12	; 18
    7434:	b4 b5       	in	r27, 0x24	; 36
    7436:	b6 b7       	in	r27, 0x36	; 54
    7438:	b8 b9       	out	0x08, r27	; 8
    743a:	ba bb       	out	0x1a, r27	; 26
    743c:	bc bd       	out	0x2c, r27	; 44
    743e:	be bf       	out	0x3e, r27	; 62
    7440:	c0 c1       	rjmp	.+896    	; 0x77c2 <waves+0x4c2>
    7442:	c2 c3       	rjmp	.+1924   	; 0x7bc8 <waves+0x8c8>
    7444:	c4 c5       	rjmp	.+2952   	; 0x7fce <InitializeVideoMode+0xe>
    7446:	c6 c7       	rjmp	.+3980   	; 0x83d4 <LBLineIntersect+0x60>
    7448:	c8 c9       	rjmp	.-3184   	; 0x67da <EepromWriteBlock+0x78>
    744a:	ca cb       	rjmp	.-2156   	; 0x6be0 <TriggerNote+0x12>
    744c:	cc cd       	rjmp	.-1128   	; 0x6fe6 <ProcessMusic+0x3aa>
    744e:	ce cf       	rjmp	.-100    	; 0x73ec <waves+0xec>
    7450:	d0 d1       	rcall	.+928    	; 0x77f2 <waves+0x4f2>
    7452:	d2 d3       	rcall	.+1956   	; 0x7bf8 <waves+0x8f8>
    7454:	d4 d5       	rcall	.+2984   	; 0x7ffe <DrawMap2+0x2a>
    7456:	d6 d7       	rcall	.+4012   	; 0x8404 <LBLineIntersect+0x90>
    7458:	d8 d9       	rcall	.-3152   	; 0x680a <EepromWriteBlock+0xa8>
    745a:	da db       	rcall	.-2124   	; 0x6c10 <TriggerNote+0x42>
    745c:	dc dd       	rcall	.-1096   	; 0x7016 <ProcessMusic+0x3da>
    745e:	de df       	rcall	.-68     	; 0x741c <waves+0x11c>
    7460:	e0 e1       	ldi	r30, 0x10	; 16
    7462:	e2 e3       	ldi	r30, 0x32	; 50
    7464:	e4 e5       	ldi	r30, 0x54	; 84
    7466:	e6 e7       	ldi	r30, 0x76	; 118
    7468:	e8 e9       	ldi	r30, 0x98	; 152
    746a:	ea eb       	ldi	r30, 0xBA	; 186
    746c:	ec ed       	ldi	r30, 0xDC	; 220
    746e:	ee ef       	ldi	r30, 0xFE	; 254
    7470:	f0 f1       	brcs	.+124    	; 0x74ee <waves+0x1ee>
    7472:	f2 f3       	brmi	.-4      	; 0x7470 <waves+0x170>
    7474:	f4 f5       	brge	.+124    	; 0x74f2 <waves+0x1f2>
    7476:	f6 f7       	brtc	.-4      	; 0x7474 <waves+0x174>
    7478:	f8 f9       	.word	0xf9f8	; ????
    747a:	fa fb       	.word	0xfbfa	; ????
    747c:	fc fd       	.word	0xfdfc	; ????
    747e:	fe ff       	.word	0xfffe	; ????
    7480:	00 01       	movw	r0, r0
    7482:	02 03       	mulsu	r16, r18
    7484:	04 05       	cpc	r16, r4
    7486:	06 07       	cpc	r16, r22
    7488:	08 09       	sbc	r16, r8
    748a:	0a 0b       	sbc	r16, r26
    748c:	0c 0d       	add	r16, r12
    748e:	0e 0f       	add	r16, r30
    7490:	10 11       	cpse	r17, r0
    7492:	12 13       	cpse	r17, r18
    7494:	14 15       	cp	r17, r4
    7496:	16 17       	cp	r17, r22
    7498:	18 19       	sub	r17, r8
    749a:	1a 1b       	sub	r17, r26
    749c:	1c 1d       	adc	r17, r12
    749e:	1e 1f       	adc	r17, r30
    74a0:	20 21       	and	r18, r0
    74a2:	22 23       	and	r18, r18
    74a4:	24 25       	eor	r18, r4
    74a6:	26 27       	eor	r18, r22
    74a8:	28 29       	or	r18, r8
    74aa:	2a 2b       	or	r18, r26
    74ac:	2c 2d       	mov	r18, r12
    74ae:	2e 2f       	mov	r18, r30
    74b0:	30 31       	cpi	r19, 0x10	; 16
    74b2:	32 33       	cpi	r19, 0x32	; 50
    74b4:	34 35       	cpi	r19, 0x54	; 84
    74b6:	36 37       	cpi	r19, 0x76	; 118
    74b8:	38 39       	cpi	r19, 0x98	; 152
    74ba:	3a 3b       	cpi	r19, 0xBA	; 186
    74bc:	3c 3d       	cpi	r19, 0xDC	; 220
    74be:	3e 3f       	cpi	r19, 0xFE	; 254
    74c0:	40 41       	sbci	r20, 0x10	; 16
    74c2:	42 43       	sbci	r20, 0x32	; 50
    74c4:	44 45       	sbci	r20, 0x54	; 84
    74c6:	46 47       	sbci	r20, 0x76	; 118
    74c8:	48 49       	sbci	r20, 0x98	; 152
    74ca:	4a 4b       	sbci	r20, 0xBA	; 186
    74cc:	4c 4d       	sbci	r20, 0xDC	; 220
    74ce:	4e 4f       	sbci	r20, 0xFE	; 254
    74d0:	50 51       	subi	r21, 0x10	; 16
    74d2:	52 53       	subi	r21, 0x32	; 50
    74d4:	54 55       	subi	r21, 0x54	; 84
    74d6:	56 57       	subi	r21, 0x76	; 118
    74d8:	58 59       	subi	r21, 0x98	; 152
    74da:	5a 5b       	subi	r21, 0xBA	; 186
    74dc:	5c 5d       	subi	r21, 0xDC	; 220
    74de:	5e 5f       	subi	r21, 0xFE	; 254
    74e0:	60 61       	ori	r22, 0x10	; 16
    74e2:	62 63       	ori	r22, 0x32	; 50
    74e4:	64 65       	ori	r22, 0x54	; 84
    74e6:	66 67       	ori	r22, 0x76	; 118
    74e8:	68 69       	ori	r22, 0x98	; 152
    74ea:	6a 6b       	ori	r22, 0xBA	; 186
    74ec:	6c 6d       	ori	r22, 0xDC	; 220
    74ee:	6e 6f       	ori	r22, 0xFE	; 254
    74f0:	70 71       	andi	r23, 0x10	; 16
    74f2:	72 73       	andi	r23, 0x32	; 50
    74f4:	74 75       	andi	r23, 0x54	; 84
    74f6:	76 77       	andi	r23, 0x76	; 118
    74f8:	78 79       	andi	r23, 0x98	; 152
    74fa:	7a 7b       	andi	r23, 0xBA	; 186
    74fc:	7c 7d       	andi	r23, 0xDC	; 220
    74fe:	7e 7f       	andi	r23, 0xFE	; 254
    7500:	00 02       	muls	r16, r16
    7502:	04 06       	cpc	r0, r20
    7504:	08 0a       	sbc	r0, r24
    7506:	0c 0e       	add	r0, r28
    7508:	10 12       	cpse	r1, r16
    750a:	14 16       	cp	r1, r20
    750c:	18 1a       	sub	r1, r24
    750e:	1c 1e       	adc	r1, r28
    7510:	20 22       	and	r2, r16
    7512:	24 26       	eor	r2, r20
    7514:	28 2a       	or	r2, r24
    7516:	2c 2e       	mov	r2, r28
    7518:	30 32       	cpi	r19, 0x20	; 32
    751a:	34 36       	cpi	r19, 0x64	; 100
    751c:	38 3a       	cpi	r19, 0xA8	; 168
    751e:	3c 3e       	cpi	r19, 0xEC	; 236
    7520:	40 42       	sbci	r20, 0x20	; 32
    7522:	44 46       	sbci	r20, 0x64	; 100
    7524:	48 4a       	sbci	r20, 0xA8	; 168
    7526:	4c 4e       	sbci	r20, 0xEC	; 236
    7528:	50 52       	subi	r21, 0x20	; 32
    752a:	54 56       	subi	r21, 0x64	; 100
    752c:	58 5a       	subi	r21, 0xA8	; 168
    752e:	5c 5e       	subi	r21, 0xEC	; 236
    7530:	60 62       	ori	r22, 0x20	; 32
    7532:	64 66       	ori	r22, 0x64	; 100
    7534:	68 6a       	ori	r22, 0xA8	; 168
    7536:	6c 6e       	ori	r22, 0xEC	; 236
    7538:	70 72       	andi	r23, 0x20	; 32
    753a:	74 76       	andi	r23, 0x64	; 100
    753c:	78 7a       	andi	r23, 0xA8	; 168
    753e:	7c 7e       	andi	r23, 0xEC	; 236
    7540:	7f 7d       	andi	r23, 0xDF	; 223
    7542:	7b 79       	andi	r23, 0x9B	; 155
    7544:	77 75       	andi	r23, 0x57	; 87
    7546:	73 71       	andi	r23, 0x13	; 19
    7548:	6f 6d       	ori	r22, 0xDF	; 223
    754a:	6b 69       	ori	r22, 0x9B	; 155
    754c:	67 65       	ori	r22, 0x57	; 87
    754e:	63 61       	ori	r22, 0x13	; 19
    7550:	5f 5d       	subi	r21, 0xDF	; 223
    7552:	5b 59       	subi	r21, 0x9B	; 155
    7554:	57 55       	subi	r21, 0x57	; 87
    7556:	53 51       	subi	r21, 0x13	; 19
    7558:	4f 4d       	sbci	r20, 0xDF	; 223
    755a:	4b 49       	sbci	r20, 0x9B	; 155
    755c:	47 45       	sbci	r20, 0x57	; 87
    755e:	43 41       	sbci	r20, 0x13	; 19
    7560:	3f 3d       	cpi	r19, 0xDF	; 223
    7562:	3b 39       	cpi	r19, 0x9B	; 155
    7564:	37 35       	cpi	r19, 0x57	; 87
    7566:	33 31       	cpi	r19, 0x13	; 19
    7568:	2f 2d       	mov	r18, r15
    756a:	2b 29       	or	r18, r11
    756c:	27 25       	eor	r18, r7
    756e:	23 21       	and	r18, r3
    7570:	1f 1d       	adc	r17, r15
    7572:	1b 19       	sub	r17, r11
    7574:	17 15       	cp	r17, r7
    7576:	13 11       	cpse	r17, r3
    7578:	0f 0d       	add	r16, r15
    757a:	0b 09       	sbc	r16, r11
    757c:	07 05       	cpc	r16, r7
    757e:	03 01       	movw	r0, r6
    7580:	ff fd       	.word	0xfdff	; ????
    7582:	fb f9       	.word	0xf9fb	; ????
    7584:	f7 f5       	brid	.+124    	; 0x7602 <waves+0x302>
    7586:	f3 f1       	brvs	.+124    	; 0x7604 <waves+0x304>
    7588:	ef ed       	ldi	r30, 0xDF	; 223
    758a:	eb e9       	ldi	r30, 0x9B	; 155
    758c:	e7 e5       	ldi	r30, 0x57	; 87
    758e:	e3 e1       	ldi	r30, 0x13	; 19
    7590:	df dd       	rcall	.-1090   	; 0x7150 <steptable+0x48>
    7592:	db d9       	rcall	.-3146   	; 0x694a <PatchCommand11+0x40>
    7594:	d7 d5       	rcall	.+2990   	; 0x8144 <doFade+0x6>
    7596:	d3 d1       	rcall	.+934    	; 0x793e <waves+0x63e>
    7598:	cf cd       	rjmp	.-1122   	; 0x7138 <steptable+0x30>
    759a:	cb c9       	rjmp	.-3178   	; 0x6932 <PatchCommand11+0x28>
    759c:	c7 c5       	rjmp	.+2958   	; 0x812c <WaitVsync+0x1c>
    759e:	c3 c1       	rjmp	.+902    	; 0x7926 <waves+0x626>
    75a0:	bf bd       	out	0x2f, r27	; 47
    75a2:	bb b9       	out	0x0b, r27	; 11
    75a4:	b7 b5       	in	r27, 0x27	; 39
    75a6:	b3 b1       	in	r27, 0x03	; 3
    75a8:	af ad       	ldd	r26, Y+63	; 0x3f
    75aa:	ab a9       	ldd	r26, Y+51	; 0x33
    75ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    75ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    75b0:	9f 9d       	mul	r25, r15
    75b2:	9b 99       	sbic	0x13, 3	; 19
    75b4:	97 95       	ror	r25
    75b6:	93 91       	.word	0x9193	; ????
    75b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75ba:	8b 89       	ldd	r24, Y+19	; 0x13
    75bc:	87 85       	ldd	r24, Z+15	; 0x0f
    75be:	83 81       	ldd	r24, Z+3	; 0x03
    75c0:	80 82       	st	Z, r8
    75c2:	84 86       	std	Z+12, r8	; 0x0c
    75c4:	88 8a       	std	Y+16, r8	; 0x10
    75c6:	8c 8e       	std	Y+28, r8	; 0x1c
    75c8:	90 92 94 96 	sts	0x9694, r9
    75cc:	98 9a       	sbi	0x13, 0	; 19
    75ce:	9c 9e       	mul	r9, r28
    75d0:	a0 a2       	std	Z+32, r10	; 0x20
    75d2:	a4 a6       	std	Z+44, r10	; 0x2c
    75d4:	a8 aa       	std	Y+48, r10	; 0x30
    75d6:	ac ae       	std	Y+60, r10	; 0x3c
    75d8:	b0 b2       	in	r11, 0x10	; 16
    75da:	b4 b6       	in	r11, 0x34	; 52
    75dc:	b8 ba       	out	0x18, r11	; 24
    75de:	bc be       	out	0x3c, r11	; 60
    75e0:	c0 c2       	rjmp	.+1408   	; 0x7b62 <waves+0x862>
    75e2:	c4 c6       	rjmp	.+3464   	; 0x836c <LBCollides+0x4c>
    75e4:	c8 ca       	rjmp	.-2672   	; 0x6b76 <TriggerCommon+0x102>
    75e6:	cc ce       	rjmp	.-616    	; 0x7380 <waves+0x80>
    75e8:	d0 d2       	rcall	.+1440   	; 0x7b8a <waves+0x88a>
    75ea:	d4 d6       	rcall	.+3496   	; 0x8394 <LBLineIntersect+0x20>
    75ec:	d8 da       	rcall	.-2640   	; 0x6b9e <TriggerCommon+0x12a>
    75ee:	dc de       	rcall	.-584    	; 0x73a8 <waves+0xa8>
    75f0:	e0 e2       	ldi	r30, 0x20	; 32
    75f2:	e4 e6       	ldi	r30, 0x64	; 100
    75f4:	e8 ea       	ldi	r30, 0xA8	; 168
    75f6:	ec ee       	ldi	r30, 0xEC	; 236
    75f8:	f0 f2       	brcs	.-68     	; 0x75b6 <waves+0x2b6>
    75fa:	f4 f6       	brge	.-68     	; 0x75b8 <waves+0x2b8>
    75fc:	f8 fa       	.word	0xfaf8	; ????
    75fe:	fc fe       	.word	0xfefc	; ????
    7600:	7f 7f       	andi	r23, 0xFF	; 255
    7602:	7f 7f       	andi	r23, 0xFF	; 255
    7604:	7f 7f       	andi	r23, 0xFF	; 255
    7606:	7f 7f       	andi	r23, 0xFF	; 255
    7608:	7f 7f       	andi	r23, 0xFF	; 255
    760a:	7f 7f       	andi	r23, 0xFF	; 255
    760c:	7f 7f       	andi	r23, 0xFF	; 255
    760e:	7f 7f       	andi	r23, 0xFF	; 255
    7610:	7f 7f       	andi	r23, 0xFF	; 255
    7612:	7f 7f       	andi	r23, 0xFF	; 255
    7614:	7f 7f       	andi	r23, 0xFF	; 255
    7616:	7f 7f       	andi	r23, 0xFF	; 255
    7618:	7f 7f       	andi	r23, 0xFF	; 255
    761a:	7f 7f       	andi	r23, 0xFF	; 255
    761c:	7f 7f       	andi	r23, 0xFF	; 255
    761e:	7f 7f       	andi	r23, 0xFF	; 255
    7620:	7f 7f       	andi	r23, 0xFF	; 255
    7622:	7f 7f       	andi	r23, 0xFF	; 255
    7624:	7f 7f       	andi	r23, 0xFF	; 255
    7626:	7f 7f       	andi	r23, 0xFF	; 255
    7628:	7f 7f       	andi	r23, 0xFF	; 255
    762a:	7f 7f       	andi	r23, 0xFF	; 255
    762c:	7f 7f       	andi	r23, 0xFF	; 255
    762e:	7f 7f       	andi	r23, 0xFF	; 255
    7630:	7f 7f       	andi	r23, 0xFF	; 255
    7632:	7f 7f       	andi	r23, 0xFF	; 255
    7634:	7f 7f       	andi	r23, 0xFF	; 255
    7636:	7f 7f       	andi	r23, 0xFF	; 255
    7638:	7f 7f       	andi	r23, 0xFF	; 255
    763a:	7f 7f       	andi	r23, 0xFF	; 255
    763c:	7f 7f       	andi	r23, 0xFF	; 255
    763e:	7f 7f       	andi	r23, 0xFF	; 255
    7640:	80 80       	ld	r8, Z
    7642:	80 80       	ld	r8, Z
    7644:	80 80       	ld	r8, Z
    7646:	80 80       	ld	r8, Z
    7648:	80 80       	ld	r8, Z
    764a:	80 80       	ld	r8, Z
    764c:	80 80       	ld	r8, Z
    764e:	80 80       	ld	r8, Z
    7650:	80 80       	ld	r8, Z
    7652:	80 80       	ld	r8, Z
    7654:	80 80       	ld	r8, Z
    7656:	80 80       	ld	r8, Z
    7658:	80 80       	ld	r8, Z
    765a:	80 80       	ld	r8, Z
    765c:	80 80       	ld	r8, Z
    765e:	80 80       	ld	r8, Z
    7660:	80 80       	ld	r8, Z
    7662:	80 80       	ld	r8, Z
    7664:	80 80       	ld	r8, Z
    7666:	80 80       	ld	r8, Z
    7668:	80 80       	ld	r8, Z
    766a:	80 80       	ld	r8, Z
    766c:	80 80       	ld	r8, Z
    766e:	80 80       	ld	r8, Z
    7670:	80 80       	ld	r8, Z
    7672:	80 80       	ld	r8, Z
    7674:	80 80       	ld	r8, Z
    7676:	80 80       	ld	r8, Z
    7678:	80 80       	ld	r8, Z
    767a:	80 80       	ld	r8, Z
    767c:	80 80       	ld	r8, Z
    767e:	80 80       	ld	r8, Z
    7680:	80 80       	ld	r8, Z
    7682:	80 80       	ld	r8, Z
    7684:	80 80       	ld	r8, Z
    7686:	80 80       	ld	r8, Z
    7688:	80 80       	ld	r8, Z
    768a:	80 80       	ld	r8, Z
    768c:	80 80       	ld	r8, Z
    768e:	80 80       	ld	r8, Z
    7690:	80 80       	ld	r8, Z
    7692:	80 80       	ld	r8, Z
    7694:	80 80       	ld	r8, Z
    7696:	80 80       	ld	r8, Z
    7698:	80 80       	ld	r8, Z
    769a:	80 80       	ld	r8, Z
    769c:	80 80       	ld	r8, Z
    769e:	80 80       	ld	r8, Z
    76a0:	80 80       	ld	r8, Z
    76a2:	80 80       	ld	r8, Z
    76a4:	80 80       	ld	r8, Z
    76a6:	80 80       	ld	r8, Z
    76a8:	80 80       	ld	r8, Z
    76aa:	80 80       	ld	r8, Z
    76ac:	80 80       	ld	r8, Z
    76ae:	80 80       	ld	r8, Z
    76b0:	80 80       	ld	r8, Z
    76b2:	80 80       	ld	r8, Z
    76b4:	80 80       	ld	r8, Z
    76b6:	80 80       	ld	r8, Z
    76b8:	80 80       	ld	r8, Z
    76ba:	80 80       	ld	r8, Z
    76bc:	80 80       	ld	r8, Z
    76be:	80 80       	ld	r8, Z
    76c0:	80 80       	ld	r8, Z
    76c2:	80 80       	ld	r8, Z
    76c4:	80 80       	ld	r8, Z
    76c6:	80 80       	ld	r8, Z
    76c8:	80 80       	ld	r8, Z
    76ca:	80 80       	ld	r8, Z
    76cc:	80 80       	ld	r8, Z
    76ce:	80 80       	ld	r8, Z
    76d0:	80 80       	ld	r8, Z
    76d2:	80 80       	ld	r8, Z
    76d4:	80 80       	ld	r8, Z
    76d6:	80 80       	ld	r8, Z
    76d8:	80 80       	ld	r8, Z
    76da:	80 80       	ld	r8, Z
    76dc:	80 80       	ld	r8, Z
    76de:	80 80       	ld	r8, Z
    76e0:	80 80       	ld	r8, Z
    76e2:	80 80       	ld	r8, Z
    76e4:	80 80       	ld	r8, Z
    76e6:	80 80       	ld	r8, Z
    76e8:	80 80       	ld	r8, Z
    76ea:	80 80       	ld	r8, Z
    76ec:	80 80       	ld	r8, Z
    76ee:	80 80       	ld	r8, Z
    76f0:	80 80       	ld	r8, Z
    76f2:	80 80       	ld	r8, Z
    76f4:	80 80       	ld	r8, Z
    76f6:	80 80       	ld	r8, Z
    76f8:	80 80       	ld	r8, Z
    76fa:	80 80       	ld	r8, Z
    76fc:	80 80       	ld	r8, Z
    76fe:	80 80       	ld	r8, Z
    7700:	7f 7f       	andi	r23, 0xFF	; 255
    7702:	7f 7f       	andi	r23, 0xFF	; 255
    7704:	7f 7f       	andi	r23, 0xFF	; 255
    7706:	7f 7f       	andi	r23, 0xFF	; 255
    7708:	7f 7f       	andi	r23, 0xFF	; 255
    770a:	7f 7f       	andi	r23, 0xFF	; 255
    770c:	7f 7f       	andi	r23, 0xFF	; 255
    770e:	7f 7f       	andi	r23, 0xFF	; 255
    7710:	7f 7f       	andi	r23, 0xFF	; 255
    7712:	7f 7f       	andi	r23, 0xFF	; 255
    7714:	7f 7f       	andi	r23, 0xFF	; 255
    7716:	7f 7f       	andi	r23, 0xFF	; 255
    7718:	7f 7f       	andi	r23, 0xFF	; 255
    771a:	7f 7f       	andi	r23, 0xFF	; 255
    771c:	7f 7f       	andi	r23, 0xFF	; 255
    771e:	7f 7f       	andi	r23, 0xFF	; 255
    7720:	7f 7f       	andi	r23, 0xFF	; 255
    7722:	7f 7f       	andi	r23, 0xFF	; 255
    7724:	7f 7f       	andi	r23, 0xFF	; 255
    7726:	7f 7f       	andi	r23, 0xFF	; 255
    7728:	7f 7f       	andi	r23, 0xFF	; 255
    772a:	7f 7f       	andi	r23, 0xFF	; 255
    772c:	7f 7f       	andi	r23, 0xFF	; 255
    772e:	7f 7f       	andi	r23, 0xFF	; 255
    7730:	7f 7f       	andi	r23, 0xFF	; 255
    7732:	7f 7f       	andi	r23, 0xFF	; 255
    7734:	7f 7f       	andi	r23, 0xFF	; 255
    7736:	7f 7f       	andi	r23, 0xFF	; 255
    7738:	7f 7f       	andi	r23, 0xFF	; 255
    773a:	7f 7f       	andi	r23, 0xFF	; 255
    773c:	7f 7f       	andi	r23, 0xFF	; 255
    773e:	7f 7f       	andi	r23, 0xFF	; 255
    7740:	7f 7f       	andi	r23, 0xFF	; 255
    7742:	7f 7f       	andi	r23, 0xFF	; 255
    7744:	7f 7f       	andi	r23, 0xFF	; 255
    7746:	7f 7f       	andi	r23, 0xFF	; 255
    7748:	7f 7f       	andi	r23, 0xFF	; 255
    774a:	7f 7f       	andi	r23, 0xFF	; 255
    774c:	7f 7f       	andi	r23, 0xFF	; 255
    774e:	7f 7f       	andi	r23, 0xFF	; 255
    7750:	7f 7f       	andi	r23, 0xFF	; 255
    7752:	7f 7f       	andi	r23, 0xFF	; 255
    7754:	7f 7f       	andi	r23, 0xFF	; 255
    7756:	7f 7f       	andi	r23, 0xFF	; 255
    7758:	7f 7f       	andi	r23, 0xFF	; 255
    775a:	7f 7f       	andi	r23, 0xFF	; 255
    775c:	7f 7f       	andi	r23, 0xFF	; 255
    775e:	7f 7f       	andi	r23, 0xFF	; 255
    7760:	7f 7f       	andi	r23, 0xFF	; 255
    7762:	7f 7f       	andi	r23, 0xFF	; 255
    7764:	7f 7f       	andi	r23, 0xFF	; 255
    7766:	7f 7f       	andi	r23, 0xFF	; 255
    7768:	7f 7f       	andi	r23, 0xFF	; 255
    776a:	7f 7f       	andi	r23, 0xFF	; 255
    776c:	7f 7f       	andi	r23, 0xFF	; 255
    776e:	7f 7f       	andi	r23, 0xFF	; 255
    7770:	7f 7f       	andi	r23, 0xFF	; 255
    7772:	7f 7f       	andi	r23, 0xFF	; 255
    7774:	7f 7f       	andi	r23, 0xFF	; 255
    7776:	7f 7f       	andi	r23, 0xFF	; 255
    7778:	7f 7f       	andi	r23, 0xFF	; 255
    777a:	7f 7f       	andi	r23, 0xFF	; 255
    777c:	7f 7f       	andi	r23, 0xFF	; 255
    777e:	7f 7f       	andi	r23, 0xFF	; 255
    7780:	80 80       	ld	r8, Z
    7782:	80 80       	ld	r8, Z
    7784:	80 80       	ld	r8, Z
    7786:	80 80       	ld	r8, Z
    7788:	80 80       	ld	r8, Z
    778a:	80 80       	ld	r8, Z
    778c:	80 80       	ld	r8, Z
    778e:	80 80       	ld	r8, Z
    7790:	80 80       	ld	r8, Z
    7792:	80 80       	ld	r8, Z
    7794:	80 80       	ld	r8, Z
    7796:	80 80       	ld	r8, Z
    7798:	80 80       	ld	r8, Z
    779a:	80 80       	ld	r8, Z
    779c:	80 80       	ld	r8, Z
    779e:	80 80       	ld	r8, Z
    77a0:	80 80       	ld	r8, Z
    77a2:	80 80       	ld	r8, Z
    77a4:	80 80       	ld	r8, Z
    77a6:	80 80       	ld	r8, Z
    77a8:	80 80       	ld	r8, Z
    77aa:	80 80       	ld	r8, Z
    77ac:	80 80       	ld	r8, Z
    77ae:	80 80       	ld	r8, Z
    77b0:	80 80       	ld	r8, Z
    77b2:	80 80       	ld	r8, Z
    77b4:	80 80       	ld	r8, Z
    77b6:	80 80       	ld	r8, Z
    77b8:	80 80       	ld	r8, Z
    77ba:	80 80       	ld	r8, Z
    77bc:	80 80       	ld	r8, Z
    77be:	80 80       	ld	r8, Z
    77c0:	80 80       	ld	r8, Z
    77c2:	80 80       	ld	r8, Z
    77c4:	80 80       	ld	r8, Z
    77c6:	80 80       	ld	r8, Z
    77c8:	80 80       	ld	r8, Z
    77ca:	80 80       	ld	r8, Z
    77cc:	80 80       	ld	r8, Z
    77ce:	80 80       	ld	r8, Z
    77d0:	80 80       	ld	r8, Z
    77d2:	80 80       	ld	r8, Z
    77d4:	80 80       	ld	r8, Z
    77d6:	80 80       	ld	r8, Z
    77d8:	80 80       	ld	r8, Z
    77da:	80 80       	ld	r8, Z
    77dc:	80 80       	ld	r8, Z
    77de:	80 80       	ld	r8, Z
    77e0:	80 80       	ld	r8, Z
    77e2:	80 80       	ld	r8, Z
    77e4:	80 80       	ld	r8, Z
    77e6:	80 80       	ld	r8, Z
    77e8:	80 80       	ld	r8, Z
    77ea:	80 80       	ld	r8, Z
    77ec:	80 80       	ld	r8, Z
    77ee:	80 80       	ld	r8, Z
    77f0:	80 80       	ld	r8, Z
    77f2:	80 80       	ld	r8, Z
    77f4:	80 80       	ld	r8, Z
    77f6:	80 80       	ld	r8, Z
    77f8:	80 80       	ld	r8, Z
    77fa:	80 80       	ld	r8, Z
    77fc:	80 80       	ld	r8, Z
    77fe:	80 80       	ld	r8, Z
    7800:	7f 7f       	andi	r23, 0xFF	; 255
    7802:	7f 7f       	andi	r23, 0xFF	; 255
    7804:	7f 7f       	andi	r23, 0xFF	; 255
    7806:	7f 7f       	andi	r23, 0xFF	; 255
    7808:	7f 7f       	andi	r23, 0xFF	; 255
    780a:	7f 7f       	andi	r23, 0xFF	; 255
    780c:	7f 7f       	andi	r23, 0xFF	; 255
    780e:	7f 7f       	andi	r23, 0xFF	; 255
    7810:	7f 7f       	andi	r23, 0xFF	; 255
    7812:	7f 7f       	andi	r23, 0xFF	; 255
    7814:	7f 7f       	andi	r23, 0xFF	; 255
    7816:	7f 7f       	andi	r23, 0xFF	; 255
    7818:	7f 7f       	andi	r23, 0xFF	; 255
    781a:	7f 7f       	andi	r23, 0xFF	; 255
    781c:	7f 7f       	andi	r23, 0xFF	; 255
    781e:	7f 7f       	andi	r23, 0xFF	; 255
    7820:	7f 7f       	andi	r23, 0xFF	; 255
    7822:	7f 7f       	andi	r23, 0xFF	; 255
    7824:	7f 7f       	andi	r23, 0xFF	; 255
    7826:	7f 7f       	andi	r23, 0xFF	; 255
    7828:	7f 7f       	andi	r23, 0xFF	; 255
    782a:	7f 7f       	andi	r23, 0xFF	; 255
    782c:	7f 7f       	andi	r23, 0xFF	; 255
    782e:	7f 7f       	andi	r23, 0xFF	; 255
    7830:	7f 7f       	andi	r23, 0xFF	; 255
    7832:	7f 7f       	andi	r23, 0xFF	; 255
    7834:	7f 7f       	andi	r23, 0xFF	; 255
    7836:	7f 7f       	andi	r23, 0xFF	; 255
    7838:	7f 7f       	andi	r23, 0xFF	; 255
    783a:	7f 7f       	andi	r23, 0xFF	; 255
    783c:	7f 7f       	andi	r23, 0xFF	; 255
    783e:	7f 7f       	andi	r23, 0xFF	; 255
    7840:	7f 7f       	andi	r23, 0xFF	; 255
    7842:	7f 7f       	andi	r23, 0xFF	; 255
    7844:	7f 7f       	andi	r23, 0xFF	; 255
    7846:	7f 7f       	andi	r23, 0xFF	; 255
    7848:	7f 7f       	andi	r23, 0xFF	; 255
    784a:	7f 7f       	andi	r23, 0xFF	; 255
    784c:	7f 7f       	andi	r23, 0xFF	; 255
    784e:	7f 7f       	andi	r23, 0xFF	; 255
    7850:	7f 7f       	andi	r23, 0xFF	; 255
    7852:	7f 7f       	andi	r23, 0xFF	; 255
    7854:	7f 7f       	andi	r23, 0xFF	; 255
    7856:	7f 7f       	andi	r23, 0xFF	; 255
    7858:	7f 7f       	andi	r23, 0xFF	; 255
    785a:	7f 7f       	andi	r23, 0xFF	; 255
    785c:	7f 7f       	andi	r23, 0xFF	; 255
    785e:	7f 7f       	andi	r23, 0xFF	; 255
    7860:	7f 7f       	andi	r23, 0xFF	; 255
    7862:	7f 7f       	andi	r23, 0xFF	; 255
    7864:	7f 7f       	andi	r23, 0xFF	; 255
    7866:	7f 7f       	andi	r23, 0xFF	; 255
    7868:	7f 7f       	andi	r23, 0xFF	; 255
    786a:	7f 7f       	andi	r23, 0xFF	; 255
    786c:	7f 7f       	andi	r23, 0xFF	; 255
    786e:	7f 7f       	andi	r23, 0xFF	; 255
    7870:	7f 7f       	andi	r23, 0xFF	; 255
    7872:	7f 7f       	andi	r23, 0xFF	; 255
    7874:	7f 7f       	andi	r23, 0xFF	; 255
    7876:	7f 7f       	andi	r23, 0xFF	; 255
    7878:	7f 7f       	andi	r23, 0xFF	; 255
    787a:	7f 7f       	andi	r23, 0xFF	; 255
    787c:	7f 7f       	andi	r23, 0xFF	; 255
    787e:	7f 7f       	andi	r23, 0xFF	; 255
    7880:	7f 7f       	andi	r23, 0xFF	; 255
    7882:	7f 7f       	andi	r23, 0xFF	; 255
    7884:	7f 7f       	andi	r23, 0xFF	; 255
    7886:	7f 7f       	andi	r23, 0xFF	; 255
    7888:	7f 7f       	andi	r23, 0xFF	; 255
    788a:	7f 7f       	andi	r23, 0xFF	; 255
    788c:	7f 7f       	andi	r23, 0xFF	; 255
    788e:	7f 7f       	andi	r23, 0xFF	; 255
    7890:	7f 7f       	andi	r23, 0xFF	; 255
    7892:	7f 7f       	andi	r23, 0xFF	; 255
    7894:	7f 7f       	andi	r23, 0xFF	; 255
    7896:	7f 7f       	andi	r23, 0xFF	; 255
    7898:	7f 7f       	andi	r23, 0xFF	; 255
    789a:	7f 7f       	andi	r23, 0xFF	; 255
    789c:	7f 7f       	andi	r23, 0xFF	; 255
    789e:	7f 7f       	andi	r23, 0xFF	; 255
    78a0:	7f 7f       	andi	r23, 0xFF	; 255
    78a2:	7f 7f       	andi	r23, 0xFF	; 255
    78a4:	7f 7f       	andi	r23, 0xFF	; 255
    78a6:	7f 7f       	andi	r23, 0xFF	; 255
    78a8:	7f 7f       	andi	r23, 0xFF	; 255
    78aa:	7f 7f       	andi	r23, 0xFF	; 255
    78ac:	7f 7f       	andi	r23, 0xFF	; 255
    78ae:	7f 7f       	andi	r23, 0xFF	; 255
    78b0:	7f 7f       	andi	r23, 0xFF	; 255
    78b2:	7f 7f       	andi	r23, 0xFF	; 255
    78b4:	7f 7f       	andi	r23, 0xFF	; 255
    78b6:	7f 7f       	andi	r23, 0xFF	; 255
    78b8:	7f 7f       	andi	r23, 0xFF	; 255
    78ba:	7f 7f       	andi	r23, 0xFF	; 255
    78bc:	7f 7f       	andi	r23, 0xFF	; 255
    78be:	7f 7f       	andi	r23, 0xFF	; 255
    78c0:	80 80       	ld	r8, Z
    78c2:	80 80       	ld	r8, Z
    78c4:	80 80       	ld	r8, Z
    78c6:	80 80       	ld	r8, Z
    78c8:	80 80       	ld	r8, Z
    78ca:	80 80       	ld	r8, Z
    78cc:	80 80       	ld	r8, Z
    78ce:	80 80       	ld	r8, Z
    78d0:	80 80       	ld	r8, Z
    78d2:	80 80       	ld	r8, Z
    78d4:	80 80       	ld	r8, Z
    78d6:	80 80       	ld	r8, Z
    78d8:	80 80       	ld	r8, Z
    78da:	80 80       	ld	r8, Z
    78dc:	80 80       	ld	r8, Z
    78de:	80 80       	ld	r8, Z
    78e0:	80 80       	ld	r8, Z
    78e2:	80 80       	ld	r8, Z
    78e4:	80 80       	ld	r8, Z
    78e6:	80 80       	ld	r8, Z
    78e8:	80 80       	ld	r8, Z
    78ea:	80 80       	ld	r8, Z
    78ec:	80 80       	ld	r8, Z
    78ee:	80 80       	ld	r8, Z
    78f0:	80 80       	ld	r8, Z
    78f2:	80 80       	ld	r8, Z
    78f4:	80 80       	ld	r8, Z
    78f6:	80 80       	ld	r8, Z
    78f8:	80 80       	ld	r8, Z
    78fa:	80 80       	ld	r8, Z
    78fc:	80 80       	ld	r8, Z
    78fe:	80 80       	ld	r8, Z
    7900:	03 09       	sbc	r16, r3
    7902:	13 1e       	adc	r1, r19
    7904:	28 31       	cpi	r18, 0x18	; 24
    7906:	3a 40       	sbci	r19, 0x0A	; 10
    7908:	46 4c       	sbci	r20, 0xC6	; 198
    790a:	50 54       	subi	r21, 0x40	; 64
    790c:	58 5b       	subi	r21, 0xB8	; 184
    790e:	5e 61       	ori	r21, 0x1E	; 30
    7910:	63 65       	ori	r22, 0x53	; 83
    7912:	67 69       	ori	r22, 0x97	; 151
    7914:	6b 6c       	ori	r22, 0xCB	; 203
    7916:	6e 6f       	ori	r22, 0xFE	; 254
    7918:	70 71       	andi	r23, 0x10	; 16
    791a:	72 73       	andi	r23, 0x32	; 50
    791c:	74 75       	andi	r23, 0x54	; 84
    791e:	76 77       	andi	r23, 0x76	; 118
    7920:	77 78       	andi	r23, 0x87	; 135
    7922:	79 79       	andi	r23, 0x99	; 153
    7924:	7a 7a       	andi	r23, 0xAA	; 170
    7926:	7b 7b       	andi	r23, 0xBB	; 187
    7928:	7c 7c       	andi	r23, 0xCC	; 204
    792a:	7c 7d       	andi	r23, 0xDC	; 220
    792c:	7d 7d       	andi	r23, 0xDD	; 221
    792e:	7e 7e       	andi	r23, 0xEE	; 238
    7930:	7e 7e       	andi	r23, 0xEE	; 238
    7932:	7f 7f       	andi	r23, 0xFF	; 255
    7934:	7f 7f       	andi	r23, 0xFF	; 255
    7936:	7f 7f       	andi	r23, 0xFF	; 255
    7938:	7f 7f       	andi	r23, 0xFF	; 255
    793a:	7f 7f       	andi	r23, 0xFF	; 255
    793c:	7f 7f       	andi	r23, 0xFF	; 255
    793e:	7f 7f       	andi	r23, 0xFF	; 255
    7940:	7f 7f       	andi	r23, 0xFF	; 255
    7942:	7f 7f       	andi	r23, 0xFF	; 255
    7944:	7f 7f       	andi	r23, 0xFF	; 255
    7946:	7f 7f       	andi	r23, 0xFF	; 255
    7948:	7f 7f       	andi	r23, 0xFF	; 255
    794a:	7f 7f       	andi	r23, 0xFF	; 255
    794c:	7f 7e       	andi	r23, 0xEF	; 239
    794e:	7e 7e       	andi	r23, 0xEE	; 238
    7950:	7e 7d       	andi	r23, 0xDE	; 222
    7952:	7d 7d       	andi	r23, 0xDD	; 221
    7954:	7c 7c       	andi	r23, 0xCC	; 204
    7956:	7c 7b       	andi	r23, 0xBC	; 188
    7958:	7b 7a       	andi	r23, 0xAB	; 171
    795a:	7a 79       	andi	r23, 0x9A	; 154
    795c:	79 78       	andi	r23, 0x89	; 137
    795e:	77 77       	andi	r23, 0x77	; 119
    7960:	76 75       	andi	r23, 0x56	; 86
    7962:	74 73       	andi	r23, 0x34	; 52
    7964:	72 71       	andi	r23, 0x12	; 18
    7966:	70 6f       	ori	r23, 0xF0	; 240
    7968:	6e 6c       	ori	r22, 0xCE	; 206
    796a:	6b 69       	ori	r22, 0x9B	; 155
    796c:	67 65       	ori	r22, 0x57	; 87
    796e:	63 61       	ori	r22, 0x13	; 19
    7970:	5e 5b       	subi	r21, 0xBE	; 190
    7972:	58 54       	subi	r21, 0x48	; 72
    7974:	50 4c       	sbci	r21, 0xC0	; 192
    7976:	46 40       	sbci	r20, 0x06	; 6
    7978:	3a 31       	cpi	r19, 0x1A	; 26
    797a:	28 1e       	adc	r2, r24
    797c:	13 09       	sbc	r17, r3
    797e:	03 00       	.word	0x0003	; ????
    7980:	c6 cc       	rjmp	.-1652   	; 0x730e <waves+0xe>
    7982:	d5 db       	rcall	.-2134   	; 0x712e <steptable+0x26>
    7984:	df e3       	ldi	r29, 0x3F	; 63
    7986:	e5 e7       	ldi	r30, 0x75	; 117
    7988:	e9 ea       	ldi	r30, 0xA9	; 169
    798a:	eb ec       	ldi	r30, 0xCB	; 203
    798c:	ed ee       	ldi	r30, 0xED	; 237
    798e:	ef ef       	ldi	r30, 0xFF	; 255
    7990:	f0 f0       	brcs	.+60     	; 0x79ce <waves+0x6ce>
    7992:	f0 f1       	brcs	.+124    	; 0x7a10 <waves+0x710>
    7994:	f1 f1       	breq	.+124    	; 0x7a12 <waves+0x712>
    7996:	f1 f2       	breq	.-68     	; 0x7954 <waves+0x654>
    7998:	f2 f2       	brmi	.-68     	; 0x7956 <waves+0x656>
    799a:	f2 f2       	brmi	.-68     	; 0x7958 <waves+0x658>
    799c:	f2 f2       	brmi	.-68     	; 0x795a <waves+0x65a>
    799e:	f2 f3       	brmi	.-4      	; 0x799c <waves+0x69c>
    79a0:	f3 f3       	brvs	.-4      	; 0x799e <waves+0x69e>
    79a2:	f3 f3       	brvs	.-4      	; 0x79a0 <waves+0x6a0>
    79a4:	f3 f3       	brvs	.-4      	; 0x79a2 <waves+0x6a2>
    79a6:	f3 f3       	brvs	.-4      	; 0x79a4 <waves+0x6a4>
    79a8:	f3 f3       	brvs	.-4      	; 0x79a6 <waves+0x6a6>
    79aa:	f3 f3       	brvs	.-4      	; 0x79a8 <waves+0x6a8>
    79ac:	f3 f3       	brvs	.-4      	; 0x79aa <waves+0x6aa>
    79ae:	f3 f3       	brvs	.-4      	; 0x79ac <waves+0x6ac>
    79b0:	f3 f3       	brvs	.-4      	; 0x79ae <waves+0x6ae>
    79b2:	f3 f3       	brvs	.-4      	; 0x79b0 <waves+0x6b0>
    79b4:	f3 f3       	brvs	.-4      	; 0x79b2 <waves+0x6b2>
    79b6:	f3 f3       	brvs	.-4      	; 0x79b4 <waves+0x6b4>
    79b8:	f3 f3       	brvs	.-4      	; 0x79b6 <waves+0x6b6>
    79ba:	f3 f3       	brvs	.-4      	; 0x79b8 <waves+0x6b8>
    79bc:	f3 f3       	brvs	.-4      	; 0x79ba <waves+0x6ba>
    79be:	f3 f3       	brvs	.-4      	; 0x79bc <waves+0x6bc>
    79c0:	f3 f3       	brvs	.-4      	; 0x79be <waves+0x6be>
    79c2:	f3 f3       	brvs	.-4      	; 0x79c0 <waves+0x6c0>
    79c4:	f3 f3       	brvs	.-4      	; 0x79c2 <waves+0x6c2>
    79c6:	f3 f3       	brvs	.-4      	; 0x79c4 <waves+0x6c4>
    79c8:	f3 f3       	brvs	.-4      	; 0x79c6 <waves+0x6c6>
    79ca:	f3 f3       	brvs	.-4      	; 0x79c8 <waves+0x6c8>
    79cc:	f3 f3       	brvs	.-4      	; 0x79ca <waves+0x6ca>
    79ce:	f3 f3       	brvs	.-4      	; 0x79cc <waves+0x6cc>
    79d0:	f3 f3       	brvs	.-4      	; 0x79ce <waves+0x6ce>
    79d2:	f3 f3       	brvs	.-4      	; 0x79d0 <waves+0x6d0>
    79d4:	f3 f3       	brvs	.-4      	; 0x79d2 <waves+0x6d2>
    79d6:	f3 f3       	brvs	.-4      	; 0x79d4 <waves+0x6d4>
    79d8:	f3 f3       	brvs	.-4      	; 0x79d6 <waves+0x6d6>
    79da:	f3 f3       	brvs	.-4      	; 0x79d8 <waves+0x6d8>
    79dc:	f3 f3       	brvs	.-4      	; 0x79da <waves+0x6da>
    79de:	f3 f3       	brvs	.-4      	; 0x79dc <waves+0x6dc>
    79e0:	f2 f2       	brmi	.-68     	; 0x799e <waves+0x69e>
    79e2:	f2 f2       	brmi	.-68     	; 0x79a0 <waves+0x6a0>
    79e4:	f2 f2       	brmi	.-68     	; 0x79a2 <waves+0x6a2>
    79e6:	f2 f2       	brmi	.-68     	; 0x79a4 <waves+0x6a4>
    79e8:	f1 f1       	breq	.+124    	; 0x7a66 <waves+0x766>
    79ea:	f1 f1       	breq	.+124    	; 0x7a68 <waves+0x768>
    79ec:	f0 f0       	brcs	.+60     	; 0x7a2a <waves+0x72a>
    79ee:	f0 ef       	ldi	r31, 0xF0	; 240
    79f0:	ef ee       	ldi	r30, 0xEF	; 239
    79f2:	ed ec       	ldi	r30, 0xCD	; 205
    79f4:	eb ea       	ldi	r30, 0xAB	; 171
    79f6:	e9 e7       	ldi	r30, 0x79	; 121
    79f8:	e5 e3       	ldi	r30, 0x35	; 53
    79fa:	df db       	rcall	.-2114   	; 0x71ba <steptable+0xb2>
    79fc:	d5 cc       	rjmp	.-1622   	; 0x73a8 <waves+0xa8>
    79fe:	c6 00       	.word	0x00c6	; ????
    7a00:	00 28       	or	r0, r0
    7a02:	3d 42       	sbci	r19, 0x2D	; 45
    7a04:	30 2d       	mov	r19, r0
    7a06:	2c 2b       	or	r18, r28
    7a08:	2c 2d       	mov	r18, r12
    7a0a:	2e 2f       	mov	r18, r30
    7a0c:	30 32       	cpi	r19, 0x20	; 32
    7a0e:	33 35       	cpi	r19, 0x53	; 83
    7a10:	37 39       	cpi	r19, 0x97	; 151
    7a12:	3b 3d       	cpi	r19, 0xDB	; 219
    7a14:	3f 41       	sbci	r19, 0x1F	; 31
    7a16:	43 45       	sbci	r20, 0x53	; 83
    7a18:	48 4a       	sbci	r20, 0xA8	; 168
    7a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7a1c:	50 53       	subi	r21, 0x30	; 48
    7a1e:	55 57       	subi	r21, 0x75	; 117
    7a20:	59 5b       	subi	r21, 0xB9	; 185
    7a22:	5d 5f       	subi	r21, 0xFD	; 253
    7a24:	61 63       	ori	r22, 0x31	; 49
    7a26:	65 67       	ori	r22, 0x75	; 117
    7a28:	69 6b       	ori	r22, 0xB9	; 185
    7a2a:	6c 6e       	ori	r22, 0xEC	; 236
    7a2c:	70 71       	andi	r23, 0x10	; 16
    7a2e:	73 74       	andi	r23, 0x43	; 67
    7a30:	75 77       	andi	r23, 0x75	; 117
    7a32:	78 79       	andi	r23, 0x98	; 152
    7a34:	7a 7b       	andi	r23, 0xBA	; 186
    7a36:	7c 7d       	andi	r23, 0xDC	; 220
    7a38:	7d 7e       	andi	r23, 0xED	; 237
    7a3a:	7e 7f       	andi	r23, 0xFE	; 254
    7a3c:	7f 7f       	andi	r23, 0xFF	; 255
    7a3e:	7f 7f       	andi	r23, 0xFF	; 255
    7a40:	7f 7f       	andi	r23, 0xFF	; 255
    7a42:	7f 7f       	andi	r23, 0xFF	; 255
    7a44:	7f 7f       	andi	r23, 0xFF	; 255
    7a46:	7e 7e       	andi	r23, 0xEE	; 238
    7a48:	7d 7d       	andi	r23, 0xDD	; 221
    7a4a:	7c 7b       	andi	r23, 0xBC	; 188
    7a4c:	7a 79       	andi	r23, 0x9A	; 154
    7a4e:	78 77       	andi	r23, 0x78	; 120
    7a50:	75 74       	andi	r23, 0x45	; 69
    7a52:	73 71       	andi	r23, 0x13	; 19
    7a54:	70 6e       	ori	r23, 0xE0	; 224
    7a56:	6c 6b       	ori	r22, 0xBC	; 188
    7a58:	69 67       	ori	r22, 0x79	; 121
    7a5a:	65 63       	ori	r22, 0x35	; 53
    7a5c:	61 5f       	subi	r22, 0xF1	; 241
    7a5e:	5d 5b       	subi	r21, 0xBD	; 189
    7a60:	59 57       	subi	r21, 0x79	; 121
    7a62:	55 53       	subi	r21, 0x35	; 53
    7a64:	50 4e       	sbci	r21, 0xE0	; 224
    7a66:	4c 4a       	sbci	r20, 0xAC	; 172
    7a68:	48 45       	sbci	r20, 0x58	; 88
    7a6a:	43 41       	sbci	r20, 0x13	; 19
    7a6c:	3f 3d       	cpi	r19, 0xDF	; 223
    7a6e:	3b 39       	cpi	r19, 0x9B	; 155
    7a70:	37 35       	cpi	r19, 0x57	; 87
    7a72:	33 32       	cpi	r19, 0x23	; 35
    7a74:	30 2f       	mov	r19, r16
    7a76:	2e 2d       	mov	r18, r14
    7a78:	2c 2b       	or	r18, r28
    7a7a:	2c 2d       	mov	r18, r12
    7a7c:	30 42       	sbci	r19, 0x20	; 32
    7a7e:	3d 28       	or	r3, r13
    7a80:	00 e9       	ldi	r16, 0x90	; 144
    7a82:	e5 fe       	sbrs	r14, 5
    7a84:	d4 d7       	rcall	.+4008   	; 0x8a2e <render_hud+0x16>
    7a86:	d7 d7       	rcall	.+4014   	; 0x8a36 <render_hud+0x1e>
    7a88:	d6 d4       	rcall	.+2476   	; 0x8436 <LBLineIntersect+0xc2>
    7a8a:	d2 d0       	rcall	.+420    	; 0x7c30 <waves+0x930>
    7a8c:	ce cc       	rjmp	.-1636   	; 0x742a <waves+0x12a>
    7a8e:	ca c8       	rjmp	.-3692   	; 0x6c24 <TriggerNote+0x56>
    7a90:	c6 c3       	rjmp	.+1932   	; 0x821e <LBGetNextFrame+0x42>
    7a92:	c1 bf       	out	0x31, r28	; 49
    7a94:	bd ba       	out	0x1d, r11	; 29
    7a96:	b8 b6       	in	r11, 0x38	; 56
    7a98:	b4 b1       	in	r27, 0x04	; 4
    7a9a:	af ad       	ldd	r26, Y+63	; 0x3f
    7a9c:	ab a9       	ldd	r26, Y+51	; 0x33
    7a9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7aa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    7aa2:	9f 9e       	mul	r9, r31
    7aa4:	9c 9a       	sbi	0x13, 4	; 19
    7aa6:	99 97       	sbiw	r26, 0x29	; 41
    7aa8:	95 94       	asr	r9
    7aaa:	93 91       	.word	0x9193	; ????
    7aac:	90 8f       	std	Z+24, r25	; 0x18
    7aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7ab0:	8b 8a       	std	Y+19, r8	; 0x13
    7ab2:	89 88       	ldd	r8, Y+17	; 0x11
    7ab4:	88 87       	std	Y+8, r24	; 0x08
    7ab6:	86 85       	ldd	r24, Z+14	; 0x0e
    7ab8:	85 84       	ldd	r8, Z+13	; 0x0d
    7aba:	84 84       	ldd	r8, Z+12	; 0x0c
    7abc:	83 83       	std	Z+3, r24	; 0x03
    7abe:	83 83       	std	Z+3, r24	; 0x03
    7ac0:	83 83       	std	Z+3, r24	; 0x03
    7ac2:	83 83       	std	Z+3, r24	; 0x03
    7ac4:	83 84       	ldd	r8, Z+11	; 0x0b
    7ac6:	84 84       	ldd	r8, Z+12	; 0x0c
    7ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    7aca:	86 87       	std	Z+14, r24	; 0x0e
    7acc:	88 88       	ldd	r8, Y+16	; 0x10
    7ace:	89 8a       	std	Y+17, r8	; 0x11
    7ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ad4:	90 91 93 94 	lds	r25, 0x9493
    7ad8:	95 97       	sbiw	r26, 0x25	; 37
    7ada:	99 9a       	sbi	0x13, 1	; 19
    7adc:	9c 9e       	mul	r9, r28
    7ade:	9f a1       	ldd	r25, Y+39	; 0x27
    7ae0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    7ae2:	a7 a9       	ldd	r26, Z+55	; 0x37
    7ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ae6:	af b1       	in	r26, 0x0f	; 15
    7ae8:	b4 b6       	in	r11, 0x34	; 52
    7aea:	b8 ba       	out	0x18, r11	; 24
    7aec:	bd bf       	out	0x3d, r27	; 61
    7aee:	c1 c3       	rjmp	.+1922   	; 0x8272 <LBGetJoyPadState+0x50>
    7af0:	c6 c8       	rjmp	.-3700   	; 0x6c7e <ProcessMusic+0x42>
    7af2:	ca cc       	rjmp	.-1644   	; 0x7488 <waves+0x188>
    7af4:	ce d0       	rcall	.+412    	; 0x7c92 <waves+0x992>
    7af6:	d2 d4       	rcall	.+2468   	; 0x849c <LBLineIntersect+0x128>
    7af8:	d6 d7       	rcall	.+4012   	; 0x8aa6 <render_banter+0x1c>
    7afa:	d7 d7       	rcall	.+4014   	; 0x8aaa <render_banter+0x20>
    7afc:	d4 fe       	sbrs	r13, 4
    7afe:	e5 e9       	ldi	r30, 0x95	; 149
    7b00:	f9 f8       	.word	0xf8f9	; ????
    7b02:	f9 f5       	brne	.+126    	; 0x7b82 <waves+0x882>
    7b04:	eb e1       	ldi	r30, 0x1B	; 27
    7b06:	dd de       	rcall	.-582    	; 0x78c2 <waves+0x5c2>
    7b08:	e0 e2       	ldi	r30, 0x20	; 32
    7b0a:	e4 e5       	ldi	r30, 0x54	; 84
    7b0c:	e6 e5       	ldi	r30, 0x56	; 86
    7b0e:	e4 e2       	ldi	r30, 0x24	; 36
    7b10:	de d9       	rcall	.-3140   	; 0x6ece <ProcessMusic+0x292>
    7b12:	d2 ca       	rjmp	.-2652   	; 0x70b8 <SetMixerWave>
    7b14:	c1 b7       	in	r28, 0x31	; 49
    7b16:	ac a2       	std	Y+36, r10	; 0x24
    7b18:	99 91       	ld	r25, Y+
    7b1a:	8a 86       	std	Y+10, r8	; 0x0a
    7b1c:	83 81       	ldd	r24, Z+3	; 0x03
    7b1e:	80 80       	ld	r8, Z
    7b20:	81 82       	std	Z+1, r8	; 0x01
    7b22:	83 85       	ldd	r24, Z+11	; 0x0b
    7b24:	86 88       	ldd	r8, Z+22	; 0x16
    7b26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7b28:	8d 8f       	std	Y+29, r24	; 0x1d
    7b2a:	90 92 93 95 	sts	0x9593, r9
    7b2e:	96 97       	sbiw	r26, 0x26	; 38
    7b30:	98 99       	sbic	0x13, 0	; 19
    7b32:	9a 9b       	sbis	0x13, 2	; 19
    7b34:	9b 9c       	mul	r9, r11
    7b36:	9d 9d       	mul	r25, r13
    7b38:	9d 9e       	mul	r9, r29
    7b3a:	9e 9e       	mul	r9, r30
    7b3c:	9f 9f       	mul	r25, r31
    7b3e:	9f 9f       	mul	r25, r31
    7b40:	9f 9f       	mul	r25, r31
    7b42:	9f 9e       	mul	r9, r31
    7b44:	9e 9e       	mul	r9, r30
    7b46:	9d 9d       	mul	r25, r13
    7b48:	9d 9c       	mul	r9, r13
    7b4a:	9b 9b       	sbis	0x13, 3	; 19
    7b4c:	9a 99       	sbic	0x13, 2	; 19
    7b4e:	98 97       	sbiw	r26, 0x28	; 40
    7b50:	96 95       	lsr	r25
    7b52:	93 92       	.word	0x9293	; ????
    7b54:	90 8f       	std	Z+24, r25	; 0x18
    7b56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7b58:	8a 88       	ldd	r8, Y+18	; 0x12
    7b5a:	86 85       	ldd	r24, Z+14	; 0x0e
    7b5c:	83 82       	std	Z+3, r8	; 0x03
    7b5e:	81 80       	ldd	r8, Z+1	; 0x01
    7b60:	80 81       	ld	r24, Z
    7b62:	83 86       	std	Z+11, r8	; 0x0b
    7b64:	8a 91       	ld	r24, -Y
    7b66:	99 a2       	std	Y+33, r9	; 0x21
    7b68:	ac b7       	in	r26, 0x3c	; 60
    7b6a:	c1 ca       	rjmp	.-2686   	; 0x70ee <esmw>
    7b6c:	d2 d9       	rcall	.-3164   	; 0x6f12 <ProcessMusic+0x2d6>
    7b6e:	de e2       	ldi	r29, 0x2E	; 46
    7b70:	e4 e5       	ldi	r30, 0x54	; 84
    7b72:	e6 e5       	ldi	r30, 0x56	; 86
    7b74:	e4 e2       	ldi	r30, 0x24	; 36
    7b76:	e0 de       	rcall	.-576    	; 0x7938 <waves+0x638>
    7b78:	dd e1       	ldi	r29, 0x1D	; 29
    7b7a:	eb f5       	brvc	.+122    	; 0x7bf6 <waves+0x8f6>
    7b7c:	f9 f8       	.word	0xf8f9	; ????
    7b7e:	f9 00       	.word	0x00f9	; ????
    7b80:	07 08       	sbc	r0, r7
    7b82:	07 0b       	sbc	r16, r23
    7b84:	15 1f       	adc	r17, r21
    7b86:	23 22       	and	r2, r19
    7b88:	20 1e       	adc	r2, r16
    7b8a:	1c 1b       	sub	r17, r28
    7b8c:	1a 1b       	sub	r17, r26
    7b8e:	1c 1e       	adc	r1, r28
    7b90:	22 27       	eor	r18, r18
    7b92:	2e 36       	cpi	r18, 0x6E	; 110
    7b94:	3f 49       	sbci	r19, 0x9F	; 159
    7b96:	54 5e       	subi	r21, 0xE4	; 228
    7b98:	67 6f       	ori	r22, 0xF7	; 247
    7b9a:	76 7a       	andi	r23, 0xA6	; 166
    7b9c:	7e 7f       	andi	r23, 0xFE	; 254
    7b9e:	7f 7f       	andi	r23, 0xFF	; 255
    7ba0:	7f 7e       	andi	r23, 0xEF	; 239
    7ba2:	7d 7b       	andi	r23, 0xBD	; 189
    7ba4:	7a 78       	andi	r23, 0x8A	; 138
    7ba6:	76 74       	andi	r23, 0x46	; 70
    7ba8:	73 71       	andi	r23, 0x13	; 19
    7baa:	70 6e       	ori	r23, 0xE0	; 224
    7bac:	6d 6b       	ori	r22, 0xBD	; 189
    7bae:	6a 69       	ori	r22, 0x9A	; 154
    7bb0:	68 67       	ori	r22, 0x78	; 120
    7bb2:	66 65       	ori	r22, 0x56	; 86
    7bb4:	65 64       	ori	r22, 0x45	; 69
    7bb6:	64 63       	ori	r22, 0x34	; 52
    7bb8:	63 62       	ori	r22, 0x23	; 35
    7bba:	62 62       	ori	r22, 0x22	; 34
    7bbc:	61 61       	ori	r22, 0x11	; 17
    7bbe:	61 61       	ori	r22, 0x11	; 17
    7bc0:	61 61       	ori	r22, 0x11	; 17
    7bc2:	61 62       	ori	r22, 0x21	; 33
    7bc4:	62 62       	ori	r22, 0x22	; 34
    7bc6:	63 63       	ori	r22, 0x33	; 51
    7bc8:	63 64       	ori	r22, 0x43	; 67
    7bca:	65 65       	ori	r22, 0x55	; 85
    7bcc:	66 67       	ori	r22, 0x76	; 118
    7bce:	68 69       	ori	r22, 0x98	; 152
    7bd0:	6a 6b       	ori	r22, 0xBA	; 186
    7bd2:	6d 6e       	ori	r22, 0xED	; 237
    7bd4:	70 71       	andi	r23, 0x10	; 16
    7bd6:	73 74       	andi	r23, 0x43	; 67
    7bd8:	76 78       	andi	r23, 0x86	; 134
    7bda:	7a 7b       	andi	r23, 0xBA	; 186
    7bdc:	7d 7e       	andi	r23, 0xED	; 237
    7bde:	7f 7f       	andi	r23, 0xFF	; 255
    7be0:	7f 7f       	andi	r23, 0xFF	; 255
    7be2:	7e 7a       	andi	r23, 0xAE	; 174
    7be4:	76 6f       	ori	r23, 0xF6	; 246
    7be6:	67 5e       	subi	r22, 0xE7	; 231
    7be8:	54 49       	sbci	r21, 0x94	; 148
    7bea:	3f 36       	cpi	r19, 0x6F	; 111
    7bec:	2e 27       	eor	r18, r30
    7bee:	22 1e       	adc	r2, r18
    7bf0:	1c 1b       	sub	r17, r28
    7bf2:	1a 1b       	sub	r17, r26
    7bf4:	1c 1e       	adc	r1, r28
    7bf6:	20 22       	and	r2, r16
    7bf8:	23 1f       	adc	r18, r19
    7bfa:	15 0b       	sbc	r17, r21
    7bfc:	07 08       	sbc	r0, r7
    7bfe:	07 00       	.word	0x0007	; ????
    7c00:	1f 31       	cpi	r17, 0x1F	; 31
    7c02:	3d 44       	sbci	r19, 0x4D	; 77
    7c04:	4e 53       	subi	r20, 0x3E	; 62
    7c06:	54 56       	subi	r21, 0x64	; 100
    7c08:	5a 5f       	subi	r21, 0xFA	; 250
    7c0a:	64 69       	ori	r22, 0x94	; 148
    7c0c:	6e 74       	andi	r22, 0x4E	; 78
    7c0e:	76 79       	andi	r23, 0x96	; 150
    7c10:	7c 7f       	andi	r23, 0xFC	; 252
    7c12:	7f 7f       	andi	r23, 0xFF	; 255
    7c14:	7f 7f       	andi	r23, 0xFF	; 255
    7c16:	7f 7f       	andi	r23, 0xFF	; 255
    7c18:	7f 7f       	andi	r23, 0xFF	; 255
    7c1a:	7f 7f       	andi	r23, 0xFF	; 255
    7c1c:	7f 7f       	andi	r23, 0xFF	; 255
    7c1e:	7f 7f       	andi	r23, 0xFF	; 255
    7c20:	7f 7f       	andi	r23, 0xFF	; 255
    7c22:	7f 7f       	andi	r23, 0xFF	; 255
    7c24:	7f 7f       	andi	r23, 0xFF	; 255
    7c26:	7f 7f       	andi	r23, 0xFF	; 255
    7c28:	7f 7f       	andi	r23, 0xFF	; 255
    7c2a:	7f 7f       	andi	r23, 0xFF	; 255
    7c2c:	7f 7f       	andi	r23, 0xFF	; 255
    7c2e:	7f 7f       	andi	r23, 0xFF	; 255
    7c30:	7f 7f       	andi	r23, 0xFF	; 255
    7c32:	7f 7f       	andi	r23, 0xFF	; 255
    7c34:	7f 7f       	andi	r23, 0xFF	; 255
    7c36:	7f 7f       	andi	r23, 0xFF	; 255
    7c38:	7f 7f       	andi	r23, 0xFF	; 255
    7c3a:	7f 7f       	andi	r23, 0xFF	; 255
    7c3c:	7f 7f       	andi	r23, 0xFF	; 255
    7c3e:	7f 7f       	andi	r23, 0xFF	; 255
    7c40:	7f 7f       	andi	r23, 0xFF	; 255
    7c42:	7f 7f       	andi	r23, 0xFF	; 255
    7c44:	7f 7f       	andi	r23, 0xFF	; 255
    7c46:	7f 7f       	andi	r23, 0xFF	; 255
    7c48:	7f 7f       	andi	r23, 0xFF	; 255
    7c4a:	7f 7f       	andi	r23, 0xFF	; 255
    7c4c:	7f 7f       	andi	r23, 0xFF	; 255
    7c4e:	7f 7f       	andi	r23, 0xFF	; 255
    7c50:	7f 7f       	andi	r23, 0xFF	; 255
    7c52:	7f 7f       	andi	r23, 0xFF	; 255
    7c54:	7f 7f       	andi	r23, 0xFF	; 255
    7c56:	7f 7f       	andi	r23, 0xFF	; 255
    7c58:	7f 7f       	andi	r23, 0xFF	; 255
    7c5a:	7f 7f       	andi	r23, 0xFF	; 255
    7c5c:	7f 7f       	andi	r23, 0xFF	; 255
    7c5e:	7f 7f       	andi	r23, 0xFF	; 255
    7c60:	7f 7f       	andi	r23, 0xFF	; 255
    7c62:	7f 7f       	andi	r23, 0xFF	; 255
    7c64:	7f 7f       	andi	r23, 0xFF	; 255
    7c66:	7f 7f       	andi	r23, 0xFF	; 255
    7c68:	7f 7f       	andi	r23, 0xFF	; 255
    7c6a:	7f 7f       	andi	r23, 0xFF	; 255
    7c6c:	7f 7f       	andi	r23, 0xFF	; 255
    7c6e:	7f 7f       	andi	r23, 0xFF	; 255
    7c70:	7f 7f       	andi	r23, 0xFF	; 255
    7c72:	7f 7f       	andi	r23, 0xFF	; 255
    7c74:	7f 7f       	andi	r23, 0xFF	; 255
    7c76:	7f 7f       	andi	r23, 0xFF	; 255
    7c78:	7f 7f       	andi	r23, 0xFF	; 255
    7c7a:	7f 7c       	andi	r23, 0xCF	; 207
    7c7c:	78 71       	andi	r23, 0x18	; 24
    7c7e:	68 4c       	sbci	r22, 0xC8	; 200
    7c80:	2c 1c       	adc	r2, r12
    7c82:	12 0c       	add	r1, r2
    7c84:	0a 0b       	sbc	r16, r26
    7c86:	0a 05       	cpc	r16, r10
    7c88:	fd f3       	brhs	.-2      	; 0x7c88 <waves+0x988>
    7c8a:	e9 df       	rcall	.-46     	; 0x7c5e <waves+0x95e>
    7c8c:	d4 ca       	rjmp	.-2648   	; 0x7236 <steptable+0x12e>
    7c8e:	c0 b7       	in	r28, 0x30	; 48
    7c90:	ae a6       	std	Y+46, r10	; 0x2e
    7c92:	9e 97       	sbiw	r26, 0x2e	; 46
    7c94:	91 8b       	std	Z+17, r25	; 0x11
    7c96:	86 85       	ldd	r24, Z+14	; 0x0e
    7c98:	82 80       	ldd	r8, Z+2	; 0x02
    7c9a:	80 80       	ld	r8, Z
    7c9c:	80 80       	ld	r8, Z
    7c9e:	80 80       	ld	r8, Z
    7ca0:	80 80       	ld	r8, Z
    7ca2:	80 80       	ld	r8, Z
    7ca4:	80 80       	ld	r8, Z
    7ca6:	80 80       	ld	r8, Z
    7ca8:	80 80       	ld	r8, Z
    7caa:	80 80       	ld	r8, Z
    7cac:	80 80       	ld	r8, Z
    7cae:	80 80       	ld	r8, Z
    7cb0:	80 80       	ld	r8, Z
    7cb2:	80 80       	ld	r8, Z
    7cb4:	80 80       	ld	r8, Z
    7cb6:	80 80       	ld	r8, Z
    7cb8:	80 80       	ld	r8, Z
    7cba:	80 80       	ld	r8, Z
    7cbc:	80 80       	ld	r8, Z
    7cbe:	80 80       	ld	r8, Z
    7cc0:	80 80       	ld	r8, Z
    7cc2:	80 80       	ld	r8, Z
    7cc4:	80 80       	ld	r8, Z
    7cc6:	80 80       	ld	r8, Z
    7cc8:	80 80       	ld	r8, Z
    7cca:	80 80       	ld	r8, Z
    7ccc:	80 80       	ld	r8, Z
    7cce:	80 80       	ld	r8, Z
    7cd0:	80 80       	ld	r8, Z
    7cd2:	80 80       	ld	r8, Z
    7cd4:	80 80       	ld	r8, Z
    7cd6:	80 80       	ld	r8, Z
    7cd8:	80 80       	ld	r8, Z
    7cda:	80 80       	ld	r8, Z
    7cdc:	80 80       	ld	r8, Z
    7cde:	80 80       	ld	r8, Z
    7ce0:	80 80       	ld	r8, Z
    7ce2:	80 80       	ld	r8, Z
    7ce4:	80 80       	ld	r8, Z
    7ce6:	80 80       	ld	r8, Z
    7ce8:	80 80       	ld	r8, Z
    7cea:	80 80       	ld	r8, Z
    7cec:	80 80       	ld	r8, Z
    7cee:	80 80       	ld	r8, Z
    7cf0:	80 80       	ld	r8, Z
    7cf2:	80 80       	ld	r8, Z
    7cf4:	80 87       	std	Z+8, r24	; 0x08
    7cf6:	91 9d       	mul	r25, r1
    7cf8:	ac c4       	rjmp	.+2392   	; 0x8652 <set_shot_animations+0x5e>
    7cfa:	cb d4       	rcall	.+2454   	; 0x8692 <init_player+0x3c>
    7cfc:	dd f2       	brhs	.-74     	; 0x7cb4 <waves+0x9b4>
    7cfe:	fa fa       	.word	0xfafa	; ????

00007d00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7d00:	90 91 b7 0b 	lds	r25, 0x0BB7
    7d04:	e8 e9       	ldi	r30, 0x98	; 152
    7d06:	fa e0       	ldi	r31, 0x0A	; 10
    7d08:	80 e0       	ldi	r24, 0x00	; 0
    7d0a:	89 17       	cp	r24, r25
    7d0c:	49 f0       	breq	.+18     	; 0x7d20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    7d0e:	a0 81       	ld	r26, Z
    7d10:	b1 81       	ldd	r27, Z+1	; 0x01
    7d12:	a0 5a       	subi	r26, 0xA0	; 160
    7d14:	be 4f       	sbci	r27, 0xFE	; 254
    7d16:	22 81       	ldd	r18, Z+2	; 0x02
    7d18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7d1a:	8f 5f       	subi	r24, 0xFF	; 255
    7d1c:	33 96       	adiw	r30, 0x03	; 3
    7d1e:	f5 cf       	rjmp	.-22     	; 0x7d0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    7d20:	08 95       	ret

00007d22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    7d22:	80 93 00 01 	sts	0x0100, r24
    7d26:	08 95       	ret

00007d28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    7d28:	2f 92       	push	r2
    7d2a:	3f 92       	push	r3
    7d2c:	4f 92       	push	r4
    7d2e:	5f 92       	push	r5
    7d30:	6f 92       	push	r6
    7d32:	7f 92       	push	r7
    7d34:	8f 92       	push	r8
    7d36:	9f 92       	push	r9
    7d38:	af 92       	push	r10
    7d3a:	bf 92       	push	r11
    7d3c:	cf 92       	push	r12
    7d3e:	df 92       	push	r13
    7d40:	ef 92       	push	r14
    7d42:	ff 92       	push	r15
    7d44:	0f 93       	push	r16
    7d46:	1f 93       	push	r17
    7d48:	cf 93       	push	r28
    7d4a:	df 93       	push	r29
    7d4c:	00 d0       	rcall	.+0      	; 0x7d4e <ProcessSprites+0x26>
    7d4e:	1f 92       	push	r1
    7d50:	cd b7       	in	r28, 0x3d	; 61
    7d52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    7d54:	10 92 b7 0b 	sts	0x0BB7, r1
		if(!spritesOn) return;
    7d58:	80 91 00 01 	lds	r24, 0x0100
    7d5c:	88 23       	and	r24, r24
    7d5e:	09 f4       	brne	.+2      	; 0x7d62 <ProcessSprites+0x3a>
    7d60:	a1 c0       	rjmp	.+322    	; 0x7ea4 <ProcessSprites+0x17c>
    7d62:	e8 ea       	ldi	r30, 0xA8	; 168
    7d64:	ce 2e       	mov	r12, r30
    7d66:	e4 e0       	ldi	r30, 0x04	; 4
    7d68:	de 2e       	mov	r13, r30
    7d6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    7d6c:	f6 01       	movw	r30, r12
    7d6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    7d70:	80 3f       	cpi	r24, 0xF0	; 240
    7d72:	09 f4       	brne	.+2      	; 0x7d76 <ProcessSprites+0x4e>
    7d74:	79 c0       	rjmp	.+242    	; 0x7e68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    7d76:	91 81       	ldd	r25, Z+1	; 0x01
    7d78:	29 2f       	mov	r18, r25
    7d7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7d7c:	28 2e       	mov	r2, r24
    7d7e:	26 94       	lsr	r2
    7d80:	26 94       	lsr	r2
    7d82:	26 94       	lsr	r2
				dx=ssx&0x7;
    7d84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    7d86:	19 f0       	breq	.+6      	; 0x7d8e <ProcessSprites+0x66>
    7d88:	72 e0       	ldi	r23, 0x02	; 2
    7d8a:	47 2e       	mov	r4, r23
    7d8c:	02 c0       	rjmp	.+4      	; 0x7d92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    7d8e:	44 24       	eor	r4, r4
    7d90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    7d92:	63 e0       	ldi	r22, 0x03	; 3
    7d94:	36 95       	lsr	r19
    7d96:	27 95       	ror	r18
    7d98:	6a 95       	dec	r22
    7d9a:	e1 f7       	brne	.-8      	; 0x7d94 <ProcessSprites+0x6c>
    7d9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    7d9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    7da0:	19 f0       	breq	.+6      	; 0x7da8 <ProcessSprites+0x80>
    7da2:	52 e0       	ldi	r21, 0x02	; 2
    7da4:	55 2e       	mov	r5, r21
    7da6:	02 c0       	rjmp	.+4      	; 0x7dac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    7da8:	55 24       	eor	r5, r5
    7daa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7dac:	29 2f       	mov	r18, r25
    7dae:	30 e0       	ldi	r19, 0x00	; 0
    7db0:	32 2f       	mov	r19, r18
    7db2:	22 27       	eor	r18, r18
    7db4:	a9 01       	movw	r20, r18
    7db6:	48 0f       	add	r20, r24
    7db8:	51 1d       	adc	r21, r1
    7dba:	5b 83       	std	Y+3, r21	; 0x03
    7dbc:	4a 83       	std	Y+2, r20	; 0x02
    7dbe:	e1 2c       	mov	r14, r1
    7dc0:	f1 2c       	mov	r15, r1
    7dc2:	94 ee       	ldi	r25, 0xE4	; 228
    7dc4:	93 0d       	add	r25, r3
    7dc6:	99 83       	std	Y+1, r25	; 0x01
    7dc8:	03 2d       	mov	r16, r3
    7dca:	0e 0d       	add	r16, r14
    7dcc:	0c 31       	cpi	r16, 0x1C	; 28
    7dce:	10 f0       	brcs	.+4      	; 0x7dd4 <ProcessSprites+0xac>
    7dd0:	09 81       	ldd	r16, Y+1	; 0x01
    7dd2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    7dd4:	5e e1       	ldi	r21, 0x1E	; 30
    7dd6:	05 9f       	mul	r16, r21
    7dd8:	80 01       	movw	r16, r0
    7dda:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7ddc:	be 2c       	mov	r11, r14
    7dde:	aa 24       	eor	r10, r10
    7de0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7de2:	ed e1       	ldi	r30, 0x1D	; 29
    7de4:	e7 15       	cp	r30, r7
    7de6:	18 f4       	brcc	.+6      	; 0x7dee <ProcessSprites+0xc6>
    7de8:	82 ee       	ldi	r24, 0xE2	; 226
    7dea:	87 0d       	add	r24, r7
    7dec:	01 c0       	rjmp	.+2      	; 0x7df0 <ProcessSprites+0xc8>
    7dee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    7df0:	a8 01       	movw	r20, r16
    7df2:	48 0f       	add	r20, r24
    7df4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    7df6:	ca 01       	movw	r24, r20
    7df8:	80 5a       	subi	r24, 0xA0	; 160
    7dfa:	9e 4f       	sbci	r25, 0xFE	; 254
    7dfc:	4c 01       	movw	r8, r24
    7dfe:	fc 01       	movw	r30, r24
    7e00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    7e02:	87 31       	cpi	r24, 0x17	; 23
    7e04:	e0 f0       	brcs	.+56     	; 0x7e3e <ProcessSprites+0x116>
    7e06:	60 91 b7 0b 	lds	r22, 0x0BB7
    7e0a:	67 31       	cpi	r22, 0x17	; 23
    7e0c:	f8 f4       	brcc	.+62     	; 0x7e4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    7e0e:	26 2f       	mov	r18, r22
    7e10:	30 e0       	ldi	r19, 0x00	; 0
    7e12:	f9 01       	movw	r30, r18
    7e14:	ee 0f       	add	r30, r30
    7e16:	ff 1f       	adc	r31, r31
    7e18:	e2 0f       	add	r30, r18
    7e1a:	f3 1f       	adc	r31, r19
    7e1c:	e8 56       	subi	r30, 0x68	; 104
    7e1e:	f5 4f       	sbci	r31, 0xF5	; 245
    7e20:	51 83       	std	Z+1, r21	; 0x01
    7e22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    7e24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    7e26:	0e 94 1c 30 	call	0x6038	; 0x6038 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    7e2a:	80 91 b7 0b 	lds	r24, 0x0BB7
    7e2e:	f4 01       	movw	r30, r8
    7e30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    7e32:	91 e0       	ldi	r25, 0x01	; 1
    7e34:	98 0f       	add	r25, r24
    7e36:	90 93 b7 0b 	sts	0x0BB7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    7e3a:	87 31       	cpi	r24, 0x17	; 23
    7e3c:	38 f4       	brcc	.+14     	; 0x7e4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    7e40:	3b 81       	ldd	r19, Y+3	; 0x03
    7e42:	a5 01       	movw	r20, r10
    7e44:	68 2f       	mov	r22, r24
    7e46:	86 2d       	mov	r24, r6
    7e48:	0e 94 ad 30 	call	0x615a	; 0x615a <BlitSprite>
    7e4c:	ff ef       	ldi	r31, 0xFF	; 255
    7e4e:	af 1a       	sub	r10, r31
    7e50:	bf 0a       	sbc	r11, r31
    7e52:	73 94       	inc	r7
    7e54:	87 2d       	mov	r24, r7
    7e56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    7e58:	84 15       	cp	r24, r4
    7e5a:	18 f2       	brcs	.-122    	; 0x7de2 <ProcessSprites+0xba>
    7e5c:	4f ef       	ldi	r20, 0xFF	; 255
    7e5e:	e4 1a       	sub	r14, r20
    7e60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    7e62:	e5 14       	cp	r14, r5
    7e64:	08 f4       	brcc	.+2      	; 0x7e68 <ProcessSprites+0x140>
    7e66:	b0 cf       	rjmp	.-160    	; 0x7dc8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    7e68:	63 94       	inc	r6
    7e6a:	84 e0       	ldi	r24, 0x04	; 4
    7e6c:	c8 0e       	add	r12, r24
    7e6e:	d1 1c       	adc	r13, r1
    7e70:	9c e0       	ldi	r25, 0x0C	; 12
    7e72:	69 12       	cpse	r6, r25
    7e74:	7b cf       	rjmp	.-266    	; 0x7d6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    7e76:	0f 90       	pop	r0
    7e78:	0f 90       	pop	r0
    7e7a:	0f 90       	pop	r0
    7e7c:	df 91       	pop	r29
    7e7e:	cf 91       	pop	r28
    7e80:	1f 91       	pop	r17
    7e82:	0f 91       	pop	r16
    7e84:	ff 90       	pop	r15
    7e86:	ef 90       	pop	r14
    7e88:	df 90       	pop	r13
    7e8a:	cf 90       	pop	r12
    7e8c:	bf 90       	pop	r11
    7e8e:	af 90       	pop	r10
    7e90:	9f 90       	pop	r9
    7e92:	8f 90       	pop	r8
    7e94:	7f 90       	pop	r7
    7e96:	6f 90       	pop	r6
    7e98:	5f 90       	pop	r5
    7e9a:	4f 90       	pop	r4
    7e9c:	3f 90       	pop	r3
    7e9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    7ea0:	0c 94 80 3e 	jmp	0x7d00	; 0x7d00 <RestoreBackground>

	}
    7ea4:	0f 90       	pop	r0
    7ea6:	0f 90       	pop	r0
    7ea8:	0f 90       	pop	r0
    7eaa:	df 91       	pop	r29
    7eac:	cf 91       	pop	r28
    7eae:	1f 91       	pop	r17
    7eb0:	0f 91       	pop	r16
    7eb2:	ff 90       	pop	r15
    7eb4:	ef 90       	pop	r14
    7eb6:	df 90       	pop	r13
    7eb8:	cf 90       	pop	r12
    7eba:	bf 90       	pop	r11
    7ebc:	af 90       	pop	r10
    7ebe:	9f 90       	pop	r9
    7ec0:	8f 90       	pop	r8
    7ec2:	7f 90       	pop	r7
    7ec4:	6f 90       	pop	r6
    7ec6:	5f 90       	pop	r5
    7ec8:	4f 90       	pop	r4
    7eca:	3f 90       	pop	r3
    7ecc:	2f 90       	pop	r2
    7ece:	08 95       	ret

00007ed0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7ed0:	df 92       	push	r13
    7ed2:	ef 92       	push	r14
    7ed4:	ff 92       	push	r15
    7ed6:	0f 93       	push	r16
    7ed8:	1f 93       	push	r17
    7eda:	cf 93       	push	r28
    7edc:	df 93       	push	r29
    7ede:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7ee0:	fb 01       	movw	r30, r22
    7ee2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7ee4:	31 96       	adiw	r30, 0x01	; 1
    7ee6:	64 91       	lpm	r22, Z
    7ee8:	5f ef       	ldi	r21, 0xFF	; 255
    7eea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    7eec:	24 2f       	mov	r18, r20
    7eee:	21 70       	andi	r18, 0x01	; 1
    7ef0:	40 ff       	sbrs	r20, 0
    7ef2:	04 c0       	rjmp	.+8      	; 0x7efc <MapSprite2+0x2c>
			x=(mapWidth-1);
    7ef4:	95 2f       	mov	r25, r21
			dx=-1;
    7ef6:	ff 24       	eor	r15, r15
    7ef8:	fa 94       	dec	r15
    7efa:	03 c0       	rjmp	.+6      	; 0x7f02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    7efc:	ff 24       	eor	r15, r15
    7efe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7f00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7f02:	41 ff       	sbrs	r20, 1
    7f04:	05 c0       	rjmp	.+10     	; 0x7f10 <MapSprite2+0x40>
			y=(mapHeight-1);
    7f06:	7f ef       	ldi	r23, 0xFF	; 255
    7f08:	76 0f       	add	r23, r22
			dy=-1;
    7f0a:	ee 24       	eor	r14, r14
    7f0c:	ea 94       	dec	r14
    7f0e:	03 c0       	rjmp	.+6      	; 0x7f16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7f10:	ee 24       	eor	r14, r14
    7f12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7f14:	70 e0       	ldi	r23, 0x00	; 0
    7f16:	21 11       	cpse	r18, r1
    7f18:	01 c0       	rjmp	.+2      	; 0x7f1c <MapSprite2+0x4c>
    7f1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7f1c:	00 e0       	ldi	r16, 0x00	; 0
    7f1e:	06 17       	cp	r16, r22
    7f20:	09 f1       	breq	.+66     	; 0x7f64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7f22:	71 03       	mulsu	r23, r17
    7f24:	e0 01       	movw	r28, r0
    7f26:	11 24       	eor	r1, r1
    7f28:	d8 2e       	mov	r13, r24
    7f2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    7f2c:	8d 15       	cp	r24, r13
    7f2e:	b1 f0       	breq	.+44     	; 0x7f5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7f30:	9e 01       	movw	r18, r28
    7f32:	29 0f       	add	r18, r25
    7f34:	31 1d       	adc	r19, r1
    7f36:	97 fd       	sbrc	r25, 7
    7f38:	3a 95       	dec	r19
    7f3a:	2e 5f       	subi	r18, 0xFE	; 254
    7f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f3e:	fd 01       	movw	r30, r26
    7f40:	e2 0f       	add	r30, r18
    7f42:	f3 1f       	adc	r31, r19
    7f44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    7f46:	34 e0       	ldi	r19, 0x04	; 4
    7f48:	83 9f       	mul	r24, r19
    7f4a:	f0 01       	movw	r30, r0
    7f4c:	11 24       	eor	r1, r1
    7f4e:	e8 55       	subi	r30, 0x58	; 88
    7f50:	fb 4f       	sbci	r31, 0xFB	; 251
    7f52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    7f54:	8f 5f       	subi	r24, 0xFF	; 255
    7f56:	43 83       	std	Z+3, r20	; 0x03
    7f58:	9f 0d       	add	r25, r15
    7f5a:	e8 cf       	rjmp	.-48     	; 0x7f2c <MapSprite2+0x5c>
    7f5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7f5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7f60:	95 2f       	mov	r25, r21
    7f62:	dd cf       	rjmp	.-70     	; 0x7f1e <MapSprite2+0x4e>
	    }
	}
    7f64:	df 91       	pop	r29
    7f66:	cf 91       	pop	r28
    7f68:	1f 91       	pop	r17
    7f6a:	0f 91       	pop	r16
    7f6c:	ff 90       	pop	r15
    7f6e:	ef 90       	pop	r14
    7f70:	df 90       	pop	r13
    7f72:	08 95       	ret

00007f74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    7f74:	0f 93       	push	r16
    7f76:	cf 93       	push	r28
    7f78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    7f7a:	30 e0       	ldi	r19, 0x00	; 0
    7f7c:	30 17       	cp	r19, r16
    7f7e:	e1 f0       	breq	.+56     	; 0x7fb8 <MoveSprite+0x44>
    7f80:	b4 2f       	mov	r27, r20
    7f82:	a0 e2       	ldi	r26, 0x20	; 32
    7f84:	a4 0f       	add	r26, r20
    7f86:	78 2f       	mov	r23, r24
    7f88:	72 0f       	add	r23, r18
    7f8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    7f8c:	87 17       	cp	r24, r23
    7f8e:	81 f0       	breq	.+32     	; 0x7fb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    7f90:	c4 e0       	ldi	r28, 0x04	; 4
    7f92:	8c 9f       	mul	r24, r28
    7f94:	f0 01       	movw	r30, r0
    7f96:	11 24       	eor	r1, r1
    7f98:	e8 55       	subi	r30, 0x58	; 88
    7f9a:	fb 4f       	sbci	r31, 0xFB	; 251
    7f9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    7f9e:	41 3e       	cpi	r20, 0xE1	; 225
    7fa0:	51 05       	cpc	r21, r1
    7fa2:	14 f0       	brlt	.+4      	; 0x7fa8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    7fa4:	a1 83       	std	Z+1, r26	; 0x01
    7fa6:	01 c0       	rjmp	.+2      	; 0x7faa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    7fa8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    7faa:	8f 5f       	subi	r24, 0xFF	; 255
    7fac:	98 5f       	subi	r25, 0xF8	; 248
    7fae:	ee cf       	rjmp	.-36     	; 0x7f8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    7fb0:	3f 5f       	subi	r19, 0xFF	; 255
    7fb2:	48 5f       	subi	r20, 0xF8	; 248
    7fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7fb6:	e2 cf       	rjmp	.-60     	; 0x7f7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    7fb8:	cf 91       	pop	r28
    7fba:	0f 91       	pop	r16
    7fbc:	08 95       	ret

00007fbe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    7fbe:	08 95       	ret

00007fc0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    7fc0:	e8 ea       	ldi	r30, 0xA8	; 168
    7fc2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    7fc4:	80 ef       	ldi	r24, 0xF0	; 240
    7fc6:	80 83       	st	Z, r24
    7fc8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    7fca:	94 e0       	ldi	r25, 0x04	; 4
    7fcc:	e8 3d       	cpi	r30, 0xD8	; 216
    7fce:	f9 07       	cpc	r31, r25
    7fd0:	d1 f7       	brne	.-12     	; 0x7fc6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    7fd2:	08 95       	ret

00007fd4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    7fd4:	4f 92       	push	r4
    7fd6:	5f 92       	push	r5
    7fd8:	6f 92       	push	r6
    7fda:	7f 92       	push	r7
    7fdc:	8f 92       	push	r8
    7fde:	9f 92       	push	r9
    7fe0:	af 92       	push	r10
    7fe2:	bf 92       	push	r11
    7fe4:	cf 92       	push	r12
    7fe6:	df 92       	push	r13
    7fe8:	ef 92       	push	r14
    7fea:	ff 92       	push	r15
    7fec:	0f 93       	push	r16
    7fee:	1f 93       	push	r17
    7ff0:	cf 93       	push	r28
    7ff2:	df 93       	push	r29
    7ff4:	68 2e       	mov	r6, r24
    7ff6:	56 2e       	mov	r5, r22
    7ff8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    7ffa:	fa 01       	movw	r30, r20
    7ffc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    7ffe:	31 96       	adiw	r30, 0x01	; 1
    8000:	84 90       	lpm	r8, Z
    8002:	c7 2c       	mov	r12, r7
    8004:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8006:	00 e0       	ldi	r16, 0x00	; 0
    8008:	10 e0       	ldi	r17, 0x00	; 0
    800a:	91 2c       	mov	r9, r1
    800c:	98 14       	cp	r9, r8
    800e:	f1 f0       	breq	.+60     	; 0x804c <DrawMap2+0x78>
    8010:	c0 e0       	ldi	r28, 0x00	; 0
    8012:	d0 e0       	ldi	r29, 0x00	; 0
    8014:	58 01       	movw	r10, r16
    8016:	f2 e0       	ldi	r31, 0x02	; 2
    8018:	af 0e       	add	r10, r31
    801a:	b1 1c       	adc	r11, r1
    801c:	49 2c       	mov	r4, r9
    801e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8020:	c7 15       	cp	r28, r7
    8022:	80 f4       	brcc	.+32     	; 0x8044 <DrawMap2+0x70>
    8024:	95 01       	movw	r18, r10
    8026:	2c 0f       	add	r18, r28
    8028:	3d 1f       	adc	r19, r29
    802a:	f7 01       	movw	r30, r14
    802c:	e2 0f       	add	r30, r18
    802e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8030:	24 91       	lpm	r18, Z
    8032:	42 2f       	mov	r20, r18
    8034:	50 e0       	ldi	r21, 0x00	; 0
    8036:	64 2d       	mov	r22, r4
    8038:	8c 2f       	mov	r24, r28
    803a:	86 0d       	add	r24, r6
    803c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
    8040:	21 96       	adiw	r28, 0x01	; 1
    8042:	ee cf       	rjmp	.-36     	; 0x8020 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8044:	93 94       	inc	r9
    8046:	0c 0d       	add	r16, r12
    8048:	1d 1d       	adc	r17, r13
    804a:	e0 cf       	rjmp	.-64     	; 0x800c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    804c:	df 91       	pop	r29
    804e:	cf 91       	pop	r28
    8050:	1f 91       	pop	r17
    8052:	0f 91       	pop	r16
    8054:	ff 90       	pop	r15
    8056:	ef 90       	pop	r14
    8058:	df 90       	pop	r13
    805a:	cf 90       	pop	r12
    805c:	bf 90       	pop	r11
    805e:	af 90       	pop	r10
    8060:	9f 90       	pop	r9
    8062:	8f 90       	pop	r8
    8064:	7f 90       	pop	r7
    8066:	6f 90       	pop	r6
    8068:	5f 90       	pop	r5
    806a:	4f 90       	pop	r4
    806c:	08 95       	ret

0000806e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    806e:	df 92       	push	r13
    8070:	ef 92       	push	r14
    8072:	ff 92       	push	r15
    8074:	0f 93       	push	r16
    8076:	1f 93       	push	r17
    8078:	cf 93       	push	r28
    807a:	df 93       	push	r29
    807c:	f6 2e       	mov	r15, r22
    807e:	04 2f       	mov	r16, r20
    8080:	d2 2e       	mov	r13, r18
    8082:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8084:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8086:	8a e0       	ldi	r24, 0x0A	; 10
    8088:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    808a:	01 11       	cpse	r16, r1
    808c:	02 c0       	rjmp	.+4      	; 0x8092 <PrintByte+0x24>
    808e:	11 11       	cpse	r17, r1
    8090:	07 c0       	rjmp	.+14     	; 0x80a0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8092:	80 2f       	mov	r24, r16
    8094:	6e 2d       	mov	r22, r14
    8096:	0e 94 97 53 	call	0xa72e	; 0xa72e <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    809a:	40 e1       	ldi	r20, 0x10	; 16
    809c:	49 0f       	add	r20, r25
    809e:	05 c0       	rjmp	.+10     	; 0x80aa <PrintByte+0x3c>
		}else{
			if(zeropad){
    80a0:	dd 20       	and	r13, r13
    80a2:	11 f0       	breq	.+4      	; 0x80a8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    80a4:	40 e1       	ldi	r20, 0x10	; 16
    80a6:	01 c0       	rjmp	.+2      	; 0x80aa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    80a8:	40 e0       	ldi	r20, 0x00	; 0
    80aa:	6f 2d       	mov	r22, r15
    80ac:	8c 2f       	mov	r24, r28
    80ae:	0e 94 dd 32 	call	0x65ba	; 0x65ba <SetFont>
			}
		}
		val=val/10;
    80b2:	80 2f       	mov	r24, r16
    80b4:	6e 2d       	mov	r22, r14
    80b6:	0e 94 97 53 	call	0xa72e	; 0xa72e <__udivmodqi4>
    80ba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    80bc:	1f 5f       	subi	r17, 0xFF	; 255
    80be:	21 97       	sbiw	r28, 0x01	; 1
    80c0:	13 30       	cpi	r17, 0x03	; 3
    80c2:	19 f7       	brne	.-58     	; 0x808a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    80c4:	df 91       	pop	r29
    80c6:	cf 91       	pop	r28
    80c8:	1f 91       	pop	r17
    80ca:	0f 91       	pop	r16
    80cc:	ff 90       	pop	r15
    80ce:	ef 90       	pop	r14
    80d0:	df 90       	pop	r13
    80d2:	08 95       	ret

000080d4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    80d4:	0f 93       	push	r16
    80d6:	1f 93       	push	r17
    80d8:	cf 93       	push	r28
    80da:	df 93       	push	r29
    80dc:	06 2f       	mov	r16, r22
    80de:	c4 2f       	mov	r28, r20
    80e0:	d5 2f       	mov	r29, r21
    80e2:	18 2f       	mov	r17, r24
    80e4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    80e6:	fe 01       	movw	r30, r28
    80e8:	44 91       	lpm	r20, Z
		if(c!=0){
    80ea:	44 23       	and	r20, r20
    80ec:	49 f0       	breq	.+18     	; 0x8100 <Print+0x2c>
			c=((c&127)-32);			
    80ee:	4f 77       	andi	r20, 0x7F	; 127
    80f0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    80f2:	60 2f       	mov	r22, r16
    80f4:	8c 2f       	mov	r24, r28
    80f6:	81 0f       	add	r24, r17
    80f8:	0e 94 dd 32 	call	0x65ba	; 0x65ba <SetFont>
    80fc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    80fe:	f3 cf       	rjmp	.-26     	; 0x80e6 <Print+0x12>
	
}
    8100:	df 91       	pop	r29
    8102:	cf 91       	pop	r28
    8104:	1f 91       	pop	r17
    8106:	0f 91       	pop	r16
    8108:	08 95       	ret

0000810a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    810a:	40 52       	subi	r20, 0x20	; 32
    810c:	0c 94 dd 32 	jmp	0x65ba	; 0x65ba <SetFont>

00008110 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8110:	0f 93       	push	r16
    8112:	1f 93       	push	r17
    8114:	cf 93       	push	r28
    8116:	df 93       	push	r29
    8118:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    811a:	c0 e0       	ldi	r28, 0x00	; 0
    811c:	d0 e0       	ldi	r29, 0x00	; 0
    811e:	c0 17       	cp	r28, r16
    8120:	d1 07       	cpc	r29, r17
    8122:	44 f4       	brge	.+16     	; 0x8134 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8124:	0e 94 f7 32 	call	0x65ee	; 0x65ee <GetVsyncFlag>
    8128:	88 23       	and	r24, r24
    812a:	e1 f3       	breq	.-8      	; 0x8124 <WaitVsync+0x14>
		ClearVsyncFlag();		
    812c:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8130:	21 96       	adiw	r28, 0x01	; 1
    8132:	f5 cf       	rjmp	.-22     	; 0x811e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8134:	df 91       	pop	r29
    8136:	cf 91       	pop	r28
    8138:	1f 91       	pop	r17
    813a:	0f 91       	pop	r16
    813c:	08 95       	ret

0000813e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    813e:	80 93 b5 0b 	sts	0x0BB5, r24
	currFadeFrame=0;
    8142:	10 92 b9 0b 	sts	0x0BB9, r1
	fadeActive=true;
    8146:	81 e0       	ldi	r24, 0x01	; 1
    8148:	80 93 b8 0b 	sts	0x0BB8, r24
		
	if(blocking){
    814c:	66 23       	and	r22, r22
    814e:	21 f0       	breq	.+8      	; 0x8158 <doFade+0x1a>
		while(fadeActive==true);
    8150:	80 91 b8 0b 	lds	r24, 0x0BB8
    8154:	81 11       	cpse	r24, r1
    8156:	fc cf       	rjmp	.-8      	; 0x8150 <doFade+0x12>
    8158:	08 95       	ret

0000815a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    815a:	81 11       	cpse	r24, r1
    815c:	03 c0       	rjmp	.+6      	; 0x8164 <FadeIn+0xa>
		DDRC=0xff;
    815e:	8f ef       	ldi	r24, 0xFF	; 255
    8160:	87 b9       	out	0x07, r24	; 7
		return;
    8162:	08 95       	ret
	}
	fadeStep=1;
    8164:	91 e0       	ldi	r25, 0x01	; 1
    8166:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=1;
    816a:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    816e:	0c 94 9f 40 	jmp	0x813e	; 0x813e <doFade>

00008172 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8172:	81 11       	cpse	r24, r1
    8174:	02 c0       	rjmp	.+4      	; 0x817a <FadeOut+0x8>
		DDRC=0;
    8176:	17 b8       	out	0x07, r1	; 7
		return;
    8178:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    817a:	9c e0       	ldi	r25, 0x0C	; 12
    817c:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=-1;
    8180:	9f ef       	ldi	r25, 0xFF	; 255
    8182:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8186:	0c 94 9f 40 	jmp	0x813e	; 0x813e <doFade>

0000818a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    818a:	80 91 b8 0b 	lds	r24, 0x0BB8
    818e:	88 23       	and	r24, r24
    8190:	01 f1       	breq	.+64     	; 0x81d2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8192:	80 91 b9 0b 	lds	r24, 0x0BB9
    8196:	81 11       	cpse	r24, r1
    8198:	19 c0       	rjmp	.+50     	; 0x81cc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    819a:	80 91 b5 0b 	lds	r24, 0x0BB5
    819e:	80 93 b9 0b 	sts	0x0BB9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    81a2:	e0 91 ba 0b 	lds	r30, 0x0BBA
    81a6:	f0 e0       	ldi	r31, 0x00	; 0
    81a8:	e7 51       	subi	r30, 0x17	; 23
    81aa:	ff 4f       	sbci	r31, 0xFF	; 255
    81ac:	e4 91       	lpm	r30, Z
    81ae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    81b0:	90 91 b6 0b 	lds	r25, 0x0BB6
    81b4:	80 91 ba 0b 	lds	r24, 0x0BBA
    81b8:	89 0f       	add	r24, r25
    81ba:	80 93 ba 0b 	sts	0x0BBA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    81be:	88 23       	and	r24, r24
    81c0:	11 f0       	breq	.+4      	; 0x81c6 <ProcessFading+0x3c>
    81c2:	8d 30       	cpi	r24, 0x0D	; 13
    81c4:	31 f4       	brne	.+12     	; 0x81d2 <ProcessFading+0x48>
				fadeActive=false;
    81c6:	10 92 b8 0b 	sts	0x0BB8, r1
    81ca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    81cc:	81 50       	subi	r24, 0x01	; 1
    81ce:	80 93 b9 0b 	sts	0x0BB9, r24
    81d2:	08 95       	ret

000081d4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    81d4:	0e 94 c5 40 	call	0x818a	; 0x818a <ProcessFading>
		ProcessSprites();
    81d8:	0c 94 94 3e 	jmp	0x7d28	; 0x7d28 <ProcessSprites>

000081dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    81dc:	cf 93       	push	r28
    81de:	df 93       	push	r29
    81e0:	fc 01       	movw	r30, r24
    81e2:	eb 01       	movw	r28, r22
	*looped = 0;
    81e4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    81e6:	93 81       	ldd	r25, Z+3	; 0x03
    81e8:	9f 5f       	subi	r25, 0xFF	; 255
    81ea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    81ec:	22 81       	ldd	r18, Z+2	; 0x02
    81ee:	80 81       	ld	r24, Z
    81f0:	92 17       	cp	r25, r18
    81f2:	70 f0       	brcs	.+28     	; 0x8210 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    81f4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    81f6:	90 e0       	ldi	r25, 0x00	; 0
    81f8:	01 96       	adiw	r24, 0x01	; 1
    81fa:	21 81       	ldd	r18, Z+1	; 0x01
    81fc:	62 2f       	mov	r22, r18
    81fe:	70 e0       	ldi	r23, 0x00	; 0
    8200:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    8204:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8206:	81 11       	cpse	r24, r1
    8208:	02 c0       	rjmp	.+4      	; 0x820e <LBGetNextFrame+0x32>
    820a:	81 e0       	ldi	r24, 0x01	; 1
    820c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    820e:	80 81       	ld	r24, Z
    8210:	e8 0f       	add	r30, r24
    8212:	f1 1d       	adc	r31, r1
    8214:	e8 0f       	add	r30, r24
    8216:	f1 1d       	adc	r31, r1
    8218:	84 81       	ldd	r24, Z+4	; 0x04
    821a:	95 81       	ldd	r25, Z+5	; 0x05
}
    821c:	df 91       	pop	r29
    821e:	cf 91       	pop	r28
    8220:	08 95       	ret

00008222 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8222:	0f 93       	push	r16
    8224:	1f 93       	push	r17
    8226:	cf 93       	push	r28
    8228:	df 93       	push	r29
    822a:	8c 01       	movw	r16, r24
    822c:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    822e:	80 e0       	ldi	r24, 0x00	; 0
    8230:	0e 94 01 33 	call	0x6602	; 0x6602 <ReadJoypad>
    8234:	f8 01       	movw	r30, r16
    8236:	95 83       	std	Z+5, r25	; 0x05
    8238:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    823a:	20 91 34 0b 	lds	r18, 0x0B34
    823e:	30 91 35 0b 	lds	r19, 0x0B35
    8242:	a9 01       	movw	r20, r18
    8244:	40 95       	com	r20
    8246:	50 95       	com	r21
    8248:	48 23       	and	r20, r24
    824a:	59 23       	and	r21, r25
    824c:	51 83       	std	Z+1, r21	; 0x01
    824e:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8250:	ac 01       	movw	r20, r24
    8252:	40 95       	com	r20
    8254:	50 95       	com	r21
    8256:	24 23       	and	r18, r20
    8258:	35 23       	and	r19, r21
    825a:	33 83       	std	Z+3, r19	; 0x03
    825c:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    825e:	90 93 35 0b 	sts	0x0B35, r25
    8262:	80 93 34 0b 	sts	0x0B34, r24
	p2->held = ReadJoypad(1);
    8266:	81 e0       	ldi	r24, 0x01	; 1
    8268:	0e 94 01 33 	call	0x6602	; 0x6602 <ReadJoypad>
    826c:	9d 83       	std	Y+5, r25	; 0x05
    826e:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8270:	20 91 32 0b 	lds	r18, 0x0B32
    8274:	30 91 33 0b 	lds	r19, 0x0B33
    8278:	a9 01       	movw	r20, r18
    827a:	40 95       	com	r20
    827c:	50 95       	com	r21
    827e:	48 23       	and	r20, r24
    8280:	59 23       	and	r21, r25
    8282:	59 83       	std	Y+1, r21	; 0x01
    8284:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8286:	ac 01       	movw	r20, r24
    8288:	40 95       	com	r20
    828a:	50 95       	com	r21
    828c:	24 23       	and	r18, r20
    828e:	35 23       	and	r19, r21
    8290:	3b 83       	std	Y+3, r19	; 0x03
    8292:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    8294:	90 93 33 0b 	sts	0x0B33, r25
    8298:	80 93 32 0b 	sts	0x0B32, r24
}
    829c:	df 91       	pop	r29
    829e:	cf 91       	pop	r28
    82a0:	1f 91       	pop	r17
    82a2:	0f 91       	pop	r16
    82a4:	08 95       	ret

000082a6 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    82a6:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    82a8:	fb 01       	movw	r30, r22
    82aa:	2e 2f       	mov	r18, r30
    82ac:	23 1b       	sub	r18, r19
    82ae:	24 17       	cp	r18, r20
    82b0:	28 f4       	brcc	.+10     	; 0x82bc <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    82b2:	21 91       	ld	r18, Z+
    82b4:	dc 01       	movw	r26, r24
    82b6:	2d 93       	st	X+, r18
    82b8:	cd 01       	movw	r24, r26
    82ba:	f7 cf       	rjmp	.-18     	; 0x82aa <LBCopyChars+0x4>
	}
}
    82bc:	08 95       	ret

000082be <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    82be:	af 92       	push	r10
    82c0:	bf 92       	push	r11
    82c2:	cf 92       	push	r12
    82c4:	df 92       	push	r13
    82c6:	ef 92       	push	r14
    82c8:	ff 92       	push	r15
    82ca:	0f 93       	push	r16
    82cc:	1f 93       	push	r17
    82ce:	cf 93       	push	r28
    82d0:	df 93       	push	r29
    82d2:	1f 92       	push	r1
    82d4:	cd b7       	in	r28, 0x3d	; 61
    82d6:	de b7       	in	r29, 0x3e	; 62
    82d8:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    82da:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    82dc:	c6 2e       	mov	r12, r22
    82de:	d1 2c       	mov	r13, r1
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	5c 01       	movw	r10, r24
    82e4:	a4 1a       	sub	r10, r20
    82e6:	b5 0a       	sbc	r11, r21
    82e8:	80 2f       	mov	r24, r16
    82ea:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    82ec:	82 17       	cp	r24, r18
    82ee:	60 f4       	brcc	.+24     	; 0x8308 <LBPrintStr+0x4a>
    82f0:	c5 01       	movw	r24, r10
    82f2:	80 0f       	add	r24, r16
    82f4:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    82f6:	f8 01       	movw	r30, r16
    82f8:	41 91       	ld	r20, Z+
    82fa:	8f 01       	movw	r16, r30
    82fc:	b6 01       	movw	r22, r12
    82fe:	29 83       	std	Y+1, r18	; 0x01
    8300:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
    8304:	29 81       	ldd	r18, Y+1	; 0x01
    8306:	f0 cf       	rjmp	.-32     	; 0x82e8 <LBPrintStr+0x2a>
	}
}
    8308:	0f 90       	pop	r0
    830a:	df 91       	pop	r29
    830c:	cf 91       	pop	r28
    830e:	1f 91       	pop	r17
    8310:	0f 91       	pop	r16
    8312:	ff 90       	pop	r15
    8314:	ef 90       	pop	r14
    8316:	df 90       	pop	r13
    8318:	cf 90       	pop	r12
    831a:	bf 90       	pop	r11
    831c:	af 90       	pop	r10
    831e:	08 95       	ret

00008320 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8320:	af 92       	push	r10
    8322:	cf 92       	push	r12
    8324:	ef 92       	push	r14
    8326:	ff 92       	push	r15
    8328:	0f 93       	push	r16
    832a:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    832c:	70 e0       	ldi	r23, 0x00	; 0
    832e:	f1 2c       	mov	r15, r1
    8330:	fb 01       	movw	r30, r22
    8332:	e2 0f       	add	r30, r18
    8334:	f1 1d       	adc	r31, r1
    8336:	ee 15       	cp	r30, r14
    8338:	ff 05       	cpc	r31, r15
    833a:	a4 f0       	brlt	.+40     	; 0x8364 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    833c:	ea 0c       	add	r14, r10
    833e:	f1 1c       	adc	r15, r1
    8340:	e6 16       	cp	r14, r22
    8342:	f7 06       	cpc	r15, r23
    8344:	7c f0       	brlt	.+30     	; 0x8364 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8346:	28 2f       	mov	r18, r24
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	10 e0       	ldi	r17, 0x00	; 0
    834c:	c9 01       	movw	r24, r18
    834e:	84 0f       	add	r24, r20
    8350:	91 1d       	adc	r25, r1
    8352:	80 17       	cp	r24, r16
    8354:	91 07       	cpc	r25, r17
    8356:	34 f0       	brlt	.+12     	; 0x8364 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8358:	0c 0d       	add	r16, r12
    835a:	11 1d       	adc	r17, r1
    835c:	81 e0       	ldi	r24, 0x01	; 1
    835e:	02 17       	cp	r16, r18
    8360:	13 07       	cpc	r17, r19
    8362:	0c f4       	brge	.+2      	; 0x8366 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8364:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8366:	1f 91       	pop	r17
    8368:	0f 91       	pop	r16
    836a:	ff 90       	pop	r15
    836c:	ef 90       	pop	r14
    836e:	cf 90       	pop	r12
    8370:	af 90       	pop	r10
    8372:	08 95       	ret

00008374 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8374:	2f 92       	push	r2
    8376:	3f 92       	push	r3
    8378:	4f 92       	push	r4
    837a:	5f 92       	push	r5
    837c:	6f 92       	push	r6
    837e:	7f 92       	push	r7
    8380:	8f 92       	push	r8
    8382:	9f 92       	push	r9
    8384:	af 92       	push	r10
    8386:	bf 92       	push	r11
    8388:	cf 92       	push	r12
    838a:	df 92       	push	r13
    838c:	ef 92       	push	r14
    838e:	ff 92       	push	r15
    8390:	0f 93       	push	r16
    8392:	1f 93       	push	r17
    8394:	cf 93       	push	r28
    8396:	df 93       	push	r29
    8398:	00 d0       	rcall	.+0      	; 0x839a <LBLineIntersect+0x26>
    839a:	00 d0       	rcall	.+0      	; 0x839c <LBLineIntersect+0x28>
    839c:	cd b7       	in	r28, 0x3d	; 61
    839e:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    83a0:	f1 2c       	mov	r15, r1
    83a2:	8a 2c       	mov	r8, r10
    83a4:	91 2c       	mov	r9, r1
    83a6:	8e 18       	sub	r8, r14
    83a8:	9f 08       	sbc	r9, r15
    83aa:	a8 2e       	mov	r10, r24
    83ac:	b1 2c       	mov	r11, r1
    83ae:	24 2e       	mov	r2, r20
    83b0:	31 2c       	mov	r3, r1
    83b2:	2a 18       	sub	r2, r10
    83b4:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    83b6:	10 e0       	ldi	r17, 0x00	; 0
    83b8:	d1 2c       	mov	r13, r1
    83ba:	c0 1a       	sub	r12, r16
    83bc:	d1 0a       	sbc	r13, r17
    83be:	46 2f       	mov	r20, r22
    83c0:	50 e0       	ldi	r21, 0x00	; 0
    83c2:	5c 83       	std	Y+4, r21	; 0x04
    83c4:	4b 83       	std	Y+3, r20	; 0x03
    83c6:	82 2f       	mov	r24, r18
    83c8:	90 e0       	ldi	r25, 0x00	; 0
    83ca:	9a 83       	std	Y+2, r25	; 0x02
    83cc:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    83ce:	82 9c       	mul	r8, r2
    83d0:	90 01       	movw	r18, r0
    83d2:	83 9c       	mul	r8, r3
    83d4:	30 0d       	add	r19, r0
    83d6:	92 9c       	mul	r9, r2
    83d8:	30 0d       	add	r19, r0
    83da:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    83dc:	ca 01       	movw	r24, r20
    83de:	e9 81       	ldd	r30, Y+1	; 0x01
    83e0:	fa 81       	ldd	r31, Y+2	; 0x02
    83e2:	8e 1b       	sub	r24, r30
    83e4:	9f 0b       	sbc	r25, r31
    83e6:	c8 9e       	mul	r12, r24
    83e8:	b0 01       	movw	r22, r0
    83ea:	c9 9e       	mul	r12, r25
    83ec:	70 0d       	add	r23, r0
    83ee:	d8 9e       	mul	r13, r24
    83f0:	70 0d       	add	r23, r0
    83f2:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    83f4:	62 0f       	add	r22, r18
    83f6:	73 1f       	adc	r23, r19
    83f8:	88 27       	eor	r24, r24
    83fa:	77 fd       	sbrc	r23, 7
    83fc:	80 95       	com	r24
    83fe:	98 2f       	mov	r25, r24
    8400:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    8404:	2b 01       	movw	r4, r22
    8406:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8408:	20 e0       	ldi	r18, 0x00	; 0
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	a9 01       	movw	r20, r18
    840e:	0e 94 36 54 	call	0xa86c	; 0xa86c <__cmpsf2>
    8412:	88 23       	and	r24, r24
    8414:	09 f4       	brne	.+2      	; 0x8418 <LBLineIntersect+0xa4>
    8416:	6c c0       	rjmp	.+216    	; 0x84f0 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8418:	4b 81       	ldd	r20, Y+3	; 0x03
    841a:	5c 81       	ldd	r21, Y+4	; 0x04
    841c:	4e 19       	sub	r20, r14
    841e:	5f 09       	sbc	r21, r15
    8420:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8422:	0a 19       	sub	r16, r10
    8424:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8426:	c4 9e       	mul	r12, r20
    8428:	c0 01       	movw	r24, r0
    842a:	c5 9e       	mul	r12, r21
    842c:	90 0d       	add	r25, r0
    842e:	d4 9e       	mul	r13, r20
    8430:	90 0d       	add	r25, r0
    8432:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8434:	80 9e       	mul	r8, r16
    8436:	b0 01       	movw	r22, r0
    8438:	81 9e       	mul	r8, r17
    843a:	70 0d       	add	r23, r0
    843c:	90 9e       	mul	r9, r16
    843e:	70 0d       	add	r23, r0
    8440:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8442:	68 0f       	add	r22, r24
    8444:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8446:	88 27       	eor	r24, r24
    8448:	77 fd       	sbrc	r23, 7
    844a:	80 95       	com	r24
    844c:	98 2f       	mov	r25, r24
    844e:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8452:	a3 01       	movw	r20, r6
    8454:	92 01       	movw	r18, r4
    8456:	0e 94 3a 54 	call	0xa874	; 0xa874 <__divsf3>
    845a:	4b 01       	movw	r8, r22
    845c:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    845e:	20 e0       	ldi	r18, 0x00	; 0
    8460:	30 e0       	ldi	r19, 0x00	; 0
    8462:	a9 01       	movw	r20, r18
    8464:	0e 94 36 54 	call	0xa86c	; 0xa86c <__cmpsf2>
    8468:	87 fd       	sbrc	r24, 7
    846a:	42 c0       	rjmp	.+132    	; 0x84f0 <LBLineIntersect+0x17c>
    846c:	20 e0       	ldi	r18, 0x00	; 0
    846e:	30 e0       	ldi	r19, 0x00	; 0
    8470:	40 e8       	ldi	r20, 0x80	; 128
    8472:	5f e3       	ldi	r21, 0x3F	; 63
    8474:	c5 01       	movw	r24, r10
    8476:	b4 01       	movw	r22, r8
    8478:	0e 94 80 55 	call	0xab00	; 0xab00 <__gesf2>
    847c:	18 16       	cp	r1, r24
    847e:	c4 f1       	brlt	.+112    	; 0x84f0 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8480:	2e 9c       	mul	r2, r14
    8482:	b0 01       	movw	r22, r0
    8484:	2f 9c       	mul	r2, r15
    8486:	70 0d       	add	r23, r0
    8488:	3e 9c       	mul	r3, r14
    848a:	70 0d       	add	r23, r0
    848c:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    848e:	29 81       	ldd	r18, Y+1	; 0x01
    8490:	3a 81       	ldd	r19, Y+2	; 0x02
    8492:	8b 81       	ldd	r24, Y+3	; 0x03
    8494:	9c 81       	ldd	r25, Y+4	; 0x04
    8496:	28 1b       	sub	r18, r24
    8498:	39 0b       	sbc	r19, r25
    849a:	20 9f       	mul	r18, r16
    849c:	c0 01       	movw	r24, r0
    849e:	21 9f       	mul	r18, r17
    84a0:	90 0d       	add	r25, r0
    84a2:	30 9f       	mul	r19, r16
    84a4:	90 0d       	add	r25, r0
    84a6:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    84a8:	68 0f       	add	r22, r24
    84aa:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    84ac:	88 27       	eor	r24, r24
    84ae:	77 fd       	sbrc	r23, 7
    84b0:	80 95       	com	r24
    84b2:	98 2f       	mov	r25, r24
    84b4:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    84b8:	a3 01       	movw	r20, r6
    84ba:	92 01       	movw	r18, r4
    84bc:	0e 94 3a 54 	call	0xa874	; 0xa874 <__divsf3>
    84c0:	6b 01       	movw	r12, r22
    84c2:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    84c4:	20 e0       	ldi	r18, 0x00	; 0
    84c6:	30 e0       	ldi	r19, 0x00	; 0
    84c8:	a9 01       	movw	r20, r18
    84ca:	0e 94 36 54 	call	0xa86c	; 0xa86c <__cmpsf2>
    84ce:	87 fd       	sbrc	r24, 7
    84d0:	0f c0       	rjmp	.+30     	; 0x84f0 <LBLineIntersect+0x17c>
    84d2:	11 e0       	ldi	r17, 0x01	; 1
    84d4:	20 e0       	ldi	r18, 0x00	; 0
    84d6:	30 e0       	ldi	r19, 0x00	; 0
    84d8:	40 e8       	ldi	r20, 0x80	; 128
    84da:	5f e3       	ldi	r21, 0x3F	; 63
    84dc:	c7 01       	movw	r24, r14
    84de:	b6 01       	movw	r22, r12
    84e0:	0e 94 80 55 	call	0xab00	; 0xab00 <__gesf2>
    84e4:	18 16       	cp	r1, r24
    84e6:	0c f0       	brlt	.+2      	; 0x84ea <LBLineIntersect+0x176>
    84e8:	10 e0       	ldi	r17, 0x00	; 0
    84ea:	81 e0       	ldi	r24, 0x01	; 1
    84ec:	81 27       	eor	r24, r17
    84ee:	01 c0       	rjmp	.+2      	; 0x84f2 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    84f0:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    84f2:	0f 90       	pop	r0
    84f4:	0f 90       	pop	r0
    84f6:	0f 90       	pop	r0
    84f8:	0f 90       	pop	r0
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	1f 91       	pop	r17
    8500:	0f 91       	pop	r16
    8502:	ff 90       	pop	r15
    8504:	ef 90       	pop	r14
    8506:	df 90       	pop	r13
    8508:	cf 90       	pop	r12
    850a:	bf 90       	pop	r11
    850c:	af 90       	pop	r10
    850e:	9f 90       	pop	r9
    8510:	8f 90       	pop	r8
    8512:	7f 90       	pop	r7
    8514:	6f 90       	pop	r6
    8516:	5f 90       	pop	r5
    8518:	4f 90       	pop	r4
    851a:	3f 90       	pop	r3
    851c:	2f 90       	pop	r2
    851e:	08 95       	ret

00008520 <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8520:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8522:	90 91 31 0b 	lds	r25, 0x0B31
    8526:	2f ef       	ldi	r18, 0xFF	; 255
    8528:	3f e7       	ldi	r19, 0x7F	; 127
    852a:	09 2e       	mov	r0, r25
    852c:	02 c0       	rjmp	.+4      	; 0x8532 <LBRandom+0x12>
    852e:	35 95       	asr	r19
    8530:	27 95       	ror	r18
    8532:	0a 94       	dec	r0
    8534:	e2 f7       	brpl	.-8      	; 0x852e <LBRandom+0xe>
	int delta = to - from;
    8536:	6e 1b       	sub	r22, r30
    8538:	7f 0b       	sbc	r23, r31

	shift_count++;
    853a:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    853c:	90 31       	cpi	r25, 0x10	; 16
    853e:	18 f4       	brcc	.+6      	; 0x8546 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8540:	90 93 31 0b 	sts	0x0B31, r25
    8544:	02 c0       	rjmp	.+4      	; 0x854a <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    8546:	10 92 31 0b 	sts	0x0B31, r1

	return from + ((delta + shifted) % delta);
    854a:	cb 01       	movw	r24, r22
    854c:	82 0f       	add	r24, r18
    854e:	93 1f       	adc	r25, r19
    8550:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
}
    8554:	8e 0f       	add	r24, r30
    8556:	9f 1f       	adc	r25, r31
    8558:	08 95       	ret

0000855a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    855a:	cf 93       	push	r28
    855c:	df 93       	push	r29
    855e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8560:	c0 e0       	ldi	r28, 0x00	; 0
    8562:	cd 17       	cp	r28, r29
    8564:	31 f0       	breq	.+12     	; 0x8572 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8566:	8f ef       	ldi	r24, 0xFF	; 255
    8568:	9f ef       	ldi	r25, 0xFF	; 255
    856a:	0e 94 0d 33 	call	0x661a	; 0x661a <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    856e:	cf 5f       	subi	r28, 0xFF	; 255
    8570:	f8 cf       	rjmp	.-16     	; 0x8562 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8572:	df 91       	pop	r29
    8574:	cf 91       	pop	r28
    8576:	08 95       	ret

00008578 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    8578:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    857a:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    857c:	14 86       	std	Z+12, r1	; 0x0c
    857e:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    8580:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    8582:	73 e0       	ldi	r23, 0x03	; 3
    8584:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8586:	65 e0       	ldi	r22, 0x05	; 5
    8588:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    858a:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    858c:	47 ef       	ldi	r20, 0xF7	; 247
    858e:	50 e2       	ldi	r21, 0x20	; 32
    8590:	56 83       	std	Z+6, r21	; 0x06
    8592:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8594:	24 ef       	ldi	r18, 0xF4	; 244
    8596:	30 e2       	ldi	r19, 0x20	; 32
    8598:	30 87       	std	Z+8, r19	; 0x08
    859a:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    859c:	81 ef       	ldi	r24, 0xF1	; 241
    859e:	90 e2       	ldi	r25, 0x20	; 32
    85a0:	92 87       	std	Z+10, r25	; 0x0a
    85a2:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    85a4:	10 8e       	std	Z+24, r1	; 0x18
    85a6:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    85a8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    85aa:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    85ac:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    85ae:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    85b0:	52 8b       	std	Z+18, r21	; 0x12
    85b2:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    85b4:	34 8b       	std	Z+20, r19	; 0x14
    85b6:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    85b8:	96 8b       	std	Z+22, r25	; 0x16
    85ba:	85 8b       	std	Z+21, r24	; 0x15
    85bc:	08 95       	ret

000085be <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    85be:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    85c0:	84 e6       	ldi	r24, 0x64	; 100
    85c2:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    85c4:	10 82       	st	Z, r1
	s->active = 0;
    85c6:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    85c8:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    85ca:	84 e0       	ldi	r24, 0x04	; 4
    85cc:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    85ce:	66 23       	and	r22, r22
    85d0:	11 f0       	breq	.+4      	; 0x85d6 <init_shot_state+0x18>
    85d2:	85 e0       	ldi	r24, 0x05	; 5
    85d4:	01 c0       	rjmp	.+2      	; 0x85d8 <init_shot_state+0x1a>
    85d6:	81 e0       	ldi	r24, 0x01	; 1
    85d8:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    85da:	80 e0       	ldi	r24, 0x00	; 0
    85dc:	90 e0       	ldi	r25, 0x00	; 0
    85de:	a0 e7       	ldi	r26, 0x70	; 112
    85e0:	b3 e4       	ldi	r27, 0x43	; 67
    85e2:	82 83       	std	Z+2, r24	; 0x02
    85e4:	93 83       	std	Z+3, r25	; 0x03
    85e6:	a4 83       	std	Z+4, r26	; 0x04
    85e8:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    85ea:	16 82       	std	Z+6, r1	; 0x06
    85ec:	17 82       	std	Z+7, r1	; 0x07
    85ee:	10 86       	std	Z+8, r1	; 0x08
    85f0:	11 86       	std	Z+9, r1	; 0x09
    85f2:	08 95       	ret

000085f4 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    85f4:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    85f6:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    85f8:	82 e0       	ldi	r24, 0x02	; 2
    85fa:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    85fc:	85 e0       	ldi	r24, 0x05	; 5
    85fe:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    8600:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    8602:	66 23       	and	r22, r22
    8604:	19 f0       	breq	.+6      	; 0x860c <set_shot_animations+0x18>
    8606:	84 e9       	ldi	r24, 0x94	; 148
    8608:	90 e2       	ldi	r25, 0x20	; 32
    860a:	02 c0       	rjmp	.+4      	; 0x8610 <set_shot_animations+0x1c>
    860c:	87 e9       	ldi	r24, 0x97	; 151
    860e:	90 e2       	ldi	r25, 0x20	; 32
    8610:	93 8b       	std	Z+19, r25	; 0x13
    8612:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    8614:	66 23       	and	r22, r22
    8616:	19 f0       	breq	.+6      	; 0x861e <set_shot_animations+0x2a>
    8618:	81 e9       	ldi	r24, 0x91	; 145
    861a:	90 e2       	ldi	r25, 0x20	; 32
    861c:	02 c0       	rjmp	.+4      	; 0x8622 <set_shot_animations+0x2e>
    861e:	87 e9       	ldi	r24, 0x97	; 151
    8620:	90 e2       	ldi	r25, 0x20	; 32
    8622:	95 8b       	std	Z+21, r25	; 0x15
    8624:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    8626:	82 e0       	ldi	r24, 0x02	; 2
    8628:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    862a:	85 e0       	ldi	r24, 0x05	; 5
    862c:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    862e:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    8630:	66 23       	and	r22, r22
    8632:	19 f0       	breq	.+6      	; 0x863a <set_shot_animations+0x46>
    8634:	8e e8       	ldi	r24, 0x8E	; 142
    8636:	90 e2       	ldi	r25, 0x20	; 32
    8638:	02 c0       	rjmp	.+4      	; 0x863e <set_shot_animations+0x4a>
    863a:	87 e9       	ldi	r24, 0x97	; 151
    863c:	90 e2       	ldi	r25, 0x20	; 32
    863e:	95 8f       	std	Z+29, r25	; 0x1d
    8640:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    8642:	66 23       	and	r22, r22
    8644:	19 f0       	breq	.+6      	; 0x864c <set_shot_animations+0x58>
    8646:	8b e8       	ldi	r24, 0x8B	; 139
    8648:	90 e2       	ldi	r25, 0x20	; 32
    864a:	02 c0       	rjmp	.+4      	; 0x8650 <set_shot_animations+0x5c>
    864c:	87 e9       	ldi	r24, 0x97	; 151
    864e:	90 e2       	ldi	r25, 0x20	; 32
    8650:	97 8f       	std	Z+31, r25	; 0x1f
    8652:	86 8f       	std	Z+30, r24	; 0x1e
    8654:	08 95       	ret

00008656 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    8656:	0f 93       	push	r16
    8658:	1f 93       	push	r17
    865a:	cf 93       	push	r28
    865c:	df 93       	push	r29
    865e:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    8660:	8a e5       	ldi	r24, 0x5A	; 90
    8662:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    8664:	88 e7       	ldi	r24, 0x78	; 120
    8666:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    8668:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    866a:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    866c:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    866e:	18 82       	st	Y, r1
	p->shared.speed = 0;
    8670:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    8672:	82 e3       	ldi	r24, 0x32	; 50
    8674:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    8676:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    8678:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    867a:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    867c:	fe 01       	movw	r30, r28
    867e:	e2 5a       	subi	r30, 0xA2	; 162
    8680:	ff 4f       	sbci	r31, 0xFF	; 255
    8682:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    8684:	31 96       	adiw	r30, 0x01	; 1
    8686:	91 e0       	ldi	r25, 0x01	; 1
    8688:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    868a:	31 96       	adiw	r30, 0x01	; 1
    868c:	85 e0       	ldi	r24, 0x05	; 5
    868e:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    8690:	31 96       	adiw	r30, 0x01	; 1
    8692:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    8694:	31 96       	adiw	r30, 0x01	; 1
    8696:	71 83       	std	Z+1, r23	; 0x01
    8698:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    869a:	36 96       	adiw	r30, 0x06	; 6
    869c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    869e:	31 96       	adiw	r30, 0x01	; 1
    86a0:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    86a2:	31 96       	adiw	r30, 0x01	; 1
    86a4:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    86a6:	31 96       	adiw	r30, 0x01	; 1
    86a8:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    86aa:	31 96       	adiw	r30, 0x01	; 1
    86ac:	51 83       	std	Z+1, r21	; 0x01
    86ae:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    86b0:	36 96       	adiw	r30, 0x06	; 6
    86b2:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    86b4:	31 96       	adiw	r30, 0x01	; 1
    86b6:	93 e0       	ldi	r25, 0x03	; 3
    86b8:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    86ba:	31 96       	adiw	r30, 0x01	; 1
    86bc:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    86be:	31 96       	adiw	r30, 0x01	; 1
    86c0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    86c2:	31 96       	adiw	r30, 0x01	; 1
    86c4:	86 ea       	ldi	r24, 0xA6	; 166
    86c6:	90 e2       	ldi	r25, 0x20	; 32
    86c8:	91 83       	std	Z+1, r25	; 0x01
    86ca:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    86cc:	32 96       	adiw	r30, 0x02	; 2
    86ce:	80 ea       	ldi	r24, 0xA0	; 160
    86d0:	90 e2       	ldi	r25, 0x20	; 32
    86d2:	91 83       	std	Z+1, r25	; 0x01
    86d4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    86d6:	32 96       	adiw	r30, 0x02	; 2
    86d8:	8a e9       	ldi	r24, 0x9A	; 154
    86da:	90 e2       	ldi	r25, 0x20	; 32
    86dc:	91 83       	std	Z+1, r25	; 0x01
    86de:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    86e0:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    86e2:	8e 01       	movw	r16, r28
    86e4:	06 5e       	subi	r16, 0xE6	; 230
    86e6:	1f 4f       	sbci	r17, 0xFF	; 255
    86e8:	60 e0       	ldi	r22, 0x00	; 0
    86ea:	c8 01       	movw	r24, r16
    86ec:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    86f0:	60 e0       	ldi	r22, 0x00	; 0
    86f2:	c8 01       	movw	r24, r16
    86f4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    86f8:	ec 96       	adiw	r28, 0x3c	; 60
    86fa:	60 e0       	ldi	r22, 0x00	; 0
    86fc:	ce 01       	movw	r24, r28
    86fe:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8702:	60 e0       	ldi	r22, 0x00	; 0
    8704:	ce 01       	movw	r24, r28
	}
}
    8706:	df 91       	pop	r29
    8708:	cf 91       	pop	r28
    870a:	1f 91       	pop	r17
    870c:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    870e:	0c 94 fa 42 	jmp	0x85f4	; 0x85f4 <set_shot_animations>

00008712 <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    8712:	cf 93       	push	r28
    8714:	df 93       	push	r29
    8716:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    8718:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    871a:	60 e0       	ldi	r22, 0x00	; 0
    871c:	4a 96       	adiw	r24, 0x1a	; 26
    871e:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
    8722:	60 e0       	ldi	r22, 0x00	; 0
    8724:	ce 01       	movw	r24, r28
    8726:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    8728:	df 91       	pop	r29
    872a:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    872c:	0c 94 df 42 	jmp	0x85be	; 0x85be <init_shot_state>

00008730 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    8730:	e1 ec       	ldi	r30, 0xC1	; 193
    8732:	fb e0       	ldi	r31, 0x0B	; 11
    8734:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    8736:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    8738:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    873a:	4a ec       	ldi	r20, 0xCA	; 202
    873c:	50 e2       	ldi	r21, 0x20	; 32
    873e:	66 ed       	ldi	r22, 0xD6	; 214
    8740:	70 e2       	ldi	r23, 0x20	; 32
    8742:	8e ed       	ldi	r24, 0xDE	; 222
    8744:	9b e0       	ldi	r25, 0x0B	; 11
    8746:	0e 94 2b 43 	call	0x8656	; 0x8656 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    874a:	42 eb       	ldi	r20, 0xB2	; 178
    874c:	50 e2       	ldi	r21, 0x20	; 32
    874e:	6e eb       	ldi	r22, 0xBE	; 190
    8750:	70 e2       	ldi	r23, 0x20	; 32
    8752:	8f e4       	ldi	r24, 0x4F	; 79
    8754:	9f e0       	ldi	r25, 0x0F	; 15
    8756:	0c 94 2b 43 	jmp	0x8656	; 0x8656 <init_player>

0000875a <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    875a:	cf 93       	push	r28
    875c:	df 93       	push	r29
    875e:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    8760:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    8762:	69 89       	ldd	r22, Y+17	; 0x11
    8764:	70 e0       	ldi	r23, 0x00	; 0
    8766:	80 e0       	ldi	r24, 0x00	; 0
    8768:	90 e0       	ldi	r25, 0x00	; 0
    876a:	0e 94 ce 54 	call	0xa99c	; 0xa99c <__floatunsisf>
    876e:	6a 83       	std	Y+2, r22	; 0x02
    8770:	7b 83       	std	Y+3, r23	; 0x03
    8772:	8c 83       	std	Y+4, r24	; 0x04
    8774:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    8776:	6a 89       	ldd	r22, Y+18	; 0x12
    8778:	70 e0       	ldi	r23, 0x00	; 0
    877a:	80 e0       	ldi	r24, 0x00	; 0
    877c:	90 e0       	ldi	r25, 0x00	; 0
    877e:	0e 94 ce 54 	call	0xa99c	; 0xa99c <__floatunsisf>
    8782:	6e 83       	std	Y+6, r22	; 0x06
    8784:	7f 83       	std	Y+7, r23	; 0x07
    8786:	88 87       	std	Y+8, r24	; 0x08
    8788:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    878a:	18 82       	st	Y, r1
	player->shared.speed = 0;
    878c:	19 82       	std	Y+1, r1	; 0x01
	
}
    878e:	df 91       	pop	r29
    8790:	cf 91       	pop	r28
    8792:	08 95       	ret

00008794 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    8794:	cf 93       	push	r28
    8796:	df 93       	push	r29
    8798:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    879a:	bc 01       	movw	r22, r24
    879c:	88 81       	ld	r24, Y
    879e:	99 81       	ldd	r25, Y+1	; 0x01
    87a0:	0e 94 1e 34 	call	0x683c	; 0x683c <EepromReadBlock>
	if (status == 0x03)
    87a4:	83 30       	cpi	r24, 0x03	; 3
    87a6:	29 f4       	brne	.+10     	; 0x87b2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    87a8:	ce 01       	movw	r24, r28
	}
}
    87aa:	df 91       	pop	r29
    87ac:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    87ae:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <EepromWriteBlock>
	}
}
    87b2:	df 91       	pop	r29
    87b4:	cf 91       	pop	r28
    87b6:	08 95       	ret

000087b8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    87b8:	61 e0       	ldi	r22, 0x01	; 1
    87ba:	83 e0       	ldi	r24, 0x03	; 3
    87bc:	0e 94 b9 40 	call	0x8172	; 0x8172 <FadeOut>
	ClearVram();
    87c0:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    87c4:	60 e0       	ldi	r22, 0x00	; 0
    87c6:	83 e0       	ldi	r24, 0x03	; 3
    87c8:	0c 94 ad 40 	jmp	0x815a	; 0x815a <FadeIn>

000087cc <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    87cc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    87ce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    87d0:	40 e0       	ldi	r20, 0x00	; 0
    87d2:	6c ed       	ldi	r22, 0xDC	; 220
    87d4:	70 e2       	ldi	r23, 0x20	; 32
    87d6:	8c 2f       	mov	r24, r28
    87d8:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
    87dc:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    87de:	cc 30       	cpi	r28, 0x0C	; 12
    87e0:	b9 f7       	brne	.-18     	; 0x87d0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    87e2:	cf 91       	pop	r28
    87e4:	08 95       	ret

000087e6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    87e6:	cf 92       	push	r12
    87e8:	df 92       	push	r13
    87ea:	ff 92       	push	r15
    87ec:	0f 93       	push	r16
    87ee:	1f 93       	push	r17
    87f0:	cf 93       	push	r28
    87f2:	df 93       	push	r29
    87f4:	cd b7       	in	r28, 0x3d	; 61
    87f6:	de b7       	in	r29, 0x3e	; 62
    87f8:	28 97       	sbiw	r28, 0x08	; 8
    87fa:	0f b6       	in	r0, 0x3f	; 63
    87fc:	f8 94       	cli
    87fe:	de bf       	out	0x3e, r29	; 62
    8800:	0f be       	out	0x3f, r0	; 63
    8802:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    8804:	90 91 ec 0b 	lds	r25, 0x0BEC
    8808:	80 91 5d 0f 	lds	r24, 0x0F5D
    880c:	98 17       	cp	r25, r24
    880e:	28 f4       	brcc	.+10     	; 0x881a <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    8810:	ee ed       	ldi	r30, 0xDE	; 222
    8812:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    8814:	af e4       	ldi	r26, 0x4F	; 79
    8816:	bf e0       	ldi	r27, 0x0F	; 15
    8818:	04 c0       	rjmp	.+8      	; 0x8822 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    881a:	ef e4       	ldi	r30, 0x4F	; 79
    881c:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    881e:	ae ed       	ldi	r26, 0xDE	; 222
    8820:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    8822:	1a 96       	adiw	r26, 0x0a	; 10
    8824:	8c 91       	ld	r24, X
    8826:	1a 97       	sbiw	r26, 0x0a	; 10
    8828:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    882a:	82 85       	ldd	r24, Z+10	; 0x0a
    882c:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    882e:	1e 96       	adiw	r26, 0x0e	; 14
    8830:	8c 91       	ld	r24, X
    8832:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    8834:	96 85       	ldd	r25, Z+14	; 0x0e
    8836:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    8838:	f8 2e       	mov	r15, r24
    883a:	f9 1a       	sub	r15, r25
    883c:	00 e0       	ldi	r16, 0x00	; 0
    883e:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    8840:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    8842:	81 11       	cpse	r24, r1
    8844:	08 c0       	rjmp	.+16     	; 0x8856 <save_score+0x70>
    8846:	f8 01       	movw	r30, r16
    8848:	ec 5f       	subi	r30, 0xFC	; 252
    884a:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    884c:	94 81       	ldd	r25, Z+4	; 0x04
    884e:	25 81       	ldd	r18, Z+5	; 0x05
    8850:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    8852:	9f 15       	cp	r25, r15
    8854:	d0 f4       	brcc	.+52     	; 0x888a <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    8856:	44 e0       	ldi	r20, 0x04	; 4
    8858:	c8 01       	movw	r24, r16
    885a:	8a 5f       	subi	r24, 0xFA	; 250
    885c:	9e 4f       	sbci	r25, 0xFE	; 254
    885e:	6c 01       	movw	r12, r24
    8860:	bc 01       	movw	r22, r24
    8862:	ce 01       	movw	r24, r28
    8864:	05 96       	adiw	r24, 0x05	; 5
    8866:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    886a:	44 e0       	ldi	r20, 0x04	; 4
    886c:	be 01       	movw	r22, r28
    886e:	6f 5f       	subi	r22, 0xFF	; 255
    8870:	7f 4f       	sbci	r23, 0xFF	; 255
    8872:	c6 01       	movw	r24, r12
    8874:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    8878:	44 e0       	ldi	r20, 0x04	; 4
    887a:	be 01       	movw	r22, r28
    887c:	6b 5f       	subi	r22, 0xFB	; 251
    887e:	7f 4f       	sbci	r23, 0xFF	; 255
    8880:	ce 01       	movw	r24, r28
    8882:	01 96       	adiw	r24, 0x01	; 1
    8884:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
				saved = 1;
    8888:	81 e0       	ldi	r24, 0x01	; 1
    888a:	0c 5f       	subi	r16, 0xFC	; 252
    888c:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    888e:	0c 31       	cpi	r16, 0x1C	; 28
    8890:	11 05       	cpc	r17, r1
    8892:	b9 f6       	brne	.-82     	; 0x8842 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    8894:	84 e0       	ldi	r24, 0x04	; 4
    8896:	91 e0       	ldi	r25, 0x01	; 1
    8898:	0e 94 b1 33 	call	0x6762	; 0x6762 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    889c:	28 96       	adiw	r28, 0x08	; 8
    889e:	0f b6       	in	r0, 0x3f	; 63
    88a0:	f8 94       	cli
    88a2:	de bf       	out	0x3e, r29	; 62
    88a4:	0f be       	out	0x3f, r0	; 63
    88a6:	cd bf       	out	0x3d, r28	; 61
    88a8:	df 91       	pop	r29
    88aa:	cf 91       	pop	r28
    88ac:	1f 91       	pop	r17
    88ae:	0f 91       	pop	r16
    88b0:	ff 90       	pop	r15
    88b2:	df 90       	pop	r13
    88b4:	cf 90       	pop	r12
    88b6:	08 95       	ret

000088b8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    88b8:	0f 93       	push	r16
    88ba:	1f 93       	push	r17
    88bc:	cf 93       	push	r28
    88be:	df 93       	push	r29
    88c0:	8c 01       	movw	r16, r24
    88c2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    88c4:	88 81       	ld	r24, Y
    88c6:	81 30       	cpi	r24, 0x01	; 1
    88c8:	69 f1       	breq	.+90     	; 0x8924 <position_shot+0x6c>
    88ca:	88 f0       	brcs	.+34     	; 0x88ee <position_shot+0x36>
    88cc:	82 30       	cpi	r24, 0x02	; 2
    88ce:	b1 f1       	breq	.+108    	; 0x893c <position_shot+0x84>
    88d0:	83 30       	cpi	r24, 0x03	; 3
    88d2:	09 f0       	breq	.+2      	; 0x88d6 <position_shot+0x1e>
    88d4:	5a c0       	rjmp	.+180    	; 0x898a <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    88d6:	20 e0       	ldi	r18, 0x00	; 0
    88d8:	30 e0       	ldi	r19, 0x00	; 0
    88da:	40 e0       	ldi	r20, 0x00	; 0
    88dc:	51 e4       	ldi	r21, 0x41	; 65
    88de:	f8 01       	movw	r30, r16
    88e0:	62 81       	ldd	r22, Z+2	; 0x02
    88e2:	73 81       	ldd	r23, Z+3	; 0x03
    88e4:	84 81       	ldd	r24, Z+4	; 0x04
    88e6:	95 81       	ldd	r25, Z+5	; 0x05
    88e8:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    88ec:	3b c0       	rjmp	.+118    	; 0x8964 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    88ee:	20 e0       	ldi	r18, 0x00	; 0
    88f0:	30 e0       	ldi	r19, 0x00	; 0
    88f2:	40 e8       	ldi	r20, 0x80	; 128
    88f4:	50 e4       	ldi	r21, 0x40	; 64
    88f6:	f8 01       	movw	r30, r16
    88f8:	62 81       	ldd	r22, Z+2	; 0x02
    88fa:	73 81       	ldd	r23, Z+3	; 0x03
    88fc:	84 81       	ldd	r24, Z+4	; 0x04
    88fe:	95 81       	ldd	r25, Z+5	; 0x05
    8900:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    8904:	6a 83       	std	Y+2, r22	; 0x02
    8906:	7b 83       	std	Y+3, r23	; 0x03
    8908:	8c 83       	std	Y+4, r24	; 0x04
    890a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    890c:	20 e0       	ldi	r18, 0x00	; 0
    890e:	30 e0       	ldi	r19, 0x00	; 0
    8910:	40 e0       	ldi	r20, 0x00	; 0
    8912:	51 e4       	ldi	r21, 0x41	; 65
    8914:	f8 01       	movw	r30, r16
    8916:	66 81       	ldd	r22, Z+6	; 0x06
    8918:	77 81       	ldd	r23, Z+7	; 0x07
    891a:	80 85       	ldd	r24, Z+8	; 0x08
    891c:	91 85       	ldd	r25, Z+9	; 0x09
    891e:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    8922:	2f c0       	rjmp	.+94     	; 0x8982 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    8924:	20 e0       	ldi	r18, 0x00	; 0
    8926:	30 e0       	ldi	r19, 0x00	; 0
    8928:	40 e8       	ldi	r20, 0x80	; 128
    892a:	51 e4       	ldi	r21, 0x41	; 65
    892c:	f8 01       	movw	r30, r16
    892e:	62 81       	ldd	r22, Z+2	; 0x02
    8930:	73 81       	ldd	r23, Z+3	; 0x03
    8932:	84 81       	ldd	r24, Z+4	; 0x04
    8934:	95 81       	ldd	r25, Z+5	; 0x05
    8936:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    893a:	14 c0       	rjmp	.+40     	; 0x8964 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    893c:	20 e0       	ldi	r18, 0x00	; 0
    893e:	30 e0       	ldi	r19, 0x00	; 0
    8940:	40 e8       	ldi	r20, 0x80	; 128
    8942:	50 e4       	ldi	r21, 0x40	; 64
    8944:	f8 01       	movw	r30, r16
    8946:	62 81       	ldd	r22, Z+2	; 0x02
    8948:	73 81       	ldd	r23, Z+3	; 0x03
    894a:	84 81       	ldd	r24, Z+4	; 0x04
    894c:	95 81       	ldd	r25, Z+5	; 0x05
    894e:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    8952:	6a 83       	std	Y+2, r22	; 0x02
    8954:	7b 83       	std	Y+3, r23	; 0x03
    8956:	8c 83       	std	Y+4, r24	; 0x04
    8958:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    895a:	20 e0       	ldi	r18, 0x00	; 0
    895c:	30 e0       	ldi	r19, 0x00	; 0
    895e:	40 e8       	ldi	r20, 0x80	; 128
    8960:	51 e4       	ldi	r21, 0x41	; 65
    8962:	08 c0       	rjmp	.+16     	; 0x8974 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    8964:	6a 83       	std	Y+2, r22	; 0x02
    8966:	7b 83       	std	Y+3, r23	; 0x03
    8968:	8c 83       	std	Y+4, r24	; 0x04
    896a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    896c:	20 e0       	ldi	r18, 0x00	; 0
    896e:	30 e0       	ldi	r19, 0x00	; 0
    8970:	40 e8       	ldi	r20, 0x80	; 128
    8972:	50 e4       	ldi	r21, 0x40	; 64
    8974:	f8 01       	movw	r30, r16
    8976:	66 81       	ldd	r22, Z+6	; 0x06
    8978:	77 81       	ldd	r23, Z+7	; 0x07
    897a:	80 85       	ldd	r24, Z+8	; 0x08
    897c:	91 85       	ldd	r25, Z+9	; 0x09
    897e:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    8982:	6e 83       	std	Y+6, r22	; 0x06
    8984:	7f 83       	std	Y+7, r23	; 0x07
    8986:	88 87       	std	Y+8, r24	; 0x08
    8988:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    898a:	df 91       	pop	r29
    898c:	cf 91       	pop	r28
    898e:	1f 91       	pop	r17
    8990:	0f 91       	pop	r16
    8992:	08 95       	ret

00008994 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    8994:	0f 93       	push	r16
    8996:	1f 93       	push	r17
    8998:	cf 93       	push	r28
    899a:	df 93       	push	r29
    899c:	8c 01       	movw	r16, r24
    899e:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    89a0:	ac 01       	movw	r20, r24
    89a2:	45 5f       	subi	r20, 0xF5	; 245
    89a4:	5f 4f       	sbci	r21, 0xFF	; 255
    89a6:	23 e0       	ldi	r18, 0x03	; 3
    89a8:	6e e0       	ldi	r22, 0x0E	; 14
    89aa:	84 e0       	ldi	r24, 0x04	; 4
    89ac:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
	Print(8, 14, strOwns);
    89b0:	44 e3       	ldi	r20, 0x34	; 52
    89b2:	52 e0       	ldi	r21, 0x02	; 2
    89b4:	6e e0       	ldi	r22, 0x0E	; 14
    89b6:	70 e0       	ldi	r23, 0x00	; 0
    89b8:	88 e0       	ldi	r24, 0x08	; 8
    89ba:	90 e0       	ldi	r25, 0x00	; 0
    89bc:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    89c0:	ae 01       	movw	r20, r28
    89c2:	45 5f       	subi	r20, 0xF5	; 245
    89c4:	5f 4f       	sbci	r21, 0xFF	; 255
    89c6:	23 e0       	ldi	r18, 0x03	; 3
    89c8:	6e e0       	ldi	r22, 0x0E	; 14
    89ca:	8d e0       	ldi	r24, 0x0D	; 13
    89cc:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
	Print(17, 14, strBy);
    89d0:	41 e3       	ldi	r20, 0x31	; 49
    89d2:	52 e0       	ldi	r21, 0x02	; 2
    89d4:	6e e0       	ldi	r22, 0x0E	; 14
    89d6:	70 e0       	ldi	r23, 0x00	; 0
    89d8:	81 e1       	ldi	r24, 0x11	; 17
    89da:	90 e0       	ldi	r25, 0x00	; 0
    89dc:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    89e0:	21 e0       	ldi	r18, 0x01	; 1
    89e2:	f8 01       	movw	r30, r16
    89e4:	47 85       	ldd	r20, Z+15	; 0x0f
    89e6:	6e e0       	ldi	r22, 0x0E	; 14
    89e8:	70 e0       	ldi	r23, 0x00	; 0
    89ea:	86 e1       	ldi	r24, 0x16	; 22
    89ec:	90 e0       	ldi	r25, 0x00	; 0
    89ee:	0e 94 37 40 	call	0x806e	; 0x806e <PrintByte>
	PrintChar(23, 14, '-');
    89f2:	4d e2       	ldi	r20, 0x2D	; 45
    89f4:	6e e0       	ldi	r22, 0x0E	; 14
    89f6:	70 e0       	ldi	r23, 0x00	; 0
    89f8:	87 e1       	ldi	r24, 0x17	; 23
    89fa:	90 e0       	ldi	r25, 0x00	; 0
    89fc:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    8a00:	21 e0       	ldi	r18, 0x01	; 1
    8a02:	4f 85       	ldd	r20, Y+15	; 0x0f
    8a04:	6e e0       	ldi	r22, 0x0E	; 14
    8a06:	70 e0       	ldi	r23, 0x00	; 0
    8a08:	8a e1       	ldi	r24, 0x1A	; 26
    8a0a:	90 e0       	ldi	r25, 0x00	; 0
}
    8a0c:	df 91       	pop	r29
    8a0e:	cf 91       	pop	r28
    8a10:	1f 91       	pop	r17
    8a12:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    8a14:	0c 94 37 40 	jmp	0x806e	; 0x806e <PrintByte>

00008a18 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    8a18:	cf 93       	push	r28
    8a1a:	df 93       	push	r29
    8a1c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    8a1e:	ac 01       	movw	r20, r24
    8a20:	45 5f       	subi	r20, 0xF5	; 245
    8a22:	5f 4f       	sbci	r21, 0xFF	; 255
    8a24:	23 e0       	ldi	r18, 0x03	; 3
    8a26:	60 e0       	ldi	r22, 0x00	; 0
    8a28:	8a e0       	ldi	r24, 0x0A	; 10
    8a2a:	8c 0f       	add	r24, r28
    8a2c:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
	Print(x, 0, strScore);
    8a30:	d0 e0       	ldi	r29, 0x00	; 0
    8a32:	45 e8       	ldi	r20, 0x85	; 133
    8a34:	51 e0       	ldi	r21, 0x01	; 1
    8a36:	60 e0       	ldi	r22, 0x00	; 0
    8a38:	70 e0       	ldi	r23, 0x00	; 0
    8a3a:	ce 01       	movw	r24, r28
    8a3c:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(x, 1, strTotal);
    8a40:	4e e7       	ldi	r20, 0x7E	; 126
    8a42:	51 e0       	ldi	r21, 0x01	; 1
    8a44:	61 e0       	ldi	r22, 0x01	; 1
    8a46:	70 e0       	ldi	r23, 0x00	; 0
    8a48:	ce 01       	movw	r24, r28
	
}
    8a4a:	df 91       	pop	r29
    8a4c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    8a4e:	0c 94 6a 40 	jmp	0x80d4	; 0x80d4 <Print>

00008a52 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    8a52:	0f 93       	push	r16
    8a54:	1f 93       	push	r17
    8a56:	cf 93       	push	r28
    8a58:	df 93       	push	r29
    8a5a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    8a5c:	c6 2f       	mov	r28, r22
    8a5e:	d0 e0       	ldi	r29, 0x00	; 0
    8a60:	28 96       	adiw	r28, 0x08	; 8
    8a62:	20 e0       	ldi	r18, 0x00	; 0
    8a64:	fc 01       	movw	r30, r24
    8a66:	47 85       	ldd	r20, Z+15	; 0x0f
    8a68:	60 e0       	ldi	r22, 0x00	; 0
    8a6a:	70 e0       	ldi	r23, 0x00	; 0
    8a6c:	ce 01       	movw	r24, r28
    8a6e:	0e 94 37 40 	call	0x806e	; 0x806e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    8a72:	20 e0       	ldi	r18, 0x00	; 0
    8a74:	f8 01       	movw	r30, r16
    8a76:	46 85       	ldd	r20, Z+14	; 0x0e
    8a78:	61 e0       	ldi	r22, 0x01	; 1
    8a7a:	70 e0       	ldi	r23, 0x00	; 0
    8a7c:	ce 01       	movw	r24, r28
}
    8a7e:	df 91       	pop	r29
    8a80:	cf 91       	pop	r28
    8a82:	1f 91       	pop	r17
    8a84:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    8a86:	0c 94 37 40 	jmp	0x806e	; 0x806e <PrintByte>

00008a8a <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    8a8a:	cf 93       	push	r28
    8a8c:	df 93       	push	r29
    8a8e:	ec 01       	movw	r28, r24
    8a90:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    8a92:	9c 89       	ldd	r25, Y+20	; 0x14
    8a94:	9a 35       	cpi	r25, 0x5A	; 90
    8a96:	99 f0       	breq	.+38     	; 0x8abe <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    8a98:	91 11       	cpse	r25, r1
    8a9a:	0c c0       	rjmp	.+24     	; 0x8ab4 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    8a9c:	4d 89       	ldd	r20, Y+21	; 0x15
    8a9e:	9f e0       	ldi	r25, 0x0F	; 15
    8aa0:	49 9f       	mul	r20, r25
    8aa2:	a0 01       	movw	r20, r0
    8aa4:	11 24       	eor	r1, r1
    8aa6:	45 56       	subi	r20, 0x65	; 101
    8aa8:	5e 4f       	sbci	r21, 0xFE	; 254
    8aaa:	62 e0       	ldi	r22, 0x02	; 2
    8aac:	70 e0       	ldi	r23, 0x00	; 0
    8aae:	90 e0       	ldi	r25, 0x00	; 0
    8ab0:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    8ab4:	8c 89       	ldd	r24, Y+20	; 0x14
    8ab6:	8f 5f       	subi	r24, 0xFF	; 255
    8ab8:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    8aba:	41 e0       	ldi	r20, 0x01	; 1
    8abc:	0a c0       	rjmp	.+20     	; 0x8ad2 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    8abe:	44 23       	and	r20, r20
    8ac0:	41 f0       	breq	.+16     	; 0x8ad2 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    8ac2:	4c e8       	ldi	r20, 0x8C	; 140
    8ac4:	51 e0       	ldi	r21, 0x01	; 1
    8ac6:	62 e0       	ldi	r22, 0x02	; 2
    8ac8:	70 e0       	ldi	r23, 0x00	; 0
    8aca:	90 e0       	ldi	r25, 0x00	; 0
    8acc:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    8ad0:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    8ad2:	84 2f       	mov	r24, r20
    8ad4:	df 91       	pop	r29
    8ad6:	cf 91       	pop	r28
    8ad8:	08 95       	ret

00008ada <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    8ada:	ef 92       	push	r14
    8adc:	ff 92       	push	r15
    8ade:	0f 93       	push	r16
    8ae0:	1f 93       	push	r17
    8ae2:	cf 93       	push	r28
    8ae4:	df 93       	push	r29
    8ae6:	1f 92       	push	r1
    8ae8:	cd b7       	in	r28, 0x3d	; 61
    8aea:	de b7       	in	r29, 0x3e	; 62
    8aec:	7c 01       	movw	r14, r24
    8aee:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    8af0:	fc 01       	movw	r30, r24
    8af2:	66 81       	ldd	r22, Z+6	; 0x06
    8af4:	77 81       	ldd	r23, Z+7	; 0x07
    8af6:	80 85       	ldd	r24, Z+8	; 0x08
    8af8:	91 85       	ldd	r25, Z+9	; 0x09
    8afa:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    8afe:	46 2f       	mov	r20, r22
    8b00:	f7 01       	movw	r30, r14
    8b02:	62 81       	ldd	r22, Z+2	; 0x02
    8b04:	73 81       	ldd	r23, Z+3	; 0x03
    8b06:	84 81       	ldd	r24, Z+4	; 0x04
    8b08:	95 81       	ldd	r25, Z+5	; 0x05
    8b0a:	49 83       	std	Y+1, r20	; 0x01
    8b0c:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    8b10:	02 e0       	ldi	r16, 0x02	; 2
    8b12:	22 e0       	ldi	r18, 0x02	; 2
    8b14:	49 81       	ldd	r20, Y+1	; 0x01
    8b16:	81 2f       	mov	r24, r17
    8b18:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
}
    8b1c:	0f 90       	pop	r0
    8b1e:	df 91       	pop	r29
    8b20:	cf 91       	pop	r28
    8b22:	1f 91       	pop	r17
    8b24:	0f 91       	pop	r16
    8b26:	ff 90       	pop	r15
    8b28:	ef 90       	pop	r14
    8b2a:	08 95       	ret

00008b2c <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    8b2c:	cf 92       	push	r12
    8b2e:	df 92       	push	r13
    8b30:	ff 92       	push	r15
    8b32:	0f 93       	push	r16
    8b34:	1f 93       	push	r17
    8b36:	cf 93       	push	r28
    8b38:	df 93       	push	r29
    8b3a:	1f 92       	push	r1
    8b3c:	cd b7       	in	r28, 0x3d	; 61
    8b3e:	de b7       	in	r29, 0x3e	; 62
    8b40:	fc 01       	movw	r30, r24
    8b42:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    8b44:	80 89       	ldd	r24, Z+16	; 0x10
    8b46:	88 23       	and	r24, r24
    8b48:	19 f1       	breq	.+70     	; 0x8b90 <render_shot+0x64>
    8b4a:	6f 01       	movw	r12, r30
    8b4c:	8c e1       	ldi	r24, 0x1C	; 28
    8b4e:	c8 0e       	add	r12, r24
    8b50:	d1 1c       	adc	r13, r1
    8b52:	82 e0       	ldi	r24, 0x02	; 2
    8b54:	f8 2e       	mov	r15, r24
    8b56:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    8b58:	f6 01       	movw	r30, r12
    8b5a:	64 81       	ldd	r22, Z+4	; 0x04
    8b5c:	75 81       	ldd	r23, Z+5	; 0x05
    8b5e:	86 81       	ldd	r24, Z+6	; 0x06
    8b60:	97 81       	ldd	r25, Z+7	; 0x07
    8b62:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    8b66:	46 2f       	mov	r20, r22
    8b68:	f6 01       	movw	r30, r12
    8b6a:	60 81       	ld	r22, Z
    8b6c:	71 81       	ldd	r23, Z+1	; 0x01
    8b6e:	82 81       	ldd	r24, Z+2	; 0x02
    8b70:	93 81       	ldd	r25, Z+3	; 0x03
    8b72:	49 83       	std	Y+1, r20	; 0x01
    8b74:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    8b78:	01 e0       	ldi	r16, 0x01	; 1
    8b7a:	21 e0       	ldi	r18, 0x01	; 1
    8b7c:	49 81       	ldd	r20, Y+1	; 0x01
    8b7e:	81 2f       	mov	r24, r17
    8b80:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
			sprite_index++;
    8b84:	1f 5f       	subi	r17, 0xFF	; 255
    8b86:	f2 e2       	ldi	r31, 0x22	; 34
    8b88:	cf 0e       	add	r12, r31
    8b8a:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    8b8c:	1f 11       	cpse	r17, r15
    8b8e:	e4 cf       	rjmp	.-56     	; 0x8b58 <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    8b90:	0f 90       	pop	r0
    8b92:	df 91       	pop	r29
    8b94:	cf 91       	pop	r28
    8b96:	1f 91       	pop	r17
    8b98:	0f 91       	pop	r16
    8b9a:	ff 90       	pop	r15
    8b9c:	df 90       	pop	r13
    8b9e:	cf 90       	pop	r12
    8ba0:	08 95       	ret

00008ba2 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    8ba2:	cf 92       	push	r12
    8ba4:	df 92       	push	r13
    8ba6:	ef 92       	push	r14
    8ba8:	ff 92       	push	r15
    8baa:	0f 93       	push	r16
    8bac:	1f 93       	push	r17
    8bae:	cf 93       	push	r28
    8bb0:	df 93       	push	r29
    8bb2:	1f 92       	push	r1
    8bb4:	cd b7       	in	r28, 0x3d	; 61
    8bb6:	de b7       	in	r29, 0x3e	; 62
    8bb8:	8c 01       	movw	r16, r24
    8bba:	0f 5f       	subi	r16, 0xFF	; 255
    8bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    8bbe:	7c 01       	movw	r14, r24
    8bc0:	29 e1       	ldi	r18, 0x19	; 25
    8bc2:	e2 0e       	add	r14, r18
    8bc4:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    8bc6:	8e e1       	ldi	r24, 0x1E	; 30
    8bc8:	c8 2e       	mov	r12, r24
    8bca:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    8bcc:	f8 01       	movw	r30, r16
    8bce:	82 85       	ldd	r24, Z+10	; 0x0a
    8bd0:	93 85       	ldd	r25, Z+11	; 0x0b
    8bd2:	89 2b       	or	r24, r25
    8bd4:	e1 f0       	breq	.+56     	; 0x8c0e <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    8bd6:	be 01       	movw	r22, r28
    8bd8:	6f 5f       	subi	r22, 0xFF	; 255
    8bda:	7f 4f       	sbci	r23, 0xFF	; 255
    8bdc:	c8 01       	movw	r24, r16
    8bde:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8be2:	9c 01       	movw	r18, r24
			if (looped)
    8be4:	49 81       	ldd	r20, Y+1	; 0x01
    8be6:	f8 01       	movw	r30, r16
    8be8:	82 85       	ldd	r24, Z+10	; 0x0a
    8bea:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    8bec:	b6 01       	movw	r22, r12
    8bee:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    8bf2:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    8bf4:	44 23       	and	r20, r20
    8bf6:	41 f0       	breq	.+16     	; 0x8c08 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    8bf8:	40 e0       	ldi	r20, 0x00	; 0
    8bfa:	50 e0       	ldi	r21, 0x00	; 0
    8bfc:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
				ta->anims[i].tile_index = 0;
    8c00:	f8 01       	movw	r30, r16
    8c02:	13 86       	std	Z+11, r1	; 0x0b
    8c04:	12 86       	std	Z+10, r1	; 0x0a
    8c06:	03 c0       	rjmp	.+6      	; 0x8c0e <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    8c08:	a9 01       	movw	r20, r18
    8c0a:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
    8c0e:	04 5f       	subi	r16, 0xF4	; 244
    8c10:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    8c12:	0e 15       	cp	r16, r14
    8c14:	1f 05       	cpc	r17, r15
    8c16:	d1 f6       	brne	.-76     	; 0x8bcc <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    8c18:	0f 90       	pop	r0
    8c1a:	df 91       	pop	r29
    8c1c:	cf 91       	pop	r28
    8c1e:	1f 91       	pop	r17
    8c20:	0f 91       	pop	r16
    8c22:	ff 90       	pop	r15
    8c24:	ef 90       	pop	r14
    8c26:	df 90       	pop	r13
    8c28:	cf 90       	pop	r12
    8c2a:	08 95       	ret

00008c2c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    8c2c:	ff 92       	push	r15
    8c2e:	0f 93       	push	r16
    8c30:	1f 93       	push	r17
    8c32:	cf 93       	push	r28
    8c34:	df 93       	push	r29
    8c36:	1f 92       	push	r1
    8c38:	cd b7       	in	r28, 0x3d	; 61
    8c3a:	de b7       	in	r29, 0x3e	; 62
    8c3c:	8c 01       	movw	r16, r24
    8c3e:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    8c40:	fc 01       	movw	r30, r24
    8c42:	83 89       	ldd	r24, Z+19	; 0x13
    8c44:	80 ff       	sbrs	r24, 0
    8c46:	18 c0       	rjmp	.+48     	; 0x8c78 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    8c48:	be 01       	movw	r22, r28
    8c4a:	6f 5f       	subi	r22, 0xFF	; 255
    8c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    8c4e:	c8 01       	movw	r24, r16
    8c50:	8e 58       	subi	r24, 0x8E	; 142
    8c52:	9f 4f       	sbci	r25, 0xFF	; 255
    8c54:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    8c58:	29 81       	ldd	r18, Y+1	; 0x01
    8c5a:	22 23       	and	r18, r18
    8c5c:	09 f4       	brne	.+2      	; 0x8c60 <tank_map+0x34>
    8c5e:	5a c0       	rjmp	.+180    	; 0x8d14 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    8c60:	f8 01       	movw	r30, r16
    8c62:	83 89       	ldd	r24, Z+19	; 0x13
    8c64:	91 e0       	ldi	r25, 0x01	; 1
    8c66:	98 27       	eor	r25, r24
    8c68:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    8c6a:	c8 01       	movw	r24, r16
    8c6c:	0e 94 ad 43 	call	0x875a	; 0x875a <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    8c70:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    8c72:	8f ed       	ldi	r24, 0xDF	; 223
    8c74:	90 e2       	ldi	r25, 0x20	; 32
    8c76:	4f c0       	rjmp	.+158    	; 0x8d16 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    8c78:	f8 01       	movw	r30, r16
    8c7a:	96 89       	ldd	r25, Z+22	; 0x16
    8c7c:	98 37       	cpi	r25, 0x78	; 120
    8c7e:	11 f0       	breq	.+4      	; 0x8c84 <tank_map+0x58>
		{
			player->grace_frame++;
    8c80:	9f 5f       	subi	r25, 0xFF	; 255
    8c82:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    8c84:	f8 01       	movw	r30, r16
    8c86:	90 81       	ld	r25, Z
    8c88:	91 30       	cpi	r25, 0x01	; 1
    8c8a:	79 f0       	breq	.+30     	; 0x8caa <tank_map+0x7e>
    8c8c:	f8 f0       	brcs	.+62     	; 0x8ccc <tank_map+0xa0>
    8c8e:	92 30       	cpi	r25, 0x02	; 2
    8c90:	99 f0       	breq	.+38     	; 0x8cb8 <tank_map+0x8c>
    8c92:	93 30       	cpi	r25, 0x03	; 3
    8c94:	d9 f4       	brne	.+54     	; 0x8ccc <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    8c96:	be 01       	movw	r22, r28
    8c98:	6f 5f       	subi	r22, 0xFF	; 255
    8c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c9c:	c8 01       	movw	r24, r16
    8c9e:	88 59       	subi	r24, 0x98	; 152
    8ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ca2:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8ca6:	41 e0       	ldi	r20, 0x01	; 1
    8ca8:	1a c0       	rjmp	.+52     	; 0x8cde <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    8caa:	be 01       	movw	r22, r28
    8cac:	6f 5f       	subi	r22, 0xFF	; 255
    8cae:	7f 4f       	sbci	r23, 0xFF	; 255
    8cb0:	c8 01       	movw	r24, r16
    8cb2:	88 59       	subi	r24, 0x98	; 152
    8cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    8cb6:	10 c0       	rjmp	.+32     	; 0x8cd8 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    8cb8:	be 01       	movw	r22, r28
    8cba:	6f 5f       	subi	r22, 0xFF	; 255
    8cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    8cbe:	c8 01       	movw	r24, r16
    8cc0:	82 5a       	subi	r24, 0xA2	; 162
    8cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    8cc4:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8cc8:	42 e0       	ldi	r20, 0x02	; 2
    8cca:	09 c0       	rjmp	.+18     	; 0x8cde <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    8ccc:	be 01       	movw	r22, r28
    8cce:	6f 5f       	subi	r22, 0xFF	; 255
    8cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    8cd2:	c8 01       	movw	r24, r16
    8cd4:	82 5a       	subi	r24, 0xA2	; 162
    8cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    8cd8:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8cdc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    8cde:	f8 01       	movw	r30, r16
    8ce0:	26 89       	ldd	r18, Z+22	; 0x16
    8ce2:	28 37       	cpi	r18, 0x78	; 120
    8ce4:	31 f0       	breq	.+12     	; 0x8cf2 <tank_map+0xc6>
    8ce6:	20 91 30 0b 	lds	r18, 0x0B30
    8cea:	22 23       	and	r18, r18
    8cec:	11 f0       	breq	.+4      	; 0x8cf2 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    8cee:	8f ed       	ldi	r24, 0xDF	; 223
    8cf0:	90 e2       	ldi	r25, 0x20	; 32
		}
		toggle_counter--;
    8cf2:	20 91 03 01 	lds	r18, 0x0103
    8cf6:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    8cf8:	19 f0       	breq	.+6      	; 0x8d00 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    8cfa:	20 93 03 01 	sts	0x0103, r18
    8cfe:	0b c0       	rjmp	.+22     	; 0x8d16 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    8d00:	24 e1       	ldi	r18, 0x14	; 20
    8d02:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    8d06:	30 91 30 0b 	lds	r19, 0x0B30
    8d0a:	21 e0       	ldi	r18, 0x01	; 1
    8d0c:	23 27       	eor	r18, r19
    8d0e:	20 93 30 0b 	sts	0x0B30, r18
    8d12:	01 c0       	rjmp	.+2      	; 0x8d16 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    8d14:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    8d16:	bc 01       	movw	r22, r24
    8d18:	8f 2d       	mov	r24, r15
    8d1a:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    8d1e:	84 e0       	ldi	r24, 0x04	; 4
    8d20:	8f 0d       	add	r24, r15
    8d22:	0f 90       	pop	r0
    8d24:	df 91       	pop	r29
    8d26:	cf 91       	pop	r28
    8d28:	1f 91       	pop	r17
    8d2a:	0f 91       	pop	r16
    8d2c:	ff 90       	pop	r15
    8d2e:	08 95       	ret

00008d30 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    8d30:	ef 92       	push	r14
    8d32:	ff 92       	push	r15
    8d34:	0f 93       	push	r16
    8d36:	1f 93       	push	r17
    8d38:	cf 93       	push	r28
    8d3a:	df 93       	push	r29
    8d3c:	00 d0       	rcall	.+0      	; 0x8d3e <shot_map+0xe>
    8d3e:	cd b7       	in	r28, 0x3d	; 61
    8d40:	de b7       	in	r29, 0x3e	; 62
    8d42:	f6 2e       	mov	r15, r22
	char looped = 0;
    8d44:	19 82       	std	Y+1, r1	; 0x01
    8d46:	8c 01       	movw	r16, r24
    8d48:	08 5d       	subi	r16, 0xD8	; 216
    8d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d4c:	82 e0       	ldi	r24, 0x02	; 2
    8d4e:	e8 2e       	mov	r14, r24
    8d50:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    8d52:	20 e0       	ldi	r18, 0x00	; 0
    8d54:	f8 01       	movw	r30, r16
    8d56:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    8d58:	80 81       	ld	r24, Z
    8d5a:	88 23       	and	r24, r24
    8d5c:	41 f1       	breq	.+80     	; 0x8dae <shot_map+0x7e>
    8d5e:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    8d60:	80 81       	ld	r24, Z
    8d62:	81 30       	cpi	r24, 0x01	; 1
    8d64:	71 f0       	breq	.+28     	; 0x8d82 <shot_map+0x52>
    8d66:	f0 f0       	brcs	.+60     	; 0x8da4 <shot_map+0x74>
    8d68:	82 30       	cpi	r24, 0x02	; 2
    8d6a:	a1 f0       	breq	.+40     	; 0x8d94 <shot_map+0x64>
    8d6c:	83 30       	cpi	r24, 0x03	; 3
    8d6e:	d1 f4       	brne	.+52     	; 0x8da4 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    8d70:	be 01       	movw	r22, r28
    8d72:	6f 5f       	subi	r22, 0xFF	; 255
    8d74:	7f 4f       	sbci	r23, 0xFF	; 255
    8d76:	c8 01       	movw	r24, r16
    8d78:	0a 96       	adiw	r24, 0x0a	; 10
    8d7a:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8d7e:	21 e0       	ldi	r18, 0x01	; 1
    8d80:	18 c0       	rjmp	.+48     	; 0x8db2 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    8d82:	be 01       	movw	r22, r28
    8d84:	6f 5f       	subi	r22, 0xFF	; 255
    8d86:	7f 4f       	sbci	r23, 0xFF	; 255
    8d88:	c8 01       	movw	r24, r16
    8d8a:	0a 96       	adiw	r24, 0x0a	; 10
    8d8c:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8d90:	20 e0       	ldi	r18, 0x00	; 0
    8d92:	0f c0       	rjmp	.+30     	; 0x8db2 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    8d94:	be 01       	movw	r22, r28
    8d96:	6f 5f       	subi	r22, 0xFF	; 255
    8d98:	7f 4f       	sbci	r23, 0xFF	; 255
    8d9a:	c8 01       	movw	r24, r16
    8d9c:	0e 94 ee 40 	call	0x81dc	; 0x81dc <LBGetNextFrame>
    8da0:	22 e0       	ldi	r18, 0x02	; 2
    8da2:	07 c0       	rjmp	.+14     	; 0x8db2 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    8da4:	be 01       	movw	r22, r28
    8da6:	6f 5f       	subi	r22, 0xFF	; 255
    8da8:	7f 4f       	sbci	r23, 0xFF	; 255
    8daa:	c8 01       	movw	r24, r16
    8dac:	ef cf       	rjmp	.-34     	; 0x8d8c <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    8dae:	8f ed       	ldi	r24, 0xDF	; 223
    8db0:	90 e2       	ldi	r25, 0x20	; 32
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    8db2:	42 2f       	mov	r20, r18
    8db4:	bc 01       	movw	r22, r24
    8db6:	8f 2d       	mov	r24, r15
    8db8:	2a 83       	std	Y+2, r18	; 0x02
    8dba:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
    8dbe:	f3 94       	inc	r15
    8dc0:	0e 5d       	subi	r16, 0xDE	; 222
    8dc2:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    8dc4:	2a 81       	ldd	r18, Y+2	; 0x02
    8dc6:	fe 10       	cpse	r15, r14
    8dc8:	c5 cf       	rjmp	.-118    	; 0x8d54 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    8dca:	8f 2d       	mov	r24, r15
    8dcc:	0f 90       	pop	r0
    8dce:	0f 90       	pop	r0
    8dd0:	df 91       	pop	r29
    8dd2:	cf 91       	pop	r28
    8dd4:	1f 91       	pop	r17
    8dd6:	0f 91       	pop	r16
    8dd8:	ff 90       	pop	r15
    8dda:	ef 90       	pop	r14
    8ddc:	08 95       	ret

00008dde <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    8dde:	cf 93       	push	r28
    8de0:	df 93       	push	r29
    8de2:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    8de4:	88 81       	ld	r24, Y
    8de6:	81 11       	cpse	r24, r1
    8de8:	15 c0       	rjmp	.+42     	; 0x8e14 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    8dea:	69 81       	ldd	r22, Y+1	; 0x01
    8dec:	70 e0       	ldi	r23, 0x00	; 0
    8dee:	80 e0       	ldi	r24, 0x00	; 0
    8df0:	90 e0       	ldi	r25, 0x00	; 0
    8df2:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    8df6:	25 e6       	ldi	r18, 0x65	; 101
    8df8:	38 e8       	ldi	r19, 0x88	; 136
    8dfa:	48 e8       	ldi	r20, 0x88	; 136
    8dfc:	5c e3       	ldi	r21, 0x3C	; 60
    8dfe:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    8e02:	9b 01       	movw	r18, r22
    8e04:	ac 01       	movw	r20, r24
    8e06:	6e 81       	ldd	r22, Y+6	; 0x06
    8e08:	7f 81       	ldd	r23, Y+7	; 0x07
    8e0a:	88 85       	ldd	r24, Y+8	; 0x08
    8e0c:	99 85       	ldd	r25, Y+9	; 0x09
    8e0e:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    8e12:	2d c0       	rjmp	.+90     	; 0x8e6e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    8e14:	81 30       	cpi	r24, 0x01	; 1
    8e16:	a9 f4       	brne	.+42     	; 0x8e42 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    8e18:	69 81       	ldd	r22, Y+1	; 0x01
    8e1a:	70 e0       	ldi	r23, 0x00	; 0
    8e1c:	80 e0       	ldi	r24, 0x00	; 0
    8e1e:	90 e0       	ldi	r25, 0x00	; 0
    8e20:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    8e24:	25 e6       	ldi	r18, 0x65	; 101
    8e26:	38 e8       	ldi	r19, 0x88	; 136
    8e28:	48 e8       	ldi	r20, 0x88	; 136
    8e2a:	5c e3       	ldi	r21, 0x3C	; 60
    8e2c:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    8e30:	9b 01       	movw	r18, r22
    8e32:	ac 01       	movw	r20, r24
    8e34:	6a 81       	ldd	r22, Y+2	; 0x02
    8e36:	7b 81       	ldd	r23, Y+3	; 0x03
    8e38:	8c 81       	ldd	r24, Y+4	; 0x04
    8e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    8e3c:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    8e40:	31 c0       	rjmp	.+98     	; 0x8ea4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    8e42:	82 30       	cpi	r24, 0x02	; 2
    8e44:	c9 f4       	brne	.+50     	; 0x8e78 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    8e46:	69 81       	ldd	r22, Y+1	; 0x01
    8e48:	70 e0       	ldi	r23, 0x00	; 0
    8e4a:	80 e0       	ldi	r24, 0x00	; 0
    8e4c:	90 e0       	ldi	r25, 0x00	; 0
    8e4e:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    8e52:	25 e6       	ldi	r18, 0x65	; 101
    8e54:	38 e8       	ldi	r19, 0x88	; 136
    8e56:	48 e8       	ldi	r20, 0x88	; 136
    8e58:	5c e3       	ldi	r21, 0x3C	; 60
    8e5a:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    8e5e:	9b 01       	movw	r18, r22
    8e60:	ac 01       	movw	r20, r24
    8e62:	6e 81       	ldd	r22, Y+6	; 0x06
    8e64:	7f 81       	ldd	r23, Y+7	; 0x07
    8e66:	88 85       	ldd	r24, Y+8	; 0x08
    8e68:	99 85       	ldd	r25, Y+9	; 0x09
    8e6a:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    8e6e:	6e 83       	std	Y+6, r22	; 0x06
    8e70:	7f 83       	std	Y+7, r23	; 0x07
    8e72:	88 87       	std	Y+8, r24	; 0x08
    8e74:	99 87       	std	Y+9, r25	; 0x09
    8e76:	1a c0       	rjmp	.+52     	; 0x8eac <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    8e78:	83 30       	cpi	r24, 0x03	; 3
    8e7a:	c1 f4       	brne	.+48     	; 0x8eac <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    8e7c:	69 81       	ldd	r22, Y+1	; 0x01
    8e7e:	70 e0       	ldi	r23, 0x00	; 0
    8e80:	80 e0       	ldi	r24, 0x00	; 0
    8e82:	90 e0       	ldi	r25, 0x00	; 0
    8e84:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    8e88:	25 e6       	ldi	r18, 0x65	; 101
    8e8a:	38 e8       	ldi	r19, 0x88	; 136
    8e8c:	48 e8       	ldi	r20, 0x88	; 136
    8e8e:	5c e3       	ldi	r21, 0x3C	; 60
    8e90:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    8e94:	9b 01       	movw	r18, r22
    8e96:	ac 01       	movw	r20, r24
    8e98:	6a 81       	ldd	r22, Y+2	; 0x02
    8e9a:	7b 81       	ldd	r23, Y+3	; 0x03
    8e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    8e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    8ea0:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    8ea4:	6a 83       	std	Y+2, r22	; 0x02
    8ea6:	7b 83       	std	Y+3, r23	; 0x03
    8ea8:	8c 83       	std	Y+4, r24	; 0x04
    8eaa:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    8eac:	df 91       	pop	r29
    8eae:	cf 91       	pop	r28
    8eb0:	08 95       	ret

00008eb2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    8eb2:	80 5a       	subi	r24, 0xA0	; 160
    8eb4:	93 4f       	sbci	r25, 0xF3	; 243
    8eb6:	fc 01       	movw	r30, r24
    8eb8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    8eba:	81 30       	cpi	r24, 0x01	; 1
    8ebc:	21 f0       	breq	.+8      	; 0x8ec6 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    8ebe:	82 30       	cpi	r24, 0x02	; 2
    8ec0:	21 f0       	breq	.+8      	; 0x8eca <solid_square_tile+0x18>

	return 0;
    8ec2:	80 e0       	ldi	r24, 0x00	; 0
    8ec4:	08 95       	ret
    8ec6:	81 e0       	ldi	r24, 0x01	; 1
    8ec8:	08 95       	ret
    8eca:	82 e0       	ldi	r24, 0x02	; 2
}
    8ecc:	08 95       	ret

00008ece <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    8ece:	5f 92       	push	r5
    8ed0:	6f 92       	push	r6
    8ed2:	7f 92       	push	r7
    8ed4:	8f 92       	push	r8
    8ed6:	9f 92       	push	r9
    8ed8:	af 92       	push	r10
    8eda:	bf 92       	push	r11
    8edc:	cf 92       	push	r12
    8ede:	df 92       	push	r13
    8ee0:	ef 92       	push	r14
    8ee2:	ff 92       	push	r15
    8ee4:	0f 93       	push	r16
    8ee6:	1f 93       	push	r17
    8ee8:	cf 93       	push	r28
    8eea:	df 93       	push	r29
    8eec:	f6 2e       	mov	r15, r22
    8eee:	d4 2e       	mov	r13, r20
    8ef0:	92 2e       	mov	r9, r18
    8ef2:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    8ef4:	fc 01       	movw	r30, r24
    8ef6:	e0 5a       	subi	r30, 0xA0	; 160
    8ef8:	f3 4f       	sbci	r31, 0xF3	; 243
    8efa:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    8efc:	6e e1       	ldi	r22, 0x1E	; 30
    8efe:	70 e0       	ldi	r23, 0x00	; 0
    8f00:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    8f04:	d8 2f       	mov	r29, r24
    8f06:	dd 0f       	add	r29, r29
    8f08:	dd 0f       	add	r29, r29
    8f0a:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    8f0c:	6d 5f       	subi	r22, 0xFD	; 253
    8f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f10:	c6 2f       	mov	r28, r22
    8f12:	cc 0f       	add	r28, r28
    8f14:	cc 0f       	add	r28, r28
    8f16:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    8f18:	13 30       	cpi	r17, 0x03	; 3
    8f1a:	11 f0       	breq	.+4      	; 0x8f20 <solid_directional_tile+0x52>
    8f1c:	16 30       	cpi	r17, 0x06	; 6
    8f1e:	a1 f5       	brne	.+104    	; 0x8f88 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    8f20:	6d 2c       	mov	r6, r13
    8f22:	6b 0c       	add	r6, r11
    8f24:	27 e0       	ldi	r18, 0x07	; 7
    8f26:	72 2e       	mov	r7, r18
    8f28:	7d 0e       	add	r7, r29
    8f2a:	37 e0       	ldi	r19, 0x07	; 7
    8f2c:	83 2e       	mov	r8, r19
    8f2e:	8c 0e       	add	r8, r28
    8f30:	a6 2c       	mov	r10, r6
    8f32:	cf 2c       	mov	r12, r15
    8f34:	ed 2c       	mov	r14, r13
    8f36:	0f 2d       	mov	r16, r15
    8f38:	2c 2f       	mov	r18, r28
    8f3a:	47 2d       	mov	r20, r7
    8f3c:	68 2d       	mov	r22, r8
    8f3e:	8d 2f       	mov	r24, r29
    8f40:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8f44:	81 11       	cpse	r24, r1
    8f46:	59 c0       	rjmp	.+178    	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    8f48:	5f 2c       	mov	r5, r15
    8f4a:	59 0c       	add	r5, r9
    8f4c:	ad 2c       	mov	r10, r13
    8f4e:	c5 2c       	mov	r12, r5
    8f50:	2c 2f       	mov	r18, r28
    8f52:	47 2d       	mov	r20, r7
    8f54:	68 2d       	mov	r22, r8
    8f56:	8d 2f       	mov	r24, r29
    8f58:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8f5c:	81 11       	cpse	r24, r1
    8f5e:	4d c0       	rjmp	.+154    	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    8f60:	a6 2c       	mov	r10, r6
    8f62:	05 2d       	mov	r16, r5
    8f64:	2c 2f       	mov	r18, r28
    8f66:	47 2d       	mov	r20, r7
    8f68:	68 2d       	mov	r22, r8
    8f6a:	8d 2f       	mov	r24, r29
    8f6c:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8f70:	81 11       	cpse	r24, r1
    8f72:	43 c0       	rjmp	.+134    	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    8f74:	e6 2c       	mov	r14, r6
    8f76:	0f 2d       	mov	r16, r15
    8f78:	2c 2f       	mov	r18, r28
    8f7a:	47 2d       	mov	r20, r7
    8f7c:	68 2d       	mov	r22, r8
    8f7e:	8d 2f       	mov	r24, r29
    8f80:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8f84:	81 11       	cpse	r24, r1
    8f86:	39 c0       	rjmp	.+114    	; 0x8ffa <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    8f88:	8c ef       	ldi	r24, 0xFC	; 252
    8f8a:	81 0f       	add	r24, r17
    8f8c:	82 30       	cpi	r24, 0x02	; 2
    8f8e:	98 f5       	brcc	.+102    	; 0x8ff6 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    8f90:	bd 0c       	add	r11, r13
    8f92:	87 e0       	ldi	r24, 0x07	; 7
    8f94:	78 2e       	mov	r7, r24
    8f96:	7c 0e       	add	r7, r28
    8f98:	97 e0       	ldi	r25, 0x07	; 7
    8f9a:	89 2e       	mov	r8, r25
    8f9c:	8d 0e       	add	r8, r29
    8f9e:	ab 2c       	mov	r10, r11
    8fa0:	cf 2c       	mov	r12, r15
    8fa2:	ed 2c       	mov	r14, r13
    8fa4:	0f 2d       	mov	r16, r15
    8fa6:	27 2d       	mov	r18, r7
    8fa8:	48 2d       	mov	r20, r8
    8faa:	6c 2f       	mov	r22, r28
    8fac:	8d 2f       	mov	r24, r29
    8fae:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8fb2:	81 11       	cpse	r24, r1
    8fb4:	22 c0       	rjmp	.+68     	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    8fb6:	9f 0c       	add	r9, r15
    8fb8:	ad 2c       	mov	r10, r13
    8fba:	c9 2c       	mov	r12, r9
    8fbc:	27 2d       	mov	r18, r7
    8fbe:	48 2d       	mov	r20, r8
    8fc0:	6c 2f       	mov	r22, r28
    8fc2:	8d 2f       	mov	r24, r29
    8fc4:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8fc8:	81 11       	cpse	r24, r1
    8fca:	17 c0       	rjmp	.+46     	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    8fcc:	ab 2c       	mov	r10, r11
    8fce:	09 2d       	mov	r16, r9
    8fd0:	27 2d       	mov	r18, r7
    8fd2:	48 2d       	mov	r20, r8
    8fd4:	6c 2f       	mov	r22, r28
    8fd6:	8d 2f       	mov	r24, r29
    8fd8:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8fdc:	81 11       	cpse	r24, r1
    8fde:	0d c0       	rjmp	.+26     	; 0x8ffa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    8fe0:	eb 2c       	mov	r14, r11
    8fe2:	0f 2d       	mov	r16, r15
    8fe4:	27 2d       	mov	r18, r7
    8fe6:	48 2d       	mov	r20, r8
    8fe8:	6c 2f       	mov	r22, r28
    8fea:	8d 2f       	mov	r24, r29
    8fec:	0e 94 ba 41 	call	0x8374	; 0x8374 <LBLineIntersect>
    8ff0:	81 11       	cpse	r24, r1
    8ff2:	03 c0       	rjmp	.+6      	; 0x8ffa <solid_directional_tile+0x12c>
    8ff4:	03 c0       	rjmp	.+6      	; 0x8ffc <solid_directional_tile+0x12e>
	}
	
	return 0;
    8ff6:	80 e0       	ldi	r24, 0x00	; 0
    8ff8:	01 c0       	rjmp	.+2      	; 0x8ffc <solid_directional_tile+0x12e>
    8ffa:	81 2f       	mov	r24, r17
}
    8ffc:	df 91       	pop	r29
    8ffe:	cf 91       	pop	r28
    9000:	1f 91       	pop	r17
    9002:	0f 91       	pop	r16
    9004:	ff 90       	pop	r15
    9006:	ef 90       	pop	r14
    9008:	df 90       	pop	r13
    900a:	cf 90       	pop	r12
    900c:	bf 90       	pop	r11
    900e:	af 90       	pop	r10
    9010:	9f 90       	pop	r9
    9012:	8f 90       	pop	r8
    9014:	7f 90       	pop	r7
    9016:	6f 90       	pop	r6
    9018:	5f 90       	pop	r5
    901a:	08 95       	ret

0000901c <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    901c:	af 92       	push	r10
    901e:	cf 92       	push	r12
    9020:	ef 92       	push	r14
    9022:	0f 93       	push	r16
    9024:	1f 93       	push	r17
    9026:	cf 93       	push	r28
    9028:	df 93       	push	r29
    902a:	ec 01       	movw	r28, r24
    902c:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    902e:	fb 01       	movw	r30, r22
    9030:	66 81       	ldd	r22, Z+6	; 0x06
    9032:	77 81       	ldd	r23, Z+7	; 0x07
    9034:	80 85       	ldd	r24, Z+8	; 0x08
    9036:	91 85       	ldd	r25, Z+9	; 0x09
    9038:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    903c:	e6 2e       	mov	r14, r22
    903e:	f8 01       	movw	r30, r16
    9040:	62 81       	ldd	r22, Z+2	; 0x02
    9042:	73 81       	ldd	r23, Z+3	; 0x03
    9044:	84 81       	ldd	r24, Z+4	; 0x04
    9046:	95 81       	ldd	r25, Z+5	; 0x05
    9048:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    904c:	06 2f       	mov	r16, r22
    904e:	6e 81       	ldd	r22, Y+6	; 0x06
    9050:	7f 81       	ldd	r23, Y+7	; 0x07
    9052:	88 85       	ldd	r24, Y+8	; 0x08
    9054:	99 85       	ldd	r25, Y+9	; 0x09
    9056:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    905a:	16 2f       	mov	r17, r22
    905c:	6a 81       	ldd	r22, Y+2	; 0x02
    905e:	7b 81       	ldd	r23, Y+3	; 0x03
    9060:	8c 81       	ldd	r24, Y+4	; 0x04
    9062:	9d 81       	ldd	r25, Y+5	; 0x05
    9064:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    9068:	86 2f       	mov	r24, r22
    906a:	97 e0       	ldi	r25, 0x07	; 7
    906c:	a9 2e       	mov	r10, r25
    906e:	27 e0       	ldi	r18, 0x07	; 7
    9070:	c2 2e       	mov	r12, r18
    9072:	2e e0       	ldi	r18, 0x0E	; 14
    9074:	4e e0       	ldi	r20, 0x0E	; 14
    9076:	61 2f       	mov	r22, r17
    9078:	0e 94 90 41 	call	0x8320	; 0x8320 <LBCollides>
    907c:	88 23       	and	r24, r24
    907e:	39 f0       	breq	.+14     	; 0x908e <player_shot+0x72>
    9080:	91 e0       	ldi	r25, 0x01	; 1
    9082:	8e 89       	ldd	r24, Y+22	; 0x16
    9084:	88 37       	cpi	r24, 0x78	; 120
    9086:	09 f0       	breq	.+2      	; 0x908a <player_shot+0x6e>
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	89 2f       	mov	r24, r25
    908c:	01 c0       	rjmp	.+2      	; 0x9090 <player_shot+0x74>
    908e:	80 e0       	ldi	r24, 0x00	; 0
}
    9090:	df 91       	pop	r29
    9092:	cf 91       	pop	r28
    9094:	1f 91       	pop	r17
    9096:	0f 91       	pop	r16
    9098:	ef 90       	pop	r14
    909a:	cf 90       	pop	r12
    909c:	af 90       	pop	r10
    909e:	08 95       	ret

000090a0 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    90a0:	cf 92       	push	r12
    90a2:	df 92       	push	r13
    90a4:	ef 92       	push	r14
    90a6:	ff 92       	push	r15
    90a8:	cf 93       	push	r28
    90aa:	df 93       	push	r29
    90ac:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    90ae:	ca 80       	ldd	r12, Y+2	; 0x02
    90b0:	db 80       	ldd	r13, Y+3	; 0x03
    90b2:	ec 80       	ldd	r14, Y+4	; 0x04
    90b4:	fd 80       	ldd	r15, Y+5	; 0x05
    90b6:	20 e0       	ldi	r18, 0x00	; 0
    90b8:	30 e0       	ldi	r19, 0x00	; 0
    90ba:	a9 01       	movw	r20, r18
    90bc:	c7 01       	movw	r24, r14
    90be:	b6 01       	movw	r22, r12
    90c0:	0e 94 36 54 	call	0xa86c	; 0xa86c <__cmpsf2>
    90c4:	87 fd       	sbrc	r24, 7
    90c6:	31 c0       	rjmp	.+98     	; 0x912a <collision_detect_boundries+0x8a>
    90c8:	20 e0       	ldi	r18, 0x00	; 0
    90ca:	30 e0       	ldi	r19, 0x00	; 0
    90cc:	40 ee       	ldi	r20, 0xE0	; 224
    90ce:	50 e4       	ldi	r21, 0x40	; 64
    90d0:	c7 01       	movw	r24, r14
    90d2:	b6 01       	movw	r22, r12
    90d4:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    90d8:	20 e0       	ldi	r18, 0x00	; 0
    90da:	30 e0       	ldi	r19, 0x00	; 0
    90dc:	40 e7       	ldi	r20, 0x70	; 112
    90de:	53 e4       	ldi	r21, 0x43	; 67
    90e0:	0e 94 80 55 	call	0xab00	; 0xab00 <__gesf2>
    90e4:	18 16       	cp	r1, r24
    90e6:	0c f1       	brlt	.+66     	; 0x912a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    90e8:	ce 80       	ldd	r12, Y+6	; 0x06
    90ea:	df 80       	ldd	r13, Y+7	; 0x07
    90ec:	e8 84       	ldd	r14, Y+8	; 0x08
    90ee:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    90f0:	20 e0       	ldi	r18, 0x00	; 0
    90f2:	30 e0       	ldi	r19, 0x00	; 0
    90f4:	40 ec       	ldi	r20, 0xC0	; 192
    90f6:	51 e4       	ldi	r21, 0x41	; 65
    90f8:	c7 01       	movw	r24, r14
    90fa:	b6 01       	movw	r22, r12
    90fc:	0e 94 36 54 	call	0xa86c	; 0xa86c <__cmpsf2>
    9100:	87 fd       	sbrc	r24, 7
    9102:	13 c0       	rjmp	.+38     	; 0x912a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9104:	20 e0       	ldi	r18, 0x00	; 0
    9106:	30 e0       	ldi	r19, 0x00	; 0
    9108:	40 ee       	ldi	r20, 0xE0	; 224
    910a:	50 e4       	ldi	r21, 0x40	; 64
    910c:	c7 01       	movw	r24, r14
    910e:	b6 01       	movw	r22, r12
    9110:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    9114:	c1 e0       	ldi	r28, 0x01	; 1
    9116:	20 e0       	ldi	r18, 0x00	; 0
    9118:	30 e0       	ldi	r19, 0x00	; 0
    911a:	40 e6       	ldi	r20, 0x60	; 96
    911c:	53 e4       	ldi	r21, 0x43	; 67
    911e:	0e 94 80 55 	call	0xab00	; 0xab00 <__gesf2>
    9122:	18 16       	cp	r1, r24
    9124:	1c f0       	brlt	.+6      	; 0x912c <collision_detect_boundries+0x8c>
    9126:	c0 e0       	ldi	r28, 0x00	; 0
    9128:	01 c0       	rjmp	.+2      	; 0x912c <collision_detect_boundries+0x8c>
	{
		return 1;
    912a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    912c:	8c 2f       	mov	r24, r28
    912e:	df 91       	pop	r29
    9130:	cf 91       	pop	r28
    9132:	ff 90       	pop	r15
    9134:	ef 90       	pop	r14
    9136:	df 90       	pop	r13
    9138:	cf 90       	pop	r12
    913a:	08 95       	ret

0000913c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    913c:	ff 92       	push	r15
    913e:	0f 93       	push	r16
    9140:	1f 93       	push	r17
    9142:	cf 93       	push	r28
    9144:	df 93       	push	r29
    9146:	8c 01       	movw	r16, r24
    9148:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    914a:	20 e0       	ldi	r18, 0x00	; 0
    914c:	30 e0       	ldi	r19, 0x00	; 0
    914e:	40 e0       	ldi	r20, 0x00	; 0
    9150:	5e e3       	ldi	r21, 0x3E	; 62
    9152:	fc 01       	movw	r30, r24
    9154:	66 81       	ldd	r22, Z+6	; 0x06
    9156:	77 81       	ldd	r23, Z+7	; 0x07
    9158:	80 85       	ldd	r24, Z+8	; 0x08
    915a:	91 85       	ldd	r25, Z+9	; 0x09
    915c:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9160:	20 e0       	ldi	r18, 0x00	; 0
    9162:	30 e0       	ldi	r19, 0x00	; 0
    9164:	40 e4       	ldi	r20, 0x40	; 64
    9166:	50 e4       	ldi	r21, 0x40	; 64
    9168:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    916c:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9170:	fe e1       	ldi	r31, 0x1E	; 30
    9172:	6f 9f       	mul	r22, r31
    9174:	e0 01       	movw	r28, r0
    9176:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9178:	20 e0       	ldi	r18, 0x00	; 0
    917a:	30 e0       	ldi	r19, 0x00	; 0
    917c:	40 e0       	ldi	r20, 0x00	; 0
    917e:	5e e3       	ldi	r21, 0x3E	; 62
    9180:	f8 01       	movw	r30, r16
    9182:	62 81       	ldd	r22, Z+2	; 0x02
    9184:	73 81       	ldd	r23, Z+3	; 0x03
    9186:	84 81       	ldd	r24, Z+4	; 0x04
    9188:	95 81       	ldd	r25, Z+5	; 0x05
    918a:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    918e:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9192:	c6 0f       	add	r28, r22
    9194:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    9196:	f8 01       	movw	r30, r16
    9198:	81 8d       	ldd	r24, Z+25	; 0x19
    919a:	88 23       	and	r24, r24
    919c:	c9 f0       	breq	.+50     	; 0x91d0 <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    919e:	40 e0       	ldi	r20, 0x00	; 0
    91a0:	50 e0       	ldi	r21, 0x00	; 0
    91a2:	61 e0       	ldi	r22, 0x01	; 1
    91a4:	8a e0       	ldi	r24, 0x0A	; 10
    91a6:	8f 0d       	add	r24, r15
    91a8:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    91ac:	ce 01       	movw	r24, r28
    91ae:	6e e1       	ldi	r22, 0x1E	; 30
    91b0:	70 e0       	ldi	r23, 0x00	; 0
    91b2:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    91b6:	6c 5f       	subi	r22, 0xFC	; 252
    91b8:	40 e0       	ldi	r20, 0x00	; 0
    91ba:	51 e2       	ldi	r21, 0x21	; 33
    91bc:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    91c0:	87 e0       	ldi	r24, 0x07	; 7
    91c2:	fe 01       	movw	r30, r28
    91c4:	e0 5a       	subi	r30, 0xA0	; 160
    91c6:	f3 4f       	sbci	r31, 0xF3	; 243
    91c8:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    91ca:	82 e3       	ldi	r24, 0x32	; 50
    91cc:	f8 01       	movw	r30, r16
    91ce:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    91d0:	f8 01       	movw	r30, r16
    91d2:	80 8d       	ldd	r24, Z+24	; 0x18
    91d4:	88 23       	and	r24, r24
    91d6:	b1 f0       	breq	.+44     	; 0x9204 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    91d8:	40 e0       	ldi	r20, 0x00	; 0
    91da:	50 e0       	ldi	r21, 0x00	; 0
    91dc:	61 e0       	ldi	r22, 0x01	; 1
    91de:	8b e0       	ldi	r24, 0x0B	; 11
    91e0:	8f 0d       	add	r24, r15
    91e2:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    91e6:	ce 01       	movw	r24, r28
    91e8:	6e e1       	ldi	r22, 0x1E	; 30
    91ea:	70 e0       	ldi	r23, 0x00	; 0
    91ec:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    91f0:	6c 5f       	subi	r22, 0xFC	; 252
    91f2:	4a ef       	ldi	r20, 0xFA	; 250
    91f4:	50 e2       	ldi	r21, 0x20	; 32
    91f6:	8f 5f       	subi	r24, 0xFF	; 255
    91f8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    91fc:	c0 5a       	subi	r28, 0xA0	; 160
    91fe:	d3 4f       	sbci	r29, 0xF3	; 243
    9200:	89 e0       	ldi	r24, 0x09	; 9
    9202:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9204:	f8 01       	movw	r30, r16
    9206:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    9208:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    920a:	83 89       	ldd	r24, Z+19	; 0x13
    920c:	81 60       	ori	r24, 0x01	; 1
    920e:	83 8b       	std	Z+19, r24	; 0x13
}
    9210:	df 91       	pop	r29
    9212:	cf 91       	pop	r28
    9214:	1f 91       	pop	r17
    9216:	0f 91       	pop	r16
    9218:	ff 90       	pop	r15
    921a:	08 95       	ret

0000921c <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    921c:	fc 01       	movw	r30, r24
    921e:	8e e1       	ldi	r24, 0x1E	; 30
    9220:	48 9f       	mul	r20, r24
    9222:	a0 01       	movw	r20, r0
    9224:	11 24       	eor	r1, r1
    9226:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9228:	64 0f       	add	r22, r20
    922a:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    922c:	21 11       	cpse	r18, r1
    922e:	05 c0       	rjmp	.+10     	; 0x923a <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9230:	71 83       	std	Z+1, r23	; 0x01
    9232:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9234:	6f 5f       	subi	r22, 0xFF	; 255
    9236:	7f 4f       	sbci	r23, 0xFF	; 255
    9238:	12 c0       	rjmp	.+36     	; 0x925e <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    923a:	21 30       	cpi	r18, 0x01	; 1
    923c:	19 f4       	brne	.+6      	; 0x9244 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    923e:	cb 01       	movw	r24, r22
    9240:	01 96       	adiw	r24, 0x01	; 1
    9242:	04 c0       	rjmp	.+8      	; 0x924c <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9244:	22 30       	cpi	r18, 0x02	; 2
    9246:	39 f4       	brne	.+14     	; 0x9256 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9248:	cb 01       	movw	r24, r22
    924a:	4e 96       	adiw	r24, 0x1e	; 30
    924c:	91 83       	std	Z+1, r25	; 0x01
    924e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9250:	61 5e       	subi	r22, 0xE1	; 225
    9252:	7f 4f       	sbci	r23, 0xFF	; 255
    9254:	04 c0       	rjmp	.+8      	; 0x925e <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9256:	71 83       	std	Z+1, r23	; 0x01
    9258:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    925a:	62 5e       	subi	r22, 0xE2	; 226
    925c:	7f 4f       	sbci	r23, 0xFF	; 255
    925e:	73 83       	std	Z+3, r23	; 0x03
    9260:	62 83       	std	Z+2, r22	; 0x02
    9262:	08 95       	ret

00009264 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9264:	ef 92       	push	r14
    9266:	ff 92       	push	r15
    9268:	0f 93       	push	r16
    926a:	1f 93       	push	r17
    926c:	cf 93       	push	r28
    926e:	df 93       	push	r29
    9270:	ec 01       	movw	r28, r24
    9272:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9274:	8e e1       	ldi	r24, 0x1E	; 30
    9276:	e8 2e       	mov	r14, r24
    9278:	f1 2c       	mov	r15, r1
    927a:	cb 01       	movw	r24, r22
    927c:	b7 01       	movw	r22, r14
    927e:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    9282:	6d 5f       	subi	r22, 0xFD	; 253
    9284:	40 e0       	ldi	r20, 0x00	; 0
    9286:	50 e0       	ldi	r21, 0x00	; 0
    9288:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    928c:	88 81       	ld	r24, Y
    928e:	fe 01       	movw	r30, r28
    9290:	9c e0       	ldi	r25, 0x0C	; 12
    9292:	89 9f       	mul	r24, r25
    9294:	e0 0d       	add	r30, r0
    9296:	f1 1d       	adc	r31, r1
    9298:	11 24       	eor	r1, r1
    929a:	83 85       	ldd	r24, Z+11	; 0x0b
    929c:	94 85       	ldd	r25, Z+12	; 0x0c
    929e:	00 97       	sbiw	r24, 0x00	; 0
    92a0:	41 f0       	breq	.+16     	; 0x92b2 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    92a2:	b7 01       	movw	r22, r14
    92a4:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    92a8:	6d 5f       	subi	r22, 0xFD	; 253
    92aa:	40 e0       	ldi	r20, 0x00	; 0
    92ac:	50 e0       	ldi	r21, 0x00	; 0
    92ae:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    92b2:	88 81       	ld	r24, Y
    92b4:	fe 01       	movw	r30, r28
    92b6:	9c e0       	ldi	r25, 0x0C	; 12
    92b8:	89 9f       	mul	r24, r25
    92ba:	e0 0d       	add	r30, r0
    92bc:	f1 1d       	adc	r31, r1
    92be:	11 24       	eor	r1, r1
    92c0:	14 87       	std	Z+12, r17	; 0x0c
    92c2:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    92c4:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    92c6:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    92c8:	82 30       	cpi	r24, 0x02	; 2
    92ca:	11 f0       	breq	.+4      	; 0x92d0 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    92cc:	88 83       	st	Y, r24
    92ce:	01 c0       	rjmp	.+2      	; 0x92d2 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    92d0:	18 82       	st	Y, r1
	}
}
    92d2:	df 91       	pop	r29
    92d4:	cf 91       	pop	r28
    92d6:	1f 91       	pop	r17
    92d8:	0f 91       	pop	r16
    92da:	ff 90       	pop	r15
    92dc:	ef 90       	pop	r14
    92de:	08 95       	ret

000092e0 <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    92e0:	6f 92       	push	r6
    92e2:	7f 92       	push	r7
    92e4:	8f 92       	push	r8
    92e6:	9f 92       	push	r9
    92e8:	af 92       	push	r10
    92ea:	bf 92       	push	r11
    92ec:	cf 92       	push	r12
    92ee:	df 92       	push	r13
    92f0:	ef 92       	push	r14
    92f2:	ff 92       	push	r15
    92f4:	0f 93       	push	r16
    92f6:	1f 93       	push	r17
    92f8:	cf 93       	push	r28
    92fa:	df 93       	push	r29
    92fc:	00 d0       	rcall	.+0      	; 0x92fe <collision_detect_shot+0x1e>
    92fe:	00 d0       	rcall	.+0      	; 0x9300 <collision_detect_shot+0x20>
    9300:	1f 92       	push	r1
    9302:	cd b7       	in	r28, 0x3d	; 61
    9304:	de b7       	in	r29, 0x3e	; 62
    9306:	6c 01       	movw	r12, r24
    9308:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    930a:	1a 82       	std	Y+2, r1	; 0x02
    930c:	19 82       	std	Y+1, r1	; 0x01
    930e:	1c 82       	std	Y+4, r1	; 0x04
    9310:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9312:	20 e0       	ldi	r18, 0x00	; 0
    9314:	30 e0       	ldi	r19, 0x00	; 0
    9316:	40 e0       	ldi	r20, 0x00	; 0
    9318:	5e e3       	ldi	r21, 0x3E	; 62
    931a:	fb 01       	movw	r30, r22
    931c:	66 81       	ldd	r22, Z+6	; 0x06
    931e:	77 81       	ldd	r23, Z+7	; 0x07
    9320:	80 85       	ldd	r24, Z+8	; 0x08
    9322:	91 85       	ldd	r25, Z+9	; 0x09
    9324:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9328:	20 e0       	ldi	r18, 0x00	; 0
    932a:	30 e0       	ldi	r19, 0x00	; 0
    932c:	40 e4       	ldi	r20, 0x40	; 64
    932e:	50 e4       	ldi	r21, 0x40	; 64
    9330:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    9334:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    9338:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    933a:	20 e0       	ldi	r18, 0x00	; 0
    933c:	30 e0       	ldi	r19, 0x00	; 0
    933e:	40 e0       	ldi	r20, 0x00	; 0
    9340:	5e e3       	ldi	r21, 0x3E	; 62
    9342:	f7 01       	movw	r30, r14
    9344:	62 81       	ldd	r22, Z+2	; 0x02
    9346:	73 81       	ldd	r23, Z+3	; 0x03
    9348:	84 81       	ldd	r24, Z+4	; 0x04
    934a:	95 81       	ldd	r25, Z+5	; 0x05
    934c:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9350:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9354:	f7 01       	movw	r30, r14
    9356:	20 81       	ld	r18, Z
    9358:	41 2f       	mov	r20, r17
    935a:	ce 01       	movw	r24, r28
    935c:	01 96       	adiw	r24, 0x01	; 1
    935e:	0e 94 0e 49 	call	0x921c	; 0x921c <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9362:	c7 01       	movw	r24, r14
    9364:	0e 94 50 48 	call	0x90a0	; 0x90a0 <collision_detect_boundries>
    9368:	88 23       	and	r24, r24
    936a:	51 f0       	breq	.+20     	; 0x9380 <collision_detect_shot+0xa0>
	{
		init_shot_state(shot, shot->shot_type);
    936c:	f7 01       	movw	r30, r14
    936e:	62 85       	ldd	r22, Z+10	; 0x0a
    9370:	c7 01       	movw	r24, r14
    9372:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
		player->active_shots--;
    9376:	f6 01       	movw	r30, r12
    9378:	80 89       	ldd	r24, Z+16	; 0x10
    937a:	81 50       	subi	r24, 0x01	; 1
    937c:	80 8b       	std	Z+16, r24	; 0x10
		return;
    937e:	e4 c0       	rjmp	.+456    	; 0x9548 <collision_detect_shot+0x268>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    9380:	b7 01       	movw	r22, r14
    9382:	8e ed       	ldi	r24, 0xDE	; 222
    9384:	9b e0       	ldi	r25, 0x0B	; 11
    9386:	0e 94 0e 48 	call	0x901c	; 0x901c <player_shot>
    938a:	88 23       	and	r24, r24
    938c:	99 f0       	breq	.+38     	; 0x93b4 <collision_detect_shot+0xd4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    938e:	80 91 5e 0f 	lds	r24, 0x0F5E
    9392:	8f 5f       	subi	r24, 0xFF	; 255
    9394:	80 93 5e 0f 	sts	0x0F5E, r24
		player2.score++;
    9398:	80 91 5d 0f 	lds	r24, 0x0F5D
    939c:	8f 5f       	subi	r24, 0xFF	; 255
    939e:	80 93 5d 0f 	sts	0x0F5D, r24
		render_score(&player2, 15);
    93a2:	6f e0       	ldi	r22, 0x0F	; 15
    93a4:	8f e4       	ldi	r24, 0x4F	; 79
    93a6:	9f e0       	ldi	r25, 0x0F	; 15
    93a8:	0e 94 29 45 	call	0x8a52	; 0x8a52 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    93ac:	0e ed       	ldi	r16, 0xDE	; 222
    93ae:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    93b0:	b1 2c       	mov	r11, r1
    93b2:	20 c0       	rjmp	.+64     	; 0x93f4 <collision_detect_shot+0x114>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    93b4:	b7 01       	movw	r22, r14
    93b6:	8f e4       	ldi	r24, 0x4F	; 79
    93b8:	9f e0       	ldi	r25, 0x0F	; 15
    93ba:	0e 94 0e 48 	call	0x901c	; 0x901c <player_shot>
    93be:	81 11       	cpse	r24, r1
    93c0:	06 c0       	rjmp	.+12     	; 0x93ce <collision_detect_shot+0xee>
    93c2:	ce 01       	movw	r24, r28
    93c4:	01 96       	adiw	r24, 0x01	; 1
    93c6:	3c 01       	movw	r6, r24
    93c8:	a1 2c       	mov	r10, r1
    93ca:	b1 2c       	mov	r11, r1
    93cc:	48 c0       	rjmp	.+144    	; 0x945e <collision_detect_shot+0x17e>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    93ce:	80 91 ed 0b 	lds	r24, 0x0BED
    93d2:	8f 5f       	subi	r24, 0xFF	; 255
    93d4:	80 93 ed 0b 	sts	0x0BED, r24
		player1.score++;
    93d8:	80 91 ec 0b 	lds	r24, 0x0BEC
    93dc:	8f 5f       	subi	r24, 0xFF	; 255
    93de:	80 93 ec 0b 	sts	0x0BEC, r24
		render_score(&player1, 0);
    93e2:	60 e0       	ldi	r22, 0x00	; 0
    93e4:	8e ed       	ldi	r24, 0xDE	; 222
    93e6:	9b e0       	ldi	r25, 0x0B	; 11
    93e8:	0e 94 29 45 	call	0x8a52	; 0x8a52 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    93ec:	0f e4       	ldi	r16, 0x4F	; 79
    93ee:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    93f0:	2f e0       	ldi	r18, 0x0F	; 15
    93f2:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    93f4:	01 15       	cp	r16, r1
    93f6:	11 05       	cpc	r17, r1
    93f8:	21 f3       	breq	.-56     	; 0x93c2 <collision_detect_shot+0xe2>
	{
		init_shot_state(shot, shot->shot_type);
    93fa:	f7 01       	movw	r30, r14
    93fc:	62 85       	ldd	r22, Z+10	; 0x0a
    93fe:	c7 01       	movw	r24, r14
    9400:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
		player->active_shots--;
    9404:	f6 01       	movw	r30, r12
    9406:	80 89       	ldd	r24, Z+16	; 0x10
    9408:	81 50       	subi	r24, 0x01	; 1
    940a:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    940c:	6b 2d       	mov	r22, r11
    940e:	c8 01       	movw	r24, r16
    9410:	0e 94 9e 48 	call	0x913c	; 0x913c <kill_player>
		SFX_TANK_EXPLODE;
    9414:	2f ef       	ldi	r18, 0xFF	; 255
    9416:	40 e1       	ldi	r20, 0x10	; 16
    9418:	6a e0       	ldi	r22, 0x0A	; 10
    941a:	93 c0       	rjmp	.+294    	; 0x9542 <collision_detect_shot+0x262>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
    941c:	11 30       	cpi	r17, 0x01	; 1
    941e:	81 f1       	breq	.+96     	; 0x9480 <collision_detect_shot+0x1a0>
				player->active_shots--;
			}
			SFX_BRICK_EXPLODE;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    9420:	f7 01       	movw	r30, r14
    9422:	66 81       	ldd	r22, Z+6	; 0x06
    9424:	77 81       	ldd	r23, Z+7	; 0x07
    9426:	80 85       	ldd	r24, Z+8	; 0x08
    9428:	91 85       	ldd	r25, Z+9	; 0x09
    942a:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    942e:	46 2f       	mov	r20, r22
    9430:	f7 01       	movw	r30, r14
    9432:	62 81       	ldd	r22, Z+2	; 0x02
    9434:	73 81       	ldd	r23, Z+3	; 0x03
    9436:	84 81       	ldd	r24, Z+4	; 0x04
    9438:	95 81       	ldd	r25, Z+5	; 0x05
    943a:	4d 83       	std	Y+5, r20	; 0x05
    943c:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    9440:	07 e0       	ldi	r16, 0x07	; 7
    9442:	27 e0       	ldi	r18, 0x07	; 7
    9444:	4d 81       	ldd	r20, Y+5	; 0x05
    9446:	c4 01       	movw	r24, r8
    9448:	0e 94 67 47 	call	0x8ece	; 0x8ece <solid_directional_tile>
    944c:	81 11       	cpse	r24, r1
    944e:	40 c0       	rjmp	.+128    	; 0x94d0 <collision_detect_shot+0x1f0>
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    9450:	aa 94       	dec	r10
    9452:	ab 28       	or	r10, r11
    9454:	09 f4       	brne	.+2      	; 0x9458 <collision_detect_shot+0x178>
    9456:	78 c0       	rjmp	.+240    	; 0x9548 <collision_detect_shot+0x268>
    9458:	aa 24       	eor	r10, r10
    945a:	a3 94       	inc	r10
    945c:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    945e:	f3 01       	movw	r30, r6
    9460:	81 90       	ld	r8, Z+
    9462:	91 90       	ld	r9, Z+
    9464:	3f 01       	movw	r6, r30
    9466:	f4 01       	movw	r30, r8
    9468:	e0 5a       	subi	r30, 0xA0	; 160
    946a:	f3 4f       	sbci	r31, 0xF3	; 243
    946c:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    946e:	11 23       	and	r17, r17
    9470:	79 f3       	breq	.-34     	; 0x9450 <collision_detect_shot+0x170>
		if (tile == L_METAL)
    9472:	12 30       	cpi	r17, 0x02	; 2
    9474:	99 f6       	brne	.-90     	; 0x941c <collision_detect_shot+0x13c>
		{
			recoil_sprite(&shot->shared);
    9476:	c7 01       	movw	r24, r14
    9478:	0e 94 ef 46 	call	0x8dde	; 0x8dde <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    947c:	f7 01       	movw	r30, r14
    947e:	56 c0       	rjmp	.+172    	; 0x952c <collision_detect_shot+0x24c>
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
		{
			explode_tile(&tile_animations, tiles[i]);
    9480:	b4 01       	movw	r22, r8
    9482:	85 ec       	ldi	r24, 0xC5	; 197
    9484:	9b e0       	ldi	r25, 0x0B	; 11
    9486:	0e 94 32 49 	call	0x9264	; 0x9264 <explode_tile>
			recoil_sprite(&shot->shared);
    948a:	c7 01       	movw	r24, r14
    948c:	0e 94 ef 46 	call	0x8dde	; 0x8dde <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    9490:	aa 0c       	add	r10, r10
    9492:	bb 1c       	adc	r11, r11
    9494:	e1 e0       	ldi	r30, 0x01	; 1
    9496:	f0 e0       	ldi	r31, 0x00	; 0
    9498:	ec 0f       	add	r30, r28
    949a:	fd 1f       	adc	r31, r29
    949c:	ea 0d       	add	r30, r10
    949e:	fb 1d       	adc	r31, r11
    94a0:	01 90       	ld	r0, Z+
    94a2:	f0 81       	ld	r31, Z
    94a4:	e0 2d       	mov	r30, r0
    94a6:	e0 5a       	subi	r30, 0xA0	; 160
    94a8:	f3 4f       	sbci	r31, 0xF3	; 243
    94aa:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    94ac:	f7 01       	movw	r30, r14
    94ae:	83 85       	ldd	r24, Z+11	; 0x0b
    94b0:	81 50       	subi	r24, 0x01	; 1
    94b2:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    94b4:	81 11       	cpse	r24, r1
    94b6:	08 c0       	rjmp	.+16     	; 0x94c8 <collision_detect_shot+0x1e8>
			{
				init_shot_state(shot, shot->shot_type);
    94b8:	62 85       	ldd	r22, Z+10	; 0x0a
    94ba:	c7 01       	movw	r24, r14
    94bc:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
				player->active_shots--;
    94c0:	f6 01       	movw	r30, r12
    94c2:	80 89       	ldd	r24, Z+16	; 0x10
    94c4:	81 50       	subi	r24, 0x01	; 1
    94c6:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    94c8:	2f ef       	ldi	r18, 0xFF	; 255
    94ca:	47 e1       	ldi	r20, 0x17	; 23
    94cc:	61 e0       	ldi	r22, 0x01	; 1
    94ce:	39 c0       	rjmp	.+114    	; 0x9542 <collision_detect_shot+0x262>
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    94d0:	c7 01       	movw	r24, r14
    94d2:	0e 94 ef 46 	call	0x8dde	; 0x8dde <recoil_sprite>
			switch (tile)
    94d6:	14 30       	cpi	r17, 0x04	; 4
    94d8:	79 f0       	breq	.+30     	; 0x94f8 <collision_detect_shot+0x218>
    94da:	18 f4       	brcc	.+6      	; 0x94e2 <collision_detect_shot+0x202>
    94dc:	13 30       	cpi	r17, 0x03	; 3
    94de:	31 f0       	breq	.+12     	; 0x94ec <collision_detect_shot+0x20c>
    94e0:	1f c0       	rjmp	.+62     	; 0x9520 <collision_detect_shot+0x240>
    94e2:	15 30       	cpi	r17, 0x05	; 5
    94e4:	b9 f0       	breq	.+46     	; 0x9514 <collision_detect_shot+0x234>
    94e6:	16 30       	cpi	r17, 0x06	; 6
    94e8:	79 f0       	breq	.+30     	; 0x9508 <collision_detect_shot+0x228>
    94ea:	1a c0       	rjmp	.+52     	; 0x9520 <collision_detect_shot+0x240>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    94ec:	f7 01       	movw	r30, r14
    94ee:	80 81       	ld	r24, Z
    94f0:	81 11       	cpse	r24, r1
    94f2:	06 c0       	rjmp	.+12     	; 0x9500 <collision_detect_shot+0x220>
						shot->shared.direction = D_RIGHT;
    94f4:	81 e0       	ldi	r24, 0x01	; 1
    94f6:	05 c0       	rjmp	.+10     	; 0x9502 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    94f8:	f7 01       	movw	r30, r14
    94fa:	80 81       	ld	r24, Z
    94fc:	88 23       	and	r24, r24
    94fe:	41 f0       	breq	.+16     	; 0x9510 <collision_detect_shot+0x230>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    9500:	82 e0       	ldi	r24, 0x02	; 2
    9502:	f7 01       	movw	r30, r14
    9504:	80 83       	st	Z, r24
    9506:	0c c0       	rjmp	.+24     	; 0x9520 <collision_detect_shot+0x240>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    9508:	f7 01       	movw	r30, r14
    950a:	80 81       	ld	r24, Z
    950c:	82 30       	cpi	r24, 0x02	; 2
    950e:	31 f4       	brne	.+12     	; 0x951c <collision_detect_shot+0x23c>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    9510:	83 e0       	ldi	r24, 0x03	; 3
    9512:	f7 cf       	rjmp	.-18     	; 0x9502 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    9514:	f7 01       	movw	r30, r14
    9516:	80 81       	ld	r24, Z
    9518:	82 30       	cpi	r24, 0x02	; 2
    951a:	61 f3       	breq	.-40     	; 0x94f4 <collision_detect_shot+0x214>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    951c:	f7 01       	movw	r30, r14
    951e:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    9520:	f7 01       	movw	r30, r14
    9522:	84 85       	ldd	r24, Z+12	; 0x0c
    9524:	81 50       	subi	r24, 0x01	; 1
    9526:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    9528:	81 11       	cpse	r24, r1
    952a:	08 c0       	rjmp	.+16     	; 0x953c <collision_detect_shot+0x25c>
			{
				init_shot_state(shot, shot->shot_type);
    952c:	62 85       	ldd	r22, Z+10	; 0x0a
    952e:	c7 01       	movw	r24, r14
    9530:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
				player->active_shots--;
    9534:	f6 01       	movw	r30, r12
    9536:	80 89       	ldd	r24, Z+16	; 0x10
    9538:	81 50       	subi	r24, 0x01	; 1
    953a:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_METAL;
    953c:	2f ef       	ldi	r18, 0xFF	; 255
    953e:	47 e1       	ldi	r20, 0x17	; 23
    9540:	66 e0       	ldi	r22, 0x06	; 6
    9542:	84 e0       	ldi	r24, 0x04	; 4
    9544:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
			break;
		}
	}
}
    9548:	0f 90       	pop	r0
    954a:	0f 90       	pop	r0
    954c:	0f 90       	pop	r0
    954e:	0f 90       	pop	r0
    9550:	0f 90       	pop	r0
    9552:	df 91       	pop	r29
    9554:	cf 91       	pop	r28
    9556:	1f 91       	pop	r17
    9558:	0f 91       	pop	r16
    955a:	ff 90       	pop	r15
    955c:	ef 90       	pop	r14
    955e:	df 90       	pop	r13
    9560:	cf 90       	pop	r12
    9562:	bf 90       	pop	r11
    9564:	af 90       	pop	r10
    9566:	9f 90       	pop	r9
    9568:	8f 90       	pop	r8
    956a:	7f 90       	pop	r7
    956c:	6f 90       	pop	r6
    956e:	08 95       	ret

00009570 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    9570:	fc 01       	movw	r30, r24
    9572:	8e e1       	ldi	r24, 0x1E	; 30
    9574:	48 9f       	mul	r20, r24
    9576:	a0 01       	movw	r20, r0
    9578:	11 24       	eor	r1, r1
    957a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    957c:	64 0f       	add	r22, r20
    957e:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9580:	21 11       	cpse	r18, r1
    9582:	09 c0       	rjmp	.+18     	; 0x9596 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    9584:	71 83       	std	Z+1, r23	; 0x01
    9586:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9588:	cb 01       	movw	r24, r22
    958a:	01 96       	adiw	r24, 0x01	; 1
    958c:	93 83       	std	Z+3, r25	; 0x03
    958e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9590:	6e 5f       	subi	r22, 0xFE	; 254
    9592:	7f 4f       	sbci	r23, 0xFF	; 255
    9594:	1c c0       	rjmp	.+56     	; 0x95ce <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    9596:	21 30       	cpi	r18, 0x01	; 1
    9598:	31 f4       	brne	.+12     	; 0x95a6 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    959a:	cb 01       	movw	r24, r22
    959c:	02 96       	adiw	r24, 0x02	; 2
    959e:	91 83       	std	Z+1, r25	; 0x01
    95a0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    95a2:	4e 96       	adiw	r24, 0x1e	; 30
    95a4:	07 c0       	rjmp	.+14     	; 0x95b4 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    95a6:	22 30       	cpi	r18, 0x02	; 2
    95a8:	51 f4       	brne	.+20     	; 0x95be <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    95aa:	cb 01       	movw	r24, r22
    95ac:	cc 96       	adiw	r24, 0x3c	; 60
    95ae:	91 83       	std	Z+1, r25	; 0x01
    95b0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    95b2:	01 96       	adiw	r24, 0x01	; 1
    95b4:	93 83       	std	Z+3, r25	; 0x03
    95b6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    95b8:	62 5c       	subi	r22, 0xC2	; 194
    95ba:	7f 4f       	sbci	r23, 0xFF	; 255
    95bc:	08 c0       	rjmp	.+16     	; 0x95ce <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    95be:	71 83       	std	Z+1, r23	; 0x01
    95c0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    95c2:	cb 01       	movw	r24, r22
    95c4:	4e 96       	adiw	r24, 0x1e	; 30
    95c6:	93 83       	std	Z+3, r25	; 0x03
    95c8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    95ca:	64 5c       	subi	r22, 0xC4	; 196
    95cc:	7f 4f       	sbci	r23, 0xFF	; 255
    95ce:	75 83       	std	Z+5, r23	; 0x05
    95d0:	64 83       	std	Z+4, r22	; 0x04
    95d2:	08 95       	ret

000095d4 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    95d4:	2f 92       	push	r2
    95d6:	3f 92       	push	r3
    95d8:	4f 92       	push	r4
    95da:	5f 92       	push	r5
    95dc:	6f 92       	push	r6
    95de:	7f 92       	push	r7
    95e0:	8f 92       	push	r8
    95e2:	9f 92       	push	r9
    95e4:	af 92       	push	r10
    95e6:	bf 92       	push	r11
    95e8:	cf 92       	push	r12
    95ea:	df 92       	push	r13
    95ec:	ef 92       	push	r14
    95ee:	ff 92       	push	r15
    95f0:	0f 93       	push	r16
    95f2:	1f 93       	push	r17
    95f4:	cf 93       	push	r28
    95f6:	df 93       	push	r29
    95f8:	cd b7       	in	r28, 0x3d	; 61
    95fa:	de b7       	in	r29, 0x3e	; 62
    95fc:	29 97       	sbiw	r28, 0x09	; 9
    95fe:	0f b6       	in	r0, 0x3f	; 63
    9600:	f8 94       	cli
    9602:	de bf       	out	0x3e, r29	; 62
    9604:	0f be       	out	0x3f, r0	; 63
    9606:	cd bf       	out	0x3d, r28	; 61
    9608:	7c 01       	movw	r14, r24
    960a:	3b 01       	movw	r6, r22
    960c:	14 2f       	mov	r17, r20
    960e:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    9610:	1a 82       	std	Y+2, r1	; 0x02
    9612:	19 82       	std	Y+1, r1	; 0x01
    9614:	1c 82       	std	Y+4, r1	; 0x04
    9616:	1b 82       	std	Y+3, r1	; 0x03
    9618:	1e 82       	std	Y+6, r1	; 0x06
    961a:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    961c:	20 e0       	ldi	r18, 0x00	; 0
    961e:	30 e0       	ldi	r19, 0x00	; 0
    9620:	40 e0       	ldi	r20, 0x00	; 0
    9622:	5e e3       	ldi	r21, 0x3E	; 62
    9624:	fc 01       	movw	r30, r24
    9626:	66 81       	ldd	r22, Z+6	; 0x06
    9628:	77 81       	ldd	r23, Z+7	; 0x07
    962a:	80 85       	ldd	r24, Z+8	; 0x08
    962c:	91 85       	ldd	r25, Z+9	; 0x09
    962e:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9632:	20 e0       	ldi	r18, 0x00	; 0
    9634:	30 e0       	ldi	r19, 0x00	; 0
    9636:	40 e4       	ldi	r20, 0x40	; 64
    9638:	50 e4       	ldi	r21, 0x40	; 64
    963a:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    963e:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    9642:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    9644:	20 e0       	ldi	r18, 0x00	; 0
    9646:	30 e0       	ldi	r19, 0x00	; 0
    9648:	40 e0       	ldi	r20, 0x00	; 0
    964a:	5e e3       	ldi	r21, 0x3E	; 62
    964c:	f7 01       	movw	r30, r14
    964e:	62 81       	ldd	r22, Z+2	; 0x02
    9650:	73 81       	ldd	r23, Z+3	; 0x03
    9652:	84 81       	ldd	r24, Z+4	; 0x04
    9654:	95 81       	ldd	r25, Z+5	; 0x05
    9656:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    965a:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    965e:	f7 01       	movw	r30, r14
    9660:	20 81       	ld	r18, Z
    9662:	4d 2d       	mov	r20, r13
    9664:	ce 01       	movw	r24, r28
    9666:	01 96       	adiw	r24, 0x01	; 1
    9668:	0e 94 b8 4a 	call	0x9570	; 0x9570 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    966c:	c7 01       	movw	r24, r14
    966e:	0e 94 50 48 	call	0x90a0	; 0x90a0 <collision_detect_boundries>
    9672:	88 23       	and	r24, r24
    9674:	31 f0       	breq	.+12     	; 0x9682 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    9676:	c7 01       	movw	r24, r14
    9678:	0e 94 ef 46 	call	0x8dde	; 0x8dde <recoil_sprite>
		player->shared.speed = 0;
    967c:	f7 01       	movw	r30, r14
    967e:	11 82       	std	Z+1, r1	; 0x01
    9680:	87 c0       	rjmp	.+270    	; 0x9790 <collision_detect_player+0x1bc>
    9682:	ce 01       	movw	r24, r28
    9684:	01 96       	adiw	r24, 0x01	; 1
    9686:	6c 01       	movw	r12, r24
    9688:	4e 01       	movw	r8, r28
    968a:	97 e0       	ldi	r25, 0x07	; 7
    968c:	89 0e       	add	r8, r25
    968e:	91 1c       	adc	r9, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9690:	8e e1       	ldi	r24, 0x1E	; 30
    9692:	a8 2e       	mov	r10, r24
    9694:	b1 2c       	mov	r11, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    9696:	33 24       	eor	r3, r3
    9698:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    969a:	eb e0       	ldi	r30, 0x0B	; 11
    969c:	e1 0f       	add	r30, r17
    969e:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    96a0:	fa e0       	ldi	r31, 0x0A	; 10
    96a2:	f1 0f       	add	r31, r17
    96a4:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    96a6:	f6 01       	movw	r30, r12
    96a8:	40 80       	ld	r4, Z
    96aa:	51 80       	ldd	r5, Z+1	; 0x01
    96ac:	c2 01       	movw	r24, r4
    96ae:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <solid_square_tile>
    96b2:	81 11       	cpse	r24, r1
    96b4:	18 c0       	rjmp	.+48     	; 0x96e6 <collision_detect_player+0x112>
    96b6:	f7 01       	movw	r30, r14
    96b8:	66 81       	ldd	r22, Z+6	; 0x06
    96ba:	77 81       	ldd	r23, Z+7	; 0x07
    96bc:	80 85       	ldd	r24, Z+8	; 0x08
    96be:	91 85       	ldd	r25, Z+9	; 0x09
    96c0:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    96c4:	46 2f       	mov	r20, r22
    96c6:	f7 01       	movw	r30, r14
    96c8:	62 81       	ldd	r22, Z+2	; 0x02
    96ca:	73 81       	ldd	r23, Z+3	; 0x03
    96cc:	84 81       	ldd	r24, Z+4	; 0x04
    96ce:	95 81       	ldd	r25, Z+5	; 0x05
    96d0:	49 87       	std	Y+9, r20	; 0x09
    96d2:	0e 94 a2 54 	call	0xa944	; 0xa944 <__fixunssfsi>
    96d6:	0e e0       	ldi	r16, 0x0E	; 14
    96d8:	27 e0       	ldi	r18, 0x07	; 7
    96da:	49 85       	ldd	r20, Y+9	; 0x09
    96dc:	c2 01       	movw	r24, r4
    96de:	0e 94 67 47 	call	0x8ece	; 0x8ece <solid_directional_tile>
    96e2:	88 23       	and	r24, r24
    96e4:	31 f0       	breq	.+12     	; 0x96f2 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    96e6:	c7 01       	movw	r24, r14
    96e8:	0e 94 ef 46 	call	0x8dde	; 0x8dde <recoil_sprite>
			player->shared.speed = 0;
    96ec:	f7 01       	movw	r30, r14
    96ee:	11 82       	std	Z+1, r1	; 0x01
    96f0:	48 c0       	rjmp	.+144    	; 0x9782 <collision_detect_player+0x1ae>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    96f2:	f2 01       	movw	r30, r4
    96f4:	e0 5a       	subi	r30, 0xA0	; 160
    96f6:	f3 4f       	sbci	r31, 0xF3	; 243
    96f8:	81 81       	ldd	r24, Z+1	; 0x01
    96fa:	87 30       	cpi	r24, 0x07	; 7
    96fc:	51 f4       	brne	.+20     	; 0x9712 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    96fe:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    9700:	80 e5       	ldi	r24, 0x50	; 80
    9702:	f7 01       	movw	r30, r14
    9704:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    9706:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    9708:	40 e0       	ldi	r20, 0x00	; 0
    970a:	51 e2       	ldi	r21, 0x21	; 33
    970c:	61 e0       	ldi	r22, 0x01	; 1
    970e:	88 85       	ldd	r24, Y+8	; 0x08
    9710:	09 c0       	rjmp	.+18     	; 0x9724 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    9712:	89 30       	cpi	r24, 0x09	; 9
    9714:	a9 f4       	brne	.+42     	; 0x9740 <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9716:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    9718:	f7 01       	movw	r30, r14
    971a:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    971c:	4a ef       	ldi	r20, 0xFA	; 250
    971e:	50 e2       	ldi	r21, 0x20	; 32
    9720:	61 e0       	ldi	r22, 0x01	; 1
    9722:	8f 81       	ldd	r24, Y+7	; 0x07
    9724:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9728:	f6 01       	movw	r30, r12
    972a:	80 81       	ld	r24, Z
    972c:	91 81       	ldd	r25, Z+1	; 0x01
    972e:	b5 01       	movw	r22, r10
    9730:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    9734:	6d 5f       	subi	r22, 0xFD	; 253
    9736:	40 e0       	ldi	r20, 0x00	; 0
    9738:	50 e0       	ldi	r21, 0x00	; 0
    973a:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
    973e:	1b c0       	rjmp	.+54     	; 0x9776 <collision_detect_player+0x1a2>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    9740:	88 30       	cpi	r24, 0x08	; 8
    9742:	f9 f4       	brne	.+62     	; 0x9782 <collision_detect_player+0x1ae>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9744:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9746:	c2 01       	movw	r24, r4
    9748:	b5 01       	movw	r22, r10
    974a:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    974e:	6d 5f       	subi	r22, 0xFD	; 253
    9750:	40 e0       	ldi	r20, 0x00	; 0
    9752:	50 e0       	ldi	r21, 0x00	; 0
    9754:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
			player->level_score++;
    9758:	f7 01       	movw	r30, r14
    975a:	87 85       	ldd	r24, Z+15	; 0x0f
    975c:	8f 5f       	subi	r24, 0xFF	; 255
    975e:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    9760:	86 85       	ldd	r24, Z+14	; 0x0e
    9762:	8f 5f       	subi	r24, 0xFF	; 255
    9764:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    9766:	61 2f       	mov	r22, r17
    9768:	c7 01       	movw	r24, r14
    976a:	0e 94 29 45 	call	0x8a52	; 0x8a52 <render_score>
			kill_player(other_player, other_player_hud_x);
    976e:	62 2d       	mov	r22, r2
    9770:	c3 01       	movw	r24, r6
    9772:	0e 94 9e 48 	call	0x913c	; 0x913c <kill_player>
			SFX_ITEM;
    9776:	2f ef       	ldi	r18, 0xFF	; 255
    9778:	47 e1       	ldi	r20, 0x17	; 23
    977a:	63 e0       	ldi	r22, 0x03	; 3
    977c:	84 e0       	ldi	r24, 0x04	; 4
    977e:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
    9782:	f2 e0       	ldi	r31, 0x02	; 2
    9784:	cf 0e       	add	r12, r31
    9786:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    9788:	c8 14       	cp	r12, r8
    978a:	d9 04       	cpc	r13, r9
    978c:	09 f0       	breq	.+2      	; 0x9790 <collision_detect_player+0x1bc>
    978e:	8b cf       	rjmp	.-234    	; 0x96a6 <collision_detect_player+0xd2>
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
			SFX_ITEM;
		}
	}
}
    9790:	29 96       	adiw	r28, 0x09	; 9
    9792:	0f b6       	in	r0, 0x3f	; 63
    9794:	f8 94       	cli
    9796:	de bf       	out	0x3e, r29	; 62
    9798:	0f be       	out	0x3f, r0	; 63
    979a:	cd bf       	out	0x3d, r28	; 61
    979c:	df 91       	pop	r29
    979e:	cf 91       	pop	r28
    97a0:	1f 91       	pop	r17
    97a2:	0f 91       	pop	r16
    97a4:	ff 90       	pop	r15
    97a6:	ef 90       	pop	r14
    97a8:	df 90       	pop	r13
    97aa:	cf 90       	pop	r12
    97ac:	bf 90       	pop	r11
    97ae:	af 90       	pop	r10
    97b0:	9f 90       	pop	r9
    97b2:	8f 90       	pop	r8
    97b4:	7f 90       	pop	r7
    97b6:	6f 90       	pop	r6
    97b8:	5f 90       	pop	r5
    97ba:	4f 90       	pop	r4
    97bc:	3f 90       	pop	r3
    97be:	2f 90       	pop	r2
    97c0:	08 95       	ret

000097c2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    97c2:	bf 92       	push	r11
    97c4:	cf 92       	push	r12
    97c6:	df 92       	push	r13
    97c8:	ef 92       	push	r14
    97ca:	ff 92       	push	r15
    97cc:	0f 93       	push	r16
    97ce:	1f 93       	push	r17
    97d0:	cf 93       	push	r28
    97d2:	df 93       	push	r29
    97d4:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    97d6:	c0 e0       	ldi	r28, 0x00	; 0
    97d8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    97da:	0e e1       	ldi	r16, 0x1E	; 30
    97dc:	10 e0       	ldi	r17, 0x00	; 0
    97de:	ce 01       	movw	r24, r28
    97e0:	b8 01       	movw	r22, r16
    97e2:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
		y = 3 + i / 30;
    97e6:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    97e8:	bb 20       	and	r11, r11
    97ea:	19 f0       	breq	.+6      	; 0x97f2 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    97ec:	49 e0       	ldi	r20, 0x09	; 9
    97ee:	51 e2       	ldi	r21, 0x21	; 33
    97f0:	11 c0       	rjmp	.+34     	; 0x9814 <load_level_tiles+0x52>
    97f2:	fe 01       	movw	r30, r28
    97f4:	e0 5a       	subi	r30, 0xA0	; 160
    97f6:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    97f8:	e1 81       	ldd	r30, Z+1	; 0x01
    97fa:	ce 2e       	mov	r12, r30
    97fc:	d1 2c       	mov	r13, r1
    97fe:	f6 01       	movw	r30, r12
    9800:	31 97       	sbiw	r30, 0x01	; 1
    9802:	e9 30       	cpi	r30, 0x09	; 9
    9804:	f1 05       	cpc	r31, r1
    9806:	08 f5       	brcc	.+66     	; 0x984a <load_level_tiles+0x88>
    9808:	e8 5c       	subi	r30, 0xC8	; 200
    980a:	ff 4f       	sbci	r31, 0xFF	; 255
    980c:	0c 94 cb 53 	jmp	0xa796	; 0xa796 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    9810:	46 e0       	ldi	r20, 0x06	; 6
    9812:	51 e2       	ldi	r21, 0x21	; 33
    9814:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
    9818:	1c c0       	rjmp	.+56     	; 0x9852 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    981a:	43 e0       	ldi	r20, 0x03	; 3
    981c:	51 e2       	ldi	r21, 0x21	; 33
    981e:	fa cf       	rjmp	.-12     	; 0x9814 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    9820:	4e ee       	ldi	r20, 0xEE	; 238
    9822:	50 e2       	ldi	r21, 0x20	; 32
    9824:	f7 cf       	rjmp	.-18     	; 0x9814 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    9826:	48 ee       	ldi	r20, 0xE8	; 232
    9828:	50 e2       	ldi	r21, 0x20	; 32
    982a:	f4 cf       	rjmp	.-24     	; 0x9814 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    982c:	45 ee       	ldi	r20, 0xE5	; 229
    982e:	50 e2       	ldi	r21, 0x20	; 32
    9830:	f1 cf       	rjmp	.-30     	; 0x9814 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    9832:	4b ee       	ldi	r20, 0xEB	; 235
    9834:	50 e2       	ldi	r21, 0x20	; 32
    9836:	ee cf       	rjmp	.-36     	; 0x9814 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    9838:	40 e0       	ldi	r20, 0x00	; 0
    983a:	51 e2       	ldi	r21, 0x21	; 33
    983c:	eb cf       	rjmp	.-42     	; 0x9814 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    983e:	4d ef       	ldi	r20, 0xFD	; 253
    9840:	50 e2       	ldi	r21, 0x20	; 32
    9842:	e8 cf       	rjmp	.-48     	; 0x9814 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    9844:	4a ef       	ldi	r20, 0xFA	; 250
    9846:	50 e2       	ldi	r21, 0x20	; 32
    9848:	e5 cf       	rjmp	.-54     	; 0x9814 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    984a:	40 e0       	ldi	r20, 0x00	; 0
    984c:	50 e0       	ldi	r21, 0x00	; 0
    984e:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    9852:	21 96       	adiw	r28, 0x01	; 1
    9854:	ce 3e       	cpi	r28, 0xEE	; 238
    9856:	82 e0       	ldi	r24, 0x02	; 2
    9858:	d8 07       	cpc	r29, r24
    985a:	09 f6       	brne	.-126    	; 0x97de <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    985c:	df 91       	pop	r29
    985e:	cf 91       	pop	r28
    9860:	1f 91       	pop	r17
    9862:	0f 91       	pop	r16
    9864:	ff 90       	pop	r15
    9866:	ef 90       	pop	r14
    9868:	df 90       	pop	r13
    986a:	cf 90       	pop	r12
    986c:	bf 90       	pop	r11
    986e:	08 95       	ret

00009870 <load_level>:

void load_level(int level_number)
{
    9870:	9f 92       	push	r9
    9872:	af 92       	push	r10
    9874:	bf 92       	push	r11
    9876:	cf 92       	push	r12
    9878:	df 92       	push	r13
    987a:	ef 92       	push	r14
    987c:	ff 92       	push	r15
    987e:	0f 93       	push	r16
    9880:	1f 93       	push	r17
    9882:	cf 93       	push	r28
    9884:	df 93       	push	r29
    9886:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    9888:	8e ee       	ldi	r24, 0xEE	; 238
    988a:	92 e0       	ldi	r25, 0x02	; 2
    988c:	c8 9f       	mul	r28, r24
    988e:	70 01       	movw	r14, r0
    9890:	c9 9f       	mul	r28, r25
    9892:	f0 0c       	add	r15, r0
    9894:	d8 9f       	mul	r29, r24
    9896:	f0 0c       	add	r15, r0
    9898:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    989a:	83 e0       	ldi	r24, 0x03	; 3
    989c:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    98a0:	0e 94 e6 43 	call	0x87cc	; 0x87cc <clear_sprites>
	game.current_level = level_number;
    98a4:	c0 93 c2 0b 	sts	0x0BC2, r28
    98a8:	81 e6       	ldi	r24, 0x61	; 97
    98aa:	c8 2e       	mov	r12, r24
    98ac:	8c e0       	ldi	r24, 0x0C	; 12
    98ae:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    98b0:	c0 e0       	ldi	r28, 0x00	; 0
    98b2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    98b4:	0e e1       	ldi	r16, 0x1E	; 30
    98b6:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    98b8:	92 e3       	ldi	r25, 0x32	; 50
    98ba:	99 2e       	mov	r9, r25
    98bc:	fe 01       	movw	r30, r28
    98be:	ee 0d       	add	r30, r14
    98c0:	ff 1d       	adc	r31, r15
    98c2:	e1 5c       	subi	r30, 0xC1	; 193
    98c4:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    98c6:	e4 91       	lpm	r30, Z
    98c8:	56 01       	movw	r10, r12
    98ca:	d6 01       	movw	r26, r12
    98cc:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    98ce:	e8 35       	cpi	r30, 0x58	; 88
    98d0:	01 f5       	brne	.+64     	; 0x9912 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    98d2:	ce 01       	movw	r24, r28
    98d4:	b8 01       	movw	r22, r16
    98d6:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    98da:	88 0f       	add	r24, r24
    98dc:	88 0f       	add	r24, r24
    98de:	88 0f       	add	r24, r24
    98e0:	80 93 ef 0b 	sts	0x0BEF, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    98e4:	6d 5f       	subi	r22, 0xFD	; 253
    98e6:	7f 4f       	sbci	r23, 0xFF	; 255
    98e8:	66 0f       	add	r22, r22
    98ea:	66 0f       	add	r22, r22
    98ec:	66 0f       	add	r22, r22
    98ee:	60 93 f0 0b 	sts	0x0BF0, r22
			player1.level_score = 0;
    98f2:	10 92 ed 0b 	sts	0x0BED, r1
			player1.has_over_speed = false;
    98f6:	10 92 f7 0b 	sts	0x0BF7, r1
			player1.has_rocket = false;
    98fa:	10 92 f6 0b 	sts	0x0BF6, r1
			player1.max_speed = MAX_SPEED;
    98fe:	90 92 f5 0b 	sts	0x0BF5, r9
			player_init_shot_state(&player1);
    9902:	8e ed       	ldi	r24, 0xDE	; 222
    9904:	9b e0       	ldi	r25, 0x0B	; 11
    9906:	0e 94 89 43 	call	0x8712	; 0x8712 <player_init_shot_state>
			player_spawn(&player1);
    990a:	8e ed       	ldi	r24, 0xDE	; 222
    990c:	9b e0       	ldi	r25, 0x0B	; 11
    990e:	0e 94 ad 43 	call	0x875a	; 0x875a <player_spawn>
    9912:	bf ef       	ldi	r27, 0xFF	; 255
    9914:	cb 1a       	sub	r12, r27
    9916:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    9918:	f5 01       	movw	r30, r10
    991a:	80 81       	ld	r24, Z
    991c:	83 36       	cpi	r24, 0x63	; 99
    991e:	01 f5       	brne	.+64     	; 0x9960 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    9920:	ce 01       	movw	r24, r28
    9922:	b8 01       	movw	r22, r16
    9924:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    9928:	88 0f       	add	r24, r24
    992a:	88 0f       	add	r24, r24
    992c:	88 0f       	add	r24, r24
    992e:	80 93 60 0f 	sts	0x0F60, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    9932:	6d 5f       	subi	r22, 0xFD	; 253
    9934:	7f 4f       	sbci	r23, 0xFF	; 255
    9936:	66 0f       	add	r22, r22
    9938:	66 0f       	add	r22, r22
    993a:	66 0f       	add	r22, r22
    993c:	60 93 61 0f 	sts	0x0F61, r22
			player2.level_score = 0;
    9940:	10 92 5e 0f 	sts	0x0F5E, r1
			player2.has_over_speed = false;
    9944:	10 92 68 0f 	sts	0x0F68, r1
			player2.has_rocket = false;
    9948:	10 92 67 0f 	sts	0x0F67, r1
			player2.max_speed = MAX_SPEED;
    994c:	90 92 66 0f 	sts	0x0F66, r9
			player_init_shot_state(&player2);
    9950:	8f e4       	ldi	r24, 0x4F	; 79
    9952:	9f e0       	ldi	r25, 0x0F	; 15
    9954:	0e 94 89 43 	call	0x8712	; 0x8712 <player_init_shot_state>
			player_spawn(&player2);
    9958:	8f e4       	ldi	r24, 0x4F	; 79
    995a:	9f e0       	ldi	r25, 0x0F	; 15
    995c:	0e 94 ad 43 	call	0x875a	; 0x875a <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    9960:	21 96       	adiw	r28, 0x01	; 1
    9962:	ce 3e       	cpi	r28, 0xEE	; 238
    9964:	f2 e0       	ldi	r31, 0x02	; 2
    9966:	df 07       	cpc	r29, r31
    9968:	09 f0       	breq	.+2      	; 0x996c <load_level+0xfc>
    996a:	a8 cf       	rjmp	.-176    	; 0x98bc <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    996c:	60 e0       	ldi	r22, 0x00	; 0
    996e:	8e ed       	ldi	r24, 0xDE	; 222
    9970:	9b e0       	ldi	r25, 0x0B	; 11
    9972:	0e 94 0c 45 	call	0x8a18	; 0x8a18 <render_hud>
	render_hud(&player2, 15);
    9976:	6f e0       	ldi	r22, 0x0F	; 15
    9978:	8f e4       	ldi	r24, 0x4F	; 79
    997a:	9f e0       	ldi	r25, 0x0F	; 15
    997c:	0e 94 0c 45 	call	0x8a18	; 0x8a18 <render_hud>
	render_score(&player1, 0);
    9980:	60 e0       	ldi	r22, 0x00	; 0
    9982:	8e ed       	ldi	r24, 0xDE	; 222
    9984:	9b e0       	ldi	r25, 0x0B	; 11
    9986:	0e 94 29 45 	call	0x8a52	; 0x8a52 <render_score>
	render_score(&player2, 15);
    998a:	6f e0       	ldi	r22, 0x0F	; 15
    998c:	8f e4       	ldi	r24, 0x4F	; 79
    998e:	9f e0       	ldi	r25, 0x0F	; 15
    9990:	0e 94 29 45 	call	0x8a52	; 0x8a52 <render_score>
	Print(14, 0, strVertSep);
    9994:	40 e7       	ldi	r20, 0x70	; 112
    9996:	52 e0       	ldi	r21, 0x02	; 2
    9998:	60 e0       	ldi	r22, 0x00	; 0
    999a:	70 e0       	ldi	r23, 0x00	; 0
    999c:	8e e0       	ldi	r24, 0x0E	; 14
    999e:	90 e0       	ldi	r25, 0x00	; 0
    99a0:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(14, 1, strVertSep);
    99a4:	40 e7       	ldi	r20, 0x70	; 112
    99a6:	52 e0       	ldi	r21, 0x02	; 2
    99a8:	61 e0       	ldi	r22, 0x01	; 1
    99aa:	70 e0       	ldi	r23, 0x00	; 0
    99ac:	8e e0       	ldi	r24, 0x0E	; 14
    99ae:	90 e0       	ldi	r25, 0x00	; 0
    99b0:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(14, 2, strVertSep);
    99b4:	40 e7       	ldi	r20, 0x70	; 112
    99b6:	52 e0       	ldi	r21, 0x02	; 2
    99b8:	62 e0       	ldi	r22, 0x02	; 2
    99ba:	70 e0       	ldi	r23, 0x00	; 0
    99bc:	8e e0       	ldi	r24, 0x0E	; 14
    99be:	90 e0       	ldi	r25, 0x00	; 0
    99c0:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	load_level_tiles(false);
    99c4:	80 e0       	ldi	r24, 0x00	; 0
    99c6:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <load_level_tiles>
	SFX_LEVEL_START;
    99ca:	2f ef       	ldi	r18, 0xFF	; 255
    99cc:	47 e1       	ldi	r20, 0x17	; 23
    99ce:	65 e0       	ldi	r22, 0x05	; 5
    99d0:	84 e0       	ldi	r24, 0x04	; 4
}
    99d2:	df 91       	pop	r29
    99d4:	cf 91       	pop	r28
    99d6:	1f 91       	pop	r17
    99d8:	0f 91       	pop	r16
    99da:	ff 90       	pop	r15
    99dc:	ef 90       	pop	r14
    99de:	df 90       	pop	r13
    99e0:	cf 90       	pop	r12
    99e2:	bf 90       	pop	r11
    99e4:	af 90       	pop	r10
    99e6:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    99e8:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <TriggerNote>

000099ec <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    99ec:	cf 93       	push	r28
    99ee:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    99f0:	61 e0       	ldi	r22, 0x01	; 1
    99f2:	83 e0       	ldi	r24, 0x03	; 3
    99f4:	0e 94 b9 40 	call	0x8172	; 0x8172 <FadeOut>
	ClearVram();
    99f8:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ClearVram>
	clear_sprites();
    99fc:	0e 94 e6 43 	call	0x87cc	; 0x87cc <clear_sprites>
	Print(9, 12, &strLevels[index*12]);
    9a00:	8c e0       	ldi	r24, 0x0C	; 12
    9a02:	c8 9f       	mul	r28, r24
    9a04:	a0 01       	movw	r20, r0
    9a06:	11 24       	eor	r1, r1
    9a08:	4a 50       	subi	r20, 0x0A	; 10
    9a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    9a0c:	6c e0       	ldi	r22, 0x0C	; 12
    9a0e:	70 e0       	ldi	r23, 0x00	; 0
    9a10:	89 e0       	ldi	r24, 0x09	; 9
    9a12:	90 e0       	ldi	r25, 0x00	; 0
    9a14:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	FadeIn(1, true);
    9a18:	61 e0       	ldi	r22, 0x01	; 1
    9a1a:	81 e0       	ldi	r24, 0x01	; 1
    9a1c:	0e 94 ad 40 	call	0x815a	; 0x815a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    9a20:	82 e0       	ldi	r24, 0x02	; 2
    9a22:	0e 94 ad 42 	call	0x855a	; 0x855a <LBWaitSeconds>
	FadeOut(1, true);
    9a26:	61 e0       	ldi	r22, 0x01	; 1
    9a28:	81 e0       	ldi	r24, 0x01	; 1
    9a2a:	0e 94 b9 40 	call	0x8172	; 0x8172 <FadeOut>
	ClearVram();
    9a2e:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9a32:	60 e0       	ldi	r22, 0x00	; 0
    9a34:	83 e0       	ldi	r24, 0x03	; 3
    9a36:	0e 94 ad 40 	call	0x815a	; 0x815a <FadeIn>
	load_level(index);
    9a3a:	8c 2f       	mov	r24, r28
    9a3c:	90 e0       	ldi	r25, 0x00	; 0
}
    9a3e:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    9a40:	0c 94 38 4c 	jmp	0x9870	; 0x9870 <load_level>

00009a44 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    9a44:	10 92 c1 0b 	sts	0x0BC1, r1
	clear_sprites();
    9a48:	0e 94 e6 43 	call	0x87cc	; 0x87cc <clear_sprites>
	Print(7, 13, str1Player);
    9a4c:	45 ea       	ldi	r20, 0xA5	; 165
    9a4e:	52 e0       	ldi	r21, 0x02	; 2
    9a50:	6d e0       	ldi	r22, 0x0D	; 13
    9a52:	70 e0       	ldi	r23, 0x00	; 0
    9a54:	87 e0       	ldi	r24, 0x07	; 7
    9a56:	90 e0       	ldi	r25, 0x00	; 0
    9a58:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(7, 14, str2Player);
    9a5c:	44 e9       	ldi	r20, 0x94	; 148
    9a5e:	52 e0       	ldi	r21, 0x02	; 2
    9a60:	6e e0       	ldi	r22, 0x0E	; 14
    9a62:	70 e0       	ldi	r23, 0x00	; 0
    9a64:	87 e0       	ldi	r24, 0x07	; 7
    9a66:	90 e0       	ldi	r25, 0x00	; 0
    9a68:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(7, 15, strHighscores);
    9a6c:	4a e8       	ldi	r20, 0x8A	; 138
    9a6e:	52 e0       	ldi	r21, 0x02	; 2
    9a70:	6f e0       	ldi	r22, 0x0F	; 15
    9a72:	70 e0       	ldi	r23, 0x00	; 0
    9a74:	87 e0       	ldi	r24, 0x07	; 7
    9a76:	90 e0       	ldi	r25, 0x00	; 0
    9a78:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(4, 26, strCopyright);
    9a7c:	43 eb       	ldi	r20, 0xB3	; 179
    9a7e:	52 e0       	ldi	r21, 0x02	; 2
    9a80:	6a e1       	ldi	r22, 0x1A	; 26
    9a82:	70 e0       	ldi	r23, 0x00	; 0
    9a84:	84 e0       	ldi	r24, 0x04	; 4
    9a86:	90 e0       	ldi	r25, 0x00	; 0
    9a88:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    9a8c:	4a e4       	ldi	r20, 0x4A	; 74
    9a8e:	51 e2       	ldi	r21, 0x21	; 33
    9a90:	65 e0       	ldi	r22, 0x05	; 5
    9a92:	84 e0       	ldi	r24, 0x04	; 4
    9a94:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    9a98:	40 e0       	ldi	r20, 0x00	; 0
    9a9a:	67 e9       	ldi	r22, 0x97	; 151
    9a9c:	70 e2       	ldi	r23, 0x20	; 32
    9a9e:	80 e0       	ldi	r24, 0x00	; 0
    9aa0:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	SFX_SPLASH;
    9aa4:	2f ef       	ldi	r18, 0xFF	; 255
    9aa6:	47 e1       	ldi	r20, 0x17	; 23
    9aa8:	69 e0       	ldi	r22, 0x09	; 9
    9aaa:	84 e0       	ldi	r24, 0x04	; 4
    9aac:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <TriggerNote>

00009ab0 <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    9ab0:	ef 92       	push	r14
    9ab2:	ff 92       	push	r15
    9ab4:	0f 93       	push	r16
    9ab6:	1f 93       	push	r17
    9ab8:	cf 93       	push	r28
    9aba:	df 93       	push	r29
    9abc:	1f 92       	push	r1
    9abe:	cd b7       	in	r28, 0x3d	; 61
    9ac0:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    9ac2:	81 e0       	ldi	r24, 0x01	; 1
    9ac4:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    9ac8:	0e 94 e6 43 	call	0x87cc	; 0x87cc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    9acc:	40 e0       	ldi	r20, 0x00	; 0
    9ace:	66 ed       	ldi	r22, 0xD6	; 214
    9ad0:	70 e2       	ldi	r23, 0x20	; 32
    9ad2:	80 e0       	ldi	r24, 0x00	; 0
    9ad4:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9ad8:	40 e0       	ldi	r20, 0x00	; 0
    9ada:	6e eb       	ldi	r22, 0xBE	; 190
    9adc:	70 e2       	ldi	r23, 0x20	; 32
    9ade:	84 e0       	ldi	r24, 0x04	; 4
    9ae0:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    9ae4:	02 e0       	ldi	r16, 0x02	; 2
    9ae6:	22 e0       	ldi	r18, 0x02	; 2
    9ae8:	48 e0       	ldi	r20, 0x08	; 8
    9aea:	68 e3       	ldi	r22, 0x38	; 56
    9aec:	80 e0       	ldi	r24, 0x00	; 0
    9aee:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    9af2:	22 e0       	ldi	r18, 0x02	; 2
    9af4:	48 e0       	ldi	r20, 0x08	; 8
    9af6:	60 ea       	ldi	r22, 0xA0	; 160
    9af8:	84 e0       	ldi	r24, 0x04	; 4
    9afa:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
	Print(10, 2, strHighscores);
    9afe:	4a e8       	ldi	r20, 0x8A	; 138
    9b00:	52 e0       	ldi	r21, 0x02	; 2
    9b02:	62 e0       	ldi	r22, 0x02	; 2
    9b04:	70 e0       	ldi	r23, 0x00	; 0
    9b06:	8a e0       	ldi	r24, 0x0A	; 10
    9b08:	90 e0       	ldi	r25, 0x00	; 0
    9b0a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    9b0e:	09 e0       	ldi	r16, 0x09	; 9
    9b10:	11 e0       	ldi	r17, 0x01	; 1
    9b12:	87 e0       	ldi	r24, 0x07	; 7
    9b14:	e8 2e       	mov	r14, r24
    9b16:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    9b18:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    9b1a:	20 e0       	ldi	r18, 0x00	; 0
    9b1c:	43 2f       	mov	r20, r19
    9b1e:	b7 01       	movw	r22, r14
    9b20:	82 e0       	ldi	r24, 0x02	; 2
    9b22:	90 e0       	ldi	r25, 0x00	; 0
    9b24:	39 83       	std	Y+1, r19	; 0x01
    9b26:	0e 94 37 40 	call	0x806e	; 0x806e <PrintByte>
		PrintChar(3, y, '.');
    9b2a:	4e e2       	ldi	r20, 0x2E	; 46
    9b2c:	b7 01       	movw	r22, r14
    9b2e:	83 e0       	ldi	r24, 0x03	; 3
    9b30:	90 e0       	ldi	r25, 0x00	; 0
    9b32:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
    9b36:	f8 01       	movw	r30, r16
    9b38:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    9b3a:	80 81       	ld	r24, Z
    9b3c:	93 e0       	ldi	r25, 0x03	; 3
    9b3e:	89 9f       	mul	r24, r25
    9b40:	a0 01       	movw	r20, r0
    9b42:	11 24       	eor	r1, r1
    9b44:	4a 5d       	subi	r20, 0xDA	; 218
    9b46:	5e 4f       	sbci	r21, 0xFE	; 254
    9b48:	23 e0       	ldi	r18, 0x03	; 3
    9b4a:	6e 2d       	mov	r22, r14
    9b4c:	85 e0       	ldi	r24, 0x05	; 5
    9b4e:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
		Print(9, y, strOwns);
    9b52:	44 e3       	ldi	r20, 0x34	; 52
    9b54:	52 e0       	ldi	r21, 0x02	; 2
    9b56:	b7 01       	movw	r22, r14
    9b58:	89 e0       	ldi	r24, 0x09	; 9
    9b5a:	90 e0       	ldi	r25, 0x00	; 0
    9b5c:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    9b60:	f8 01       	movw	r30, r16
    9b62:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    9b64:	80 81       	ld	r24, Z
    9b66:	e3 e0       	ldi	r30, 0x03	; 3
    9b68:	8e 9f       	mul	r24, r30
    9b6a:	a0 01       	movw	r20, r0
    9b6c:	11 24       	eor	r1, r1
    9b6e:	4a 5d       	subi	r20, 0xDA	; 218
    9b70:	5e 4f       	sbci	r21, 0xFE	; 254
    9b72:	23 e0       	ldi	r18, 0x03	; 3
    9b74:	6e 2d       	mov	r22, r14
    9b76:	8e e0       	ldi	r24, 0x0E	; 14
    9b78:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
		Print(18, y, strBy);
    9b7c:	41 e3       	ldi	r20, 0x31	; 49
    9b7e:	52 e0       	ldi	r21, 0x02	; 2
    9b80:	b7 01       	movw	r22, r14
    9b82:	82 e1       	ldi	r24, 0x12	; 18
    9b84:	90 e0       	ldi	r25, 0x00	; 0
    9b86:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    9b8a:	f8 01       	movw	r30, r16
    9b8c:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    9b8e:	21 e0       	ldi	r18, 0x01	; 1
    9b90:	40 81       	ld	r20, Z
    9b92:	b7 01       	movw	r22, r14
    9b94:	87 e1       	ldi	r24, 0x17	; 23
    9b96:	90 e0       	ldi	r25, 0x00	; 0
    9b98:	0e 94 37 40 	call	0x806e	; 0x806e <PrintByte>
		PrintChar(24, y, '-');
    9b9c:	4d e2       	ldi	r20, 0x2D	; 45
    9b9e:	b7 01       	movw	r22, r14
    9ba0:	88 e1       	ldi	r24, 0x18	; 24
    9ba2:	90 e0       	ldi	r25, 0x00	; 0
    9ba4:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    9ba8:	21 e0       	ldi	r18, 0x01	; 1
    9baa:	f8 01       	movw	r30, r16
    9bac:	40 81       	ld	r20, Z
    9bae:	b7 01       	movw	r22, r14
    9bb0:	8b e1       	ldi	r24, 0x1B	; 27
    9bb2:	90 e0       	ldi	r25, 0x00	; 0
    9bb4:	0e 94 37 40 	call	0x806e	; 0x806e <PrintByte>
		y += 3;
		rank += 1;
    9bb8:	39 81       	ldd	r19, Y+1	; 0x01
    9bba:	3f 5f       	subi	r19, 0xFF	; 255
    9bbc:	f3 e0       	ldi	r31, 0x03	; 3
    9bbe:	ef 0e       	add	r14, r31
    9bc0:	f1 1c       	adc	r15, r1
    9bc2:	0c 5f       	subi	r16, 0xFC	; 252
    9bc4:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    9bc6:	36 30       	cpi	r19, 0x06	; 6
    9bc8:	09 f0       	breq	.+2      	; 0x9bcc <load_tank_rank+0x11c>
    9bca:	a7 cf       	rjmp	.-178    	; 0x9b1a <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    9bcc:	48 e4       	ldi	r20, 0x48	; 72
    9bce:	52 e0       	ldi	r21, 0x02	; 2
    9bd0:	67 e1       	ldi	r22, 0x17	; 23
    9bd2:	70 e0       	ldi	r23, 0x00	; 0
    9bd4:	8a e0       	ldi	r24, 0x0A	; 10
    9bd6:	90 e0       	ldi	r25, 0x00	; 0
}
    9bd8:	0f 90       	pop	r0
    9bda:	df 91       	pop	r29
    9bdc:	cf 91       	pop	r28
    9bde:	1f 91       	pop	r17
    9be0:	0f 91       	pop	r16
    9be2:	ff 90       	pop	r15
    9be4:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    9be6:	0c 94 6a 40 	jmp	0x80d4	; 0x80d4 <Print>

00009bea <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    9bea:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <fade_through>
	SetSpriteVisibility(true);
    9bee:	81 e0       	ldi	r24, 0x01	; 1
    9bf0:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <SetSpriteVisibility>
	init_game_state();
    9bf4:	0e 94 98 43 	call	0x8730	; 0x8730 <init_game_state>
	load_tank_rank();
    9bf8:	0c 94 58 4d 	jmp	0x9ab0	; 0x9ab0 <load_tank_rank>

00009bfc <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    9bfc:	af 92       	push	r10
    9bfe:	bf 92       	push	r11
    9c00:	cf 92       	push	r12
    9c02:	df 92       	push	r13
    9c04:	ef 92       	push	r14
    9c06:	ff 92       	push	r15
    9c08:	0f 93       	push	r16
    9c0a:	1f 93       	push	r17
    9c0c:	cf 93       	push	r28
    9c0e:	df 93       	push	r29
    9c10:	8c 01       	movw	r16, r24
    9c12:	eb 01       	movw	r28, r22
    9c14:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    9c16:	fc 01       	movw	r30, r24
    9c18:	80 81       	ld	r24, Z
    9c1a:	83 ff       	sbrs	r24, 3
    9c1c:	0f c0       	rjmp	.+30     	; 0x9c3c <update_level_helper+0x40>
	{
		SFX_NAVIGATE;
    9c1e:	2f ef       	ldi	r18, 0xFF	; 255
    9c20:	47 e1       	ldi	r20, 0x17	; 23
    9c22:	67 e0       	ldi	r22, 0x07	; 7
    9c24:	84 e0       	ldi	r24, 0x04	; 4
    9c26:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		game.paused = game.paused ^ 1;
    9c2a:	90 91 c3 0b 	lds	r25, 0x0BC3
    9c2e:	81 e0       	ldi	r24, 0x01	; 1
    9c30:	89 27       	eor	r24, r25
    9c32:	80 93 c3 0b 	sts	0x0BC3, r24
		load_level_tiles(false);
    9c36:	80 e0       	ldi	r24, 0x00	; 0
    9c38:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    9c3c:	20 91 c3 0b 	lds	r18, 0x0BC3
    9c40:	f8 01       	movw	r30, r16
    9c42:	80 81       	ld	r24, Z
    9c44:	91 81       	ldd	r25, Z+1	; 0x01
    9c46:	21 11       	cpse	r18, r1
    9c48:	5f c1       	rjmp	.+702    	; 0x9f08 <update_level_helper+0x30c>
    9c4a:	2b 89       	ldd	r18, Y+19	; 0x13
    9c4c:	20 fd       	sbrc	r18, 0
    9c4e:	5c c1       	rjmp	.+696    	; 0x9f08 <update_level_helper+0x30c>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    9c50:	93 ff       	sbrs	r25, 3
    9c52:	11 c0       	rjmp	.+34     	; 0x9c76 <update_level_helper+0x7a>
    9c54:	8c 89       	ldd	r24, Y+20	; 0x14
    9c56:	8a 35       	cpi	r24, 0x5A	; 90
    9c58:	71 f4       	brne	.+28     	; 0x9c76 <update_level_helper+0x7a>
		{
			player->banter_frame = 0;
    9c5a:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    9c5c:	69 e0       	ldi	r22, 0x09	; 9
    9c5e:	70 e0       	ldi	r23, 0x00	; 0
    9c60:	80 e0       	ldi	r24, 0x00	; 0
    9c62:	90 e0       	ldi	r25, 0x00	; 0
    9c64:	0e 94 90 42 	call	0x8520	; 0x8520 <LBRandom>
    9c68:	8d 8b       	std	Y+21, r24	; 0x15
			SFX_BANTER;
    9c6a:	2f ef       	ldi	r18, 0xFF	; 255
    9c6c:	47 e1       	ldi	r20, 0x17	; 23
    9c6e:	60 e0       	ldi	r22, 0x00	; 0
    9c70:	84 e0       	ldi	r24, 0x04	; 4
    9c72:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    9c76:	6f 89       	ldd	r22, Y+23	; 0x17
    9c78:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    9c7a:	f8 01       	movw	r30, r16
    9c7c:	84 81       	ldd	r24, Z+4	; 0x04
    9c7e:	84 ff       	sbrs	r24, 4
    9c80:	15 c0       	rjmp	.+42     	; 0x9cac <update_level_helper+0xb0>
		{
			player->shared.direction = D_UP;
    9c82:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    9c84:	70 e0       	ldi	r23, 0x00	; 0
    9c86:	80 e0       	ldi	r24, 0x00	; 0
    9c88:	90 e0       	ldi	r25, 0x00	; 0
    9c8a:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9c8e:	25 e6       	ldi	r18, 0x65	; 101
    9c90:	38 e8       	ldi	r19, 0x88	; 136
    9c92:	48 e8       	ldi	r20, 0x88	; 136
    9c94:	5c e3       	ldi	r21, 0x3C	; 60
    9c96:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9c9a:	9b 01       	movw	r18, r22
    9c9c:	ac 01       	movw	r20, r24
    9c9e:	6e 81       	ldd	r22, Y+6	; 0x06
    9ca0:	7f 81       	ldd	r23, Y+7	; 0x07
    9ca2:	88 85       	ldd	r24, Y+8	; 0x08
    9ca4:	99 85       	ldd	r25, Y+9	; 0x09
    9ca6:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    9caa:	2f c0       	rjmp	.+94     	; 0x9d0a <update_level_helper+0x10e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    9cac:	87 ff       	sbrs	r24, 7
    9cae:	16 c0       	rjmp	.+44     	; 0x9cdc <update_level_helper+0xe0>
		{
			player->shared.direction = D_RIGHT;
    9cb0:	81 e0       	ldi	r24, 0x01	; 1
    9cb2:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    9cb4:	70 e0       	ldi	r23, 0x00	; 0
    9cb6:	80 e0       	ldi	r24, 0x00	; 0
    9cb8:	90 e0       	ldi	r25, 0x00	; 0
    9cba:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9cbe:	25 e6       	ldi	r18, 0x65	; 101
    9cc0:	38 e8       	ldi	r19, 0x88	; 136
    9cc2:	48 e8       	ldi	r20, 0x88	; 136
    9cc4:	5c e3       	ldi	r21, 0x3C	; 60
    9cc6:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9cca:	9b 01       	movw	r18, r22
    9ccc:	ac 01       	movw	r20, r24
    9cce:	6a 81       	ldd	r22, Y+2	; 0x02
    9cd0:	7b 81       	ldd	r23, Y+3	; 0x03
    9cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    9cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    9cd6:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    9cda:	33 c0       	rjmp	.+102    	; 0x9d42 <update_level_helper+0x146>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    9cdc:	85 ff       	sbrs	r24, 5
    9cde:	1a c0       	rjmp	.+52     	; 0x9d14 <update_level_helper+0x118>
		{
			player->shared.direction = D_DOWN;
    9ce0:	82 e0       	ldi	r24, 0x02	; 2
    9ce2:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    9ce4:	70 e0       	ldi	r23, 0x00	; 0
    9ce6:	80 e0       	ldi	r24, 0x00	; 0
    9ce8:	90 e0       	ldi	r25, 0x00	; 0
    9cea:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9cee:	25 e6       	ldi	r18, 0x65	; 101
    9cf0:	38 e8       	ldi	r19, 0x88	; 136
    9cf2:	48 e8       	ldi	r20, 0x88	; 136
    9cf4:	5c e3       	ldi	r21, 0x3C	; 60
    9cf6:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9cfa:	9b 01       	movw	r18, r22
    9cfc:	ac 01       	movw	r20, r24
    9cfe:	6e 81       	ldd	r22, Y+6	; 0x06
    9d00:	7f 81       	ldd	r23, Y+7	; 0x07
    9d02:	88 85       	ldd	r24, Y+8	; 0x08
    9d04:	99 85       	ldd	r25, Y+9	; 0x09
    9d06:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    9d0a:	6e 83       	std	Y+6, r22	; 0x06
    9d0c:	7f 83       	std	Y+7, r23	; 0x07
    9d0e:	88 87       	std	Y+8, r24	; 0x08
    9d10:	99 87       	std	Y+9, r25	; 0x09
    9d12:	1d c0       	rjmp	.+58     	; 0x9d4e <update_level_helper+0x152>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    9d14:	86 ff       	sbrs	r24, 6
    9d16:	1a c0       	rjmp	.+52     	; 0x9d4c <update_level_helper+0x150>
		{
			player->shared.direction = D_LEFT;
    9d18:	83 e0       	ldi	r24, 0x03	; 3
    9d1a:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    9d1c:	70 e0       	ldi	r23, 0x00	; 0
    9d1e:	80 e0       	ldi	r24, 0x00	; 0
    9d20:	90 e0       	ldi	r25, 0x00	; 0
    9d22:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9d26:	25 e6       	ldi	r18, 0x65	; 101
    9d28:	38 e8       	ldi	r19, 0x88	; 136
    9d2a:	48 e8       	ldi	r20, 0x88	; 136
    9d2c:	5c e3       	ldi	r21, 0x3C	; 60
    9d2e:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9d32:	9b 01       	movw	r18, r22
    9d34:	ac 01       	movw	r20, r24
    9d36:	6a 81       	ldd	r22, Y+2	; 0x02
    9d38:	7b 81       	ldd	r23, Y+3	; 0x03
    9d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    9d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    9d3e:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    9d42:	6a 83       	std	Y+2, r22	; 0x02
    9d44:	7b 83       	std	Y+3, r23	; 0x03
    9d46:	8c 83       	std	Y+4, r24	; 0x04
    9d48:	9d 83       	std	Y+5, r25	; 0x05
    9d4a:	01 c0       	rjmp	.+2      	; 0x9d4e <update_level_helper+0x152>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    9d4c:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    9d4e:	f8 01       	movw	r30, r16
    9d50:	80 81       	ld	r24, Z
    9d52:	91 81       	ldd	r25, Z+1	; 0x01
    9d54:	90 ff       	sbrs	r25, 0
    9d56:	50 c0       	rjmp	.+160    	; 0x9df8 <update_level_helper+0x1fc>
    9d58:	88 89       	ldd	r24, Y+16	; 0x10
    9d5a:	82 30       	cpi	r24, 0x02	; 2
    9d5c:	08 f0       	brcs	.+2      	; 0x9d60 <update_level_helper+0x164>
    9d5e:	4c c0       	rjmp	.+152    	; 0x9df8 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    9d60:	8f a1       	ldd	r24, Y+39	; 0x27
    9d62:	81 11       	cpse	r24, r1
    9d64:	06 c0       	rjmp	.+12     	; 0x9d72 <update_level_helper+0x176>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9d66:	8e 01       	movw	r16, r28
    9d68:	06 5e       	subi	r16, 0xE6	; 230
    9d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    9d6c:	a1 2c       	mov	r10, r1
    9d6e:	b1 2c       	mov	r11, r1
    9d70:	0c c0       	rjmp	.+24     	; 0x9d8a <update_level_helper+0x18e>
				if (!shot->active)
    9d72:	fe 01       	movw	r30, r28
    9d74:	e7 5b       	subi	r30, 0xB7	; 183
    9d76:	ff 4f       	sbci	r31, 0xFF	; 255
    9d78:	80 81       	ld	r24, Z
    9d7a:	81 11       	cpse	r24, r1
    9d7c:	3d c0       	rjmp	.+122    	; 0x9df8 <update_level_helper+0x1fc>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9d7e:	8e 01       	movw	r16, r28
    9d80:	04 5c       	subi	r16, 0xC4	; 196
    9d82:	1f 4f       	sbci	r17, 0xFF	; 255
    9d84:	aa 24       	eor	r10, r10
    9d86:	a3 94       	inc	r10
    9d88:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    9d8a:	88 8d       	ldd	r24, Y+24	; 0x18
    9d8c:	88 23       	and	r24, r24
    9d8e:	61 f0       	breq	.+24     	; 0x9da8 <update_level_helper+0x1ac>
					{
						init_shot_state(shot, ROCKET_SHOT);
    9d90:	61 e0       	ldi	r22, 0x01	; 1
    9d92:	c8 01       	movw	r24, r16
    9d94:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    9d98:	61 e0       	ldi	r22, 0x01	; 1
    9d9a:	c8 01       	movw	r24, r16
    9d9c:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <set_shot_animations>
						SFX_ROCKET;
    9da0:	2f ef       	ldi	r18, 0xFF	; 255
    9da2:	47 e1       	ldi	r20, 0x17	; 23
    9da4:	68 e0       	ldi	r22, 0x08	; 8
    9da6:	0b c0       	rjmp	.+22     	; 0x9dbe <update_level_helper+0x1c2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    9da8:	60 e0       	ldi	r22, 0x00	; 0
    9daa:	c8 01       	movw	r24, r16
    9dac:	0e 94 df 42 	call	0x85be	; 0x85be <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    9db0:	60 e0       	ldi	r22, 0x00	; 0
    9db2:	c8 01       	movw	r24, r16
    9db4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <set_shot_animations>
						SFX_CANNONBALL;
    9db8:	2f ef       	ldi	r18, 0xFF	; 255
    9dba:	47 e1       	ldi	r20, 0x17	; 23
    9dbc:	62 e0       	ldi	r22, 0x02	; 2
    9dbe:	84 e0       	ldi	r24, 0x04	; 4
    9dc0:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
					}
					player->active_shots++;
    9dc4:	88 89       	ldd	r24, Y+16	; 0x10
    9dc6:	8f 5f       	subi	r24, 0xFF	; 255
    9dc8:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    9dca:	82 e2       	ldi	r24, 0x22	; 34
    9dcc:	8a 9d       	mul	r24, r10
    9dce:	60 01       	movw	r12, r0
    9dd0:	8b 9d       	mul	r24, r11
    9dd2:	d0 0c       	add	r13, r0
    9dd4:	11 24       	eor	r1, r1
    9dd6:	cc 0e       	add	r12, r28
    9dd8:	dd 1e       	adc	r13, r29
    9dda:	88 81       	ld	r24, Y
    9ddc:	f6 01       	movw	r30, r12
    9dde:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    9de0:	b8 01       	movw	r22, r16
    9de2:	ce 01       	movw	r24, r28
    9de4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <position_shot>
					shot->active = 1;
    9de8:	81 e0       	ldi	r24, 0x01	; 1
    9dea:	f6 01       	movw	r30, r12
    9dec:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    9dee:	89 8d       	ldd	r24, Y+25	; 0x19
    9df0:	88 23       	and	r24, r24
    9df2:	11 f0       	breq	.+4      	; 0x9df8 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    9df4:	86 e9       	ldi	r24, 0x96	; 150
    9df6:	83 8f       	std	Z+27, r24	; 0x1b
    9df8:	8e 01       	movw	r16, r28
    9dfa:	05 5e       	subi	r16, 0xE5	; 229
    9dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    9dfe:	5e 01       	movw	r10, r28
    9e00:	ff e5       	ldi	r31, 0x5F	; 95
    9e02:	af 0e       	add	r10, r31
    9e04:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    9e06:	f8 01       	movw	r30, r16
    9e08:	84 85       	ldd	r24, Z+12	; 0x0c
    9e0a:	88 23       	and	r24, r24
    9e0c:	09 f4       	brne	.+2      	; 0x9e10 <update_level_helper+0x214>
    9e0e:	75 c0       	rjmp	.+234    	; 0x9efa <update_level_helper+0x2fe>
			{
				switch (shot->shared.direction)
    9e10:	82 91       	ld	r24, -Z
    9e12:	6f 01       	movw	r12, r30
    9e14:	81 30       	cpi	r24, 0x01	; 1
    9e16:	a9 f1       	breq	.+106    	; 0x9e82 <update_level_helper+0x286>
    9e18:	e8 f0       	brcs	.+58     	; 0x9e54 <update_level_helper+0x258>
    9e1a:	82 30       	cpi	r24, 0x02	; 2
    9e1c:	09 f4       	brne	.+2      	; 0x9e20 <update_level_helper+0x224>
    9e1e:	48 c0       	rjmp	.+144    	; 0x9eb0 <update_level_helper+0x2b4>
    9e20:	83 30       	cpi	r24, 0x03	; 3
    9e22:	09 f0       	breq	.+2      	; 0x9e26 <update_level_helper+0x22a>
    9e24:	66 c0       	rjmp	.+204    	; 0x9ef2 <update_level_helper+0x2f6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    9e26:	f8 01       	movw	r30, r16
    9e28:	60 81       	ld	r22, Z
    9e2a:	70 e0       	ldi	r23, 0x00	; 0
    9e2c:	80 e0       	ldi	r24, 0x00	; 0
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9e34:	25 e6       	ldi	r18, 0x65	; 101
    9e36:	38 e8       	ldi	r19, 0x88	; 136
    9e38:	48 e8       	ldi	r20, 0x88	; 136
    9e3a:	5c e3       	ldi	r21, 0x3C	; 60
    9e3c:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9e40:	9b 01       	movw	r18, r22
    9e42:	ac 01       	movw	r20, r24
    9e44:	f8 01       	movw	r30, r16
    9e46:	61 81       	ldd	r22, Z+1	; 0x01
    9e48:	72 81       	ldd	r23, Z+2	; 0x02
    9e4a:	83 81       	ldd	r24, Z+3	; 0x03
    9e4c:	94 81       	ldd	r25, Z+4	; 0x04
    9e4e:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    9e52:	4a c0       	rjmp	.+148    	; 0x9ee8 <update_level_helper+0x2ec>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    9e54:	f8 01       	movw	r30, r16
    9e56:	60 81       	ld	r22, Z
    9e58:	70 e0       	ldi	r23, 0x00	; 0
    9e5a:	80 e0       	ldi	r24, 0x00	; 0
    9e5c:	90 e0       	ldi	r25, 0x00	; 0
    9e5e:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9e62:	25 e6       	ldi	r18, 0x65	; 101
    9e64:	38 e8       	ldi	r19, 0x88	; 136
    9e66:	48 e8       	ldi	r20, 0x88	; 136
    9e68:	5c e3       	ldi	r21, 0x3C	; 60
    9e6a:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9e6e:	9b 01       	movw	r18, r22
    9e70:	ac 01       	movw	r20, r24
    9e72:	f8 01       	movw	r30, r16
    9e74:	65 81       	ldd	r22, Z+5	; 0x05
    9e76:	76 81       	ldd	r23, Z+6	; 0x06
    9e78:	87 81       	ldd	r24, Z+7	; 0x07
    9e7a:	90 85       	ldd	r25, Z+8	; 0x08
    9e7c:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__subsf3>
    9e80:	2d c0       	rjmp	.+90     	; 0x9edc <update_level_helper+0x2e0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    9e82:	f8 01       	movw	r30, r16
    9e84:	60 81       	ld	r22, Z
    9e86:	70 e0       	ldi	r23, 0x00	; 0
    9e88:	80 e0       	ldi	r24, 0x00	; 0
    9e8a:	90 e0       	ldi	r25, 0x00	; 0
    9e8c:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9e90:	25 e6       	ldi	r18, 0x65	; 101
    9e92:	38 e8       	ldi	r19, 0x88	; 136
    9e94:	48 e8       	ldi	r20, 0x88	; 136
    9e96:	5c e3       	ldi	r21, 0x3C	; 60
    9e98:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9e9c:	9b 01       	movw	r18, r22
    9e9e:	ac 01       	movw	r20, r24
    9ea0:	f8 01       	movw	r30, r16
    9ea2:	61 81       	ldd	r22, Z+1	; 0x01
    9ea4:	72 81       	ldd	r23, Z+2	; 0x02
    9ea6:	83 81       	ldd	r24, Z+3	; 0x03
    9ea8:	94 81       	ldd	r25, Z+4	; 0x04
    9eaa:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    9eae:	1c c0       	rjmp	.+56     	; 0x9ee8 <update_level_helper+0x2ec>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    9eb0:	f8 01       	movw	r30, r16
    9eb2:	60 81       	ld	r22, Z
    9eb4:	70 e0       	ldi	r23, 0x00	; 0
    9eb6:	80 e0       	ldi	r24, 0x00	; 0
    9eb8:	90 e0       	ldi	r25, 0x00	; 0
    9eba:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatsisf>
    9ebe:	25 e6       	ldi	r18, 0x65	; 101
    9ec0:	38 e8       	ldi	r19, 0x88	; 136
    9ec2:	48 e8       	ldi	r20, 0x88	; 136
    9ec4:	5c e3       	ldi	r21, 0x3C	; 60
    9ec6:	0e 94 84 55 	call	0xab08	; 0xab08 <__mulsf3>
    9eca:	9b 01       	movw	r18, r22
    9ecc:	ac 01       	movw	r20, r24
    9ece:	f8 01       	movw	r30, r16
    9ed0:	65 81       	ldd	r22, Z+5	; 0x05
    9ed2:	76 81       	ldd	r23, Z+6	; 0x06
    9ed4:	87 81       	ldd	r24, Z+7	; 0x07
    9ed6:	90 85       	ldd	r25, Z+8	; 0x08
    9ed8:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <__addsf3>
    9edc:	f8 01       	movw	r30, r16
    9ede:	65 83       	std	Z+5, r22	; 0x05
    9ee0:	76 83       	std	Z+6, r23	; 0x06
    9ee2:	87 83       	std	Z+7, r24	; 0x07
    9ee4:	90 87       	std	Z+8, r25	; 0x08
    9ee6:	05 c0       	rjmp	.+10     	; 0x9ef2 <update_level_helper+0x2f6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    9ee8:	f8 01       	movw	r30, r16
    9eea:	61 83       	std	Z+1, r22	; 0x01
    9eec:	72 83       	std	Z+2, r23	; 0x02
    9eee:	83 83       	std	Z+3, r24	; 0x03
    9ef0:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    9ef2:	b6 01       	movw	r22, r12
    9ef4:	ce 01       	movw	r24, r28
    9ef6:	0e 94 70 49 	call	0x92e0	; 0x92e0 <collision_detect_shot>
    9efa:	0e 5d       	subi	r16, 0xDE	; 222
    9efc:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    9efe:	0a 15       	cp	r16, r10
    9f00:	1b 05       	cpc	r17, r11
    9f02:	09 f0       	breq	.+2      	; 0x9f06 <update_level_helper+0x30a>
    9f04:	80 cf       	rjmp	.-256    	; 0x9e06 <update_level_helper+0x20a>
    9f06:	0c c0       	rjmp	.+24     	; 0x9f20 <update_level_helper+0x324>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    9f08:	91 ff       	sbrs	r25, 1
    9f0a:	0a c0       	rjmp	.+20     	; 0x9f20 <update_level_helper+0x324>
		{
			SFX_NAVIGATE;
    9f0c:	2f ef       	ldi	r18, 0xFF	; 255
    9f0e:	47 e1       	ldi	r20, 0x17	; 23
    9f10:	67 e0       	ldi	r22, 0x07	; 7
    9f12:	84 e0       	ldi	r24, 0x04	; 4
    9f14:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
			save_score();
    9f18:	0e 94 f3 43 	call	0x87e6	; 0x87e6 <save_score>
			exit_game();
    9f1c:	0e 94 f5 4d 	call	0x9bea	; 0x9bea <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score == MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    9f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    9f22:	85 30       	cpi	r24, 0x05	; 5
    9f24:	d1 f5       	brne	.+116    	; 0x9f9a <update_level_helper+0x39e>
    9f26:	f7 01       	movw	r30, r14
    9f28:	83 89       	ldd	r24, Z+19	; 0x13
    9f2a:	80 fd       	sbrc	r24, 0
    9f2c:	36 c0       	rjmp	.+108    	; 0x9f9a <update_level_helper+0x39e>
	{
		save_score();
    9f2e:	0e 94 f3 43 	call	0x87e6	; 0x87e6 <save_score>
		load_level_tiles(true);
    9f32:	81 e0       	ldi	r24, 0x01	; 1
    9f34:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <load_level_tiles>
		SetSpriteVisibility(false);
    9f38:	80 e0       	ldi	r24, 0x00	; 0
    9f3a:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    9f3e:	b7 01       	movw	r22, r14
    9f40:	ce 01       	movw	r24, r28
    9f42:	0e 94 ca 44 	call	0x8994	; 0x8994 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    9f46:	82 e0       	ldi	r24, 0x02	; 2
    9f48:	0e 94 ad 42 	call	0x855a	; 0x855a <LBWaitSeconds>
		player->level_score = 0;
    9f4c:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    9f4e:	f7 01       	movw	r30, r14
    9f50:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    9f52:	c0 91 c2 0b 	lds	r28, 0x0BC2
    9f56:	cf 5f       	subi	r28, 0xFF	; 255
		SFX_LEVEL_CLEAR;
    9f58:	2f ef       	ldi	r18, 0xFF	; 255
    9f5a:	47 e1       	ldi	r20, 0x17	; 23
    9f5c:	64 e0       	ldi	r22, 0x04	; 4
    9f5e:	84 e0       	ldi	r24, 0x04	; 4
    9f60:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    9f64:	ca 30       	cpi	r28, 0x0A	; 10
    9f66:	60 f0       	brcs	.+24     	; 0x9f80 <update_level_helper+0x384>
		else
		{
			level_transition(next_level);
		}
	}
}
    9f68:	df 91       	pop	r29
    9f6a:	cf 91       	pop	r28
    9f6c:	1f 91       	pop	r17
    9f6e:	0f 91       	pop	r16
    9f70:	ff 90       	pop	r15
    9f72:	ef 90       	pop	r14
    9f74:	df 90       	pop	r13
    9f76:	cf 90       	pop	r12
    9f78:	bf 90       	pop	r11
    9f7a:	af 90       	pop	r10
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		SFX_LEVEL_CLEAR;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    9f7c:	0c 94 f5 4d 	jmp	0x9bea	; 0x9bea <exit_game>
		}
		else
		{
			level_transition(next_level);
    9f80:	8c 2f       	mov	r24, r28
		}
	}
}
    9f82:	df 91       	pop	r29
    9f84:	cf 91       	pop	r28
    9f86:	1f 91       	pop	r17
    9f88:	0f 91       	pop	r16
    9f8a:	ff 90       	pop	r15
    9f8c:	ef 90       	pop	r14
    9f8e:	df 90       	pop	r13
    9f90:	cf 90       	pop	r12
    9f92:	bf 90       	pop	r11
    9f94:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    9f96:	0c 94 f6 4c 	jmp	0x99ec	; 0x99ec <level_transition>
		}
	}
}
    9f9a:	df 91       	pop	r29
    9f9c:	cf 91       	pop	r28
    9f9e:	1f 91       	pop	r17
    9fa0:	0f 91       	pop	r16
    9fa2:	ff 90       	pop	r15
    9fa4:	ef 90       	pop	r14
    9fa6:	df 90       	pop	r13
    9fa8:	cf 90       	pop	r12
    9faa:	bf 90       	pop	r11
    9fac:	af 90       	pop	r10
    9fae:	08 95       	ret

00009fb0 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    9fb0:	cf 92       	push	r12
    9fb2:	df 92       	push	r13
    9fb4:	ef 92       	push	r14
    9fb6:	ff 92       	push	r15
    9fb8:	1f 93       	push	r17
    9fba:	cf 93       	push	r28
    9fbc:	df 93       	push	r29
    9fbe:	6c 01       	movw	r12, r24
    9fc0:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    9fc2:	80 91 c3 0b 	lds	r24, 0x0BC3
    9fc6:	88 23       	and	r24, r24
    9fc8:	d1 f0       	breq	.+52     	; 0x9ffe <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    9fca:	80 e0       	ldi	r24, 0x00	; 0
    9fcc:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    9fd0:	4c e0       	ldi	r20, 0x0C	; 12
    9fd2:	51 e2       	ldi	r21, 0x21	; 33
    9fd4:	6c e0       	ldi	r22, 0x0C	; 12
    9fd6:	88 e0       	ldi	r24, 0x08	; 8
    9fd8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <DrawMap2>
		Print(12, 13, strPaused);
    9fdc:	4e e6       	ldi	r20, 0x6E	; 110
    9fde:	51 e0       	ldi	r21, 0x01	; 1
    9fe0:	6d e0       	ldi	r22, 0x0D	; 13
    9fe2:	70 e0       	ldi	r23, 0x00	; 0
    9fe4:	8c e0       	ldi	r24, 0x0C	; 12
    9fe6:	90 e0       	ldi	r25, 0x00	; 0
    9fe8:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
		Print(11, 14, strExit);
    9fec:	45 e7       	ldi	r20, 0x75	; 117
    9fee:	51 e0       	ldi	r21, 0x01	; 1
    9ff0:	6e e0       	ldi	r22, 0x0E	; 14
    9ff2:	70 e0       	ldi	r23, 0x00	; 0
    9ff4:	8b e0       	ldi	r24, 0x0B	; 11
    9ff6:	90 e0       	ldi	r25, 0x00	; 0
    9ff8:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    9ffc:	44 c0       	rjmp	.+136    	; 0xa086 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    9ffe:	81 e0       	ldi	r24, 0x01	; 1
    a000:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    a004:	60 e0       	ldi	r22, 0x00	; 0
    a006:	8e ed       	ldi	r24, 0xDE	; 222
    a008:	9b e0       	ldi	r25, 0x0B	; 11
    a00a:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <tank_map>
    a00e:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    a010:	68 2f       	mov	r22, r24
    a012:	8f e4       	ldi	r24, 0x4F	; 79
    a014:	9f e0       	ldi	r25, 0x0F	; 15
    a016:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <tank_map>
    a01a:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    a01c:	68 2f       	mov	r22, r24
    a01e:	8e ed       	ldi	r24, 0xDE	; 222
    a020:	9b e0       	ldi	r25, 0x0B	; 11
    a022:	0e 94 98 46 	call	0x8d30	; 0x8d30 <shot_map>
    a026:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    a028:	68 2f       	mov	r22, r24
    a02a:	8f e4       	ldi	r24, 0x4F	; 79
    a02c:	9f e0       	ldi	r25, 0x0F	; 15
    a02e:	0e 94 98 46 	call	0x8d30	; 0x8d30 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    a032:	40 91 02 01 	lds	r20, 0x0102
    a036:	6f e0       	ldi	r22, 0x0F	; 15
    a038:	8e ed       	ldi	r24, 0xDE	; 222
    a03a:	9b e0       	ldi	r25, 0x0B	; 11
    a03c:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <render_banter>
    a040:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    a044:	40 91 01 01 	lds	r20, 0x0101
    a048:	60 e0       	ldi	r22, 0x00	; 0
    a04a:	8f e4       	ldi	r24, 0x4F	; 79
    a04c:	9f e0       	ldi	r25, 0x0F	; 15
    a04e:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <render_banter>
    a052:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    a056:	60 e0       	ldi	r22, 0x00	; 0
    a058:	8e ed       	ldi	r24, 0xDE	; 222
    a05a:	9b e0       	ldi	r25, 0x0B	; 11
    a05c:	0e 94 6d 45 	call	0x8ada	; 0x8ada <render_player>
		render_player(&player2, p2_index);
    a060:	61 2f       	mov	r22, r17
    a062:	8f e4       	ldi	r24, 0x4F	; 79
    a064:	9f e0       	ldi	r25, 0x0F	; 15
    a066:	0e 94 6d 45 	call	0x8ada	; 0x8ada <render_player>
		render_shot(&player1, p1_shot_index);
    a06a:	6d 2f       	mov	r22, r29
    a06c:	8e ed       	ldi	r24, 0xDE	; 222
    a06e:	9b e0       	ldi	r25, 0x0B	; 11
    a070:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <render_shot>
		render_shot(&player2, p2_shot_index);
    a074:	6c 2f       	mov	r22, r28
    a076:	8f e4       	ldi	r24, 0x4F	; 79
    a078:	9f e0       	ldi	r25, 0x0F	; 15
    a07a:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <render_shot>
		render_tile_explosions(&tile_animations);
    a07e:	85 ec       	ldi	r24, 0xC5	; 197
    a080:	9b e0       	ldi	r25, 0x0B	; 11
    a082:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    a086:	2f e0       	ldi	r18, 0x0F	; 15
    a088:	4f e4       	ldi	r20, 0x4F	; 79
    a08a:	5f e0       	ldi	r21, 0x0F	; 15
    a08c:	6e ed       	ldi	r22, 0xDE	; 222
    a08e:	7b e0       	ldi	r23, 0x0B	; 11
    a090:	c6 01       	movw	r24, r12
    a092:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    a096:	20 e0       	ldi	r18, 0x00	; 0
    a098:	4e ed       	ldi	r20, 0xDE	; 222
    a09a:	5b e0       	ldi	r21, 0x0B	; 11
    a09c:	6f e4       	ldi	r22, 0x4F	; 79
    a09e:	7f e0       	ldi	r23, 0x0F	; 15
    a0a0:	c7 01       	movw	r24, r14
    a0a2:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    a0a6:	2f e0       	ldi	r18, 0x0F	; 15
    a0a8:	40 e0       	ldi	r20, 0x00	; 0
    a0aa:	6f e4       	ldi	r22, 0x4F	; 79
    a0ac:	7f e0       	ldi	r23, 0x0F	; 15
    a0ae:	8e ed       	ldi	r24, 0xDE	; 222
    a0b0:	9b e0       	ldi	r25, 0x0B	; 11
    a0b2:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    a0b6:	20 e0       	ldi	r18, 0x00	; 0
    a0b8:	4f e0       	ldi	r20, 0x0F	; 15
    a0ba:	6e ed       	ldi	r22, 0xDE	; 222
    a0bc:	7b e0       	ldi	r23, 0x0B	; 11
    a0be:	8f e4       	ldi	r24, 0x4F	; 79
    a0c0:	9f e0       	ldi	r25, 0x0F	; 15
}
    a0c2:	df 91       	pop	r29
    a0c4:	cf 91       	pop	r28
    a0c6:	1f 91       	pop	r17
    a0c8:	ff 90       	pop	r15
    a0ca:	ef 90       	pop	r14
    a0cc:	df 90       	pop	r13
    a0ce:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    a0d0:	0c 94 ea 4a 	jmp	0x95d4	; 0x95d4 <collision_detect_player>

0000a0d4 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    a0d4:	fc 01       	movw	r30, r24
    a0d6:	80 81       	ld	r24, Z
    a0d8:	91 81       	ldd	r25, Z+1	; 0x01
    a0da:	91 ff       	sbrs	r25, 1
    a0dc:	0a c0       	rjmp	.+20     	; 0xa0f2 <update_tank_rank+0x1e>
	{
		SFX_NAVIGATE;
    a0de:	2f ef       	ldi	r18, 0xFF	; 255
    a0e0:	47 e1       	ldi	r20, 0x17	; 23
    a0e2:	67 e0       	ldi	r22, 0x07	; 7
    a0e4:	84 e0       	ldi	r24, 0x04	; 4
    a0e6:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		fade_through();
    a0ea:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <fade_through>
		load_splash();
    a0ee:	0c 94 22 4d 	jmp	0x9a44	; 0x9a44 <load_splash>
    a0f2:	08 95       	ret

0000a0f4 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    a0f4:	0f 93       	push	r16
    a0f6:	1f 93       	push	r17
    a0f8:	cf 93       	push	r28
    a0fa:	df 93       	push	r29
    a0fc:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    a0fe:	fb 01       	movw	r30, r22
    a100:	20 81       	ld	r18, Z
    a102:	31 81       	ldd	r19, Z+1	; 0x01
    a104:	f9 01       	movw	r30, r18
    a106:	e0 71       	andi	r30, 0x10	; 16
    a108:	ff 27       	eor	r31, r31
    a10a:	24 ff       	sbrs	r18, 4
    a10c:	09 c0       	rjmp	.+18     	; 0xa120 <_handle_select_helper+0x2c>
    a10e:	8d 81       	ldd	r24, Y+5	; 0x05
    a110:	81 11       	cpse	r24, r1
    a112:	06 c0       	rjmp	.+12     	; 0xa120 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    a114:	88 81       	ld	r24, Y
    a116:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    a118:	87 ff       	sbrs	r24, 7
    a11a:	0f c0       	rjmp	.+30     	; 0xa13a <_handle_select_helper+0x46>
    a11c:	18 82       	st	Y, r1
    a11e:	25 c0       	rjmp	.+74     	; 0xa16a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    a120:	b9 01       	movw	r22, r18
    a122:	60 72       	andi	r22, 0x20	; 32
    a124:	77 27       	eor	r23, r23
    a126:	25 ff       	sbrs	r18, 5
    a128:	0a c0       	rjmp	.+20     	; 0xa13e <_handle_select_helper+0x4a>
    a12a:	8d 81       	ldd	r24, Y+5	; 0x05
    a12c:	81 11       	cpse	r24, r1
    a12e:	07 c0       	rjmp	.+14     	; 0xa13e <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    a130:	88 81       	ld	r24, Y
    a132:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    a134:	89 30       	cpi	r24, 0x09	; 9
    a136:	0c f0       	brlt	.+2      	; 0xa13a <_handle_select_helper+0x46>
    a138:	88 e0       	ldi	r24, 0x08	; 8
    a13a:	88 83       	st	Y, r24
    a13c:	16 c0       	rjmp	.+44     	; 0xa16a <_handle_select_helper+0x76>
    a13e:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    a140:	a9 01       	movw	r20, r18
    a142:	44 27       	eor	r20, r20
    a144:	51 70       	andi	r21, 0x01	; 1
    a146:	30 ff       	sbrs	r19, 0
    a148:	1a c0       	rjmp	.+52     	; 0xa17e <_handle_select_helper+0x8a>
    a14a:	ad 81       	ldd	r26, Y+5	; 0x05
    a14c:	a1 11       	cpse	r26, r1
    a14e:	17 c0       	rjmp	.+46     	; 0xa17e <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    a150:	81 e0       	ldi	r24, 0x01	; 1
    a152:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    a154:	69 91       	ld	r22, Y+
    a156:	f3 e0       	ldi	r31, 0x03	; 3
    a158:	6f 02       	muls	r22, r31
    a15a:	b0 01       	movw	r22, r0
    a15c:	11 24       	eor	r1, r1
    a15e:	6a 5d       	subi	r22, 0xDA	; 218
    a160:	7e 4f       	sbci	r23, 0xFE	; 254
    a162:	43 e0       	ldi	r20, 0x03	; 3
    a164:	ce 01       	movw	r24, r28
    a166:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
		SFX_NAVIGATE;
    a16a:	2f ef       	ldi	r18, 0xFF	; 255
    a16c:	47 e1       	ldi	r20, 0x17	; 23
    a16e:	67 e0       	ldi	r22, 0x07	; 7
    a170:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    a172:	df 91       	pop	r29
    a174:	cf 91       	pop	r28
    a176:	1f 91       	pop	r17
    a178:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    a17a:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    a17e:	27 ff       	sbrs	r18, 7
    a180:	09 c0       	rjmp	.+18     	; 0xa194 <_handle_select_helper+0xa0>
    a182:	ad 81       	ldd	r26, Y+5	; 0x05
    a184:	a1 30       	cpi	r26, 0x01	; 1
    a186:	31 f4       	brne	.+12     	; 0xa194 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    a188:	8c 81       	ldd	r24, Y+4	; 0x04
    a18a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    a18c:	83 30       	cpi	r24, 0x03	; 3
    a18e:	5c f0       	brlt	.+22     	; 0xa1a6 <_handle_select_helper+0xb2>
    a190:	82 e0       	ldi	r24, 0x02	; 2
    a192:	09 c0       	rjmp	.+18     	; 0xa1a6 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    a194:	26 ff       	sbrs	r18, 6
    a196:	0b c0       	rjmp	.+22     	; 0xa1ae <_handle_select_helper+0xba>
    a198:	ed 81       	ldd	r30, Y+5	; 0x05
    a19a:	e1 30       	cpi	r30, 0x01	; 1
    a19c:	41 f5       	brne	.+80     	; 0xa1ee <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    a19e:	8c 81       	ldd	r24, Y+4	; 0x04
    a1a0:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    a1a2:	87 fd       	sbrc	r24, 7
    a1a4:	02 c0       	rjmp	.+4      	; 0xa1aa <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    a1a6:	8c 83       	std	Y+4, r24	; 0x04
    a1a8:	e0 cf       	rjmp	.-64     	; 0xa16a <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    a1aa:	1c 82       	std	Y+4, r1	; 0x04
    a1ac:	de cf       	rjmp	.-68     	; 0xa16a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    a1ae:	ef 2b       	or	r30, r31
    a1b0:	69 f0       	breq	.+26     	; 0xa1cc <_handle_select_helper+0xd8>
    a1b2:	8d 81       	ldd	r24, Y+5	; 0x05
    a1b4:	81 30       	cpi	r24, 0x01	; 1
    a1b6:	09 f0       	breq	.+2      	; 0xa1ba <_handle_select_helper+0xc6>
    a1b8:	43 c0       	rjmp	.+134    	; 0xa240 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    a1ba:	8c 81       	ldd	r24, Y+4	; 0x04
    a1bc:	c8 0f       	add	r28, r24
    a1be:	d1 1d       	adc	r29, r1
    a1c0:	99 81       	ldd	r25, Y+1	; 0x01
    a1c2:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    a1c4:	91 34       	cpi	r25, 0x41	; 65
    a1c6:	70 f4       	brcc	.+28     	; 0xa1e4 <_handle_select_helper+0xf0>
    a1c8:	81 e4       	ldi	r24, 0x41	; 65
    a1ca:	0f c0       	rjmp	.+30     	; 0xa1ea <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    a1cc:	67 2b       	or	r22, r23
    a1ce:	89 f0       	breq	.+34     	; 0xa1f2 <_handle_select_helper+0xfe>
    a1d0:	8d 81       	ldd	r24, Y+5	; 0x05
    a1d2:	81 30       	cpi	r24, 0x01	; 1
    a1d4:	a9 f5       	brne	.+106    	; 0xa240 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    a1d6:	8c 81       	ldd	r24, Y+4	; 0x04
    a1d8:	c8 0f       	add	r28, r24
    a1da:	d1 1d       	adc	r29, r1
    a1dc:	99 81       	ldd	r25, Y+1	; 0x01
    a1de:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    a1e0:	9b 35       	cpi	r25, 0x5B	; 91
    a1e2:	10 f4       	brcc	.+4      	; 0xa1e8 <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    a1e4:	99 83       	std	Y+1, r25	; 0x01
    a1e6:	c1 cf       	rjmp	.-126    	; 0xa16a <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    a1e8:	8a e5       	ldi	r24, 0x5A	; 90
    a1ea:	89 83       	std	Y+1, r24	; 0x01
    a1ec:	be cf       	rjmp	.-132    	; 0xa16a <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    a1ee:	67 2b       	or	r22, r23
    a1f0:	39 f5       	brne	.+78     	; 0xa240 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    a1f2:	45 2b       	or	r20, r21
    a1f4:	29 f1       	breq	.+74     	; 0xa240 <_handle_select_helper+0x14c>
    a1f6:	4d 81       	ldd	r20, Y+5	; 0x05
    a1f8:	41 30       	cpi	r20, 0x01	; 1
    a1fa:	11 f5       	brne	.+68     	; 0xa240 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    a1fc:	fe 01       	movw	r30, r28
    a1fe:	21 91       	ld	r18, Z+
    a200:	8f 01       	movw	r16, r30
    a202:	fc 01       	movw	r30, r24
    a204:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    a206:	43 e0       	ldi	r20, 0x03	; 3
    a208:	b8 01       	movw	r22, r16
    a20a:	0b 96       	adiw	r24, 0x0b	; 11
    a20c:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    a210:	88 81       	ld	r24, Y
    a212:	f3 e0       	ldi	r31, 0x03	; 3
    a214:	8f 02       	muls	r24, r31
    a216:	c0 01       	movw	r24, r0
    a218:	11 24       	eor	r1, r1
    a21a:	43 e0       	ldi	r20, 0x03	; 3
    a21c:	b8 01       	movw	r22, r16
    a21e:	8a 5d       	subi	r24, 0xDA	; 218
    a220:	9e 4f       	sbci	r25, 0xFE	; 254
    a222:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
		SFX_NAVIGATE;
    a226:	2f ef       	ldi	r18, 0xFF	; 255
    a228:	47 e1       	ldi	r20, 0x17	; 23
    a22a:	67 e0       	ldi	r22, 0x07	; 7
    a22c:	84 e0       	ldi	r24, 0x04	; 4
    a22e:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a232:	84 e2       	ldi	r24, 0x24	; 36
    a234:	91 e0       	ldi	r25, 0x01	; 1
    a236:	0e 94 b1 33 	call	0x6762	; 0x6762 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    a23a:	82 e0       	ldi	r24, 0x02	; 2
    a23c:	8d 83       	std	Y+5, r24	; 0x05
    a23e:	1a c0       	rjmp	.+52     	; 0xa274 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    a240:	31 ff       	sbrs	r19, 1
    a242:	18 c0       	rjmp	.+48     	; 0xa274 <_handle_select_helper+0x180>
    a244:	8d 81       	ldd	r24, Y+5	; 0x05
    a246:	81 30       	cpi	r24, 0x01	; 1
    a248:	11 f4       	brne	.+4      	; 0xa24e <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    a24a:	1d 82       	std	Y+5, r1	; 0x05
    a24c:	8e cf       	rjmp	.-228    	; 0xa16a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    a24e:	82 30       	cpi	r24, 0x02	; 2
    a250:	19 f4       	brne	.+6      	; 0xa258 <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    a252:	81 e0       	ldi	r24, 0x01	; 1
    a254:	8d 83       	std	Y+5, r24	; 0x05
    a256:	89 cf       	rjmp	.-238    	; 0xa16a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    a258:	2f ef       	ldi	r18, 0xFF	; 255
    a25a:	47 e1       	ldi	r20, 0x17	; 23
    a25c:	67 e0       	ldi	r22, 0x07	; 7
    a25e:	84 e0       	ldi	r24, 0x04	; 4
    a260:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		fade_through();
    a264:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <fade_through>
		load_splash();
	}
}
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    a270:	0c 94 22 4d 	jmp	0x9a44	; 0x9a44 <load_splash>
	}
}
    a274:	df 91       	pop	r29
    a276:	cf 91       	pop	r28
    a278:	1f 91       	pop	r17
    a27a:	0f 91       	pop	r16
    a27c:	08 95       	ret

0000a27e <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    a27e:	af 92       	push	r10
    a280:	bf 92       	push	r11
    a282:	cf 92       	push	r12
    a284:	df 92       	push	r13
    a286:	ef 92       	push	r14
    a288:	ff 92       	push	r15
    a28a:	0f 93       	push	r16
    a28c:	1f 93       	push	r17
    a28e:	cf 93       	push	r28
    a290:	df 93       	push	r29
    a292:	00 d0       	rcall	.+0      	; 0xa294 <_handle_select_render_helper+0x16>
    a294:	1f 92       	push	r1
    a296:	cd b7       	in	r28, 0x3d	; 61
    a298:	de b7       	in	r29, 0x3e	; 62
    a29a:	7c 01       	movw	r14, r24
    a29c:	b4 2e       	mov	r11, r20
    a29e:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    a2a0:	80 e2       	ldi	r24, 0x20	; 32
    a2a2:	89 83       	std	Y+1, r24	; 0x01
    a2a4:	8a 83       	std	Y+2, r24	; 0x02
    a2a6:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    a2a8:	f7 01       	movw	r30, r14
    a2aa:	85 81       	ldd	r24, Z+5	; 0x05
    a2ac:	81 11       	cpse	r24, r1
    a2ae:	1d c0       	rjmp	.+58     	; 0xa2ea <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    a2b0:	40 e0       	ldi	r20, 0x00	; 0
    a2b2:	67 e9       	ldi	r22, 0x97	; 151
    a2b4:	70 e2       	ldi	r23, 0x20	; 32
    a2b6:	82 2f       	mov	r24, r18
    a2b8:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    a2bc:	40 e0       	ldi	r20, 0x00	; 0
    a2be:	6c ed       	ldi	r22, 0xDC	; 220
    a2c0:	70 e2       	ldi	r23, 0x20	; 32
    a2c2:	81 e0       	ldi	r24, 0x01	; 1
    a2c4:	81 0f       	add	r24, r17
    a2c6:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    a2ca:	f7 01       	movw	r30, r14
    a2cc:	40 81       	ld	r20, Z
    a2ce:	44 0f       	add	r20, r20
    a2d0:	44 0f       	add	r20, r20
    a2d2:	44 0f       	add	r20, r20
    a2d4:	40 5c       	subi	r20, 0xC0	; 192
    a2d6:	01 e0       	ldi	r16, 0x01	; 1
    a2d8:	21 e0       	ldi	r18, 0x01	; 1
    a2da:	6b 2d       	mov	r22, r11
    a2dc:	66 0f       	add	r22, r22
    a2de:	66 0f       	add	r22, r22
    a2e0:	66 0f       	add	r22, r22
    a2e2:	81 2f       	mov	r24, r17
    a2e4:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
    a2e8:	6f c0       	rjmp	.+222    	; 0xa3c8 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    a2ea:	81 30       	cpi	r24, 0x01	; 1
    a2ec:	09 f0       	breq	.+2      	; 0xa2f0 <_handle_select_render_helper+0x72>
    a2ee:	44 c0       	rjmp	.+136    	; 0xa378 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    a2f0:	40 e0       	ldi	r20, 0x00	; 0
    a2f2:	67 e9       	ldi	r22, 0x97	; 151
    a2f4:	70 e2       	ldi	r23, 0x20	; 32
    a2f6:	82 2f       	mov	r24, r18
    a2f8:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    a2fc:	aa 24       	eor	r10, r10
    a2fe:	a3 94       	inc	r10
    a300:	a1 0e       	add	r10, r17
    a302:	40 e0       	ldi	r20, 0x00	; 0
    a304:	67 e9       	ldi	r22, 0x97	; 151
    a306:	70 e2       	ldi	r23, 0x20	; 32
    a308:	8a 2d       	mov	r24, r10
    a30a:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    a30e:	cb 2c       	mov	r12, r11
    a310:	d1 2c       	mov	r13, r1
    a312:	f5 e0       	ldi	r31, 0x05	; 5
    a314:	cf 0e       	add	r12, r31
    a316:	d1 1c       	adc	r13, r1
    a318:	f7 01       	movw	r30, r14
    a31a:	40 81       	ld	r20, Z
    a31c:	44 0f       	add	r20, r20
    a31e:	44 0f       	add	r20, r20
    a320:	44 0f       	add	r20, r20
    a322:	48 5c       	subi	r20, 0xC8	; 200
    a324:	84 81       	ldd	r24, Z+4	; 0x04
    a326:	b6 01       	movw	r22, r12
    a328:	68 0f       	add	r22, r24
    a32a:	71 1d       	adc	r23, r1
    a32c:	87 fd       	sbrc	r24, 7
    a32e:	7a 95       	dec	r23
    a330:	66 0f       	add	r22, r22
    a332:	66 0f       	add	r22, r22
    a334:	66 0f       	add	r22, r22
    a336:	01 e0       	ldi	r16, 0x01	; 1
    a338:	21 e0       	ldi	r18, 0x01	; 1
    a33a:	81 2f       	mov	r24, r17
    a33c:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    a340:	f7 01       	movw	r30, r14
    a342:	40 81       	ld	r20, Z
    a344:	44 0f       	add	r20, r20
    a346:	44 0f       	add	r20, r20
    a348:	44 0f       	add	r20, r20
    a34a:	48 5b       	subi	r20, 0xB8	; 184
    a34c:	84 81       	ldd	r24, Z+4	; 0x04
    a34e:	c8 0e       	add	r12, r24
    a350:	d1 1c       	adc	r13, r1
    a352:	87 fd       	sbrc	r24, 7
    a354:	da 94       	dec	r13
    a356:	6c 2d       	mov	r22, r12
    a358:	66 0f       	add	r22, r22
    a35a:	66 0f       	add	r22, r22
    a35c:	66 0f       	add	r22, r22
    a35e:	21 e0       	ldi	r18, 0x01	; 1
    a360:	8a 2d       	mov	r24, r10
    a362:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    a366:	43 e0       	ldi	r20, 0x03	; 3
    a368:	b7 01       	movw	r22, r14
    a36a:	6f 5f       	subi	r22, 0xFF	; 255
    a36c:	7f 4f       	sbci	r23, 0xFF	; 255
    a36e:	ce 01       	movw	r24, r28
    a370:	01 96       	adiw	r24, 0x01	; 1
    a372:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
    a376:	28 c0       	rjmp	.+80     	; 0xa3c8 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    a378:	82 30       	cpi	r24, 0x02	; 2
    a37a:	31 f5       	brne	.+76     	; 0xa3c8 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    a37c:	c4 2e       	mov	r12, r20
    a37e:	d1 2c       	mov	r13, r1
    a380:	48 e2       	ldi	r20, 0x28	; 40
    a382:	65 e0       	ldi	r22, 0x05	; 5
    a384:	70 e0       	ldi	r23, 0x00	; 0
    a386:	c6 01       	movw	r24, r12
    a388:	06 96       	adiw	r24, 0x06	; 6
    a38a:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    a38e:	23 e0       	ldi	r18, 0x03	; 3
    a390:	a7 01       	movw	r20, r14
    a392:	4f 5f       	subi	r20, 0xFF	; 255
    a394:	5f 4f       	sbci	r21, 0xFF	; 255
    a396:	65 e0       	ldi	r22, 0x05	; 5
    a398:	87 e0       	ldi	r24, 0x07	; 7
    a39a:	8b 0d       	add	r24, r11
    a39c:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    a3a0:	49 e2       	ldi	r20, 0x29	; 41
    a3a2:	65 e0       	ldi	r22, 0x05	; 5
    a3a4:	70 e0       	ldi	r23, 0x00	; 0
    a3a6:	c6 01       	movw	r24, r12
    a3a8:	0a 96       	adiw	r24, 0x0a	; 10
    a3aa:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
		MapSprite2(idx, map_none, 0);
    a3ae:	40 e0       	ldi	r20, 0x00	; 0
    a3b0:	6c ed       	ldi	r22, 0xDC	; 220
    a3b2:	70 e2       	ldi	r23, 0x20	; 32
    a3b4:	81 2f       	mov	r24, r17
    a3b6:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    a3ba:	40 e0       	ldi	r20, 0x00	; 0
    a3bc:	6c ed       	ldi	r22, 0xDC	; 220
    a3be:	70 e2       	ldi	r23, 0x20	; 32
    a3c0:	81 e0       	ldi	r24, 0x01	; 1
    a3c2:	81 0f       	add	r24, r17
    a3c4:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    a3c8:	f7 01       	movw	r30, r14
    a3ca:	60 81       	ld	r22, Z
    a3cc:	68 5f       	subi	r22, 0xF8	; 248
    a3ce:	23 e0       	ldi	r18, 0x03	; 3
    a3d0:	ae 01       	movw	r20, r28
    a3d2:	4f 5f       	subi	r20, 0xFF	; 255
    a3d4:	5f 4f       	sbci	r21, 0xFF	; 255
    a3d6:	85 e0       	ldi	r24, 0x05	; 5
    a3d8:	8b 0d       	add	r24, r11
    a3da:	0e 94 5f 41 	call	0x82be	; 0x82be <LBPrintStr>
}
    a3de:	0f 90       	pop	r0
    a3e0:	0f 90       	pop	r0
    a3e2:	0f 90       	pop	r0
    a3e4:	df 91       	pop	r29
    a3e6:	cf 91       	pop	r28
    a3e8:	1f 91       	pop	r17
    a3ea:	0f 91       	pop	r16
    a3ec:	ff 90       	pop	r15
    a3ee:	ef 90       	pop	r14
    a3f0:	df 90       	pop	r13
    a3f2:	cf 90       	pop	r12
    a3f4:	bf 90       	pop	r11
    a3f6:	af 90       	pop	r10
    a3f8:	08 95       	ret

0000a3fa <load_handle_select>:

void load_handle_select()
{
    a3fa:	8f 92       	push	r8
    a3fc:	9f 92       	push	r9
    a3fe:	af 92       	push	r10
    a400:	bf 92       	push	r11
    a402:	cf 92       	push	r12
    a404:	df 92       	push	r13
    a406:	ef 92       	push	r14
    a408:	ff 92       	push	r15
    a40a:	0f 93       	push	r16
    a40c:	1f 93       	push	r17
    a40e:	cf 93       	push	r28
    a410:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    a412:	82 e0       	ldi	r24, 0x02	; 2
    a414:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a418:	0e 94 e6 43 	call	0x87cc	; 0x87cc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a41c:	40 e0       	ldi	r20, 0x00	; 0
    a41e:	66 ed       	ldi	r22, 0xD6	; 214
    a420:	70 e2       	ldi	r23, 0x20	; 32
    a422:	80 e0       	ldi	r24, 0x00	; 0
    a424:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a428:	40 e0       	ldi	r20, 0x00	; 0
    a42a:	6e eb       	ldi	r22, 0xBE	; 190
    a42c:	70 e2       	ldi	r23, 0x20	; 32
    a42e:	84 e0       	ldi	r24, 0x04	; 4
    a430:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    a434:	02 e0       	ldi	r16, 0x02	; 2
    a436:	22 e0       	ldi	r18, 0x02	; 2
    a438:	40 e2       	ldi	r20, 0x20	; 32
    a43a:	68 e1       	ldi	r22, 0x18	; 24
    a43c:	80 e0       	ldi	r24, 0x00	; 0
    a43e:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    a442:	22 e0       	ldi	r18, 0x02	; 2
    a444:	40 e2       	ldi	r20, 0x20	; 32
    a446:	60 ea       	ldi	r22, 0xA0	; 160
    a448:	84 e0       	ldi	r24, 0x04	; 4
    a44a:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    a44e:	4e e7       	ldi	r20, 0x7E	; 126
    a450:	52 e0       	ldi	r21, 0x02	; 2
    a452:	61 e0       	ldi	r22, 0x01	; 1
    a454:	70 e0       	ldi	r23, 0x00	; 0
    a456:	89 e0       	ldi	r24, 0x09	; 9
    a458:	90 e0       	ldi	r25, 0x00	; 0
    a45a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(6, 5, strPlayer1);
    a45e:	4d e6       	ldi	r20, 0x6D	; 109
    a460:	52 e0       	ldi	r21, 0x02	; 2
    a462:	65 e0       	ldi	r22, 0x05	; 5
    a464:	70 e0       	ldi	r23, 0x00	; 0
    a466:	86 e0       	ldi	r24, 0x06	; 6
    a468:	90 e0       	ldi	r25, 0x00	; 0
    a46a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(23, 5, strPlayer2);
    a46e:	4a e6       	ldi	r20, 0x6A	; 106
    a470:	52 e0       	ldi	r21, 0x02	; 2
    a472:	65 e0       	ldi	r22, 0x05	; 5
    a474:	70 e0       	ldi	r23, 0x00	; 0
    a476:	87 e1       	ldi	r24, 0x17	; 23
    a478:	90 e0       	ldi	r25, 0x00	; 0
    a47a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
    a47e:	86 e2       	ldi	r24, 0x26	; 38
    a480:	e8 2e       	mov	r14, r24
    a482:	81 e0       	ldi	r24, 0x01	; 1
    a484:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    a486:	c0 e0       	ldi	r28, 0x00	; 0
    a488:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    a48a:	93 e0       	ldi	r25, 0x03	; 3
    a48c:	a9 2e       	mov	r10, r25
    a48e:	b1 2c       	mov	r11, r1
    a490:	67 01       	movw	r12, r14
    a492:	ce 01       	movw	r24, r28
    a494:	b5 01       	movw	r22, r10
    a496:	0e 94 b7 53 	call	0xa76e	; 0xa76e <__divmodhi4>
    a49a:	4c 01       	movw	r8, r24
    a49c:	8b 01       	movw	r16, r22
    a49e:	08 5f       	subi	r16, 0xF8	; 248
    a4a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a4a2:	f7 01       	movw	r30, r14
    a4a4:	41 91       	ld	r20, Z+
    a4a6:	7f 01       	movw	r14, r30
    a4a8:	b8 01       	movw	r22, r16
    a4aa:	03 96       	adiw	r24, 0x03	; 3
    a4ac:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    a4b0:	f6 01       	movw	r30, r12
    a4b2:	40 81       	ld	r20, Z
    a4b4:	b8 01       	movw	r22, r16
    a4b6:	c4 01       	movw	r24, r8
    a4b8:	44 96       	adiw	r24, 0x14	; 20
    a4ba:	0e 94 85 40 	call	0x810a	; 0x810a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    a4be:	21 96       	adiw	r28, 0x01	; 1
    a4c0:	cb 31       	cpi	r28, 0x1B	; 27
    a4c2:	d1 05       	cpc	r29, r1
    a4c4:	29 f7       	brne	.-54     	; 0xa490 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    a4c6:	4f e5       	ldi	r20, 0x5F	; 95
    a4c8:	52 e0       	ldi	r21, 0x02	; 2
    a4ca:	65 e1       	ldi	r22, 0x15	; 21
    a4cc:	70 e0       	ldi	r23, 0x00	; 0
    a4ce:	88 e0       	ldi	r24, 0x08	; 8
    a4d0:	90 e0       	ldi	r25, 0x00	; 0
    a4d2:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(8, 22, strConfirmHandle);
    a4d6:	43 e5       	ldi	r20, 0x53	; 83
    a4d8:	52 e0       	ldi	r21, 0x02	; 2
    a4da:	66 e1       	ldi	r22, 0x16	; 22
    a4dc:	70 e0       	ldi	r23, 0x00	; 0
    a4de:	88 e0       	ldi	r24, 0x08	; 8
    a4e0:	90 e0       	ldi	r25, 0x00	; 0
    a4e2:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(8, 23, strCancelHandle);
    a4e6:	48 e4       	ldi	r20, 0x48	; 72
    a4e8:	52 e0       	ldi	r21, 0x02	; 2
    a4ea:	67 e1       	ldi	r22, 0x17	; 23
    a4ec:	70 e0       	ldi	r23, 0x00	; 0
    a4ee:	88 e0       	ldi	r24, 0x08	; 8
    a4f0:	90 e0       	ldi	r25, 0x00	; 0
    a4f2:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>
	Print(8, 24, strChangeHandle);
    a4f6:	49 e3       	ldi	r20, 0x39	; 57
    a4f8:	52 e0       	ldi	r21, 0x02	; 2
    a4fa:	68 e1       	ldi	r22, 0x18	; 24
    a4fc:	70 e0       	ldi	r23, 0x00	; 0
    a4fe:	88 e0       	ldi	r24, 0x08	; 8
    a500:	90 e0       	ldi	r25, 0x00	; 0
}
    a502:	df 91       	pop	r29
    a504:	cf 91       	pop	r28
    a506:	1f 91       	pop	r17
    a508:	0f 91       	pop	r16
    a50a:	ff 90       	pop	r15
    a50c:	ef 90       	pop	r14
    a50e:	df 90       	pop	r13
    a510:	cf 90       	pop	r12
    a512:	bf 90       	pop	r11
    a514:	af 90       	pop	r10
    a516:	9f 90       	pop	r9
    a518:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    a51a:	0c 94 6a 40 	jmp	0x80d4	; 0x80d4 <Print>

0000a51e <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    a51e:	0f 93       	push	r16
    a520:	cf 93       	push	r28
    a522:	df 93       	push	r29
    a524:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    a526:	90 91 c4 0b 	lds	r25, 0x0BC4
    a52a:	91 30       	cpi	r25, 0x01	; 1
    a52c:	41 f0       	breq	.+16     	; 0xa53e <update_splash+0x20>
    a52e:	92 30       	cpi	r25, 0x02	; 2
    a530:	51 f0       	breq	.+20     	; 0xa546 <update_splash+0x28>
    a532:	91 11       	cpse	r25, r1
    a534:	0f c0       	rjmp	.+30     	; 0xa554 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    a536:	01 e0       	ldi	r16, 0x01	; 1
    a538:	21 e0       	ldi	r18, 0x01	; 1
    a53a:	48 e6       	ldi	r20, 0x68	; 104
    a53c:	07 c0       	rjmp	.+14     	; 0xa54c <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    a53e:	01 e0       	ldi	r16, 0x01	; 1
    a540:	21 e0       	ldi	r18, 0x01	; 1
    a542:	40 e7       	ldi	r20, 0x70	; 112
    a544:	03 c0       	rjmp	.+6      	; 0xa54c <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    a546:	01 e0       	ldi	r16, 0x01	; 1
    a548:	21 e0       	ldi	r18, 0x01	; 1
    a54a:	48 e7       	ldi	r20, 0x78	; 120
    a54c:	60 e3       	ldi	r22, 0x30	; 48
    a54e:	80 e0       	ldi	r24, 0x00	; 0
    a550:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    a554:	4f e5       	ldi	r20, 0x5F	; 95
    a556:	52 e0       	ldi	r21, 0x02	; 2
    a558:	65 e1       	ldi	r22, 0x15	; 21
    a55a:	70 e0       	ldi	r23, 0x00	; 0
    a55c:	89 e0       	ldi	r24, 0x09	; 9
    a55e:	90 e0       	ldi	r25, 0x00	; 0
    a560:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    a564:	88 81       	ld	r24, Y
    a566:	99 81       	ldd	r25, Y+1	; 0x01
    a568:	84 ff       	sbrs	r24, 4
    a56a:	10 c0       	rjmp	.+32     	; 0xa58c <update_splash+0x6e>
	{
		game.selection--;
    a56c:	80 91 c4 0b 	lds	r24, 0x0BC4
    a570:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    a572:	87 ff       	sbrs	r24, 7
    a574:	13 c0       	rjmp	.+38     	; 0xa59c <update_splash+0x7e>
    a576:	10 92 c4 0b 	sts	0x0BC4, r1
		SFX_NAVIGATE;
    a57a:	2f ef       	ldi	r18, 0xFF	; 255
    a57c:	47 e1       	ldi	r20, 0x17	; 23
    a57e:	67 e0       	ldi	r22, 0x07	; 7
    a580:	84 e0       	ldi	r24, 0x04	; 4
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    a582:	df 91       	pop	r29
    a584:	cf 91       	pop	r28
    a586:	0f 91       	pop	r16
	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
		if (game.selection < PVCPU) game.selection = PVCPU;
		SFX_NAVIGATE;
    a588:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <TriggerNote>
	}
	else if (p1->pressed & BTN_DOWN)
    a58c:	85 ff       	sbrs	r24, 5
    a58e:	09 c0       	rjmp	.+18     	; 0xa5a2 <update_splash+0x84>
	{
		game.selection++;
    a590:	80 91 c4 0b 	lds	r24, 0x0BC4
    a594:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    a596:	83 30       	cpi	r24, 0x03	; 3
    a598:	0c f0       	brlt	.+2      	; 0xa59c <update_splash+0x7e>
    a59a:	82 e0       	ldi	r24, 0x02	; 2
    a59c:	80 93 c4 0b 	sts	0x0BC4, r24
    a5a0:	ec cf       	rjmp	.-40     	; 0xa57a <update_splash+0x5c>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    a5a2:	90 ff       	sbrs	r25, 0
    a5a4:	26 c0       	rjmp	.+76     	; 0xa5f2 <update_splash+0xd4>
    a5a6:	80 91 c4 0b 	lds	r24, 0x0BC4
    a5aa:	82 30       	cpi	r24, 0x02	; 2
    a5ac:	a8 f4       	brcc	.+42     	; 0xa5d8 <update_splash+0xba>
	{
		p1s.select_state = SELECTING;
    a5ae:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    a5b2:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    a5b6:	2f ef       	ldi	r18, 0xFF	; 255
    a5b8:	47 e1       	ldi	r20, 0x17	; 23
    a5ba:	67 e0       	ldi	r22, 0x07	; 7
    a5bc:	84 e0       	ldi	r24, 0x04	; 4
    a5be:	0e 94 e7 35 	call	0x6bce	; 0x6bce <TriggerNote>
		fade_through();
    a5c2:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <fade_through>
		load_eeprom(&handles);
    a5c6:	84 e2       	ldi	r24, 0x24	; 36
    a5c8:	91 e0       	ldi	r25, 0x01	; 1
    a5ca:	0e 94 ca 43 	call	0x8794	; 0x8794 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    a5ce:	df 91       	pop	r29
    a5d0:	cf 91       	pop	r28
    a5d2:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    a5d4:	0c 94 fd 51 	jmp	0xa3fa	; 0xa3fa <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    a5d8:	82 30       	cpi	r24, 0x02	; 2
    a5da:	59 f4       	brne	.+22     	; 0xa5f2 <update_splash+0xd4>
	{
		fade_through();
    a5dc:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <fade_through>
		load_eeprom(&scores);
    a5e0:	84 e0       	ldi	r24, 0x04	; 4
    a5e2:	91 e0       	ldi	r25, 0x01	; 1
    a5e4:	0e 94 ca 43 	call	0x8794	; 0x8794 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    a5e8:	df 91       	pop	r29
    a5ea:	cf 91       	pop	r28
    a5ec:	0f 91       	pop	r16
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    a5ee:	0c 94 58 4d 	jmp	0x9ab0	; 0x9ab0 <load_tank_rank>
		return;
	}
}
    a5f2:	df 91       	pop	r29
    a5f4:	cf 91       	pop	r28
    a5f6:	0f 91       	pop	r16
    a5f8:	08 95       	ret

0000a5fa <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    a5fa:	0f 93       	push	r16
    a5fc:	1f 93       	push	r17
    a5fe:	cf 93       	push	r28
    a600:	df 93       	push	r29
    a602:	8c 01       	movw	r16, r24
    a604:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    a606:	28 e0       	ldi	r18, 0x08	; 8
    a608:	42 e0       	ldi	r20, 0x02	; 2
    a60a:	bc 01       	movw	r22, r24
    a60c:	8a e2       	ldi	r24, 0x2A	; 42
    a60e:	9b e0       	ldi	r25, 0x0B	; 11
    a610:	0e 94 3f 51 	call	0xa27e	; 0xa27e <_handle_select_render_helper>
	if (game.selection == PVP)
    a614:	80 91 c4 0b 	lds	r24, 0x0BC4
    a618:	81 30       	cpi	r24, 0x01	; 1
    a61a:	39 f4       	brne	.+14     	; 0xa62a <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    a61c:	2a e0       	ldi	r18, 0x0A	; 10
    a61e:	43 e1       	ldi	r20, 0x13	; 19
    a620:	be 01       	movw	r22, r28
    a622:	84 e2       	ldi	r24, 0x24	; 36
    a624:	9b e0       	ldi	r25, 0x0B	; 11
    a626:	0e 94 3f 51 	call	0xa27e	; 0xa27e <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    a62a:	4e ed       	ldi	r20, 0xDE	; 222
    a62c:	5b e0       	ldi	r21, 0x0B	; 11
    a62e:	b8 01       	movw	r22, r16
    a630:	8a e2       	ldi	r24, 0x2A	; 42
    a632:	9b e0       	ldi	r25, 0x0B	; 11
    a634:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    a638:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    a63c:	80 91 c4 0b 	lds	r24, 0x0BC4
    a640:	81 30       	cpi	r24, 0x01	; 1
    a642:	19 f0       	breq	.+6      	; 0xa64a <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    a644:	12 30       	cpi	r17, 0x02	; 2
    a646:	69 f0       	breq	.+26     	; 0xa662 <update_handle_select+0x68>
    a648:	21 c0       	rjmp	.+66     	; 0xa68c <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    a64a:	4f e4       	ldi	r20, 0x4F	; 79
    a64c:	5f e0       	ldi	r21, 0x0F	; 15
    a64e:	be 01       	movw	r22, r28
    a650:	84 e2       	ldi	r24, 0x24	; 36
    a652:	9b e0       	ldi	r25, 0x0B	; 11
    a654:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    a658:	80 91 29 0b 	lds	r24, 0x0B29
    a65c:	82 30       	cpi	r24, 0x02	; 2
    a65e:	b1 f4       	brne	.+44     	; 0xa68c <update_handle_select+0x92>
    a660:	f1 cf       	rjmp	.-30     	; 0xa644 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    a662:	80 91 c4 0b 	lds	r24, 0x0BC4
    a666:	81 11       	cpse	r24, r1
    a668:	0a c0       	rjmp	.+20     	; 0xa67e <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    a66a:	89 e0       	ldi	r24, 0x09	; 9
    a66c:	80 93 59 0f 	sts	0x0F59, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    a670:	43 e0       	ldi	r20, 0x03	; 3
    a672:	61 e4       	ldi	r22, 0x41	; 65
    a674:	71 e0       	ldi	r23, 0x01	; 1
    a676:	8a e5       	ldi	r24, 0x5A	; 90
    a678:	9f e0       	ldi	r25, 0x0F	; 15
    a67a:	0e 94 53 41 	call	0x82a6	; 0x82a6 <LBCopyChars>
		}
		level_transition(0);
    a67e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    a680:	df 91       	pop	r29
    a682:	cf 91       	pop	r28
    a684:	1f 91       	pop	r17
    a686:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    a688:	0c 94 f6 4c 	jmp	0x99ec	; 0x99ec <level_transition>
	}
}
    a68c:	df 91       	pop	r29
    a68e:	cf 91       	pop	r28
    a690:	1f 91       	pop	r17
    a692:	0f 91       	pop	r16
    a694:	08 95       	ret

0000a696 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    a696:	8a ec       	ldi	r24, 0xCA	; 202
    a698:	92 e0       	ldi	r25, 0x02	; 2
    a69a:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <InitMusicPlayer>
	SetTileTable(tiles_data);
    a69e:	88 ef       	ldi	r24, 0xF8	; 248
    a6a0:	99 e3       	ldi	r25, 0x39	; 57
    a6a2:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    a6a6:	88 ef       	ldi	r24, 0xF8	; 248
    a6a8:	9d e2       	ldi	r25, 0x2D	; 45
    a6aa:	0e 94 ce 32 	call	0x659c	; 0x659c <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    a6ae:	8f e2       	ldi	r24, 0x2F	; 47
    a6b0:	0e 94 ef 32 	call	0x65de	; 0x65de <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    a6b4:	60 e0       	ldi	r22, 0x00	; 0
    a6b6:	83 e0       	ldi	r24, 0x03	; 3
    a6b8:	0e 94 ad 40 	call	0x815a	; 0x815a <FadeIn>
	ClearVram();
    a6bc:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ClearVram>
	init_game_state();
    a6c0:	0e 94 98 43 	call	0x8730	; 0x8730 <init_game_state>
	init_tile_animations(&tile_animations);
    a6c4:	85 ec       	ldi	r24, 0xC5	; 197
    a6c6:	9b e0       	ldi	r25, 0x0B	; 11
    a6c8:	0e 94 bc 42 	call	0x8578	; 0x8578 <init_tile_animations>
	load_splash();
    a6cc:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    a6d0:	81 e0       	ldi	r24, 0x01	; 1
    a6d2:	90 e0       	ldi	r25, 0x00	; 0
    a6d4:	0e 94 88 40 	call	0x8110	; 0x8110 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    a6d8:	6b eb       	ldi	r22, 0xBB	; 187
    a6da:	7b e0       	ldi	r23, 0x0B	; 11
    a6dc:	8a e5       	ldi	r24, 0x5A	; 90
    a6de:	9c e0       	ldi	r25, 0x0C	; 12
    a6e0:	0e 94 11 41 	call	0x8222	; 0x8222 <LBGetJoyPadState>
		switch (game.current_screen)
    a6e4:	80 91 c1 0b 	lds	r24, 0x0BC1
    a6e8:	81 30       	cpi	r24, 0x01	; 1
    a6ea:	99 f0       	breq	.+38     	; 0xa712 <main+0x7c>
    a6ec:	58 f0       	brcs	.+22     	; 0xa704 <main+0x6e>
    a6ee:	82 30       	cpi	r24, 0x02	; 2
    a6f0:	b9 f0       	breq	.+46     	; 0xa720 <main+0x8a>
    a6f2:	83 30       	cpi	r24, 0x03	; 3
    a6f4:	69 f7       	brne	.-38     	; 0xa6d0 <main+0x3a>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				// p2 should be replaced by AI input for Player v CPU
				update_level(&p1, &p2);
    a6f6:	6b eb       	ldi	r22, 0xBB	; 187
    a6f8:	7b e0       	ldi	r23, 0x0B	; 11
    a6fa:	8a e5       	ldi	r24, 0x5A	; 90
    a6fc:	9c e0       	ldi	r25, 0x0C	; 12
    a6fe:	0e 94 d8 4f 	call	0x9fb0	; 0x9fb0 <update_level>
				break;
    a702:	e6 cf       	rjmp	.-52     	; 0xa6d0 <main+0x3a>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    a704:	6b eb       	ldi	r22, 0xBB	; 187
    a706:	7b e0       	ldi	r23, 0x0B	; 11
    a708:	8a e5       	ldi	r24, 0x5A	; 90
    a70a:	9c e0       	ldi	r25, 0x0C	; 12
    a70c:	0e 94 8f 52 	call	0xa51e	; 0xa51e <update_splash>
				break;
    a710:	df cf       	rjmp	.-66     	; 0xa6d0 <main+0x3a>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    a712:	6b eb       	ldi	r22, 0xBB	; 187
    a714:	7b e0       	ldi	r23, 0x0B	; 11
    a716:	8a e5       	ldi	r24, 0x5A	; 90
    a718:	9c e0       	ldi	r25, 0x0C	; 12
    a71a:	0e 94 6a 50 	call	0xa0d4	; 0xa0d4 <update_tank_rank>
				break;
    a71e:	d8 cf       	rjmp	.-80     	; 0xa6d0 <main+0x3a>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    a720:	6b eb       	ldi	r22, 0xBB	; 187
    a722:	7b e0       	ldi	r23, 0x0B	; 11
    a724:	8a e5       	ldi	r24, 0x5A	; 90
    a726:	9c e0       	ldi	r25, 0x0C	; 12
    a728:	0e 94 fd 52 	call	0xa5fa	; 0xa5fa <update_handle_select>
				break;
    a72c:	d1 cf       	rjmp	.-94     	; 0xa6d0 <main+0x3a>

0000a72e <__udivmodqi4>:
    a72e:	99 1b       	sub	r25, r25
    a730:	79 e0       	ldi	r23, 0x09	; 9
    a732:	04 c0       	rjmp	.+8      	; 0xa73c <__udivmodqi4_ep>

0000a734 <__udivmodqi4_loop>:
    a734:	99 1f       	adc	r25, r25
    a736:	96 17       	cp	r25, r22
    a738:	08 f0       	brcs	.+2      	; 0xa73c <__udivmodqi4_ep>
    a73a:	96 1b       	sub	r25, r22

0000a73c <__udivmodqi4_ep>:
    a73c:	88 1f       	adc	r24, r24
    a73e:	7a 95       	dec	r23
    a740:	c9 f7       	brne	.-14     	; 0xa734 <__udivmodqi4_loop>
    a742:	80 95       	com	r24
    a744:	08 95       	ret

0000a746 <__udivmodhi4>:
    a746:	aa 1b       	sub	r26, r26
    a748:	bb 1b       	sub	r27, r27
    a74a:	51 e1       	ldi	r21, 0x11	; 17
    a74c:	07 c0       	rjmp	.+14     	; 0xa75c <__udivmodhi4_ep>

0000a74e <__udivmodhi4_loop>:
    a74e:	aa 1f       	adc	r26, r26
    a750:	bb 1f       	adc	r27, r27
    a752:	a6 17       	cp	r26, r22
    a754:	b7 07       	cpc	r27, r23
    a756:	10 f0       	brcs	.+4      	; 0xa75c <__udivmodhi4_ep>
    a758:	a6 1b       	sub	r26, r22
    a75a:	b7 0b       	sbc	r27, r23

0000a75c <__udivmodhi4_ep>:
    a75c:	88 1f       	adc	r24, r24
    a75e:	99 1f       	adc	r25, r25
    a760:	5a 95       	dec	r21
    a762:	a9 f7       	brne	.-22     	; 0xa74e <__udivmodhi4_loop>
    a764:	80 95       	com	r24
    a766:	90 95       	com	r25
    a768:	bc 01       	movw	r22, r24
    a76a:	cd 01       	movw	r24, r26
    a76c:	08 95       	ret

0000a76e <__divmodhi4>:
    a76e:	97 fb       	bst	r25, 7
    a770:	07 2e       	mov	r0, r23
    a772:	16 f4       	brtc	.+4      	; 0xa778 <__divmodhi4+0xa>
    a774:	00 94       	com	r0
    a776:	07 d0       	rcall	.+14     	; 0xa786 <__divmodhi4_neg1>
    a778:	77 fd       	sbrc	r23, 7
    a77a:	09 d0       	rcall	.+18     	; 0xa78e <__divmodhi4_neg2>
    a77c:	0e 94 a3 53 	call	0xa746	; 0xa746 <__udivmodhi4>
    a780:	07 fc       	sbrc	r0, 7
    a782:	05 d0       	rcall	.+10     	; 0xa78e <__divmodhi4_neg2>
    a784:	3e f4       	brtc	.+14     	; 0xa794 <__divmodhi4_exit>

0000a786 <__divmodhi4_neg1>:
    a786:	90 95       	com	r25
    a788:	81 95       	neg	r24
    a78a:	9f 4f       	sbci	r25, 0xFF	; 255
    a78c:	08 95       	ret

0000a78e <__divmodhi4_neg2>:
    a78e:	70 95       	com	r23
    a790:	61 95       	neg	r22
    a792:	7f 4f       	sbci	r23, 0xFF	; 255

0000a794 <__divmodhi4_exit>:
    a794:	08 95       	ret

0000a796 <__tablejump2__>:
    a796:	ee 0f       	add	r30, r30
    a798:	ff 1f       	adc	r31, r31
    a79a:	05 90       	lpm	r0, Z+
    a79c:	f4 91       	lpm	r31, Z
    a79e:	e0 2d       	mov	r30, r0
    a7a0:	09 94       	ijmp

0000a7a2 <__subsf3>:
    a7a2:	50 58       	subi	r21, 0x80	; 128

0000a7a4 <__addsf3>:
    a7a4:	bb 27       	eor	r27, r27
    a7a6:	aa 27       	eor	r26, r26
    a7a8:	0e d0       	rcall	.+28     	; 0xa7c6 <__addsf3x>
    a7aa:	70 c1       	rjmp	.+736    	; 0xaa8c <__fp_round>
    a7ac:	61 d1       	rcall	.+706    	; 0xaa70 <__fp_pscA>
    a7ae:	30 f0       	brcs	.+12     	; 0xa7bc <__addsf3+0x18>
    a7b0:	66 d1       	rcall	.+716    	; 0xaa7e <__fp_pscB>
    a7b2:	20 f0       	brcs	.+8      	; 0xa7bc <__addsf3+0x18>
    a7b4:	31 f4       	brne	.+12     	; 0xa7c2 <__addsf3+0x1e>
    a7b6:	9f 3f       	cpi	r25, 0xFF	; 255
    a7b8:	11 f4       	brne	.+4      	; 0xa7be <__addsf3+0x1a>
    a7ba:	1e f4       	brtc	.+6      	; 0xa7c2 <__addsf3+0x1e>
    a7bc:	56 c1       	rjmp	.+684    	; 0xaa6a <__fp_nan>
    a7be:	0e f4       	brtc	.+2      	; 0xa7c2 <__addsf3+0x1e>
    a7c0:	e0 95       	com	r30
    a7c2:	e7 fb       	bst	r30, 7
    a7c4:	4c c1       	rjmp	.+664    	; 0xaa5e <__fp_inf>

0000a7c6 <__addsf3x>:
    a7c6:	e9 2f       	mov	r30, r25
    a7c8:	72 d1       	rcall	.+740    	; 0xaaae <__fp_split3>
    a7ca:	80 f3       	brcs	.-32     	; 0xa7ac <__addsf3+0x8>
    a7cc:	ba 17       	cp	r27, r26
    a7ce:	62 07       	cpc	r22, r18
    a7d0:	73 07       	cpc	r23, r19
    a7d2:	84 07       	cpc	r24, r20
    a7d4:	95 07       	cpc	r25, r21
    a7d6:	18 f0       	brcs	.+6      	; 0xa7de <__addsf3x+0x18>
    a7d8:	71 f4       	brne	.+28     	; 0xa7f6 <__addsf3x+0x30>
    a7da:	9e f5       	brtc	.+102    	; 0xa842 <__addsf3x+0x7c>
    a7dc:	8a c1       	rjmp	.+788    	; 0xaaf2 <__fp_zero>
    a7de:	0e f4       	brtc	.+2      	; 0xa7e2 <__addsf3x+0x1c>
    a7e0:	e0 95       	com	r30
    a7e2:	0b 2e       	mov	r0, r27
    a7e4:	ba 2f       	mov	r27, r26
    a7e6:	a0 2d       	mov	r26, r0
    a7e8:	0b 01       	movw	r0, r22
    a7ea:	b9 01       	movw	r22, r18
    a7ec:	90 01       	movw	r18, r0
    a7ee:	0c 01       	movw	r0, r24
    a7f0:	ca 01       	movw	r24, r20
    a7f2:	a0 01       	movw	r20, r0
    a7f4:	11 24       	eor	r1, r1
    a7f6:	ff 27       	eor	r31, r31
    a7f8:	59 1b       	sub	r21, r25
    a7fa:	99 f0       	breq	.+38     	; 0xa822 <__addsf3x+0x5c>
    a7fc:	59 3f       	cpi	r21, 0xF9	; 249
    a7fe:	50 f4       	brcc	.+20     	; 0xa814 <__addsf3x+0x4e>
    a800:	50 3e       	cpi	r21, 0xE0	; 224
    a802:	68 f1       	brcs	.+90     	; 0xa85e <__addsf3x+0x98>
    a804:	1a 16       	cp	r1, r26
    a806:	f0 40       	sbci	r31, 0x00	; 0
    a808:	a2 2f       	mov	r26, r18
    a80a:	23 2f       	mov	r18, r19
    a80c:	34 2f       	mov	r19, r20
    a80e:	44 27       	eor	r20, r20
    a810:	58 5f       	subi	r21, 0xF8	; 248
    a812:	f3 cf       	rjmp	.-26     	; 0xa7fa <__addsf3x+0x34>
    a814:	46 95       	lsr	r20
    a816:	37 95       	ror	r19
    a818:	27 95       	ror	r18
    a81a:	a7 95       	ror	r26
    a81c:	f0 40       	sbci	r31, 0x00	; 0
    a81e:	53 95       	inc	r21
    a820:	c9 f7       	brne	.-14     	; 0xa814 <__addsf3x+0x4e>
    a822:	7e f4       	brtc	.+30     	; 0xa842 <__addsf3x+0x7c>
    a824:	1f 16       	cp	r1, r31
    a826:	ba 0b       	sbc	r27, r26
    a828:	62 0b       	sbc	r22, r18
    a82a:	73 0b       	sbc	r23, r19
    a82c:	84 0b       	sbc	r24, r20
    a82e:	ba f0       	brmi	.+46     	; 0xa85e <__addsf3x+0x98>
    a830:	91 50       	subi	r25, 0x01	; 1
    a832:	a1 f0       	breq	.+40     	; 0xa85c <__addsf3x+0x96>
    a834:	ff 0f       	add	r31, r31
    a836:	bb 1f       	adc	r27, r27
    a838:	66 1f       	adc	r22, r22
    a83a:	77 1f       	adc	r23, r23
    a83c:	88 1f       	adc	r24, r24
    a83e:	c2 f7       	brpl	.-16     	; 0xa830 <__addsf3x+0x6a>
    a840:	0e c0       	rjmp	.+28     	; 0xa85e <__addsf3x+0x98>
    a842:	ba 0f       	add	r27, r26
    a844:	62 1f       	adc	r22, r18
    a846:	73 1f       	adc	r23, r19
    a848:	84 1f       	adc	r24, r20
    a84a:	48 f4       	brcc	.+18     	; 0xa85e <__addsf3x+0x98>
    a84c:	87 95       	ror	r24
    a84e:	77 95       	ror	r23
    a850:	67 95       	ror	r22
    a852:	b7 95       	ror	r27
    a854:	f7 95       	ror	r31
    a856:	9e 3f       	cpi	r25, 0xFE	; 254
    a858:	08 f0       	brcs	.+2      	; 0xa85c <__addsf3x+0x96>
    a85a:	b3 cf       	rjmp	.-154    	; 0xa7c2 <__addsf3+0x1e>
    a85c:	93 95       	inc	r25
    a85e:	88 0f       	add	r24, r24
    a860:	08 f0       	brcs	.+2      	; 0xa864 <__addsf3x+0x9e>
    a862:	99 27       	eor	r25, r25
    a864:	ee 0f       	add	r30, r30
    a866:	97 95       	ror	r25
    a868:	87 95       	ror	r24
    a86a:	08 95       	ret

0000a86c <__cmpsf2>:
    a86c:	d4 d0       	rcall	.+424    	; 0xaa16 <__fp_cmp>
    a86e:	08 f4       	brcc	.+2      	; 0xa872 <__cmpsf2+0x6>
    a870:	81 e0       	ldi	r24, 0x01	; 1
    a872:	08 95       	ret

0000a874 <__divsf3>:
    a874:	0c d0       	rcall	.+24     	; 0xa88e <__divsf3x>
    a876:	0a c1       	rjmp	.+532    	; 0xaa8c <__fp_round>
    a878:	02 d1       	rcall	.+516    	; 0xaa7e <__fp_pscB>
    a87a:	40 f0       	brcs	.+16     	; 0xa88c <__divsf3+0x18>
    a87c:	f9 d0       	rcall	.+498    	; 0xaa70 <__fp_pscA>
    a87e:	30 f0       	brcs	.+12     	; 0xa88c <__divsf3+0x18>
    a880:	21 f4       	brne	.+8      	; 0xa88a <__divsf3+0x16>
    a882:	5f 3f       	cpi	r21, 0xFF	; 255
    a884:	19 f0       	breq	.+6      	; 0xa88c <__divsf3+0x18>
    a886:	eb c0       	rjmp	.+470    	; 0xaa5e <__fp_inf>
    a888:	51 11       	cpse	r21, r1
    a88a:	34 c1       	rjmp	.+616    	; 0xaaf4 <__fp_szero>
    a88c:	ee c0       	rjmp	.+476    	; 0xaa6a <__fp_nan>

0000a88e <__divsf3x>:
    a88e:	0f d1       	rcall	.+542    	; 0xaaae <__fp_split3>
    a890:	98 f3       	brcs	.-26     	; 0xa878 <__divsf3+0x4>

0000a892 <__divsf3_pse>:
    a892:	99 23       	and	r25, r25
    a894:	c9 f3       	breq	.-14     	; 0xa888 <__divsf3+0x14>
    a896:	55 23       	and	r21, r21
    a898:	b1 f3       	breq	.-20     	; 0xa886 <__divsf3+0x12>
    a89a:	95 1b       	sub	r25, r21
    a89c:	55 0b       	sbc	r21, r21
    a89e:	bb 27       	eor	r27, r27
    a8a0:	aa 27       	eor	r26, r26
    a8a2:	62 17       	cp	r22, r18
    a8a4:	73 07       	cpc	r23, r19
    a8a6:	84 07       	cpc	r24, r20
    a8a8:	38 f0       	brcs	.+14     	; 0xa8b8 <__divsf3_pse+0x26>
    a8aa:	9f 5f       	subi	r25, 0xFF	; 255
    a8ac:	5f 4f       	sbci	r21, 0xFF	; 255
    a8ae:	22 0f       	add	r18, r18
    a8b0:	33 1f       	adc	r19, r19
    a8b2:	44 1f       	adc	r20, r20
    a8b4:	aa 1f       	adc	r26, r26
    a8b6:	a9 f3       	breq	.-22     	; 0xa8a2 <__divsf3_pse+0x10>
    a8b8:	33 d0       	rcall	.+102    	; 0xa920 <__divsf3_pse+0x8e>
    a8ba:	0e 2e       	mov	r0, r30
    a8bc:	3a f0       	brmi	.+14     	; 0xa8cc <__divsf3_pse+0x3a>
    a8be:	e0 e8       	ldi	r30, 0x80	; 128
    a8c0:	30 d0       	rcall	.+96     	; 0xa922 <__divsf3_pse+0x90>
    a8c2:	91 50       	subi	r25, 0x01	; 1
    a8c4:	50 40       	sbci	r21, 0x00	; 0
    a8c6:	e6 95       	lsr	r30
    a8c8:	00 1c       	adc	r0, r0
    a8ca:	ca f7       	brpl	.-14     	; 0xa8be <__divsf3_pse+0x2c>
    a8cc:	29 d0       	rcall	.+82     	; 0xa920 <__divsf3_pse+0x8e>
    a8ce:	fe 2f       	mov	r31, r30
    a8d0:	27 d0       	rcall	.+78     	; 0xa920 <__divsf3_pse+0x8e>
    a8d2:	66 0f       	add	r22, r22
    a8d4:	77 1f       	adc	r23, r23
    a8d6:	88 1f       	adc	r24, r24
    a8d8:	bb 1f       	adc	r27, r27
    a8da:	26 17       	cp	r18, r22
    a8dc:	37 07       	cpc	r19, r23
    a8de:	48 07       	cpc	r20, r24
    a8e0:	ab 07       	cpc	r26, r27
    a8e2:	b0 e8       	ldi	r27, 0x80	; 128
    a8e4:	09 f0       	breq	.+2      	; 0xa8e8 <__divsf3_pse+0x56>
    a8e6:	bb 0b       	sbc	r27, r27
    a8e8:	80 2d       	mov	r24, r0
    a8ea:	bf 01       	movw	r22, r30
    a8ec:	ff 27       	eor	r31, r31
    a8ee:	93 58       	subi	r25, 0x83	; 131
    a8f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a8f2:	2a f0       	brmi	.+10     	; 0xa8fe <__divsf3_pse+0x6c>
    a8f4:	9e 3f       	cpi	r25, 0xFE	; 254
    a8f6:	51 05       	cpc	r21, r1
    a8f8:	68 f0       	brcs	.+26     	; 0xa914 <__divsf3_pse+0x82>
    a8fa:	b1 c0       	rjmp	.+354    	; 0xaa5e <__fp_inf>
    a8fc:	fb c0       	rjmp	.+502    	; 0xaaf4 <__fp_szero>
    a8fe:	5f 3f       	cpi	r21, 0xFF	; 255
    a900:	ec f3       	brlt	.-6      	; 0xa8fc <__divsf3_pse+0x6a>
    a902:	98 3e       	cpi	r25, 0xE8	; 232
    a904:	dc f3       	brlt	.-10     	; 0xa8fc <__divsf3_pse+0x6a>
    a906:	86 95       	lsr	r24
    a908:	77 95       	ror	r23
    a90a:	67 95       	ror	r22
    a90c:	b7 95       	ror	r27
    a90e:	f7 95       	ror	r31
    a910:	9f 5f       	subi	r25, 0xFF	; 255
    a912:	c9 f7       	brne	.-14     	; 0xa906 <__divsf3_pse+0x74>
    a914:	88 0f       	add	r24, r24
    a916:	91 1d       	adc	r25, r1
    a918:	96 95       	lsr	r25
    a91a:	87 95       	ror	r24
    a91c:	97 f9       	bld	r25, 7
    a91e:	08 95       	ret
    a920:	e1 e0       	ldi	r30, 0x01	; 1
    a922:	66 0f       	add	r22, r22
    a924:	77 1f       	adc	r23, r23
    a926:	88 1f       	adc	r24, r24
    a928:	bb 1f       	adc	r27, r27
    a92a:	62 17       	cp	r22, r18
    a92c:	73 07       	cpc	r23, r19
    a92e:	84 07       	cpc	r24, r20
    a930:	ba 07       	cpc	r27, r26
    a932:	20 f0       	brcs	.+8      	; 0xa93c <__divsf3_pse+0xaa>
    a934:	62 1b       	sub	r22, r18
    a936:	73 0b       	sbc	r23, r19
    a938:	84 0b       	sbc	r24, r20
    a93a:	ba 0b       	sbc	r27, r26
    a93c:	ee 1f       	adc	r30, r30
    a93e:	88 f7       	brcc	.-30     	; 0xa922 <__divsf3_pse+0x90>
    a940:	e0 95       	com	r30
    a942:	08 95       	ret

0000a944 <__fixunssfsi>:
    a944:	bc d0       	rcall	.+376    	; 0xaabe <__fp_splitA>
    a946:	88 f0       	brcs	.+34     	; 0xa96a <__fixunssfsi+0x26>
    a948:	9f 57       	subi	r25, 0x7F	; 127
    a94a:	90 f0       	brcs	.+36     	; 0xa970 <__fixunssfsi+0x2c>
    a94c:	b9 2f       	mov	r27, r25
    a94e:	99 27       	eor	r25, r25
    a950:	b7 51       	subi	r27, 0x17	; 23
    a952:	a0 f0       	brcs	.+40     	; 0xa97c <__fixunssfsi+0x38>
    a954:	d1 f0       	breq	.+52     	; 0xa98a <__fixunssfsi+0x46>
    a956:	66 0f       	add	r22, r22
    a958:	77 1f       	adc	r23, r23
    a95a:	88 1f       	adc	r24, r24
    a95c:	99 1f       	adc	r25, r25
    a95e:	1a f0       	brmi	.+6      	; 0xa966 <__fixunssfsi+0x22>
    a960:	ba 95       	dec	r27
    a962:	c9 f7       	brne	.-14     	; 0xa956 <__fixunssfsi+0x12>
    a964:	12 c0       	rjmp	.+36     	; 0xa98a <__fixunssfsi+0x46>
    a966:	b1 30       	cpi	r27, 0x01	; 1
    a968:	81 f0       	breq	.+32     	; 0xa98a <__fixunssfsi+0x46>
    a96a:	c3 d0       	rcall	.+390    	; 0xaaf2 <__fp_zero>
    a96c:	b1 e0       	ldi	r27, 0x01	; 1
    a96e:	08 95       	ret
    a970:	c0 c0       	rjmp	.+384    	; 0xaaf2 <__fp_zero>
    a972:	67 2f       	mov	r22, r23
    a974:	78 2f       	mov	r23, r24
    a976:	88 27       	eor	r24, r24
    a978:	b8 5f       	subi	r27, 0xF8	; 248
    a97a:	39 f0       	breq	.+14     	; 0xa98a <__fixunssfsi+0x46>
    a97c:	b9 3f       	cpi	r27, 0xF9	; 249
    a97e:	cc f3       	brlt	.-14     	; 0xa972 <__fixunssfsi+0x2e>
    a980:	86 95       	lsr	r24
    a982:	77 95       	ror	r23
    a984:	67 95       	ror	r22
    a986:	b3 95       	inc	r27
    a988:	d9 f7       	brne	.-10     	; 0xa980 <__fixunssfsi+0x3c>
    a98a:	3e f4       	brtc	.+14     	; 0xa99a <__fixunssfsi+0x56>
    a98c:	90 95       	com	r25
    a98e:	80 95       	com	r24
    a990:	70 95       	com	r23
    a992:	61 95       	neg	r22
    a994:	7f 4f       	sbci	r23, 0xFF	; 255
    a996:	8f 4f       	sbci	r24, 0xFF	; 255
    a998:	9f 4f       	sbci	r25, 0xFF	; 255
    a99a:	08 95       	ret

0000a99c <__floatunsisf>:
    a99c:	e8 94       	clt
    a99e:	09 c0       	rjmp	.+18     	; 0xa9b2 <__floatsisf+0x12>

0000a9a0 <__floatsisf>:
    a9a0:	97 fb       	bst	r25, 7
    a9a2:	3e f4       	brtc	.+14     	; 0xa9b2 <__floatsisf+0x12>
    a9a4:	90 95       	com	r25
    a9a6:	80 95       	com	r24
    a9a8:	70 95       	com	r23
    a9aa:	61 95       	neg	r22
    a9ac:	7f 4f       	sbci	r23, 0xFF	; 255
    a9ae:	8f 4f       	sbci	r24, 0xFF	; 255
    a9b0:	9f 4f       	sbci	r25, 0xFF	; 255
    a9b2:	99 23       	and	r25, r25
    a9b4:	a9 f0       	breq	.+42     	; 0xa9e0 <__floatsisf+0x40>
    a9b6:	f9 2f       	mov	r31, r25
    a9b8:	96 e9       	ldi	r25, 0x96	; 150
    a9ba:	bb 27       	eor	r27, r27
    a9bc:	93 95       	inc	r25
    a9be:	f6 95       	lsr	r31
    a9c0:	87 95       	ror	r24
    a9c2:	77 95       	ror	r23
    a9c4:	67 95       	ror	r22
    a9c6:	b7 95       	ror	r27
    a9c8:	f1 11       	cpse	r31, r1
    a9ca:	f8 cf       	rjmp	.-16     	; 0xa9bc <__floatsisf+0x1c>
    a9cc:	fa f4       	brpl	.+62     	; 0xaa0c <__floatsisf+0x6c>
    a9ce:	bb 0f       	add	r27, r27
    a9d0:	11 f4       	brne	.+4      	; 0xa9d6 <__floatsisf+0x36>
    a9d2:	60 ff       	sbrs	r22, 0
    a9d4:	1b c0       	rjmp	.+54     	; 0xaa0c <__floatsisf+0x6c>
    a9d6:	6f 5f       	subi	r22, 0xFF	; 255
    a9d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a9da:	8f 4f       	sbci	r24, 0xFF	; 255
    a9dc:	9f 4f       	sbci	r25, 0xFF	; 255
    a9de:	16 c0       	rjmp	.+44     	; 0xaa0c <__floatsisf+0x6c>
    a9e0:	88 23       	and	r24, r24
    a9e2:	11 f0       	breq	.+4      	; 0xa9e8 <__floatsisf+0x48>
    a9e4:	96 e9       	ldi	r25, 0x96	; 150
    a9e6:	11 c0       	rjmp	.+34     	; 0xaa0a <__floatsisf+0x6a>
    a9e8:	77 23       	and	r23, r23
    a9ea:	21 f0       	breq	.+8      	; 0xa9f4 <__floatsisf+0x54>
    a9ec:	9e e8       	ldi	r25, 0x8E	; 142
    a9ee:	87 2f       	mov	r24, r23
    a9f0:	76 2f       	mov	r23, r22
    a9f2:	05 c0       	rjmp	.+10     	; 0xa9fe <__floatsisf+0x5e>
    a9f4:	66 23       	and	r22, r22
    a9f6:	71 f0       	breq	.+28     	; 0xaa14 <__floatsisf+0x74>
    a9f8:	96 e8       	ldi	r25, 0x86	; 134
    a9fa:	86 2f       	mov	r24, r22
    a9fc:	70 e0       	ldi	r23, 0x00	; 0
    a9fe:	60 e0       	ldi	r22, 0x00	; 0
    aa00:	2a f0       	brmi	.+10     	; 0xaa0c <__floatsisf+0x6c>
    aa02:	9a 95       	dec	r25
    aa04:	66 0f       	add	r22, r22
    aa06:	77 1f       	adc	r23, r23
    aa08:	88 1f       	adc	r24, r24
    aa0a:	da f7       	brpl	.-10     	; 0xaa02 <__floatsisf+0x62>
    aa0c:	88 0f       	add	r24, r24
    aa0e:	96 95       	lsr	r25
    aa10:	87 95       	ror	r24
    aa12:	97 f9       	bld	r25, 7
    aa14:	08 95       	ret

0000aa16 <__fp_cmp>:
    aa16:	99 0f       	add	r25, r25
    aa18:	00 08       	sbc	r0, r0
    aa1a:	55 0f       	add	r21, r21
    aa1c:	aa 0b       	sbc	r26, r26
    aa1e:	e0 e8       	ldi	r30, 0x80	; 128
    aa20:	fe ef       	ldi	r31, 0xFE	; 254
    aa22:	16 16       	cp	r1, r22
    aa24:	17 06       	cpc	r1, r23
    aa26:	e8 07       	cpc	r30, r24
    aa28:	f9 07       	cpc	r31, r25
    aa2a:	c0 f0       	brcs	.+48     	; 0xaa5c <__fp_cmp+0x46>
    aa2c:	12 16       	cp	r1, r18
    aa2e:	13 06       	cpc	r1, r19
    aa30:	e4 07       	cpc	r30, r20
    aa32:	f5 07       	cpc	r31, r21
    aa34:	98 f0       	brcs	.+38     	; 0xaa5c <__fp_cmp+0x46>
    aa36:	62 1b       	sub	r22, r18
    aa38:	73 0b       	sbc	r23, r19
    aa3a:	84 0b       	sbc	r24, r20
    aa3c:	95 0b       	sbc	r25, r21
    aa3e:	39 f4       	brne	.+14     	; 0xaa4e <__fp_cmp+0x38>
    aa40:	0a 26       	eor	r0, r26
    aa42:	61 f0       	breq	.+24     	; 0xaa5c <__fp_cmp+0x46>
    aa44:	23 2b       	or	r18, r19
    aa46:	24 2b       	or	r18, r20
    aa48:	25 2b       	or	r18, r21
    aa4a:	21 f4       	brne	.+8      	; 0xaa54 <__fp_cmp+0x3e>
    aa4c:	08 95       	ret
    aa4e:	0a 26       	eor	r0, r26
    aa50:	09 f4       	brne	.+2      	; 0xaa54 <__fp_cmp+0x3e>
    aa52:	a1 40       	sbci	r26, 0x01	; 1
    aa54:	a6 95       	lsr	r26
    aa56:	8f ef       	ldi	r24, 0xFF	; 255
    aa58:	81 1d       	adc	r24, r1
    aa5a:	81 1d       	adc	r24, r1
    aa5c:	08 95       	ret

0000aa5e <__fp_inf>:
    aa5e:	97 f9       	bld	r25, 7
    aa60:	9f 67       	ori	r25, 0x7F	; 127
    aa62:	80 e8       	ldi	r24, 0x80	; 128
    aa64:	70 e0       	ldi	r23, 0x00	; 0
    aa66:	60 e0       	ldi	r22, 0x00	; 0
    aa68:	08 95       	ret

0000aa6a <__fp_nan>:
    aa6a:	9f ef       	ldi	r25, 0xFF	; 255
    aa6c:	80 ec       	ldi	r24, 0xC0	; 192
    aa6e:	08 95       	ret

0000aa70 <__fp_pscA>:
    aa70:	00 24       	eor	r0, r0
    aa72:	0a 94       	dec	r0
    aa74:	16 16       	cp	r1, r22
    aa76:	17 06       	cpc	r1, r23
    aa78:	18 06       	cpc	r1, r24
    aa7a:	09 06       	cpc	r0, r25
    aa7c:	08 95       	ret

0000aa7e <__fp_pscB>:
    aa7e:	00 24       	eor	r0, r0
    aa80:	0a 94       	dec	r0
    aa82:	12 16       	cp	r1, r18
    aa84:	13 06       	cpc	r1, r19
    aa86:	14 06       	cpc	r1, r20
    aa88:	05 06       	cpc	r0, r21
    aa8a:	08 95       	ret

0000aa8c <__fp_round>:
    aa8c:	09 2e       	mov	r0, r25
    aa8e:	03 94       	inc	r0
    aa90:	00 0c       	add	r0, r0
    aa92:	11 f4       	brne	.+4      	; 0xaa98 <__fp_round+0xc>
    aa94:	88 23       	and	r24, r24
    aa96:	52 f0       	brmi	.+20     	; 0xaaac <__fp_round+0x20>
    aa98:	bb 0f       	add	r27, r27
    aa9a:	40 f4       	brcc	.+16     	; 0xaaac <__fp_round+0x20>
    aa9c:	bf 2b       	or	r27, r31
    aa9e:	11 f4       	brne	.+4      	; 0xaaa4 <__fp_round+0x18>
    aaa0:	60 ff       	sbrs	r22, 0
    aaa2:	04 c0       	rjmp	.+8      	; 0xaaac <__fp_round+0x20>
    aaa4:	6f 5f       	subi	r22, 0xFF	; 255
    aaa6:	7f 4f       	sbci	r23, 0xFF	; 255
    aaa8:	8f 4f       	sbci	r24, 0xFF	; 255
    aaaa:	9f 4f       	sbci	r25, 0xFF	; 255
    aaac:	08 95       	ret

0000aaae <__fp_split3>:
    aaae:	57 fd       	sbrc	r21, 7
    aab0:	90 58       	subi	r25, 0x80	; 128
    aab2:	44 0f       	add	r20, r20
    aab4:	55 1f       	adc	r21, r21
    aab6:	59 f0       	breq	.+22     	; 0xaace <__fp_splitA+0x10>
    aab8:	5f 3f       	cpi	r21, 0xFF	; 255
    aaba:	71 f0       	breq	.+28     	; 0xaad8 <__fp_splitA+0x1a>
    aabc:	47 95       	ror	r20

0000aabe <__fp_splitA>:
    aabe:	88 0f       	add	r24, r24
    aac0:	97 fb       	bst	r25, 7
    aac2:	99 1f       	adc	r25, r25
    aac4:	61 f0       	breq	.+24     	; 0xaade <__fp_splitA+0x20>
    aac6:	9f 3f       	cpi	r25, 0xFF	; 255
    aac8:	79 f0       	breq	.+30     	; 0xaae8 <__fp_splitA+0x2a>
    aaca:	87 95       	ror	r24
    aacc:	08 95       	ret
    aace:	12 16       	cp	r1, r18
    aad0:	13 06       	cpc	r1, r19
    aad2:	14 06       	cpc	r1, r20
    aad4:	55 1f       	adc	r21, r21
    aad6:	f2 cf       	rjmp	.-28     	; 0xaabc <__fp_split3+0xe>
    aad8:	46 95       	lsr	r20
    aada:	f1 df       	rcall	.-30     	; 0xaabe <__fp_splitA>
    aadc:	08 c0       	rjmp	.+16     	; 0xaaee <__fp_splitA+0x30>
    aade:	16 16       	cp	r1, r22
    aae0:	17 06       	cpc	r1, r23
    aae2:	18 06       	cpc	r1, r24
    aae4:	99 1f       	adc	r25, r25
    aae6:	f1 cf       	rjmp	.-30     	; 0xaaca <__fp_splitA+0xc>
    aae8:	86 95       	lsr	r24
    aaea:	71 05       	cpc	r23, r1
    aaec:	61 05       	cpc	r22, r1
    aaee:	08 94       	sec
    aaf0:	08 95       	ret

0000aaf2 <__fp_zero>:
    aaf2:	e8 94       	clt

0000aaf4 <__fp_szero>:
    aaf4:	bb 27       	eor	r27, r27
    aaf6:	66 27       	eor	r22, r22
    aaf8:	77 27       	eor	r23, r23
    aafa:	cb 01       	movw	r24, r22
    aafc:	97 f9       	bld	r25, 7
    aafe:	08 95       	ret

0000ab00 <__gesf2>:
    ab00:	8a df       	rcall	.-236    	; 0xaa16 <__fp_cmp>
    ab02:	08 f4       	brcc	.+2      	; 0xab06 <__gesf2+0x6>
    ab04:	8f ef       	ldi	r24, 0xFF	; 255
    ab06:	08 95       	ret

0000ab08 <__mulsf3>:
    ab08:	0b d0       	rcall	.+22     	; 0xab20 <__mulsf3x>
    ab0a:	c0 cf       	rjmp	.-128    	; 0xaa8c <__fp_round>
    ab0c:	b1 df       	rcall	.-158    	; 0xaa70 <__fp_pscA>
    ab0e:	28 f0       	brcs	.+10     	; 0xab1a <__mulsf3+0x12>
    ab10:	b6 df       	rcall	.-148    	; 0xaa7e <__fp_pscB>
    ab12:	18 f0       	brcs	.+6      	; 0xab1a <__mulsf3+0x12>
    ab14:	95 23       	and	r25, r21
    ab16:	09 f0       	breq	.+2      	; 0xab1a <__mulsf3+0x12>
    ab18:	a2 cf       	rjmp	.-188    	; 0xaa5e <__fp_inf>
    ab1a:	a7 cf       	rjmp	.-178    	; 0xaa6a <__fp_nan>
    ab1c:	11 24       	eor	r1, r1
    ab1e:	ea cf       	rjmp	.-44     	; 0xaaf4 <__fp_szero>

0000ab20 <__mulsf3x>:
    ab20:	c6 df       	rcall	.-116    	; 0xaaae <__fp_split3>
    ab22:	a0 f3       	brcs	.-24     	; 0xab0c <__mulsf3+0x4>

0000ab24 <__mulsf3_pse>:
    ab24:	95 9f       	mul	r25, r21
    ab26:	d1 f3       	breq	.-12     	; 0xab1c <__mulsf3+0x14>
    ab28:	95 0f       	add	r25, r21
    ab2a:	50 e0       	ldi	r21, 0x00	; 0
    ab2c:	55 1f       	adc	r21, r21
    ab2e:	62 9f       	mul	r22, r18
    ab30:	f0 01       	movw	r30, r0
    ab32:	72 9f       	mul	r23, r18
    ab34:	bb 27       	eor	r27, r27
    ab36:	f0 0d       	add	r31, r0
    ab38:	b1 1d       	adc	r27, r1
    ab3a:	63 9f       	mul	r22, r19
    ab3c:	aa 27       	eor	r26, r26
    ab3e:	f0 0d       	add	r31, r0
    ab40:	b1 1d       	adc	r27, r1
    ab42:	aa 1f       	adc	r26, r26
    ab44:	64 9f       	mul	r22, r20
    ab46:	66 27       	eor	r22, r22
    ab48:	b0 0d       	add	r27, r0
    ab4a:	a1 1d       	adc	r26, r1
    ab4c:	66 1f       	adc	r22, r22
    ab4e:	82 9f       	mul	r24, r18
    ab50:	22 27       	eor	r18, r18
    ab52:	b0 0d       	add	r27, r0
    ab54:	a1 1d       	adc	r26, r1
    ab56:	62 1f       	adc	r22, r18
    ab58:	73 9f       	mul	r23, r19
    ab5a:	b0 0d       	add	r27, r0
    ab5c:	a1 1d       	adc	r26, r1
    ab5e:	62 1f       	adc	r22, r18
    ab60:	83 9f       	mul	r24, r19
    ab62:	a0 0d       	add	r26, r0
    ab64:	61 1d       	adc	r22, r1
    ab66:	22 1f       	adc	r18, r18
    ab68:	74 9f       	mul	r23, r20
    ab6a:	33 27       	eor	r19, r19
    ab6c:	a0 0d       	add	r26, r0
    ab6e:	61 1d       	adc	r22, r1
    ab70:	23 1f       	adc	r18, r19
    ab72:	84 9f       	mul	r24, r20
    ab74:	60 0d       	add	r22, r0
    ab76:	21 1d       	adc	r18, r1
    ab78:	82 2f       	mov	r24, r18
    ab7a:	76 2f       	mov	r23, r22
    ab7c:	6a 2f       	mov	r22, r26
    ab7e:	11 24       	eor	r1, r1
    ab80:	9f 57       	subi	r25, 0x7F	; 127
    ab82:	50 40       	sbci	r21, 0x00	; 0
    ab84:	8a f0       	brmi	.+34     	; 0xaba8 <__mulsf3_pse+0x84>
    ab86:	e1 f0       	breq	.+56     	; 0xabc0 <__mulsf3_pse+0x9c>
    ab88:	88 23       	and	r24, r24
    ab8a:	4a f0       	brmi	.+18     	; 0xab9e <__mulsf3_pse+0x7a>
    ab8c:	ee 0f       	add	r30, r30
    ab8e:	ff 1f       	adc	r31, r31
    ab90:	bb 1f       	adc	r27, r27
    ab92:	66 1f       	adc	r22, r22
    ab94:	77 1f       	adc	r23, r23
    ab96:	88 1f       	adc	r24, r24
    ab98:	91 50       	subi	r25, 0x01	; 1
    ab9a:	50 40       	sbci	r21, 0x00	; 0
    ab9c:	a9 f7       	brne	.-22     	; 0xab88 <__mulsf3_pse+0x64>
    ab9e:	9e 3f       	cpi	r25, 0xFE	; 254
    aba0:	51 05       	cpc	r21, r1
    aba2:	70 f0       	brcs	.+28     	; 0xabc0 <__mulsf3_pse+0x9c>
    aba4:	5c cf       	rjmp	.-328    	; 0xaa5e <__fp_inf>
    aba6:	a6 cf       	rjmp	.-180    	; 0xaaf4 <__fp_szero>
    aba8:	5f 3f       	cpi	r21, 0xFF	; 255
    abaa:	ec f3       	brlt	.-6      	; 0xaba6 <__mulsf3_pse+0x82>
    abac:	98 3e       	cpi	r25, 0xE8	; 232
    abae:	dc f3       	brlt	.-10     	; 0xaba6 <__mulsf3_pse+0x82>
    abb0:	86 95       	lsr	r24
    abb2:	77 95       	ror	r23
    abb4:	67 95       	ror	r22
    abb6:	b7 95       	ror	r27
    abb8:	f7 95       	ror	r31
    abba:	e7 95       	ror	r30
    abbc:	9f 5f       	subi	r25, 0xFF	; 255
    abbe:	c1 f7       	brne	.-16     	; 0xabb0 <__mulsf3_pse+0x8c>
    abc0:	fe 2b       	or	r31, r30
    abc2:	88 0f       	add	r24, r24
    abc4:	91 1d       	adc	r25, r1
    abc6:	96 95       	lsr	r25
    abc8:	87 95       	ror	r24
    abca:	97 f9       	bld	r25, 7
    abcc:	08 95       	ret

0000abce <_exit>:
    abce:	f8 94       	cli

0000abd0 <__stop_program>:
    abd0:	ff cf       	rjmp	.-2      	; 0xabd0 <__stop_program>
