
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000b7da  0000b8da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b7da  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e8b  00800144  00800144  0000b924  2**5
                  ALLOC
  3 .stab         00000648  00000000  00000000  0000b920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b4  00000000  00000000  0000bf68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  0000c230  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007d44  00000000  00000000  0000c790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149b  00000000  00000000  000144d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b2a  00000000  00000000  0001596f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001200  00000000  00000000  0001749c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018de  00000000  00000000  0001869c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000070b7  00000000  00000000  00019f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000608  00000000  00000000  00021038  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <__ctors_end>
       4:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
       8:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
       c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      10:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      14:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      18:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      1c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      20:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      24:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      28:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      2c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      30:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      34:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <__vector_13>
      38:	0c 94 32 36 	jmp	0x6c64	; 0x6c64 <__vector_14>
      3c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      40:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      44:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      48:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      4c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      50:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      54:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      58:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      5c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      60:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      64:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      68:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      6c:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__bad_interrupt>
      70:	bb 51       	subi	r27, 0x1B	; 27
      72:	c0 51       	subi	r28, 0x10	; 16
      74:	c3 51       	subi	r28, 0x13	; 19
      76:	c6 51       	subi	r28, 0x16	; 22
      78:	c9 51       	subi	r28, 0x19	; 25
      7a:	cc 51       	subi	r28, 0x1C	; 28
      7c:	cf 51       	subi	r28, 0x1F	; 31
      7e:	d2 51       	subi	r29, 0x12	; 18
      80:	d5 51       	subi	r29, 0x15	; 21

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	3b 39 3e 39 9b 39 9f 39 a7 39 47 39 4c 39 51 39     ;9>9.9.9.9G9L9Q9
      e0:	ae 39 54 39 57 39 5a 39 98 39                       .9T9W9Z9.9

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20 00        Boot Camp   .
     106:	20 20 20 56 65 6c 6f 63 69 74 79 20 20 20 20 00        Velocity    .
     116:	20 20 20 20 44 69 67 67 65 72 20 20 20 20 20 00         Digger     .
     126:	41 63 74 20 31 20 54 68 65 79 20 4d 65 65 74 00     Act 1 They Meet.
     136:	20 20 20 52 69 63 68 6f 63 68 65 74 20 20 20 00        Richochet   .
     146:	20 54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20 00      The Honey Pot .
     156:	20 20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20 00       Focal Point  .
     166:	49 74 27 73 20 4e 6f 74 20 46 61 69 72 21 20 00     It's Not Fair! .
     176:	20 20 4d 75 63 68 20 42 65 74 74 65 72 20 20 00       Much Better  .
     186:	20 20 20 46 61 63 65 20 4f 66 66 20 20 20 20 00        Face Off    .

00000196 <strPaused>:
     196:	50 61 75 73 65 64 00                                Paused.

0000019d <strExit>:
     19d:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000001a6 <strTotal>:
     1a6:	54 6f 74 61 6c 3a 00                                Total:.

000001ad <strScore>:
     1ad:	53 63 6f 72 65 3a 00                                Score:.

000001b4 <strBanterClear>:
     1b4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001c3 <banter_map>:
     1c3:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1d3:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1e3:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1f3:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     203:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     213:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     223:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     233:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     243:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     253:	20 20 20 20 20 00                                        .

00000259 <strFinalScore>:
     259:	46 69 6e 61 6c 20 53 63 6f 72 65 00                 Final Score.

00000265 <strBy>:
     265:	42 79 00                                            By.

00000268 <strOwns>:
     268:	50 77 6e 73 00                                      Pwns.

0000026d <strChangeHandle>:
     26d:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

0000027c <strCancelHandle>:
     27c:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000287 <strConfirmHandle>:
     287:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00000293 <strSelectHandle>:
     293:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

0000029e <strPlayer2>:
     29e:	50 32 00                                            P2.

000002a1 <strPlayer1>:
     2a1:	50 31 00                                            P1.

000002a4 <strVertSep>:
     2a4:	7c 00                                               |.

000002a6 <strUnderline>:
     2a6:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

000002b2 <strHandlesTitle>:
     2b2:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

000002be <strHighscores>:
     2be:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

000002c8 <str2Player>:
     2c8:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002d9 <str1Player>:
     2d9:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000002e7 <strCopyright>:
     2e7:	32 30 31 35 20 2d 20 4c 61 77 72 65 6e 63 65 20     2015 - Lawrence 
     2f7:	42 72 6f 6f 6b 73 00                                Brooks.

000002fe <my_patches>:
     2fe:	02 51 30 00 00 4f 07 50 07 02 6c 29 00 00 e3 06     .Q0..O.P..l)....
     30e:	e4 06 02 25 27 00 00 45 02 46 02 02 74 25 00 00     ...%'..E.F..t%..
     31e:	af 01 b0 01 02 72 25 00 00 00 00 01 00 02 70 25     .....r%.......p%
     32e:	00 00 00 00 01 00 02 50 23 00 00 1e 02 1f 02 02     .......P#.......
     33e:	de 21 00 00 70 01 71 01 02 25 27 00 00 45 02 46     .!..p.q..%'..E.F
     34e:	02 02 da 21 00 00 00 00 01 00 02 6c 29 00 00 e3     ...!.......l)...
     35e:	06 e4 06 02 d6 21 00 00 00 00 01 00 02 d4 21 00     .....!........!.
     36e:	00 00 00 00 00                                      .....

00000373 <level_data>:
     373:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     383:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     3ab:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3cb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3e7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     407:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
     417:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
     427:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     437:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     453:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     463:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     47f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     48f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     49f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     4bb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4cb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4db:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 01 01     ...X............
	...
     4f3:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
     503:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00     ................
     513:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
     523:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     533:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     543:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     553:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     56f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     57f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     58f:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     59f:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     5b7:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
     5c7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5e7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     603:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     623:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     63f:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     64f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     65f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     66f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     67f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     69b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6b7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6d7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6f3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     713:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     72f:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
     747:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     757:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     767:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
     777:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
     787:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     797:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
     7a7:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
     7b7:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
     7c7:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
     7d7:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
     7e7:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
     7f7:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
     807:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
     817:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
     827:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
     837:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
     847:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     857:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     873:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
     883:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     893:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
     8b7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     8d3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     8f3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     90f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     92f:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     93f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     94f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     95f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
     96f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     97f:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     98f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     99f:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     9af:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9bf:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     9cf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9df:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     9ef:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9ff:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     a0f:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     a1f:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     a2f:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     a3f:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     a4f:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     a5f:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a6f:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     a7f:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a8f:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
     a9f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aaf:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
     abf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     acf:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
     adf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     aef:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     aff:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b0f:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     b1f:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     b2f:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     b3f:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     b4f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b5f:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     b6f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b7f:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     b8f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b9f:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     baf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bbf:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     bcf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bdf:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
     bef:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bff:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c0f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
     c1f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c2f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c3f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c4f:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
     c77:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
     c87:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
     c97:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     cb3:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
     cc3:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
     cd3:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
     ce3:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
     cf3:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
     d03:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
     d13:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     d23:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
     d33:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     d43:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
     d67:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
     d77:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
     d87:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
     d97:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     da7:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
     db7:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
     dc7:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     dd7:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
     de7:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     df7:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
     e07:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
     e17:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
     e2f:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
     e3f:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     e4f:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
     e5f:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
     e6f:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
     e7f:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
     e8f:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
     e9f:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
     eaf:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     ecb:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
     edb:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
     eeb:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f07:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
     f17:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f27:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f37:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f47:	02 02 02 02 03 00 00 00 00 00 00 00 00 00 00 00     ................
     f57:	00 00 04 02 02 02 02 02 02 03 00 00 00 04 02 02     ................
     f67:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f77:	00 04 02 02 02 02 03 00 00 00 00 00 04 02 02 00     ................
	...
     f97:	04 02 02 03 00 00 01 01 01 00 00 02 02 00 00 00     ................
	...
     fbb:	01 01 01 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     fcb:	00 00 00 00 07 00 00 00 00 00 00 00 00 00 01 01     ................
     fdb:	01 00 00 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
	...
     ffb:	00 02 02 00 00 00 02 02 02 03 00 00 00 00 00 00     ................
	...
    1017:	00 00 00 02 02 00 00 00 02 02 03 00 00 00 00 00     ................
	...
    1037:	00 02 02 00 00 00 02 03 00 00 00 00 00 00 00 06     ................
    1047:	02 02 05 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1057:	02 00 00 00 00 00 00 00 00 00 00 00 06 02 02 02     ................
    1067:	02 05 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    107f:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    108f:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    109f:	02 02 02 02 02 02 02 00 00 00 00 00 00 00 63 00     ..............c.
    10af:	00 02 02 00 00 00 00 00 00 00 00 00 00 04 02 02     ................
    10bf:	02 02 02 02 03 00 00 00 00 00 00 00 00 00 00 02     ................
    10cf:	02 00 00 00 00 00 00 00 00 00 00 00 04 02 02 02     ................
    10df:	02 03 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    10f7:	00 00 00 04 02 02 03 00 00 00 00 00 00 00 06 02     ................
    1107:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    111f:	00 00 00 06 02 02 00 00 00 02 02 00 00 00 00 00     ................
	...
    113f:	06 02 02 02 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    115b:	00 00 02 02 02 02 00 00 00 02 02 00 00 01 01 01     ................
	...
    1173:	00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1183:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    119f:	00 02 02 00 00 01 01 01 00 00 06 02 02 05 00 00     ................
	...
    11bb:	00 00 00 02 02 05 00 00 00 00 00 06 02 02 02 02     ................
    11cb:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    11db:	06 02 02 02 05 00 00 00 06 02 02 02 02 02 02 05     ................
	...
    11f7:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1207:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1217:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1227:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1237:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1247:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1257:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    1267:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1277:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    1287:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    1297:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    12a7:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    12b7:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    12c7:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    12df:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    12ef:	00 00 00 01 01 00 00 02 00 00 00 00 00 00 02 00     ................
    12ff:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    130f:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    131f:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    132f:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    133f:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    134f:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    135f:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    136f:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    137f:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    138f:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    139f:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    13af:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    13c7:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    13d7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    13e7:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    13f7:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1407:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1417:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1427:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1437:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1447:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1457:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1467:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1477:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1487:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    1497:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    14a7:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    14c3:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    14e7:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    14f7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1507:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1517:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1527:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1537:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    154f:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    155f:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    156f:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    157f:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    158f:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    159f:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    15af:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    15bf:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    15cf:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    15df:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    15ef:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1613:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    162f:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    163f:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    164f:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    165f:	00 00 00 00 01 00 00 00 63 00 00 00 06 02 02 02     ........c.......
    166f:	02 02 02 02 00 00 00 00 00 00 00 00 01 00 00 08     ................
    167f:	00 00 01 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    168f:	02 03 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    169f:	01 00 00 00 00 00 00 00 04 02 02 02 02 02 03 00     ................
	...
    16b7:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 04     ................
    16c7:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    16e3:	00 00 04 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1703:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1713:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1723:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1733:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1743:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1753:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1763:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1773:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1783:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1793:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    17a3:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    17b3:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    17c3:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    17d3:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17e3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17f3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1803:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1813:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    182f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    184b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    186b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1887:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1897:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    18a7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18c3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18db:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    18eb:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    18fb:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    1917:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1933:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    1943:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    1953:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    196f:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    198f:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    19ab:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    19cb:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    19e7:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a0f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a2b:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1a3b:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1a4b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a67:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a87:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aa3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ac3:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ad3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ae3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1af3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b1b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b3b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b57:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b77:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1b87:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1b97:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bb3:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1bcf:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1be7:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1bf7:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c07:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1c17:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c27:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    1c43:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    1c53:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c63:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    1c83:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1ca3:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1cbf:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1cdf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cfb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d1b:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1d2b:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1d3b:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d57:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d73:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d93:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1daf:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dbf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dcf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ddf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1def:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e0b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e27:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e47:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e63:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e83:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e9f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ebf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1edb:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    1ef7:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1f17:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f37:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    1f4f:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    1f73:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f8f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1faf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fcb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1feb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2007:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2027:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2043:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2063:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    207f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    209f:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20af:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

000020bf <map_rocket_right_1>:
    20bf:	01 01 26                                            ..&

000020c2 <map_rocket_right_0>:
    20c2:	01 01 25                                            ..%

000020c5 <map_rocket_up_1>:
    20c5:	01 01 24                                            ..$

000020c8 <map_rocket_up_0>:
    20c8:	01 01 23                                            ..#

000020cb <map_ball>:
    20cb:	01 01 22                                            .."

000020ce <map_explosion_2>:
    20ce:	02 02 0c 0d 0d 0c                                   ......

000020d4 <map_explosion_1>:
    20d4:	02 02 0a 0b 18 19                                   ......

000020da <map_explosion_0>:
    20da:	02 02 08 09 16 17                                   ......

000020e0 <map_tank2_right_1>:
    20e0:	02 02 20 21 2e 2f                                   .. !./

000020e6 <map_tank2_right_0>:
    20e6:	02 02 1e 1f 2c 2d                                   ....,-

000020ec <map_tank2_up_1>:
    20ec:	02 02 1c 1d 2a 2b                                   ....*+

000020f2 <map_tank2_up_0>:
    20f2:	02 02 1a 1b 28 29                                   ....()

000020f8 <map_tank1_right_1>:
    20f8:	02 02 06 07 14 15                                   ......

000020fe <map_tank1_right_0>:
    20fe:	02 02 04 05 12 13                                   ......

00002104 <map_tank1_up_1>:
    2104:	02 02 02 03 10 11                                   ......

0000210a <map_tank1_up_0>:
    210a:	02 02 00 01 0e 0f                                   ......

00002110 <map_none>:
    2110:	01 01 27                                            ..'

00002113 <map_tank_blank>:
    2113:	02 02 27 27 27 27                                   ..''''

00002119 <map_metal_bl>:
    2119:	01 01 0c                                            ...

0000211c <map_metal_tr>:
    211c:	01 01 0b                                            ...

0000211f <map_metal_br>:
    211f:	01 01 0a                                            ...

00002122 <map_metal_tl>:
    2122:	01 01 09                                            ...

00002125 <map_tile_exp_2>:
    2125:	01 01 08                                            ...

00002128 <map_tile_exp_1>:
    2128:	01 01 07                                            ...

0000212b <map_tile_exp_0>:
    212b:	01 01 06                                            ...

0000212e <map_rocket_itm>:
    212e:	01 01 04                                            ...

00002131 <map_explode_itm>:
    2131:	01 01 03                                            ...

00002134 <map_speed_itm>:
    2134:	01 01 02                                            ...

00002137 <map_metal>:
    2137:	01 01 05                                            ...

0000213a <map_brick>:
    213a:	01 01 01                                            ...

0000213d <map_tile_none>:
    213d:	01 01 00                                            ...

00002140 <map_pause>:
    2140:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2150:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2160:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2170:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000217e <map_splash>:
    217e:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    218e:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    219e:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    21ae:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    21be:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    21ce:	2a 00 00 2c 2d 2e                                   *..,-.

000021d4 <ad_silence>:
	...

000021d6 <ad_tracks>:
	...

000021d8 <ad_tank_explode>:
	...

000021da <ad_splash>:
	...

000021dc <ad_rocket>:
	...

000021de <ad_navigate>:
    21de:	ff fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    21ee:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    21fe:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    220e:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    221e:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    222e:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    223e:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    224e:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    225e:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    226e:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    227e:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    228e:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    229e:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    22ae:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    22be:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    22ce:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    22de:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    22ee:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    22fe:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    230e:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    231e:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    232e:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    233e:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
    234e:	fe 00                                               ..

00002350 <ad_metal>:
    2350:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    2360:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    2370:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    2380:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    2390:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    23a0:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    23b0:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    23c0:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    23d0:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    23e0:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    23f0:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    2400:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    2410:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    2420:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    2430:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    2440:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    2450:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    2460:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    2470:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    2480:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    2490:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    24a0:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    24b0:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    24c0:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    24d0:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    24e0:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    24f0:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    2500:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    2510:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    2520:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    2530:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    2540:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    2550:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    2560:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff fe ff     ................

00002570 <ad_level_start>:
	...

00002572 <ad_level_clear>:
	...

00002574 <ad_item>:
    2574:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    2584:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    2594:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    25a4:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    25b4:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    25c4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    25d4:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    25e4:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    25f4:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    2604:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    2614:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    2624:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    2634:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    2644:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    2654:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    2664:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    2674:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    2684:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    2694:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    26a4:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    26b4:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    26c4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    26d4:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    26e4:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    26f4:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    2704:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    2714:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00002725 <ad_cannonball>:
    2725:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    2735:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    2745:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    2755:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    2765:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    2775:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    2785:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    2795:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    27a5:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    27b5:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    27c5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    27d5:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    27e5:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    27f5:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    2805:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    2815:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    2825:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    2835:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    2845:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    2855:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    2865:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    2875:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    2885:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    2895:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    28a5:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    28b5:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    28c5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    28d5:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    28e5:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    28f5:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    2905:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    2915:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    2925:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    2935:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    2945:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    2955:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2965:	ff ff ff ff ff ff 00                                .......

0000296c <ad_brick_explode>:
    296c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    297c:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    298c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    299c:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    29ac:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    29bc:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    29cc:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    29dc:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    29ec:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    29fc:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    2a0c:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    2a1c:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    2a2c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    2a3c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    2a4c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2a5c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2a6c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2a7c:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2a8c:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2a9c:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2aac:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2abc:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2acc:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2adc:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2aec:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    2afc:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    2b0c:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    2b1c:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    2b2c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    2b3c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    2b4c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2b5c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2b6c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2b7c:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2b8c:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2b9c:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2bac:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2bbc:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2bcc:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2bdc:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2bec:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    2bfc:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    2c0c:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    2c1c:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    2c2c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    2c3c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    2c4c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2c5c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2c6c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2c7c:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2c8c:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2c9c:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    2cac:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    2cbc:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    2ccc:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    2cdc:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    2cec:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    2cfc:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    2d0c:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    2d1c:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    2d2c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    2d3c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    2d4c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    2d5c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    2d6c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    2d7c:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    2d8c:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    2d9c:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    2dac:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    2dbc:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    2dcc:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    2ddc:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    2dec:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    2dfc:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    2e0c:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    2e1c:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    2e2c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    2e3c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    2e4c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    2e5c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    2e6c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    2e7c:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    2e8c:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    2e9c:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    2eac:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    2ebc:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    2ecc:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    2edc:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    2eec:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    2efc:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    2f0c:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    2f1c:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    2f2c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    2f3c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    2f4c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    2f5c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    2f6c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    2f7c:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    2f8c:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    2f9c:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    2fac:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    2fbc:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    2fcc:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    2fdc:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    2fec:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    2ffc:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    300c:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    301c:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    302c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    303c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    304c:	04 04 02 01 00                                      .....

00003051 <ad_banter>:
    3051:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    3061:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    3071:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    3081:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    3091:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    30a1:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    30b1:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    30c1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    30d1:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    30e1:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    30f1:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    3101:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    3111:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    3121:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    3131:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    3141:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    3151:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    3161:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    3171:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    3181:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    3191:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    31a1:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    31b1:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    31c1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    31d1:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    31e1:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    31f1:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    3201:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    3211:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    3221:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    3231:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    3241:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    3251:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    3261:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    3271:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    3281:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    3291:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    32a1:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    32b1:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    32c1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    32d1:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    32e1:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    32f1:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    3301:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    3311:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    3321:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    3331:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    3341:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    3351:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    3361:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    3371:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    3381:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    3391:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    33a1:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    33b1:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    33c1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    33d1:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    33e1:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    33f1:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    3401:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    3411:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    3421:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    3431:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    3441:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    3451:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    3461:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    3471:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    3481:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    3491:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    34a1:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    34b1:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    34c1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    34d1:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    34e1:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    34f1:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    3501:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    3511:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    3521:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    3531:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    3541:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    3551:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    3561:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    3571:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    3581:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    3591:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    35a1:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    35b1:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    35c1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    35d1:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    35e1:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    35f1:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    3601:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    3611:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    3621:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    3631:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    3641:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    3651:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    3661:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    3671:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    3681:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    3691:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    36a1:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    36b1:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    36c1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    36d1:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    36e1:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    36f1:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    3701:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    3711:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    3721:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    3731:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    3741:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    3751:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    3761:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    3771:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    3781:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    3791:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000037a2 <sprites_data>:
    37a2:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    37b2:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    37c2:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    37d2:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    37e2:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    37f2:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3802:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3812:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3822:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3832:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    3842:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    3852:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    3862:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3872:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    3882:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    3892:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    38a2:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    38b2:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    38c2:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    38d2:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    38e2:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    38f2:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3902:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3912:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3922:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3932:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    3942:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3952:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3962:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3972:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    3982:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3992:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    39a2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39b2:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    39c2:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    39d2:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    39e2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39f2:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a02:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a12:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3a22:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3a32:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3a42:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a52:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a62:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a72:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a82:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3a92:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3aa2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ab2:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3ac2:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3ad2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ae2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3af2:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b02:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b12:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b22:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3b32:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3b42:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3b52:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3b62:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3b72:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3b82:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3b92:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3ba2:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3bb2:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3bc2:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3bd2:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3be2:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3bf2:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3c02:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3c12:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3c22:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c32:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c42:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3c52:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3c62:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3c72:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3c82:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3c92:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3ca2:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3cb2:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3cc2:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3cd2:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3ce2:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3cf2:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3d02:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3d12:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3d22:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d32:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d42:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d52:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d62:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d72:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3d82:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3d92:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3da2:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3db2:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3dc2:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3dd2:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3de2:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3df2:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e02:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3e12:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3e22:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e32:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3e42:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3e52:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3e62:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3e72:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3e82:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3e92:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3ea2:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3eb2:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3ec2:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3ed2:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3ee2:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3ef2:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3f02:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3f12:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3f22:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3f32:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3f42:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f52:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3f62:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3f72:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3f82:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3f92:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3fa2:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3fb2:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3fc2:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3fd2:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3fe2:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3ff2:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4002:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4012:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4022:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4032:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    4042:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    4052:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4062:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4072:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4082:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    4092:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    40a2:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40b2:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40c2:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    40d2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40e2:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    40f2:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4102:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4112:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4122:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4132:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    4142:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    4152:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4162:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4172:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4182:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4192:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41a2:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    41b2:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    41c2:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    41d2:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    41e2:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    41f2:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4202:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4212:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4222:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    4232:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    4242:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    4252:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    4262:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    4272:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    4282:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    4292:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    42a2:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    42b2:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    42c2:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    42d2:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    42e2:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    42f2:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4302:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4312:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4322:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4332:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4342:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    4352:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    4362:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4372:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4382:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    4392:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000043a2 <tiles_data>:
	...
    43e2:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    43f2:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4402:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4412:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4422:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    4432:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    4442:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    4452:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4462:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    4472:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    4482:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    4492:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    44a2:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    44b2:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    44c2:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    44d2:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44e2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    44f2:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4502:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4512:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    452a:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    453a:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    454a:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4562:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4572:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4582:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4592:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    45aa:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    45ca:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    45e2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    45f2:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4602:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4612:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4622:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4632:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4642:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4652:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4662:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4672:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4682:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4692:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    46a2:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    46b2:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    46c2:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    46d2:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    46e2:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    46f2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4702:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4712:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    4722:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4732:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4742:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4752:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    4762:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4772:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4782:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4792:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    47a2:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    47b2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    47c2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    47d2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    47e2:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    47f2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4802:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4812:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    4822:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4832:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4842:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4852:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4862:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    4872:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4882:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4892:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    48c2:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    48d2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    4902:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4912:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4922:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    4932:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4942:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4952:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4962:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4972:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4982:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4992:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    49a2:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    49b2:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49c2:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49d2:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49e2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    49f2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a02:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a12:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a22:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a32:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a42:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a52:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a62:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a72:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a82:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a92:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4aa2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ab2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4ac2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ad2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ae2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4af2:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4b22:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4b32:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b42:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b52:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b62:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4b72:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b82:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b92:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ba2:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4bb2:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4bc2:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4bd2:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4be2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4bf2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c02:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c12:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4c4a:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4c5a:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4c6a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c7a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c8a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c9a:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4caa:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4cba:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4cca:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4cda:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4cea:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cfa:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d0a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d1a:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4d2a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d3a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d4a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d5a:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4d6a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d7a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4d8a:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4d9a:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4daa:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4dba:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4de2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4df2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e02:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e12:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4e22:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e32:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e42:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e52:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4e62:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e72:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e82:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e92:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4ea2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4eb2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ec2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ed2:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4eea:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4efa:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f0a:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f1a:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4f2a:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f3a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f4a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f5a:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4faa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4fba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4fd2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4fea:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ffa:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    502a:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    503a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    504a:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    5062:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    5072:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    5082:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5092:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50aa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    50ba:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    50ca:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    50e2:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    50f2:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    5102:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    5112:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    512a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    513a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    516e:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    517e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    518e:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    51aa:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    51ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    51ca:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    51ea:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    51fa:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    520a:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    522a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    523a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    524a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    528a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    529a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52ba:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    530a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    532e:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    533e:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    534e:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    536a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    537a:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    538a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    53aa:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    53ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    53ca:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    53ea:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    53fa:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    540a:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    542a:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    543a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    544a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    546e:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    547e:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    548e:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    54aa:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    54ba:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    54ca:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    54ea:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    54fa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    550a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    552a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    553a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    554a:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    556a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    557a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    558a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    55aa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55ba:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    55ca:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    55f2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    560a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5632:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    564a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    565a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    566a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    567a:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    568a:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    56b2:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56ca:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56e2:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    56f2:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5702:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5712:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    572a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    573a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5752:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    576a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    577a:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    578a:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    57aa:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    57ba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    57ca:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    57ea:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57fa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    580a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    582a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    583a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    584a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    586a:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    587a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    588a:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    58aa:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    58ba:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    58ca:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    58ea:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    58fa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    590a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    592a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    593a:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    594a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    596a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    597a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    598a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    59aa:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    59ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59ca:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    59ee:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    59fe:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5a0e:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5a2a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5a3a:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5a4a:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5a6a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a7a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a8a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5aaa:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5aba:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5aca:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5aea:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5afa:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5b0a:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5b2a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b3a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b4a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5b6a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b7a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5b8a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5baa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5bca:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5bea:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bfa:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c0a:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5c2a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c3a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5c4a:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5c6a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5c7a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5c8a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5caa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cca:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5cea:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cfa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d0a:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5d2a:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5d3a:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5d4a:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5d6a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d7a:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5d8a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5daa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5dba:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5dca:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5dea:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5dfa:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5e0a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5e2a:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5e3a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e4a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5e6a:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5e7a:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e8a:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5eaa:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5eba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5eca:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5eee:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5efe:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5f52:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5f6a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5f7a:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5f8a:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5fb2:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5fc2:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fd2:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fea:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5ffa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    600a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6032:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6042:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6052:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    606e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    607e:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    608e:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    60b2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60c2:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    60d2:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    60ee:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    60fe:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    610e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    6132:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6142:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6152:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    616a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    617a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    618a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    61aa:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    61ba:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    61ca:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    61ee:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    61fe:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    620e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    621e:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    622e:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    623e:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    624e:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    626a:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    627a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    628a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    62b2:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    62c2:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    62d2:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    62f2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6302:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6312:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6332:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6342:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6352:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6372:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6382:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6392:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    63b2:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63c2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    63d2:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    63f2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6402:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6412:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6432:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6442:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6452:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    646a:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    647a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    648a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    64b2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64c2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64d2:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    64f2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6502:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6512:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6532:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    6542:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    6552:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6572:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6582:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6592:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    65b2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65c2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    65d2:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    65f2:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6602:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6612:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    662a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    663a:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    664a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6662:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6672:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6682:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6692:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66aa:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    66ba:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    66ca:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    66e6:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    66f6:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6706:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    6716:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    6726:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6736:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6746:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00006762 <__ctors_end>:
    6762:	11 24       	eor	r1, r1
    6764:	1f be       	out	0x3f, r1	; 63
    6766:	cf ef       	ldi	r28, 0xFF	; 255
    6768:	d0 e1       	ldi	r29, 0x10	; 16
    676a:	de bf       	out	0x3e, r29	; 62
    676c:	cd bf       	out	0x3d, r28	; 61

0000676e <__do_copy_data>:
    676e:	11 e0       	ldi	r17, 0x01	; 1
    6770:	a0 e0       	ldi	r26, 0x00	; 0
    6772:	b1 e0       	ldi	r27, 0x01	; 1
    6774:	ea ed       	ldi	r30, 0xDA	; 218
    6776:	f7 eb       	ldi	r31, 0xB7	; 183
    6778:	02 c0       	rjmp	.+4      	; 0x677e <__do_copy_data+0x10>
    677a:	05 90       	lpm	r0, Z+
    677c:	0d 92       	st	X+, r0
    677e:	a4 34       	cpi	r26, 0x44	; 68
    6780:	b1 07       	cpc	r27, r17
    6782:	d9 f7       	brne	.-10     	; 0x677a <__do_copy_data+0xc>

00006784 <__do_clear_bss>:
    6784:	1f e0       	ldi	r17, 0x0F	; 15
    6786:	a4 e4       	ldi	r26, 0x44	; 68
    6788:	b1 e0       	ldi	r27, 0x01	; 1
    678a:	01 c0       	rjmp	.+2      	; 0x678e <.do_clear_bss_start>

0000678c <.do_clear_bss_loop>:
    678c:	1d 92       	st	X+, r1

0000678e <.do_clear_bss_start>:
    678e:	af 3c       	cpi	r26, 0xCF	; 207
    6790:	b1 07       	cpc	r27, r17
    6792:	e1 f7       	brne	.-8      	; 0x678c <.do_clear_bss_loop>

00006794 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    6794:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6796:	88 e1       	ldi	r24, 0x18	; 24
    6798:	0f b6       	in	r0, 0x3f	; 63
    679a:	f8 94       	cli
    679c:	80 93 60 00 	sts	0x0060, r24
    67a0:	10 92 60 00 	sts	0x0060, r1
    67a4:	0f be       	out	0x3f, r0	; 63

000067a6 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    67a6:	0e 94 6f 38 	call	0x70de	; 0x70de <isEepromFormatted>
    67aa:	81 11       	cpse	r24, r1
    67ac:	02 c0       	rjmp	.+4      	; 0x67b2 <Initialize+0xc>
    67ae:	0e 94 4d 38 	call	0x709a	; 0x709a <FormatEeprom>

	cli();
    67b2:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    67b4:	81 e0       	ldi	r24, 0x01	; 1
    67b6:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    67ba:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    67be:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    67c2:	10 92 02 0b 	sts	0x0B02, r1
    67c6:	10 92 08 0b 	sts	0x0B08, r1
    67ca:	10 92 0e 0b 	sts	0x0B0E, r1
    67ce:	10 92 14 0b 	sts	0x0B14, r1
    67d2:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    67d6:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_flags=0;
    67da:	10 92 ee 0a 	sts	0x0AEE, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    67de:	92 e1       	ldi	r25, 0x12	; 18
    67e0:	90 93 ed 0a 	sts	0x0AED, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    67e4:	90 ee       	ldi	r25, 0xE0	; 224
    67e6:	90 93 f6 0a 	sts	0x0AF6, r25
	render_lines_count=FRAME_LINES;
    67ea:	90 93 f4 0a 	sts	0x0AF4, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    67ee:	94 e1       	ldi	r25, 0x14	; 20
    67f0:	90 93 f5 0a 	sts	0x0AF5, r25
	first_render_line=FIRST_RENDER_LINE;
    67f4:	90 93 f3 0a 	sts	0x0AF3, r25

	joypad1_status_hi=0;
    67f8:	10 92 fa 0a 	sts	0x0AFA, r1
    67fc:	10 92 f9 0a 	sts	0x0AF9, r1
	joypad2_status_hi=0;
    6800:	10 92 fe 0a 	sts	0x0AFE, r1
    6804:	10 92 fd 0a 	sts	0x0AFD, r1
	sound_enabled=1;
    6808:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    680c:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <InitializeVideoMode>
    6810:	82 e8       	ldi	r24, 0x82	; 130
    6812:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6814:	fc 01       	movw	r30, r24
    6816:	25 91       	lpm	r18, Z+
    6818:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    681a:	f9 01       	movw	r30, r18
    681c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    681e:	30 83       	st	Z, r19
    6820:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6822:	20 e0       	ldi	r18, 0x00	; 0
    6824:	80 3b       	cpi	r24, 0xB0	; 176
    6826:	92 07       	cpc	r25, r18
    6828:	a9 f7       	brne	.-22     	; 0x6814 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    682a:	78 94       	sei
	
	DisplayLogo();
    682c:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <DisplayLogo>
    6830:	0e 94 4c 59 	call	0xb298	; 0xb298 <main>
    6834:	0c 94 eb 5b 	jmp	0xb7d6	; 0xb7d6 <_exit>

00006838 <__bad_interrupt>:
    6838:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000683c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    683c:	0c e0       	ldi	r16, 0x0C	; 12
    683e:	0a 95       	dec	r16
    6840:	f1 f7       	brne	.-4      	; 0x683e <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    6842:	e8 e9       	ldi	r30, 0x98	; 152
		ldi ZH,hi8(ram_tiles_restore);
    6844:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6846:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6848:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    684a:	20 91 b7 0b 	lds	r18, 0x0BB7


		clr r16
    684e:	00 27       	eor	r16, r16

00006850 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    6850:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    6852:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6854:	ac 0f       	add	r26, r28
		adc XH,YH
    6856:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6858:	1c 91       	ld	r17, X
		std Z+2,r17
    685a:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    685c:	02 17       	cp	r16, r18
		brsh noov
    685e:	08 f4       	brcc	.+2      	; 0x6862 <noov>
		mov r17,r16
    6860:	10 2f       	mov	r17, r16

00006862 <noov>:
	noov:
		st X,r17
    6862:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6864:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6866:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6868:	07 31       	cpi	r16, 0x17	; 23
		brlo upd_loop ;23
    686a:	90 f3       	brcs	.-28     	; 0x6850 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    686c:	06 e2       	ldi	r16, 0x26	; 38

0000686e <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    686e:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    6870:	1a 95       	dec	r17
		brne .-4
    6872:	f1 f7       	brne	.-4      	; 0x6870 <wait_loop+0x2>

		dec r16
    6874:	0a 95       	dec	r16
		brne wait_loop
    6876:	d9 f7       	brne	.-10     	; 0x686e <wait_loop>

		lds r2,overlay_tile_table
    6878:	20 90 e9 0a 	lds	r2, 0x0AE9
		lds r3,overlay_tile_table+1
    687c:	30 90 ea 0a 	lds	r3, 0x0AEA
		lds r16,tile_table_lo 
    6880:	00 91 e5 0a 	lds	r16, 0x0AE5
		lds r17,tile_table_hi
    6884:	10 91 e6 0a 	lds	r17, 0x0AE6
		movw r12,r16
    6888:	68 01       	movw	r12, r16
		movw r6,r16
    688a:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    688c:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    688e:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6890:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6892:	4e 01       	movw	r8, r28
		clr r0
    6894:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6896:	30 91 e8 0a 	lds	r19, 0x0AE8
		cpi r19,0
    689a:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    689c:	09 f0       	breq	.+2      	; 0x68a0 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    689e:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    68a0:	09 f0       	breq	.+2      	; 0x68a4 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    68a2:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    68a4:	09 f0       	breq	.+2      	; 0x68a8 <wait_loop+0x3a>
		mov r24,r19
    68a6:	83 2f       	mov	r24, r19

		breq .+2
    68a8:	09 f0       	breq	.+2      	; 0x68ac <wait_loop+0x3e>
		movw r12,r2
    68aa:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    68ac:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    68ae:	a0 2e       	mov	r10, r16
		clr r22
    68b0:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    68b2:	78 e0       	ldi	r23, 0x08	; 8

000068b4 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    68b4:	7d d2       	rcall	.+1274   	; 0x6db0 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    68b6:	3c e0       	ldi	r19, 0x0C	; 12
    68b8:	3a 95       	dec	r19
    68ba:	f1 f7       	brne	.-4      	; 0x68b8 <next_tile_line+0x4>
    68bc:	00 00       	nop
    68be:	00 00       	nop

		;***draw line***
		call render_tile_line
    68c0:	0e 94 91 34 	call	0x6922	; 0x6922 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    68c4:	3f e0       	ldi	r19, 0x0F	; 15
    68c6:	3a 95       	dec	r19
    68c8:	f1 f7       	brne	.-4      	; 0x68c6 <next_tile_line+0x12>
    68ca:	00 00       	nop
    68cc:	00 00       	nop

		dec r10
    68ce:	aa 94       	dec	r10
		breq frame_end
    68d0:	a9 f0       	breq	.+42     	; 0x68fc <frame_end>
	
		inc r22
    68d2:	63 95       	inc	r22
		lpm ;3 nop
    68d4:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    68d6:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    68d8:	31 f0       	breq	.+12     	; 0x68e6 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    68da:	33 e0       	ldi	r19, 0x03	; 3
    68dc:	3a 95       	dec	r19
    68de:	f1 f7       	brne	.-4      	; 0x68dc <next_tile_line+0x28>
    68e0:	00 00       	nop
    68e2:	00 00       	nop
		
		rjmp next_tile_line	
    68e4:	e7 cf       	rjmp	.-50     	; 0x68b4 <next_tile_line>

000068e6 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    68e6:	66 27       	eor	r22, r22

		clr r0
    68e8:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    68ea:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    68ec:	c3 0f       	add	r28, r19
		adc YH,r0
    68ee:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    68f0:	8a 95       	dec	r24
		brne .+2
    68f2:	09 f4       	brne	.+2      	; 0x68f6 <next_tile_row+0x10>
		movw YL,r8	;main vram
    68f4:	e4 01       	movw	r28, r8
		brne .+2
    68f6:	09 f4       	brne	.+2      	; 0x68fa <next_tile_row+0x14>
		movw r12,r6	;main tile table
    68f8:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    68fa:	dc cf       	rjmp	.-72     	; 0x68b4 <next_tile_line>

000068fc <frame_end>:

	frame_end:

		WAIT r19,18
    68fc:	36 e0       	ldi	r19, 0x06	; 6
    68fe:	3a 95       	dec	r19
    6900:	f1 f7       	brne	.-4      	; 0x68fe <frame_end+0x2>

		rcall hsync_pulse ;145
    6902:	56 d2       	rcall	.+1196   	; 0x6db0 <hsync_pulse>
	
		clr r1
    6904:	11 24       	eor	r1, r1
		call RestoreBackground
    6906:	0e 94 80 43 	call	0x8700	; 0x8700 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    690a:	e0 91 ee 0a 	lds	r30, 0x0AEE
		ldi r20,SYNC_FLAG_FIELD
    690e:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6910:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6912:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6914:	e0 93 ee 0a 	sts	0x0AEE, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6918:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    691a:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    691e:	11 24       	eor	r1, r1


		ret
    6920:	08 95       	ret

00006922 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6922:	de 01       	movw	r26, r28

		mul r22,r23
    6924:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6926:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6928:	00 5c       	subi	r16, 0xC0	; 192
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    692a:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    692c:	00 0d       	add	r16, r0
		adc r17,r1
    692e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6930:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6932:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    6934:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6936:	00 0d       	add	r16, r0
		adc r17,r1
    6938:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    693a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    693c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    693e:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6940:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6942:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6944:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6946:	27 31       	cpi	r18, 0x17	; 23
		brcc .+2
    6948:	08 f4       	brcc	.+2      	; 0x694c <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    694a:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    694c:	04 0e       	add	r0, r20
	    adc r1,r21
    694e:	15 1e       	adc	r1, r21

		movw ZL,r0
    6950:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6952:	27 31       	cpi	r18, 0x17	; 23
		brcs ramloop
    6954:	f0 f0       	brcs	.+60     	; 0x6992 <ramloop>

00006956 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6956:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6958:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    695a:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    695c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    695e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6960:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6962:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6964:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6966:	27 31       	cpi	r18, 0x17	; 23
		nop
    6968:	00 00       	nop

	    lpm r16,Z+
    696a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    696c:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    696e:	08 f4       	brcc	.+2      	; 0x6972 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6970:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6972:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6974:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6976:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6978:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    697a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    697c:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    697e:	27 31       	cpi	r18, 0x17	; 23
		dec r17			;decrement tiles to draw on line
    6980:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6982:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6984:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6986:	05 91       	lpm	r16, Z+

		breq end	
    6988:	31 f1       	breq	.+76     	; 0x69d6 <end>
	    movw ZL,r0   	;copy next tile adress
    698a:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    698c:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    698e:	18 f7       	brcc	.-58     	; 0x6956 <romloop>
	
		rjmp .
    6990:	00 c0       	rjmp	.+0      	; 0x6992 <ramloop>

00006992 <ramloop>:

	ramloop:

	    ld r16,Z+
    6992:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6994:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6996:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6998:	01 91       	ld	r16, Z+
		nop   
    699a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    699c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    699e:	23 9f       	mul	r18, r19


	    ld r16,Z+
    69a0:	01 91       	ld	r16, Z+
		nop
    69a2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    69a4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69a6:	27 31       	cpi	r18, 0x17	; 23
   		rjmp .
    69a8:	00 c0       	rjmp	.+0      	; 0x69aa <ramloop+0x18>

	    ld r16,Z+
    69aa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    69ac:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    69ae:	08 f0       	brcs	.+2      	; 0x69b2 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    69b0:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    69b2:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    69b4:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    69b6:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    69b8:	15 1e       	adc	r1, r21
		rjmp .
    69ba:	00 c0       	rjmp	.+0      	; 0x69bc <ramloop+0x2a>
    
		ld r16,Z+		
    69bc:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    69be:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69c0:	27 31       	cpi	r18, 0x17	; 23
		rjmp .  
    69c2:	00 c0       	rjmp	.+0      	; 0x69c4 <ramloop+0x32>

	    ld r16,Z+	
    69c4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    69c6:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    69c8:	01 91       	ld	r16, Z+

	    dec r17
    69ca:	1a 95       	dec	r17
	    breq end
    69cc:	21 f0       	breq	.+8      	; 0x69d6 <end>
	
		movw ZL,r0
    69ce:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    69d0:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    69d2:	08 f6       	brcc	.-126    	; 0x6956 <romloop>
		rjmp ramloop
    69d4:	de cf       	rjmp	.-68     	; 0x6992 <ramloop>

000069d6 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    69d6:	08 b9       	out	0x08, r16	; 8
		clr r16	
    69d8:	00 27       	eor	r16, r16
		lpm	
    69da:	c8 95       	lpm
		nop
    69dc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    69de:	08 b9       	out	0x08, r16	; 8

		ret
    69e0:	08 95       	ret

000069e2 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    69e2:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    69e4:	e0 91 e5 0a 	lds	r30, 0x0AE5
	lds ZH,tile_table_hi
    69e8:	f0 91 e6 0a 	lds	r31, 0x0AE6
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    69ec:	87 51       	subi	r24, 0x17	; 23
	mul r24,r18
    69ee:	82 9f       	mul	r24, r18
	add ZL,r0
    69f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    69f2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    69f4:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    69f6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    69f8:	62 9f       	mul	r22, r18
	add XL,r0
    69fa:	a0 0d       	add	r26, r0
	adc XH,r1
    69fc:	b1 1d       	adc	r27, r1

	clr r0
    69fe:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6a00:	05 90       	lpm	r0, Z+
    6a02:	0d 92       	st	X+, r0
    6a04:	05 90       	lpm	r0, Z+
    6a06:	0d 92       	st	X+, r0
    6a08:	05 90       	lpm	r0, Z+
    6a0a:	0d 92       	st	X+, r0
    6a0c:	05 90       	lpm	r0, Z+
    6a0e:	0d 92       	st	X+, r0
    6a10:	05 90       	lpm	r0, Z+
    6a12:	0d 92       	st	X+, r0
    6a14:	05 90       	lpm	r0, Z+
    6a16:	0d 92       	st	X+, r0
    6a18:	05 90       	lpm	r0, Z+
    6a1a:	0d 92       	st	X+, r0
    6a1c:	05 90       	lpm	r0, Z+
    6a1e:	0d 92       	st	X+, r0
    6a20:	05 90       	lpm	r0, Z+
    6a22:	0d 92       	st	X+, r0
    6a24:	05 90       	lpm	r0, Z+
    6a26:	0d 92       	st	X+, r0
    6a28:	05 90       	lpm	r0, Z+
    6a2a:	0d 92       	st	X+, r0
    6a2c:	05 90       	lpm	r0, Z+
    6a2e:	0d 92       	st	X+, r0
    6a30:	05 90       	lpm	r0, Z+
    6a32:	0d 92       	st	X+, r0
    6a34:	05 90       	lpm	r0, Z+
    6a36:	0d 92       	st	X+, r0
    6a38:	05 90       	lpm	r0, Z+
    6a3a:	0d 92       	st	X+, r0
    6a3c:	05 90       	lpm	r0, Z+
    6a3e:	0d 92       	st	X+, r0
    6a40:	05 90       	lpm	r0, Z+
    6a42:	0d 92       	st	X+, r0
    6a44:	05 90       	lpm	r0, Z+
    6a46:	0d 92       	st	X+, r0
    6a48:	05 90       	lpm	r0, Z+
    6a4a:	0d 92       	st	X+, r0
    6a4c:	05 90       	lpm	r0, Z+
    6a4e:	0d 92       	st	X+, r0
    6a50:	05 90       	lpm	r0, Z+
    6a52:	0d 92       	st	X+, r0
    6a54:	05 90       	lpm	r0, Z+
    6a56:	0d 92       	st	X+, r0
    6a58:	05 90       	lpm	r0, Z+
    6a5a:	0d 92       	st	X+, r0
    6a5c:	05 90       	lpm	r0, Z+
    6a5e:	0d 92       	st	X+, r0
    6a60:	05 90       	lpm	r0, Z+
    6a62:	0d 92       	st	X+, r0
    6a64:	05 90       	lpm	r0, Z+
    6a66:	0d 92       	st	X+, r0
    6a68:	05 90       	lpm	r0, Z+
    6a6a:	0d 92       	st	X+, r0
    6a6c:	05 90       	lpm	r0, Z+
    6a6e:	0d 92       	st	X+, r0
    6a70:	05 90       	lpm	r0, Z+
    6a72:	0d 92       	st	X+, r0
    6a74:	05 90       	lpm	r0, Z+
    6a76:	0d 92       	st	X+, r0
    6a78:	05 90       	lpm	r0, Z+
    6a7a:	0d 92       	st	X+, r0
    6a7c:	05 90       	lpm	r0, Z+
    6a7e:	0d 92       	st	X+, r0
    6a80:	05 90       	lpm	r0, Z+
    6a82:	0d 92       	st	X+, r0
    6a84:	05 90       	lpm	r0, Z+
    6a86:	0d 92       	st	X+, r0
    6a88:	05 90       	lpm	r0, Z+
    6a8a:	0d 92       	st	X+, r0
    6a8c:	05 90       	lpm	r0, Z+
    6a8e:	0d 92       	st	X+, r0
    6a90:	05 90       	lpm	r0, Z+
    6a92:	0d 92       	st	X+, r0
    6a94:	05 90       	lpm	r0, Z+
    6a96:	0d 92       	st	X+, r0
    6a98:	05 90       	lpm	r0, Z+
    6a9a:	0d 92       	st	X+, r0
    6a9c:	05 90       	lpm	r0, Z+
    6a9e:	0d 92       	st	X+, r0
    6aa0:	05 90       	lpm	r0, Z+
    6aa2:	0d 92       	st	X+, r0
    6aa4:	05 90       	lpm	r0, Z+
    6aa6:	0d 92       	st	X+, r0
    6aa8:	05 90       	lpm	r0, Z+
    6aaa:	0d 92       	st	X+, r0
    6aac:	05 90       	lpm	r0, Z+
    6aae:	0d 92       	st	X+, r0
    6ab0:	05 90       	lpm	r0, Z+
    6ab2:	0d 92       	st	X+, r0
    6ab4:	05 90       	lpm	r0, Z+
    6ab6:	0d 92       	st	X+, r0
    6ab8:	05 90       	lpm	r0, Z+
    6aba:	0d 92       	st	X+, r0
    6abc:	05 90       	lpm	r0, Z+
    6abe:	0d 92       	st	X+, r0
    6ac0:	05 90       	lpm	r0, Z+
    6ac2:	0d 92       	st	X+, r0
    6ac4:	05 90       	lpm	r0, Z+
    6ac6:	0d 92       	st	X+, r0
    6ac8:	05 90       	lpm	r0, Z+
    6aca:	0d 92       	st	X+, r0
    6acc:	05 90       	lpm	r0, Z+
    6ace:	0d 92       	st	X+, r0
    6ad0:	05 90       	lpm	r0, Z+
    6ad2:	0d 92       	st	X+, r0
    6ad4:	05 90       	lpm	r0, Z+
    6ad6:	0d 92       	st	X+, r0
    6ad8:	05 90       	lpm	r0, Z+
    6ada:	0d 92       	st	X+, r0
    6adc:	05 90       	lpm	r0, Z+
    6ade:	0d 92       	st	X+, r0
    6ae0:	05 90       	lpm	r0, Z+
    6ae2:	0d 92       	st	X+, r0
    6ae4:	05 90       	lpm	r0, Z+
    6ae6:	0d 92       	st	X+, r0
    6ae8:	05 90       	lpm	r0, Z+
    6aea:	0d 92       	st	X+, r0
    6aec:	05 90       	lpm	r0, Z+
    6aee:	0d 92       	st	X+, r0
    6af0:	05 90       	lpm	r0, Z+
    6af2:	0d 92       	st	X+, r0
    6af4:	05 90       	lpm	r0, Z+
    6af6:	0d 92       	st	X+, r0
    6af8:	05 90       	lpm	r0, Z+
    6afa:	0d 92       	st	X+, r0
    6afc:	05 90       	lpm	r0, Z+
    6afe:	0d 92       	st	X+, r0


	clr r1
    6b00:	11 24       	eor	r1, r1
	ret
    6b02:	08 95       	ret

00006b04 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6b04:	0f 93       	push	r16
	push r17
    6b06:	1f 93       	push	r17
	push YL
    6b08:	cf 93       	push	r28
	push YH
    6b0a:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6b0c:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6b0e:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6b10:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    6b12:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6b14:	e0 0d       	add	r30, r0
	adc ZH,r1
    6b16:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6b18:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6b1a:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6b1c:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6b1e:	8e 9f       	mul	r24, r30
	movw r26,r0
    6b20:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6b22:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6b24:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6b26:	cd ed       	ldi	r28, 0xDD	; 221
	ldi YH,hi8(sprites_tile_banks)	
    6b28:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6b2a:	00 24       	eor	r0, r0
	add YL,r1
    6b2c:	c1 0d       	add	r28, r1
	adc YH,r0		
    6b2e:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6b30:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6b32:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6b34:	ea 0f       	add	r30, r26
	adc ZH,r27
    6b36:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6b38:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6b3a:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6b3c:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6b3e:	69 9f       	mul	r22, r25
	add XL,r0
    6b40:	a0 0d       	add	r26, r0
	adc XH,r1
    6b42:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6b44:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6b46:	dd 27       	eor	r29, r29

	cpi r20,0	
    6b48:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6b4a:	51 f4       	brne	.+20     	; 0x6b60 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6b4c:	a2 0f       	add	r26, r18
	adc XH,r1
    6b4e:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6b50:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6b52:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6b54:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6b56:	11 c0       	rjmp	.+34     	; 0x6b7a <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6b58:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6b5a:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6b5c:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6b5e:	0d c0       	rjmp	.+26     	; 0x6b7a <x_check_end>

00006b60 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6b60:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6b62:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6b64:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6b66:	04 c0       	rjmp	.+8      	; 0x6b70 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6b68:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6b6a:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6b6c:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6b6e:	05 c0       	rjmp	.+10     	; 0x6b7a <x_check_end>

00006b70 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6b70:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6b72:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6b74:	e2 0f       	add	r30, r18
	adc ZH,r1
    6b76:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6b78:	31 97       	sbiw	r30, 0x01	; 1

00006b7a <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6b7a:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6b7c:	41 f4       	brne	.+16     	; 0x6b8e <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6b7e:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6b80:	93 9f       	mul	r25, r19
	add XL,r0
    6b82:	a0 0d       	add	r26, r0
	adc XH,r1
    6b84:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6b86:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6b88:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6b8a:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6b8c:	0a c0       	rjmp	.+20     	; 0x6ba2 <y_check_end>

00006b8e <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6b8e:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6b90:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6b92:	63 2f       	mov	r22, r19
	dec r22
    6b94:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6b96:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6b98:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6b9a:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6b9c:	56 9f       	mul	r21, r22
	add ZL,r0
    6b9e:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6ba0:	f1 1d       	adc	r31, r1

00006ba2 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6ba2:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6ba4:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6ba6:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6ba8:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6baa:	00 ff       	sbrs	r16, 0
	clr r23
    6bac:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6bae:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6bb0:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6bb2:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6bb4:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6bb6:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6bb8:	59 1b       	sub	r21, r25

00006bba <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6bba:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6bbc:	48 1b       	sub	r20, r24

00006bbe <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6bbe:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6bc0:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6bc2:	2c 93       	st	X, r18
	adiw XL,1
    6bc4:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6bc6:	e6 0f       	add	r30, r22
	adc ZH,r23
    6bc8:	f7 1f       	adc	r31, r23
	dec r20
    6bca:	4a 95       	dec	r20
	brne x_loop
    6bcc:	c1 f7       	brne	.-16     	; 0x6bbe <x_loop>

	add ZL,YL		;src+=srcXdiff
    6bce:	ec 0f       	add	r30, r28
	adc ZH,YH
    6bd0:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6bd2:	a8 0f       	add	r26, r24
	adc XH,r1
    6bd4:	b1 1d       	adc	r27, r1
	dec r21
    6bd6:	5a 95       	dec	r21
	brne y_loop
    6bd8:	81 f7       	brne	.-32     	; 0x6bba <y_loop>


	pop YH
    6bda:	df 91       	pop	r29
	pop YL
    6bdc:	cf 91       	pop	r28
	pop r17
    6bde:	1f 91       	pop	r17
	pop r16
    6be0:	0f 91       	pop	r16
	ret
    6be2:	08 95       	ret

00006be4 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6be4:	0f 92       	push	r0
	push r1
    6be6:	1f 92       	push	r1
	push ZL;2
    6be8:	ef 93       	push	r30
	push ZH;2
    6bea:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6bec:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6bee:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6bf0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6bf4:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6bf6:	f1 e0       	ldi	r31, 0x01	; 1

00006bf8 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6bf8:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6bfa:	00 f0       	brcs	.+0      	; 0x6bfc <latency_loop+0x4>
	inc ZH
    6bfc:	f3 95       	inc	r31
	cpi ZH,10
    6bfe:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6c00:	d8 f3       	brcs	.-10     	; 0x6bf8 <latency_loop>
	jmp .
    6c02:	0c 94 03 36 	jmp	0x6c06	; 0x6c06 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6c06:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6c0a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6c0c:	e0 93 ed 0a 	sts	0x0AED, r30

	;process sync phases
	lds ZH,sync_phase
    6c10:	f0 91 ec 0a 	lds	r31, 0x0AEC
	sbrc ZH,0
    6c14:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6c16:	57 c0       	rjmp	.+174    	; 0x6cc6 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6c18:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6c1a:	98 f0       	brcs	.+38     	; 0x6c42 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6c1c:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6c1e:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6c22:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6c24:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6c28:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6c2a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6c2c:	26 f4       	brtc	.+8      	; 0x6c36 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6c2e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c30:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <update_sound>
	rjmp sync_end
    6c34:	b6 c0       	rjmp	.+364    	; 0x6da2 <sync_end>

00006c36 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6c36:	e5 e1       	ldi	r30, 0x15	; 21
    6c38:	ea 95       	dec	r30
    6c3a:	f1 f7       	brne	.-4      	; 0x6c38 <sync_pre_eq_no_sound_update+0x2>
    6c3c:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6c3e:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6c40:	b0 c0       	rjmp	.+352    	; 0x6da2 <sync_end>

00006c42 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6c42:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6c44:	38 f1       	brcs	.+78     	; 0x6c94 <sync_post_eq>

	rjmp .
    6c46:	00 c0       	rjmp	.+0      	; 0x6c48 <sync_eq+0x6>
	rjmp .
    6c48:	00 c0       	rjmp	.+0      	; 0x6c4a <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c4a:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6c4c:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6c4e:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6c50:	16 f4       	brtc	.+4      	; 0x6c56 <sync_eq_skip>
	
	call update_sound
    6c52:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <update_sound>

00006c56 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6c56:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6c58:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6c5c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6c5e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6c62:	9f c0       	rjmp	.+318    	; 0x6da2 <sync_end>

00006c64 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6c64:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c66:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c68:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c6a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6c6e:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6c70:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6c72:	00 f0       	brcs	.+0      	; 0x6c74 <__vector_14+0x10>

	cpi ZL,2
    6c74:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6c76:	00 f0       	brcs	.+0      	; 0x6c78 <__vector_14+0x14>

	cpi ZL,3
    6c78:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6c7a:	00 f0       	brcs	.+0      	; 0x6c7c <__vector_14+0x18>

	cpi ZL,4
    6c7c:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6c7e:	00 f0       	brcs	.+0      	; 0x6c80 <__vector_14+0x1c>

	cpi ZL,5
    6c80:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6c82:	00 f0       	brcs	.+0      	; 0x6c84 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6c84:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6c86:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6c88:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6c8c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6c8e:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6c90:	ef 91       	pop	r30
	reti
    6c92:	18 95       	reti

00006c94 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6c94:	00 c0       	rjmp	.+0      	; 0x6c96 <sync_post_eq+0x2>

	bst ZL,0
    6c96:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c98:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6c9a:	26 f4       	brtc	.+8      	; 0x6ca4 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6c9c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c9e:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <update_sound>
	rjmp sync_pre_eq_cont
    6ca2:	05 c0       	rjmp	.+10     	; 0x6cae <sync_pre_eq_cont>

00006ca4 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6ca4:	e5 e1       	ldi	r30, 0x15	; 21
    6ca6:	ea 95       	dec	r30
    6ca8:	f1 f7       	brne	.-4      	; 0x6ca6 <sync_post_eq_no_sound_update+0x2>
    6caa:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6cac:	28 9a       	sbi	0x05, 0	; 5

00006cae <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6cae:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6cb2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6cb4:	09 f0       	breq	.+2      	; 0x6cb8 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6cb6:	75 c0       	rjmp	.+234    	; 0x6da2 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6cb8:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6cba:	e0 93 ed 0a 	sts	0x0AED, r30
	ldi ZL,1
    6cbe:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6cc0:	e0 93 ec 0a 	sts	0x0AEC, r30
	
	rjmp sync_end
    6cc4:	6e c0       	rjmp	.+220    	; 0x6da2 <sync_end>

00006cc6 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6cc6:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6cc8:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6ccc:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6cce:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6cd2:	00 c0       	rjmp	.+0      	; 0x6cd4 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6cd4:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6cd6:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6cd8:	00 c0       	rjmp	.+0      	; 0x6cda <sync_hsync+0x14>
	call update_sound
    6cda:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6cde:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6ce0:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6ce4:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6ce6:	e0 91 ed 0a 	lds	r30, 0x0AED
	cp ZL,ZH
    6cea:	ef 17       	cp	r30, r31
	brsh no_render
    6cec:	d0 f4       	brcc	.+52     	; 0x6d22 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6cee:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6cf0:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6cf4:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6cf6:	00 90 f4 0a 	lds	r0, 0x0AF4
	sub ZH,r0			
    6cfa:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6cfc:	ef 17       	cp	r30, r31
	brlo no_render
    6cfe:	88 f0       	brcs	.+34     	; 0x6d22 <no_render>

	;push r1-r29
	ldi ZL,29
    6d00:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6d02:	ff 27       	eor	r31, r31

00006d04 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6d04:	00 80       	ld	r0, Z
	push r0
    6d06:	0f 92       	push	r0
	dec ZL
    6d08:	ea 95       	dec	r30
	brne push_loop	
    6d0a:	e1 f7       	brne	.-8      	; 0x6d04 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6d0c:	06 e0       	ldi	r16, 0x06	; 6
    6d0e:	0a 95       	dec	r16
    6d10:	f1 f7       	brne	.-4      	; 0x6d0e <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6d12:	0e 94 1e 34 	call	0x683c	; 0x683c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6d16:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6d18:	ff 27       	eor	r31, r31

00006d1a <pop_loop>:
pop_loop:
	pop r0
    6d1a:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6d1c:	01 92       	st	Z+, r0
	cpi ZL,30
    6d1e:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6d20:	e0 f3       	brcs	.-8      	; 0x6d1a <pop_loop>

00006d22 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6d22:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6d26:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6d28:	09 f0       	breq	.+2      	; 0x6d2c <no_render+0xa>
	rjmp sync_end
    6d2a:	3b c0       	rjmp	.+118    	; 0x6da2 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6d2c:	2f 93       	push	r18
	push r19
    6d2e:	3f 93       	push	r19
	push r20
    6d30:	4f 93       	push	r20
	push r21
    6d32:	5f 93       	push	r21
	push r22
    6d34:	6f 93       	push	r22
	push r23
    6d36:	7f 93       	push	r23
	push r24
    6d38:	8f 93       	push	r24
	push r25
    6d3a:	9f 93       	push	r25
	push r26
    6d3c:	af 93       	push	r26
	push r27
    6d3e:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6d40:	78 94       	sei
	clr r1
    6d42:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6d44:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6d46:	e0 93 ec 0a 	sts	0x0AEC, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6d4a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6d4c:	e0 93 ed 0a 	sts	0x0AED, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6d50:	f0 91 f5 0a 	lds	r31, 0x0AF5
	sts first_render_line,ZH
    6d54:	f0 93 f3 0a 	sts	0x0AF3, r31
	
	lds ZH,render_lines_count_tmp
    6d58:	f0 91 f6 0a 	lds	r31, 0x0AF6
	sts render_lines_count,ZH
    6d5c:	f0 93 f4 0a 	sts	0x0AF4, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6d60:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,pre_vsync_user_callback+1
    6d64:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    6d68:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6d6a:	f1 05       	cpc	r31, r1
	breq .+2 
    6d6c:	09 f0       	breq	.+2      	; 0x6d70 <no_render+0x4e>
	icall
    6d6e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6d70:	0e 94 3d 38 	call	0x707a	; 0x707a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6d74:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6d78:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <process_music>
	clr r1
    6d7c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6d7e:	e0 91 f1 0a 	lds	r30, 0x0AF1
	lds ZH,post_vsync_user_callback+1
    6d82:	f0 91 f2 0a 	lds	r31, 0x0AF2
	cp  ZL,r1
    6d86:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6d88:	f1 05       	cpc	r31, r1
	breq .+2 
    6d8a:	09 f0       	breq	.+2      	; 0x6d8e <no_render+0x6c>
	icall
    6d8c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6d8e:	bf 91       	pop	r27
	pop r26
    6d90:	af 91       	pop	r26
	pop r25
    6d92:	9f 91       	pop	r25
	pop r24
    6d94:	8f 91       	pop	r24
	pop r23
    6d96:	7f 91       	pop	r23
	pop r22
    6d98:	6f 91       	pop	r22
	pop r21
    6d9a:	5f 91       	pop	r21
	pop r20
    6d9c:	4f 91       	pop	r20
	pop r19
    6d9e:	3f 91       	pop	r19
	pop r18
    6da0:	2f 91       	pop	r18

00006da2 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6da2:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6da4:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6da6:	ff 91       	pop	r31
	pop ZL
    6da8:	ef 91       	pop	r30
	pop r1
    6daa:	1f 90       	pop	r1
	pop r0
    6dac:	0f 90       	pop	r0
	reti
    6dae:	18 95       	reti

00006db0 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6db0:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6db2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6db4:	00 c0       	rjmp	.+0      	; 0x6db6 <hsync_pulse+0x6>
	call update_sound
    6db6:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <update_sound>

	lds ZL,sync_pulse
    6dba:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6dbe:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6dc0:	e0 93 ed 0a 	sts	0x0AED, r30

	ret
    6dc4:	08 95       	ret

00006dc6 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6dc6:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6dca:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6dcc:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <ProcessMusic>
#endif

	ret
    6dd0:	08 95       	ret

00006dd2 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6dd2:	0f 93       	push	r16
	push r17
    6dd4:	1f 93       	push	r17
	push r18
    6dd6:	2f 93       	push	r18
	push r28
    6dd8:	cf 93       	push	r28
	push r29
    6dda:	df 93       	push	r29

	mov r18,ZL
    6ddc:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6dde:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6de2:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    6de6:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6de8:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6dec:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6df0:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    6df4:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6df6:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6df8:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6dfc:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6e00:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    6e04:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6e06:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6e08:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6e0a:	d0 2d       	mov	r29, r0
	nop
    6e0c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6e0e:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6e12:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    6e16:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6e18:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    6e1c:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    6e20:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    6e24:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6e26:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6e28:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    6e2c:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    6e30:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6e34:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6e36:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6e38:	20 ff       	sbrs	r18, 0
	rjmp .
    6e3a:	00 c0       	rjmp	.+0      	; 0x6e3c <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6e3c:	01 03       	mulsu	r16, r17
	clr r0
    6e3e:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6e40:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e42:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6e44:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6e46:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    6e4a:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    6e4e:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6e50:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    6e54:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    6e58:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    6e5c:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6e5e:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6e60:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    6e64:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    6e68:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    6e6c:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6e6e:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6e70:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6e72:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6e74:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    6e78:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    6e7c:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    6e80:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6e82:	92 f4       	brpl	.+36     	; 0x6ea8 <ch4_no_shift>

	lds ZH,tr4_params
    6e84:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    6e88:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6e8a:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6e8c:	00 2e       	mov	r0, r16
	lsr r0
    6e8e:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6e90:	00 26       	eor	r0, r16
	bst r0,0
    6e92:	00 fa       	bst	r0, 0
	lsr r17
    6e94:	16 95       	lsr	r17
	ror r16
    6e96:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6e98:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6e9a:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6e9c:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6e9e:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    6ea2:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    6ea6:	03 c0       	rjmp	.+6      	; 0x6eae <ch4_end>

00006ea8 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6ea8:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6eaa:	1a 95       	dec	r17
	brne .-4
    6eac:	f1 f7       	brne	.-4      	; 0x6eaa <ch4_no_shift+0x2>

00006eae <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6eae:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    6eb2:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6eb4:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6eb6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6eb8:	21 ff       	sbrs	r18, 1
	rjmp .
    6eba:	00 c0       	rjmp	.+0      	; 0x6ebc <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6ebc:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6ebe:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6ec0:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    6ec4:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6ec6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6ec8:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6eca:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6ecc:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    6ed0:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    6ed4:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6ed6:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    6eda:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    6ede:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    6ee2:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6ee4:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    6ee8:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6eea:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6eec:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6eee:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    6ef2:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    6ef6:	00 19       	sub	r16, r0
	sbc r17,r1
    6ef8:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6efa:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    6efe:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    6f02:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6f04:	f1 05       	cpc	r31, r1
	brlo .+2
    6f06:	08 f0       	brcs	.+2      	; 0x6f0a <ch4_end+0x5c>
	movw ZL,r16
    6f08:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6f0a:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    6f0e:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    6f12:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6f14:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    6f18:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6f1a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f1c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6f1e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6f20:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6f22:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6f24:	d0 05       	cpc	r29, r0
	brlt .+2
    6f26:	0c f0       	brlt	.+2      	; 0x6f2a <ch4_end+0x7c>
	ldi r28,127
    6f28:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6f2a:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6f2c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6f2e:	d0 05       	cpc	r29, r0
	brge .+2
    6f30:	0c f4       	brge	.+2      	; 0x6f34 <ch4_end+0x86>
	ldi r28,-128
    6f32:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6f34:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6f36:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6f3a:	df 91       	pop	r29
	pop r28
    6f3c:	cf 91       	pop	r28
	pop r18
    6f3e:	2f 91       	pop	r18
	pop r17
    6f40:	1f 91       	pop	r17
	pop r16
    6f42:	0f 91       	pop	r16
	
	ret
    6f44:	08 95       	ret

00006f46 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6f46:	80 93 dd 0a 	sts	0x0ADD, r24
	sts sprites_tile_banks+1,r25
    6f4a:	90 93 de 0a 	sts	0x0ADE, r25
	ret
    6f4e:	08 95       	ret

00006f50 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f50:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f52:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6f54:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f56:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6f58:	67 e1       	ldi	r22, 0x17	; 23

00006f5a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6f5a:	6d 93       	st	X+, r22
	sbiw r30,1
    6f5c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6f5e:	e9 f7       	brne	.-6      	; 0x6f5a <fill_vram_loop>

	clr r1
    6f60:	11 24       	eor	r1, r1

	ret
    6f62:	08 95       	ret

00006f64 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    6f64:	50 91 e7 0a 	lds	r21, 0x0AE7
	add r20,21
    6f68:	45 0f       	add	r20, r21
	rjmp SetTile	
    6f6a:	00 c0       	rjmp	.+0      	; 0x6f6c <SetTile>

00006f6c <SetTile>:

	ret

#else

	clr r25
    6f6c:	99 27       	eor	r25, r25
	clr r23	
    6f6e:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6f70:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    6f72:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    6f74:	08 0e       	add	r0, r24
	adc r1,r25
    6f76:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6f78:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f7a:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    6f7c:	a0 0d       	add	r26, r0
	adc XH,r1
    6f7e:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6f80:	49 5e       	subi	r20, 0xE9	; 233
	st X,r20
    6f82:	4c 93       	st	X, r20

	clr r1
    6f84:	11 24       	eor	r1, r1

	ret
    6f86:	08 95       	ret

00006f88 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6f88:	80 93 e7 0a 	sts	0x0AE7, r24
	ret
    6f8c:	08 95       	ret

00006f8e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6f8e:	80 93 e5 0a 	sts	0x0AE5, r24
	sts tile_table_hi,r25	
    6f92:	90 93 e6 0a 	sts	0x0AE6, r25
	ret
    6f96:	08 95       	ret

00006f98 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6f98:	80 91 ee 0a 	lds	r24, 0x0AEE
	andi r24,SYNC_FLAG_VSYNC
    6f9c:	81 70       	andi	r24, 0x01	; 1
	ret
    6f9e:	08 95       	ret

00006fa0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6fa0:	20 91 ee 0a 	lds	r18, 0x0AEE
	andi r18,~SYNC_FLAG_VSYNC
    6fa4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6fa6:	20 93 ee 0a 	sts	0x0AEE, r18
	ret
    6faa:	08 95       	ret

00006fac <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6fac:	88 23       	and	r24, r24
	brne rj_p2
    6fae:	29 f4       	brne	.+10     	; 0x6fba <rj_p2>
		
	lds r24,joypad1_status_lo
    6fb0:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad1_status_lo+1
    6fb4:	90 91 f8 0a 	lds	r25, 0x0AF8
	ret
    6fb8:	08 95       	ret

00006fba <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6fba:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,joypad2_status_lo+1	
    6fbe:	90 91 fc 0a 	lds	r25, 0x0AFC

	ret
    6fc2:	08 95       	ret

00006fc4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6fc4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6fc6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6fc8:	f1 f7       	brne	.-4      	; 0x6fc6 <WaitUs+0x2>
	nop
    6fca:	00 00       	nop
	sbiw r24,1
    6fcc:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6fce:	d1 f7       	brne	.-12     	; 0x6fc4 <WaitUs>

	ret
    6fd0:	08 95       	ret

00006fd2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6fd2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6fd4:	fe cf       	rjmp	.-4      	; 0x6fd2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6fd6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6fd8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6fda:	60 bd       	out	0x20, r22	; 32
   cli
    6fdc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6fde:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6fe0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6fe2:	78 94       	sei
   ret
    6fe4:	08 95       	ret

00006fe6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6fe6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6fe8:	fe cf       	rjmp	.-4      	; 0x6fe6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6fea:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6fec:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6fee:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6ff0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6ff2:	80 b5       	in	r24, 0x20	; 32
   sei
    6ff4:	78 94       	sei
   ret
    6ff6:	08 95       	ret

00006ff8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6ff8:	98 e0       	ldi	r25, 0x08	; 8
    6ffa:	88 e1       	ldi	r24, 0x18	; 24
    6ffc:	0f b6       	in	r0, 0x3f	; 63
    6ffe:	f8 94       	cli
    7000:	a8 95       	wdr
    7002:	80 93 60 00 	sts	0x0060, r24
    7006:	0f be       	out	0x3f, r0	; 63
    7008:	90 93 60 00 	sts	0x0060, r25
    700c:	ff cf       	rjmp	.-2      	; 0x700c <SoftReset+0x14>

0000700e <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    700e:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7010:	c8 95       	lpm
    7012:	c8 95       	lpm
		Wait200ns();
    7014:	c8 95       	lpm
    7016:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7018:	12 98       	cbi	0x02, 2	; 2
    701a:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    701c:	80 e0       	ldi	r24, 0x00	; 0
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	20 e0       	ldi	r18, 0x00	; 0
    7022:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7024:	36 95       	lsr	r19
    7026:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7028:	96 95       	lsr	r25
    702a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    702c:	c8 95       	lpm
    702e:	c8 95       	lpm
			Wait200ns();
    7030:	c8 95       	lpm
    7032:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7034:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7036:	00 9b       	sbis	0x00, 0	; 0
    7038:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    703a:	01 9b       	sbis	0x00, 1	; 0
    703c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    703e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7040:	c8 95       	lpm
    7042:	c8 95       	lpm
			Wait200ns();
    7044:	c8 95       	lpm
    7046:	c8 95       	lpm
    7048:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    704a:	61 f7       	brne	.-40     	; 0x7024 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    704c:	30 93 f8 0a 	sts	0x0AF8, r19
    7050:	20 93 f7 0a 	sts	0x0AF7, r18
		joypad2_status_lo=p2ButtonsLo;
    7054:	90 93 fc 0a 	sts	0x0AFC, r25
    7058:	80 93 fb 0a 	sts	0x0AFB, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    705c:	80 91 f7 0a 	lds	r24, 0x0AF7
    7060:	90 91 f8 0a 	lds	r25, 0x0AF8
    7064:	0f 97       	sbiw	r24, 0x0f	; 15
    7066:	31 f0       	breq	.+12     	; 0x7074 <ReadButtons+0x66>
    7068:	80 91 fb 0a 	lds	r24, 0x0AFB
    706c:	90 91 fc 0a 	lds	r25, 0x0AFC
    7070:	0f 97       	sbiw	r24, 0x0f	; 15
    7072:	11 f4       	brne	.+4      	; 0x7078 <ReadButtons+0x6a>
		SoftReset();
    7074:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <SoftReset>
    7078:	08 95       	ret

0000707a <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    707a:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    707e:	00 99       	sbic	0x00, 0	; 0
    7080:	03 c0       	rjmp	.+6      	; 0x7088 <ReadControllers+0xe>
    7082:	81 e0       	ldi	r24, 0x01	; 1
    7084:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7088:	01 99       	sbic	0x00, 1	; 0
    708a:	05 c0       	rjmp	.+10     	; 0x7096 <ReadControllers+0x1c>
    708c:	80 91 36 0b 	lds	r24, 0x0B36
    7090:	82 60       	ori	r24, 0x02	; 2
    7092:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    7096:	0c 94 07 38 	jmp	0x700e	; 0x700e <ReadButtons>

0000709a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    709a:	cf 93       	push	r28
    709c:	df 93       	push	r29
    709e:	c0 e0       	ldi	r28, 0x00	; 0
    70a0:	d0 e0       	ldi	r29, 0x00	; 0
    70a2:	fe 01       	movw	r30, r28
    70a4:	e0 55       	subi	r30, 0x50	; 80
    70a6:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    70a8:	64 91       	lpm	r22, Z
    70aa:	ce 01       	movw	r24, r28
    70ac:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <WriteEeprom>
    70b0:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    70b2:	c0 32       	cpi	r28, 0x20	; 32
    70b4:	d1 05       	cpc	r29, r1
    70b6:	a9 f7       	brne	.-22     	; 0x70a2 <FormatEeprom+0x8>
    70b8:	c0 e2       	ldi	r28, 0x20	; 32
    70ba:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    70bc:	6f ef       	ldi	r22, 0xFF	; 255
    70be:	ce 01       	movw	r24, r28
    70c0:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    70c4:	6f ef       	ldi	r22, 0xFF	; 255
    70c6:	ce 01       	movw	r24, r28
    70c8:	01 96       	adiw	r24, 0x01	; 1
    70ca:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    70ce:	a0 96       	adiw	r28, 0x20	; 32
    70d0:	c1 15       	cp	r28, r1
    70d2:	88 e0       	ldi	r24, 0x08	; 8
    70d4:	d8 07       	cpc	r29, r24
    70d6:	91 f7       	brne	.-28     	; 0x70bc <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    70d8:	df 91       	pop	r29
    70da:	cf 91       	pop	r28
    70dc:	08 95       	ret

000070de <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    70de:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    70e0:	80 e0       	ldi	r24, 0x00	; 0
    70e2:	90 e0       	ldi	r25, 0x00	; 0
    70e4:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    70e8:	c8 2f       	mov	r28, r24
    70ea:	81 e0       	ldi	r24, 0x01	; 1
    70ec:	90 e0       	ldi	r25, 0x00	; 0
    70ee:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    70f2:	28 2f       	mov	r18, r24
    70f4:	30 e0       	ldi	r19, 0x00	; 0
    70f6:	32 2f       	mov	r19, r18
    70f8:	22 27       	eor	r18, r18
    70fa:	2c 0f       	add	r18, r28
    70fc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	2a 35       	cpi	r18, 0x5A	; 90
    7102:	35 45       	sbci	r19, 0x55	; 85
    7104:	09 f0       	breq	.+2      	; 0x7108 <isEepromFormatted+0x2a>
    7106:	80 e0       	ldi	r24, 0x00	; 0
}
    7108:	cf 91       	pop	r28
    710a:	08 95       	ret

0000710c <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    710c:	cf 92       	push	r12
    710e:	df 92       	push	r13
    7110:	ef 92       	push	r14
    7112:	ff 92       	push	r15
    7114:	0f 93       	push	r16
    7116:	1f 93       	push	r17
    7118:	cf 93       	push	r28
    711a:	df 93       	push	r29
    711c:	1f 92       	push	r1
    711e:	cd b7       	in	r28, 0x3d	; 61
    7120:	de b7       	in	r29, 0x3e	; 62
    7122:	8c 01       	movw	r16, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7124:	0e 94 6f 38 	call	0x70de	; 0x70de <isEepromFormatted>
    7128:	88 23       	and	r24, r24
    712a:	91 f1       	breq	.+100    	; 0x7190 <EepromWriteBlock+0x84>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    712c:	f8 01       	movw	r30, r16
    712e:	80 81       	ld	r24, Z
    7130:	91 81       	ldd	r25, Z+1	; 0x01
    7132:	8f 3f       	cpi	r24, 0xFF	; 255
    7134:	ff ef       	ldi	r31, 0xFF	; 255
    7136:	9f 07       	cpc	r25, r31
    7138:	69 f1       	breq	.+90     	; 0x7194 <EepromWriteBlock+0x88>
    713a:	8a 35       	cpi	r24, 0x5A	; 90
    713c:	95 45       	sbci	r25, 0x55	; 85
    713e:	51 f1       	breq	.+84     	; 0x7194 <EepromWriteBlock+0x88>
    7140:	90 e2       	ldi	r25, 0x20	; 32
    7142:	c9 2e       	mov	r12, r25
    7144:	d1 2c       	mov	r13, r1
    7146:	f1 2c       	mov	r15, r1
    7148:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    714a:	c6 01       	movw	r24, r12
    714c:	49 83       	std	Y+1, r20	; 0x01
    714e:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    7152:	e8 2e       	mov	r14, r24
    7154:	c6 01       	movw	r24, r12
    7156:	01 96       	adiw	r24, 0x01	; 1
    7158:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    715c:	28 2f       	mov	r18, r24
    715e:	30 e0       	ldi	r19, 0x00	; 0
    7160:	32 2f       	mov	r19, r18
    7162:	22 27       	eor	r18, r18
    7164:	2e 0d       	add	r18, r14
    7166:	31 1d       	adc	r19, r1
		if(id==block->id){
    7168:	f8 01       	movw	r30, r16
    716a:	80 81       	ld	r24, Z
    716c:	91 81       	ldd	r25, Z+1	; 0x01
    716e:	49 81       	ldd	r20, Y+1	; 0x01
    7170:	28 17       	cp	r18, r24
    7172:	39 07       	cpc	r19, r25
    7174:	89 f0       	breq	.+34     	; 0x7198 <EepromWriteBlock+0x8c>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    7176:	2f 3f       	cpi	r18, 0xFF	; 255
    7178:	3f 4f       	sbci	r19, 0xFF	; 255
    717a:	19 f4       	brne	.+6      	; 0x7182 <EepromWriteBlock+0x76>
    717c:	f1 10       	cpse	r15, r1
    717e:	01 c0       	rjmp	.+2      	; 0x7182 <EepromWriteBlock+0x76>
    7180:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7182:	4f 5f       	subi	r20, 0xFF	; 255
    7184:	20 e2       	ldi	r18, 0x20	; 32
    7186:	c2 0e       	add	r12, r18
    7188:	d1 1c       	adc	r13, r1
    718a:	40 34       	cpi	r20, 0x40	; 64
    718c:	f1 f6       	brne	.-68     	; 0x714a <EepromWriteBlock+0x3e>
    718e:	1d c0       	rjmp	.+58     	; 0x71ca <EepromWriteBlock+0xbe>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7190:	84 e0       	ldi	r24, 0x04	; 4
    7192:	1e c0       	rjmp	.+60     	; 0x71d0 <EepromWriteBlock+0xc4>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7194:	81 e0       	ldi	r24, 0x01	; 1
    7196:	1c c0       	rjmp	.+56     	; 0x71d0 <EepromWriteBlock+0xc4>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7198:	ff 20       	and	r15, r15
    719a:	21 f0       	breq	.+8      	; 0x71a4 <EepromWriteBlock+0x98>
    719c:	80 e2       	ldi	r24, 0x20	; 32
    719e:	f8 9e       	mul	r15, r24
    71a0:	60 01       	movw	r12, r0
    71a2:	11 24       	eor	r1, r1
    71a4:	78 01       	movw	r14, r16
    71a6:	e0 e2       	ldi	r30, 0x20	; 32
    71a8:	ee 0e       	add	r14, r30
    71aa:	f1 1c       	adc	r15, r1
    71ac:	c0 1a       	sub	r12, r16
    71ae:	d1 0a       	sbc	r13, r17
    71b0:	c8 01       	movw	r24, r16
    71b2:	8c 0d       	add	r24, r12
    71b4:	9d 1d       	adc	r25, r13

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    71b6:	f8 01       	movw	r30, r16
    71b8:	61 91       	ld	r22, Z+
    71ba:	8f 01       	movw	r16, r30
    71bc:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    71c0:	0e 15       	cp	r16, r14
    71c2:	1f 05       	cpc	r17, r15
    71c4:	a9 f7       	brne	.-22     	; 0x71b0 <EepromWriteBlock+0xa4>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    71c6:	80 e0       	ldi	r24, 0x00	; 0
    71c8:	03 c0       	rjmp	.+6      	; 0x71d0 <EepromWriteBlock+0xc4>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    71ca:	f1 10       	cpse	r15, r1
    71cc:	e7 cf       	rjmp	.-50     	; 0x719c <EepromWriteBlock+0x90>
    71ce:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    71d0:	0f 90       	pop	r0
    71d2:	df 91       	pop	r29
    71d4:	cf 91       	pop	r28
    71d6:	1f 91       	pop	r17
    71d8:	0f 91       	pop	r16
    71da:	ff 90       	pop	r15
    71dc:	ef 90       	pop	r14
    71de:	df 90       	pop	r13
    71e0:	cf 90       	pop	r12
    71e2:	08 95       	ret

000071e4 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    71e4:	df 92       	push	r13
    71e6:	ef 92       	push	r14
    71e8:	ff 92       	push	r15
    71ea:	0f 93       	push	r16
    71ec:	1f 93       	push	r17
    71ee:	cf 93       	push	r28
    71f0:	df 93       	push	r29
    71f2:	7c 01       	movw	r14, r24
    71f4:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    71f6:	0e 94 6f 38 	call	0x70de	; 0x70de <isEepromFormatted>
    71fa:	88 23       	and	r24, r24
    71fc:	79 f1       	breq	.+94     	; 0x725c <EepromReadBlock+0x78>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    71fe:	8f ef       	ldi	r24, 0xFF	; 255
    7200:	e8 16       	cp	r14, r24
    7202:	f8 06       	cpc	r15, r24
    7204:	69 f1       	breq	.+90     	; 0x7260 <EepromReadBlock+0x7c>
    7206:	00 e0       	ldi	r16, 0x00	; 0
    7208:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    720a:	c8 01       	movw	r24, r16
    720c:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    7210:	d8 2e       	mov	r13, r24
    7212:	c8 01       	movw	r24, r16
    7214:	01 96       	adiw	r24, 0x01	; 1
    7216:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    721a:	28 2f       	mov	r18, r24
    721c:	30 e0       	ldi	r19, 0x00	; 0
    721e:	32 2f       	mov	r19, r18
    7220:	22 27       	eor	r18, r18
    7222:	2d 0d       	add	r18, r13
    7224:	31 1d       	adc	r19, r1
		if(id==blockId){
    7226:	2e 15       	cp	r18, r14
    7228:	3f 05       	cpc	r19, r15
    722a:	41 f0       	breq	.+16     	; 0x723c <EepromReadBlock+0x58>
    722c:	00 5e       	subi	r16, 0xE0	; 224
    722e:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    7230:	01 15       	cp	r16, r1
    7232:	84 e0       	ldi	r24, 0x04	; 4
    7234:	18 07       	cpc	r17, r24
    7236:	49 f7       	brne	.-46     	; 0x720a <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7238:	83 e0       	ldi	r24, 0x03	; 3
    723a:	15 c0       	rjmp	.+42     	; 0x7266 <EepromReadBlock+0x82>
    723c:	7e 01       	movw	r14, r28
    723e:	80 e2       	ldi	r24, 0x20	; 32
    7240:	e8 0e       	add	r14, r24
    7242:	f1 1c       	adc	r15, r1
    7244:	0c 1b       	sub	r16, r28
    7246:	1d 0b       	sbc	r17, r29

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7248:	ce 01       	movw	r24, r28
    724a:	80 0f       	add	r24, r16
    724c:	91 1f       	adc	r25, r17
    724e:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <ReadEeprom>
    7252:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7254:	ce 15       	cp	r28, r14
    7256:	df 05       	cpc	r29, r15
    7258:	b9 f7       	brne	.-18     	; 0x7248 <EepromReadBlock+0x64>
    725a:	04 c0       	rjmp	.+8      	; 0x7264 <EepromReadBlock+0x80>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    725c:	84 e0       	ldi	r24, 0x04	; 4
    725e:	03 c0       	rjmp	.+6      	; 0x7266 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	01 c0       	rjmp	.+2      	; 0x7266 <EepromReadBlock+0x82>
	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    7264:	80 e0       	ldi	r24, 0x00	; 0
}
    7266:	df 91       	pop	r29
    7268:	cf 91       	pop	r28
    726a:	1f 91       	pop	r17
    726c:	0f 91       	pop	r16
    726e:	ff 90       	pop	r15
    7270:	ef 90       	pop	r14
    7272:	df 90       	pop	r13
    7274:	08 95       	ret

00007276 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7276:	fc 01       	movw	r30, r24
    7278:	45 87       	std	Z+13, r20	; 0x0d
    727a:	08 95       	ret

0000727c <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    727c:	81 e0       	ldi	r24, 0x01	; 1
    727e:	91 e0       	ldi	r25, 0x01	; 1
    7280:	90 93 17 0b 	sts	0x0B17, r25
    7284:	80 93 16 0b 	sts	0x0B16, r24
		mixer.channels.type.noise.params=param;
    7288:	40 93 15 0b 	sts	0x0B15, r20
    728c:	08 95       	ret

0000728e <PatchCommand05>:
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    728e:	fc 01       	movw	r30, r24
    7290:	20 81       	ld	r18, Z
    7292:	2f 75       	andi	r18, 0x5F	; 95
    7294:	20 83       	st	Z, r18
    7296:	08 95       	ret

00007298 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7298:	fc 01       	movw	r30, r24
    729a:	20 81       	ld	r18, Z
    729c:	20 64       	ori	r18, 0x40	; 64
    729e:	20 83       	st	Z, r18
    72a0:	08 95       	ret

000072a2 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    72a2:	fc 01       	movw	r30, r24
    72a4:	44 87       	std	Z+12, r20	; 0x0c
    72a6:	08 95       	ret

000072a8 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    72a8:	fc 01       	movw	r30, r24
    72aa:	47 83       	std	Z+7, r20	; 0x07
    72ac:	08 95       	ret

000072ae <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    72ae:	fc 01       	movw	r30, r24
    72b0:	40 87       	std	Z+8, r20	; 0x08
    72b2:	08 95       	ret

000072b4 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    72b4:	1f 93       	push	r17
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	ec 01       	movw	r28, r24
    72bc:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    72be:	29 81       	ldd	r18, Y+1	; 0x01
    72c0:	30 e0       	ldi	r19, 0x00	; 0
    72c2:	c9 01       	movw	r24, r18
    72c4:	88 0f       	add	r24, r24
    72c6:	99 1f       	adc	r25, r25
    72c8:	88 5f       	subi	r24, 0xF8	; 248
    72ca:	94 48       	sbci	r25, 0x84	; 132
    72cc:	fc 01       	movw	r30, r24
    72ce:	a5 91       	lpm	r26, Z+
    72d0:	b4 91       	lpm	r27, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    72d2:	f9 01       	movw	r30, r18
    72d4:	e4 0f       	add	r30, r20
    72d6:	f1 1d       	adc	r31, r1
    72d8:	47 fd       	sbrc	r20, 7
    72da:	fa 95       	dec	r31
    72dc:	ee 0f       	add	r30, r30
    72de:	ff 1f       	adc	r31, r31
    72e0:	e8 5f       	subi	r30, 0xF8	; 248
    72e2:	f4 48       	sbci	r31, 0x84	; 132
    72e4:	85 91       	lpm	r24, Z+
    72e6:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    72e8:	8a 1b       	sub	r24, r26
    72ea:	9b 0b       	sbc	r25, r27
    72ec:	60 91 3e 0b 	lds	r22, 0x0B3E
    72f0:	70 e0       	ldi	r23, 0x00	; 0
    72f2:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
	if(delta==0)delta++;
    72f6:	61 15       	cp	r22, r1
    72f8:	71 05       	cpc	r23, r1
    72fa:	11 f4       	brne	.+4      	; 0x7300 <PatchCommand11+0x4c>
    72fc:	61 e0       	ldi	r22, 0x01	; 1
    72fe:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    7300:	86 e0       	ldi	r24, 0x06	; 6
    7302:	18 9f       	mul	r17, r24
    7304:	f0 01       	movw	r30, r0
    7306:	11 24       	eor	r1, r1
    7308:	ee 5f       	subi	r30, 0xFE	; 254
    730a:	f4 4f       	sbci	r31, 0xF4	; 244
    730c:	21 81       	ldd	r18, Z+1	; 0x01
    730e:	32 81       	ldd	r19, Z+2	; 0x02
    7310:	26 0f       	add	r18, r22
    7312:	37 1f       	adc	r19, r23
    7314:	32 83       	std	Z+2, r19	; 0x02
    7316:	21 83       	std	Z+1, r18	; 0x01
	
	track->slideStep=delta;
    7318:	7b 83       	std	Y+3, r23	; 0x03
    731a:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    731c:	88 81       	ld	r24, Y
    731e:	88 60       	ori	r24, 0x08	; 8
    7320:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7322:	89 81       	ldd	r24, Y+1	; 0x01
    7324:	84 0f       	add	r24, r20
    7326:	8c 83       	std	Y+4, r24	; 0x04
}
    7328:	df 91       	pop	r29
    732a:	cf 91       	pop	r28
    732c:	1f 91       	pop	r17
    732e:	08 95       	ret

00007330 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    7330:	40 93 3e 0b 	sts	0x0B3E, r20
    7334:	08 95       	ret

00007336 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7336:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7338:	64 2f       	mov	r22, r20
    733a:	0c 94 13 3d 	jmp	0x7a26	; 0x7a26 <SetMixerWave>

0000733e <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    733e:	fc 01       	movw	r30, r24
    7340:	86 2f       	mov	r24, r22
	track->note+=param;
    7342:	91 81       	ldd	r25, Z+1	; 0x01
    7344:	49 0f       	add	r20, r25
    7346:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    7348:	64 2f       	mov	r22, r20
    734a:	0c 94 fc 3c 	jmp	0x79f8	; 0x79f8 <SetMixerNote>

0000734e <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    734e:	fc 01       	movw	r30, r24
    7350:	86 2f       	mov	r24, r22
	track->note-=param;
    7352:	61 81       	ldd	r22, Z+1	; 0x01
    7354:	64 1b       	sub	r22, r20
    7356:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7358:	0c 94 fc 3c 	jmp	0x79f8	; 0x79f8 <SetMixerNote>

0000735c <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    735c:	0f 93       	push	r16
    735e:	1f 93       	push	r17
    7360:	cf 93       	push	r28
    7362:	df 93       	push	r29
    7364:	1f 92       	push	r1
    7366:	cd b7       	in	r28, 0x3d	; 61
    7368:	de b7       	in	r29, 0x3e	; 62
    736a:	8c 01       	movw	r16, r24
    736c:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    736e:	64 2f       	mov	r22, r20
    7370:	49 83       	std	Y+1, r20	; 0x01
    7372:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <SetMixerNote>
	track->note=param;
    7376:	49 81       	ldd	r20, Y+1	; 0x01
    7378:	f8 01       	movw	r30, r16
    737a:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    737c:	80 81       	ld	r24, Z
    737e:	87 7f       	andi	r24, 0xF7	; 247
    7380:	80 83       	st	Z, r24
}
    7382:	0f 90       	pop	r0
    7384:	df 91       	pop	r29
    7386:	cf 91       	pop	r28
    7388:	1f 91       	pop	r17
    738a:	0f 91       	pop	r16
    738c:	08 95       	ret

0000738e <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    738e:	90 93 aa 0b 	sts	0x0BAA, r25
    7392:	80 93 a9 0b 	sts	0x0BA9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7396:	8f e6       	ldi	r24, 0x6F	; 111
    7398:	80 93 ac 0b 	sts	0x0BAC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    739c:	10 92 00 0b 	sts	0x0B00, r1
    73a0:	e7 e4       	ldi	r30, 0x47	; 71
    73a2:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73a4:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73a6:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    73a8:	28 e1       	ldi	r18, 0x18	; 24
    73aa:	df 01       	movw	r26, r30
    73ac:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73ae:	8c 93       	st	X, r24
    73b0:	df 01       	movw	r26, r30
    73b2:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].noteVol=0;
    73b4:	1c 92       	st	X, r1
    73b6:	df 01       	movw	r26, r30
    73b8:	15 97       	sbiw	r26, 0x05	; 5
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73ba:	9c 93       	st	X, r25
    73bc:	df 01       	movw	r26, r30
    73be:	14 97       	sbiw	r26, 0x04	; 4
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73c0:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    73c2:	10 82       	st	Z, r1
    73c4:	df 01       	movw	r26, r30
    73c6:	16 97       	sbiw	r26, 0x06	; 6
		tracks[t].tremoloRate=24; //~6hz
    73c8:	2c 93       	st	X, r18
    73ca:	df 01       	movw	r26, r30
    73cc:	19 97       	sbiw	r26, 0x09	; 9
		tracks[t].slideSpeed=0x10;
    73ce:	8c 93       	st	X, r24
    73d0:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73d2:	3b e0       	ldi	r19, 0x0B	; 11
    73d4:	e5 3b       	cpi	r30, 0xB5	; 181
    73d6:	f3 07       	cpc	r31, r19
    73d8:	41 f7       	brne	.-48     	; 0x73aa <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    73da:	08 95       	ret

000073dc <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    73dc:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    73de:	ed 91       	ld	r30, X+
    73e0:	fc 91       	ld	r31, X
    73e2:	11 97       	sbiw	r26, 0x01	; 1
    73e4:	9f 01       	movw	r18, r30
    73e6:	2f 5f       	subi	r18, 0xFF	; 255
    73e8:	3f 4f       	sbci	r19, 0xFF	; 255
    73ea:	11 96       	adiw	r26, 0x01	; 1
    73ec:	3c 93       	st	X, r19
    73ee:	2e 93       	st	-X, r18
    73f0:	84 91       	lpm	r24, Z
    73f2:	87 fd       	sbrc	r24, 7
    73f4:	02 c0       	rjmp	.+4      	; 0x73fa <ReadVarLen+0x1e>
    73f6:	90 e0       	ldi	r25, 0x00	; 0
    73f8:	08 95       	ret
    {
       value &= 0x7F;
    73fa:	8f 77       	andi	r24, 0x7F	; 127
    73fc:	90 e0       	ldi	r25, 0x00	; 0
    73fe:	f9 01       	movw	r30, r18
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7400:	96 95       	lsr	r25
    7402:	98 2f       	mov	r25, r24
    7404:	88 27       	eor	r24, r24
    7406:	97 95       	ror	r25
    7408:	87 95       	ror	r24
    740a:	9f 01       	movw	r18, r30
    740c:	2f 5f       	subi	r18, 0xFF	; 255
    740e:	3f 4f       	sbci	r19, 0xFF	; 255
    7410:	e4 91       	lpm	r30, Z
    7412:	4e 2f       	mov	r20, r30
    7414:	4f 77       	andi	r20, 0x7F	; 127
    7416:	84 0f       	add	r24, r20
    7418:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    741a:	e7 fd       	sbrc	r30, 7
    741c:	f0 cf       	rjmp	.-32     	; 0x73fe <ReadVarLen+0x22>
    741e:	2d 93       	st	X+, r18
    7420:	3c 93       	st	X, r19
    }


    return value;
}
    7422:	08 95       	ret

00007424 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    7424:	cf 92       	push	r12
    7426:	df 92       	push	r13
    7428:	ef 92       	push	r14
    742a:	ff 92       	push	r15
    742c:	0f 93       	push	r16
    742e:	1f 93       	push	r17
    7430:	cf 93       	push	r28
    7432:	df 93       	push	r29
    7434:	00 d0       	rcall	.+0      	; 0x7436 <TriggerCommon+0x12>
    7436:	cd b7       	in	r28, 0x3d	; 61
    7438:	de b7       	in	r29, 0x3e	; 62
    743a:	98 2f       	mov	r25, r24
    743c:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
    743e:	36 e1       	ldi	r19, 0x16	; 22
    7440:	83 9f       	mul	r24, r19
    7442:	60 01       	movw	r12, r0
    7444:	11 24       	eor	r1, r1
    7446:	b6 01       	movw	r22, r12
    7448:	67 5c       	subi	r22, 0xC7	; 199
    744a:	74 4f       	sbci	r23, 0xF4	; 244
    744c:	6b 01       	movw	r12, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    744e:	fb 01       	movw	r30, r22
    7450:	80 81       	ld	r24, Z
    7452:	18 2f       	mov	r17, r24
    7454:	11 1f       	adc	r17, r17
    7456:	11 27       	eor	r17, r17
    7458:	11 1f       	adc	r17, r17

	track->patchCurrDeltaTime=0;
    745a:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    745c:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    745e:	3f ef       	ldi	r19, 0xFF	; 255
    7460:	34 87       	std	Z+12, r19	; 0x0c
	track->noteVol=volume;
    7462:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    7464:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7466:	87 7b       	andi	r24, 0xB7	; 183
    7468:	80 62       	ori	r24, 0x20	; 32
    746a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    746c:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    746e:	31 87       	std	Z+9, r19	; 0x09
	track->note=note;
    7470:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    7472:	93 30       	cpi	r25, 0x03	; 3
    7474:	69 f4       	brne	.+26     	; 0x7490 <TriggerCommon+0x6c>
			//noise channel		
			if(!isFx) patch=note;			
    7476:	11 11       	cpse	r17, r1
    7478:	01 c0       	rjmp	.+2      	; 0x747c <TriggerCommon+0x58>
    747a:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    747c:	81 e0       	ldi	r24, 0x01	; 1
    747e:	91 e0       	ldi	r25, 0x01	; 1
    7480:	90 93 17 0b 	sts	0x0B17, r25
    7484:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7488:	81 e0       	ldi	r24, 0x01	; 1
    748a:	80 93 15 0b 	sts	0x0B15, r24
    748e:	3c c0       	rjmp	.+120    	; 0x7508 <TriggerCommon+0xe4>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    7490:	94 30       	cpi	r25, 0x04	; 4
    7492:	71 f5       	brne	.+92     	; 0x74f0 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7494:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7498:	80 91 a9 0b 	lds	r24, 0x0BA9
    749c:	90 91 aa 0b 	lds	r25, 0x0BAA
    74a0:	f9 e0       	ldi	r31, 0x09	; 9
    74a2:	0f 9f       	mul	r16, r31
    74a4:	80 0d       	add	r24, r0
    74a6:	91 1d       	adc	r25, r1
    74a8:	11 24       	eor	r1, r1
    74aa:	fc 01       	movw	r30, r24
    74ac:	31 96       	adiw	r30, 0x01	; 1
    74ae:	45 91       	lpm	r20, Z+
    74b0:	54 91       	lpm	r21, Z
				mixer.channels.type.pcm.position=pos;				
    74b2:	50 93 1f 0b 	sts	0x0B1F, r21
    74b6:	40 93 1e 0b 	sts	0x0B1E, r20
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    74ba:	dc 01       	movw	r26, r24
    74bc:	17 96       	adiw	r26, 0x07	; 7
    74be:	fd 01       	movw	r30, r26
    74c0:	e5 90       	lpm	r14, Z+
    74c2:	f4 90       	lpm	r15, Z
    74c4:	05 96       	adiw	r24, 0x05	; 5
    74c6:	fc 01       	movw	r30, r24
    74c8:	85 91       	lpm	r24, Z+
    74ca:	94 91       	lpm	r25, Z
    74cc:	e8 1a       	sub	r14, r24
    74ce:	f9 0a       	sbc	r15, r25
    74d0:	f0 92 21 0b 	sts	0x0B21, r15
    74d4:	e0 92 20 0b 	sts	0x0B20, r14
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    74d8:	fd 01       	movw	r30, r26
    74da:	85 91       	lpm	r24, Z+
    74dc:	94 91       	lpm	r25, Z
    74de:	48 0f       	add	r20, r24
    74e0:	59 1f       	adc	r21, r25
    74e2:	50 93 23 0b 	sts	0x0B23, r21
    74e6:	40 93 22 0b 	sts	0x0B22, r20
				SetMixerNote(channel,note);
    74ea:	62 2f       	mov	r22, r18
    74ec:	84 e0       	ldi	r24, 0x04	; 4
    74ee:	0a c0       	rjmp	.+20     	; 0x7504 <TriggerCommon+0xe0>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    74f0:	60 e0       	ldi	r22, 0x00	; 0
    74f2:	89 2f       	mov	r24, r25
    74f4:	2a 83       	std	Y+2, r18	; 0x02
    74f6:	99 83       	std	Y+1, r25	; 0x01
    74f8:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <SetMixerWave>
			SetMixerNote(channel,note);
    74fc:	2a 81       	ldd	r18, Y+2	; 0x02
    74fe:	62 2f       	mov	r22, r18
    7500:	99 81       	ldd	r25, Y+1	; 0x01
    7502:	89 2f       	mov	r24, r25
    7504:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7508:	f6 01       	movw	r30, r12

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    750a:	11 23       	and	r17, r17
    750c:	11 f0       	breq	.+4      	; 0x7512 <TriggerCommon+0xee>
		track->fxPatchNo=patch;
    750e:	07 87       	std	Z+15, r16	; 0x0f
    7510:	01 c0       	rjmp	.+2      	; 0x7514 <TriggerCommon+0xf0>
	}else{
		track->patchNo=patch;	
    7512:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7514:	e0 91 a9 0b 	lds	r30, 0x0BA9
    7518:	f0 91 aa 0b 	lds	r31, 0x0BAA
    751c:	39 e0       	ldi	r19, 0x09	; 9
    751e:	03 9f       	mul	r16, r19
    7520:	e0 0d       	add	r30, r0
    7522:	f1 1d       	adc	r31, r1
    7524:	11 24       	eor	r1, r1
    7526:	33 96       	adiw	r30, 0x03	; 3
    7528:	85 91       	lpm	r24, Z+
    752a:	94 91       	lpm	r25, Z
	if(pos==NULL){
    752c:	00 97       	sbiw	r24, 0x00	; 0
    752e:	21 f4       	brne	.+8      	; 0x7538 <TriggerCommon+0x114>
		track->patchCommandStreamPos=NULL;
    7530:	f6 01       	movw	r30, r12
    7532:	15 8a       	std	Z+21, r1	; 0x15
    7534:	14 8a       	std	Z+20, r1	; 0x14
    7536:	07 c0       	rjmp	.+14     	; 0x7546 <TriggerCommon+0x122>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7538:	fc 01       	movw	r30, r24
    753a:	24 91       	lpm	r18, Z
    753c:	f6 01       	movw	r30, r12
    753e:	21 8b       	std	Z+17, r18	; 0x11
    7540:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7542:	95 8b       	std	Z+21, r25	; 0x15
    7544:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7546:	0f 90       	pop	r0
    7548:	0f 90       	pop	r0
    754a:	df 91       	pop	r29
    754c:	cf 91       	pop	r28
    754e:	1f 91       	pop	r17
    7550:	0f 91       	pop	r16
    7552:	ff 90       	pop	r15
    7554:	ef 90       	pop	r14
    7556:	df 90       	pop	r13
    7558:	cf 90       	pop	r12
    755a:	08 95       	ret

0000755c <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    755c:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    755e:	a8 2f       	mov	r26, r24
    7560:	b0 e0       	ldi	r27, 0x00	; 0
    7562:	96 e1       	ldi	r25, 0x16	; 22
    7564:	89 9f       	mul	r24, r25
    7566:	f0 01       	movw	r30, r0
    7568:	11 24       	eor	r1, r1
    756a:	e7 5c       	subi	r30, 0xC7	; 199
    756c:	f4 4f       	sbci	r31, 0xF4	; 244
    756e:	90 81       	ld	r25, Z
    7570:	95 ff       	sbrs	r25, 5
    7572:	02 c0       	rjmp	.+4      	; 0x7578 <TriggerNote+0x1c>
    7574:	97 fd       	sbrc	r25, 7
    7576:	29 c0       	rjmp	.+82     	; 0x75ca <TriggerNote+0x6e>
			
		if(volume==0){ //note-off received
    7578:	31 11       	cpse	r19, r1
    757a:	19 c0       	rjmp	.+50     	; 0x75ae <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    757c:	86 e1       	ldi	r24, 0x16	; 22
    757e:	8a 9f       	mul	r24, r26
    7580:	f0 01       	movw	r30, r0
    7582:	8b 9f       	mul	r24, r27
    7584:	f0 0d       	add	r31, r0
    7586:	11 24       	eor	r1, r1
    7588:	e7 5c       	subi	r30, 0xC7	; 199
    758a:	f4 4f       	sbci	r31, 0xF4	; 244
    758c:	85 85       	ldd	r24, Z+13	; 0x0d
    758e:	81 11       	cpse	r24, r1
    7590:	02 c0       	rjmp	.+4      	; 0x7596 <TriggerNote+0x3a>
    7592:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    7594:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7596:	86 e1       	ldi	r24, 0x16	; 22
    7598:	8a 9f       	mul	r24, r26
    759a:	f0 01       	movw	r30, r0
    759c:	8b 9f       	mul	r24, r27
    759e:	f0 0d       	add	r31, r0
    75a0:	11 24       	eor	r1, r1
    75a2:	e7 5c       	subi	r30, 0xC7	; 199
    75a4:	f4 4f       	sbci	r31, 0xF4	; 244
    75a6:	80 81       	ld	r24, Z
    75a8:	8f 7b       	andi	r24, 0xBF	; 191
    75aa:	80 83       	st	Z, r24
    75ac:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    75ae:	26 e1       	ldi	r18, 0x16	; 22
    75b0:	2a 9f       	mul	r18, r26
    75b2:	f0 01       	movw	r30, r0
    75b4:	2b 9f       	mul	r18, r27
    75b6:	f0 0d       	add	r31, r0
    75b8:	11 24       	eor	r1, r1
    75ba:	e7 5c       	subi	r30, 0xC7	; 199
    75bc:	f4 4f       	sbci	r31, 0xF4	; 244
    75be:	9f 77       	andi	r25, 0x7F	; 127
    75c0:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    75c2:	24 2f       	mov	r18, r20
    75c4:	43 2f       	mov	r20, r19
    75c6:	0c 94 12 3a 	jmp	0x7424	; 0x7424 <TriggerCommon>
    75ca:	08 95       	ret

000075cc <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    75cc:	9f 92       	push	r9
    75ce:	af 92       	push	r10
    75d0:	bf 92       	push	r11
    75d2:	cf 92       	push	r12
    75d4:	df 92       	push	r13
    75d6:	ef 92       	push	r14
    75d8:	ff 92       	push	r15
    75da:	0f 93       	push	r16
    75dc:	1f 93       	push	r17
    75de:	cf 93       	push	r28
    75e0:	df 93       	push	r29
    75e2:	a3 e0       	ldi	r26, 0x03	; 3
    75e4:	bb e0       	ldi	r27, 0x0B	; 11
    75e6:	c9 e3       	ldi	r28, 0x39	; 57
    75e8:	db e0       	ldi	r29, 0x0B	; 11
    75ea:	20 e0       	ldi	r18, 0x00	; 0
    75ec:	30 e0       	ldi	r19, 0x00	; 0
    75ee:	f9 01       	movw	r30, r18
    75f0:	e7 5c       	subi	r30, 0xC7	; 199
    75f2:	f4 4f       	sbci	r31, 0xF4	; 244
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    75f4:	85 85       	ldd	r24, Z+13	; 0x0d
    75f6:	88 23       	and	r24, r24
    75f8:	89 f0       	breq	.+34     	; 0x761c <ProcessMusic+0x50>
			vol=track->envelopeVol+track->envelopeStep;		
    75fa:	44 85       	ldd	r20, Z+12	; 0x0c
    75fc:	99 27       	eor	r25, r25
    75fe:	87 fd       	sbrc	r24, 7
    7600:	90 95       	com	r25
    7602:	84 0f       	add	r24, r20
    7604:	91 1d       	adc	r25, r1
    7606:	8f 3f       	cpi	r24, 0xFF	; 255
    7608:	91 05       	cpc	r25, r1
    760a:	19 f0       	breq	.+6      	; 0x7612 <ProcessMusic+0x46>
    760c:	14 f0       	brlt	.+4      	; 0x7612 <ProcessMusic+0x46>
    760e:	8f ef       	ldi	r24, 0xFF	; 255
    7610:	90 e0       	ldi	r25, 0x00	; 0
    7612:	97 ff       	sbrs	r25, 7
    7614:	02 c0       	rjmp	.+4      	; 0x761a <ProcessMusic+0x4e>
    7616:	80 e0       	ldi	r24, 0x00	; 0
    7618:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    761a:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    761c:	18 81       	ld	r17, Y
    761e:	13 ff       	sbrs	r17, 3
    7620:	23 c0       	rjmp	.+70     	; 0x7668 <ProcessMusic+0x9c>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7622:	6a 81       	ldd	r22, Y+2	; 0x02
    7624:	7b 81       	ldd	r23, Y+3	; 0x03
    7626:	8d 91       	ld	r24, X+
    7628:	9c 91       	ld	r25, X
    762a:	11 97       	sbiw	r26, 0x01	; 1
    762c:	86 0f       	add	r24, r22
    762e:	97 1f       	adc	r25, r23
    7630:	11 96       	adiw	r26, 0x01	; 1
    7632:	9c 93       	st	X, r25
    7634:	8e 93       	st	-X, r24
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7636:	e4 81       	ldd	r30, Z+4	; 0x04
    7638:	f0 e0       	ldi	r31, 0x00	; 0
    763a:	ee 0f       	add	r30, r30
    763c:	ff 1f       	adc	r31, r31
    763e:	e8 5f       	subi	r30, 0xF8	; 248
    7640:	f4 48       	sbci	r31, 0x84	; 132
    7642:	45 91       	lpm	r20, Z+
    7644:	54 91       	lpm	r21, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7646:	16 16       	cp	r1, r22
    7648:	17 06       	cpc	r1, r23
    764a:	24 f4       	brge	.+8      	; 0x7654 <ProcessMusic+0x88>
    764c:	84 17       	cp	r24, r20
    764e:	95 07       	cpc	r25, r21
    7650:	30 f4       	brcc	.+12     	; 0x765e <ProcessMusic+0x92>
    7652:	0a c0       	rjmp	.+20     	; 0x7668 <ProcessMusic+0x9c>
    7654:	67 2b       	or	r22, r23
    7656:	41 f0       	breq	.+16     	; 0x7668 <ProcessMusic+0x9c>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7658:	48 17       	cp	r20, r24
    765a:	59 07       	cpc	r21, r25
    765c:	28 f0       	brcs	.+10     	; 0x7668 <ProcessMusic+0x9c>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    765e:	11 96       	adiw	r26, 0x01	; 1
    7660:	5c 93       	st	X, r21
    7662:	4e 93       	st	-X, r20
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7664:	17 7f       	andi	r17, 0xF7	; 247
    7666:	18 83       	st	Y, r17
    7668:	2a 5e       	subi	r18, 0xEA	; 234
    766a:	3f 4f       	sbci	r19, 0xFF	; 255
    766c:	66 96       	adiw	r28, 0x16	; 22
    766e:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7670:	2e 36       	cpi	r18, 0x6E	; 110
    7672:	31 05       	cpc	r19, r1
    7674:	09 f0       	breq	.+2      	; 0x7678 <ProcessMusic+0xac>
    7676:	bb cf       	rjmp	.-138    	; 0x75ee <ProcessMusic+0x22>
	}



	//Process song MIDI notes
	if(playSong){
    7678:	80 91 00 0b 	lds	r24, 0x0B00
    767c:	88 23       	and	r24, r24
    767e:	09 f4       	brne	.+2      	; 0x7682 <ProcessMusic+0xb6>
    7680:	c8 c0       	rjmp	.+400    	; 0x7812 <ProcessMusic+0x246>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7682:	c6 e1       	ldi	r28, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7684:	80 91 a7 0b 	lds	r24, 0x0BA7
    7688:	90 91 a8 0b 	lds	r25, 0x0BA8
    768c:	20 91 ad 0b 	lds	r18, 0x0BAD
    7690:	30 91 ae 0b 	lds	r19, 0x0BAE
    7694:	82 17       	cp	r24, r18
    7696:	93 07       	cpc	r25, r19
    7698:	09 f0       	breq	.+2      	; 0x769c <ProcessMusic+0xd0>
    769a:	b6 c0       	rjmp	.+364    	; 0x7808 <ProcessMusic+0x23c>

				c1=pgm_read_byte(songPos++);
    769c:	20 91 b0 0b 	lds	r18, 0x0BB0
    76a0:	30 91 b1 0b 	lds	r19, 0x0BB1
    76a4:	b9 01       	movw	r22, r18
    76a6:	6f 5f       	subi	r22, 0xFF	; 255
    76a8:	7f 4f       	sbci	r23, 0xFF	; 255
    76aa:	70 93 b1 0b 	sts	0x0BB1, r23
    76ae:	60 93 b0 0b 	sts	0x0BB0, r22
    76b2:	f9 01       	movw	r30, r18
    76b4:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    76b6:	4f 3f       	cpi	r20, 0xFF	; 255
    76b8:	79 f5       	brne	.+94     	; 0x7718 <ProcessMusic+0x14c>
					//META data type event
					c1=pgm_read_byte(songPos++);
    76ba:	a9 01       	movw	r20, r18
    76bc:	4e 5f       	subi	r20, 0xFE	; 254
    76be:	5f 4f       	sbci	r21, 0xFF	; 255
    76c0:	50 93 b1 0b 	sts	0x0BB1, r21
    76c4:	40 93 b0 0b 	sts	0x0BB0, r20
    76c8:	fb 01       	movw	r30, r22
    76ca:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    76cc:	6f 32       	cpi	r22, 0x2F	; 47
    76ce:	19 f4       	brne	.+6      	; 0x76d6 <ProcessMusic+0x10a>
						playSong=false;
    76d0:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    76d4:	99 c0       	rjmp	.+306    	; 0x7808 <ProcessMusic+0x23c>
					}else if(c1==0x6){ //marker
    76d6:	66 30       	cpi	r22, 0x06	; 6
    76d8:	09 f0       	breq	.+2      	; 0x76dc <ProcessMusic+0x110>
    76da:	89 c0       	rjmp	.+274    	; 0x77ee <ProcessMusic+0x222>
						c1=pgm_read_byte(songPos++); //read len
    76dc:	fa 01       	movw	r30, r20
    76de:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    76e0:	c9 01       	movw	r24, r18
    76e2:	04 96       	adiw	r24, 0x04	; 4
    76e4:	90 93 b1 0b 	sts	0x0BB1, r25
    76e8:	80 93 b0 0b 	sts	0x0BB0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    76ec:	f9 01       	movw	r30, r18
    76ee:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    76f0:	24 91       	lpm	r18, Z
						if(c2=='S'){ //loop start
    76f2:	23 35       	cpi	r18, 0x53	; 83
    76f4:	29 f4       	brne	.+10     	; 0x7700 <ProcessMusic+0x134>
							loopStart=songPos;
    76f6:	90 93 b3 0b 	sts	0x0BB3, r25
    76fa:	80 93 b2 0b 	sts	0x0BB2, r24
    76fe:	77 c0       	rjmp	.+238    	; 0x77ee <ProcessMusic+0x222>
						}else if(c2=='E'){//loop end
    7700:	25 34       	cpi	r18, 0x45	; 69
    7702:	09 f0       	breq	.+2      	; 0x7706 <ProcessMusic+0x13a>
    7704:	74 c0       	rjmp	.+232    	; 0x77ee <ProcessMusic+0x222>
							songPos=loopStart;
    7706:	80 91 b2 0b 	lds	r24, 0x0BB2
    770a:	90 91 b3 0b 	lds	r25, 0x0BB3
    770e:	90 93 b1 0b 	sts	0x0BB1, r25
    7712:	80 93 b0 0b 	sts	0x0BB0, r24
    7716:	6b c0       	rjmp	.+214    	; 0x77ee <ProcessMusic+0x222>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7718:	47 fd       	sbrc	r20, 7
    771a:	40 93 ab 0b 	sts	0x0BAB, r20
					channel=lastStatus&0x0f;
    771e:	90 91 ab 0b 	lds	r25, 0x0BAB
    7722:	89 2f       	mov	r24, r25
    7724:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7726:	47 ff       	sbrs	r20, 7
    7728:	08 c0       	rjmp	.+16     	; 0x773a <ProcessMusic+0x16e>
    772a:	2e 5f       	subi	r18, 0xFE	; 254
    772c:	3f 4f       	sbci	r19, 0xFF	; 255
    772e:	30 93 b1 0b 	sts	0x0BB1, r19
    7732:	20 93 b0 0b 	sts	0x0BB0, r18
    7736:	fb 01       	movw	r30, r22
    7738:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    773a:	90 7f       	andi	r25, 0xF0	; 240
    773c:	90 3b       	cpi	r25, 0xB0	; 176
    773e:	e9 f0       	breq	.+58     	; 0x777a <ProcessMusic+0x1ae>
    7740:	90 3c       	cpi	r25, 0xC0	; 192
    7742:	09 f4       	brne	.+2      	; 0x7746 <ProcessMusic+0x17a>
    7744:	4e c0       	rjmp	.+156    	; 0x77e2 <ProcessMusic+0x216>
    7746:	90 39       	cpi	r25, 0x90	; 144
    7748:	09 f0       	breq	.+2      	; 0x774c <ProcessMusic+0x180>
    774a:	51 c0       	rjmp	.+162    	; 0x77ee <ProcessMusic+0x222>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    774c:	e0 91 b0 0b 	lds	r30, 0x0BB0
    7750:	f0 91 b1 0b 	lds	r31, 0x0BB1
    7754:	9f 01       	movw	r18, r30
    7756:	2f 5f       	subi	r18, 0xFF	; 255
    7758:	3f 4f       	sbci	r19, 0xFF	; 255
    775a:	30 93 b1 0b 	sts	0x0BB1, r19
    775e:	20 93 b0 0b 	sts	0x0BB0, r18
    7762:	24 91       	lpm	r18, Z
    7764:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7766:	c8 9f       	mul	r28, r24
    7768:	d0 01       	movw	r26, r0
    776a:	11 24       	eor	r1, r1
    776c:	a7 5c       	subi	r26, 0xC7	; 199
    776e:	b4 4f       	sbci	r27, 0xF4	; 244
    7770:	1e 96       	adiw	r26, 0x0e	; 14
    7772:	6c 91       	ld	r22, X
    7774:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
    7778:	3a c0       	rjmp	.+116    	; 0x77ee <ProcessMusic+0x222>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    777a:	e0 91 b0 0b 	lds	r30, 0x0BB0
    777e:	f0 91 b1 0b 	lds	r31, 0x0BB1
    7782:	9f 01       	movw	r18, r30
    7784:	2f 5f       	subi	r18, 0xFF	; 255
    7786:	3f 4f       	sbci	r19, 0xFF	; 255
    7788:	30 93 b1 0b 	sts	0x0BB1, r19
    778c:	20 93 b0 0b 	sts	0x0BB0, r18
    7790:	94 91       	lpm	r25, Z
						
							if(c1==CONTROLER_VOL){
    7792:	47 30       	cpi	r20, 0x07	; 7
    7794:	41 f4       	brne	.+16     	; 0x77a6 <ProcessMusic+0x1da>
								tracks[channel].trackVol=c2<<1;
    7796:	c8 9f       	mul	r28, r24
    7798:	f0 01       	movw	r30, r0
    779a:	11 24       	eor	r1, r1
    779c:	e7 5c       	subi	r30, 0xC7	; 199
    779e:	f4 4f       	sbci	r31, 0xF4	; 244
    77a0:	99 0f       	add	r25, r25
    77a2:	92 87       	std	Z+10, r25	; 0x0a
    77a4:	24 c0       	rjmp	.+72     	; 0x77ee <ProcessMusic+0x222>
							}else if(c1==CONTROLER_EXPRESSION){
    77a6:	4b 30       	cpi	r20, 0x0B	; 11
    77a8:	41 f4       	brne	.+16     	; 0x77ba <ProcessMusic+0x1ee>
								tracks[channel].expressionVol=c2<<1;
    77aa:	c8 9f       	mul	r28, r24
    77ac:	f0 01       	movw	r30, r0
    77ae:	11 24       	eor	r1, r1
    77b0:	e7 5c       	subi	r30, 0xC7	; 199
    77b2:	f4 4f       	sbci	r31, 0xF4	; 244
    77b4:	99 0f       	add	r25, r25
    77b6:	91 87       	std	Z+9, r25	; 0x09
    77b8:	1a c0       	rjmp	.+52     	; 0x77ee <ProcessMusic+0x222>
							}else if(c1==CONTROLER_TREMOLO){
    77ba:	4c 35       	cpi	r20, 0x5C	; 92
    77bc:	41 f4       	brne	.+16     	; 0x77ce <ProcessMusic+0x202>
								tracks[channel].tremoloLevel=c2<<1;
    77be:	c8 9f       	mul	r28, r24
    77c0:	f0 01       	movw	r30, r0
    77c2:	11 24       	eor	r1, r1
    77c4:	e7 5c       	subi	r30, 0xC7	; 199
    77c6:	f4 4f       	sbci	r31, 0xF4	; 244
    77c8:	99 0f       	add	r25, r25
    77ca:	97 83       	std	Z+7, r25	; 0x07
    77cc:	10 c0       	rjmp	.+32     	; 0x77ee <ProcessMusic+0x222>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    77ce:	44 36       	cpi	r20, 0x64	; 100
    77d0:	71 f4       	brne	.+28     	; 0x77ee <ProcessMusic+0x222>
								tracks[channel].tremoloRate=c2<<1;
    77d2:	c8 9f       	mul	r28, r24
    77d4:	f0 01       	movw	r30, r0
    77d6:	11 24       	eor	r1, r1
    77d8:	e7 5c       	subi	r30, 0xC7	; 199
    77da:	f4 4f       	sbci	r31, 0xF4	; 244
    77dc:	99 0f       	add	r25, r25
    77de:	90 87       	std	Z+8, r25	; 0x08
    77e0:	06 c0       	rjmp	.+12     	; 0x77ee <ProcessMusic+0x222>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    77e2:	c8 9f       	mul	r28, r24
    77e4:	f0 01       	movw	r30, r0
    77e6:	11 24       	eor	r1, r1
    77e8:	e7 5c       	subi	r30, 0xC7	; 199
    77ea:	f4 4f       	sbci	r31, 0xF4	; 244
    77ec:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    77ee:	80 eb       	ldi	r24, 0xB0	; 176
    77f0:	9b e0       	ldi	r25, 0x0B	; 11
    77f2:	0e 94 ee 39 	call	0x73dc	; 0x73dc <ReadVarLen>
    77f6:	90 93 ae 0b 	sts	0x0BAE, r25
    77fa:	80 93 ad 0b 	sts	0x0BAD, r24
				currDeltaTime=0;
    77fe:	10 92 a8 0b 	sts	0x0BA8, r1
    7802:	10 92 a7 0b 	sts	0x0BA7, r1
    7806:	3e cf       	rjmp	.-388    	; 0x7684 <ProcessMusic+0xb8>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7808:	01 96       	adiw	r24, 0x01	; 1
    780a:	90 93 a8 0b 	sts	0x0BA8, r25
    780e:	80 93 a7 0b 	sts	0x0BA7, r24
    7812:	92 e0       	ldi	r25, 0x02	; 2
    7814:	c9 2e       	mov	r12, r25
    7816:	9b e0       	ldi	r25, 0x0B	; 11
    7818:	d9 2e       	mov	r13, r25
	}

#endif


void ProcessMusic(void){
    781a:	c9 e3       	ldi	r28, 0x39	; 57
    781c:	db e0       	ldi	r29, 0x0B	; 11
    781e:	e1 2c       	mov	r14, r1
    7820:	f1 2c       	mov	r15, r1
    7822:	91 2c       	mov	r9, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7824:	aa 24       	eor	r10, r10
    7826:	aa 94       	dec	r10
    7828:	b1 2c       	mov	r11, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    782a:	88 81       	ld	r24, Y
    782c:	86 fd       	sbrc	r24, 6
    782e:	4d c0       	rjmp	.+154    	; 0x78ca <ProcessMusic+0x2fe>

			if(track->patchCommandStreamPos!=NULL && 
    7830:	8c 89       	ldd	r24, Y+20	; 0x14
    7832:	9d 89       	ldd	r25, Y+21	; 0x15
    7834:	87 01       	movw	r16, r14
    7836:	07 5c       	subi	r16, 0xC7	; 199
    7838:	14 4f       	sbci	r17, 0xF4	; 244
    783a:	89 2b       	or	r24, r25
    783c:	09 f4       	brne	.+2      	; 0x7840 <ProcessMusic+0x274>
    783e:	3e c0       	rjmp	.+124    	; 0x78bc <ProcessMusic+0x2f0>
    7840:	d8 01       	movw	r26, r16
    7842:	52 96       	adiw	r26, 0x12	; 18
    7844:	9c 91       	ld	r25, X
    7846:	52 97       	sbiw	r26, 0x12	; 18
    7848:	51 96       	adiw	r26, 0x11	; 17
    784a:	8c 91       	ld	r24, X
    784c:	98 17       	cp	r25, r24
    784e:	08 f4       	brcc	.+2      	; 0x7852 <ProcessMusic+0x286>
    7850:	35 c0       	rjmp	.+106    	; 0x78bc <ProcessMusic+0x2f0>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7852:	f8 01       	movw	r30, r16
    7854:	92 89       	ldd	r25, Z+18	; 0x12
    7856:	81 89       	ldd	r24, Z+17	; 0x11
    7858:	98 13       	cpse	r25, r24
    785a:	30 c0       	rjmp	.+96     	; 0x78bc <ProcessMusic+0x2f0>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    785c:	ec 89       	ldd	r30, Y+20	; 0x14
    785e:	fd 89       	ldd	r31, Y+21	; 0x15
    7860:	af 01       	movw	r20, r30
    7862:	4f 5f       	subi	r20, 0xFF	; 255
    7864:	5f 4f       	sbci	r21, 0xFF	; 255
    7866:	5d 8b       	std	Y+21, r21	; 0x15
    7868:	4c 8b       	std	Y+20, r20	; 0x14
    786a:	24 91       	lpm	r18, Z
					if(c1==0xff){					
    786c:	2f 3f       	cpi	r18, 0xFF	; 255
    786e:	31 f4       	brne	.+12     	; 0x787c <ProcessMusic+0x2b0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7870:	88 81       	ld	r24, Y
    7872:	8f 77       	andi	r24, 0x7F	; 127
    7874:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    7876:	1d 8a       	std	Y+21, r1	; 0x15
    7878:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    787a:	20 c0       	rjmp	.+64     	; 0x78bc <ProcessMusic+0x2f0>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    787c:	cf 01       	movw	r24, r30
    787e:	02 96       	adiw	r24, 0x02	; 2
    7880:	9d 8b       	std	Y+21, r25	; 0x15
    7882:	8c 8b       	std	Y+20, r24	; 0x14
    7884:	fa 01       	movw	r30, r20
    7886:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    7888:	e2 2f       	mov	r30, r18
    788a:	f0 e0       	ldi	r31, 0x00	; 0
    788c:	ee 0f       	add	r30, r30
    788e:	ff 1f       	adc	r31, r31
    7890:	e0 53       	subi	r30, 0x30	; 48
    7892:	ff 4f       	sbci	r31, 0xFF	; 255
    7894:	25 91       	lpm	r18, Z+
    7896:	34 91       	lpm	r19, Z
    7898:	69 2d       	mov	r22, r9
    789a:	ce 01       	movw	r24, r28
    789c:	f9 01       	movw	r30, r18
    789e:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    78a0:	ec 89       	ldd	r30, Y+20	; 0x14
    78a2:	fd 89       	ldd	r31, Y+21	; 0x15
    78a4:	cf 01       	movw	r24, r30
    78a6:	01 96       	adiw	r24, 0x01	; 1
    78a8:	9d 8b       	std	Y+21, r25	; 0x15
    78aa:	8c 8b       	std	Y+20, r24	; 0x14
    78ac:	e4 91       	lpm	r30, Z
    78ae:	d8 01       	movw	r26, r16
    78b0:	51 96       	adiw	r26, 0x11	; 17
    78b2:	ec 93       	st	X, r30
    78b4:	51 97       	sbiw	r26, 0x11	; 17
					
					track->patchCurrDeltaTime=0;	
    78b6:	52 96       	adiw	r26, 0x12	; 18
    78b8:	1c 92       	st	X, r1
    78ba:	cb cf       	rjmp	.-106    	; 0x7852 <ProcessMusic+0x286>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    78bc:	d8 01       	movw	r26, r16
    78be:	52 96       	adiw	r26, 0x12	; 18
    78c0:	8c 91       	ld	r24, X
    78c2:	52 97       	sbiw	r26, 0x12	; 18
    78c4:	8f 5f       	subi	r24, 0xFF	; 255
    78c6:	52 96       	adiw	r26, 0x12	; 18
    78c8:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    78ca:	88 81       	ld	r24, Y
    78cc:	85 ff       	sbrs	r24, 5
    78ce:	74 c0       	rjmp	.+232    	; 0x79b8 <ProcessMusic+0x3ec>
    78d0:	d7 01       	movw	r26, r14
    78d2:	a7 5c       	subi	r26, 0xC7	; 199
    78d4:	b4 4f       	sbci	r27, 0xF4	; 244
		
			if(track->patchPlayingTime<0xff){
    78d6:	53 96       	adiw	r26, 0x13	; 19
    78d8:	9c 91       	ld	r25, X
    78da:	53 97       	sbiw	r26, 0x13	; 19
    78dc:	9f 3f       	cpi	r25, 0xFF	; 255
    78de:	21 f0       	breq	.+8      	; 0x78e8 <ProcessMusic+0x31c>
				track->patchPlayingTime++;
    78e0:	9f 5f       	subi	r25, 0xFF	; 255
    78e2:	53 96       	adiw	r26, 0x13	; 19
    78e4:	9c 93       	st	X, r25
    78e6:	53 97       	sbiw	r26, 0x13	; 19
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    78e8:	87 fd       	sbrc	r24, 7
    78ea:	04 c0       	rjmp	.+8      	; 0x78f4 <ProcessMusic+0x328>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    78ec:	1a 96       	adiw	r26, 0x0a	; 10
    78ee:	8c 91       	ld	r24, X
    78f0:	1a 97       	sbiw	r26, 0x0a	; 10
    78f2:	01 c0       	rjmp	.+2      	; 0x78f6 <ProcessMusic+0x32a>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    78f4:	8f ef       	ldi	r24, 0xFF	; 255
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    78f6:	1b 96       	adiw	r26, 0x0b	; 11
    78f8:	2c 91       	ld	r18, X
    78fa:	1b 97       	sbiw	r26, 0x0b	; 11
    78fc:	16 96       	adiw	r26, 0x06	; 6
    78fe:	6c 91       	ld	r22, X
    7900:	16 97       	sbiw	r26, 0x06	; 6
    7902:	22 23       	and	r18, r18
    7904:	09 f4       	brne	.+2      	; 0x7908 <ProcessMusic+0x33c>
    7906:	4f c0       	rjmp	.+158    	; 0x79a6 <ProcessMusic+0x3da>
    7908:	1c 96       	adiw	r26, 0x0c	; 12
    790a:	5c 91       	ld	r21, X
    790c:	1c 97       	sbiw	r26, 0x0c	; 12
    790e:	55 23       	and	r21, r21
    7910:	09 f4       	brne	.+2      	; 0x7914 <ProcessMusic+0x348>
    7912:	49 c0       	rjmp	.+146    	; 0x79a6 <ProcessMusic+0x3da>
    7914:	88 23       	and	r24, r24
    7916:	09 f4       	brne	.+2      	; 0x791a <ProcessMusic+0x34e>
    7918:	46 c0       	rjmp	.+140    	; 0x79a6 <ProcessMusic+0x3da>
    791a:	40 91 ac 0b 	lds	r20, 0x0BAC
    791e:	44 23       	and	r20, r20
    7920:	09 f4       	brne	.+2      	; 0x7924 <ProcessMusic+0x358>
    7922:	41 c0       	rjmp	.+130    	; 0x79a6 <ProcessMusic+0x3da>

				uVol=(track->noteVol*trackVol)+0x100;
    7924:	28 9f       	mul	r18, r24
    7926:	90 01       	movw	r18, r0
    7928:	11 24       	eor	r1, r1
    792a:	33 95       	inc	r19
				uVol>>=8;
    792c:	23 2f       	mov	r18, r19
    792e:	33 27       	eor	r19, r19
				uVol=(uVol*track->envelopeVol)+0x100;
    7930:	52 9f       	mul	r21, r18
    7932:	c0 01       	movw	r24, r0
    7934:	53 9f       	mul	r21, r19
    7936:	90 0d       	add	r25, r0
    7938:	11 24       	eor	r1, r1
    793a:	93 95       	inc	r25
				uVol>>=8;
    793c:	89 2f       	mov	r24, r25
    793e:	99 27       	eor	r25, r25
				uVol=(uVol*track->expressionVol)+0x100;
    7940:	19 96       	adiw	r26, 0x09	; 9
    7942:	5c 91       	ld	r21, X
    7944:	19 97       	sbiw	r26, 0x09	; 9
    7946:	58 9f       	mul	r21, r24
    7948:	90 01       	movw	r18, r0
    794a:	59 9f       	mul	r21, r25
    794c:	30 0d       	add	r19, r0
    794e:	11 24       	eor	r1, r1
    7950:	33 95       	inc	r19
				uVol>>=8;
    7952:	23 2f       	mov	r18, r19
    7954:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7956:	42 9f       	mul	r20, r18
    7958:	c0 01       	movw	r24, r0
    795a:	43 9f       	mul	r20, r19
    795c:	90 0d       	add	r25, r0
    795e:	11 24       	eor	r1, r1
    7960:	93 95       	inc	r25
				uVol>>=8;
    7962:	89 2f       	mov	r24, r25
    7964:	99 27       	eor	r25, r25

				if(track->tremoloLevel>0){					
    7966:	17 96       	adiw	r26, 0x07	; 7
    7968:	2c 91       	ld	r18, X
    796a:	17 97       	sbiw	r26, 0x07	; 7
    796c:	22 23       	and	r18, r18
    796e:	e9 f0       	breq	.+58     	; 0x79aa <ProcessMusic+0x3de>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7970:	e6 2f       	mov	r30, r22
    7972:	f0 e0       	ldi	r31, 0x00	; 0
    7974:	e0 50       	subi	r30, 0x00	; 0
    7976:	f3 48       	sbci	r31, 0x83	; 131
    7978:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    797a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    797c:	2e 9f       	mul	r18, r30
    797e:	f0 01       	movw	r30, r0
    7980:	11 24       	eor	r1, r1
    7982:	f3 95       	inc	r31
					tVol>>=8;
    7984:	ef 2f       	mov	r30, r31
    7986:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7988:	a5 01       	movw	r20, r10
    798a:	4e 1b       	sub	r20, r30
    798c:	5f 0b       	sbc	r21, r31
    798e:	48 9f       	mul	r20, r24
    7990:	90 01       	movw	r18, r0
    7992:	49 9f       	mul	r20, r25
    7994:	30 0d       	add	r19, r0
    7996:	58 9f       	mul	r21, r24
    7998:	30 0d       	add	r19, r0
    799a:	11 24       	eor	r1, r1
    799c:	c9 01       	movw	r24, r18
    799e:	93 95       	inc	r25
					uVol>>=8;
    79a0:	89 2f       	mov	r24, r25
    79a2:	99 27       	eor	r25, r25
    79a4:	02 c0       	rjmp	.+4      	; 0x79aa <ProcessMusic+0x3de>
				}

			
			}else{
				uVol=0;
    79a6:	80 e0       	ldi	r24, 0x00	; 0
    79a8:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    79aa:	18 96       	adiw	r26, 0x08	; 8
    79ac:	2c 91       	ld	r18, X
    79ae:	18 97       	sbiw	r26, 0x08	; 8
    79b0:	26 0f       	add	r18, r22
    79b2:	16 96       	adiw	r26, 0x06	; 6
    79b4:	2c 93       	st	X, r18
    79b6:	02 c0       	rjmp	.+4      	; 0x79bc <ProcessMusic+0x3f0>

		}else{
			uVol=0;
    79b8:	80 e0       	ldi	r24, 0x00	; 0
    79ba:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    79bc:	f6 01       	movw	r30, r12
    79be:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    79c0:	93 94       	inc	r9
    79c2:	f6 e1       	ldi	r31, 0x16	; 22
    79c4:	ef 0e       	add	r14, r31
    79c6:	f1 1c       	adc	r15, r1
    79c8:	66 96       	adiw	r28, 0x16	; 22
    79ca:	86 e0       	ldi	r24, 0x06	; 6
    79cc:	c8 0e       	add	r12, r24
    79ce:	d1 1c       	adc	r13, r1
    79d0:	ae e6       	ldi	r26, 0x6E	; 110
    79d2:	ea 16       	cp	r14, r26
    79d4:	f1 04       	cpc	r15, r1
    79d6:	09 f0       	breq	.+2      	; 0x79da <ProcessMusic+0x40e>
    79d8:	28 cf       	rjmp	.-432    	; 0x782a <ProcessMusic+0x25e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    79da:	df 91       	pop	r29
    79dc:	cf 91       	pop	r28
    79de:	1f 91       	pop	r17
    79e0:	0f 91       	pop	r16
    79e2:	ff 90       	pop	r15
    79e4:	ef 90       	pop	r14
    79e6:	df 90       	pop	r13
    79e8:	cf 90       	pop	r12
    79ea:	bf 90       	pop	r11
    79ec:	af 90       	pop	r10
    79ee:	9f 90       	pop	r9
    79f0:	08 95       	ret

000079f2 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    79f2:	80 93 ac 0b 	sts	0x0BAC, r24
    79f6:	08 95       	ret

000079f8 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    79f8:	99 27       	eor	r25, r25
	clr r23
    79fa:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    79fc:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    79fe:	09 f4       	brne	.+2      	; 0x7a02 <set_note_waves>
		ret
    7a00:	08 95       	ret

00007a02 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7a02:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7a04:	fb e7       	ldi	r31, 0x7B	; 123
	lsl r22
    7a06:	66 0f       	add	r22, r22
	rol r23
    7a08:	77 1f       	adc	r23, r23
	add ZL,r22
    7a0a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7a0c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7a0e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7a10:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7a12:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a14:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a16:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7a18:	28 9f       	mul	r18, r24
	add ZL,r0
    7a1a:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a1c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7a1e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7a20:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7a22:	11 24       	eor	r1, r1
	

	ret
    7a24:	08 95       	ret

00007a26 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7a26:	99 27       	eor	r25, r25
	clr r23
    7a28:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7a2a:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a2c:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a2e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7a30:	28 9f       	mul	r18, r24
	add ZL,r0
    7a32:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a34:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7a36:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7a38:	31 f4       	brne	.+12     	; 0x7a46 <smw1>
	lds r22,tr4_params
    7a3a:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7a3e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7a40:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7a44:	0b c0       	rjmp	.+22     	; 0x7a5c <esmw>

00007a46 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7a46:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7a48:	31 f4       	brne	.+12     	; 0x7a56 <smw2>
	lds r22,tr4_params
    7a4a:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7a4e:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7a50:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7a54:	03 c0       	rjmp	.+6      	; 0x7a5c <esmw>

00007a56 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7a56:	7d e7       	ldi	r23, 0x7D	; 125
	add r23,r22
    7a58:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7a5a:	75 83       	std	Z+5, r23	; 0x05

00007a5c <esmw>:

esmw:
	clr r1	
    7a5c:	11 24       	eor	r1, r1
	ret
    7a5e:	08 95       	ret
	...

00007b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7b02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7b06:	08 95       	ret

00007b08 <steptable>:
    7b08:	22 00       	.word	0x0022	; ????
    7b0a:	24 00       	.word	0x0024	; ????
    7b0c:	26 00       	.word	0x0026	; ????
    7b0e:	28 00       	.word	0x0028	; ????
    7b10:	2b 00       	.word	0x002b	; ????
    7b12:	2d 00       	.word	0x002d	; ????
    7b14:	30 00       	.word	0x0030	; ????
    7b16:	33 00       	.word	0x0033	; ????
    7b18:	36 00       	.word	0x0036	; ????
    7b1a:	39 00       	.word	0x0039	; ????
    7b1c:	3d 00       	.word	0x003d	; ????
    7b1e:	40 00       	.word	0x0040	; ????
    7b20:	44 00       	.word	0x0044	; ????
    7b22:	48 00       	.word	0x0048	; ????
    7b24:	4c 00       	.word	0x004c	; ????
    7b26:	51 00       	.word	0x0051	; ????
    7b28:	56 00       	.word	0x0056	; ????
    7b2a:	5b 00       	.word	0x005b	; ????
    7b2c:	60 00       	.word	0x0060	; ????
    7b2e:	66 00       	.word	0x0066	; ????
    7b30:	6c 00       	.word	0x006c	; ????
    7b32:	73 00       	.word	0x0073	; ????
    7b34:	79 00       	.word	0x0079	; ????
    7b36:	81 00       	.word	0x0081	; ????
    7b38:	88 00       	.word	0x0088	; ????
    7b3a:	90 00       	.word	0x0090	; ????
    7b3c:	99 00       	.word	0x0099	; ????
    7b3e:	a2 00       	.word	0x00a2	; ????
    7b40:	ac 00       	.word	0x00ac	; ????
    7b42:	b6 00       	.word	0x00b6	; ????
    7b44:	c1 00       	.word	0x00c1	; ????
    7b46:	cc 00       	.word	0x00cc	; ????
    7b48:	d8 00       	.word	0x00d8	; ????
    7b4a:	e5 00       	.word	0x00e5	; ????
    7b4c:	f3 00       	.word	0x00f3	; ????
    7b4e:	01 01       	movw	r0, r2
    7b50:	10 01       	movw	r2, r0
    7b52:	21 01       	movw	r4, r2
    7b54:	32 01       	movw	r6, r4
    7b56:	44 01       	movw	r8, r8
    7b58:	57 01       	movw	r10, r14
    7b5a:	6c 01       	movw	r12, r24
    7b5c:	81 01       	movw	r16, r2
    7b5e:	98 01       	movw	r18, r16
    7b60:	b0 01       	movw	r22, r0
    7b62:	ca 01       	movw	r24, r20
    7b64:	e5 01       	movw	r28, r10
    7b66:	02 02       	muls	r16, r18
    7b68:	21 02       	muls	r18, r17
    7b6a:	41 02       	muls	r20, r17
    7b6c:	64 02       	muls	r22, r20
    7b6e:	88 02       	muls	r24, r24
    7b70:	ae 02       	muls	r26, r30
    7b72:	d7 02       	muls	r29, r23
    7b74:	03 03       	mulsu	r16, r19
    7b76:	30 03       	mulsu	r19, r16
    7b78:	61 03       	mulsu	r22, r17
    7b7a:	94 03       	fmuls	r17, r20
    7b7c:	cb 03       	fmulsu	r20, r19
    7b7e:	05 04       	cpc	r0, r5
    7b80:	42 04       	cpc	r4, r2
    7b82:	83 04       	cpc	r8, r3
    7b84:	c7 04       	cpc	r12, r7
    7b86:	10 05       	cpc	r17, r0
    7b88:	5d 05       	cpc	r21, r13
    7b8a:	af 05       	cpc	r26, r15
    7b8c:	05 06       	cpc	r0, r21
    7b8e:	61 06       	cpc	r6, r17
    7b90:	c2 06       	cpc	r12, r18
    7b92:	29 07       	cpc	r18, r25
    7b94:	96 07       	cpc	r25, r22
    7b96:	09 08       	sbc	r0, r9
    7b98:	83 08       	sbc	r8, r3
    7b9a:	05 09       	sbc	r16, r5
    7b9c:	8e 09       	sbc	r24, r14
    7b9e:	20 0a       	sbc	r2, r16
    7ba0:	ba 0a       	sbc	r11, r26
    7ba2:	5d 0b       	sbc	r21, r29
    7ba4:	0a 0c       	add	r0, r10
    7ba6:	c1 0c       	add	r12, r1
    7ba8:	84 0d       	add	r24, r4
    7baa:	51 0e       	add	r5, r17
    7bac:	2b 0f       	add	r18, r27
    7bae:	12 10       	cpse	r1, r2
    7bb0:	07 11       	cpse	r16, r7
    7bb2:	0a 12       	cpse	r0, r26
    7bb4:	1d 13       	cpse	r17, r29
    7bb6:	40 14       	cp	r4, r0
    7bb8:	74 15       	cp	r23, r4
    7bba:	ba 16       	cp	r11, r26
    7bbc:	14 18       	sub	r1, r4
    7bbe:	83 19       	sub	r24, r3
    7bc0:	07 1b       	sub	r16, r23
    7bc2:	a3 1c       	adc	r10, r3
    7bc4:	57 1e       	adc	r5, r23
    7bc6:	24 20       	and	r2, r4
    7bc8:	0e 22       	and	r0, r30
    7bca:	14 24       	eor	r1, r4
    7bcc:	39 26       	eor	r3, r25
    7bce:	7f 28       	or	r7, r15
    7bd0:	e8 2a       	or	r14, r24
    7bd2:	75 2d       	mov	r23, r5
    7bd4:	29 30       	cpi	r18, 0x09	; 9
    7bd6:	06 33       	cpi	r16, 0x36	; 54
    7bd8:	0f 36       	cpi	r16, 0x6F	; 111
    7bda:	45 39       	cpi	r20, 0x95	; 149
    7bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7bde:	49 40       	sbci	r20, 0x09	; 9
    7be0:	1b 44       	sbci	r17, 0x4B	; 75
    7be2:	28 48       	sbci	r18, 0x88	; 136
    7be4:	73 4c       	sbci	r23, 0xC3	; 195
    7be6:	fe 50       	subi	r31, 0x0E	; 14
    7be8:	cf 55       	subi	r28, 0x5F	; 95
    7bea:	ea 5a       	subi	r30, 0xAA	; 170
    7bec:	51 60       	ori	r21, 0x01	; 1
    7bee:	0c 66       	ori	r16, 0x6C	; 108
    7bf0:	1d 6c       	ori	r17, 0xCD	; 205
    7bf2:	8b 72       	andi	r24, 0x2B	; 43
    7bf4:	5a 79       	andi	r21, 0x9A	; 154
    7bf6:	92 80       	ldd	r9, Z+2	; 0x02
    7bf8:	37 88       	ldd	r3, Z+23	; 0x17
    7bfa:	50 90 e5 98 	lds	r5, 0x98E5
    7bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7c00:	9f ab       	std	Y+55, r25	; 0x37
    7c02:	d3 b5       	in	r29, 0x23	; 35
    7c04:	a3 c0       	rjmp	.+326    	; 0x7d4c <waves+0x4c>
	...

00007d00 <waves>:
    7d00:	00 03       	mulsu	r16, r16
    7d02:	06 09       	sbc	r16, r6
    7d04:	0c 10       	cpse	r0, r12
    7d06:	13 16       	cp	r1, r19
    7d08:	19 1c       	adc	r1, r9
    7d0a:	1f 22       	and	r1, r31
    7d0c:	25 28       	or	r2, r5
    7d0e:	2b 2e       	mov	r2, r27
    7d10:	31 33       	cpi	r19, 0x31	; 49
    7d12:	36 39       	cpi	r19, 0x96	; 150
    7d14:	3c 3f       	cpi	r19, 0xFC	; 252
    7d16:	41 44       	sbci	r20, 0x41	; 65
    7d18:	47 49       	sbci	r20, 0x97	; 151
    7d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7d1c:	51 53       	subi	r21, 0x31	; 49
    7d1e:	55 58       	subi	r21, 0x85	; 133
    7d20:	5a 5c       	subi	r21, 0xCA	; 202
    7d22:	5e 60       	ori	r21, 0x0E	; 14
    7d24:	62 64       	ori	r22, 0x42	; 66
    7d26:	66 68       	ori	r22, 0x86	; 134
    7d28:	6a 6b       	ori	r22, 0xBA	; 186
    7d2a:	6d 6f       	ori	r22, 0xFD	; 253
    7d2c:	70 71       	andi	r23, 0x10	; 16
    7d2e:	73 74       	andi	r23, 0x43	; 67
    7d30:	75 76       	andi	r23, 0x65	; 101
    7d32:	78 79       	andi	r23, 0x98	; 152
    7d34:	7a 7a       	andi	r23, 0xAA	; 170
    7d36:	7b 7c       	andi	r23, 0xCB	; 203
    7d38:	7d 7d       	andi	r23, 0xDD	; 221
    7d3a:	7e 7e       	andi	r23, 0xEE	; 238
    7d3c:	7e 7f       	andi	r23, 0xFE	; 254
    7d3e:	7f 7f       	andi	r23, 0xFF	; 255
    7d40:	7f 7f       	andi	r23, 0xFF	; 255
    7d42:	7f 7f       	andi	r23, 0xFF	; 255
    7d44:	7e 7e       	andi	r23, 0xEE	; 238
    7d46:	7e 7d       	andi	r23, 0xDE	; 222
    7d48:	7d 7c       	andi	r23, 0xCD	; 205
    7d4a:	7b 7a       	andi	r23, 0xAB	; 171
    7d4c:	7a 79       	andi	r23, 0x9A	; 154
    7d4e:	78 76       	andi	r23, 0x68	; 104
    7d50:	75 74       	andi	r23, 0x45	; 69
    7d52:	73 71       	andi	r23, 0x13	; 19
    7d54:	70 6f       	ori	r23, 0xF0	; 240
    7d56:	6d 6b       	ori	r22, 0xBD	; 189
    7d58:	6a 68       	ori	r22, 0x8A	; 138
    7d5a:	66 64       	ori	r22, 0x46	; 70
    7d5c:	62 60       	ori	r22, 0x02	; 2
    7d5e:	5e 5c       	subi	r21, 0xCE	; 206
    7d60:	5a 58       	subi	r21, 0x8A	; 138
    7d62:	55 53       	subi	r21, 0x35	; 53
    7d64:	51 4e       	sbci	r21, 0xE1	; 225
    7d66:	4c 49       	sbci	r20, 0x9C	; 156
    7d68:	47 44       	sbci	r20, 0x47	; 71
    7d6a:	41 3f       	cpi	r20, 0xF1	; 241
    7d6c:	3c 39       	cpi	r19, 0x9C	; 156
    7d6e:	36 33       	cpi	r19, 0x36	; 54
    7d70:	31 2e       	mov	r3, r17
    7d72:	2b 28       	or	r2, r11
    7d74:	25 22       	and	r2, r21
    7d76:	1f 1c       	adc	r1, r15
    7d78:	19 16       	cp	r1, r25
    7d7a:	13 10       	cpse	r1, r3
    7d7c:	0c 09       	sbc	r16, r12
    7d7e:	06 03       	mulsu	r16, r22
    7d80:	00 fd       	sbrc	r16, 0
    7d82:	fa f7       	brpl	.-2      	; 0x7d82 <waves+0x82>
    7d84:	f4 f0       	brlt	.+60     	; 0x7dc2 <waves+0xc2>
    7d86:	ed ea       	ldi	r30, 0xAD	; 173
    7d88:	e7 e4       	ldi	r30, 0x47	; 71
    7d8a:	e1 de       	rcall	.-574    	; 0x7b4e <steptable+0x46>
    7d8c:	db d8       	rcall	.-3658   	; 0x6f44 <ch4_end+0x96>
    7d8e:	d5 d2       	rcall	.+1450   	; 0x833a <waves+0x63a>
    7d90:	cf cd       	rjmp	.-1122   	; 0x7930 <ProcessMusic+0x364>
    7d92:	ca c7       	rjmp	.+3988   	; 0x8d28 <LBPrintStr+0x24>
    7d94:	c4 c1       	rjmp	.+904    	; 0x811e <waves+0x41e>
    7d96:	bf bc       	out	0x2f, r11	; 47
    7d98:	b9 b7       	in	r27, 0x39	; 57
    7d9a:	b4 b2       	in	r11, 0x14	; 20
    7d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7da4:	9e 9c       	mul	r9, r14
    7da6:	9a 98       	cbi	0x13, 2	; 19
    7da8:	96 95       	lsr	r25
    7daa:	93 91       	.word	0x9193	; ????
    7dac:	90 8f       	std	Z+24, r25	; 0x18
    7dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7db0:	8b 8a       	std	Y+19, r8	; 0x13
    7db2:	88 87       	std	Y+8, r24	; 0x08
    7db4:	86 86       	std	Z+14, r8	; 0x0e
    7db6:	85 84       	ldd	r8, Z+13	; 0x0d
    7db8:	83 83       	std	Z+3, r24	; 0x03
    7dba:	82 82       	std	Z+2, r8	; 0x02
    7dbc:	82 81       	ldd	r24, Z+2	; 0x02
    7dbe:	81 81       	ldd	r24, Z+1	; 0x01
    7dc0:	81 81       	ldd	r24, Z+1	; 0x01
    7dc2:	81 81       	ldd	r24, Z+1	; 0x01
    7dc4:	82 82       	std	Z+2, r8	; 0x02
    7dc6:	82 83       	std	Z+2, r24	; 0x02
    7dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    7dca:	85 86       	std	Z+13, r8	; 0x0d
    7dcc:	86 87       	std	Z+14, r24	; 0x0e
    7dce:	88 8a       	std	Y+16, r8	; 0x10
    7dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7dd4:	90 91 93 95 	lds	r25, 0x9593
    7dd8:	96 98       	cbi	0x12, 6	; 18
    7dda:	9a 9c       	mul	r9, r10
    7ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    7dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7de4:	af b2       	in	r10, 0x1f	; 31
    7de6:	b4 b7       	in	r27, 0x34	; 52
    7de8:	b9 bc       	out	0x29, r11	; 41
    7dea:	bf c1       	rjmp	.+894    	; 0x816a <waves+0x46a>
    7dec:	c4 c7       	rjmp	.+3976   	; 0x8d76 <LBCollides+0x10>
    7dee:	ca cd       	rjmp	.-1132   	; 0x7984 <ProcessMusic+0x3b8>
    7df0:	cf d2       	rcall	.+1438   	; 0x8390 <waves+0x690>
    7df2:	d5 d8       	rcall	.-3670   	; 0x6f9e <GetVsyncFlag+0x6>
    7df4:	db de       	rcall	.-586    	; 0x7bac <steptable+0xa4>
    7df6:	e1 e4       	ldi	r30, 0x41	; 65
    7df8:	e7 ea       	ldi	r30, 0xA7	; 167
    7dfa:	ed f0       	brhs	.+58     	; 0x7e36 <waves+0x136>
    7dfc:	f4 f7       	brge	.-4      	; 0x7dfa <waves+0xfa>
    7dfe:	fa fd       	.word	0xfdfa	; ????
    7e00:	80 81       	ld	r24, Z
    7e02:	82 83       	std	Z+2, r24	; 0x02
    7e04:	84 85       	ldd	r24, Z+12	; 0x0c
    7e06:	86 87       	std	Z+14, r24	; 0x0e
    7e08:	88 89       	ldd	r24, Y+16	; 0x10
    7e0a:	8a 8b       	std	Y+18, r24	; 0x12
    7e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7e10:	90 91 92 93 	lds	r25, 0x9392
    7e14:	94 95       	.word	0x9594	; ????
    7e16:	96 97       	sbiw	r26, 0x26	; 38
    7e18:	98 99       	sbic	0x13, 0	; 19
    7e1a:	9a 9b       	sbis	0x13, 2	; 19
    7e1c:	9c 9d       	mul	r25, r12
    7e1e:	9e 9f       	mul	r25, r30
    7e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e22:	a2 a3       	std	Z+34, r26	; 0x22
    7e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7e26:	a6 a7       	std	Z+46, r26	; 0x2e
    7e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7e2a:	aa ab       	std	Y+50, r26	; 0x32
    7e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7e2e:	ae af       	std	Y+62, r26	; 0x3e
    7e30:	b0 b1       	in	r27, 0x00	; 0
    7e32:	b2 b3       	in	r27, 0x12	; 18
    7e34:	b4 b5       	in	r27, 0x24	; 36
    7e36:	b6 b7       	in	r27, 0x36	; 54
    7e38:	b8 b9       	out	0x08, r27	; 8
    7e3a:	ba bb       	out	0x1a, r27	; 26
    7e3c:	bc bd       	out	0x2c, r27	; 44
    7e3e:	be bf       	out	0x3e, r27	; 62
    7e40:	c0 c1       	rjmp	.+896    	; 0x81c2 <waves+0x4c2>
    7e42:	c2 c3       	rjmp	.+1924   	; 0x85c8 <waves+0x8c8>
    7e44:	c4 c5       	rjmp	.+2952   	; 0x89ce <MoveSprite+0x32>
    7e46:	c6 c7       	rjmp	.+3980   	; 0x8dd4 <LBLineIntersect+0x1a>
    7e48:	c8 c9       	rjmp	.-3184   	; 0x71da <EepromWriteBlock+0xce>
    7e4a:	ca cb       	rjmp	.-2156   	; 0x75e0 <ProcessMusic+0x14>
    7e4c:	cc cd       	rjmp	.-1128   	; 0x79e6 <ProcessMusic+0x41a>
    7e4e:	ce cf       	rjmp	.-100    	; 0x7dec <waves+0xec>
    7e50:	d0 d1       	rcall	.+928    	; 0x81f2 <waves+0x4f2>
    7e52:	d2 d3       	rcall	.+1956   	; 0x85f8 <waves+0x8f8>
    7e54:	d4 d5       	rcall	.+2984   	; 0x89fe <MoveSprite+0x62>
    7e56:	d6 d7       	rcall	.+4012   	; 0x8e04 <LBLineIntersect+0x4a>
    7e58:	d8 d9       	rcall	.-3152   	; 0x720a <EepromReadBlock+0x26>
    7e5a:	da db       	rcall	.-2124   	; 0x7610 <ProcessMusic+0x44>
    7e5c:	dc dd       	rcall	.-1096   	; 0x7a16 <set_note_waves+0x14>
    7e5e:	de df       	rcall	.-68     	; 0x7e1c <waves+0x11c>
    7e60:	e0 e1       	ldi	r30, 0x10	; 16
    7e62:	e2 e3       	ldi	r30, 0x32	; 50
    7e64:	e4 e5       	ldi	r30, 0x54	; 84
    7e66:	e6 e7       	ldi	r30, 0x76	; 118
    7e68:	e8 e9       	ldi	r30, 0x98	; 152
    7e6a:	ea eb       	ldi	r30, 0xBA	; 186
    7e6c:	ec ed       	ldi	r30, 0xDC	; 220
    7e6e:	ee ef       	ldi	r30, 0xFE	; 254
    7e70:	f0 f1       	brcs	.+124    	; 0x7eee <waves+0x1ee>
    7e72:	f2 f3       	brmi	.-4      	; 0x7e70 <waves+0x170>
    7e74:	f4 f5       	brge	.+124    	; 0x7ef2 <waves+0x1f2>
    7e76:	f6 f7       	brtc	.-4      	; 0x7e74 <waves+0x174>
    7e78:	f8 f9       	.word	0xf9f8	; ????
    7e7a:	fa fb       	.word	0xfbfa	; ????
    7e7c:	fc fd       	.word	0xfdfc	; ????
    7e7e:	fe ff       	.word	0xfffe	; ????
    7e80:	00 01       	movw	r0, r0
    7e82:	02 03       	mulsu	r16, r18
    7e84:	04 05       	cpc	r16, r4
    7e86:	06 07       	cpc	r16, r22
    7e88:	08 09       	sbc	r16, r8
    7e8a:	0a 0b       	sbc	r16, r26
    7e8c:	0c 0d       	add	r16, r12
    7e8e:	0e 0f       	add	r16, r30
    7e90:	10 11       	cpse	r17, r0
    7e92:	12 13       	cpse	r17, r18
    7e94:	14 15       	cp	r17, r4
    7e96:	16 17       	cp	r17, r22
    7e98:	18 19       	sub	r17, r8
    7e9a:	1a 1b       	sub	r17, r26
    7e9c:	1c 1d       	adc	r17, r12
    7e9e:	1e 1f       	adc	r17, r30
    7ea0:	20 21       	and	r18, r0
    7ea2:	22 23       	and	r18, r18
    7ea4:	24 25       	eor	r18, r4
    7ea6:	26 27       	eor	r18, r22
    7ea8:	28 29       	or	r18, r8
    7eaa:	2a 2b       	or	r18, r26
    7eac:	2c 2d       	mov	r18, r12
    7eae:	2e 2f       	mov	r18, r30
    7eb0:	30 31       	cpi	r19, 0x10	; 16
    7eb2:	32 33       	cpi	r19, 0x32	; 50
    7eb4:	34 35       	cpi	r19, 0x54	; 84
    7eb6:	36 37       	cpi	r19, 0x76	; 118
    7eb8:	38 39       	cpi	r19, 0x98	; 152
    7eba:	3a 3b       	cpi	r19, 0xBA	; 186
    7ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    7ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    7ec0:	40 41       	sbci	r20, 0x10	; 16
    7ec2:	42 43       	sbci	r20, 0x32	; 50
    7ec4:	44 45       	sbci	r20, 0x54	; 84
    7ec6:	46 47       	sbci	r20, 0x76	; 118
    7ec8:	48 49       	sbci	r20, 0x98	; 152
    7eca:	4a 4b       	sbci	r20, 0xBA	; 186
    7ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    7ece:	4e 4f       	sbci	r20, 0xFE	; 254
    7ed0:	50 51       	subi	r21, 0x10	; 16
    7ed2:	52 53       	subi	r21, 0x32	; 50
    7ed4:	54 55       	subi	r21, 0x54	; 84
    7ed6:	56 57       	subi	r21, 0x76	; 118
    7ed8:	58 59       	subi	r21, 0x98	; 152
    7eda:	5a 5b       	subi	r21, 0xBA	; 186
    7edc:	5c 5d       	subi	r21, 0xDC	; 220
    7ede:	5e 5f       	subi	r21, 0xFE	; 254
    7ee0:	60 61       	ori	r22, 0x10	; 16
    7ee2:	62 63       	ori	r22, 0x32	; 50
    7ee4:	64 65       	ori	r22, 0x54	; 84
    7ee6:	66 67       	ori	r22, 0x76	; 118
    7ee8:	68 69       	ori	r22, 0x98	; 152
    7eea:	6a 6b       	ori	r22, 0xBA	; 186
    7eec:	6c 6d       	ori	r22, 0xDC	; 220
    7eee:	6e 6f       	ori	r22, 0xFE	; 254
    7ef0:	70 71       	andi	r23, 0x10	; 16
    7ef2:	72 73       	andi	r23, 0x32	; 50
    7ef4:	74 75       	andi	r23, 0x54	; 84
    7ef6:	76 77       	andi	r23, 0x76	; 118
    7ef8:	78 79       	andi	r23, 0x98	; 152
    7efa:	7a 7b       	andi	r23, 0xBA	; 186
    7efc:	7c 7d       	andi	r23, 0xDC	; 220
    7efe:	7e 7f       	andi	r23, 0xFE	; 254
    7f00:	00 02       	muls	r16, r16
    7f02:	04 06       	cpc	r0, r20
    7f04:	08 0a       	sbc	r0, r24
    7f06:	0c 0e       	add	r0, r28
    7f08:	10 12       	cpse	r1, r16
    7f0a:	14 16       	cp	r1, r20
    7f0c:	18 1a       	sub	r1, r24
    7f0e:	1c 1e       	adc	r1, r28
    7f10:	20 22       	and	r2, r16
    7f12:	24 26       	eor	r2, r20
    7f14:	28 2a       	or	r2, r24
    7f16:	2c 2e       	mov	r2, r28
    7f18:	30 32       	cpi	r19, 0x20	; 32
    7f1a:	34 36       	cpi	r19, 0x64	; 100
    7f1c:	38 3a       	cpi	r19, 0xA8	; 168
    7f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    7f20:	40 42       	sbci	r20, 0x20	; 32
    7f22:	44 46       	sbci	r20, 0x64	; 100
    7f24:	48 4a       	sbci	r20, 0xA8	; 168
    7f26:	4c 4e       	sbci	r20, 0xEC	; 236
    7f28:	50 52       	subi	r21, 0x20	; 32
    7f2a:	54 56       	subi	r21, 0x64	; 100
    7f2c:	58 5a       	subi	r21, 0xA8	; 168
    7f2e:	5c 5e       	subi	r21, 0xEC	; 236
    7f30:	60 62       	ori	r22, 0x20	; 32
    7f32:	64 66       	ori	r22, 0x64	; 100
    7f34:	68 6a       	ori	r22, 0xA8	; 168
    7f36:	6c 6e       	ori	r22, 0xEC	; 236
    7f38:	70 72       	andi	r23, 0x20	; 32
    7f3a:	74 76       	andi	r23, 0x64	; 100
    7f3c:	78 7a       	andi	r23, 0xA8	; 168
    7f3e:	7c 7e       	andi	r23, 0xEC	; 236
    7f40:	7f 7d       	andi	r23, 0xDF	; 223
    7f42:	7b 79       	andi	r23, 0x9B	; 155
    7f44:	77 75       	andi	r23, 0x57	; 87
    7f46:	73 71       	andi	r23, 0x13	; 19
    7f48:	6f 6d       	ori	r22, 0xDF	; 223
    7f4a:	6b 69       	ori	r22, 0x9B	; 155
    7f4c:	67 65       	ori	r22, 0x57	; 87
    7f4e:	63 61       	ori	r22, 0x13	; 19
    7f50:	5f 5d       	subi	r21, 0xDF	; 223
    7f52:	5b 59       	subi	r21, 0x9B	; 155
    7f54:	57 55       	subi	r21, 0x57	; 87
    7f56:	53 51       	subi	r21, 0x13	; 19
    7f58:	4f 4d       	sbci	r20, 0xDF	; 223
    7f5a:	4b 49       	sbci	r20, 0x9B	; 155
    7f5c:	47 45       	sbci	r20, 0x57	; 87
    7f5e:	43 41       	sbci	r20, 0x13	; 19
    7f60:	3f 3d       	cpi	r19, 0xDF	; 223
    7f62:	3b 39       	cpi	r19, 0x9B	; 155
    7f64:	37 35       	cpi	r19, 0x57	; 87
    7f66:	33 31       	cpi	r19, 0x13	; 19
    7f68:	2f 2d       	mov	r18, r15
    7f6a:	2b 29       	or	r18, r11
    7f6c:	27 25       	eor	r18, r7
    7f6e:	23 21       	and	r18, r3
    7f70:	1f 1d       	adc	r17, r15
    7f72:	1b 19       	sub	r17, r11
    7f74:	17 15       	cp	r17, r7
    7f76:	13 11       	cpse	r17, r3
    7f78:	0f 0d       	add	r16, r15
    7f7a:	0b 09       	sbc	r16, r11
    7f7c:	07 05       	cpc	r16, r7
    7f7e:	03 01       	movw	r0, r6
    7f80:	ff fd       	.word	0xfdff	; ????
    7f82:	fb f9       	.word	0xf9fb	; ????
    7f84:	f7 f5       	brid	.+124    	; 0x8002 <waves+0x302>
    7f86:	f3 f1       	brvs	.+124    	; 0x8004 <waves+0x304>
    7f88:	ef ed       	ldi	r30, 0xDF	; 223
    7f8a:	eb e9       	ldi	r30, 0x9B	; 155
    7f8c:	e7 e5       	ldi	r30, 0x57	; 87
    7f8e:	e3 e1       	ldi	r30, 0x13	; 19
    7f90:	df dd       	rcall	.-1090   	; 0x7b50 <steptable+0x48>
    7f92:	db d9       	rcall	.-3146   	; 0x734a <PatchCommand03+0xc>
    7f94:	d7 d5       	rcall	.+2990   	; 0x8b44 <Print+0x28>
    7f96:	d3 d1       	rcall	.+934    	; 0x833e <waves+0x63e>
    7f98:	cf cd       	rjmp	.-1122   	; 0x7b38 <steptable+0x30>
    7f9a:	cb c9       	rjmp	.-3178   	; 0x7332 <PatchCommand12+0x2>
    7f9c:	c7 c5       	rjmp	.+2958   	; 0x8b2c <Print+0x10>
    7f9e:	c3 c1       	rjmp	.+902    	; 0x8326 <waves+0x626>
    7fa0:	bf bd       	out	0x2f, r27	; 47
    7fa2:	bb b9       	out	0x0b, r27	; 11
    7fa4:	b7 b5       	in	r27, 0x27	; 39
    7fa6:	b3 b1       	in	r27, 0x03	; 3
    7fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    7faa:	ab a9       	ldd	r26, Y+51	; 0x33
    7fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    7fb0:	9f 9d       	mul	r25, r15
    7fb2:	9b 99       	sbic	0x13, 3	; 19
    7fb4:	97 95       	ror	r25
    7fb6:	93 91       	.word	0x9193	; ????
    7fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7fba:	8b 89       	ldd	r24, Y+19	; 0x13
    7fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    7fbe:	83 81       	ldd	r24, Z+3	; 0x03
    7fc0:	80 82       	st	Z, r8
    7fc2:	84 86       	std	Z+12, r8	; 0x0c
    7fc4:	88 8a       	std	Y+16, r8	; 0x10
    7fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    7fc8:	90 92 94 96 	sts	0x9694, r9
    7fcc:	98 9a       	sbi	0x13, 0	; 19
    7fce:	9c 9e       	mul	r9, r28
    7fd0:	a0 a2       	std	Z+32, r10	; 0x20
    7fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    7fd4:	a8 aa       	std	Y+48, r10	; 0x30
    7fd6:	ac ae       	std	Y+60, r10	; 0x3c
    7fd8:	b0 b2       	in	r11, 0x10	; 16
    7fda:	b4 b6       	in	r11, 0x34	; 52
    7fdc:	b8 ba       	out	0x18, r11	; 24
    7fde:	bc be       	out	0x3c, r11	; 60
    7fe0:	c0 c2       	rjmp	.+1408   	; 0x8562 <waves+0x862>
    7fe2:	c4 c6       	rjmp	.+3464   	; 0x8d6c <LBCollides+0x6>
    7fe4:	c8 ca       	rjmp	.-2672   	; 0x7576 <TriggerNote+0x1a>
    7fe6:	cc ce       	rjmp	.-616    	; 0x7d80 <waves+0x80>
    7fe8:	d0 d2       	rcall	.+1440   	; 0x858a <waves+0x88a>
    7fea:	d4 d6       	rcall	.+3496   	; 0x8d94 <LBCollides+0x2e>
    7fec:	d8 da       	rcall	.-2640   	; 0x759e <TriggerNote+0x42>
    7fee:	dc de       	rcall	.-584    	; 0x7da8 <waves+0xa8>
    7ff0:	e0 e2       	ldi	r30, 0x20	; 32
    7ff2:	e4 e6       	ldi	r30, 0x64	; 100
    7ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    7ff6:	ec ee       	ldi	r30, 0xEC	; 236
    7ff8:	f0 f2       	brcs	.-68     	; 0x7fb6 <waves+0x2b6>
    7ffa:	f4 f6       	brge	.-68     	; 0x7fb8 <waves+0x2b8>
    7ffc:	f8 fa       	.word	0xfaf8	; ????
    7ffe:	fc fe       	.word	0xfefc	; ????
    8000:	7f 7f       	andi	r23, 0xFF	; 255
    8002:	7f 7f       	andi	r23, 0xFF	; 255
    8004:	7f 7f       	andi	r23, 0xFF	; 255
    8006:	7f 7f       	andi	r23, 0xFF	; 255
    8008:	7f 7f       	andi	r23, 0xFF	; 255
    800a:	7f 7f       	andi	r23, 0xFF	; 255
    800c:	7f 7f       	andi	r23, 0xFF	; 255
    800e:	7f 7f       	andi	r23, 0xFF	; 255
    8010:	7f 7f       	andi	r23, 0xFF	; 255
    8012:	7f 7f       	andi	r23, 0xFF	; 255
    8014:	7f 7f       	andi	r23, 0xFF	; 255
    8016:	7f 7f       	andi	r23, 0xFF	; 255
    8018:	7f 7f       	andi	r23, 0xFF	; 255
    801a:	7f 7f       	andi	r23, 0xFF	; 255
    801c:	7f 7f       	andi	r23, 0xFF	; 255
    801e:	7f 7f       	andi	r23, 0xFF	; 255
    8020:	7f 7f       	andi	r23, 0xFF	; 255
    8022:	7f 7f       	andi	r23, 0xFF	; 255
    8024:	7f 7f       	andi	r23, 0xFF	; 255
    8026:	7f 7f       	andi	r23, 0xFF	; 255
    8028:	7f 7f       	andi	r23, 0xFF	; 255
    802a:	7f 7f       	andi	r23, 0xFF	; 255
    802c:	7f 7f       	andi	r23, 0xFF	; 255
    802e:	7f 7f       	andi	r23, 0xFF	; 255
    8030:	7f 7f       	andi	r23, 0xFF	; 255
    8032:	7f 7f       	andi	r23, 0xFF	; 255
    8034:	7f 7f       	andi	r23, 0xFF	; 255
    8036:	7f 7f       	andi	r23, 0xFF	; 255
    8038:	7f 7f       	andi	r23, 0xFF	; 255
    803a:	7f 7f       	andi	r23, 0xFF	; 255
    803c:	7f 7f       	andi	r23, 0xFF	; 255
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	80 80       	ld	r8, Z
    8042:	80 80       	ld	r8, Z
    8044:	80 80       	ld	r8, Z
    8046:	80 80       	ld	r8, Z
    8048:	80 80       	ld	r8, Z
    804a:	80 80       	ld	r8, Z
    804c:	80 80       	ld	r8, Z
    804e:	80 80       	ld	r8, Z
    8050:	80 80       	ld	r8, Z
    8052:	80 80       	ld	r8, Z
    8054:	80 80       	ld	r8, Z
    8056:	80 80       	ld	r8, Z
    8058:	80 80       	ld	r8, Z
    805a:	80 80       	ld	r8, Z
    805c:	80 80       	ld	r8, Z
    805e:	80 80       	ld	r8, Z
    8060:	80 80       	ld	r8, Z
    8062:	80 80       	ld	r8, Z
    8064:	80 80       	ld	r8, Z
    8066:	80 80       	ld	r8, Z
    8068:	80 80       	ld	r8, Z
    806a:	80 80       	ld	r8, Z
    806c:	80 80       	ld	r8, Z
    806e:	80 80       	ld	r8, Z
    8070:	80 80       	ld	r8, Z
    8072:	80 80       	ld	r8, Z
    8074:	80 80       	ld	r8, Z
    8076:	80 80       	ld	r8, Z
    8078:	80 80       	ld	r8, Z
    807a:	80 80       	ld	r8, Z
    807c:	80 80       	ld	r8, Z
    807e:	80 80       	ld	r8, Z
    8080:	80 80       	ld	r8, Z
    8082:	80 80       	ld	r8, Z
    8084:	80 80       	ld	r8, Z
    8086:	80 80       	ld	r8, Z
    8088:	80 80       	ld	r8, Z
    808a:	80 80       	ld	r8, Z
    808c:	80 80       	ld	r8, Z
    808e:	80 80       	ld	r8, Z
    8090:	80 80       	ld	r8, Z
    8092:	80 80       	ld	r8, Z
    8094:	80 80       	ld	r8, Z
    8096:	80 80       	ld	r8, Z
    8098:	80 80       	ld	r8, Z
    809a:	80 80       	ld	r8, Z
    809c:	80 80       	ld	r8, Z
    809e:	80 80       	ld	r8, Z
    80a0:	80 80       	ld	r8, Z
    80a2:	80 80       	ld	r8, Z
    80a4:	80 80       	ld	r8, Z
    80a6:	80 80       	ld	r8, Z
    80a8:	80 80       	ld	r8, Z
    80aa:	80 80       	ld	r8, Z
    80ac:	80 80       	ld	r8, Z
    80ae:	80 80       	ld	r8, Z
    80b0:	80 80       	ld	r8, Z
    80b2:	80 80       	ld	r8, Z
    80b4:	80 80       	ld	r8, Z
    80b6:	80 80       	ld	r8, Z
    80b8:	80 80       	ld	r8, Z
    80ba:	80 80       	ld	r8, Z
    80bc:	80 80       	ld	r8, Z
    80be:	80 80       	ld	r8, Z
    80c0:	80 80       	ld	r8, Z
    80c2:	80 80       	ld	r8, Z
    80c4:	80 80       	ld	r8, Z
    80c6:	80 80       	ld	r8, Z
    80c8:	80 80       	ld	r8, Z
    80ca:	80 80       	ld	r8, Z
    80cc:	80 80       	ld	r8, Z
    80ce:	80 80       	ld	r8, Z
    80d0:	80 80       	ld	r8, Z
    80d2:	80 80       	ld	r8, Z
    80d4:	80 80       	ld	r8, Z
    80d6:	80 80       	ld	r8, Z
    80d8:	80 80       	ld	r8, Z
    80da:	80 80       	ld	r8, Z
    80dc:	80 80       	ld	r8, Z
    80de:	80 80       	ld	r8, Z
    80e0:	80 80       	ld	r8, Z
    80e2:	80 80       	ld	r8, Z
    80e4:	80 80       	ld	r8, Z
    80e6:	80 80       	ld	r8, Z
    80e8:	80 80       	ld	r8, Z
    80ea:	80 80       	ld	r8, Z
    80ec:	80 80       	ld	r8, Z
    80ee:	80 80       	ld	r8, Z
    80f0:	80 80       	ld	r8, Z
    80f2:	80 80       	ld	r8, Z
    80f4:	80 80       	ld	r8, Z
    80f6:	80 80       	ld	r8, Z
    80f8:	80 80       	ld	r8, Z
    80fa:	80 80       	ld	r8, Z
    80fc:	80 80       	ld	r8, Z
    80fe:	80 80       	ld	r8, Z
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	7f 7f       	andi	r23, 0xFF	; 255
    8142:	7f 7f       	andi	r23, 0xFF	; 255
    8144:	7f 7f       	andi	r23, 0xFF	; 255
    8146:	7f 7f       	andi	r23, 0xFF	; 255
    8148:	7f 7f       	andi	r23, 0xFF	; 255
    814a:	7f 7f       	andi	r23, 0xFF	; 255
    814c:	7f 7f       	andi	r23, 0xFF	; 255
    814e:	7f 7f       	andi	r23, 0xFF	; 255
    8150:	7f 7f       	andi	r23, 0xFF	; 255
    8152:	7f 7f       	andi	r23, 0xFF	; 255
    8154:	7f 7f       	andi	r23, 0xFF	; 255
    8156:	7f 7f       	andi	r23, 0xFF	; 255
    8158:	7f 7f       	andi	r23, 0xFF	; 255
    815a:	7f 7f       	andi	r23, 0xFF	; 255
    815c:	7f 7f       	andi	r23, 0xFF	; 255
    815e:	7f 7f       	andi	r23, 0xFF	; 255
    8160:	7f 7f       	andi	r23, 0xFF	; 255
    8162:	7f 7f       	andi	r23, 0xFF	; 255
    8164:	7f 7f       	andi	r23, 0xFF	; 255
    8166:	7f 7f       	andi	r23, 0xFF	; 255
    8168:	7f 7f       	andi	r23, 0xFF	; 255
    816a:	7f 7f       	andi	r23, 0xFF	; 255
    816c:	7f 7f       	andi	r23, 0xFF	; 255
    816e:	7f 7f       	andi	r23, 0xFF	; 255
    8170:	7f 7f       	andi	r23, 0xFF	; 255
    8172:	7f 7f       	andi	r23, 0xFF	; 255
    8174:	7f 7f       	andi	r23, 0xFF	; 255
    8176:	7f 7f       	andi	r23, 0xFF	; 255
    8178:	7f 7f       	andi	r23, 0xFF	; 255
    817a:	7f 7f       	andi	r23, 0xFF	; 255
    817c:	7f 7f       	andi	r23, 0xFF	; 255
    817e:	7f 7f       	andi	r23, 0xFF	; 255
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	7f 7f       	andi	r23, 0xFF	; 255
    8282:	7f 7f       	andi	r23, 0xFF	; 255
    8284:	7f 7f       	andi	r23, 0xFF	; 255
    8286:	7f 7f       	andi	r23, 0xFF	; 255
    8288:	7f 7f       	andi	r23, 0xFF	; 255
    828a:	7f 7f       	andi	r23, 0xFF	; 255
    828c:	7f 7f       	andi	r23, 0xFF	; 255
    828e:	7f 7f       	andi	r23, 0xFF	; 255
    8290:	7f 7f       	andi	r23, 0xFF	; 255
    8292:	7f 7f       	andi	r23, 0xFF	; 255
    8294:	7f 7f       	andi	r23, 0xFF	; 255
    8296:	7f 7f       	andi	r23, 0xFF	; 255
    8298:	7f 7f       	andi	r23, 0xFF	; 255
    829a:	7f 7f       	andi	r23, 0xFF	; 255
    829c:	7f 7f       	andi	r23, 0xFF	; 255
    829e:	7f 7f       	andi	r23, 0xFF	; 255
    82a0:	7f 7f       	andi	r23, 0xFF	; 255
    82a2:	7f 7f       	andi	r23, 0xFF	; 255
    82a4:	7f 7f       	andi	r23, 0xFF	; 255
    82a6:	7f 7f       	andi	r23, 0xFF	; 255
    82a8:	7f 7f       	andi	r23, 0xFF	; 255
    82aa:	7f 7f       	andi	r23, 0xFF	; 255
    82ac:	7f 7f       	andi	r23, 0xFF	; 255
    82ae:	7f 7f       	andi	r23, 0xFF	; 255
    82b0:	7f 7f       	andi	r23, 0xFF	; 255
    82b2:	7f 7f       	andi	r23, 0xFF	; 255
    82b4:	7f 7f       	andi	r23, 0xFF	; 255
    82b6:	7f 7f       	andi	r23, 0xFF	; 255
    82b8:	7f 7f       	andi	r23, 0xFF	; 255
    82ba:	7f 7f       	andi	r23, 0xFF	; 255
    82bc:	7f 7f       	andi	r23, 0xFF	; 255
    82be:	7f 7f       	andi	r23, 0xFF	; 255
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	03 09       	sbc	r16, r3
    8302:	13 1e       	adc	r1, r19
    8304:	28 31       	cpi	r18, 0x18	; 24
    8306:	3a 40       	sbci	r19, 0x0A	; 10
    8308:	46 4c       	sbci	r20, 0xC6	; 198
    830a:	50 54       	subi	r21, 0x40	; 64
    830c:	58 5b       	subi	r21, 0xB8	; 184
    830e:	5e 61       	ori	r21, 0x1E	; 30
    8310:	63 65       	ori	r22, 0x53	; 83
    8312:	67 69       	ori	r22, 0x97	; 151
    8314:	6b 6c       	ori	r22, 0xCB	; 203
    8316:	6e 6f       	ori	r22, 0xFE	; 254
    8318:	70 71       	andi	r23, 0x10	; 16
    831a:	72 73       	andi	r23, 0x32	; 50
    831c:	74 75       	andi	r23, 0x54	; 84
    831e:	76 77       	andi	r23, 0x76	; 118
    8320:	77 78       	andi	r23, 0x87	; 135
    8322:	79 79       	andi	r23, 0x99	; 153
    8324:	7a 7a       	andi	r23, 0xAA	; 170
    8326:	7b 7b       	andi	r23, 0xBB	; 187
    8328:	7c 7c       	andi	r23, 0xCC	; 204
    832a:	7c 7d       	andi	r23, 0xDC	; 220
    832c:	7d 7d       	andi	r23, 0xDD	; 221
    832e:	7e 7e       	andi	r23, 0xEE	; 238
    8330:	7e 7e       	andi	r23, 0xEE	; 238
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7e       	andi	r23, 0xEF	; 239
    834e:	7e 7e       	andi	r23, 0xEE	; 238
    8350:	7e 7d       	andi	r23, 0xDE	; 222
    8352:	7d 7d       	andi	r23, 0xDD	; 221
    8354:	7c 7c       	andi	r23, 0xCC	; 204
    8356:	7c 7b       	andi	r23, 0xBC	; 188
    8358:	7b 7a       	andi	r23, 0xAB	; 171
    835a:	7a 79       	andi	r23, 0x9A	; 154
    835c:	79 78       	andi	r23, 0x89	; 137
    835e:	77 77       	andi	r23, 0x77	; 119
    8360:	76 75       	andi	r23, 0x56	; 86
    8362:	74 73       	andi	r23, 0x34	; 52
    8364:	72 71       	andi	r23, 0x12	; 18
    8366:	70 6f       	ori	r23, 0xF0	; 240
    8368:	6e 6c       	ori	r22, 0xCE	; 206
    836a:	6b 69       	ori	r22, 0x9B	; 155
    836c:	67 65       	ori	r22, 0x57	; 87
    836e:	63 61       	ori	r22, 0x13	; 19
    8370:	5e 5b       	subi	r21, 0xBE	; 190
    8372:	58 54       	subi	r21, 0x48	; 72
    8374:	50 4c       	sbci	r21, 0xC0	; 192
    8376:	46 40       	sbci	r20, 0x06	; 6
    8378:	3a 31       	cpi	r19, 0x1A	; 26
    837a:	28 1e       	adc	r2, r24
    837c:	13 09       	sbc	r17, r3
    837e:	03 00       	.word	0x0003	; ????
    8380:	c6 cc       	rjmp	.-1652   	; 0x7d0e <waves+0xe>
    8382:	d5 db       	rcall	.-2134   	; 0x7b2e <steptable+0x26>
    8384:	df e3       	ldi	r29, 0x3F	; 63
    8386:	e5 e7       	ldi	r30, 0x75	; 117
    8388:	e9 ea       	ldi	r30, 0xA9	; 169
    838a:	eb ec       	ldi	r30, 0xCB	; 203
    838c:	ed ee       	ldi	r30, 0xED	; 237
    838e:	ef ef       	ldi	r30, 0xFF	; 255
    8390:	f0 f0       	brcs	.+60     	; 0x83ce <waves+0x6ce>
    8392:	f0 f1       	brcs	.+124    	; 0x8410 <waves+0x710>
    8394:	f1 f1       	breq	.+124    	; 0x8412 <waves+0x712>
    8396:	f1 f2       	breq	.-68     	; 0x8354 <waves+0x654>
    8398:	f2 f2       	brmi	.-68     	; 0x8356 <waves+0x656>
    839a:	f2 f2       	brmi	.-68     	; 0x8358 <waves+0x658>
    839c:	f2 f2       	brmi	.-68     	; 0x835a <waves+0x65a>
    839e:	f2 f3       	brmi	.-4      	; 0x839c <waves+0x69c>
    83a0:	f3 f3       	brvs	.-4      	; 0x839e <waves+0x69e>
    83a2:	f3 f3       	brvs	.-4      	; 0x83a0 <waves+0x6a0>
    83a4:	f3 f3       	brvs	.-4      	; 0x83a2 <waves+0x6a2>
    83a6:	f3 f3       	brvs	.-4      	; 0x83a4 <waves+0x6a4>
    83a8:	f3 f3       	brvs	.-4      	; 0x83a6 <waves+0x6a6>
    83aa:	f3 f3       	brvs	.-4      	; 0x83a8 <waves+0x6a8>
    83ac:	f3 f3       	brvs	.-4      	; 0x83aa <waves+0x6aa>
    83ae:	f3 f3       	brvs	.-4      	; 0x83ac <waves+0x6ac>
    83b0:	f3 f3       	brvs	.-4      	; 0x83ae <waves+0x6ae>
    83b2:	f3 f3       	brvs	.-4      	; 0x83b0 <waves+0x6b0>
    83b4:	f3 f3       	brvs	.-4      	; 0x83b2 <waves+0x6b2>
    83b6:	f3 f3       	brvs	.-4      	; 0x83b4 <waves+0x6b4>
    83b8:	f3 f3       	brvs	.-4      	; 0x83b6 <waves+0x6b6>
    83ba:	f3 f3       	brvs	.-4      	; 0x83b8 <waves+0x6b8>
    83bc:	f3 f3       	brvs	.-4      	; 0x83ba <waves+0x6ba>
    83be:	f3 f3       	brvs	.-4      	; 0x83bc <waves+0x6bc>
    83c0:	f3 f3       	brvs	.-4      	; 0x83be <waves+0x6be>
    83c2:	f3 f3       	brvs	.-4      	; 0x83c0 <waves+0x6c0>
    83c4:	f3 f3       	brvs	.-4      	; 0x83c2 <waves+0x6c2>
    83c6:	f3 f3       	brvs	.-4      	; 0x83c4 <waves+0x6c4>
    83c8:	f3 f3       	brvs	.-4      	; 0x83c6 <waves+0x6c6>
    83ca:	f3 f3       	brvs	.-4      	; 0x83c8 <waves+0x6c8>
    83cc:	f3 f3       	brvs	.-4      	; 0x83ca <waves+0x6ca>
    83ce:	f3 f3       	brvs	.-4      	; 0x83cc <waves+0x6cc>
    83d0:	f3 f3       	brvs	.-4      	; 0x83ce <waves+0x6ce>
    83d2:	f3 f3       	brvs	.-4      	; 0x83d0 <waves+0x6d0>
    83d4:	f3 f3       	brvs	.-4      	; 0x83d2 <waves+0x6d2>
    83d6:	f3 f3       	brvs	.-4      	; 0x83d4 <waves+0x6d4>
    83d8:	f3 f3       	brvs	.-4      	; 0x83d6 <waves+0x6d6>
    83da:	f3 f3       	brvs	.-4      	; 0x83d8 <waves+0x6d8>
    83dc:	f3 f3       	brvs	.-4      	; 0x83da <waves+0x6da>
    83de:	f3 f3       	brvs	.-4      	; 0x83dc <waves+0x6dc>
    83e0:	f2 f2       	brmi	.-68     	; 0x839e <waves+0x69e>
    83e2:	f2 f2       	brmi	.-68     	; 0x83a0 <waves+0x6a0>
    83e4:	f2 f2       	brmi	.-68     	; 0x83a2 <waves+0x6a2>
    83e6:	f2 f2       	brmi	.-68     	; 0x83a4 <waves+0x6a4>
    83e8:	f1 f1       	breq	.+124    	; 0x8466 <waves+0x766>
    83ea:	f1 f1       	breq	.+124    	; 0x8468 <waves+0x768>
    83ec:	f0 f0       	brcs	.+60     	; 0x842a <waves+0x72a>
    83ee:	f0 ef       	ldi	r31, 0xF0	; 240
    83f0:	ef ee       	ldi	r30, 0xEF	; 239
    83f2:	ed ec       	ldi	r30, 0xCD	; 205
    83f4:	eb ea       	ldi	r30, 0xAB	; 171
    83f6:	e9 e7       	ldi	r30, 0x79	; 121
    83f8:	e5 e3       	ldi	r30, 0x35	; 53
    83fa:	df db       	rcall	.-2114   	; 0x7bba <steptable+0xb2>
    83fc:	d5 cc       	rjmp	.-1622   	; 0x7da8 <waves+0xa8>
    83fe:	c6 00       	.word	0x00c6	; ????
    8400:	00 28       	or	r0, r0
    8402:	3d 42       	sbci	r19, 0x2D	; 45
    8404:	30 2d       	mov	r19, r0
    8406:	2c 2b       	or	r18, r28
    8408:	2c 2d       	mov	r18, r12
    840a:	2e 2f       	mov	r18, r30
    840c:	30 32       	cpi	r19, 0x20	; 32
    840e:	33 35       	cpi	r19, 0x53	; 83
    8410:	37 39       	cpi	r19, 0x97	; 151
    8412:	3b 3d       	cpi	r19, 0xDB	; 219
    8414:	3f 41       	sbci	r19, 0x1F	; 31
    8416:	43 45       	sbci	r20, 0x53	; 83
    8418:	48 4a       	sbci	r20, 0xA8	; 168
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	50 53       	subi	r21, 0x30	; 48
    841e:	55 57       	subi	r21, 0x75	; 117
    8420:	59 5b       	subi	r21, 0xB9	; 185
    8422:	5d 5f       	subi	r21, 0xFD	; 253
    8424:	61 63       	ori	r22, 0x31	; 49
    8426:	65 67       	ori	r22, 0x75	; 117
    8428:	69 6b       	ori	r22, 0xB9	; 185
    842a:	6c 6e       	ori	r22, 0xEC	; 236
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 77       	andi	r23, 0x75	; 117
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7b       	andi	r23, 0xBA	; 186
    8436:	7c 7d       	andi	r23, 0xDC	; 220
    8438:	7d 7e       	andi	r23, 0xED	; 237
    843a:	7e 7f       	andi	r23, 0xFE	; 254
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7e 7e       	andi	r23, 0xEE	; 238
    8448:	7d 7d       	andi	r23, 0xDD	; 221
    844a:	7c 7b       	andi	r23, 0xBC	; 188
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 77       	andi	r23, 0x78	; 120
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6e       	ori	r23, 0xE0	; 224
    8456:	6c 6b       	ori	r22, 0xBC	; 188
    8458:	69 67       	ori	r22, 0x79	; 121
    845a:	65 63       	ori	r22, 0x35	; 53
    845c:	61 5f       	subi	r22, 0xF1	; 241
    845e:	5d 5b       	subi	r21, 0xBD	; 189
    8460:	59 57       	subi	r21, 0x79	; 121
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	50 4e       	sbci	r21, 0xE0	; 224
    8466:	4c 4a       	sbci	r20, 0xAC	; 172
    8468:	48 45       	sbci	r20, 0x58	; 88
    846a:	43 41       	sbci	r20, 0x13	; 19
    846c:	3f 3d       	cpi	r19, 0xDF	; 223
    846e:	3b 39       	cpi	r19, 0x9B	; 155
    8470:	37 35       	cpi	r19, 0x57	; 87
    8472:	33 32       	cpi	r19, 0x23	; 35
    8474:	30 2f       	mov	r19, r16
    8476:	2e 2d       	mov	r18, r14
    8478:	2c 2b       	or	r18, r28
    847a:	2c 2d       	mov	r18, r12
    847c:	30 42       	sbci	r19, 0x20	; 32
    847e:	3d 28       	or	r3, r13
    8480:	00 e9       	ldi	r16, 0x90	; 144
    8482:	e5 fe       	sbrs	r14, 5
    8484:	d4 d7       	rcall	.+4008   	; 0x942e <print_level_score>
    8486:	d7 d7       	rcall	.+4014   	; 0x9436 <print_level_score+0x8>
    8488:	d6 d4       	rcall	.+2476   	; 0x8e36 <LBLineIntersect+0x7c>
    848a:	d2 d0       	rcall	.+420    	; 0x8630 <waves+0x930>
    848c:	ce cc       	rjmp	.-1636   	; 0x7e2a <waves+0x12a>
    848e:	ca c8       	rjmp	.-3692   	; 0x7624 <ProcessMusic+0x58>
    8490:	c6 c3       	rjmp	.+1932   	; 0x8c1e <VideoModeVsync+0x2>
    8492:	c1 bf       	out	0x31, r28	; 49
    8494:	bd ba       	out	0x1d, r11	; 29
    8496:	b8 b6       	in	r11, 0x38	; 56
    8498:	b4 b1       	in	r27, 0x04	; 4
    849a:	af ad       	ldd	r26, Y+63	; 0x3f
    849c:	ab a9       	ldd	r26, Y+51	; 0x33
    849e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    84a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    84a2:	9f 9e       	mul	r9, r31
    84a4:	9c 9a       	sbi	0x13, 4	; 19
    84a6:	99 97       	sbiw	r26, 0x29	; 41
    84a8:	95 94       	asr	r9
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	89 88       	ldd	r8, Y+17	; 0x11
    84b4:	88 87       	std	Y+8, r24	; 0x08
    84b6:	86 85       	ldd	r24, Z+14	; 0x0e
    84b8:	85 84       	ldd	r8, Z+13	; 0x0d
    84ba:	84 84       	ldd	r8, Z+12	; 0x0c
    84bc:	83 83       	std	Z+3, r24	; 0x03
    84be:	83 83       	std	Z+3, r24	; 0x03
    84c0:	83 83       	std	Z+3, r24	; 0x03
    84c2:	83 83       	std	Z+3, r24	; 0x03
    84c4:	83 84       	ldd	r8, Z+11	; 0x0b
    84c6:	84 84       	ldd	r8, Z+12	; 0x0c
    84c8:	85 85       	ldd	r24, Z+13	; 0x0d
    84ca:	86 87       	std	Z+14, r24	; 0x0e
    84cc:	88 88       	ldd	r8, Y+16	; 0x10
    84ce:	89 8a       	std	Y+17, r8	; 0x11
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 94 	lds	r25, 0x9493
    84d8:	95 97       	sbiw	r26, 0x25	; 37
    84da:	99 9a       	sbi	0x13, 1	; 19
    84dc:	9c 9e       	mul	r9, r28
    84de:	9f a1       	ldd	r25, Y+39	; 0x27
    84e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    84e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    84e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e6:	af b1       	in	r26, 0x0f	; 15
    84e8:	b4 b6       	in	r11, 0x34	; 52
    84ea:	b8 ba       	out	0x18, r11	; 24
    84ec:	bd bf       	out	0x3d, r27	; 61
    84ee:	c1 c3       	rjmp	.+1922   	; 0x8c72 <LBGetJoyPadState+0xa>
    84f0:	c6 c8       	rjmp	.-3700   	; 0x767e <ProcessMusic+0xb2>
    84f2:	ca cc       	rjmp	.-1644   	; 0x7e88 <waves+0x188>
    84f4:	ce d0       	rcall	.+412    	; 0x8692 <waves+0x992>
    84f6:	d2 d4       	rcall	.+2468   	; 0x8e9c <LBLineIntersect+0xe2>
    84f8:	d6 d7       	rcall	.+4012   	; 0x94a6 <print_level_score+0x78>
    84fa:	d7 d7       	rcall	.+4014   	; 0x94aa <print_level_score+0x7c>
    84fc:	d4 fe       	sbrs	r13, 4
    84fe:	e5 e9       	ldi	r30, 0x95	; 149
    8500:	f9 f8       	.word	0xf8f9	; ????
    8502:	f9 f5       	brne	.+126    	; 0x8582 <waves+0x882>
    8504:	eb e1       	ldi	r30, 0x1B	; 27
    8506:	dd de       	rcall	.-582    	; 0x82c2 <waves+0x5c2>
    8508:	e0 e2       	ldi	r30, 0x20	; 32
    850a:	e4 e5       	ldi	r30, 0x54	; 84
    850c:	e6 e5       	ldi	r30, 0x56	; 86
    850e:	e4 e2       	ldi	r30, 0x24	; 36
    8510:	de d9       	rcall	.-3140   	; 0x78ce <ProcessMusic+0x302>
    8512:	d2 ca       	rjmp	.-2652   	; 0x7ab8 <esmw+0x5c>
    8514:	c1 b7       	in	r28, 0x31	; 49
    8516:	ac a2       	std	Y+36, r10	; 0x24
    8518:	99 91       	ld	r25, Y+
    851a:	8a 86       	std	Y+10, r8	; 0x0a
    851c:	83 81       	ldd	r24, Z+3	; 0x03
    851e:	80 80       	ld	r8, Z
    8520:	81 82       	std	Z+1, r8	; 0x01
    8522:	83 85       	ldd	r24, Z+11	; 0x0b
    8524:	86 88       	ldd	r8, Z+22	; 0x16
    8526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8528:	8d 8f       	std	Y+29, r24	; 0x1d
    852a:	90 92 93 95 	sts	0x9593, r9
    852e:	96 97       	sbiw	r26, 0x26	; 38
    8530:	98 99       	sbic	0x13, 0	; 19
    8532:	9a 9b       	sbis	0x13, 2	; 19
    8534:	9b 9c       	mul	r9, r11
    8536:	9d 9d       	mul	r25, r13
    8538:	9d 9e       	mul	r9, r29
    853a:	9e 9e       	mul	r9, r30
    853c:	9f 9f       	mul	r25, r31
    853e:	9f 9f       	mul	r25, r31
    8540:	9f 9f       	mul	r25, r31
    8542:	9f 9e       	mul	r9, r31
    8544:	9e 9e       	mul	r9, r30
    8546:	9d 9d       	mul	r25, r13
    8548:	9d 9c       	mul	r9, r13
    854a:	9b 9b       	sbis	0x13, 3	; 19
    854c:	9a 99       	sbic	0x13, 2	; 19
    854e:	98 97       	sbiw	r26, 0x28	; 40
    8550:	96 95       	lsr	r25
    8552:	93 92       	.word	0x9293	; ????
    8554:	90 8f       	std	Z+24, r25	; 0x18
    8556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8558:	8a 88       	ldd	r8, Y+18	; 0x12
    855a:	86 85       	ldd	r24, Z+14	; 0x0e
    855c:	83 82       	std	Z+3, r8	; 0x03
    855e:	81 80       	ldd	r8, Z+1	; 0x01
    8560:	80 81       	ld	r24, Z
    8562:	83 86       	std	Z+11, r8	; 0x0b
    8564:	8a 91       	ld	r24, -Y
    8566:	99 a2       	std	Y+33, r9	; 0x21
    8568:	ac b7       	in	r26, 0x3c	; 60
    856a:	c1 ca       	rjmp	.-2686   	; 0x7aee <esmw+0x92>
    856c:	d2 d9       	rcall	.-3164   	; 0x7912 <ProcessMusic+0x346>
    856e:	de e2       	ldi	r29, 0x2E	; 46
    8570:	e4 e5       	ldi	r30, 0x54	; 84
    8572:	e6 e5       	ldi	r30, 0x56	; 86
    8574:	e4 e2       	ldi	r30, 0x24	; 36
    8576:	e0 de       	rcall	.-576    	; 0x8338 <waves+0x638>
    8578:	dd e1       	ldi	r29, 0x1D	; 29
    857a:	eb f5       	brvc	.+122    	; 0x85f6 <waves+0x8f6>
    857c:	f9 f8       	.word	0xf8f9	; ????
    857e:	f9 00       	.word	0x00f9	; ????
    8580:	07 08       	sbc	r0, r7
    8582:	07 0b       	sbc	r16, r23
    8584:	15 1f       	adc	r17, r21
    8586:	23 22       	and	r2, r19
    8588:	20 1e       	adc	r2, r16
    858a:	1c 1b       	sub	r17, r28
    858c:	1a 1b       	sub	r17, r26
    858e:	1c 1e       	adc	r1, r28
    8590:	22 27       	eor	r18, r18
    8592:	2e 36       	cpi	r18, 0x6E	; 110
    8594:	3f 49       	sbci	r19, 0x9F	; 159
    8596:	54 5e       	subi	r21, 0xE4	; 228
    8598:	67 6f       	ori	r22, 0xF7	; 247
    859a:	76 7a       	andi	r23, 0xA6	; 166
    859c:	7e 7f       	andi	r23, 0xFE	; 254
    859e:	7f 7f       	andi	r23, 0xFF	; 255
    85a0:	7f 7e       	andi	r23, 0xEF	; 239
    85a2:	7d 7b       	andi	r23, 0xBD	; 189
    85a4:	7a 78       	andi	r23, 0x8A	; 138
    85a6:	76 74       	andi	r23, 0x46	; 70
    85a8:	73 71       	andi	r23, 0x13	; 19
    85aa:	70 6e       	ori	r23, 0xE0	; 224
    85ac:	6d 6b       	ori	r22, 0xBD	; 189
    85ae:	6a 69       	ori	r22, 0x9A	; 154
    85b0:	68 67       	ori	r22, 0x78	; 120
    85b2:	66 65       	ori	r22, 0x56	; 86
    85b4:	65 64       	ori	r22, 0x45	; 69
    85b6:	64 63       	ori	r22, 0x34	; 52
    85b8:	63 62       	ori	r22, 0x23	; 35
    85ba:	62 62       	ori	r22, 0x22	; 34
    85bc:	61 61       	ori	r22, 0x11	; 17
    85be:	61 61       	ori	r22, 0x11	; 17
    85c0:	61 61       	ori	r22, 0x11	; 17
    85c2:	61 62       	ori	r22, 0x21	; 33
    85c4:	62 62       	ori	r22, 0x22	; 34
    85c6:	63 63       	ori	r22, 0x33	; 51
    85c8:	63 64       	ori	r22, 0x43	; 67
    85ca:	65 65       	ori	r22, 0x55	; 85
    85cc:	66 67       	ori	r22, 0x76	; 118
    85ce:	68 69       	ori	r22, 0x98	; 152
    85d0:	6a 6b       	ori	r22, 0xBA	; 186
    85d2:	6d 6e       	ori	r22, 0xED	; 237
    85d4:	70 71       	andi	r23, 0x10	; 16
    85d6:	73 74       	andi	r23, 0x43	; 67
    85d8:	76 78       	andi	r23, 0x86	; 134
    85da:	7a 7b       	andi	r23, 0xBA	; 186
    85dc:	7d 7e       	andi	r23, 0xED	; 237
    85de:	7f 7f       	andi	r23, 0xFF	; 255
    85e0:	7f 7f       	andi	r23, 0xFF	; 255
    85e2:	7e 7a       	andi	r23, 0xAE	; 174
    85e4:	76 6f       	ori	r23, 0xF6	; 246
    85e6:	67 5e       	subi	r22, 0xE7	; 231
    85e8:	54 49       	sbci	r21, 0x94	; 148
    85ea:	3f 36       	cpi	r19, 0x6F	; 111
    85ec:	2e 27       	eor	r18, r30
    85ee:	22 1e       	adc	r2, r18
    85f0:	1c 1b       	sub	r17, r28
    85f2:	1a 1b       	sub	r17, r26
    85f4:	1c 1e       	adc	r1, r28
    85f6:	20 22       	and	r2, r16
    85f8:	23 1f       	adc	r18, r19
    85fa:	15 0b       	sbc	r17, r21
    85fc:	07 08       	sbc	r0, r7
    85fe:	07 00       	.word	0x0007	; ????
    8600:	1f 31       	cpi	r17, 0x1F	; 31
    8602:	3d 44       	sbci	r19, 0x4D	; 77
    8604:	4e 53       	subi	r20, 0x3E	; 62
    8606:	54 56       	subi	r21, 0x64	; 100
    8608:	5a 5f       	subi	r21, 0xFA	; 250
    860a:	64 69       	ori	r22, 0x94	; 148
    860c:	6e 74       	andi	r22, 0x4E	; 78
    860e:	76 79       	andi	r23, 0x96	; 150
    8610:	7c 7f       	andi	r23, 0xFC	; 252
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7c       	andi	r23, 0xCF	; 207
    867c:	78 71       	andi	r23, 0x18	; 24
    867e:	68 4c       	sbci	r22, 0xC8	; 200
    8680:	2c 1c       	adc	r2, r12
    8682:	12 0c       	add	r1, r2
    8684:	0a 0b       	sbc	r16, r26
    8686:	0a 05       	cpc	r16, r10
    8688:	fd f3       	brhs	.-2      	; 0x8688 <waves+0x988>
    868a:	e9 df       	rcall	.-46     	; 0x865e <waves+0x95e>
    868c:	d4 ca       	rjmp	.-2648   	; 0x7c36 <steptable+0x12e>
    868e:	c0 b7       	in	r28, 0x30	; 48
    8690:	ae a6       	std	Y+46, r10	; 0x2e
    8692:	9e 97       	sbiw	r26, 0x2e	; 46
    8694:	91 8b       	std	Z+17, r25	; 0x11
    8696:	86 85       	ldd	r24, Z+14	; 0x0e
    8698:	82 80       	ldd	r8, Z+2	; 0x02
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 87       	std	Z+8, r24	; 0x08
    86f6:	91 9d       	mul	r25, r1
    86f8:	ac c4       	rjmp	.+2392   	; 0x9052 <set_shot_animations+0x12>
    86fa:	cb d4       	rcall	.+2454   	; 0x9092 <set_shot_animations+0x52>
    86fc:	dd f2       	brhs	.-74     	; 0x86b4 <waves+0x9b4>
    86fe:	fa fa       	.word	0xfafa	; ????

00008700 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8700:	90 91 b7 0b 	lds	r25, 0x0BB7
    8704:	ea e9       	ldi	r30, 0x9A	; 154
    8706:	fa e0       	ldi	r31, 0x0A	; 10
    8708:	80 e0       	ldi	r24, 0x00	; 0
    870a:	89 17       	cp	r24, r25
    870c:	61 f0       	breq	.+24     	; 0x8726 <RestoreBackground+0x26>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    870e:	20 81       	ld	r18, Z
    8710:	df 01       	movw	r26, r30
    8712:	12 97       	sbiw	r26, 0x02	; 2
    8714:	0d 90       	ld	r0, X+
    8716:	bc 91       	ld	r27, X
    8718:	a0 2d       	mov	r26, r0
    871a:	a0 5a       	subi	r26, 0xA0	; 160
    871c:	be 4f       	sbci	r27, 0xFE	; 254
    871e:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8720:	8f 5f       	subi	r24, 0xFF	; 255
    8722:	33 96       	adiw	r30, 0x03	; 3
    8724:	f2 cf       	rjmp	.-28     	; 0x870a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8726:	08 95       	ret

00008728 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8728:	80 93 00 01 	sts	0x0100, r24
    872c:	08 95       	ret

0000872e <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    872e:	2f 92       	push	r2
    8730:	3f 92       	push	r3
    8732:	4f 92       	push	r4
    8734:	5f 92       	push	r5
    8736:	6f 92       	push	r6
    8738:	7f 92       	push	r7
    873a:	8f 92       	push	r8
    873c:	9f 92       	push	r9
    873e:	af 92       	push	r10
    8740:	bf 92       	push	r11
    8742:	cf 92       	push	r12
    8744:	df 92       	push	r13
    8746:	ef 92       	push	r14
    8748:	ff 92       	push	r15
    874a:	0f 93       	push	r16
    874c:	1f 93       	push	r17
    874e:	cf 93       	push	r28
    8750:	df 93       	push	r29
    8752:	00 d0       	rcall	.+0      	; 0x8754 <ProcessSprites+0x26>
    8754:	00 d0       	rcall	.+0      	; 0x8756 <ProcessSprites+0x28>
    8756:	1f 92       	push	r1
    8758:	cd b7       	in	r28, 0x3d	; 61
    875a:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    875c:	10 92 b7 0b 	sts	0x0BB7, r1
		if(!spritesOn) return;
    8760:	80 91 00 01 	lds	r24, 0x0100
    8764:	88 23       	and	r24, r24
    8766:	09 f4       	brne	.+2      	; 0x876a <ProcessSprites+0x3c>
    8768:	aa c0       	rjmp	.+340    	; 0x88be <ProcessSprites+0x190>
    876a:	69 ea       	ldi	r22, 0xA9	; 169
    876c:	e6 2e       	mov	r14, r22
    876e:	64 e0       	ldi	r22, 0x04	; 4
    8770:	f6 2e       	mov	r15, r22
    8772:	71 2c       	mov	r7, r1
    8774:	f7 01       	movw	r30, r14
    8776:	31 97       	sbiw	r30, 0x01	; 1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8778:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    877a:	20 3f       	cpi	r18, 0xF0	; 240
    877c:	09 f4       	brne	.+2      	; 0x8780 <ProcessSprites+0x52>
    877e:	7f c0       	rjmp	.+254    	; 0x887e <ProcessSprites+0x150>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8780:	f7 01       	movw	r30, r14
    8782:	30 81       	ld	r19, Z
    8784:	83 2f       	mov	r24, r19
    8786:	90 e0       	ldi	r25, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8788:	32 2e       	mov	r3, r18
    878a:	36 94       	lsr	r3
    878c:	36 94       	lsr	r3
    878e:	36 94       	lsr	r3
				dx=ssx&0x7;
    8790:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    8792:	19 f4       	brne	.+6      	; 0x879a <ProcessSprites+0x6c>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8794:	f1 e0       	ldi	r31, 0x01	; 1
    8796:	f9 83       	std	Y+1, r31	; 0x01
    8798:	02 c0       	rjmp	.+4      	; 0x879e <ProcessSprites+0x70>
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
				dx=ssx&0x7;
				if(dx>0) tx++;
    879a:	42 e0       	ldi	r20, 0x02	; 2
    879c:	49 83       	std	Y+1, r20	; 0x01

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    879e:	53 e0       	ldi	r21, 0x03	; 3
    87a0:	96 95       	lsr	r25
    87a2:	87 95       	ror	r24
    87a4:	5a 95       	dec	r21
    87a6:	e1 f7       	brne	.-8      	; 0x87a0 <ProcessSprites+0x72>
    87a8:	68 2e       	mov	r6, r24
				dy=ssy%TILE_HEIGHT;
    87aa:	83 2f       	mov	r24, r19
    87ac:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    87ae:	19 f4       	brne	.+6      	; 0x87b6 <ProcessSprites+0x88>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    87b0:	22 24       	eor	r2, r2
    87b2:	23 94       	inc	r2
    87b4:	02 c0       	rjmp	.+4      	; 0x87ba <ProcessSprites+0x8c>

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			
    87b6:	42 e0       	ldi	r20, 0x02	; 2
    87b8:	24 2e       	mov	r2, r20
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87ba:	c8 2e       	mov	r12, r24
    87bc:	d1 2c       	mov	r13, r1
    87be:	dc 2c       	mov	r13, r12
    87c0:	cc 24       	eor	r12, r12
    87c2:	c2 0e       	add	r12, r18
    87c4:	d1 1c       	adc	r13, r1
    87c6:	00 e0       	ldi	r16, 0x00	; 0
    87c8:	10 e0       	ldi	r17, 0x00	; 0
    87ca:	94 ee       	ldi	r25, 0xE4	; 228
    87cc:	96 0d       	add	r25, r6
    87ce:	9a 83       	std	Y+2, r25	; 0x02
    87d0:	92 ee       	ldi	r25, 0xE2	; 226
    87d2:	93 0d       	add	r25, r3
    87d4:	9b 83       	std	Y+3, r25	; 0x03
    87d6:	86 2d       	mov	r24, r6
    87d8:	80 0f       	add	r24, r16
    87da:	8c 31       	cpi	r24, 0x1C	; 28
    87dc:	18 f0       	brcs	.+6      	; 0x87e4 <ProcessSprites+0xb6>
    87de:	aa 80       	ldd	r10, Y+2	; 0x02
    87e0:	a0 0e       	add	r10, r16
    87e2:	01 c0       	rjmp	.+2      	; 0x87e6 <ProcessSprites+0xb8>
    87e4:	a8 2e       	mov	r10, r24
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    87e6:	ee e1       	ldi	r30, 0x1E	; 30
    87e8:	ae 9e       	mul	r10, r30
    87ea:	50 01       	movw	r10, r0
    87ec:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87ee:	50 2e       	mov	r5, r16
    87f0:	44 24       	eor	r4, r4
    87f2:	1d 82       	std	Y+5, r1	; 0x05
    87f4:	1c 82       	std	Y+4, r1	; 0x04
    87f6:	8c 81       	ldd	r24, Y+4	; 0x04
    87f8:	83 0d       	add	r24, r3
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    87fa:	8e 31       	cpi	r24, 0x1E	; 30
    87fc:	18 f0       	brcs	.+6      	; 0x8804 <ProcessSprites+0xd6>
    87fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8800:	ec 81       	ldd	r30, Y+4	; 0x04
    8802:	8e 0f       	add	r24, r30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8804:	95 01       	movw	r18, r10
    8806:	28 0f       	add	r18, r24
    8808:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    880a:	c9 01       	movw	r24, r18
    880c:	80 5a       	subi	r24, 0xA0	; 160
    880e:	9e 4f       	sbci	r25, 0xFE	; 254
    8810:	4c 01       	movw	r8, r24
    8812:	fc 01       	movw	r30, r24
    8814:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8816:	87 31       	cpi	r24, 0x17	; 23
    8818:	e0 f0       	brcs	.+56     	; 0x8852 <ProcessSprites+0x124>
    881a:	60 91 b7 0b 	lds	r22, 0x0BB7
    881e:	67 31       	cpi	r22, 0x17	; 23
    8820:	08 f5       	brcc	.+66     	; 0x8864 <ProcessSprites+0x136>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8822:	46 2f       	mov	r20, r22
    8824:	50 e0       	ldi	r21, 0x00	; 0
    8826:	fa 01       	movw	r30, r20
    8828:	ee 0f       	add	r30, r30
    882a:	ff 1f       	adc	r31, r31
    882c:	e4 0f       	add	r30, r20
    882e:	f5 1f       	adc	r31, r21
    8830:	e8 56       	subi	r30, 0x68	; 104
    8832:	f5 4f       	sbci	r31, 0xF5	; 245
    8834:	31 83       	std	Z+1, r19	; 0x01
    8836:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8838:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    883a:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    883e:	80 91 b7 0b 	lds	r24, 0x0BB7
    8842:	f4 01       	movw	r30, r8
    8844:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8846:	91 e0       	ldi	r25, 0x01	; 1
    8848:	98 0f       	add	r25, r24
    884a:	90 93 b7 0b 	sts	0x0BB7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    884e:	87 31       	cpi	r24, 0x17	; 23
    8850:	48 f4       	brcc	.+18     	; 0x8864 <ProcessSprites+0x136>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8852:	96 01       	movw	r18, r12
    8854:	4c 81       	ldd	r20, Y+4	; 0x04
    8856:	5d 81       	ldd	r21, Y+5	; 0x05
    8858:	44 0d       	add	r20, r4
    885a:	55 1d       	adc	r21, r5
    885c:	68 2f       	mov	r22, r24
    885e:	87 2d       	mov	r24, r7
    8860:	0e 94 82 35 	call	0x6b04	; 0x6b04 <BlitSprite>
    8864:	8c 81       	ldd	r24, Y+4	; 0x04
    8866:	9d 81       	ldd	r25, Y+5	; 0x05
    8868:	01 96       	adiw	r24, 0x01	; 1
    886a:	9d 83       	std	Y+5, r25	; 0x05
    886c:	8c 83       	std	Y+4, r24	; 0x04
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    886e:	99 81       	ldd	r25, Y+1	; 0x01
    8870:	89 17       	cp	r24, r25
    8872:	08 f2       	brcs	.-126    	; 0x87f6 <ProcessSprites+0xc8>
    8874:	0f 5f       	subi	r16, 0xFF	; 255
    8876:	1f 4f       	sbci	r17, 0xFF	; 255
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8878:	02 15       	cp	r16, r2
    887a:	08 f4       	brcc	.+2      	; 0x887e <ProcessSprites+0x150>
    887c:	ac cf       	rjmp	.-168    	; 0x87d6 <ProcessSprites+0xa8>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    887e:	73 94       	inc	r7
    8880:	f4 e0       	ldi	r31, 0x04	; 4
    8882:	ef 0e       	add	r14, r31
    8884:	f1 1c       	adc	r15, r1
    8886:	4c e0       	ldi	r20, 0x0C	; 12
    8888:	74 12       	cpse	r7, r20
    888a:	74 cf       	rjmp	.-280    	; 0x8774 <ProcessSprites+0x46>


		//restore BG tiles
		RestoreBackground();

	}
    888c:	0f 90       	pop	r0
    888e:	0f 90       	pop	r0
    8890:	0f 90       	pop	r0
    8892:	0f 90       	pop	r0
    8894:	0f 90       	pop	r0
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	1f 91       	pop	r17
    889c:	0f 91       	pop	r16
    889e:	ff 90       	pop	r15
    88a0:	ef 90       	pop	r14
    88a2:	df 90       	pop	r13
    88a4:	cf 90       	pop	r12
    88a6:	bf 90       	pop	r11
    88a8:	af 90       	pop	r10
    88aa:	9f 90       	pop	r9
    88ac:	8f 90       	pop	r8
    88ae:	7f 90       	pop	r7
    88b0:	6f 90       	pop	r6
    88b2:	5f 90       	pop	r5
    88b4:	4f 90       	pop	r4
    88b6:	3f 90       	pop	r3
    88b8:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    88ba:	0c 94 80 43 	jmp	0x8700	; 0x8700 <RestoreBackground>

	}
    88be:	0f 90       	pop	r0
    88c0:	0f 90       	pop	r0
    88c2:	0f 90       	pop	r0
    88c4:	0f 90       	pop	r0
    88c6:	0f 90       	pop	r0
    88c8:	df 91       	pop	r29
    88ca:	cf 91       	pop	r28
    88cc:	1f 91       	pop	r17
    88ce:	0f 91       	pop	r16
    88d0:	ff 90       	pop	r15
    88d2:	ef 90       	pop	r14
    88d4:	df 90       	pop	r13
    88d6:	cf 90       	pop	r12
    88d8:	bf 90       	pop	r11
    88da:	af 90       	pop	r10
    88dc:	9f 90       	pop	r9
    88de:	8f 90       	pop	r8
    88e0:	7f 90       	pop	r7
    88e2:	6f 90       	pop	r6
    88e4:	5f 90       	pop	r5
    88e6:	4f 90       	pop	r4
    88e8:	3f 90       	pop	r3
    88ea:	2f 90       	pop	r2
    88ec:	08 95       	ret

000088ee <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    88ee:	bf 92       	push	r11
    88f0:	cf 92       	push	r12
    88f2:	df 92       	push	r13
    88f4:	ef 92       	push	r14
    88f6:	ff 92       	push	r15
    88f8:	0f 93       	push	r16
    88fa:	1f 93       	push	r17
    88fc:	cf 93       	push	r28
    88fe:	df 93       	push	r29
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8900:	fb 01       	movw	r30, r22
    8902:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8904:	31 96       	adiw	r30, 0x01	; 1
    8906:	d4 90       	lpm	r13, Z
    8908:	cc 24       	eor	r12, r12
    890a:	ca 94       	dec	r12
    890c:	c1 0e       	add	r12, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    890e:	24 2f       	mov	r18, r20
    8910:	21 70       	andi	r18, 0x01	; 1
    8912:	40 ff       	sbrs	r20, 0
    8914:	04 c0       	rjmp	.+8      	; 0x891e <MapSprite2+0x30>
			x=(mapWidth-1);
    8916:	9c 2d       	mov	r25, r12
			dx=-1;
    8918:	ff 24       	eor	r15, r15
    891a:	fa 94       	dec	r15
    891c:	03 c0       	rjmp	.+6      	; 0x8924 <MapSprite2+0x36>
		}else{
			x=0;
			dx=1;
    891e:	ff 24       	eor	r15, r15
    8920:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8922:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8924:	41 ff       	sbrs	r20, 1
    8926:	05 c0       	rjmp	.+10     	; 0x8932 <MapSprite2+0x44>
			y=(mapHeight-1);
    8928:	5f ef       	ldi	r21, 0xFF	; 255
    892a:	5d 0d       	add	r21, r13
			dy=-1;
    892c:	ee 24       	eor	r14, r14
    892e:	ea 94       	dec	r14
    8930:	03 c0       	rjmp	.+6      	; 0x8938 <MapSprite2+0x4a>
		}else{
			y=0;
			dy=1;
    8932:	ee 24       	eor	r14, r14
    8934:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8936:	50 e0       	ldi	r21, 0x00	; 0
    8938:	21 11       	cpse	r18, r1
    893a:	01 c0       	rjmp	.+2      	; 0x893e <MapSprite2+0x50>
    893c:	c1 2c       	mov	r12, r1
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    893e:	00 e0       	ldi	r16, 0x00	; 0
    8940:	0d 15       	cp	r16, r13
    8942:	11 f1       	breq	.+68     	; 0x8988 <MapSprite2+0x9a>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8944:	51 03       	mulsu	r21, r17
    8946:	e0 01       	movw	r28, r0
    8948:	11 24       	eor	r1, r1
    894a:	b8 2e       	mov	r11, r24
    894c:	b1 0e       	add	r11, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    894e:	8b 15       	cp	r24, r11
    8950:	b9 f0       	breq	.+46     	; 0x8980 <MapSprite2+0x92>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8952:	fe 01       	movw	r30, r28
    8954:	e9 0f       	add	r30, r25
    8956:	f1 1d       	adc	r31, r1
    8958:	97 fd       	sbrc	r25, 7
    895a:	fa 95       	dec	r31
    895c:	32 96       	adiw	r30, 0x02	; 2
    895e:	e6 0f       	add	r30, r22
    8960:	f7 1f       	adc	r31, r23
    8962:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8964:	f4 e0       	ldi	r31, 0x04	; 4
    8966:	8f 9f       	mul	r24, r31
    8968:	d0 01       	movw	r26, r0
    896a:	11 24       	eor	r1, r1
    896c:	a8 55       	subi	r26, 0x58	; 88
    896e:	bb 4f       	sbci	r27, 0xFB	; 251
    8970:	12 96       	adiw	r26, 0x02	; 2
    8972:	2c 93       	st	X, r18
    8974:	12 97       	sbiw	r26, 0x02	; 2
				sprites[startSprite++].flags=spriteFlags;
    8976:	8f 5f       	subi	r24, 0xFF	; 255
    8978:	13 96       	adiw	r26, 0x03	; 3
    897a:	4c 93       	st	X, r20
				x+=dx;
    897c:	9f 0d       	add	r25, r15
    897e:	e7 cf       	rjmp	.-50     	; 0x894e <MapSprite2+0x60>
			}
			y+=dy;
    8980:	5e 0d       	add	r21, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8982:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8984:	9c 2d       	mov	r25, r12
    8986:	dc cf       	rjmp	.-72     	; 0x8940 <MapSprite2+0x52>
	    }
	}
    8988:	df 91       	pop	r29
    898a:	cf 91       	pop	r28
    898c:	1f 91       	pop	r17
    898e:	0f 91       	pop	r16
    8990:	ff 90       	pop	r15
    8992:	ef 90       	pop	r14
    8994:	df 90       	pop	r13
    8996:	cf 90       	pop	r12
    8998:	bf 90       	pop	r11
    899a:	08 95       	ret

0000899c <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    899c:	cf 92       	push	r12
    899e:	df 92       	push	r13
    89a0:	ef 92       	push	r14
    89a2:	ff 92       	push	r15
    89a4:	0f 93       	push	r16
    89a6:	1f 93       	push	r17
    89a8:	cf 93       	push	r28
    89aa:	df 93       	push	r29

		for(unsigned char dy=0;dy<height;dy++){
    89ac:	e0 e0       	ldi	r30, 0x00	; 0
    89ae:	f0 e0       	ldi	r31, 0x00	; 0
    89b0:	30 e0       	ldi	r19, 0x00	; 0
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
    89b2:	90 e2       	ldi	r25, 0x20	; 32
    89b4:	d9 2e       	mov	r13, r25
    89b6:	d4 0e       	add	r13, r20
    89b8:	e4 2e       	mov	r14, r20
    89ba:	f1 2c       	mov	r15, r1
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    89bc:	30 17       	cp	r19, r16
    89be:	09 f1       	breq	.+66     	; 0x8a02 <MoveSprite+0x66>
    89c0:	1d 2d       	mov	r17, r13
    89c2:	1e 0f       	add	r17, r30
    89c4:	74 2f       	mov	r23, r20
    89c6:	7e 0f       	add	r23, r30
    89c8:	c8 2e       	mov	r12, r24
    89ca:	c2 0e       	add	r12, r18
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
    89cc:	96 2f       	mov	r25, r22
    89ce:	ef 01       	movw	r28, r30
    89d0:	ce 0d       	add	r28, r14
    89d2:	df 1d       	adc	r29, r15


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
    89d4:	8c 15       	cp	r24, r12
    89d6:	91 f0       	breq	.+36     	; 0x89fc <MoveSprite+0x60>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    89d8:	54 e0       	ldi	r21, 0x04	; 4
    89da:	85 9f       	mul	r24, r21
    89dc:	d0 01       	movw	r26, r0
    89de:	11 24       	eor	r1, r1
    89e0:	a8 55       	subi	r26, 0x58	; 88
    89e2:	bb 4f       	sbci	r27, 0xFB	; 251
    89e4:	9c 93       	st	X, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    89e6:	c1 3e       	cpi	r28, 0xE1	; 225
    89e8:	d1 05       	cpc	r29, r1
    89ea:	1c f0       	brlt	.+6      	; 0x89f2 <MoveSprite+0x56>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    89ec:	11 96       	adiw	r26, 0x01	; 1
    89ee:	1c 93       	st	X, r17
    89f0:	02 c0       	rjmp	.+4      	; 0x89f6 <MoveSprite+0x5a>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    89f2:	11 96       	adiw	r26, 0x01	; 1
    89f4:	7c 93       	st	X, r23
					}
				#endif

				startSprite++;
    89f6:	8f 5f       	subi	r24, 0xFF	; 255
    89f8:	98 5f       	subi	r25, 0xF8	; 248
    89fa:	ec cf       	rjmp	.-40     	; 0x89d4 <MoveSprite+0x38>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    89fc:	3f 5f       	subi	r19, 0xFF	; 255
    89fe:	38 96       	adiw	r30, 0x08	; 8
    8a00:	dd cf       	rjmp	.-70     	; 0x89bc <MoveSprite+0x20>

				startSprite++;
			}
		}	

	}
    8a02:	df 91       	pop	r29
    8a04:	cf 91       	pop	r28
    8a06:	1f 91       	pop	r17
    8a08:	0f 91       	pop	r16
    8a0a:	ff 90       	pop	r15
    8a0c:	ef 90       	pop	r14
    8a0e:	df 90       	pop	r13
    8a10:	cf 90       	pop	r12
    8a12:	08 95       	ret

00008a14 <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8a14:	08 95       	ret

00008a16 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a16:	e8 ea       	ldi	r30, 0xA8	; 168
    8a18:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a1a:	80 ef       	ldi	r24, 0xF0	; 240
    8a1c:	80 83       	st	Z, r24
    8a1e:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8a20:	94 e0       	ldi	r25, 0x04	; 4
    8a22:	e8 3d       	cpi	r30, 0xD8	; 216
    8a24:	f9 07       	cpc	r31, r25
    8a26:	d1 f7       	brne	.-12     	; 0x8a1c <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8a28:	08 95       	ret

00008a2a <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8a2a:	6f 92       	push	r6
    8a2c:	7f 92       	push	r7
    8a2e:	8f 92       	push	r8
    8a30:	9f 92       	push	r9
    8a32:	af 92       	push	r10
    8a34:	bf 92       	push	r11
    8a36:	cf 92       	push	r12
    8a38:	df 92       	push	r13
    8a3a:	ef 92       	push	r14
    8a3c:	ff 92       	push	r15
    8a3e:	0f 93       	push	r16
    8a40:	1f 93       	push	r17
    8a42:	cf 93       	push	r28
    8a44:	df 93       	push	r29
    8a46:	68 2e       	mov	r6, r24
    8a48:	86 2e       	mov	r8, r22
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8a4a:	fa 01       	movw	r30, r20
    8a4c:	a4 90       	lpm	r10, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8a4e:	31 96       	adiw	r30, 0x01	; 1
    8a50:	74 90       	lpm	r7, Z
    8a52:	ca 2c       	mov	r12, r10
    8a54:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8a56:	8a 01       	movw	r16, r20
    8a58:	b1 2c       	mov	r11, r1
    8a5a:	b7 14       	cp	r11, r7
    8a5c:	d1 f0       	breq	.+52     	; 0x8a92 <DrawMap2+0x68>
    8a5e:	c0 e0       	ldi	r28, 0x00	; 0
    8a60:	d0 e0       	ldi	r29, 0x00	; 0
    8a62:	78 01       	movw	r14, r16
    8a64:	82 e0       	ldi	r24, 0x02	; 2
    8a66:	e8 0e       	add	r14, r24
    8a68:	f1 1c       	adc	r15, r1
    8a6a:	9b 2c       	mov	r9, r11
    8a6c:	98 0c       	add	r9, r8
		for(u8 dx=0;dx<mapWidth;dx++){			
    8a6e:	ca 15       	cp	r28, r10
    8a70:	60 f4       	brcc	.+24     	; 0x8a8a <DrawMap2+0x60>
    8a72:	f7 01       	movw	r30, r14
    8a74:	ec 0f       	add	r30, r28
    8a76:	fd 1f       	adc	r31, r29
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8a78:	44 91       	lpm	r20, Z
    8a7a:	50 e0       	ldi	r21, 0x00	; 0
    8a7c:	69 2d       	mov	r22, r9
    8a7e:	8c 2f       	mov	r24, r28
    8a80:	86 0d       	add	r24, r6
    8a82:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
    8a86:	21 96       	adiw	r28, 0x01	; 1
    8a88:	f2 cf       	rjmp	.-28     	; 0x8a6e <DrawMap2+0x44>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8a8a:	b3 94       	inc	r11
    8a8c:	0c 0d       	add	r16, r12
    8a8e:	1d 1d       	adc	r17, r13
    8a90:	e4 cf       	rjmp	.-56     	; 0x8a5a <DrawMap2+0x30>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8a92:	df 91       	pop	r29
    8a94:	cf 91       	pop	r28
    8a96:	1f 91       	pop	r17
    8a98:	0f 91       	pop	r16
    8a9a:	ff 90       	pop	r15
    8a9c:	ef 90       	pop	r14
    8a9e:	df 90       	pop	r13
    8aa0:	cf 90       	pop	r12
    8aa2:	bf 90       	pop	r11
    8aa4:	af 90       	pop	r10
    8aa6:	9f 90       	pop	r9
    8aa8:	8f 90       	pop	r8
    8aaa:	7f 90       	pop	r7
    8aac:	6f 90       	pop	r6
    8aae:	08 95       	ret

00008ab0 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8ab0:	df 92       	push	r13
    8ab2:	ef 92       	push	r14
    8ab4:	ff 92       	push	r15
    8ab6:	0f 93       	push	r16
    8ab8:	1f 93       	push	r17
    8aba:	cf 93       	push	r28
    8abc:	df 93       	push	r29
    8abe:	f6 2e       	mov	r15, r22
    8ac0:	04 2f       	mov	r16, r20
    8ac2:	d2 2e       	mov	r13, r18
    8ac4:	ec 01       	movw	r28, r24
    8ac6:	21 97       	sbiw	r28, 0x01	; 1
	unsigned char c,i;

	for(i=0;i<3;i++){
    8ac8:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8aca:	8a e0       	ldi	r24, 0x0A	; 10
    8acc:	e8 2e       	mov	r14, r24
    8ace:	3c 2f       	mov	r19, r28
    8ad0:	3f 5f       	subi	r19, 0xFF	; 255
		if(val>0 || i==0){
    8ad2:	01 11       	cpse	r16, r1
    8ad4:	02 c0       	rjmp	.+4      	; 0x8ada <PrintByte+0x2a>
    8ad6:	11 11       	cpse	r17, r1
    8ad8:	07 c0       	rjmp	.+14     	; 0x8ae8 <PrintByte+0x38>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8ada:	80 2f       	mov	r24, r16
    8adc:	6e 2d       	mov	r22, r14
    8ade:	0e 94 9b 59 	call	0xb336	; 0xb336 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8ae2:	90 5f       	subi	r25, 0xF0	; 240
    8ae4:	49 2f       	mov	r20, r25
    8ae6:	05 c0       	rjmp	.+10     	; 0x8af2 <PrintByte+0x42>
		}else{
			if(zeropad){
    8ae8:	dd 20       	and	r13, r13
    8aea:	11 f0       	breq	.+4      	; 0x8af0 <PrintByte+0x40>
				SetFont(x--,y,CHAR_ZERO);
    8aec:	40 e1       	ldi	r20, 0x10	; 16
    8aee:	01 c0       	rjmp	.+2      	; 0x8af2 <PrintByte+0x42>
			}else{
				SetFont(x--,y,0);
    8af0:	40 e0       	ldi	r20, 0x00	; 0
    8af2:	6f 2d       	mov	r22, r15
    8af4:	83 2f       	mov	r24, r19
    8af6:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <SetFont>
			}
		}
		val=val/10;
    8afa:	80 2f       	mov	r24, r16
    8afc:	6e 2d       	mov	r22, r14
    8afe:	0e 94 9b 59 	call	0xb336	; 0xb336 <__udivmodqi4>
    8b02:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8b04:	1f 5f       	subi	r17, 0xFF	; 255
    8b06:	21 97       	sbiw	r28, 0x01	; 1
    8b08:	13 30       	cpi	r17, 0x03	; 3
    8b0a:	09 f7       	brne	.-62     	; 0x8ace <PrintByte+0x1e>
			}
		}
		val=val/10;
	}
		
}
    8b0c:	df 91       	pop	r29
    8b0e:	cf 91       	pop	r28
    8b10:	1f 91       	pop	r17
    8b12:	0f 91       	pop	r16
    8b14:	ff 90       	pop	r15
    8b16:	ef 90       	pop	r14
    8b18:	df 90       	pop	r13
    8b1a:	08 95       	ret

00008b1c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8b1c:	0f 93       	push	r16
    8b1e:	1f 93       	push	r17
    8b20:	cf 93       	push	r28
    8b22:	df 93       	push	r29
    8b24:	16 2f       	mov	r17, r22
    8b26:	c4 2f       	mov	r28, r20
    8b28:	d5 2f       	mov	r29, r21
    8b2a:	08 2f       	mov	r16, r24
    8b2c:	04 1b       	sub	r16, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8b2e:	fe 01       	movw	r30, r28
    8b30:	44 91       	lpm	r20, Z
		if(c!=0){
    8b32:	44 23       	and	r20, r20
    8b34:	49 f0       	breq	.+18     	; 0x8b48 <Print+0x2c>
			c=((c&127)-32);			
    8b36:	4f 77       	andi	r20, 0x7F	; 127
    8b38:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8b3a:	61 2f       	mov	r22, r17
    8b3c:	8c 2f       	mov	r24, r28
    8b3e:	80 0f       	add	r24, r16
    8b40:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <SetFont>
    8b44:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8b46:	f3 cf       	rjmp	.-26     	; 0x8b2e <Print+0x12>
	
}
    8b48:	df 91       	pop	r29
    8b4a:	cf 91       	pop	r28
    8b4c:	1f 91       	pop	r17
    8b4e:	0f 91       	pop	r16
    8b50:	08 95       	ret

00008b52 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8b52:	40 52       	subi	r20, 0x20	; 32
    8b54:	0c 94 b2 37 	jmp	0x6f64	; 0x6f64 <SetFont>

00008b58 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b58:	0f 93       	push	r16
    8b5a:	1f 93       	push	r17
    8b5c:	cf 93       	push	r28
    8b5e:	df 93       	push	r29
    8b60:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b62:	c0 e0       	ldi	r28, 0x00	; 0
    8b64:	d0 e0       	ldi	r29, 0x00	; 0
    8b66:	c0 17       	cp	r28, r16
    8b68:	d1 07       	cpc	r29, r17
    8b6a:	44 f4       	brge	.+16     	; 0x8b7c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b6c:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <GetVsyncFlag>
    8b70:	88 23       	and	r24, r24
    8b72:	e1 f3       	breq	.-8      	; 0x8b6c <WaitVsync+0x14>
		ClearVsyncFlag();		
    8b74:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b78:	21 96       	adiw	r28, 0x01	; 1
    8b7a:	f5 cf       	rjmp	.-22     	; 0x8b66 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8b7c:	df 91       	pop	r29
    8b7e:	cf 91       	pop	r28
    8b80:	1f 91       	pop	r17
    8b82:	0f 91       	pop	r16
    8b84:	08 95       	ret

00008b86 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8b86:	80 93 b5 0b 	sts	0x0BB5, r24
	currFadeFrame=0;
    8b8a:	10 92 b9 0b 	sts	0x0BB9, r1
	fadeActive=true;
    8b8e:	81 e0       	ldi	r24, 0x01	; 1
    8b90:	80 93 b8 0b 	sts	0x0BB8, r24
		
	if(blocking){
    8b94:	66 23       	and	r22, r22
    8b96:	21 f0       	breq	.+8      	; 0x8ba0 <doFade+0x1a>
		while(fadeActive==true);
    8b98:	80 91 b8 0b 	lds	r24, 0x0BB8
    8b9c:	81 11       	cpse	r24, r1
    8b9e:	fc cf       	rjmp	.-8      	; 0x8b98 <doFade+0x12>
    8ba0:	08 95       	ret

00008ba2 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8ba2:	81 11       	cpse	r24, r1
    8ba4:	03 c0       	rjmp	.+6      	; 0x8bac <FadeIn+0xa>
		DDRC=0xff;
    8ba6:	8f ef       	ldi	r24, 0xFF	; 255
    8ba8:	87 b9       	out	0x07, r24	; 7
		return;
    8baa:	08 95       	ret
	}
	fadeStep=1;
    8bac:	91 e0       	ldi	r25, 0x01	; 1
    8bae:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=1;
    8bb2:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8bb6:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <doFade>

00008bba <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8bba:	81 11       	cpse	r24, r1
    8bbc:	02 c0       	rjmp	.+4      	; 0x8bc2 <FadeOut+0x8>
		DDRC=0;
    8bbe:	17 b8       	out	0x07, r1	; 7
		return;
    8bc0:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8bc2:	9c e0       	ldi	r25, 0x0C	; 12
    8bc4:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=-1;
    8bc8:	9f ef       	ldi	r25, 0xFF	; 255
    8bca:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8bce:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <doFade>

00008bd2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8bd2:	80 91 b8 0b 	lds	r24, 0x0BB8
    8bd6:	88 23       	and	r24, r24
    8bd8:	01 f1       	breq	.+64     	; 0x8c1a <ProcessFading+0x48>
		if(currFadeFrame==0){
    8bda:	80 91 b9 0b 	lds	r24, 0x0BB9
    8bde:	81 11       	cpse	r24, r1
    8be0:	19 c0       	rjmp	.+50     	; 0x8c14 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8be2:	80 91 b5 0b 	lds	r24, 0x0BB5
    8be6:	80 93 b9 0b 	sts	0x0BB9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8bea:	e0 91 ba 0b 	lds	r30, 0x0BBA
    8bee:	f0 e0       	ldi	r31, 0x00	; 0
    8bf0:	e7 51       	subi	r30, 0x17	; 23
    8bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    8bf4:	e4 91       	lpm	r30, Z
    8bf6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8bf8:	80 91 b6 0b 	lds	r24, 0x0BB6
    8bfc:	90 91 ba 0b 	lds	r25, 0x0BBA
    8c00:	89 0f       	add	r24, r25
    8c02:	80 93 ba 0b 	sts	0x0BBA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8c06:	88 23       	and	r24, r24
    8c08:	11 f0       	breq	.+4      	; 0x8c0e <ProcessFading+0x3c>
    8c0a:	8d 30       	cpi	r24, 0x0D	; 13
    8c0c:	31 f4       	brne	.+12     	; 0x8c1a <ProcessFading+0x48>
				fadeActive=false;
    8c0e:	10 92 b8 0b 	sts	0x0BB8, r1
    8c12:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8c14:	81 50       	subi	r24, 0x01	; 1
    8c16:	80 93 b9 0b 	sts	0x0BB9, r24
    8c1a:	08 95       	ret

00008c1c <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8c1c:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <ProcessFading>
		ProcessSprites();
    8c20:	0c 94 97 43 	jmp	0x872e	; 0x872e <ProcessSprites>

00008c24 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8c24:	cf 93       	push	r28
    8c26:	df 93       	push	r29
    8c28:	fc 01       	movw	r30, r24
    8c2a:	eb 01       	movw	r28, r22
	*looped = 0;
    8c2c:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8c2e:	93 81       	ldd	r25, Z+3	; 0x03
    8c30:	9f 5f       	subi	r25, 0xFF	; 255
    8c32:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8c34:	22 81       	ldd	r18, Z+2	; 0x02
    8c36:	80 81       	ld	r24, Z
    8c38:	92 17       	cp	r25, r18
    8c3a:	68 f0       	brcs	.+26     	; 0x8c56 <LBGetNextFrame+0x32>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8c3c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8c3e:	90 e0       	ldi	r25, 0x00	; 0
    8c40:	01 96       	adiw	r24, 0x01	; 1
    8c42:	61 81       	ldd	r22, Z+1	; 0x01
    8c44:	70 e0       	ldi	r23, 0x00	; 0
    8c46:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    8c4a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8c4c:	89 2b       	or	r24, r25
    8c4e:	11 f4       	brne	.+4      	; 0x8c54 <LBGetNextFrame+0x30>
    8c50:	81 e0       	ldi	r24, 0x01	; 1
    8c52:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    8c54:	80 81       	ld	r24, Z
    8c56:	e8 0f       	add	r30, r24
    8c58:	f1 1d       	adc	r31, r1
    8c5a:	e8 0f       	add	r30, r24
    8c5c:	f1 1d       	adc	r31, r1
    8c5e:	84 81       	ldd	r24, Z+4	; 0x04
    8c60:	95 81       	ldd	r25, Z+5	; 0x05
}
    8c62:	df 91       	pop	r29
    8c64:	cf 91       	pop	r28
    8c66:	08 95       	ret

00008c68 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8c68:	0f 93       	push	r16
    8c6a:	1f 93       	push	r17
    8c6c:	cf 93       	push	r28
    8c6e:	df 93       	push	r29
    8c70:	ec 01       	movw	r28, r24
    8c72:	8b 01       	movw	r16, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    8c74:	80 e0       	ldi	r24, 0x00	; 0
    8c76:	0e 94 d6 37 	call	0x6fac	; 0x6fac <ReadJoypad>
    8c7a:	9d 83       	std	Y+5, r25	; 0x05
    8c7c:	8c 83       	std	Y+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    8c7e:	40 91 34 0b 	lds	r20, 0x0B34
    8c82:	50 91 35 0b 	lds	r21, 0x0B35
    8c86:	9a 01       	movw	r18, r20
    8c88:	20 95       	com	r18
    8c8a:	30 95       	com	r19
    8c8c:	28 23       	and	r18, r24
    8c8e:	39 23       	and	r19, r25
    8c90:	39 83       	std	Y+1, r19	; 0x01
    8c92:	28 83       	st	Y, r18
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8c94:	9c 01       	movw	r18, r24
    8c96:	20 95       	com	r18
    8c98:	30 95       	com	r19
    8c9a:	24 23       	and	r18, r20
    8c9c:	35 23       	and	r19, r21
    8c9e:	3b 83       	std	Y+3, r19	; 0x03
    8ca0:	2a 83       	std	Y+2, r18	; 0x02
	p1_prev = p1->held;
    8ca2:	90 93 35 0b 	sts	0x0B35, r25
    8ca6:	80 93 34 0b 	sts	0x0B34, r24
	p2->held = ReadJoypad(1);
    8caa:	81 e0       	ldi	r24, 0x01	; 1
    8cac:	0e 94 d6 37 	call	0x6fac	; 0x6fac <ReadJoypad>
    8cb0:	f8 01       	movw	r30, r16
    8cb2:	95 83       	std	Z+5, r25	; 0x05
    8cb4:	84 83       	std	Z+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8cb6:	40 91 32 0b 	lds	r20, 0x0B32
    8cba:	50 91 33 0b 	lds	r21, 0x0B33
    8cbe:	9a 01       	movw	r18, r20
    8cc0:	20 95       	com	r18
    8cc2:	30 95       	com	r19
    8cc4:	28 23       	and	r18, r24
    8cc6:	39 23       	and	r19, r25
    8cc8:	31 83       	std	Z+1, r19	; 0x01
    8cca:	20 83       	st	Z, r18
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8ccc:	9c 01       	movw	r18, r24
    8cce:	20 95       	com	r18
    8cd0:	30 95       	com	r19
    8cd2:	24 23       	and	r18, r20
    8cd4:	35 23       	and	r19, r21
    8cd6:	33 83       	std	Z+3, r19	; 0x03
    8cd8:	22 83       	std	Z+2, r18	; 0x02
	p2_prev = p2->held;
    8cda:	90 93 33 0b 	sts	0x0B33, r25
    8cde:	80 93 32 0b 	sts	0x0B32, r24
}
    8ce2:	df 91       	pop	r29
    8ce4:	cf 91       	pop	r28
    8ce6:	1f 91       	pop	r17
    8ce8:	0f 91       	pop	r16
    8cea:	08 95       	ret

00008cec <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8cec:	26 2f       	mov	r18, r22
	for (u8 i = 0; i < count; i++)
    8cee:	fb 01       	movw	r30, r22
    8cf0:	3e 2f       	mov	r19, r30
    8cf2:	32 1b       	sub	r19, r18
    8cf4:	34 17       	cp	r19, r20
    8cf6:	28 f4       	brcc	.+10     	; 0x8d02 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8cf8:	31 91       	ld	r19, Z+
    8cfa:	dc 01       	movw	r26, r24
    8cfc:	3d 93       	st	X+, r19
    8cfe:	cd 01       	movw	r24, r26
    8d00:	f7 cf       	rjmp	.-18     	; 0x8cf0 <LBCopyChars+0x4>
	}
}
    8d02:	08 95       	ret

00008d04 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    8d04:	af 92       	push	r10
    8d06:	bf 92       	push	r11
    8d08:	cf 92       	push	r12
    8d0a:	df 92       	push	r13
    8d0c:	ef 92       	push	r14
    8d0e:	ff 92       	push	r15
    8d10:	0f 93       	push	r16
    8d12:	1f 93       	push	r17
    8d14:	cf 93       	push	r28
    8d16:	df 93       	push	r29
    8d18:	1f 92       	push	r1
    8d1a:	cd b7       	in	r28, 0x3d	; 61
    8d1c:	de b7       	in	r29, 0x3e	; 62
    8d1e:	8a 01       	movw	r16, r20
	for (u8 i = 0; i < count; i++)
    8d20:	5a 01       	movw	r10, r20
	{
		PrintChar(x+i, y, txt[i]);
    8d22:	c6 2e       	mov	r12, r22
    8d24:	d1 2c       	mov	r13, r1
    8d26:	e8 2e       	mov	r14, r24
    8d28:	f1 2c       	mov	r15, r1
    8d2a:	e4 1a       	sub	r14, r20
    8d2c:	f5 0a       	sbc	r15, r21
    8d2e:	8a 2d       	mov	r24, r10
    8d30:	80 1b       	sub	r24, r16
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8d32:	82 17       	cp	r24, r18
    8d34:	60 f4       	brcc	.+24     	; 0x8d4e <LBPrintStr+0x4a>
    8d36:	c7 01       	movw	r24, r14
    8d38:	8a 0d       	add	r24, r10
    8d3a:	9b 1d       	adc	r25, r11
	{
		PrintChar(x+i, y, txt[i]);
    8d3c:	f5 01       	movw	r30, r10
    8d3e:	41 91       	ld	r20, Z+
    8d40:	5f 01       	movw	r10, r30
    8d42:	b6 01       	movw	r22, r12
    8d44:	29 83       	std	Y+1, r18	; 0x01
    8d46:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    8d4a:	29 81       	ldd	r18, Y+1	; 0x01
    8d4c:	f0 cf       	rjmp	.-32     	; 0x8d2e <LBPrintStr+0x2a>
	}
}
    8d4e:	0f 90       	pop	r0
    8d50:	df 91       	pop	r29
    8d52:	cf 91       	pop	r28
    8d54:	1f 91       	pop	r17
    8d56:	0f 91       	pop	r16
    8d58:	ff 90       	pop	r15
    8d5a:	ef 90       	pop	r14
    8d5c:	df 90       	pop	r13
    8d5e:	cf 90       	pop	r12
    8d60:	bf 90       	pop	r11
    8d62:	af 90       	pop	r10
    8d64:	08 95       	ret

00008d66 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8d66:	af 92       	push	r10
    8d68:	cf 92       	push	r12
    8d6a:	ef 92       	push	r14
    8d6c:	ff 92       	push	r15
    8d6e:	0f 93       	push	r16
    8d70:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    8d72:	70 e0       	ldi	r23, 0x00	; 0
    8d74:	f1 2c       	mov	r15, r1
    8d76:	fb 01       	movw	r30, r22
    8d78:	e2 0f       	add	r30, r18
    8d7a:	f1 1d       	adc	r31, r1
    8d7c:	ee 15       	cp	r30, r14
    8d7e:	ff 05       	cpc	r31, r15
    8d80:	a4 f0       	brlt	.+40     	; 0x8daa <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    8d82:	ea 0c       	add	r14, r10
    8d84:	f1 1c       	adc	r15, r1
    8d86:	e6 16       	cp	r14, r22
    8d88:	f7 06       	cpc	r15, r23
    8d8a:	7c f0       	brlt	.+30     	; 0x8daa <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8d8c:	28 2f       	mov	r18, r24
    8d8e:	30 e0       	ldi	r19, 0x00	; 0
    8d90:	10 e0       	ldi	r17, 0x00	; 0
    8d92:	c9 01       	movw	r24, r18
    8d94:	84 0f       	add	r24, r20
    8d96:	91 1d       	adc	r25, r1
    8d98:	80 17       	cp	r24, r16
    8d9a:	91 07       	cpc	r25, r17
    8d9c:	34 f0       	brlt	.+12     	; 0x8daa <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8d9e:	0c 0d       	add	r16, r12
    8da0:	11 1d       	adc	r17, r1
    8da2:	81 e0       	ldi	r24, 0x01	; 1
    8da4:	02 17       	cp	r16, r18
    8da6:	13 07       	cpc	r17, r19
    8da8:	0c f4       	brge	.+2      	; 0x8dac <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8daa:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8dac:	1f 91       	pop	r17
    8dae:	0f 91       	pop	r16
    8db0:	ff 90       	pop	r15
    8db2:	ef 90       	pop	r14
    8db4:	cf 90       	pop	r12
    8db6:	af 90       	pop	r10
    8db8:	08 95       	ret

00008dba <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8dba:	2f 92       	push	r2
    8dbc:	3f 92       	push	r3
    8dbe:	4f 92       	push	r4
    8dc0:	5f 92       	push	r5
    8dc2:	6f 92       	push	r6
    8dc4:	7f 92       	push	r7
    8dc6:	8f 92       	push	r8
    8dc8:	9f 92       	push	r9
    8dca:	af 92       	push	r10
    8dcc:	bf 92       	push	r11
    8dce:	cf 92       	push	r12
    8dd0:	df 92       	push	r13
    8dd2:	ef 92       	push	r14
    8dd4:	ff 92       	push	r15
    8dd6:	0f 93       	push	r16
    8dd8:	1f 93       	push	r17
    8dda:	cf 93       	push	r28
    8ddc:	df 93       	push	r29
    8dde:	00 d0       	rcall	.+0      	; 0x8de0 <LBLineIntersect+0x26>
    8de0:	00 d0       	rcall	.+0      	; 0x8de2 <LBLineIntersect+0x28>
    8de2:	cd b7       	in	r28, 0x3d	; 61
    8de4:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8de6:	f1 2c       	mov	r15, r1
    8de8:	b1 2c       	mov	r11, r1
    8dea:	ae 18       	sub	r10, r14
    8dec:	bf 08       	sbc	r11, r15
    8dee:	28 2e       	mov	r2, r24
    8df0:	31 2c       	mov	r3, r1
    8df2:	84 2f       	mov	r24, r20
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	82 19       	sub	r24, r2
    8df8:	93 09       	sbc	r25, r3
    8dfa:	9c 83       	std	Y+4, r25	; 0x04
    8dfc:	8b 83       	std	Y+3, r24	; 0x03
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8dfe:	80 2e       	mov	r8, r16
    8e00:	91 2c       	mov	r9, r1
    8e02:	d1 2c       	mov	r13, r1
    8e04:	c8 18       	sub	r12, r8
    8e06:	d9 08       	sbc	r13, r9
    8e08:	06 2f       	mov	r16, r22
    8e0a:	10 e0       	ldi	r17, 0x00	; 0
    8e0c:	e2 2f       	mov	r30, r18
    8e0e:	f0 e0       	ldi	r31, 0x00	; 0
    8e10:	fa 83       	std	Y+2, r31	; 0x02
    8e12:	e9 83       	std	Y+1, r30	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8e14:	9c 01       	movw	r18, r24
    8e16:	a2 9e       	mul	r10, r18
    8e18:	c0 01       	movw	r24, r0
    8e1a:	a3 9e       	mul	r10, r19
    8e1c:	90 0d       	add	r25, r0
    8e1e:	b2 9e       	mul	r11, r18
    8e20:	90 0d       	add	r25, r0
    8e22:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8e24:	a8 01       	movw	r20, r16
    8e26:	4e 1b       	sub	r20, r30
    8e28:	5f 0b       	sbc	r21, r31
    8e2a:	c4 9e       	mul	r12, r20
    8e2c:	90 01       	movw	r18, r0
    8e2e:	c5 9e       	mul	r12, r21
    8e30:	30 0d       	add	r19, r0
    8e32:	d4 9e       	mul	r13, r20
    8e34:	30 0d       	add	r19, r0
    8e36:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8e38:	82 0f       	add	r24, r18
    8e3a:	93 1f       	adc	r25, r19
    8e3c:	bc 01       	movw	r22, r24
    8e3e:	88 27       	eor	r24, r24
    8e40:	77 fd       	sbrc	r23, 7
    8e42:	80 95       	com	r24
    8e44:	98 2f       	mov	r25, r24
    8e46:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    8e4a:	2b 01       	movw	r4, r22
    8e4c:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8e4e:	20 e0       	ldi	r18, 0x00	; 0
    8e50:	30 e0       	ldi	r19, 0x00	; 0
    8e52:	a9 01       	movw	r20, r18
    8e54:	0e 94 3a 5a 	call	0xb474	; 0xb474 <__cmpsf2>
    8e58:	88 23       	and	r24, r24
    8e5a:	09 f4       	brne	.+2      	; 0x8e5e <LBLineIntersect+0xa4>
    8e5c:	6e c0       	rjmp	.+220    	; 0x8f3a <LBLineIntersect+0x180>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e5e:	c8 01       	movw	r24, r16
    8e60:	8e 19       	sub	r24, r14
    8e62:	9f 09       	sbc	r25, r15
    8e64:	7c 01       	movw	r14, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e66:	f4 01       	movw	r30, r8
    8e68:	e2 19       	sub	r30, r2
    8e6a:	f3 09       	sbc	r31, r3
    8e6c:	1f 01       	movw	r2, r30

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e6e:	ce 9c       	mul	r12, r14
    8e70:	c0 01       	movw	r24, r0
    8e72:	cf 9c       	mul	r12, r15
    8e74:	90 0d       	add	r25, r0
    8e76:	de 9c       	mul	r13, r14
    8e78:	90 0d       	add	r25, r0
    8e7a:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e7c:	ae 9e       	mul	r10, r30
    8e7e:	90 01       	movw	r18, r0
    8e80:	af 9e       	mul	r10, r31
    8e82:	30 0d       	add	r19, r0
    8e84:	be 9e       	mul	r11, r30
    8e86:	30 0d       	add	r19, r0
    8e88:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e8a:	82 0f       	add	r24, r18
    8e8c:	93 1f       	adc	r25, r19
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e8e:	bc 01       	movw	r22, r24
    8e90:	88 27       	eor	r24, r24
    8e92:	77 fd       	sbrc	r23, 7
    8e94:	80 95       	com	r24
    8e96:	98 2f       	mov	r25, r24
    8e98:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e9c:	a3 01       	movw	r20, r6
    8e9e:	92 01       	movw	r18, r4
    8ea0:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <__divsf3>
    8ea4:	4b 01       	movw	r8, r22
    8ea6:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8ea8:	20 e0       	ldi	r18, 0x00	; 0
    8eaa:	30 e0       	ldi	r19, 0x00	; 0
    8eac:	a9 01       	movw	r20, r18
    8eae:	0e 94 3a 5a 	call	0xb474	; 0xb474 <__cmpsf2>
    8eb2:	87 fd       	sbrc	r24, 7
    8eb4:	42 c0       	rjmp	.+132    	; 0x8f3a <LBLineIntersect+0x180>
    8eb6:	20 e0       	ldi	r18, 0x00	; 0
    8eb8:	30 e0       	ldi	r19, 0x00	; 0
    8eba:	40 e8       	ldi	r20, 0x80	; 128
    8ebc:	5f e3       	ldi	r21, 0x3F	; 63
    8ebe:	c5 01       	movw	r24, r10
    8ec0:	b4 01       	movw	r22, r8
    8ec2:	0e 94 84 5b 	call	0xb708	; 0xb708 <__gesf2>
    8ec6:	18 16       	cp	r1, r24
    8ec8:	c4 f1       	brlt	.+112    	; 0x8f3a <LBLineIntersect+0x180>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8eca:	2b 81       	ldd	r18, Y+3	; 0x03
    8ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    8ece:	2e 9d       	mul	r18, r14
    8ed0:	b0 01       	movw	r22, r0
    8ed2:	2f 9d       	mul	r18, r15
    8ed4:	70 0d       	add	r23, r0
    8ed6:	3e 9d       	mul	r19, r14
    8ed8:	70 0d       	add	r23, r0
    8eda:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8edc:	29 81       	ldd	r18, Y+1	; 0x01
    8ede:	3a 81       	ldd	r19, Y+2	; 0x02
    8ee0:	20 1b       	sub	r18, r16
    8ee2:	31 0b       	sbc	r19, r17
    8ee4:	22 9d       	mul	r18, r2
    8ee6:	c0 01       	movw	r24, r0
    8ee8:	23 9d       	mul	r18, r3
    8eea:	90 0d       	add	r25, r0
    8eec:	32 9d       	mul	r19, r2
    8eee:	90 0d       	add	r25, r0
    8ef0:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8ef2:	68 0f       	add	r22, r24
    8ef4:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8ef6:	88 27       	eor	r24, r24
    8ef8:	77 fd       	sbrc	r23, 7
    8efa:	80 95       	com	r24
    8efc:	98 2f       	mov	r25, r24
    8efe:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8f02:	a3 01       	movw	r20, r6
    8f04:	92 01       	movw	r18, r4
    8f06:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <__divsf3>
    8f0a:	6b 01       	movw	r12, r22
    8f0c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8f0e:	20 e0       	ldi	r18, 0x00	; 0
    8f10:	30 e0       	ldi	r19, 0x00	; 0
    8f12:	a9 01       	movw	r20, r18
    8f14:	0e 94 3a 5a 	call	0xb474	; 0xb474 <__cmpsf2>
    8f18:	87 fd       	sbrc	r24, 7
    8f1a:	0f c0       	rjmp	.+30     	; 0x8f3a <LBLineIntersect+0x180>
    8f1c:	11 e0       	ldi	r17, 0x01	; 1
    8f1e:	20 e0       	ldi	r18, 0x00	; 0
    8f20:	30 e0       	ldi	r19, 0x00	; 0
    8f22:	40 e8       	ldi	r20, 0x80	; 128
    8f24:	5f e3       	ldi	r21, 0x3F	; 63
    8f26:	c7 01       	movw	r24, r14
    8f28:	b6 01       	movw	r22, r12
    8f2a:	0e 94 84 5b 	call	0xb708	; 0xb708 <__gesf2>
    8f2e:	18 16       	cp	r1, r24
    8f30:	0c f0       	brlt	.+2      	; 0x8f34 <LBLineIntersect+0x17a>
    8f32:	10 e0       	ldi	r17, 0x00	; 0
    8f34:	81 e0       	ldi	r24, 0x01	; 1
    8f36:	81 27       	eor	r24, r17
    8f38:	01 c0       	rjmp	.+2      	; 0x8f3c <LBLineIntersect+0x182>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8f3a:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    8f3c:	0f 90       	pop	r0
    8f3e:	0f 90       	pop	r0
    8f40:	0f 90       	pop	r0
    8f42:	0f 90       	pop	r0
    8f44:	df 91       	pop	r29
    8f46:	cf 91       	pop	r28
    8f48:	1f 91       	pop	r17
    8f4a:	0f 91       	pop	r16
    8f4c:	ff 90       	pop	r15
    8f4e:	ef 90       	pop	r14
    8f50:	df 90       	pop	r13
    8f52:	cf 90       	pop	r12
    8f54:	bf 90       	pop	r11
    8f56:	af 90       	pop	r10
    8f58:	9f 90       	pop	r9
    8f5a:	8f 90       	pop	r8
    8f5c:	7f 90       	pop	r7
    8f5e:	6f 90       	pop	r6
    8f60:	5f 90       	pop	r5
    8f62:	4f 90       	pop	r4
    8f64:	3f 90       	pop	r3
    8f66:	2f 90       	pop	r2
    8f68:	08 95       	ret

00008f6a <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8f6a:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8f6c:	80 91 31 0b 	lds	r24, 0x0B31
    8f70:	2f ef       	ldi	r18, 0xFF	; 255
    8f72:	3f e7       	ldi	r19, 0x7F	; 127
    8f74:	08 2e       	mov	r0, r24
    8f76:	02 c0       	rjmp	.+4      	; 0x8f7c <LBRandom+0x12>
    8f78:	35 95       	asr	r19
    8f7a:	27 95       	ror	r18
    8f7c:	0a 94       	dec	r0
    8f7e:	e2 f7       	brpl	.-8      	; 0x8f78 <LBRandom+0xe>
	int delta = to - from;
    8f80:	6e 1b       	sub	r22, r30
    8f82:	7f 0b       	sbc	r23, r31

	shift_count++;
    8f84:	8f 5f       	subi	r24, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    8f86:	80 31       	cpi	r24, 0x10	; 16
    8f88:	18 f4       	brcc	.+6      	; 0x8f90 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8f8a:	80 93 31 0b 	sts	0x0B31, r24
    8f8e:	02 c0       	rjmp	.+4      	; 0x8f94 <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    8f90:	10 92 31 0b 	sts	0x0B31, r1

	return from + ((delta + shifted) % delta);
    8f94:	c9 01       	movw	r24, r18
    8f96:	86 0f       	add	r24, r22
    8f98:	97 1f       	adc	r25, r23
    8f9a:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
}
    8f9e:	8e 0f       	add	r24, r30
    8fa0:	9f 1f       	adc	r25, r31
    8fa2:	08 95       	ret

00008fa4 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8fa4:	cf 93       	push	r28
    8fa6:	df 93       	push	r29
    8fa8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8faa:	c0 e0       	ldi	r28, 0x00	; 0
    8fac:	cd 17       	cp	r28, r29
    8fae:	31 f0       	breq	.+12     	; 0x8fbc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8fb0:	8f ef       	ldi	r24, 0xFF	; 255
    8fb2:	9f ef       	ldi	r25, 0xFF	; 255
    8fb4:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8fb8:	cf 5f       	subi	r28, 0xFF	; 255
    8fba:	f8 cf       	rjmp	.-16     	; 0x8fac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8fbc:	df 91       	pop	r29
    8fbe:	cf 91       	pop	r28
    8fc0:	08 95       	ret

00008fc2 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    8fc2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    8fc4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8fc6:	14 86       	std	Z+12, r1	; 0x0c
    8fc8:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    8fca:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    8fcc:	73 e0       	ldi	r23, 0x03	; 3
    8fce:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8fd0:	65 e0       	ldi	r22, 0x05	; 5
    8fd2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    8fd4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8fd6:	4b e2       	ldi	r20, 0x2B	; 43
    8fd8:	51 e2       	ldi	r21, 0x21	; 33
    8fda:	56 83       	std	Z+6, r21	; 0x06
    8fdc:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8fde:	28 e2       	ldi	r18, 0x28	; 40
    8fe0:	31 e2       	ldi	r19, 0x21	; 33
    8fe2:	30 87       	std	Z+8, r19	; 0x08
    8fe4:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8fe6:	85 e2       	ldi	r24, 0x25	; 37
    8fe8:	91 e2       	ldi	r25, 0x21	; 33
    8fea:	92 87       	std	Z+10, r25	; 0x0a
    8fec:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8fee:	10 8e       	std	Z+24, r1	; 0x18
    8ff0:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    8ff2:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    8ff4:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8ff6:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    8ff8:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8ffa:	52 8b       	std	Z+18, r21	; 0x12
    8ffc:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8ffe:	34 8b       	std	Z+20, r19	; 0x14
    9000:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9002:	96 8b       	std	Z+22, r25	; 0x16
    9004:	85 8b       	std	Z+21, r24	; 0x15
    9006:	08 95       	ret

00009008 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9008:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    900a:	84 e6       	ldi	r24, 0x64	; 100
    900c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    900e:	10 82       	st	Z, r1
	s->active = 0;
    9010:	15 86       	std	Z+13, r1	; 0x0d
	s->distance = 0;
    9012:	16 86       	std	Z+14, r1	; 0x0e
	s->shot_type = shot_type;
    9014:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    9016:	84 e0       	ldi	r24, 0x04	; 4
    9018:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    901a:	61 11       	cpse	r22, r1
    901c:	02 c0       	rjmp	.+4      	; 0x9022 <init_shot_state+0x1a>
    901e:	81 e0       	ldi	r24, 0x01	; 1
    9020:	01 c0       	rjmp	.+2      	; 0x9024 <init_shot_state+0x1c>
    9022:	85 e0       	ldi	r24, 0x05	; 5
    9024:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    9026:	40 e0       	ldi	r20, 0x00	; 0
    9028:	50 e0       	ldi	r21, 0x00	; 0
    902a:	60 e7       	ldi	r22, 0x70	; 112
    902c:	73 e4       	ldi	r23, 0x43	; 67
    902e:	42 83       	std	Z+2, r20	; 0x02
    9030:	53 83       	std	Z+3, r21	; 0x03
    9032:	64 83       	std	Z+4, r22	; 0x04
    9034:	75 83       	std	Z+5, r23	; 0x05
	s->shared.y = 0;
    9036:	16 82       	std	Z+6, r1	; 0x06
    9038:	17 82       	std	Z+7, r1	; 0x07
    903a:	10 86       	std	Z+8, r1	; 0x08
    903c:	11 86       	std	Z+9, r1	; 0x09
    903e:	08 95       	ret

00009040 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9040:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9042:	17 86       	std	Z+15, r1	; 0x0f
	s->up_anim.anim_count = 2;
    9044:	82 e0       	ldi	r24, 0x02	; 2
    9046:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9048:	85 e0       	ldi	r24, 0x05	; 5
    904a:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frame_count = 0;
    904c:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    904e:	61 11       	cpse	r22, r1
    9050:	03 c0       	rjmp	.+6      	; 0x9058 <set_shot_animations+0x18>
    9052:	8b ec       	ldi	r24, 0xCB	; 203
    9054:	90 e2       	ldi	r25, 0x20	; 32
    9056:	02 c0       	rjmp	.+4      	; 0x905c <set_shot_animations+0x1c>
    9058:	88 ec       	ldi	r24, 0xC8	; 200
    905a:	90 e2       	ldi	r25, 0x20	; 32
    905c:	94 8b       	std	Z+20, r25	; 0x14
    905e:	83 8b       	std	Z+19, r24	; 0x13
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    9060:	61 11       	cpse	r22, r1
    9062:	03 c0       	rjmp	.+6      	; 0x906a <set_shot_animations+0x2a>
    9064:	8b ec       	ldi	r24, 0xCB	; 203
    9066:	90 e2       	ldi	r25, 0x20	; 32
    9068:	02 c0       	rjmp	.+4      	; 0x906e <set_shot_animations+0x2e>
    906a:	85 ec       	ldi	r24, 0xC5	; 197
    906c:	90 e2       	ldi	r25, 0x20	; 32
    906e:	96 8b       	std	Z+22, r25	; 0x16
    9070:	85 8b       	std	Z+21, r24	; 0x15
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    9072:	82 e0       	ldi	r24, 0x02	; 2
    9074:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9076:	85 e0       	ldi	r24, 0x05	; 5
    9078:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frame_count = 0;
    907a:	14 8e       	std	Z+28, r1	; 0x1c
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    907c:	61 11       	cpse	r22, r1
    907e:	03 c0       	rjmp	.+6      	; 0x9086 <set_shot_animations+0x46>
    9080:	8b ec       	ldi	r24, 0xCB	; 203
    9082:	90 e2       	ldi	r25, 0x20	; 32
    9084:	02 c0       	rjmp	.+4      	; 0x908a <set_shot_animations+0x4a>
    9086:	82 ec       	ldi	r24, 0xC2	; 194
    9088:	90 e2       	ldi	r25, 0x20	; 32
    908a:	96 8f       	std	Z+30, r25	; 0x1e
    908c:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    908e:	61 11       	cpse	r22, r1
    9090:	03 c0       	rjmp	.+6      	; 0x9098 <set_shot_animations+0x58>
    9092:	8b ec       	ldi	r24, 0xCB	; 203
    9094:	90 e2       	ldi	r25, 0x20	; 32
    9096:	02 c0       	rjmp	.+4      	; 0x909c <set_shot_animations+0x5c>
    9098:	8f eb       	ldi	r24, 0xBF	; 191
    909a:	90 e2       	ldi	r25, 0x20	; 32
    909c:	90 a3       	std	Z+32, r25	; 0x20
    909e:	87 8f       	std	Z+31, r24	; 0x1f
    90a0:	08 95       	ret

000090a2 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    90a2:	0f 93       	push	r16
    90a4:	1f 93       	push	r17
    90a6:	cf 93       	push	r28
    90a8:	df 93       	push	r29
    90aa:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    90ac:	8a e5       	ldi	r24, 0x5A	; 90
    90ae:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    90b0:	88 e7       	ldi	r24, 0x78	; 120
    90b2:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    90b4:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    90b6:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    90b8:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    90ba:	18 82       	st	Y, r1
	p->shared.speed = 0;
    90bc:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    90be:	82 e3       	ldi	r24, 0x32	; 50
    90c0:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    90c2:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    90c4:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    90c6:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    90c8:	fe 01       	movw	r30, r28
    90ca:	e0 5a       	subi	r30, 0xA0	; 160
    90cc:	ff 4f       	sbci	r31, 0xFF	; 255
    90ce:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    90d0:	fe 01       	movw	r30, r28
    90d2:	ef 59       	subi	r30, 0x9F	; 159
    90d4:	ff 4f       	sbci	r31, 0xFF	; 255
    90d6:	91 e0       	ldi	r25, 0x01	; 1
    90d8:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    90da:	fe 01       	movw	r30, r28
    90dc:	ee 59       	subi	r30, 0x9E	; 158
    90de:	ff 4f       	sbci	r31, 0xFF	; 255
    90e0:	85 e0       	ldi	r24, 0x05	; 5
    90e2:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    90e4:	fe 01       	movw	r30, r28
    90e6:	ed 59       	subi	r30, 0x9D	; 157
    90e8:	ff 4f       	sbci	r31, 0xFF	; 255
    90ea:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    90ec:	fe 01       	movw	r30, r28
    90ee:	ec 59       	subi	r30, 0x9C	; 156
    90f0:	ff 4f       	sbci	r31, 0xFF	; 255
    90f2:	71 83       	std	Z+1, r23	; 0x01
    90f4:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    90f6:	fe 01       	movw	r30, r28
    90f8:	e6 59       	subi	r30, 0x96	; 150
    90fa:	ff 4f       	sbci	r31, 0xFF	; 255
    90fc:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    90fe:	fe 01       	movw	r30, r28
    9100:	e5 59       	subi	r30, 0x95	; 149
    9102:	ff 4f       	sbci	r31, 0xFF	; 255
    9104:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9106:	fe 01       	movw	r30, r28
    9108:	e4 59       	subi	r30, 0x94	; 148
    910a:	ff 4f       	sbci	r31, 0xFF	; 255
    910c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    910e:	fe 01       	movw	r30, r28
    9110:	e3 59       	subi	r30, 0x93	; 147
    9112:	ff 4f       	sbci	r31, 0xFF	; 255
    9114:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9116:	fe 01       	movw	r30, r28
    9118:	e2 59       	subi	r30, 0x92	; 146
    911a:	ff 4f       	sbci	r31, 0xFF	; 255
    911c:	51 83       	std	Z+1, r21	; 0x01
    911e:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9120:	fe 01       	movw	r30, r28
    9122:	ec 58       	subi	r30, 0x8C	; 140
    9124:	ff 4f       	sbci	r31, 0xFF	; 255
    9126:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9128:	fe 01       	movw	r30, r28
    912a:	eb 58       	subi	r30, 0x8B	; 139
    912c:	ff 4f       	sbci	r31, 0xFF	; 255
    912e:	93 e0       	ldi	r25, 0x03	; 3
    9130:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9132:	fe 01       	movw	r30, r28
    9134:	ea 58       	subi	r30, 0x8A	; 138
    9136:	ff 4f       	sbci	r31, 0xFF	; 255
    9138:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    913a:	fe 01       	movw	r30, r28
    913c:	e9 58       	subi	r30, 0x89	; 137
    913e:	ff 4f       	sbci	r31, 0xFF	; 255
    9140:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9142:	fe 01       	movw	r30, r28
    9144:	e8 58       	subi	r30, 0x88	; 136
    9146:	ff 4f       	sbci	r31, 0xFF	; 255
    9148:	8a ed       	ldi	r24, 0xDA	; 218
    914a:	90 e2       	ldi	r25, 0x20	; 32
    914c:	91 83       	std	Z+1, r25	; 0x01
    914e:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9150:	fe 01       	movw	r30, r28
    9152:	e6 58       	subi	r30, 0x86	; 134
    9154:	ff 4f       	sbci	r31, 0xFF	; 255
    9156:	84 ed       	ldi	r24, 0xD4	; 212
    9158:	90 e2       	ldi	r25, 0x20	; 32
    915a:	91 83       	std	Z+1, r25	; 0x01
    915c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    915e:	fe 01       	movw	r30, r28
    9160:	e4 58       	subi	r30, 0x84	; 132
    9162:	ff 4f       	sbci	r31, 0xFF	; 255
    9164:	8e ec       	ldi	r24, 0xCE	; 206
    9166:	90 e2       	ldi	r25, 0x20	; 32
    9168:	91 83       	std	Z+1, r25	; 0x01
    916a:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    916c:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    916e:	8e 01       	movw	r16, r28
    9170:	06 5e       	subi	r16, 0xE6	; 230
    9172:	1f 4f       	sbci	r17, 0xFF	; 255
    9174:	60 e0       	ldi	r22, 0x00	; 0
    9176:	c8 01       	movw	r24, r16
    9178:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    917c:	60 e0       	ldi	r22, 0x00	; 0
    917e:	c8 01       	movw	r24, r16
    9180:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9184:	ed 96       	adiw	r28, 0x3d	; 61
    9186:	60 e0       	ldi	r22, 0x00	; 0
    9188:	ce 01       	movw	r24, r28
    918a:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    918e:	60 e0       	ldi	r22, 0x00	; 0
    9190:	ce 01       	movw	r24, r28
	}
}
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	1f 91       	pop	r17
    9198:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    919a:	0c 94 20 48 	jmp	0x9040	; 0x9040 <set_shot_animations>

0000919e <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    919e:	cf 93       	push	r28
    91a0:	df 93       	push	r29
    91a2:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    91a4:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    91a6:	60 e0       	ldi	r22, 0x00	; 0
    91a8:	4a 96       	adiw	r24, 0x1a	; 26
    91aa:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
    91ae:	60 e0       	ldi	r22, 0x00	; 0
    91b0:	ce 01       	movw	r24, r28
    91b2:	cd 96       	adiw	r24, 0x3d	; 61
	}
}
    91b4:	df 91       	pop	r29
    91b6:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    91b8:	0c 94 04 48 	jmp	0x9008	; 0x9008 <init_shot_state>

000091bc <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    91bc:	10 92 c2 0b 	sts	0x0BC2, r1
	game.selection = PVCPU;
    91c0:	10 92 c4 0b 	sts	0x0BC4, r1
	game.paused = 0;
    91c4:	10 92 c3 0b 	sts	0x0BC3, r1
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    91c8:	4e ef       	ldi	r20, 0xFE	; 254
    91ca:	50 e2       	ldi	r21, 0x20	; 32
    91cc:	6a e0       	ldi	r22, 0x0A	; 10
    91ce:	71 e2       	ldi	r23, 0x21	; 33
    91d0:	8e ed       	ldi	r24, 0xDE	; 222
    91d2:	9b e0       	ldi	r25, 0x0B	; 11
    91d4:	0e 94 51 48 	call	0x90a2	; 0x90a2 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    91d8:	46 ee       	ldi	r20, 0xE6	; 230
    91da:	50 e2       	ldi	r21, 0x20	; 32
    91dc:	62 ef       	ldi	r22, 0xF2	; 242
    91de:	70 e2       	ldi	r23, 0x20	; 32
    91e0:	81 e5       	ldi	r24, 0x51	; 81
    91e2:	9f e0       	ldi	r25, 0x0F	; 15
    91e4:	0c 94 51 48 	jmp	0x90a2	; 0x90a2 <init_player>

000091e8 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    91e8:	cf 93       	push	r28
    91ea:	df 93       	push	r29
    91ec:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    91ee:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    91f0:	69 89       	ldd	r22, Y+17	; 0x11
    91f2:	70 e0       	ldi	r23, 0x00	; 0
    91f4:	80 e0       	ldi	r24, 0x00	; 0
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	0e 94 d2 5a 	call	0xb5a4	; 0xb5a4 <__floatunsisf>
    91fc:	6a 83       	std	Y+2, r22	; 0x02
    91fe:	7b 83       	std	Y+3, r23	; 0x03
    9200:	8c 83       	std	Y+4, r24	; 0x04
    9202:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    9204:	6a 89       	ldd	r22, Y+18	; 0x12
    9206:	70 e0       	ldi	r23, 0x00	; 0
    9208:	80 e0       	ldi	r24, 0x00	; 0
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	0e 94 d2 5a 	call	0xb5a4	; 0xb5a4 <__floatunsisf>
    9210:	6e 83       	std	Y+6, r22	; 0x06
    9212:	7f 83       	std	Y+7, r23	; 0x07
    9214:	88 87       	std	Y+8, r24	; 0x08
    9216:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    9218:	18 82       	st	Y, r1
	player->shared.speed = 0;
    921a:	19 82       	std	Y+1, r1	; 0x01
	
}
    921c:	df 91       	pop	r29
    921e:	cf 91       	pop	r28
    9220:	08 95       	ret

00009222 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9222:	cf 93       	push	r28
    9224:	df 93       	push	r29
    9226:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9228:	bc 01       	movw	r22, r24
    922a:	88 81       	ld	r24, Y
    922c:	99 81       	ldd	r25, Y+1	; 0x01
    922e:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <EepromReadBlock>
	if (status == 0x03)
    9232:	83 30       	cpi	r24, 0x03	; 3
    9234:	29 f4       	brne	.+10     	; 0x9240 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9236:	ce 01       	movw	r24, r28
	}
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    923c:	0c 94 86 38 	jmp	0x710c	; 0x710c <EepromWriteBlock>
	}
}
    9240:	df 91       	pop	r29
    9242:	cf 91       	pop	r28
    9244:	08 95       	ret

00009246 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9246:	61 e0       	ldi	r22, 0x01	; 1
    9248:	83 e0       	ldi	r24, 0x03	; 3
    924a:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    924e:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9252:	60 e0       	ldi	r22, 0x00	; 0
    9254:	83 e0       	ldi	r24, 0x03	; 3
    9256:	0c 94 d1 45 	jmp	0x8ba2	; 0x8ba2 <FadeIn>

0000925a <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    925a:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    925c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    925e:	40 e0       	ldi	r20, 0x00	; 0
    9260:	60 e1       	ldi	r22, 0x10	; 16
    9262:	71 e2       	ldi	r23, 0x21	; 33
    9264:	8c 2f       	mov	r24, r28
    9266:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
    926a:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    926c:	cc 30       	cpi	r28, 0x0C	; 12
    926e:	b9 f7       	brne	.-18     	; 0x925e <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9270:	cf 91       	pop	r28
    9272:	08 95       	ret

00009274 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9274:	df 92       	push	r13
    9276:	ef 92       	push	r14
    9278:	ff 92       	push	r15
    927a:	0f 93       	push	r16
    927c:	1f 93       	push	r17
    927e:	cf 93       	push	r28
    9280:	df 93       	push	r29
    9282:	cd b7       	in	r28, 0x3d	; 61
    9284:	de b7       	in	r29, 0x3e	; 62
    9286:	28 97       	sbiw	r28, 0x08	; 8
    9288:	0f b6       	in	r0, 0x3f	; 63
    928a:	f8 94       	cli
    928c:	de bf       	out	0x3e, r29	; 62
    928e:	0f be       	out	0x3f, r0	; 63
    9290:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9292:	90 91 ec 0b 	lds	r25, 0x0BEC
    9296:	80 91 5f 0f 	lds	r24, 0x0F5F
    929a:	98 17       	cp	r25, r24
    929c:	28 f0       	brcs	.+10     	; 0x92a8 <save_score+0x34>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    929e:	e1 e5       	ldi	r30, 0x51	; 81
    92a0:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    92a2:	ae ed       	ldi	r26, 0xDE	; 222
    92a4:	bb e0       	ldi	r27, 0x0B	; 11
    92a6:	04 c0       	rjmp	.+8      	; 0x92b0 <save_score+0x3c>
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
    92a8:	ee ed       	ldi	r30, 0xDE	; 222
    92aa:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    92ac:	a1 e5       	ldi	r26, 0x51	; 81
    92ae:	bf e0       	ldi	r27, 0x0F	; 15
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    92b0:	1a 96       	adiw	r26, 0x0a	; 10
    92b2:	8c 91       	ld	r24, X
    92b4:	1a 97       	sbiw	r26, 0x0a	; 10
    92b6:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    92b8:	82 85       	ldd	r24, Z+10	; 0x0a
    92ba:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    92bc:	1e 96       	adiw	r26, 0x0e	; 14
    92be:	9c 91       	ld	r25, X
    92c0:	9b 83       	std	Y+3, r25	; 0x03
	save_score[3] = p_lose->score;
    92c2:	86 85       	ldd	r24, Z+14	; 0x0e
    92c4:	8c 83       	std	Y+4, r24	; 0x04
	save_delta = p_win->score - p_lose->score;
    92c6:	d9 2e       	mov	r13, r25
    92c8:	d8 1a       	sub	r13, r24
    92ca:	09 e0       	ldi	r16, 0x09	; 9
    92cc:	11 e0       	ldi	r17, 0x01	; 1
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    92ce:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    92d0:	88 23       	and	r24, r24
    92d2:	31 f0       	breq	.+12     	; 0x92e0 <save_score+0x6c>
		{
			LBCopyChars(tmp_score, &scores.data[i], 4);
    92d4:	44 e0       	ldi	r20, 0x04	; 4
    92d6:	78 01       	movw	r14, r16
    92d8:	83 e0       	ldi	r24, 0x03	; 3
    92da:	e8 1a       	sub	r14, r24
    92dc:	f1 08       	sbc	r15, r1
    92de:	0d c0       	rjmp	.+26     	; 0x92fa <save_score+0x86>
    92e0:	f8 01       	movw	r30, r16
    92e2:	31 97       	sbiw	r30, 0x01	; 1
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    92e4:	90 81       	ld	r25, Z
    92e6:	f8 01       	movw	r30, r16
    92e8:	20 81       	ld	r18, Z
    92ea:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    92ec:	9d 15       	cp	r25, r13
    92ee:	d0 f4       	brcc	.+52     	; 0x9324 <save_score+0xb0>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    92f0:	44 e0       	ldi	r20, 0x04	; 4
    92f2:	78 01       	movw	r14, r16
    92f4:	f3 e0       	ldi	r31, 0x03	; 3
    92f6:	ef 1a       	sub	r14, r31
    92f8:	f1 08       	sbc	r15, r1
    92fa:	b7 01       	movw	r22, r14
    92fc:	ce 01       	movw	r24, r28
    92fe:	05 96       	adiw	r24, 0x05	; 5
    9300:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    9304:	44 e0       	ldi	r20, 0x04	; 4
    9306:	be 01       	movw	r22, r28
    9308:	6f 5f       	subi	r22, 0xFF	; 255
    930a:	7f 4f       	sbci	r23, 0xFF	; 255
    930c:	c7 01       	movw	r24, r14
    930e:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    9312:	44 e0       	ldi	r20, 0x04	; 4
    9314:	be 01       	movw	r22, r28
    9316:	6b 5f       	subi	r22, 0xFB	; 251
    9318:	7f 4f       	sbci	r23, 0xFF	; 255
    931a:	ce 01       	movw	r24, r28
    931c:	01 96       	adiw	r24, 0x01	; 1
    931e:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				saved = 1;
    9322:	81 e0       	ldi	r24, 0x01	; 1
    9324:	0c 5f       	subi	r16, 0xFC	; 252
    9326:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    9328:	91 e0       	ldi	r25, 0x01	; 1
    932a:	05 32       	cpi	r16, 0x25	; 37
    932c:	19 07       	cpc	r17, r25
    932e:	81 f6       	brne	.-96     	; 0x92d0 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9330:	84 e0       	ldi	r24, 0x04	; 4
    9332:	91 e0       	ldi	r25, 0x01	; 1
    9334:	0e 94 86 38 	call	0x710c	; 0x710c <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9338:	28 96       	adiw	r28, 0x08	; 8
    933a:	0f b6       	in	r0, 0x3f	; 63
    933c:	f8 94       	cli
    933e:	de bf       	out	0x3e, r29	; 62
    9340:	0f be       	out	0x3f, r0	; 63
    9342:	cd bf       	out	0x3d, r28	; 61
    9344:	df 91       	pop	r29
    9346:	cf 91       	pop	r28
    9348:	1f 91       	pop	r17
    934a:	0f 91       	pop	r16
    934c:	ff 90       	pop	r15
    934e:	ef 90       	pop	r14
    9350:	df 90       	pop	r13
    9352:	08 95       	ret

00009354 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9354:	0f 93       	push	r16
    9356:	1f 93       	push	r17
    9358:	cf 93       	push	r28
    935a:	df 93       	push	r29
    935c:	8c 01       	movw	r16, r24
    935e:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    9360:	88 81       	ld	r24, Y
    9362:	81 30       	cpi	r24, 0x01	; 1
    9364:	69 f1       	breq	.+90     	; 0x93c0 <position_shot+0x6c>
    9366:	98 f0       	brcs	.+38     	; 0x938e <position_shot+0x3a>
    9368:	82 30       	cpi	r24, 0x02	; 2
    936a:	f1 f1       	breq	.+124    	; 0x93e8 <position_shot+0x94>
    936c:	83 30       	cpi	r24, 0x03	; 3
    936e:	09 f0       	breq	.+2      	; 0x9372 <position_shot+0x1e>
    9370:	59 c0       	rjmp	.+178    	; 0x9424 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9372:	f8 01       	movw	r30, r16
    9374:	42 81       	ldd	r20, Z+2	; 0x02
    9376:	53 81       	ldd	r21, Z+3	; 0x03
    9378:	64 81       	ldd	r22, Z+4	; 0x04
    937a:	75 81       	ldd	r23, Z+5	; 0x05
    937c:	4a 83       	std	Y+2, r20	; 0x02
    937e:	5b 83       	std	Y+3, r21	; 0x03
    9380:	6c 83       	std	Y+4, r22	; 0x04
    9382:	7d 83       	std	Y+5, r23	; 0x05
			shot->shared.y = player->shared.y + 4;
    9384:	20 e0       	ldi	r18, 0x00	; 0
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	40 e8       	ldi	r20, 0x80	; 128
    938a:	50 e4       	ldi	r21, 0x40	; 64
    938c:	41 c0       	rjmp	.+130    	; 0x9410 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    938e:	20 e0       	ldi	r18, 0x00	; 0
    9390:	30 e0       	ldi	r19, 0x00	; 0
    9392:	40 e8       	ldi	r20, 0x80	; 128
    9394:	50 e4       	ldi	r21, 0x40	; 64
    9396:	f8 01       	movw	r30, r16
    9398:	62 81       	ldd	r22, Z+2	; 0x02
    939a:	73 81       	ldd	r23, Z+3	; 0x03
    939c:	84 81       	ldd	r24, Z+4	; 0x04
    939e:	95 81       	ldd	r25, Z+5	; 0x05
    93a0:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    93a4:	6a 83       	std	Y+2, r22	; 0x02
    93a6:	7b 83       	std	Y+3, r23	; 0x03
    93a8:	8c 83       	std	Y+4, r24	; 0x04
    93aa:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y;
    93ac:	f8 01       	movw	r30, r16
    93ae:	86 81       	ldd	r24, Z+6	; 0x06
    93b0:	97 81       	ldd	r25, Z+7	; 0x07
    93b2:	a0 85       	ldd	r26, Z+8	; 0x08
    93b4:	b1 85       	ldd	r27, Z+9	; 0x09
    93b6:	8e 83       	std	Y+6, r24	; 0x06
    93b8:	9f 83       	std	Y+7, r25	; 0x07
    93ba:	a8 87       	std	Y+8, r26	; 0x08
    93bc:	b9 87       	std	Y+9, r27	; 0x09
			break;
    93be:	32 c0       	rjmp	.+100    	; 0x9424 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    93c0:	20 e0       	ldi	r18, 0x00	; 0
    93c2:	30 e0       	ldi	r19, 0x00	; 0
    93c4:	40 e0       	ldi	r20, 0x00	; 0
    93c6:	51 e4       	ldi	r21, 0x41	; 65
    93c8:	f8 01       	movw	r30, r16
    93ca:	62 81       	ldd	r22, Z+2	; 0x02
    93cc:	73 81       	ldd	r23, Z+3	; 0x03
    93ce:	84 81       	ldd	r24, Z+4	; 0x04
    93d0:	95 81       	ldd	r25, Z+5	; 0x05
    93d2:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    93d6:	6a 83       	std	Y+2, r22	; 0x02
    93d8:	7b 83       	std	Y+3, r23	; 0x03
    93da:	8c 83       	std	Y+4, r24	; 0x04
    93dc:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    93de:	20 e0       	ldi	r18, 0x00	; 0
    93e0:	30 e0       	ldi	r19, 0x00	; 0
    93e2:	40 e8       	ldi	r20, 0x80	; 128
    93e4:	50 e4       	ldi	r21, 0x40	; 64
    93e6:	13 c0       	rjmp	.+38     	; 0x940e <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    93e8:	20 e0       	ldi	r18, 0x00	; 0
    93ea:	30 e0       	ldi	r19, 0x00	; 0
    93ec:	40 e8       	ldi	r20, 0x80	; 128
    93ee:	50 e4       	ldi	r21, 0x40	; 64
    93f0:	f8 01       	movw	r30, r16
    93f2:	62 81       	ldd	r22, Z+2	; 0x02
    93f4:	73 81       	ldd	r23, Z+3	; 0x03
    93f6:	84 81       	ldd	r24, Z+4	; 0x04
    93f8:	95 81       	ldd	r25, Z+5	; 0x05
    93fa:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    93fe:	6a 83       	std	Y+2, r22	; 0x02
    9400:	7b 83       	std	Y+3, r23	; 0x03
    9402:	8c 83       	std	Y+4, r24	; 0x04
    9404:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 8;
    9406:	20 e0       	ldi	r18, 0x00	; 0
    9408:	30 e0       	ldi	r19, 0x00	; 0
    940a:	40 e0       	ldi	r20, 0x00	; 0
    940c:	51 e4       	ldi	r21, 0x41	; 65
    940e:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    9410:	66 81       	ldd	r22, Z+6	; 0x06
    9412:	77 81       	ldd	r23, Z+7	; 0x07
    9414:	80 85       	ldd	r24, Z+8	; 0x08
    9416:	91 85       	ldd	r25, Z+9	; 0x09
    9418:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    941c:	6e 83       	std	Y+6, r22	; 0x06
    941e:	7f 83       	std	Y+7, r23	; 0x07
    9420:	88 87       	std	Y+8, r24	; 0x08
    9422:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    9424:	df 91       	pop	r29
    9426:	cf 91       	pop	r28
    9428:	1f 91       	pop	r17
    942a:	0f 91       	pop	r16
    942c:	08 95       	ret

0000942e <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    942e:	0f 93       	push	r16
    9430:	1f 93       	push	r17
    9432:	cf 93       	push	r28
    9434:	df 93       	push	r29
    9436:	8c 01       	movw	r16, r24
    9438:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    943a:	ac 01       	movw	r20, r24
    943c:	45 5f       	subi	r20, 0xF5	; 245
    943e:	5f 4f       	sbci	r21, 0xFF	; 255
    9440:	23 e0       	ldi	r18, 0x03	; 3
    9442:	6e e0       	ldi	r22, 0x0E	; 14
    9444:	84 e0       	ldi	r24, 0x04	; 4
    9446:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(8, 14, strOwns);
    944a:	48 e6       	ldi	r20, 0x68	; 104
    944c:	52 e0       	ldi	r21, 0x02	; 2
    944e:	6e e0       	ldi	r22, 0x0E	; 14
    9450:	70 e0       	ldi	r23, 0x00	; 0
    9452:	88 e0       	ldi	r24, 0x08	; 8
    9454:	90 e0       	ldi	r25, 0x00	; 0
    9456:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    945a:	ae 01       	movw	r20, r28
    945c:	45 5f       	subi	r20, 0xF5	; 245
    945e:	5f 4f       	sbci	r21, 0xFF	; 255
    9460:	23 e0       	ldi	r18, 0x03	; 3
    9462:	6e e0       	ldi	r22, 0x0E	; 14
    9464:	8d e0       	ldi	r24, 0x0D	; 13
    9466:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(17, 14, strBy);
    946a:	45 e6       	ldi	r20, 0x65	; 101
    946c:	52 e0       	ldi	r21, 0x02	; 2
    946e:	6e e0       	ldi	r22, 0x0E	; 14
    9470:	70 e0       	ldi	r23, 0x00	; 0
    9472:	81 e1       	ldi	r24, 0x11	; 17
    9474:	90 e0       	ldi	r25, 0x00	; 0
    9476:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	PrintByte(22, 14, winner->level_score ,true);
    947a:	21 e0       	ldi	r18, 0x01	; 1
    947c:	f8 01       	movw	r30, r16
    947e:	47 85       	ldd	r20, Z+15	; 0x0f
    9480:	6e e0       	ldi	r22, 0x0E	; 14
    9482:	70 e0       	ldi	r23, 0x00	; 0
    9484:	86 e1       	ldi	r24, 0x16	; 22
    9486:	90 e0       	ldi	r25, 0x00	; 0
    9488:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
	PrintChar(23, 14, '-');
    948c:	4d e2       	ldi	r20, 0x2D	; 45
    948e:	6e e0       	ldi	r22, 0x0E	; 14
    9490:	70 e0       	ldi	r23, 0x00	; 0
    9492:	87 e1       	ldi	r24, 0x17	; 23
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    949a:	21 e0       	ldi	r18, 0x01	; 1
    949c:	4f 85       	ldd	r20, Y+15	; 0x0f
    949e:	6e e0       	ldi	r22, 0x0E	; 14
    94a0:	70 e0       	ldi	r23, 0x00	; 0
    94a2:	8a e1       	ldi	r24, 0x1A	; 26
    94a4:	90 e0       	ldi	r25, 0x00	; 0
}
    94a6:	df 91       	pop	r29
    94a8:	cf 91       	pop	r28
    94aa:	1f 91       	pop	r17
    94ac:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    94ae:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

000094b2 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    94b2:	0f 93       	push	r16
    94b4:	1f 93       	push	r17
    94b6:	cf 93       	push	r28
    94b8:	df 93       	push	r29
    94ba:	8c 01       	movw	r16, r24
    94bc:	eb 01       	movw	r28, r22
    Print(9, 13, strFinalScore);
    94be:	49 e5       	ldi	r20, 0x59	; 89
    94c0:	52 e0       	ldi	r21, 0x02	; 2
    94c2:	6d e0       	ldi	r22, 0x0D	; 13
    94c4:	70 e0       	ldi	r23, 0x00	; 0
    94c6:	89 e0       	ldi	r24, 0x09	; 9
    94c8:	90 e0       	ldi	r25, 0x00	; 0
    94ca:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    94ce:	a8 01       	movw	r20, r16
    94d0:	45 5f       	subi	r20, 0xF5	; 245
    94d2:	5f 4f       	sbci	r21, 0xFF	; 255
    94d4:	23 e0       	ldi	r18, 0x03	; 3
    94d6:	6e e0       	ldi	r22, 0x0E	; 14
    94d8:	84 e0       	ldi	r24, 0x04	; 4
    94da:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
    Print(8, 14, strOwns);
    94de:	48 e6       	ldi	r20, 0x68	; 104
    94e0:	52 e0       	ldi	r21, 0x02	; 2
    94e2:	6e e0       	ldi	r22, 0x0E	; 14
    94e4:	70 e0       	ldi	r23, 0x00	; 0
    94e6:	88 e0       	ldi	r24, 0x08	; 8
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    94ee:	ae 01       	movw	r20, r28
    94f0:	45 5f       	subi	r20, 0xF5	; 245
    94f2:	5f 4f       	sbci	r21, 0xFF	; 255
    94f4:	23 e0       	ldi	r18, 0x03	; 3
    94f6:	6e e0       	ldi	r22, 0x0E	; 14
    94f8:	8d e0       	ldi	r24, 0x0D	; 13
    94fa:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
    Print(17, 14, strBy);
    94fe:	45 e6       	ldi	r20, 0x65	; 101
    9500:	52 e0       	ldi	r21, 0x02	; 2
    9502:	6e e0       	ldi	r22, 0x0E	; 14
    9504:	70 e0       	ldi	r23, 0x00	; 0
    9506:	81 e1       	ldi	r24, 0x11	; 17
    9508:	90 e0       	ldi	r25, 0x00	; 0
    950a:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    PrintByte(22, 14, winner->score ,true);
    950e:	21 e0       	ldi	r18, 0x01	; 1
    9510:	f8 01       	movw	r30, r16
    9512:	46 85       	ldd	r20, Z+14	; 0x0e
    9514:	6e e0       	ldi	r22, 0x0E	; 14
    9516:	70 e0       	ldi	r23, 0x00	; 0
    9518:	86 e1       	ldi	r24, 0x16	; 22
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
    PrintChar(23, 14, '-');
    9520:	4d e2       	ldi	r20, 0x2D	; 45
    9522:	6e e0       	ldi	r22, 0x0E	; 14
    9524:	70 e0       	ldi	r23, 0x00	; 0
    9526:	87 e1       	ldi	r24, 0x17	; 23
    9528:	90 e0       	ldi	r25, 0x00	; 0
    952a:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    952e:	21 e0       	ldi	r18, 0x01	; 1
    9530:	4e 85       	ldd	r20, Y+14	; 0x0e
    9532:	6e e0       	ldi	r22, 0x0E	; 14
    9534:	70 e0       	ldi	r23, 0x00	; 0
    9536:	8a e1       	ldi	r24, 0x1A	; 26
    9538:	90 e0       	ldi	r25, 0x00	; 0
}
    953a:	df 91       	pop	r29
    953c:	cf 91       	pop	r28
    953e:	1f 91       	pop	r17
    9540:	0f 91       	pop	r16
    Print(8, 14, strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9542:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

00009546 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9546:	cf 93       	push	r28
    9548:	df 93       	push	r29
    954a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    954c:	ac 01       	movw	r20, r24
    954e:	45 5f       	subi	r20, 0xF5	; 245
    9550:	5f 4f       	sbci	r21, 0xFF	; 255
    9552:	23 e0       	ldi	r18, 0x03	; 3
    9554:	60 e0       	ldi	r22, 0x00	; 0
    9556:	8a e0       	ldi	r24, 0x0A	; 10
    9558:	8c 0f       	add	r24, r28
    955a:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(x, 0, strScore);
    955e:	d0 e0       	ldi	r29, 0x00	; 0
    9560:	4d ea       	ldi	r20, 0xAD	; 173
    9562:	51 e0       	ldi	r21, 0x01	; 1
    9564:	60 e0       	ldi	r22, 0x00	; 0
    9566:	70 e0       	ldi	r23, 0x00	; 0
    9568:	ce 01       	movw	r24, r28
    956a:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(x, 1, strTotal);
    956e:	46 ea       	ldi	r20, 0xA6	; 166
    9570:	51 e0       	ldi	r21, 0x01	; 1
    9572:	61 e0       	ldi	r22, 0x01	; 1
    9574:	70 e0       	ldi	r23, 0x00	; 0
    9576:	ce 01       	movw	r24, r28
	
}
    9578:	df 91       	pop	r29
    957a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    957c:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

00009580 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    9580:	0f 93       	push	r16
    9582:	1f 93       	push	r17
    9584:	cf 93       	push	r28
    9586:	df 93       	push	r29
    9588:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    958a:	c6 2f       	mov	r28, r22
    958c:	d0 e0       	ldi	r29, 0x00	; 0
    958e:	28 96       	adiw	r28, 0x08	; 8
    9590:	20 e0       	ldi	r18, 0x00	; 0
    9592:	fc 01       	movw	r30, r24
    9594:	47 85       	ldd	r20, Z+15	; 0x0f
    9596:	60 e0       	ldi	r22, 0x00	; 0
    9598:	70 e0       	ldi	r23, 0x00	; 0
    959a:	ce 01       	movw	r24, r28
    959c:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    95a0:	20 e0       	ldi	r18, 0x00	; 0
    95a2:	f8 01       	movw	r30, r16
    95a4:	46 85       	ldd	r20, Z+14	; 0x0e
    95a6:	61 e0       	ldi	r22, 0x01	; 1
    95a8:	70 e0       	ldi	r23, 0x00	; 0
    95aa:	ce 01       	movw	r24, r28
}
    95ac:	df 91       	pop	r29
    95ae:	cf 91       	pop	r28
    95b0:	1f 91       	pop	r17
    95b2:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    95b4:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

000095b8 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    95b8:	cf 93       	push	r28
    95ba:	df 93       	push	r29
    95bc:	ec 01       	movw	r28, r24
    95be:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    95c0:	9c 89       	ldd	r25, Y+20	; 0x14
    95c2:	9a 35       	cpi	r25, 0x5A	; 90
    95c4:	99 f0       	breq	.+38     	; 0x95ec <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    95c6:	91 11       	cpse	r25, r1
    95c8:	0c c0       	rjmp	.+24     	; 0x95e2 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    95ca:	4d 89       	ldd	r20, Y+21	; 0x15
    95cc:	9f e0       	ldi	r25, 0x0F	; 15
    95ce:	49 9f       	mul	r20, r25
    95d0:	a0 01       	movw	r20, r0
    95d2:	11 24       	eor	r1, r1
    95d4:	4d 53       	subi	r20, 0x3D	; 61
    95d6:	5e 4f       	sbci	r21, 0xFE	; 254
    95d8:	62 e0       	ldi	r22, 0x02	; 2
    95da:	70 e0       	ldi	r23, 0x00	; 0
    95dc:	90 e0       	ldi	r25, 0x00	; 0
    95de:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    95e2:	8c 89       	ldd	r24, Y+20	; 0x14
    95e4:	8f 5f       	subi	r24, 0xFF	; 255
    95e6:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    95e8:	41 e0       	ldi	r20, 0x01	; 1
    95ea:	0a c0       	rjmp	.+20     	; 0x9600 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    95ec:	44 23       	and	r20, r20
    95ee:	41 f0       	breq	.+16     	; 0x9600 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    95f0:	44 eb       	ldi	r20, 0xB4	; 180
    95f2:	51 e0       	ldi	r21, 0x01	; 1
    95f4:	62 e0       	ldi	r22, 0x02	; 2
    95f6:	70 e0       	ldi	r23, 0x00	; 0
    95f8:	90 e0       	ldi	r25, 0x00	; 0
    95fa:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    95fe:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    9600:	84 2f       	mov	r24, r20
    9602:	df 91       	pop	r29
    9604:	cf 91       	pop	r28
    9606:	08 95       	ret

00009608 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    9608:	ef 92       	push	r14
    960a:	ff 92       	push	r15
    960c:	0f 93       	push	r16
    960e:	1f 93       	push	r17
    9610:	cf 93       	push	r28
    9612:	df 93       	push	r29
    9614:	1f 92       	push	r1
    9616:	cd b7       	in	r28, 0x3d	; 61
    9618:	de b7       	in	r29, 0x3e	; 62
    961a:	7c 01       	movw	r14, r24
    961c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    961e:	fc 01       	movw	r30, r24
    9620:	66 81       	ldd	r22, Z+6	; 0x06
    9622:	77 81       	ldd	r23, Z+7	; 0x07
    9624:	80 85       	ldd	r24, Z+8	; 0x08
    9626:	91 85       	ldd	r25, Z+9	; 0x09
    9628:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    962c:	46 2f       	mov	r20, r22
    962e:	f7 01       	movw	r30, r14
    9630:	62 81       	ldd	r22, Z+2	; 0x02
    9632:	73 81       	ldd	r23, Z+3	; 0x03
    9634:	84 81       	ldd	r24, Z+4	; 0x04
    9636:	95 81       	ldd	r25, Z+5	; 0x05
    9638:	49 83       	std	Y+1, r20	; 0x01
    963a:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    963e:	02 e0       	ldi	r16, 0x02	; 2
    9640:	22 e0       	ldi	r18, 0x02	; 2
    9642:	49 81       	ldd	r20, Y+1	; 0x01
    9644:	81 2f       	mov	r24, r17
    9646:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
}
    964a:	0f 90       	pop	r0
    964c:	df 91       	pop	r29
    964e:	cf 91       	pop	r28
    9650:	1f 91       	pop	r17
    9652:	0f 91       	pop	r16
    9654:	ff 90       	pop	r15
    9656:	ef 90       	pop	r14
    9658:	08 95       	ret

0000965a <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    965a:	cf 92       	push	r12
    965c:	df 92       	push	r13
    965e:	ff 92       	push	r15
    9660:	0f 93       	push	r16
    9662:	1f 93       	push	r17
    9664:	cf 93       	push	r28
    9666:	df 93       	push	r29
    9668:	1f 92       	push	r1
    966a:	cd b7       	in	r28, 0x3d	; 61
    966c:	de b7       	in	r29, 0x3e	; 62
    966e:	f6 2e       	mov	r15, r22
	if (player->active_shots > 0)
    9670:	fc 01       	movw	r30, r24
    9672:	20 89       	ldd	r18, Z+16	; 0x10
    9674:	22 23       	and	r18, r18
    9676:	f9 f0       	breq	.+62     	; 0x96b6 <render_shot+0x5c>
    9678:	6c 01       	movw	r12, r24
    967a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    967c:	f6 01       	movw	r30, r12
    967e:	60 a1       	ldd	r22, Z+32	; 0x20
    9680:	71 a1       	ldd	r23, Z+33	; 0x21
    9682:	82 a1       	ldd	r24, Z+34	; 0x22
    9684:	93 a1       	ldd	r25, Z+35	; 0x23
    9686:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    968a:	46 2f       	mov	r20, r22
    968c:	f6 01       	movw	r30, r12
    968e:	64 8d       	ldd	r22, Z+28	; 0x1c
    9690:	75 8d       	ldd	r23, Z+29	; 0x1d
    9692:	86 8d       	ldd	r24, Z+30	; 0x1e
    9694:	97 8d       	ldd	r25, Z+31	; 0x1f
    9696:	49 83       	std	Y+1, r20	; 0x01
    9698:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    969c:	01 e0       	ldi	r16, 0x01	; 1
    969e:	21 e0       	ldi	r18, 0x01	; 1
    96a0:	49 81       	ldd	r20, Y+1	; 0x01
    96a2:	81 2f       	mov	r24, r17
    96a4:	8f 0d       	add	r24, r15
    96a6:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    96aa:	1f 5f       	subi	r17, 0xFF	; 255
    96ac:	f3 e2       	ldi	r31, 0x23	; 35
    96ae:	cf 0e       	add	r12, r31
    96b0:	d1 1c       	adc	r13, r1
    96b2:	12 30       	cpi	r17, 0x02	; 2
    96b4:	19 f7       	brne	.-58     	; 0x967c <render_shot+0x22>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    96b6:	0f 90       	pop	r0
    96b8:	df 91       	pop	r29
    96ba:	cf 91       	pop	r28
    96bc:	1f 91       	pop	r17
    96be:	0f 91       	pop	r16
    96c0:	ff 90       	pop	r15
    96c2:	df 90       	pop	r13
    96c4:	cf 90       	pop	r12
    96c6:	08 95       	ret

000096c8 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    96c8:	df 92       	push	r13
    96ca:	ef 92       	push	r14
    96cc:	ff 92       	push	r15
    96ce:	0f 93       	push	r16
    96d0:	1f 93       	push	r17
    96d2:	cf 93       	push	r28
    96d4:	df 93       	push	r29
    96d6:	1f 92       	push	r1
    96d8:	cd b7       	in	r28, 0x3d	; 61
    96da:	de b7       	in	r29, 0x3e	; 62
    96dc:	8c 01       	movw	r16, r24
    96de:	0f 5f       	subi	r16, 0xFF	; 255
    96e0:	1f 4f       	sbci	r17, 0xFF	; 255
    96e2:	82 e0       	ldi	r24, 0x02	; 2
    96e4:	d8 2e       	mov	r13, r24
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    96e6:	9e e1       	ldi	r25, 0x1E	; 30
    96e8:	e9 2e       	mov	r14, r25
    96ea:	f1 2c       	mov	r15, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    96ec:	f8 01       	movw	r30, r16
    96ee:	82 85       	ldd	r24, Z+10	; 0x0a
    96f0:	93 85       	ldd	r25, Z+11	; 0x0b
    96f2:	89 2b       	or	r24, r25
    96f4:	e1 f0       	breq	.+56     	; 0x972e <render_tile_explosions+0x66>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    96f6:	be 01       	movw	r22, r28
    96f8:	6f 5f       	subi	r22, 0xFF	; 255
    96fa:	7f 4f       	sbci	r23, 0xFF	; 255
    96fc:	c8 01       	movw	r24, r16
    96fe:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    9702:	9c 01       	movw	r18, r24
			if (looped)
    9704:	49 81       	ldd	r20, Y+1	; 0x01
    9706:	f8 01       	movw	r30, r16
    9708:	82 85       	ldd	r24, Z+10	; 0x0a
    970a:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    970c:	b7 01       	movw	r22, r14
    970e:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9712:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    9714:	44 23       	and	r20, r20
    9716:	41 f0       	breq	.+16     	; 0x9728 <render_tile_explosions+0x60>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9718:	40 e0       	ldi	r20, 0x00	; 0
    971a:	50 e0       	ldi	r21, 0x00	; 0
    971c:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
				ta->anims[i].tile_index = 0;
    9720:	f8 01       	movw	r30, r16
    9722:	13 86       	std	Z+11, r1	; 0x0b
    9724:	12 86       	std	Z+10, r1	; 0x0a
    9726:	03 c0       	rjmp	.+6      	; 0x972e <render_tile_explosions+0x66>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9728:	a9 01       	movw	r20, r18
    972a:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
    972e:	da 94       	dec	r13
    9730:	04 5f       	subi	r16, 0xF4	; 244
    9732:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9734:	d1 10       	cpse	r13, r1
    9736:	da cf       	rjmp	.-76     	; 0x96ec <render_tile_explosions+0x24>
						(const char*) map
				);
			}
		}
	}
}
    9738:	0f 90       	pop	r0
    973a:	df 91       	pop	r29
    973c:	cf 91       	pop	r28
    973e:	1f 91       	pop	r17
    9740:	0f 91       	pop	r16
    9742:	ff 90       	pop	r15
    9744:	ef 90       	pop	r14
    9746:	df 90       	pop	r13
    9748:	08 95       	ret

0000974a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    974a:	ff 92       	push	r15
    974c:	0f 93       	push	r16
    974e:	1f 93       	push	r17
    9750:	cf 93       	push	r28
    9752:	df 93       	push	r29
    9754:	1f 92       	push	r1
    9756:	cd b7       	in	r28, 0x3d	; 61
    9758:	de b7       	in	r29, 0x3e	; 62
    975a:	8c 01       	movw	r16, r24
    975c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    975e:	fc 01       	movw	r30, r24
    9760:	83 89       	ldd	r24, Z+19	; 0x13
    9762:	80 ff       	sbrs	r24, 0
    9764:	18 c0       	rjmp	.+48     	; 0x9796 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9766:	be 01       	movw	r22, r28
    9768:	6f 5f       	subi	r22, 0xFF	; 255
    976a:	7f 4f       	sbci	r23, 0xFF	; 255
    976c:	c8 01       	movw	r24, r16
    976e:	8c 58       	subi	r24, 0x8C	; 140
    9770:	9f 4f       	sbci	r25, 0xFF	; 255
    9772:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9776:	29 81       	ldd	r18, Y+1	; 0x01
    9778:	22 23       	and	r18, r18
    977a:	09 f4       	brne	.+2      	; 0x977e <tank_map+0x34>
    977c:	5a c0       	rjmp	.+180    	; 0x9832 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    977e:	f8 01       	movw	r30, r16
    9780:	93 89       	ldd	r25, Z+19	; 0x13
    9782:	81 e0       	ldi	r24, 0x01	; 1
    9784:	98 27       	eor	r25, r24
    9786:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9788:	c8 01       	movw	r24, r16
    978a:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    978e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9790:	83 e1       	ldi	r24, 0x13	; 19
    9792:	91 e2       	ldi	r25, 0x21	; 33
    9794:	4f c0       	rjmp	.+158    	; 0x9834 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9796:	f8 01       	movw	r30, r16
    9798:	86 89       	ldd	r24, Z+22	; 0x16
    979a:	88 37       	cpi	r24, 0x78	; 120
    979c:	11 f0       	breq	.+4      	; 0x97a2 <tank_map+0x58>
		{
			player->grace_frame++;
    979e:	8f 5f       	subi	r24, 0xFF	; 255
    97a0:	86 8b       	std	Z+22, r24	; 0x16
		}
		switch (player->shared.direction)
    97a2:	f8 01       	movw	r30, r16
    97a4:	90 81       	ld	r25, Z
    97a6:	91 30       	cpi	r25, 0x01	; 1
    97a8:	79 f0       	breq	.+30     	; 0x97c8 <tank_map+0x7e>
    97aa:	f8 f0       	brcs	.+62     	; 0x97ea <tank_map+0xa0>
    97ac:	92 30       	cpi	r25, 0x02	; 2
    97ae:	99 f0       	breq	.+38     	; 0x97d6 <tank_map+0x8c>
    97b0:	93 30       	cpi	r25, 0x03	; 3
    97b2:	d9 f4       	brne	.+54     	; 0x97ea <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    97b4:	be 01       	movw	r22, r28
    97b6:	6f 5f       	subi	r22, 0xFF	; 255
    97b8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ba:	c8 01       	movw	r24, r16
    97bc:	86 59       	subi	r24, 0x96	; 150
    97be:	9f 4f       	sbci	r25, 0xFF	; 255
    97c0:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97c4:	41 e0       	ldi	r20, 0x01	; 1
    97c6:	1a c0       	rjmp	.+52     	; 0x97fc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    97c8:	be 01       	movw	r22, r28
    97ca:	6f 5f       	subi	r22, 0xFF	; 255
    97cc:	7f 4f       	sbci	r23, 0xFF	; 255
    97ce:	c8 01       	movw	r24, r16
    97d0:	86 59       	subi	r24, 0x96	; 150
    97d2:	9f 4f       	sbci	r25, 0xFF	; 255
    97d4:	10 c0       	rjmp	.+32     	; 0x97f6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    97d6:	be 01       	movw	r22, r28
    97d8:	6f 5f       	subi	r22, 0xFF	; 255
    97da:	7f 4f       	sbci	r23, 0xFF	; 255
    97dc:	c8 01       	movw	r24, r16
    97de:	80 5a       	subi	r24, 0xA0	; 160
    97e0:	9f 4f       	sbci	r25, 0xFF	; 255
    97e2:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97e6:	42 e0       	ldi	r20, 0x02	; 2
    97e8:	09 c0       	rjmp	.+18     	; 0x97fc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    97ea:	be 01       	movw	r22, r28
    97ec:	6f 5f       	subi	r22, 0xFF	; 255
    97ee:	7f 4f       	sbci	r23, 0xFF	; 255
    97f0:	c8 01       	movw	r24, r16
    97f2:	80 5a       	subi	r24, 0xA0	; 160
    97f4:	9f 4f       	sbci	r25, 0xFF	; 255
    97f6:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97fa:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    97fc:	f8 01       	movw	r30, r16
    97fe:	26 89       	ldd	r18, Z+22	; 0x16
    9800:	28 37       	cpi	r18, 0x78	; 120
    9802:	31 f0       	breq	.+12     	; 0x9810 <tank_map+0xc6>
    9804:	20 91 30 0b 	lds	r18, 0x0B30
    9808:	22 23       	and	r18, r18
    980a:	11 f0       	breq	.+4      	; 0x9810 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    980c:	83 e1       	ldi	r24, 0x13	; 19
    980e:	91 e2       	ldi	r25, 0x21	; 33
		}
		toggle_counter--;
    9810:	20 91 03 01 	lds	r18, 0x0103
    9814:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    9816:	19 f0       	breq	.+6      	; 0x981e <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    9818:	20 93 03 01 	sts	0x0103, r18
    981c:	0b c0       	rjmp	.+22     	; 0x9834 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    981e:	24 e1       	ldi	r18, 0x14	; 20
    9820:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9824:	20 91 30 0b 	lds	r18, 0x0B30
    9828:	31 e0       	ldi	r19, 0x01	; 1
    982a:	23 27       	eor	r18, r19
    982c:	20 93 30 0b 	sts	0x0B30, r18
    9830:	01 c0       	rjmp	.+2      	; 0x9834 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9832:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9834:	bc 01       	movw	r22, r24
    9836:	8f 2d       	mov	r24, r15
    9838:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    983c:	84 e0       	ldi	r24, 0x04	; 4
    983e:	8f 0d       	add	r24, r15
    9840:	0f 90       	pop	r0
    9842:	df 91       	pop	r29
    9844:	cf 91       	pop	r28
    9846:	1f 91       	pop	r17
    9848:	0f 91       	pop	r16
    984a:	ff 90       	pop	r15
    984c:	08 95       	ret

0000984e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    984e:	ef 92       	push	r14
    9850:	ff 92       	push	r15
    9852:	0f 93       	push	r16
    9854:	1f 93       	push	r17
    9856:	cf 93       	push	r28
    9858:	df 93       	push	r29
    985a:	00 d0       	rcall	.+0      	; 0x985c <shot_map+0xe>
    985c:	cd b7       	in	r28, 0x3d	; 61
    985e:	de b7       	in	r29, 0x3e	; 62
    9860:	e6 2e       	mov	r14, r22
	char looped = 0;
    9862:	19 82       	std	Y+1, r1	; 0x01
    9864:	8c 01       	movw	r16, r24
    9866:	07 5d       	subi	r16, 0xD7	; 215
    9868:	1f 4f       	sbci	r17, 0xFF	; 255
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    986a:	f1 2c       	mov	r15, r1

char shot_map(Player* player, char sprite_index)
{
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
    986c:	20 e0       	ldi	r18, 0x00	; 0
    986e:	f8 01       	movw	r30, r16
    9870:	32 97       	sbiw	r30, 0x02	; 2
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9872:	80 81       	ld	r24, Z
    9874:	88 23       	and	r24, r24
    9876:	49 f1       	breq	.+82     	; 0x98ca <shot_map+0x7c>
    9878:	f8 01       	movw	r30, r16
    987a:	3f 97       	sbiw	r30, 0x0f	; 15
		{
			switch (shot->shared.direction)
    987c:	90 81       	ld	r25, Z
    987e:	91 30       	cpi	r25, 0x01	; 1
    9880:	71 f0       	breq	.+28     	; 0x989e <shot_map+0x50>
    9882:	f0 f0       	brcs	.+60     	; 0x98c0 <shot_map+0x72>
    9884:	92 30       	cpi	r25, 0x02	; 2
    9886:	a1 f0       	breq	.+40     	; 0x98b0 <shot_map+0x62>
    9888:	93 30       	cpi	r25, 0x03	; 3
    988a:	d1 f4       	brne	.+52     	; 0x98c0 <shot_map+0x72>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    988c:	be 01       	movw	r22, r28
    988e:	6f 5f       	subi	r22, 0xFF	; 255
    9890:	7f 4f       	sbci	r23, 0xFF	; 255
    9892:	c8 01       	movw	r24, r16
    9894:	0a 96       	adiw	r24, 0x0a	; 10
    9896:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    989a:	21 e0       	ldi	r18, 0x01	; 1
    989c:	18 c0       	rjmp	.+48     	; 0x98ce <shot_map+0x80>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    989e:	be 01       	movw	r22, r28
    98a0:	6f 5f       	subi	r22, 0xFF	; 255
    98a2:	7f 4f       	sbci	r23, 0xFF	; 255
    98a4:	c8 01       	movw	r24, r16
    98a6:	0a 96       	adiw	r24, 0x0a	; 10
    98a8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    98ac:	20 e0       	ldi	r18, 0x00	; 0
    98ae:	0f c0       	rjmp	.+30     	; 0x98ce <shot_map+0x80>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    98b0:	be 01       	movw	r22, r28
    98b2:	6f 5f       	subi	r22, 0xFF	; 255
    98b4:	7f 4f       	sbci	r23, 0xFF	; 255
    98b6:	c8 01       	movw	r24, r16
    98b8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    98bc:	22 e0       	ldi	r18, 0x02	; 2
    98be:	07 c0       	rjmp	.+14     	; 0x98ce <shot_map+0x80>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    98c0:	be 01       	movw	r22, r28
    98c2:	6f 5f       	subi	r22, 0xFF	; 255
    98c4:	7f 4f       	sbci	r23, 0xFF	; 255
    98c6:	c8 01       	movw	r24, r16
    98c8:	ef cf       	rjmp	.-34     	; 0x98a8 <shot_map+0x5a>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    98ca:	83 e1       	ldi	r24, 0x13	; 19
    98cc:	91 e2       	ldi	r25, 0x21	; 33
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    98ce:	42 2f       	mov	r20, r18
    98d0:	bc 01       	movw	r22, r24
    98d2:	8f 2d       	mov	r24, r15
    98d4:	8e 0d       	add	r24, r14
    98d6:	2a 83       	std	Y+2, r18	; 0x02
    98d8:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    98dc:	f3 94       	inc	r15
    98de:	0d 5d       	subi	r16, 0xDD	; 221
    98e0:	1f 4f       	sbci	r17, 0xFF	; 255
    98e2:	2a 81       	ldd	r18, Y+2	; 0x02
    98e4:	82 e0       	ldi	r24, 0x02	; 2
    98e6:	f8 12       	cpse	r15, r24
    98e8:	c2 cf       	rjmp	.-124    	; 0x986e <shot_map+0x20>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    98ea:	8e 0d       	add	r24, r14
    98ec:	0f 90       	pop	r0
    98ee:	0f 90       	pop	r0
    98f0:	df 91       	pop	r29
    98f2:	cf 91       	pop	r28
    98f4:	1f 91       	pop	r17
    98f6:	0f 91       	pop	r16
    98f8:	ff 90       	pop	r15
    98fa:	ef 90       	pop	r14
    98fc:	08 95       	ret

000098fe <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    98fe:	cf 93       	push	r28
    9900:	df 93       	push	r29
    9902:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9904:	88 81       	ld	r24, Y
    9906:	81 11       	cpse	r24, r1
    9908:	15 c0       	rjmp	.+42     	; 0x9934 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    990a:	69 81       	ldd	r22, Y+1	; 0x01
    990c:	70 e0       	ldi	r23, 0x00	; 0
    990e:	80 e0       	ldi	r24, 0x00	; 0
    9910:	90 e0       	ldi	r25, 0x00	; 0
    9912:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    9916:	25 e6       	ldi	r18, 0x65	; 101
    9918:	38 e8       	ldi	r19, 0x88	; 136
    991a:	48 e8       	ldi	r20, 0x88	; 136
    991c:	5c e3       	ldi	r21, 0x3C	; 60
    991e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9922:	9b 01       	movw	r18, r22
    9924:	ac 01       	movw	r20, r24
    9926:	6e 81       	ldd	r22, Y+6	; 0x06
    9928:	7f 81       	ldd	r23, Y+7	; 0x07
    992a:	88 85       	ldd	r24, Y+8	; 0x08
    992c:	99 85       	ldd	r25, Y+9	; 0x09
    992e:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    9932:	2d c0       	rjmp	.+90     	; 0x998e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    9934:	81 30       	cpi	r24, 0x01	; 1
    9936:	a9 f4       	brne	.+42     	; 0x9962 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9938:	69 81       	ldd	r22, Y+1	; 0x01
    993a:	70 e0       	ldi	r23, 0x00	; 0
    993c:	80 e0       	ldi	r24, 0x00	; 0
    993e:	90 e0       	ldi	r25, 0x00	; 0
    9940:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    9944:	25 e6       	ldi	r18, 0x65	; 101
    9946:	38 e8       	ldi	r19, 0x88	; 136
    9948:	48 e8       	ldi	r20, 0x88	; 136
    994a:	5c e3       	ldi	r21, 0x3C	; 60
    994c:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9950:	9b 01       	movw	r18, r22
    9952:	ac 01       	movw	r20, r24
    9954:	6a 81       	ldd	r22, Y+2	; 0x02
    9956:	7b 81       	ldd	r23, Y+3	; 0x03
    9958:	8c 81       	ldd	r24, Y+4	; 0x04
    995a:	9d 81       	ldd	r25, Y+5	; 0x05
    995c:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    9960:	31 c0       	rjmp	.+98     	; 0x99c4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    9962:	82 30       	cpi	r24, 0x02	; 2
    9964:	c9 f4       	brne	.+50     	; 0x9998 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9966:	69 81       	ldd	r22, Y+1	; 0x01
    9968:	70 e0       	ldi	r23, 0x00	; 0
    996a:	80 e0       	ldi	r24, 0x00	; 0
    996c:	90 e0       	ldi	r25, 0x00	; 0
    996e:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    9972:	25 e6       	ldi	r18, 0x65	; 101
    9974:	38 e8       	ldi	r19, 0x88	; 136
    9976:	48 e8       	ldi	r20, 0x88	; 136
    9978:	5c e3       	ldi	r21, 0x3C	; 60
    997a:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    997e:	9b 01       	movw	r18, r22
    9980:	ac 01       	movw	r20, r24
    9982:	6e 81       	ldd	r22, Y+6	; 0x06
    9984:	7f 81       	ldd	r23, Y+7	; 0x07
    9986:	88 85       	ldd	r24, Y+8	; 0x08
    9988:	99 85       	ldd	r25, Y+9	; 0x09
    998a:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    998e:	6e 83       	std	Y+6, r22	; 0x06
    9990:	7f 83       	std	Y+7, r23	; 0x07
    9992:	88 87       	std	Y+8, r24	; 0x08
    9994:	99 87       	std	Y+9, r25	; 0x09
    9996:	1a c0       	rjmp	.+52     	; 0x99cc <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    9998:	83 30       	cpi	r24, 0x03	; 3
    999a:	c1 f4       	brne	.+48     	; 0x99cc <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    999c:	69 81       	ldd	r22, Y+1	; 0x01
    999e:	70 e0       	ldi	r23, 0x00	; 0
    99a0:	80 e0       	ldi	r24, 0x00	; 0
    99a2:	90 e0       	ldi	r25, 0x00	; 0
    99a4:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    99a8:	25 e6       	ldi	r18, 0x65	; 101
    99aa:	38 e8       	ldi	r19, 0x88	; 136
    99ac:	48 e8       	ldi	r20, 0x88	; 136
    99ae:	5c e3       	ldi	r21, 0x3C	; 60
    99b0:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    99b4:	9b 01       	movw	r18, r22
    99b6:	ac 01       	movw	r20, r24
    99b8:	6a 81       	ldd	r22, Y+2	; 0x02
    99ba:	7b 81       	ldd	r23, Y+3	; 0x03
    99bc:	8c 81       	ldd	r24, Y+4	; 0x04
    99be:	9d 81       	ldd	r25, Y+5	; 0x05
    99c0:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    99c4:	6a 83       	std	Y+2, r22	; 0x02
    99c6:	7b 83       	std	Y+3, r23	; 0x03
    99c8:	8c 83       	std	Y+4, r24	; 0x04
    99ca:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    99cc:	df 91       	pop	r29
    99ce:	cf 91       	pop	r28
    99d0:	08 95       	ret

000099d2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    99d2:	8e 59       	subi	r24, 0x9E	; 158
    99d4:	93 4f       	sbci	r25, 0xF3	; 243
    99d6:	fc 01       	movw	r30, r24
    99d8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    99da:	81 30       	cpi	r24, 0x01	; 1
    99dc:	19 f0       	breq	.+6      	; 0x99e4 <solid_square_tile+0x12>
	if (tile == L_METAL) return tile;
    99de:	82 30       	cpi	r24, 0x02	; 2
    99e0:	19 f4       	brne	.+6      	; 0x99e8 <solid_square_tile+0x16>
    99e2:	08 95       	ret
    99e4:	81 e0       	ldi	r24, 0x01	; 1
    99e6:	08 95       	ret

	return 0;
    99e8:	80 e0       	ldi	r24, 0x00	; 0
}
    99ea:	08 95       	ret

000099ec <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    99ec:	5f 92       	push	r5
    99ee:	6f 92       	push	r6
    99f0:	7f 92       	push	r7
    99f2:	8f 92       	push	r8
    99f4:	9f 92       	push	r9
    99f6:	af 92       	push	r10
    99f8:	bf 92       	push	r11
    99fa:	cf 92       	push	r12
    99fc:	df 92       	push	r13
    99fe:	ef 92       	push	r14
    9a00:	ff 92       	push	r15
    9a02:	0f 93       	push	r16
    9a04:	1f 93       	push	r17
    9a06:	cf 93       	push	r28
    9a08:	df 93       	push	r29
    9a0a:	16 2f       	mov	r17, r22
    9a0c:	f4 2e       	mov	r15, r20
    9a0e:	d2 2e       	mov	r13, r18
    9a10:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    9a12:	fc 01       	movw	r30, r24
    9a14:	ee 59       	subi	r30, 0x9E	; 158
    9a16:	f3 4f       	sbci	r31, 0xF3	; 243
    9a18:	c1 81       	ldd	r28, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9a1a:	6e e1       	ldi	r22, 0x1E	; 30
    9a1c:	70 e0       	ldi	r23, 0x00	; 0
    9a1e:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9a22:	d8 2f       	mov	r29, r24
    9a24:	dd 0f       	add	r29, r29
    9a26:	dd 0f       	add	r29, r29
    9a28:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9a2a:	fb 01       	movw	r30, r22
    9a2c:	33 96       	adiw	r30, 0x03	; 3
    9a2e:	9e 2e       	mov	r9, r30
    9a30:	99 0c       	add	r9, r9
    9a32:	99 0c       	add	r9, r9
    9a34:	99 0c       	add	r9, r9

	if ((tile == L_TL) || (tile == L_BR))
    9a36:	c3 30       	cpi	r28, 0x03	; 3
    9a38:	11 f0       	breq	.+4      	; 0x9a3e <solid_directional_tile+0x52>
    9a3a:	c6 30       	cpi	r28, 0x06	; 6
    9a3c:	a1 f5       	brne	.+104    	; 0x9aa6 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x, y+height)) return tile;
    9a3e:	6f 2c       	mov	r6, r15
    9a40:	6b 0c       	add	r6, r11
    9a42:	28 e0       	ldi	r18, 0x08	; 8
    9a44:	72 2e       	mov	r7, r18
    9a46:	7d 0e       	add	r7, r29
    9a48:	38 e0       	ldi	r19, 0x08	; 8
    9a4a:	83 2e       	mov	r8, r19
    9a4c:	89 0c       	add	r8, r9
    9a4e:	a6 2c       	mov	r10, r6
    9a50:	c1 2e       	mov	r12, r17
    9a52:	ef 2c       	mov	r14, r15
    9a54:	01 2f       	mov	r16, r17
    9a56:	29 2d       	mov	r18, r9
    9a58:	47 2d       	mov	r20, r7
    9a5a:	68 2d       	mov	r22, r8
    9a5c:	8d 2f       	mov	r24, r29
    9a5e:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a62:	81 11       	cpse	r24, r1
    9a64:	59 c0       	rjmp	.+178    	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x+width, y)) return tile;
    9a66:	51 2e       	mov	r5, r17
    9a68:	5d 0c       	add	r5, r13
    9a6a:	af 2c       	mov	r10, r15
    9a6c:	c5 2c       	mov	r12, r5
    9a6e:	29 2d       	mov	r18, r9
    9a70:	47 2d       	mov	r20, r7
    9a72:	68 2d       	mov	r22, r8
    9a74:	8d 2f       	mov	r24, r29
    9a76:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a7a:	81 11       	cpse	r24, r1
    9a7c:	4d c0       	rjmp	.+154    	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x+width, y, x+width, y+height)) return tile;
    9a7e:	a6 2c       	mov	r10, r6
    9a80:	05 2d       	mov	r16, r5
    9a82:	29 2d       	mov	r18, r9
    9a84:	47 2d       	mov	r20, r7
    9a86:	68 2d       	mov	r22, r8
    9a88:	8d 2f       	mov	r24, r29
    9a8a:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a8e:	81 11       	cpse	r24, r1
    9a90:	43 c0       	rjmp	.+134    	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y+height, x+width, y+height)) return tile;
    9a92:	e6 2c       	mov	r14, r6
    9a94:	01 2f       	mov	r16, r17
    9a96:	29 2d       	mov	r18, r9
    9a98:	47 2d       	mov	r20, r7
    9a9a:	68 2d       	mov	r22, r8
    9a9c:	8d 2f       	mov	r24, r29
    9a9e:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9aa2:	81 11       	cpse	r24, r1
    9aa4:	39 c0       	rjmp	.+114    	; 0x9b18 <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    9aa6:	8c ef       	ldi	r24, 0xFC	; 252
    9aa8:	8c 0f       	add	r24, r28
    9aaa:	82 30       	cpi	r24, 0x02	; 2
    9aac:	98 f5       	brcc	.+102    	; 0x9b14 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x, y+height)) return tile;
    9aae:	bf 0c       	add	r11, r15
    9ab0:	88 e0       	ldi	r24, 0x08	; 8
    9ab2:	78 2e       	mov	r7, r24
    9ab4:	79 0c       	add	r7, r9
    9ab6:	98 e0       	ldi	r25, 0x08	; 8
    9ab8:	89 2e       	mov	r8, r25
    9aba:	8d 0e       	add	r8, r29
    9abc:	ab 2c       	mov	r10, r11
    9abe:	c1 2e       	mov	r12, r17
    9ac0:	ef 2c       	mov	r14, r15
    9ac2:	01 2f       	mov	r16, r17
    9ac4:	27 2d       	mov	r18, r7
    9ac6:	48 2d       	mov	r20, r8
    9ac8:	69 2d       	mov	r22, r9
    9aca:	8d 2f       	mov	r24, r29
    9acc:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9ad0:	81 11       	cpse	r24, r1
    9ad2:	22 c0       	rjmp	.+68     	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x+width, y)) return tile;
    9ad4:	d1 0e       	add	r13, r17
    9ad6:	af 2c       	mov	r10, r15
    9ad8:	cd 2c       	mov	r12, r13
    9ada:	27 2d       	mov	r18, r7
    9adc:	48 2d       	mov	r20, r8
    9ade:	69 2d       	mov	r22, r9
    9ae0:	8d 2f       	mov	r24, r29
    9ae2:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9ae6:	81 11       	cpse	r24, r1
    9ae8:	17 c0       	rjmp	.+46     	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x+width, y, x+width, y+height)) return tile;
    9aea:	ab 2c       	mov	r10, r11
    9aec:	0d 2d       	mov	r16, r13
    9aee:	27 2d       	mov	r18, r7
    9af0:	48 2d       	mov	r20, r8
    9af2:	69 2d       	mov	r22, r9
    9af4:	8d 2f       	mov	r24, r29
    9af6:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9afa:	81 11       	cpse	r24, r1
    9afc:	0d c0       	rjmp	.+26     	; 0x9b18 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y+height, x+width, y+height)) return tile;
    9afe:	eb 2c       	mov	r14, r11
    9b00:	01 2f       	mov	r16, r17
    9b02:	27 2d       	mov	r18, r7
    9b04:	48 2d       	mov	r20, r8
    9b06:	69 2d       	mov	r22, r9
    9b08:	8d 2f       	mov	r24, r29
    9b0a:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9b0e:	81 11       	cpse	r24, r1
    9b10:	03 c0       	rjmp	.+6      	; 0x9b18 <solid_directional_tile+0x12c>
    9b12:	03 c0       	rjmp	.+6      	; 0x9b1a <solid_directional_tile+0x12e>
	}
	
	return 0;
    9b14:	80 e0       	ldi	r24, 0x00	; 0
    9b16:	01 c0       	rjmp	.+2      	; 0x9b1a <solid_directional_tile+0x12e>
    9b18:	8c 2f       	mov	r24, r28
}
    9b1a:	df 91       	pop	r29
    9b1c:	cf 91       	pop	r28
    9b1e:	1f 91       	pop	r17
    9b20:	0f 91       	pop	r16
    9b22:	ff 90       	pop	r15
    9b24:	ef 90       	pop	r14
    9b26:	df 90       	pop	r13
    9b28:	cf 90       	pop	r12
    9b2a:	bf 90       	pop	r11
    9b2c:	af 90       	pop	r10
    9b2e:	9f 90       	pop	r9
    9b30:	8f 90       	pop	r8
    9b32:	7f 90       	pop	r7
    9b34:	6f 90       	pop	r6
    9b36:	5f 90       	pop	r5
    9b38:	08 95       	ret

00009b3a <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9b3a:	8f 92       	push	r8
    9b3c:	9f 92       	push	r9
    9b3e:	af 92       	push	r10
    9b40:	cf 92       	push	r12
    9b42:	ef 92       	push	r14
    9b44:	0f 93       	push	r16
    9b46:	1f 93       	push	r17
    9b48:	cf 93       	push	r28
    9b4a:	df 93       	push	r29
    9b4c:	4c 01       	movw	r8, r24
    9b4e:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1, p->shared.y+1, 14, 14, shot->shared.x, shot->shared.y, 7, 7) &&
    9b50:	6e 81       	ldd	r22, Y+6	; 0x06
    9b52:	7f 81       	ldd	r23, Y+7	; 0x07
    9b54:	88 85       	ldd	r24, Y+8	; 0x08
    9b56:	99 85       	ldd	r25, Y+9	; 0x09
    9b58:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9b5c:	e6 2e       	mov	r14, r22
    9b5e:	6a 81       	ldd	r22, Y+2	; 0x02
    9b60:	7b 81       	ldd	r23, Y+3	; 0x03
    9b62:	8c 81       	ldd	r24, Y+4	; 0x04
    9b64:	9d 81       	ldd	r25, Y+5	; 0x05
    9b66:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9b6a:	06 2f       	mov	r16, r22
    9b6c:	20 e0       	ldi	r18, 0x00	; 0
    9b6e:	30 e0       	ldi	r19, 0x00	; 0
    9b70:	40 e8       	ldi	r20, 0x80	; 128
    9b72:	5f e3       	ldi	r21, 0x3F	; 63
    9b74:	f4 01       	movw	r30, r8
    9b76:	66 81       	ldd	r22, Z+6	; 0x06
    9b78:	77 81       	ldd	r23, Z+7	; 0x07
    9b7a:	80 85       	ldd	r24, Z+8	; 0x08
    9b7c:	91 85       	ldd	r25, Z+9	; 0x09
    9b7e:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    9b82:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9b86:	16 2f       	mov	r17, r22
    9b88:	20 e0       	ldi	r18, 0x00	; 0
    9b8a:	30 e0       	ldi	r19, 0x00	; 0
    9b8c:	40 e8       	ldi	r20, 0x80	; 128
    9b8e:	5f e3       	ldi	r21, 0x3F	; 63
    9b90:	f4 01       	movw	r30, r8
    9b92:	62 81       	ldd	r22, Z+2	; 0x02
    9b94:	73 81       	ldd	r23, Z+3	; 0x03
    9b96:	84 81       	ldd	r24, Z+4	; 0x04
    9b98:	95 81       	ldd	r25, Z+5	; 0x05
    9b9a:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    9b9e:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9ba2:	86 2f       	mov	r24, r22
    9ba4:	97 e0       	ldi	r25, 0x07	; 7
    9ba6:	a9 2e       	mov	r10, r25
    9ba8:	27 e0       	ldi	r18, 0x07	; 7
    9baa:	c2 2e       	mov	r12, r18
    9bac:	2e e0       	ldi	r18, 0x0E	; 14
    9bae:	4e e0       	ldi	r20, 0x0E	; 14
    9bb0:	61 2f       	mov	r22, r17
    9bb2:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9bb6:	88 23       	and	r24, r24
    9bb8:	41 f0       	breq	.+16     	; 0x9bca <player_shot+0x90>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1, p->shared.y+1, 14, 14, shot->shared.x, shot->shared.y, 7, 7) &&
    9bba:	f4 01       	movw	r30, r8
    9bbc:	86 89       	ldd	r24, Z+22	; 0x16
    9bbe:	88 37       	cpi	r24, 0x78	; 120
    9bc0:	21 f4       	brne	.+8      	; 0x9bca <player_shot+0x90>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9bc2:	81 e0       	ldi	r24, 0x01	; 1
    9bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    9bc6:	99 30       	cpi	r25, 0x09	; 9
    9bc8:	08 f4       	brcc	.+2      	; 0x9bcc <player_shot+0x92>
    9bca:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    9bcc:	df 91       	pop	r29
    9bce:	cf 91       	pop	r28
    9bd0:	1f 91       	pop	r17
    9bd2:	0f 91       	pop	r16
    9bd4:	ef 90       	pop	r14
    9bd6:	cf 90       	pop	r12
    9bd8:	af 90       	pop	r10
    9bda:	9f 90       	pop	r9
    9bdc:	8f 90       	pop	r8
    9bde:	08 95       	ret

00009be0 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    9be0:	cf 92       	push	r12
    9be2:	df 92       	push	r13
    9be4:	ef 92       	push	r14
    9be6:	ff 92       	push	r15
    9be8:	cf 93       	push	r28
    9bea:	df 93       	push	r29
    9bec:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9bee:	ca 80       	ldd	r12, Y+2	; 0x02
    9bf0:	db 80       	ldd	r13, Y+3	; 0x03
    9bf2:	ec 80       	ldd	r14, Y+4	; 0x04
    9bf4:	fd 80       	ldd	r15, Y+5	; 0x05
    9bf6:	20 e0       	ldi	r18, 0x00	; 0
    9bf8:	30 e0       	ldi	r19, 0x00	; 0
    9bfa:	a9 01       	movw	r20, r18
    9bfc:	c7 01       	movw	r24, r14
    9bfe:	b6 01       	movw	r22, r12
    9c00:	0e 94 3a 5a 	call	0xb474	; 0xb474 <__cmpsf2>
    9c04:	87 fd       	sbrc	r24, 7
    9c06:	31 c0       	rjmp	.+98     	; 0x9c6a <collision_detect_boundries+0x8a>
    9c08:	20 e0       	ldi	r18, 0x00	; 0
    9c0a:	30 e0       	ldi	r19, 0x00	; 0
    9c0c:	40 ee       	ldi	r20, 0xE0	; 224
    9c0e:	50 e4       	ldi	r21, 0x40	; 64
    9c10:	c7 01       	movw	r24, r14
    9c12:	b6 01       	movw	r22, r12
    9c14:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    9c18:	20 e0       	ldi	r18, 0x00	; 0
    9c1a:	30 e0       	ldi	r19, 0x00	; 0
    9c1c:	40 e7       	ldi	r20, 0x70	; 112
    9c1e:	53 e4       	ldi	r21, 0x43	; 67
    9c20:	0e 94 84 5b 	call	0xb708	; 0xb708 <__gesf2>
    9c24:	18 16       	cp	r1, r24
    9c26:	0c f1       	brlt	.+66     	; 0x9c6a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9c28:	ce 80       	ldd	r12, Y+6	; 0x06
    9c2a:	df 80       	ldd	r13, Y+7	; 0x07
    9c2c:	e8 84       	ldd	r14, Y+8	; 0x08
    9c2e:	f9 84       	ldd	r15, Y+9	; 0x09
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9c30:	20 e0       	ldi	r18, 0x00	; 0
    9c32:	30 e0       	ldi	r19, 0x00	; 0
    9c34:	40 ec       	ldi	r20, 0xC0	; 192
    9c36:	51 e4       	ldi	r21, 0x41	; 65
    9c38:	c7 01       	movw	r24, r14
    9c3a:	b6 01       	movw	r22, r12
    9c3c:	0e 94 3a 5a 	call	0xb474	; 0xb474 <__cmpsf2>
    9c40:	87 fd       	sbrc	r24, 7
    9c42:	13 c0       	rjmp	.+38     	; 0x9c6a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9c44:	20 e0       	ldi	r18, 0x00	; 0
    9c46:	30 e0       	ldi	r19, 0x00	; 0
    9c48:	40 ee       	ldi	r20, 0xE0	; 224
    9c4a:	50 e4       	ldi	r21, 0x40	; 64
    9c4c:	c7 01       	movw	r24, r14
    9c4e:	b6 01       	movw	r22, r12
    9c50:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    9c54:	c1 e0       	ldi	r28, 0x01	; 1
    9c56:	20 e0       	ldi	r18, 0x00	; 0
    9c58:	30 e0       	ldi	r19, 0x00	; 0
    9c5a:	40 e6       	ldi	r20, 0x60	; 96
    9c5c:	53 e4       	ldi	r21, 0x43	; 67
    9c5e:	0e 94 84 5b 	call	0xb708	; 0xb708 <__gesf2>
    9c62:	18 16       	cp	r1, r24
    9c64:	1c f0       	brlt	.+6      	; 0x9c6c <collision_detect_boundries+0x8c>
    9c66:	c0 e0       	ldi	r28, 0x00	; 0
    9c68:	01 c0       	rjmp	.+2      	; 0x9c6c <collision_detect_boundries+0x8c>
	{
		return 1;
    9c6a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    9c6c:	8c 2f       	mov	r24, r28
    9c6e:	df 91       	pop	r29
    9c70:	cf 91       	pop	r28
    9c72:	ff 90       	pop	r15
    9c74:	ef 90       	pop	r14
    9c76:	df 90       	pop	r13
    9c78:	cf 90       	pop	r12
    9c7a:	08 95       	ret

00009c7c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    9c7c:	ff 92       	push	r15
    9c7e:	0f 93       	push	r16
    9c80:	1f 93       	push	r17
    9c82:	cf 93       	push	r28
    9c84:	df 93       	push	r29
    9c86:	ec 01       	movw	r28, r24
    9c88:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9c8a:	20 e0       	ldi	r18, 0x00	; 0
    9c8c:	30 e0       	ldi	r19, 0x00	; 0
    9c8e:	40 e0       	ldi	r20, 0x00	; 0
    9c90:	5e e3       	ldi	r21, 0x3E	; 62
    9c92:	6e 81       	ldd	r22, Y+6	; 0x06
    9c94:	7f 81       	ldd	r23, Y+7	; 0x07
    9c96:	88 85       	ldd	r24, Y+8	; 0x08
    9c98:	99 85       	ldd	r25, Y+9	; 0x09
    9c9a:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9c9e:	20 e0       	ldi	r18, 0x00	; 0
    9ca0:	30 e0       	ldi	r19, 0x00	; 0
    9ca2:	40 e4       	ldi	r20, 0x40	; 64
    9ca4:	50 e4       	ldi	r21, 0x40	; 64
    9ca6:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    9caa:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9cae:	8e e1       	ldi	r24, 0x1E	; 30
    9cb0:	68 9f       	mul	r22, r24
    9cb2:	80 01       	movw	r16, r0
    9cb4:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9cb6:	20 e0       	ldi	r18, 0x00	; 0
    9cb8:	30 e0       	ldi	r19, 0x00	; 0
    9cba:	40 e0       	ldi	r20, 0x00	; 0
    9cbc:	5e e3       	ldi	r21, 0x3E	; 62
    9cbe:	6a 81       	ldd	r22, Y+2	; 0x02
    9cc0:	7b 81       	ldd	r23, Y+3	; 0x03
    9cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    9cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    9cc6:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9cca:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9cce:	06 0f       	add	r16, r22
    9cd0:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    9cd2:	89 8d       	ldd	r24, Y+25	; 0x19
    9cd4:	88 23       	and	r24, r24
    9cd6:	c1 f0       	breq	.+48     	; 0x9d08 <kill_player+0x8c>
	{
		SetTile(hud_x+10, 1, 0);
    9cd8:	40 e0       	ldi	r20, 0x00	; 0
    9cda:	50 e0       	ldi	r21, 0x00	; 0
    9cdc:	61 e0       	ldi	r22, 0x01	; 1
    9cde:	8a e0       	ldi	r24, 0x0A	; 10
    9ce0:	8f 0d       	add	r24, r15
    9ce2:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    9ce6:	c8 01       	movw	r24, r16
    9ce8:	6e e1       	ldi	r22, 0x1E	; 30
    9cea:	70 e0       	ldi	r23, 0x00	; 0
    9cec:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9cf0:	6c 5f       	subi	r22, 0xFC	; 252
    9cf2:	44 e3       	ldi	r20, 0x34	; 52
    9cf4:	51 e2       	ldi	r21, 0x21	; 33
    9cf6:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    9cfa:	87 e0       	ldi	r24, 0x07	; 7
    9cfc:	f8 01       	movw	r30, r16
    9cfe:	ee 59       	subi	r30, 0x9E	; 158
    9d00:	f3 4f       	sbci	r31, 0xF3	; 243
    9d02:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    9d04:	82 e3       	ldi	r24, 0x32	; 50
    9d06:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    9d08:	88 8d       	ldd	r24, Y+24	; 0x18
    9d0a:	88 23       	and	r24, r24
    9d0c:	b9 f0       	breq	.+46     	; 0x9d3c <kill_player+0xc0>
	{
		SetTile(hud_x+11, 1, 0);
    9d0e:	40 e0       	ldi	r20, 0x00	; 0
    9d10:	50 e0       	ldi	r21, 0x00	; 0
    9d12:	61 e0       	ldi	r22, 0x01	; 1
    9d14:	8b e0       	ldi	r24, 0x0B	; 11
    9d16:	8f 0d       	add	r24, r15
    9d18:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    9d1c:	c8 01       	movw	r24, r16
    9d1e:	6e e1       	ldi	r22, 0x1E	; 30
    9d20:	70 e0       	ldi	r23, 0x00	; 0
    9d22:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9d26:	6c 5f       	subi	r22, 0xFC	; 252
    9d28:	4e e2       	ldi	r20, 0x2E	; 46
    9d2a:	51 e2       	ldi	r21, 0x21	; 33
    9d2c:	8f 5f       	subi	r24, 0xFF	; 255
    9d2e:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    9d32:	f8 01       	movw	r30, r16
    9d34:	ee 59       	subi	r30, 0x9E	; 158
    9d36:	f3 4f       	sbci	r31, 0xF3	; 243
    9d38:	89 e0       	ldi	r24, 0x09	; 9
    9d3a:	80 a3       	std	Z+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9d3c:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    9d3e:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    9d40:	8b 89       	ldd	r24, Y+19	; 0x13
    9d42:	81 60       	ori	r24, 0x01	; 1
    9d44:	8b 8b       	std	Y+19, r24	; 0x13
}
    9d46:	df 91       	pop	r29
    9d48:	cf 91       	pop	r28
    9d4a:	1f 91       	pop	r17
    9d4c:	0f 91       	pop	r16
    9d4e:	ff 90       	pop	r15
    9d50:	08 95       	ret

00009d52 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    9d52:	fc 01       	movw	r30, r24
    9d54:	8e e1       	ldi	r24, 0x1E	; 30
    9d56:	48 9f       	mul	r20, r24
    9d58:	a0 01       	movw	r20, r0
    9d5a:	11 24       	eor	r1, r1
    9d5c:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9d5e:	64 0f       	add	r22, r20
    9d60:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9d62:	21 11       	cpse	r18, r1
    9d64:	05 c0       	rjmp	.+10     	; 0x9d70 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9d66:	71 83       	std	Z+1, r23	; 0x01
    9d68:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9d6a:	6f 5f       	subi	r22, 0xFF	; 255
    9d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d6e:	12 c0       	rjmp	.+36     	; 0x9d94 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    9d70:	21 30       	cpi	r18, 0x01	; 1
    9d72:	19 f4       	brne	.+6      	; 0x9d7a <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    9d74:	cb 01       	movw	r24, r22
    9d76:	01 96       	adiw	r24, 0x01	; 1
    9d78:	04 c0       	rjmp	.+8      	; 0x9d82 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9d7a:	22 30       	cpi	r18, 0x02	; 2
    9d7c:	39 f4       	brne	.+14     	; 0x9d8c <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9d7e:	cb 01       	movw	r24, r22
    9d80:	4e 96       	adiw	r24, 0x1e	; 30
    9d82:	91 83       	std	Z+1, r25	; 0x01
    9d84:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9d86:	61 5e       	subi	r22, 0xE1	; 225
    9d88:	7f 4f       	sbci	r23, 0xFF	; 255
    9d8a:	04 c0       	rjmp	.+8      	; 0x9d94 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9d8c:	71 83       	std	Z+1, r23	; 0x01
    9d8e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9d90:	62 5e       	subi	r22, 0xE2	; 226
    9d92:	7f 4f       	sbci	r23, 0xFF	; 255
    9d94:	73 83       	std	Z+3, r23	; 0x03
    9d96:	62 83       	std	Z+2, r22	; 0x02
    9d98:	08 95       	ret

00009d9a <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9d9a:	ef 92       	push	r14
    9d9c:	ff 92       	push	r15
    9d9e:	0f 93       	push	r16
    9da0:	1f 93       	push	r17
    9da2:	cf 93       	push	r28
    9da4:	df 93       	push	r29
    9da6:	ec 01       	movw	r28, r24
    9da8:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9daa:	8e e1       	ldi	r24, 0x1E	; 30
    9dac:	e8 2e       	mov	r14, r24
    9dae:	f1 2c       	mov	r15, r1
    9db0:	cb 01       	movw	r24, r22
    9db2:	b7 01       	movw	r22, r14
    9db4:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9db8:	6d 5f       	subi	r22, 0xFD	; 253
    9dba:	40 e0       	ldi	r20, 0x00	; 0
    9dbc:	50 e0       	ldi	r21, 0x00	; 0
    9dbe:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    9dc2:	88 81       	ld	r24, Y
    9dc4:	fe 01       	movw	r30, r28
    9dc6:	9c e0       	ldi	r25, 0x0C	; 12
    9dc8:	89 9f       	mul	r24, r25
    9dca:	e0 0d       	add	r30, r0
    9dcc:	f1 1d       	adc	r31, r1
    9dce:	11 24       	eor	r1, r1
    9dd0:	83 85       	ldd	r24, Z+11	; 0x0b
    9dd2:	94 85       	ldd	r25, Z+12	; 0x0c
    9dd4:	00 97       	sbiw	r24, 0x00	; 0
    9dd6:	41 f0       	breq	.+16     	; 0x9de8 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    9dd8:	b7 01       	movw	r22, r14
    9dda:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    9dde:	6d 5f       	subi	r22, 0xFD	; 253
    9de0:	40 e0       	ldi	r20, 0x00	; 0
    9de2:	50 e0       	ldi	r21, 0x00	; 0
    9de4:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    9de8:	88 81       	ld	r24, Y
    9dea:	fe 01       	movw	r30, r28
    9dec:	9c e0       	ldi	r25, 0x0C	; 12
    9dee:	89 9f       	mul	r24, r25
    9df0:	e0 0d       	add	r30, r0
    9df2:	f1 1d       	adc	r31, r1
    9df4:	11 24       	eor	r1, r1
    9df6:	14 87       	std	Z+12, r17	; 0x0c
    9df8:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    9dfa:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    9dfc:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    9dfe:	82 30       	cpi	r24, 0x02	; 2
    9e00:	11 f0       	breq	.+4      	; 0x9e06 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    9e02:	88 83       	st	Y, r24
    9e04:	01 c0       	rjmp	.+2      	; 0x9e08 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    9e06:	18 82       	st	Y, r1
	}
}
    9e08:	df 91       	pop	r29
    9e0a:	cf 91       	pop	r28
    9e0c:	1f 91       	pop	r17
    9e0e:	0f 91       	pop	r16
    9e10:	ff 90       	pop	r15
    9e12:	ef 90       	pop	r14
    9e14:	08 95       	ret

00009e16 <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    9e16:	5f 92       	push	r5
    9e18:	6f 92       	push	r6
    9e1a:	7f 92       	push	r7
    9e1c:	8f 92       	push	r8
    9e1e:	9f 92       	push	r9
    9e20:	af 92       	push	r10
    9e22:	bf 92       	push	r11
    9e24:	cf 92       	push	r12
    9e26:	df 92       	push	r13
    9e28:	ef 92       	push	r14
    9e2a:	ff 92       	push	r15
    9e2c:	0f 93       	push	r16
    9e2e:	1f 93       	push	r17
    9e30:	cf 93       	push	r28
    9e32:	df 93       	push	r29
    9e34:	00 d0       	rcall	.+0      	; 0x9e36 <collision_detect_shot+0x20>
    9e36:	00 d0       	rcall	.+0      	; 0x9e38 <collision_detect_shot+0x22>
    9e38:	1f 92       	push	r1
    9e3a:	cd b7       	in	r28, 0x3d	; 61
    9e3c:	de b7       	in	r29, 0x3e	; 62
    9e3e:	6c 01       	movw	r12, r24
    9e40:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    9e42:	1a 82       	std	Y+2, r1	; 0x02
    9e44:	19 82       	std	Y+1, r1	; 0x01
    9e46:	1c 82       	std	Y+4, r1	; 0x04
    9e48:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9e4a:	20 e0       	ldi	r18, 0x00	; 0
    9e4c:	30 e0       	ldi	r19, 0x00	; 0
    9e4e:	40 e0       	ldi	r20, 0x00	; 0
    9e50:	5e e3       	ldi	r21, 0x3E	; 62
    9e52:	fb 01       	movw	r30, r22
    9e54:	66 81       	ldd	r22, Z+6	; 0x06
    9e56:	77 81       	ldd	r23, Z+7	; 0x07
    9e58:	80 85       	ldd	r24, Z+8	; 0x08
    9e5a:	91 85       	ldd	r25, Z+9	; 0x09
    9e5c:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9e60:	20 e0       	ldi	r18, 0x00	; 0
    9e62:	30 e0       	ldi	r19, 0x00	; 0
    9e64:	40 e4       	ldi	r20, 0x40	; 64
    9e66:	50 e4       	ldi	r21, 0x40	; 64
    9e68:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    9e6c:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9e70:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    9e72:	20 e0       	ldi	r18, 0x00	; 0
    9e74:	30 e0       	ldi	r19, 0x00	; 0
    9e76:	40 e0       	ldi	r20, 0x00	; 0
    9e78:	5e e3       	ldi	r21, 0x3E	; 62
    9e7a:	f7 01       	movw	r30, r14
    9e7c:	62 81       	ldd	r22, Z+2	; 0x02
    9e7e:	73 81       	ldd	r23, Z+3	; 0x03
    9e80:	84 81       	ldd	r24, Z+4	; 0x04
    9e82:	95 81       	ldd	r25, Z+5	; 0x05
    9e84:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    9e88:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
	u8 tile;
	u8 hud_x;
	Player* p = 0;
    char hit_metal = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9e8c:	f7 01       	movw	r30, r14
    9e8e:	20 81       	ld	r18, Z
    9e90:	41 2f       	mov	r20, r17
    9e92:	ce 01       	movw	r24, r28
    9e94:	01 96       	adiw	r24, 0x01	; 1
    9e96:	0e 94 a9 4e 	call	0x9d52	; 0x9d52 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9e9a:	c7 01       	movw	r24, r14
    9e9c:	0e 94 f0 4d 	call	0x9be0	; 0x9be0 <collision_detect_boundries>
    9ea0:	88 23       	and	r24, r24
    9ea2:	51 f0       	breq	.+20     	; 0x9eb8 <collision_detect_shot+0xa2>
	{
		init_shot_state(shot, shot->shot_type);
    9ea4:	f7 01       	movw	r30, r14
    9ea6:	62 85       	ldd	r22, Z+10	; 0x0a
    9ea8:	c7 01       	movw	r24, r14
    9eaa:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		player->active_shots--;
    9eae:	f6 01       	movw	r30, r12
    9eb0:	80 89       	ldd	r24, Z+16	; 0x10
    9eb2:	81 50       	subi	r24, 0x01	; 1
    9eb4:	80 8b       	std	Z+16, r24	; 0x10
		return;
    9eb6:	ee c0       	rjmp	.+476    	; 0xa094 <collision_detect_shot+0x27e>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    9eb8:	b7 01       	movw	r22, r14
    9eba:	8e ed       	ldi	r24, 0xDE	; 222
    9ebc:	9b e0       	ldi	r25, 0x0B	; 11
    9ebe:	0e 94 9d 4d 	call	0x9b3a	; 0x9b3a <player_shot>
    9ec2:	88 23       	and	r24, r24
    9ec4:	b9 f0       	breq	.+46     	; 0x9ef4 <collision_detect_shot+0xde>
    9ec6:	80 91 f1 0b 	lds	r24, 0x0BF1
    9eca:	80 fd       	sbrc	r24, 0
    9ecc:	13 c0       	rjmp	.+38     	; 0x9ef4 <collision_detect_shot+0xde>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    9ece:	80 91 60 0f 	lds	r24, 0x0F60
    9ed2:	8f 5f       	subi	r24, 0xFF	; 255
    9ed4:	80 93 60 0f 	sts	0x0F60, r24
		player2.score++;
    9ed8:	80 91 5f 0f 	lds	r24, 0x0F5F
    9edc:	8f 5f       	subi	r24, 0xFF	; 255
    9ede:	80 93 5f 0f 	sts	0x0F5F, r24
		render_score(&player2, 15);
    9ee2:	6f e0       	ldi	r22, 0x0F	; 15
    9ee4:	81 e5       	ldi	r24, 0x51	; 81
    9ee6:	9f e0       	ldi	r25, 0x0F	; 15
    9ee8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    9eec:	0e ed       	ldi	r16, 0xDE	; 222
    9eee:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    9ef0:	b1 2c       	mov	r11, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    9ef2:	25 c0       	rjmp	.+74     	; 0x9f3e <collision_detect_shot+0x128>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    9ef4:	b7 01       	movw	r22, r14
    9ef6:	81 e5       	ldi	r24, 0x51	; 81
    9ef8:	9f e0       	ldi	r25, 0x0F	; 15
    9efa:	0e 94 9d 4d 	call	0x9b3a	; 0x9b3a <player_shot>
    9efe:	81 11       	cpse	r24, r1
    9f00:	07 c0       	rjmp	.+14     	; 0x9f10 <collision_detect_shot+0xfa>
    9f02:	ce 01       	movw	r24, r28
    9f04:	01 96       	adiw	r24, 0x01	; 1
    9f06:	3c 01       	movw	r6, r24
	{
		p = &player2;
		hud_x = 15;
    9f08:	a1 2c       	mov	r10, r1
    9f0a:	b1 2c       	mov	r11, r1
    9f0c:	51 2c       	mov	r5, r1
    9f0e:	51 c0       	rjmp	.+162    	; 0x9fb2 <collision_detect_shot+0x19c>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    9f10:	80 91 64 0f 	lds	r24, 0x0F64
    9f14:	80 fd       	sbrc	r24, 0
    9f16:	f5 cf       	rjmp	.-22     	; 0x9f02 <collision_detect_shot+0xec>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    9f18:	80 91 ed 0b 	lds	r24, 0x0BED
    9f1c:	8f 5f       	subi	r24, 0xFF	; 255
    9f1e:	80 93 ed 0b 	sts	0x0BED, r24
		player1.score++;
    9f22:	80 91 ec 0b 	lds	r24, 0x0BEC
    9f26:	8f 5f       	subi	r24, 0xFF	; 255
    9f28:	80 93 ec 0b 	sts	0x0BEC, r24
		render_score(&player1, 0);
    9f2c:	60 e0       	ldi	r22, 0x00	; 0
    9f2e:	8e ed       	ldi	r24, 0xDE	; 222
    9f30:	9b e0       	ldi	r25, 0x0B	; 11
    9f32:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    9f36:	01 e5       	ldi	r16, 0x51	; 81
    9f38:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    9f3a:	9f e0       	ldi	r25, 0x0F	; 15
    9f3c:	b9 2e       	mov	r11, r25
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    9f3e:	01 15       	cp	r16, r1
    9f40:	11 05       	cpc	r17, r1
    9f42:	f9 f2       	breq	.-66     	; 0x9f02 <collision_detect_shot+0xec>
	{
		init_shot_state(shot, shot->shot_type);
    9f44:	f7 01       	movw	r30, r14
    9f46:	62 85       	ldd	r22, Z+10	; 0x0a
    9f48:	c7 01       	movw	r24, r14
    9f4a:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		player->active_shots--;
    9f4e:	f6 01       	movw	r30, r12
    9f50:	80 89       	ldd	r24, Z+16	; 0x10
    9f52:	81 50       	subi	r24, 0x01	; 1
    9f54:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    9f56:	6b 2d       	mov	r22, r11
    9f58:	c8 01       	movw	r24, r16
    9f5a:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <kill_player>
		SFX_TANK_EXPLODE;
    9f5e:	2f ef       	ldi	r18, 0xFF	; 255
    9f60:	40 e1       	ldi	r20, 0x10	; 16
    9f62:	6a e0       	ldi	r22, 0x0A	; 10
    9f64:	94 c0       	rjmp	.+296    	; 0xa08e <collision_detect_shot+0x278>
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		if (tile == L_BRICK)
    9f66:	11 30       	cpi	r17, 0x01	; 1
    9f68:	79 f1       	breq	.+94     	; 0x9fc8 <collision_detect_shot+0x1b2>
			}
			SFX_BRICK_EXPLODE;
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 8, 8))
    9f6a:	f7 01       	movw	r30, r14
    9f6c:	66 81       	ldd	r22, Z+6	; 0x06
    9f6e:	77 81       	ldd	r23, Z+7	; 0x07
    9f70:	80 85       	ldd	r24, Z+8	; 0x08
    9f72:	91 85       	ldd	r25, Z+9	; 0x09
    9f74:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9f78:	46 2f       	mov	r20, r22
    9f7a:	f7 01       	movw	r30, r14
    9f7c:	62 81       	ldd	r22, Z+2	; 0x02
    9f7e:	73 81       	ldd	r23, Z+3	; 0x03
    9f80:	84 81       	ldd	r24, Z+4	; 0x04
    9f82:	95 81       	ldd	r25, Z+5	; 0x05
    9f84:	4d 83       	std	Y+5, r20	; 0x05
    9f86:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    9f8a:	08 e0       	ldi	r16, 0x08	; 8
    9f8c:	28 e0       	ldi	r18, 0x08	; 8
    9f8e:	4d 81       	ldd	r20, Y+5	; 0x05
    9f90:	c4 01       	movw	r24, r8
    9f92:	0e 94 f6 4c 	call	0x99ec	; 0x99ec <solid_directional_tile>
    9f96:	81 11       	cpse	r24, r1
    9f98:	3d c0       	rjmp	.+122    	; 0xa014 <collision_detect_shot+0x1fe>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL)
    9f9a:	12 30       	cpi	r17, 0x02	; 2
    9f9c:	11 f4       	brne	.+4      	; 0x9fa2 <collision_detect_shot+0x18c>
        {
		    hit_metal = 1;
    9f9e:	55 24       	eor	r5, r5
    9fa0:	53 94       	inc	r5
    9fa2:	ff ef       	ldi	r31, 0xFF	; 255
    9fa4:	af 1a       	sub	r10, r31
    9fa6:	bf 0a       	sbc	r11, r31
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    9fa8:	82 e0       	ldi	r24, 0x02	; 2
    9faa:	a8 16       	cp	r10, r24
    9fac:	b1 04       	cpc	r11, r1
    9fae:	09 f4       	brne	.+2      	; 0x9fb2 <collision_detect_shot+0x19c>
    9fb0:	60 c0       	rjmp	.+192    	; 0xa072 <collision_detect_shot+0x25c>
	{
		tile = level.level_map[tiles[i]];
    9fb2:	f3 01       	movw	r30, r6
    9fb4:	81 90       	ld	r8, Z+
    9fb6:	91 90       	ld	r9, Z+
    9fb8:	3f 01       	movw	r6, r30
    9fba:	f4 01       	movw	r30, r8
    9fbc:	ee 59       	subi	r30, 0x9E	; 158
    9fbe:	f3 4f       	sbci	r31, 0xF3	; 243
    9fc0:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    9fc2:	11 23       	and	r17, r17
    9fc4:	71 f3       	breq	.-36     	; 0x9fa2 <collision_detect_shot+0x18c>
    9fc6:	cf cf       	rjmp	.-98     	; 0x9f66 <collision_detect_shot+0x150>
		if (tile == L_BRICK)
		{
			explode_tile(&tile_animations, tiles[i]);
    9fc8:	b4 01       	movw	r22, r8
    9fca:	85 ec       	ldi	r24, 0xC5	; 197
    9fcc:	9b e0       	ldi	r25, 0x0B	; 11
    9fce:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <explode_tile>
			level.level_map[tiles[i]] = L_EMPTY;
    9fd2:	f5 01       	movw	r30, r10
    9fd4:	ee 0f       	add	r30, r30
    9fd6:	ff 1f       	adc	r31, r31
    9fd8:	81 e0       	ldi	r24, 0x01	; 1
    9fda:	90 e0       	ldi	r25, 0x00	; 0
    9fdc:	8c 0f       	add	r24, r28
    9fde:	9d 1f       	adc	r25, r29
    9fe0:	e8 0f       	add	r30, r24
    9fe2:	f9 1f       	adc	r31, r25
    9fe4:	01 90       	ld	r0, Z+
    9fe6:	f0 81       	ld	r31, Z
    9fe8:	e0 2d       	mov	r30, r0
    9fea:	ee 59       	subi	r30, 0x9E	; 158
    9fec:	f3 4f       	sbci	r31, 0xF3	; 243
    9fee:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    9ff0:	f7 01       	movw	r30, r14
    9ff2:	83 85       	ldd	r24, Z+11	; 0x0b
    9ff4:	81 50       	subi	r24, 0x01	; 1
    9ff6:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    9ff8:	81 11       	cpse	r24, r1
    9ffa:	08 c0       	rjmp	.+16     	; 0xa00c <collision_detect_shot+0x1f6>
			{
				init_shot_state(shot, shot->shot_type);
    9ffc:	62 85       	ldd	r22, Z+10	; 0x0a
    9ffe:	c7 01       	movw	r24, r14
    a000:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
				player->active_shots--;
    a004:	f6 01       	movw	r30, r12
    a006:	80 89       	ldd	r24, Z+16	; 0x10
    a008:	81 50       	subi	r24, 0x01	; 1
    a00a:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    a00c:	2f ed       	ldi	r18, 0xDF	; 223
    a00e:	47 e1       	ldi	r20, 0x17	; 23
    a010:	61 e0       	ldi	r22, 0x01	; 1
    a012:	3d c0       	rjmp	.+122    	; 0xa08e <collision_detect_shot+0x278>
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 8, 8))
		{
			recoil_sprite(&shot->shared);
    a014:	c7 01       	movw	r24, r14
    a016:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
			switch (tile)
    a01a:	14 30       	cpi	r17, 0x04	; 4
    a01c:	79 f0       	breq	.+30     	; 0xa03c <collision_detect_shot+0x226>
    a01e:	18 f4       	brcc	.+6      	; 0xa026 <collision_detect_shot+0x210>
    a020:	13 30       	cpi	r17, 0x03	; 3
    a022:	31 f0       	breq	.+12     	; 0xa030 <collision_detect_shot+0x21a>
    a024:	1f c0       	rjmp	.+62     	; 0xa064 <collision_detect_shot+0x24e>
    a026:	15 30       	cpi	r17, 0x05	; 5
    a028:	b9 f0       	breq	.+46     	; 0xa058 <collision_detect_shot+0x242>
    a02a:	16 30       	cpi	r17, 0x06	; 6
    a02c:	79 f0       	breq	.+30     	; 0xa04c <collision_detect_shot+0x236>
    a02e:	1a c0       	rjmp	.+52     	; 0xa064 <collision_detect_shot+0x24e>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    a030:	f7 01       	movw	r30, r14
    a032:	80 81       	ld	r24, Z
    a034:	81 11       	cpse	r24, r1
    a036:	06 c0       	rjmp	.+12     	; 0xa044 <collision_detect_shot+0x22e>
						shot->shared.direction = D_RIGHT;
    a038:	81 e0       	ldi	r24, 0x01	; 1
    a03a:	05 c0       	rjmp	.+10     	; 0xa046 <collision_detect_shot+0x230>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    a03c:	f7 01       	movw	r30, r14
    a03e:	80 81       	ld	r24, Z
    a040:	88 23       	and	r24, r24
    a042:	41 f0       	breq	.+16     	; 0xa054 <collision_detect_shot+0x23e>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    a044:	82 e0       	ldi	r24, 0x02	; 2
    a046:	f7 01       	movw	r30, r14
    a048:	80 83       	st	Z, r24
    a04a:	0c c0       	rjmp	.+24     	; 0xa064 <collision_detect_shot+0x24e>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    a04c:	f7 01       	movw	r30, r14
    a04e:	80 81       	ld	r24, Z
    a050:	82 30       	cpi	r24, 0x02	; 2
    a052:	31 f4       	brne	.+12     	; 0xa060 <collision_detect_shot+0x24a>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    a054:	83 e0       	ldi	r24, 0x03	; 3
    a056:	f7 cf       	rjmp	.-18     	; 0xa046 <collision_detect_shot+0x230>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    a058:	f7 01       	movw	r30, r14
    a05a:	80 81       	ld	r24, Z
    a05c:	82 30       	cpi	r24, 0x02	; 2
    a05e:	61 f3       	breq	.-40     	; 0xa038 <collision_detect_shot+0x222>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    a060:	f7 01       	movw	r30, r14
    a062:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    a064:	f7 01       	movw	r30, r14
    a066:	84 85       	ldd	r24, Z+12	; 0x0c
    a068:	81 50       	subi	r24, 0x01	; 1
    a06a:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    a06c:	81 11       	cpse	r24, r1
    a06e:	0c c0       	rjmp	.+24     	; 0xa088 <collision_detect_shot+0x272>
    a070:	03 c0       	rjmp	.+6      	; 0xa078 <collision_detect_shot+0x262>
		else if (tile == L_METAL)
        {
		    hit_metal = 1;
        }
	}
	if (hit_metal)
    a072:	55 20       	and	r5, r5
    a074:	79 f0       	breq	.+30     	; 0xa094 <collision_detect_shot+0x27e>
	{
        init_shot_state(shot, shot->shot_type);
    a076:	f7 01       	movw	r30, r14
    a078:	62 85       	ldd	r22, Z+10	; 0x0a
    a07a:	c7 01       	movw	r24, r14
    a07c:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
        player->active_shots--;
    a080:	f6 01       	movw	r30, r12
    a082:	80 89       	ldd	r24, Z+16	; 0x10
    a084:	81 50       	subi	r24, 0x01	; 1
    a086:	80 8b       	std	Z+16, r24	; 0x10
        SFX_METAL;
    a088:	2f ef       	ldi	r18, 0xFF	; 255
    a08a:	47 e1       	ldi	r20, 0x17	; 23
    a08c:	66 e0       	ldi	r22, 0x06	; 6
    a08e:	84 e0       	ldi	r24, 0x04	; 4
    a090:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
	}
}
    a094:	0f 90       	pop	r0
    a096:	0f 90       	pop	r0
    a098:	0f 90       	pop	r0
    a09a:	0f 90       	pop	r0
    a09c:	0f 90       	pop	r0
    a09e:	df 91       	pop	r29
    a0a0:	cf 91       	pop	r28
    a0a2:	1f 91       	pop	r17
    a0a4:	0f 91       	pop	r16
    a0a6:	ff 90       	pop	r15
    a0a8:	ef 90       	pop	r14
    a0aa:	df 90       	pop	r13
    a0ac:	cf 90       	pop	r12
    a0ae:	bf 90       	pop	r11
    a0b0:	af 90       	pop	r10
    a0b2:	9f 90       	pop	r9
    a0b4:	8f 90       	pop	r8
    a0b6:	7f 90       	pop	r7
    a0b8:	6f 90       	pop	r6
    a0ba:	5f 90       	pop	r5
    a0bc:	08 95       	ret

0000a0be <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a0be:	fc 01       	movw	r30, r24
    a0c0:	8e e1       	ldi	r24, 0x1E	; 30
    a0c2:	48 9f       	mul	r20, r24
    a0c4:	a0 01       	movw	r20, r0
    a0c6:	11 24       	eor	r1, r1
    a0c8:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a0ca:	64 0f       	add	r22, r20
    a0cc:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a0ce:	21 11       	cpse	r18, r1
    a0d0:	09 c0       	rjmp	.+18     	; 0xa0e4 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a0d2:	71 83       	std	Z+1, r23	; 0x01
    a0d4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a0d6:	cb 01       	movw	r24, r22
    a0d8:	01 96       	adiw	r24, 0x01	; 1
    a0da:	93 83       	std	Z+3, r25	; 0x03
    a0dc:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a0de:	6e 5f       	subi	r22, 0xFE	; 254
    a0e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a0e2:	1e c0       	rjmp	.+60     	; 0xa120 <get_interesting_tile_indexes+0x62>
	}
	else if (direction == D_RIGHT)
    a0e4:	21 30       	cpi	r18, 0x01	; 1
    a0e6:	39 f4       	brne	.+14     	; 0xa0f6 <get_interesting_tile_indexes+0x38>
	{
		tiles[0] = (y * 30) + x + 2;
    a0e8:	cb 01       	movw	r24, r22
    a0ea:	02 96       	adiw	r24, 0x02	; 2
    a0ec:	91 83       	std	Z+1, r25	; 0x01
    a0ee:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a0f0:	cb 01       	movw	r24, r22
    a0f2:	80 96       	adiw	r24, 0x20	; 32
    a0f4:	08 c0       	rjmp	.+16     	; 0xa106 <get_interesting_tile_indexes+0x48>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a0f6:	22 30       	cpi	r18, 0x02	; 2
    a0f8:	59 f4       	brne	.+22     	; 0xa110 <get_interesting_tile_indexes+0x52>
	{
		tiles[0] = (y * 30) + x + 60;
    a0fa:	cb 01       	movw	r24, r22
    a0fc:	cc 96       	adiw	r24, 0x3c	; 60
    a0fe:	91 83       	std	Z+1, r25	; 0x01
    a100:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a102:	cb 01       	movw	r24, r22
    a104:	cd 96       	adiw	r24, 0x3d	; 61
    a106:	93 83       	std	Z+3, r25	; 0x03
    a108:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a10a:	62 5c       	subi	r22, 0xC2	; 194
    a10c:	7f 4f       	sbci	r23, 0xFF	; 255
    a10e:	08 c0       	rjmp	.+16     	; 0xa120 <get_interesting_tile_indexes+0x62>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a110:	71 83       	std	Z+1, r23	; 0x01
    a112:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a114:	cb 01       	movw	r24, r22
    a116:	4e 96       	adiw	r24, 0x1e	; 30
    a118:	93 83       	std	Z+3, r25	; 0x03
    a11a:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a11c:	64 5c       	subi	r22, 0xC4	; 196
    a11e:	7f 4f       	sbci	r23, 0xFF	; 255
    a120:	75 83       	std	Z+5, r23	; 0x05
    a122:	64 83       	std	Z+4, r22	; 0x04
    a124:	08 95       	ret

0000a126 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a126:	2f 92       	push	r2
    a128:	3f 92       	push	r3
    a12a:	4f 92       	push	r4
    a12c:	5f 92       	push	r5
    a12e:	6f 92       	push	r6
    a130:	7f 92       	push	r7
    a132:	8f 92       	push	r8
    a134:	9f 92       	push	r9
    a136:	af 92       	push	r10
    a138:	bf 92       	push	r11
    a13a:	cf 92       	push	r12
    a13c:	df 92       	push	r13
    a13e:	ef 92       	push	r14
    a140:	ff 92       	push	r15
    a142:	0f 93       	push	r16
    a144:	1f 93       	push	r17
    a146:	cf 93       	push	r28
    a148:	df 93       	push	r29
    a14a:	cd b7       	in	r28, 0x3d	; 61
    a14c:	de b7       	in	r29, 0x3e	; 62
    a14e:	29 97       	sbiw	r28, 0x09	; 9
    a150:	0f b6       	in	r0, 0x3f	; 63
    a152:	f8 94       	cli
    a154:	de bf       	out	0x3e, r29	; 62
    a156:	0f be       	out	0x3f, r0	; 63
    a158:	cd bf       	out	0x3d, r28	; 61
    a15a:	7c 01       	movw	r14, r24
    a15c:	4b 01       	movw	r8, r22
    a15e:	14 2f       	mov	r17, r20
    a160:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    a162:	1a 82       	std	Y+2, r1	; 0x02
    a164:	19 82       	std	Y+1, r1	; 0x01
    a166:	1c 82       	std	Y+4, r1	; 0x04
    a168:	1b 82       	std	Y+3, r1	; 0x03
    a16a:	1e 82       	std	Y+6, r1	; 0x06
    a16c:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a16e:	20 e0       	ldi	r18, 0x00	; 0
    a170:	30 e0       	ldi	r19, 0x00	; 0
    a172:	40 e0       	ldi	r20, 0x00	; 0
    a174:	5e e3       	ldi	r21, 0x3E	; 62
    a176:	fc 01       	movw	r30, r24
    a178:	66 81       	ldd	r22, Z+6	; 0x06
    a17a:	77 81       	ldd	r23, Z+7	; 0x07
    a17c:	80 85       	ldd	r24, Z+8	; 0x08
    a17e:	91 85       	ldd	r25, Z+9	; 0x09
    a180:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a184:	20 e0       	ldi	r18, 0x00	; 0
    a186:	30 e0       	ldi	r19, 0x00	; 0
    a188:	40 e4       	ldi	r20, 0x40	; 64
    a18a:	50 e4       	ldi	r21, 0x40	; 64
    a18c:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    a190:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    a194:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a196:	20 e0       	ldi	r18, 0x00	; 0
    a198:	30 e0       	ldi	r19, 0x00	; 0
    a19a:	40 e0       	ldi	r20, 0x00	; 0
    a19c:	5e e3       	ldi	r21, 0x3E	; 62
    a19e:	f7 01       	movw	r30, r14
    a1a0:	62 81       	ldd	r22, Z+2	; 0x02
    a1a2:	73 81       	ldd	r23, Z+3	; 0x03
    a1a4:	84 81       	ldd	r24, Z+4	; 0x04
    a1a6:	95 81       	ldd	r25, Z+5	; 0x05
    a1a8:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a1ac:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a1b0:	f7 01       	movw	r30, r14
    a1b2:	20 81       	ld	r18, Z
    a1b4:	4d 2d       	mov	r20, r13
    a1b6:	ce 01       	movw	r24, r28
    a1b8:	01 96       	adiw	r24, 0x01	; 1
    a1ba:	0e 94 5f 50 	call	0xa0be	; 0xa0be <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a1be:	c7 01       	movw	r24, r14
    a1c0:	0e 94 f0 4d 	call	0x9be0	; 0x9be0 <collision_detect_boundries>
    a1c4:	88 23       	and	r24, r24
    a1c6:	31 f0       	breq	.+12     	; 0xa1d4 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    a1c8:	c7 01       	movw	r24, r14
    a1ca:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
		player->shared.speed = 0;
    a1ce:	f7 01       	movw	r30, r14
    a1d0:	11 82       	std	Z+1, r1	; 0x01
    a1d2:	91 c0       	rjmp	.+290    	; 0xa2f6 <collision_detect_player+0x1d0>
    a1d4:	ce 01       	movw	r24, r28
    a1d6:	01 96       	adiw	r24, 0x01	; 1
    a1d8:	6c 01       	movw	r12, r24
    a1da:	3e 01       	movw	r6, r28
    a1dc:	97 e0       	ldi	r25, 0x07	; 7
    a1de:	69 0e       	add	r6, r25
    a1e0:	71 1c       	adc	r7, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a1e2:	8e e1       	ldi	r24, 0x1E	; 30
    a1e4:	a8 2e       	mov	r10, r24
    a1e6:	b1 2c       	mov	r11, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a1e8:	33 24       	eor	r3, r3
    a1ea:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a1ec:	eb e0       	ldi	r30, 0x0B	; 11
    a1ee:	e1 0f       	add	r30, r17
    a1f0:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a1f2:	fa e0       	ldi	r31, 0x0A	; 10
    a1f4:	f1 0f       	add	r31, r17
    a1f6:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a1f8:	f6 01       	movw	r30, r12
    a1fa:	40 80       	ld	r4, Z
    a1fc:	51 80       	ldd	r5, Z+1	; 0x01
    a1fe:	c2 01       	movw	r24, r4
    a200:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <solid_square_tile>
    a204:	81 11       	cpse	r24, r1
    a206:	18 c0       	rjmp	.+48     	; 0xa238 <collision_detect_player+0x112>
    a208:	f7 01       	movw	r30, r14
    a20a:	66 81       	ldd	r22, Z+6	; 0x06
    a20c:	77 81       	ldd	r23, Z+7	; 0x07
    a20e:	80 85       	ldd	r24, Z+8	; 0x08
    a210:	91 85       	ldd	r25, Z+9	; 0x09
    a212:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    a216:	46 2f       	mov	r20, r22
    a218:	f7 01       	movw	r30, r14
    a21a:	62 81       	ldd	r22, Z+2	; 0x02
    a21c:	73 81       	ldd	r23, Z+3	; 0x03
    a21e:	84 81       	ldd	r24, Z+4	; 0x04
    a220:	95 81       	ldd	r25, Z+5	; 0x05
    a222:	49 87       	std	Y+9, r20	; 0x09
    a224:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    a228:	00 e1       	ldi	r16, 0x10	; 16
    a22a:	20 e1       	ldi	r18, 0x10	; 16
    a22c:	49 85       	ldd	r20, Y+9	; 0x09
    a22e:	c2 01       	movw	r24, r4
    a230:	0e 94 f6 4c 	call	0x99ec	; 0x99ec <solid_directional_tile>
    a234:	88 23       	and	r24, r24
    a236:	31 f0       	breq	.+12     	; 0xa244 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    a238:	c7 01       	movw	r24, r14
    a23a:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
			player->shared.speed = 0;
    a23e:	f7 01       	movw	r30, r14
    a240:	11 82       	std	Z+1, r1	; 0x01
    a242:	52 c0       	rjmp	.+164    	; 0xa2e8 <collision_detect_player+0x1c2>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    a244:	f2 01       	movw	r30, r4
    a246:	ee 59       	subi	r30, 0x9E	; 158
    a248:	f3 4f       	sbci	r31, 0xF3	; 243
    a24a:	81 81       	ldd	r24, Z+1	; 0x01
    a24c:	87 30       	cpi	r24, 0x07	; 7
    a24e:	51 f4       	brne	.+20     	; 0xa264 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a250:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a252:	81 e4       	ldi	r24, 0x41	; 65
    a254:	f7 01       	movw	r30, r14
    a256:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    a258:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a25a:	44 e3       	ldi	r20, 0x34	; 52
    a25c:	51 e2       	ldi	r21, 0x21	; 33
    a25e:	61 e0       	ldi	r22, 0x01	; 1
    a260:	88 85       	ldd	r24, Y+8	; 0x08
    a262:	09 c0       	rjmp	.+18     	; 0xa276 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    a264:	89 30       	cpi	r24, 0x09	; 9
    a266:	d9 f4       	brne	.+54     	; 0xa29e <collision_detect_player+0x178>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a268:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a26a:	f7 01       	movw	r30, r14
    a26c:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a26e:	4e e2       	ldi	r20, 0x2E	; 46
    a270:	51 e2       	ldi	r21, 0x21	; 33
    a272:	61 e0       	ldi	r22, 0x01	; 1
    a274:	8f 81       	ldd	r24, Y+7	; 0x07
    a276:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a27a:	f6 01       	movw	r30, r12
    a27c:	80 81       	ld	r24, Z
    a27e:	91 81       	ldd	r25, Z+1	; 0x01
    a280:	b5 01       	movw	r22, r10
    a282:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    a286:	6d 5f       	subi	r22, 0xFD	; 253
    a288:	40 e0       	ldi	r20, 0x00	; 0
    a28a:	50 e0       	ldi	r21, 0x00	; 0
    a28c:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
			SFX_ITEM;
    a290:	2f ef       	ldi	r18, 0xFF	; 255
    a292:	47 e1       	ldi	r20, 0x17	; 23
    a294:	63 e0       	ldi	r22, 0x03	; 3
    a296:	84 e0       	ldi	r24, 0x04	; 4
    a298:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
    a29c:	25 c0       	rjmp	.+74     	; 0xa2e8 <collision_detect_player+0x1c2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    a29e:	88 30       	cpi	r24, 0x08	; 8
    a2a0:	19 f5       	brne	.+70     	; 0xa2e8 <collision_detect_player+0x1c2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a2a2:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a2a4:	c2 01       	movw	r24, r4
    a2a6:	b5 01       	movw	r22, r10
    a2a8:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    a2ac:	6d 5f       	subi	r22, 0xFD	; 253
    a2ae:	40 e0       	ldi	r20, 0x00	; 0
    a2b0:	50 e0       	ldi	r21, 0x00	; 0
    a2b2:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
			SFX_ITEM;
    a2b6:	2f ef       	ldi	r18, 0xFF	; 255
    a2b8:	47 e1       	ldi	r20, 0x17	; 23
    a2ba:	63 e0       	ldi	r22, 0x03	; 3
    a2bc:	84 e0       	ldi	r24, 0x04	; 4
    a2be:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    a2c2:	f4 01       	movw	r30, r8
    a2c4:	83 89       	ldd	r24, Z+19	; 0x13
    a2c6:	80 fd       	sbrc	r24, 0
    a2c8:	0f c0       	rjmp	.+30     	; 0xa2e8 <collision_detect_player+0x1c2>
			{
				player->level_score++;
    a2ca:	f7 01       	movw	r30, r14
    a2cc:	87 85       	ldd	r24, Z+15	; 0x0f
    a2ce:	8f 5f       	subi	r24, 0xFF	; 255
    a2d0:	87 87       	std	Z+15, r24	; 0x0f
				player->score++;
    a2d2:	86 85       	ldd	r24, Z+14	; 0x0e
    a2d4:	8f 5f       	subi	r24, 0xFF	; 255
    a2d6:	86 87       	std	Z+14, r24	; 0x0e
				render_score(player, hud_x);
    a2d8:	61 2f       	mov	r22, r17
    a2da:	c7 01       	movw	r24, r14
    a2dc:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
				kill_player(other_player, other_player_hud_x);
    a2e0:	62 2d       	mov	r22, r2
    a2e2:	c4 01       	movw	r24, r8
    a2e4:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <kill_player>
    a2e8:	f2 e0       	ldi	r31, 0x02	; 2
    a2ea:	cf 0e       	add	r12, r31
    a2ec:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a2ee:	c6 14       	cp	r12, r6
    a2f0:	d7 04       	cpc	r13, r7
    a2f2:	09 f0       	breq	.+2      	; 0xa2f6 <collision_detect_player+0x1d0>
    a2f4:	81 cf       	rjmp	.-254    	; 0xa1f8 <collision_detect_player+0xd2>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    a2f6:	29 96       	adiw	r28, 0x09	; 9
    a2f8:	0f b6       	in	r0, 0x3f	; 63
    a2fa:	f8 94       	cli
    a2fc:	de bf       	out	0x3e, r29	; 62
    a2fe:	0f be       	out	0x3f, r0	; 63
    a300:	cd bf       	out	0x3d, r28	; 61
    a302:	df 91       	pop	r29
    a304:	cf 91       	pop	r28
    a306:	1f 91       	pop	r17
    a308:	0f 91       	pop	r16
    a30a:	ff 90       	pop	r15
    a30c:	ef 90       	pop	r14
    a30e:	df 90       	pop	r13
    a310:	cf 90       	pop	r12
    a312:	bf 90       	pop	r11
    a314:	af 90       	pop	r10
    a316:	9f 90       	pop	r9
    a318:	8f 90       	pop	r8
    a31a:	7f 90       	pop	r7
    a31c:	6f 90       	pop	r6
    a31e:	5f 90       	pop	r5
    a320:	4f 90       	pop	r4
    a322:	3f 90       	pop	r3
    a324:	2f 90       	pop	r2
    a326:	08 95       	ret

0000a328 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a328:	8f 92       	push	r8
    a32a:	9f 92       	push	r9
    a32c:	af 92       	push	r10
    a32e:	bf 92       	push	r11
    a330:	ff 92       	push	r15
    a332:	0f 93       	push	r16
    a334:	1f 93       	push	r17
    a336:	cf 93       	push	r28
    a338:	df 93       	push	r29
    a33a:	f8 2e       	mov	r15, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a33c:	c0 e0       	ldi	r28, 0x00	; 0
    a33e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a340:	0e e1       	ldi	r16, 0x1E	; 30
    a342:	10 e0       	ldi	r17, 0x00	; 0
    a344:	ce 01       	movw	r24, r28
    a346:	b8 01       	movw	r22, r16
    a348:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
		y = 3 + i / 30;
    a34c:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a34e:	ff 20       	and	r15, r15
    a350:	19 f0       	breq	.+6      	; 0xa358 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    a352:	4d e3       	ldi	r20, 0x3D	; 61
    a354:	51 e2       	ldi	r21, 0x21	; 33
    a356:	11 c0       	rjmp	.+34     	; 0xa37a <load_level_tiles+0x52>
    a358:	fe 01       	movw	r30, r28
    a35a:	ee 59       	subi	r30, 0x9E	; 158
    a35c:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    a35e:	41 81       	ldd	r20, Z+1	; 0x01
    a360:	84 2e       	mov	r8, r20
    a362:	91 2c       	mov	r9, r1
    a364:	f4 01       	movw	r30, r8
    a366:	31 97       	sbiw	r30, 0x01	; 1
    a368:	e9 30       	cpi	r30, 0x09	; 9
    a36a:	f1 05       	cpc	r31, r1
    a36c:	08 f5       	brcc	.+66     	; 0xa3b0 <load_level_tiles+0x88>
    a36e:	e8 5c       	subi	r30, 0xC8	; 200
    a370:	ff 4f       	sbci	r31, 0xFF	; 255
    a372:	0c 94 cf 59 	jmp	0xb39e	; 0xb39e <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    a376:	4a e3       	ldi	r20, 0x3A	; 58
    a378:	51 e2       	ldi	r21, 0x21	; 33
    a37a:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
    a37e:	1c c0       	rjmp	.+56     	; 0xa3b8 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    a380:	47 e3       	ldi	r20, 0x37	; 55
    a382:	51 e2       	ldi	r21, 0x21	; 33
    a384:	fa cf       	rjmp	.-12     	; 0xa37a <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    a386:	42 e2       	ldi	r20, 0x22	; 34
    a388:	51 e2       	ldi	r21, 0x21	; 33
    a38a:	f7 cf       	rjmp	.-18     	; 0xa37a <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    a38c:	4c e1       	ldi	r20, 0x1C	; 28
    a38e:	51 e2       	ldi	r21, 0x21	; 33
    a390:	f4 cf       	rjmp	.-24     	; 0xa37a <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    a392:	49 e1       	ldi	r20, 0x19	; 25
    a394:	51 e2       	ldi	r21, 0x21	; 33
    a396:	f1 cf       	rjmp	.-30     	; 0xa37a <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    a398:	4f e1       	ldi	r20, 0x1F	; 31
    a39a:	51 e2       	ldi	r21, 0x21	; 33
    a39c:	ee cf       	rjmp	.-36     	; 0xa37a <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    a39e:	44 e3       	ldi	r20, 0x34	; 52
    a3a0:	51 e2       	ldi	r21, 0x21	; 33
    a3a2:	eb cf       	rjmp	.-42     	; 0xa37a <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    a3a4:	41 e3       	ldi	r20, 0x31	; 49
    a3a6:	51 e2       	ldi	r21, 0x21	; 33
    a3a8:	e8 cf       	rjmp	.-48     	; 0xa37a <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    a3aa:	4e e2       	ldi	r20, 0x2E	; 46
    a3ac:	51 e2       	ldi	r21, 0x21	; 33
    a3ae:	e5 cf       	rjmp	.-54     	; 0xa37a <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    a3b0:	40 e0       	ldi	r20, 0x00	; 0
    a3b2:	50 e0       	ldi	r21, 0x00	; 0
    a3b4:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a3b8:	21 96       	adiw	r28, 0x01	; 1
    a3ba:	ce 3e       	cpi	r28, 0xEE	; 238
    a3bc:	82 e0       	ldi	r24, 0x02	; 2
    a3be:	d8 07       	cpc	r29, r24
    a3c0:	09 f6       	brne	.-126    	; 0xa344 <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    a3c2:	df 91       	pop	r29
    a3c4:	cf 91       	pop	r28
    a3c6:	1f 91       	pop	r17
    a3c8:	0f 91       	pop	r16
    a3ca:	ff 90       	pop	r15
    a3cc:	bf 90       	pop	r11
    a3ce:	af 90       	pop	r10
    a3d0:	9f 90       	pop	r9
    a3d2:	8f 90       	pop	r8
    a3d4:	08 95       	ret

0000a3d6 <load_level>:

void load_level(int level_number)
{
    a3d6:	9f 92       	push	r9
    a3d8:	af 92       	push	r10
    a3da:	bf 92       	push	r11
    a3dc:	cf 92       	push	r12
    a3de:	df 92       	push	r13
    a3e0:	ef 92       	push	r14
    a3e2:	ff 92       	push	r15
    a3e4:	0f 93       	push	r16
    a3e6:	1f 93       	push	r17
    a3e8:	cf 93       	push	r28
    a3ea:	df 93       	push	r29
    a3ec:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    a3ee:	8e ee       	ldi	r24, 0xEE	; 238
    a3f0:	92 e0       	ldi	r25, 0x02	; 2
    a3f2:	c8 9f       	mul	r28, r24
    a3f4:	70 01       	movw	r14, r0
    a3f6:	c9 9f       	mul	r28, r25
    a3f8:	f0 0c       	add	r15, r0
    a3fa:	d8 9f       	mul	r29, r24
    a3fc:	f0 0c       	add	r15, r0
    a3fe:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    a400:	83 e0       	ldi	r24, 0x03	; 3
    a402:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a406:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	game.current_level = level_number;
    a40a:	c0 93 c2 0b 	sts	0x0BC2, r28
    a40e:	03 e6       	ldi	r16, 0x63	; 99
    a410:	1c e0       	ldi	r17, 0x0C	; 12
	for (int i = 0; i < 30*25; i++)
    a412:	c0 e0       	ldi	r28, 0x00	; 0
    a414:	d0 e0       	ldi	r29, 0x00	; 0
    a416:	d7 01       	movw	r26, r14
    a418:	ad 58       	subi	r26, 0x8D	; 141
    a41a:	bc 4f       	sbci	r27, 0xFC	; 252
    a41c:	7d 01       	movw	r14, r26
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    a41e:	8e e1       	ldi	r24, 0x1E	; 30
    a420:	c8 2e       	mov	r12, r24
    a422:	d1 2c       	mov	r13, r1
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    a424:	92 e3       	ldi	r25, 0x32	; 50
    a426:	99 2e       	mov	r9, r25
    a428:	f7 01       	movw	r30, r14
    a42a:	ec 0f       	add	r30, r28
    a42c:	fd 1f       	adc	r31, r29
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    a42e:	e4 91       	lpm	r30, Z
    a430:	58 01       	movw	r10, r16
    a432:	d8 01       	movw	r26, r16
    a434:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    a436:	e8 35       	cpi	r30, 0x58	; 88
    a438:	01 f5       	brne	.+64     	; 0xa47a <load_level+0xa4>
		{
			player1.spawn_x = (i % 30) * 8;
    a43a:	ce 01       	movw	r24, r28
    a43c:	b6 01       	movw	r22, r12
    a43e:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    a442:	88 0f       	add	r24, r24
    a444:	88 0f       	add	r24, r24
    a446:	88 0f       	add	r24, r24
    a448:	80 93 ef 0b 	sts	0x0BEF, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    a44c:	6d 5f       	subi	r22, 0xFD	; 253
    a44e:	7f 4f       	sbci	r23, 0xFF	; 255
    a450:	66 0f       	add	r22, r22
    a452:	66 0f       	add	r22, r22
    a454:	66 0f       	add	r22, r22
    a456:	60 93 f0 0b 	sts	0x0BF0, r22
			player1.level_score = 0;
    a45a:	10 92 ed 0b 	sts	0x0BED, r1
			player1.has_over_speed = false;
    a45e:	10 92 f7 0b 	sts	0x0BF7, r1
			player1.has_rocket = false;
    a462:	10 92 f6 0b 	sts	0x0BF6, r1
			player1.max_speed = MAX_SPEED;
    a466:	90 92 f5 0b 	sts	0x0BF5, r9
			player_init_shot_state(&player1);
    a46a:	8e ed       	ldi	r24, 0xDE	; 222
    a46c:	9b e0       	ldi	r25, 0x0B	; 11
    a46e:	0e 94 cf 48 	call	0x919e	; 0x919e <player_init_shot_state>
			player_spawn(&player1);
    a472:	8e ed       	ldi	r24, 0xDE	; 222
    a474:	9b e0       	ldi	r25, 0x0B	; 11
    a476:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
    a47a:	0f 5f       	subi	r16, 0xFF	; 255
    a47c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (level.level_map[i] == L_P2_SPAWN)
    a47e:	f5 01       	movw	r30, r10
    a480:	80 81       	ld	r24, Z
    a482:	83 36       	cpi	r24, 0x63	; 99
    a484:	01 f5       	brne	.+64     	; 0xa4c6 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    a486:	ce 01       	movw	r24, r28
    a488:	b6 01       	movw	r22, r12
    a48a:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    a48e:	88 0f       	add	r24, r24
    a490:	88 0f       	add	r24, r24
    a492:	88 0f       	add	r24, r24
    a494:	80 93 62 0f 	sts	0x0F62, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    a498:	6d 5f       	subi	r22, 0xFD	; 253
    a49a:	7f 4f       	sbci	r23, 0xFF	; 255
    a49c:	66 0f       	add	r22, r22
    a49e:	66 0f       	add	r22, r22
    a4a0:	66 0f       	add	r22, r22
    a4a2:	60 93 63 0f 	sts	0x0F63, r22
			player2.level_score = 0;
    a4a6:	10 92 60 0f 	sts	0x0F60, r1
			player2.has_over_speed = false;
    a4aa:	10 92 6a 0f 	sts	0x0F6A, r1
			player2.has_rocket = false;
    a4ae:	10 92 69 0f 	sts	0x0F69, r1
			player2.max_speed = MAX_SPEED;
    a4b2:	90 92 68 0f 	sts	0x0F68, r9
			player_init_shot_state(&player2);
    a4b6:	81 e5       	ldi	r24, 0x51	; 81
    a4b8:	9f e0       	ldi	r25, 0x0F	; 15
    a4ba:	0e 94 cf 48 	call	0x919e	; 0x919e <player_init_shot_state>
			player_spawn(&player2);
    a4be:	81 e5       	ldi	r24, 0x51	; 81
    a4c0:	9f e0       	ldi	r25, 0x0F	; 15
    a4c2:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    a4c6:	21 96       	adiw	r28, 0x01	; 1
    a4c8:	ce 3e       	cpi	r28, 0xEE	; 238
    a4ca:	f2 e0       	ldi	r31, 0x02	; 2
    a4cc:	df 07       	cpc	r29, r31
    a4ce:	09 f0       	breq	.+2      	; 0xa4d2 <load_level+0xfc>
    a4d0:	ab cf       	rjmp	.-170    	; 0xa428 <load_level+0x52>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    a4d2:	60 e0       	ldi	r22, 0x00	; 0
    a4d4:	8e ed       	ldi	r24, 0xDE	; 222
    a4d6:	9b e0       	ldi	r25, 0x0B	; 11
    a4d8:	0e 94 a3 4a 	call	0x9546	; 0x9546 <render_hud>
	render_hud(&player2, 15);
    a4dc:	6f e0       	ldi	r22, 0x0F	; 15
    a4de:	81 e5       	ldi	r24, 0x51	; 81
    a4e0:	9f e0       	ldi	r25, 0x0F	; 15
    a4e2:	0e 94 a3 4a 	call	0x9546	; 0x9546 <render_hud>
	render_score(&player1, 0);
    a4e6:	60 e0       	ldi	r22, 0x00	; 0
    a4e8:	8e ed       	ldi	r24, 0xDE	; 222
    a4ea:	9b e0       	ldi	r25, 0x0B	; 11
    a4ec:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	render_score(&player2, 15);
    a4f0:	6f e0       	ldi	r22, 0x0F	; 15
    a4f2:	81 e5       	ldi	r24, 0x51	; 81
    a4f4:	9f e0       	ldi	r25, 0x0F	; 15
    a4f6:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	Print(14, 0, strVertSep);
    a4fa:	44 ea       	ldi	r20, 0xA4	; 164
    a4fc:	52 e0       	ldi	r21, 0x02	; 2
    a4fe:	60 e0       	ldi	r22, 0x00	; 0
    a500:	70 e0       	ldi	r23, 0x00	; 0
    a502:	8e e0       	ldi	r24, 0x0E	; 14
    a504:	90 e0       	ldi	r25, 0x00	; 0
    a506:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(14, 1, strVertSep);
    a50a:	44 ea       	ldi	r20, 0xA4	; 164
    a50c:	52 e0       	ldi	r21, 0x02	; 2
    a50e:	61 e0       	ldi	r22, 0x01	; 1
    a510:	70 e0       	ldi	r23, 0x00	; 0
    a512:	8e e0       	ldi	r24, 0x0E	; 14
    a514:	90 e0       	ldi	r25, 0x00	; 0
    a516:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(14, 2, strVertSep);
    a51a:	44 ea       	ldi	r20, 0xA4	; 164
    a51c:	52 e0       	ldi	r21, 0x02	; 2
    a51e:	62 e0       	ldi	r22, 0x02	; 2
    a520:	70 e0       	ldi	r23, 0x00	; 0
    a522:	8e e0       	ldi	r24, 0x0E	; 14
    a524:	90 e0       	ldi	r25, 0x00	; 0
    a526:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	load_level_tiles(false);
    a52a:	80 e0       	ldi	r24, 0x00	; 0
    a52c:	0e 94 94 51 	call	0xa328	; 0xa328 <load_level_tiles>
	SFX_LEVEL_START;
    a530:	2f ef       	ldi	r18, 0xFF	; 255
    a532:	47 e1       	ldi	r20, 0x17	; 23
    a534:	65 e0       	ldi	r22, 0x05	; 5
    a536:	84 e0       	ldi	r24, 0x04	; 4
}
    a538:	df 91       	pop	r29
    a53a:	cf 91       	pop	r28
    a53c:	1f 91       	pop	r17
    a53e:	0f 91       	pop	r16
    a540:	ff 90       	pop	r15
    a542:	ef 90       	pop	r14
    a544:	df 90       	pop	r13
    a546:	cf 90       	pop	r12
    a548:	bf 90       	pop	r11
    a54a:	af 90       	pop	r10
    a54c:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    a54e:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <TriggerNote>

0000a552 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    a552:	cf 93       	push	r28
    a554:	df 93       	push	r29
    a556:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    a558:	61 e0       	ldi	r22, 0x01	; 1
    a55a:	83 e0       	ldi	r24, 0x03	; 3
    a55c:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    a560:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <ClearVram>
	clear_sprites();
    a564:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	Print(8, 12, &strLevels[index*16]);
    a568:	d0 e0       	ldi	r29, 0x00	; 0
    a56a:	ae 01       	movw	r20, r28
    a56c:	84 e0       	ldi	r24, 0x04	; 4
    a56e:	44 0f       	add	r20, r20
    a570:	55 1f       	adc	r21, r21
    a572:	8a 95       	dec	r24
    a574:	e1 f7       	brne	.-8      	; 0xa56e <level_transition+0x1c>
    a576:	4a 50       	subi	r20, 0x0A	; 10
    a578:	5f 4f       	sbci	r21, 0xFF	; 255
    a57a:	6c e0       	ldi	r22, 0x0C	; 12
    a57c:	70 e0       	ldi	r23, 0x00	; 0
    a57e:	88 e0       	ldi	r24, 0x08	; 8
    a580:	90 e0       	ldi	r25, 0x00	; 0
    a582:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	FadeIn(1, true);
    a586:	61 e0       	ldi	r22, 0x01	; 1
    a588:	81 e0       	ldi	r24, 0x01	; 1
    a58a:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    a58e:	82 e0       	ldi	r24, 0x02	; 2
    a590:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
	FadeOut(1, true);
    a594:	61 e0       	ldi	r22, 0x01	; 1
    a596:	81 e0       	ldi	r24, 0x01	; 1
    a598:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    a59c:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a5a0:	60 e0       	ldi	r22, 0x00	; 0
    a5a2:	83 e0       	ldi	r24, 0x03	; 3
    a5a4:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	load_level(index);
    a5a8:	ce 01       	movw	r24, r28
}
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    a5ae:	0c 94 eb 51 	jmp	0xa3d6	; 0xa3d6 <load_level>

0000a5b2 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    a5b2:	10 92 c1 0b 	sts	0x0BC1, r1
	clear_sprites();
    a5b6:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	Print(7, 13, str1Player);
    a5ba:	49 ed       	ldi	r20, 0xD9	; 217
    a5bc:	52 e0       	ldi	r21, 0x02	; 2
    a5be:	6d e0       	ldi	r22, 0x0D	; 13
    a5c0:	70 e0       	ldi	r23, 0x00	; 0
    a5c2:	87 e0       	ldi	r24, 0x07	; 7
    a5c4:	90 e0       	ldi	r25, 0x00	; 0
    a5c6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(7, 14, str2Player);
    a5ca:	48 ec       	ldi	r20, 0xC8	; 200
    a5cc:	52 e0       	ldi	r21, 0x02	; 2
    a5ce:	6e e0       	ldi	r22, 0x0E	; 14
    a5d0:	70 e0       	ldi	r23, 0x00	; 0
    a5d2:	87 e0       	ldi	r24, 0x07	; 7
    a5d4:	90 e0       	ldi	r25, 0x00	; 0
    a5d6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(7, 15, strHighscores);
    a5da:	4e eb       	ldi	r20, 0xBE	; 190
    a5dc:	52 e0       	ldi	r21, 0x02	; 2
    a5de:	6f e0       	ldi	r22, 0x0F	; 15
    a5e0:	70 e0       	ldi	r23, 0x00	; 0
    a5e2:	87 e0       	ldi	r24, 0x07	; 7
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(4, 26, strCopyright);
    a5ea:	47 ee       	ldi	r20, 0xE7	; 231
    a5ec:	52 e0       	ldi	r21, 0x02	; 2
    a5ee:	6a e1       	ldi	r22, 0x1A	; 26
    a5f0:	70 e0       	ldi	r23, 0x00	; 0
    a5f2:	84 e0       	ldi	r24, 0x04	; 4
    a5f4:	90 e0       	ldi	r25, 0x00	; 0
    a5f6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    a5fa:	4e e7       	ldi	r20, 0x7E	; 126
    a5fc:	51 e2       	ldi	r21, 0x21	; 33
    a5fe:	65 e0       	ldi	r22, 0x05	; 5
    a600:	84 e0       	ldi	r24, 0x04	; 4
    a602:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
	MapSprite2(0, map_ball, 0);
    a606:	40 e0       	ldi	r20, 0x00	; 0
    a608:	6b ec       	ldi	r22, 0xCB	; 203
    a60a:	70 e2       	ldi	r23, 0x20	; 32
    a60c:	80 e0       	ldi	r24, 0x00	; 0
    a60e:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	SFX_SPLASH;
    a612:	2f ef       	ldi	r18, 0xFF	; 255
    a614:	47 e1       	ldi	r20, 0x17	; 23
    a616:	69 e0       	ldi	r22, 0x09	; 9
    a618:	84 e0       	ldi	r24, 0x04	; 4
    a61a:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <TriggerNote>

0000a61e <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    a61e:	ef 92       	push	r14
    a620:	ff 92       	push	r15
    a622:	0f 93       	push	r16
    a624:	1f 93       	push	r17
    a626:	cf 93       	push	r28
    a628:	df 93       	push	r29
    a62a:	1f 92       	push	r1
    a62c:	cd b7       	in	r28, 0x3d	; 61
    a62e:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    a630:	81 e0       	ldi	r24, 0x01	; 1
    a632:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a636:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a63a:	40 e0       	ldi	r20, 0x00	; 0
    a63c:	6a e0       	ldi	r22, 0x0A	; 10
    a63e:	71 e2       	ldi	r23, 0x21	; 33
    a640:	80 e0       	ldi	r24, 0x00	; 0
    a642:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a646:	40 e0       	ldi	r20, 0x00	; 0
    a648:	62 ef       	ldi	r22, 0xF2	; 242
    a64a:	70 e2       	ldi	r23, 0x20	; 32
    a64c:	84 e0       	ldi	r24, 0x04	; 4
    a64e:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    a652:	02 e0       	ldi	r16, 0x02	; 2
    a654:	22 e0       	ldi	r18, 0x02	; 2
    a656:	48 e0       	ldi	r20, 0x08	; 8
    a658:	68 e3       	ldi	r22, 0x38	; 56
    a65a:	80 e0       	ldi	r24, 0x00	; 0
    a65c:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    a660:	22 e0       	ldi	r18, 0x02	; 2
    a662:	48 e0       	ldi	r20, 0x08	; 8
    a664:	60 ea       	ldi	r22, 0xA0	; 160
    a666:	84 e0       	ldi	r24, 0x04	; 4
    a668:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	Print(10, 2, strHighscores);
    a66c:	4e eb       	ldi	r20, 0xBE	; 190
    a66e:	52 e0       	ldi	r21, 0x02	; 2
    a670:	62 e0       	ldi	r22, 0x02	; 2
    a672:	70 e0       	ldi	r23, 0x00	; 0
    a674:	8a e0       	ldi	r24, 0x0A	; 10
    a676:	90 e0       	ldi	r25, 0x00	; 0
    a678:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a67c:	09 e0       	ldi	r16, 0x09	; 9
    a67e:	11 e0       	ldi	r17, 0x01	; 1
    a680:	87 e0       	ldi	r24, 0x07	; 7
    a682:	e8 2e       	mov	r14, r24
    a684:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    a686:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    a688:	20 e0       	ldi	r18, 0x00	; 0
    a68a:	43 2f       	mov	r20, r19
    a68c:	b7 01       	movw	r22, r14
    a68e:	82 e0       	ldi	r24, 0x02	; 2
    a690:	90 e0       	ldi	r25, 0x00	; 0
    a692:	39 83       	std	Y+1, r19	; 0x01
    a694:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		PrintChar(3, y, '.');
    a698:	4e e2       	ldi	r20, 0x2E	; 46
    a69a:	b7 01       	movw	r22, r14
    a69c:	83 e0       	ldi	r24, 0x03	; 3
    a69e:	90 e0       	ldi	r25, 0x00	; 0
    a6a0:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    a6a4:	f8 01       	movw	r30, r16
    a6a6:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    a6a8:	40 81       	ld	r20, Z
    a6aa:	83 e0       	ldi	r24, 0x03	; 3
    a6ac:	48 9f       	mul	r20, r24
    a6ae:	a0 01       	movw	r20, r0
    a6b0:	11 24       	eor	r1, r1
    a6b2:	4a 5d       	subi	r20, 0xDA	; 218
    a6b4:	5e 4f       	sbci	r21, 0xFE	; 254
    a6b6:	23 e0       	ldi	r18, 0x03	; 3
    a6b8:	6e 2d       	mov	r22, r14
    a6ba:	85 e0       	ldi	r24, 0x05	; 5
    a6bc:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		Print(9, y, strOwns);
    a6c0:	48 e6       	ldi	r20, 0x68	; 104
    a6c2:	52 e0       	ldi	r21, 0x02	; 2
    a6c4:	b7 01       	movw	r22, r14
    a6c6:	89 e0       	ldi	r24, 0x09	; 9
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a6ce:	f8 01       	movw	r30, r16
    a6d0:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    a6d2:	40 81       	ld	r20, Z
    a6d4:	e3 e0       	ldi	r30, 0x03	; 3
    a6d6:	4e 9f       	mul	r20, r30
    a6d8:	a0 01       	movw	r20, r0
    a6da:	11 24       	eor	r1, r1
    a6dc:	4a 5d       	subi	r20, 0xDA	; 218
    a6de:	5e 4f       	sbci	r21, 0xFE	; 254
    a6e0:	23 e0       	ldi	r18, 0x03	; 3
    a6e2:	6e 2d       	mov	r22, r14
    a6e4:	8e e0       	ldi	r24, 0x0E	; 14
    a6e6:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		Print(18, y, strBy);
    a6ea:	45 e6       	ldi	r20, 0x65	; 101
    a6ec:	52 e0       	ldi	r21, 0x02	; 2
    a6ee:	b7 01       	movw	r22, r14
    a6f0:	82 e1       	ldi	r24, 0x12	; 18
    a6f2:	90 e0       	ldi	r25, 0x00	; 0
    a6f4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a6f8:	f8 01       	movw	r30, r16
    a6fa:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    a6fc:	21 e0       	ldi	r18, 0x01	; 1
    a6fe:	40 81       	ld	r20, Z
    a700:	b7 01       	movw	r22, r14
    a702:	87 e1       	ldi	r24, 0x17	; 23
    a704:	90 e0       	ldi	r25, 0x00	; 0
    a706:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		PrintChar(24, y, '-');
    a70a:	4d e2       	ldi	r20, 0x2D	; 45
    a70c:	b7 01       	movw	r22, r14
    a70e:	88 e1       	ldi	r24, 0x18	; 24
    a710:	90 e0       	ldi	r25, 0x00	; 0
    a712:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    a716:	21 e0       	ldi	r18, 0x01	; 1
    a718:	f8 01       	movw	r30, r16
    a71a:	40 81       	ld	r20, Z
    a71c:	b7 01       	movw	r22, r14
    a71e:	8b e1       	ldi	r24, 0x1B	; 27
    a720:	90 e0       	ldi	r25, 0x00	; 0
    a722:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		y += 3;
		rank += 1;
    a726:	39 81       	ldd	r19, Y+1	; 0x01
    a728:	3f 5f       	subi	r19, 0xFF	; 255
    a72a:	f3 e0       	ldi	r31, 0x03	; 3
    a72c:	ef 0e       	add	r14, r31
    a72e:	f1 1c       	adc	r15, r1
    a730:	0c 5f       	subi	r16, 0xFC	; 252
    a732:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    a734:	36 30       	cpi	r19, 0x06	; 6
    a736:	09 f0       	breq	.+2      	; 0xa73a <load_tank_rank+0x11c>
    a738:	a7 cf       	rjmp	.-178    	; 0xa688 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a73a:	4c e7       	ldi	r20, 0x7C	; 124
    a73c:	52 e0       	ldi	r21, 0x02	; 2
    a73e:	67 e1       	ldi	r22, 0x17	; 23
    a740:	70 e0       	ldi	r23, 0x00	; 0
    a742:	8a e0       	ldi	r24, 0x0A	; 10
    a744:	90 e0       	ldi	r25, 0x00	; 0
}
    a746:	0f 90       	pop	r0
    a748:	df 91       	pop	r29
    a74a:	cf 91       	pop	r28
    a74c:	1f 91       	pop	r17
    a74e:	0f 91       	pop	r16
    a750:	ff 90       	pop	r15
    a752:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a754:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

0000a758 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    a758:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
	SetSpriteVisibility(true);
    a75c:	81 e0       	ldi	r24, 0x01	; 1
    a75e:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
	init_game_state();
    a762:	0e 94 de 48 	call	0x91bc	; 0x91bc <init_game_state>
	load_tank_rank();
    a766:	0c 94 0f 53 	jmp	0xa61e	; 0xa61e <load_tank_rank>

0000a76a <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a76a:	4f 92       	push	r4
    a76c:	5f 92       	push	r5
    a76e:	6f 92       	push	r6
    a770:	7f 92       	push	r7
    a772:	9f 92       	push	r9
    a774:	af 92       	push	r10
    a776:	bf 92       	push	r11
    a778:	cf 92       	push	r12
    a77a:	df 92       	push	r13
    a77c:	ef 92       	push	r14
    a77e:	ff 92       	push	r15
    a780:	0f 93       	push	r16
    a782:	1f 93       	push	r17
    a784:	cf 93       	push	r28
    a786:	df 93       	push	r29
    a788:	8c 01       	movw	r16, r24
    a78a:	eb 01       	movw	r28, r22
    a78c:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	if ((p->pressed & BTN_START))
    a78e:	fc 01       	movw	r30, r24
    a790:	80 81       	ld	r24, Z
    a792:	83 ff       	sbrs	r24, 3
    a794:	0f c0       	rjmp	.+30     	; 0xa7b4 <update_level_helper+0x4a>
	{
		SFX_NAVIGATE;
    a796:	2f ef       	ldi	r18, 0xFF	; 255
    a798:	47 e1       	ldi	r20, 0x17	; 23
    a79a:	67 e0       	ldi	r22, 0x07	; 7
    a79c:	84 e0       	ldi	r24, 0x04	; 4
    a79e:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		game.paused = game.paused ^ 1;
    a7a2:	80 91 c3 0b 	lds	r24, 0x0BC3
    a7a6:	91 e0       	ldi	r25, 0x01	; 1
    a7a8:	89 27       	eor	r24, r25
    a7aa:	80 93 c3 0b 	sts	0x0BC3, r24
		load_level_tiles(false);
    a7ae:	80 e0       	ldi	r24, 0x00	; 0
    a7b0:	0e 94 94 51 	call	0xa328	; 0xa328 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    a7b4:	20 91 c3 0b 	lds	r18, 0x0BC3
    a7b8:	f8 01       	movw	r30, r16
    a7ba:	80 81       	ld	r24, Z
    a7bc:	91 81       	ldd	r25, Z+1	; 0x01
    a7be:	21 11       	cpse	r18, r1
    a7c0:	7d c1       	rjmp	.+762    	; 0xaabc <update_level_helper+0x352>
    a7c2:	2b 89       	ldd	r18, Y+19	; 0x13
    a7c4:	20 fd       	sbrc	r18, 0
    a7c6:	7a c1       	rjmp	.+756    	; 0xaabc <update_level_helper+0x352>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    a7c8:	93 ff       	sbrs	r25, 3
    a7ca:	11 c0       	rjmp	.+34     	; 0xa7ee <update_level_helper+0x84>
    a7cc:	8c 89       	ldd	r24, Y+20	; 0x14
    a7ce:	8a 35       	cpi	r24, 0x5A	; 90
    a7d0:	71 f4       	brne	.+28     	; 0xa7ee <update_level_helper+0x84>
		{
			player->banter_frame = 0;
    a7d2:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    a7d4:	69 e0       	ldi	r22, 0x09	; 9
    a7d6:	70 e0       	ldi	r23, 0x00	; 0
    a7d8:	80 e0       	ldi	r24, 0x00	; 0
    a7da:	90 e0       	ldi	r25, 0x00	; 0
    a7dc:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <LBRandom>
    a7e0:	8d 8b       	std	Y+21, r24	; 0x15
			SFX_BANTER;
    a7e2:	2f e5       	ldi	r18, 0x5F	; 95
    a7e4:	4e e1       	ldi	r20, 0x1E	; 30
    a7e6:	60 e0       	ldi	r22, 0x00	; 0
    a7e8:	84 e0       	ldi	r24, 0x04	; 4
    a7ea:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    a7ee:	6f 89       	ldd	r22, Y+23	; 0x17
    a7f0:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    a7f2:	f8 01       	movw	r30, r16
    a7f4:	84 81       	ldd	r24, Z+4	; 0x04
    a7f6:	84 ff       	sbrs	r24, 4
    a7f8:	15 c0       	rjmp	.+42     	; 0xa824 <update_level_helper+0xba>
		{
			player->shared.direction = D_UP;
    a7fa:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    a7fc:	70 e0       	ldi	r23, 0x00	; 0
    a7fe:	80 e0       	ldi	r24, 0x00	; 0
    a800:	90 e0       	ldi	r25, 0x00	; 0
    a802:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a806:	25 e6       	ldi	r18, 0x65	; 101
    a808:	38 e8       	ldi	r19, 0x88	; 136
    a80a:	48 e8       	ldi	r20, 0x88	; 136
    a80c:	5c e3       	ldi	r21, 0x3C	; 60
    a80e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a812:	9b 01       	movw	r18, r22
    a814:	ac 01       	movw	r20, r24
    a816:	6e 81       	ldd	r22, Y+6	; 0x06
    a818:	7f 81       	ldd	r23, Y+7	; 0x07
    a81a:	88 85       	ldd	r24, Y+8	; 0x08
    a81c:	99 85       	ldd	r25, Y+9	; 0x09
    a81e:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    a822:	2f c0       	rjmp	.+94     	; 0xa882 <update_level_helper+0x118>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    a824:	87 ff       	sbrs	r24, 7
    a826:	16 c0       	rjmp	.+44     	; 0xa854 <update_level_helper+0xea>
		{
			player->shared.direction = D_RIGHT;
    a828:	81 e0       	ldi	r24, 0x01	; 1
    a82a:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    a82c:	70 e0       	ldi	r23, 0x00	; 0
    a82e:	80 e0       	ldi	r24, 0x00	; 0
    a830:	90 e0       	ldi	r25, 0x00	; 0
    a832:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a836:	25 e6       	ldi	r18, 0x65	; 101
    a838:	38 e8       	ldi	r19, 0x88	; 136
    a83a:	48 e8       	ldi	r20, 0x88	; 136
    a83c:	5c e3       	ldi	r21, 0x3C	; 60
    a83e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a842:	9b 01       	movw	r18, r22
    a844:	ac 01       	movw	r20, r24
    a846:	6a 81       	ldd	r22, Y+2	; 0x02
    a848:	7b 81       	ldd	r23, Y+3	; 0x03
    a84a:	8c 81       	ldd	r24, Y+4	; 0x04
    a84c:	9d 81       	ldd	r25, Y+5	; 0x05
    a84e:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    a852:	33 c0       	rjmp	.+102    	; 0xa8ba <update_level_helper+0x150>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    a854:	85 ff       	sbrs	r24, 5
    a856:	1a c0       	rjmp	.+52     	; 0xa88c <update_level_helper+0x122>
		{
			player->shared.direction = D_DOWN;
    a858:	82 e0       	ldi	r24, 0x02	; 2
    a85a:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    a85c:	70 e0       	ldi	r23, 0x00	; 0
    a85e:	80 e0       	ldi	r24, 0x00	; 0
    a860:	90 e0       	ldi	r25, 0x00	; 0
    a862:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a866:	25 e6       	ldi	r18, 0x65	; 101
    a868:	38 e8       	ldi	r19, 0x88	; 136
    a86a:	48 e8       	ldi	r20, 0x88	; 136
    a86c:	5c e3       	ldi	r21, 0x3C	; 60
    a86e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a872:	9b 01       	movw	r18, r22
    a874:	ac 01       	movw	r20, r24
    a876:	6e 81       	ldd	r22, Y+6	; 0x06
    a878:	7f 81       	ldd	r23, Y+7	; 0x07
    a87a:	88 85       	ldd	r24, Y+8	; 0x08
    a87c:	99 85       	ldd	r25, Y+9	; 0x09
    a87e:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    a882:	6e 83       	std	Y+6, r22	; 0x06
    a884:	7f 83       	std	Y+7, r23	; 0x07
    a886:	88 87       	std	Y+8, r24	; 0x08
    a888:	99 87       	std	Y+9, r25	; 0x09
    a88a:	1d c0       	rjmp	.+58     	; 0xa8c6 <update_level_helper+0x15c>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    a88c:	86 ff       	sbrs	r24, 6
    a88e:	1a c0       	rjmp	.+52     	; 0xa8c4 <update_level_helper+0x15a>
		{
			player->shared.direction = D_LEFT;
    a890:	83 e0       	ldi	r24, 0x03	; 3
    a892:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    a894:	70 e0       	ldi	r23, 0x00	; 0
    a896:	80 e0       	ldi	r24, 0x00	; 0
    a898:	90 e0       	ldi	r25, 0x00	; 0
    a89a:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a89e:	25 e6       	ldi	r18, 0x65	; 101
    a8a0:	38 e8       	ldi	r19, 0x88	; 136
    a8a2:	48 e8       	ldi	r20, 0x88	; 136
    a8a4:	5c e3       	ldi	r21, 0x3C	; 60
    a8a6:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a8aa:	9b 01       	movw	r18, r22
    a8ac:	ac 01       	movw	r20, r24
    a8ae:	6a 81       	ldd	r22, Y+2	; 0x02
    a8b0:	7b 81       	ldd	r23, Y+3	; 0x03
    a8b2:	8c 81       	ldd	r24, Y+4	; 0x04
    a8b4:	9d 81       	ldd	r25, Y+5	; 0x05
    a8b6:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    a8ba:	6a 83       	std	Y+2, r22	; 0x02
    a8bc:	7b 83       	std	Y+3, r23	; 0x03
    a8be:	8c 83       	std	Y+4, r24	; 0x04
    a8c0:	9d 83       	std	Y+5, r25	; 0x05
    a8c2:	01 c0       	rjmp	.+2      	; 0xa8c6 <update_level_helper+0x15c>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    a8c4:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    a8c6:	f8 01       	movw	r30, r16
    a8c8:	80 81       	ld	r24, Z
    a8ca:	91 81       	ldd	r25, Z+1	; 0x01
    a8cc:	8e 01       	movw	r16, r28
    a8ce:	06 5e       	subi	r16, 0xE6	; 230
    a8d0:	1f 4f       	sbci	r17, 0xFF	; 255
    a8d2:	90 ff       	sbrs	r25, 0
    a8d4:	41 c0       	rjmp	.+130    	; 0xa958 <update_level_helper+0x1ee>
    a8d6:	88 89       	ldd	r24, Y+16	; 0x10
    a8d8:	82 30       	cpi	r24, 0x02	; 2
    a8da:	f0 f5       	brcc	.+124    	; 0xa958 <update_level_helper+0x1ee>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    a8dc:	8f a1       	ldd	r24, Y+39	; 0x27
    a8de:	81 11       	cpse	r24, r1
    a8e0:	02 c0       	rjmp	.+4      	; 0xa8e6 <update_level_helper+0x17c>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a8e2:	68 01       	movw	r12, r16
    a8e4:	0a c0       	rjmp	.+20     	; 0xa8fa <update_level_helper+0x190>
				if (!shot->active)
    a8e6:	fe 01       	movw	r30, r28
    a8e8:	e6 5b       	subi	r30, 0xB6	; 182
    a8ea:	ff 4f       	sbci	r31, 0xFF	; 255
    a8ec:	80 81       	ld	r24, Z
    a8ee:	81 11       	cpse	r24, r1
    a8f0:	33 c0       	rjmp	.+102    	; 0xa958 <update_level_helper+0x1ee>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a8f2:	6e 01       	movw	r12, r28
    a8f4:	fd e3       	ldi	r31, 0x3D	; 61
    a8f6:	cf 0e       	add	r12, r31
    a8f8:	d1 1c       	adc	r13, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    a8fa:	88 8d       	ldd	r24, Y+24	; 0x18
    a8fc:	88 23       	and	r24, r24
    a8fe:	61 f0       	breq	.+24     	; 0xa918 <update_level_helper+0x1ae>
					{
						init_shot_state(shot, ROCKET_SHOT);
    a900:	61 e0       	ldi	r22, 0x01	; 1
    a902:	c6 01       	movw	r24, r12
    a904:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    a908:	61 e0       	ldi	r22, 0x01	; 1
    a90a:	c6 01       	movw	r24, r12
    a90c:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>
						SFX_ROCKET;
    a910:	2f ef       	ldi	r18, 0xFF	; 255
    a912:	47 e1       	ldi	r20, 0x17	; 23
    a914:	68 e0       	ldi	r22, 0x08	; 8
    a916:	0b c0       	rjmp	.+22     	; 0xa92e <update_level_helper+0x1c4>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    a918:	60 e0       	ldi	r22, 0x00	; 0
    a91a:	c6 01       	movw	r24, r12
    a91c:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    a920:	60 e0       	ldi	r22, 0x00	; 0
    a922:	c6 01       	movw	r24, r12
    a924:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>
						SFX_CANNONBALL;
    a928:	2f ef       	ldi	r18, 0xFF	; 255
    a92a:	47 e1       	ldi	r20, 0x17	; 23
    a92c:	62 e0       	ldi	r22, 0x02	; 2
    a92e:	84 e0       	ldi	r24, 0x04	; 4
    a930:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
					}
					player->active_shots++;
    a934:	88 89       	ldd	r24, Y+16	; 0x10
    a936:	8f 5f       	subi	r24, 0xFF	; 255
    a938:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    a93a:	88 81       	ld	r24, Y
    a93c:	f6 01       	movw	r30, r12
    a93e:	80 83       	st	Z, r24
					position_shot(player, shot);
    a940:	b6 01       	movw	r22, r12
    a942:	ce 01       	movw	r24, r28
    a944:	0e 94 aa 49 	call	0x9354	; 0x9354 <position_shot>
					shot->active = 1;
    a948:	81 e0       	ldi	r24, 0x01	; 1
    a94a:	f6 01       	movw	r30, r12
    a94c:	85 87       	std	Z+13, r24	; 0x0d
					if (player->has_over_speed)
    a94e:	89 8d       	ldd	r24, Y+25	; 0x19
    a950:	88 23       	and	r24, r24
    a952:	11 f0       	breq	.+4      	; 0xa958 <update_level_helper+0x1ee>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    a954:	86 e9       	ldi	r24, 0x96	; 150
    a956:	81 83       	std	Z+1, r24	; 0x01
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a958:	a1 2c       	mov	r10, r1
    a95a:	b1 2c       	mov	r11, r1
    a95c:	6e 01       	movw	r12, r28
    a95e:	ca 0c       	add	r12, r10
    a960:	db 1c       	adc	r13, r11

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    a962:	f6 01       	movw	r30, r12
    a964:	87 a1       	ldd	r24, Z+39	; 0x27
    a966:	88 23       	and	r24, r24
    a968:	09 f4       	brne	.+2      	; 0xa96c <update_level_helper+0x202>
    a96a:	9d c0       	rjmp	.+314    	; 0xaaa6 <update_level_helper+0x33c>
			{
				switch (shot->shared.direction)
    a96c:	f8 01       	movw	r30, r16
    a96e:	80 81       	ld	r24, Z
    a970:	81 30       	cpi	r24, 0x01	; 1
    a972:	a9 f1       	breq	.+106    	; 0xa9de <update_level_helper+0x274>
    a974:	e8 f0       	brcs	.+58     	; 0xa9b0 <update_level_helper+0x246>
    a976:	82 30       	cpi	r24, 0x02	; 2
    a978:	09 f4       	brne	.+2      	; 0xa97c <update_level_helper+0x212>
    a97a:	48 c0       	rjmp	.+144    	; 0xaa0c <update_level_helper+0x2a2>
    a97c:	83 30       	cpi	r24, 0x03	; 3
    a97e:	09 f0       	breq	.+2      	; 0xa982 <update_level_helper+0x218>
    a980:	66 c0       	rjmp	.+204    	; 0xaa4e <update_level_helper+0x2e4>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    a982:	f6 01       	movw	r30, r12
    a984:	63 8d       	ldd	r22, Z+27	; 0x1b
    a986:	70 e0       	ldi	r23, 0x00	; 0
    a988:	80 e0       	ldi	r24, 0x00	; 0
    a98a:	90 e0       	ldi	r25, 0x00	; 0
    a98c:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a990:	25 e6       	ldi	r18, 0x65	; 101
    a992:	38 e8       	ldi	r19, 0x88	; 136
    a994:	48 e8       	ldi	r20, 0x88	; 136
    a996:	5c e3       	ldi	r21, 0x3C	; 60
    a998:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a99c:	9b 01       	movw	r18, r22
    a99e:	ac 01       	movw	r20, r24
    a9a0:	f8 01       	movw	r30, r16
    a9a2:	62 81       	ldd	r22, Z+2	; 0x02
    a9a4:	73 81       	ldd	r23, Z+3	; 0x03
    a9a6:	84 81       	ldd	r24, Z+4	; 0x04
    a9a8:	95 81       	ldd	r25, Z+5	; 0x05
    a9aa:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    a9ae:	4a c0       	rjmp	.+148    	; 0xaa44 <update_level_helper+0x2da>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    a9b0:	f6 01       	movw	r30, r12
    a9b2:	63 8d       	ldd	r22, Z+27	; 0x1b
    a9b4:	70 e0       	ldi	r23, 0x00	; 0
    a9b6:	80 e0       	ldi	r24, 0x00	; 0
    a9b8:	90 e0       	ldi	r25, 0x00	; 0
    a9ba:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a9be:	25 e6       	ldi	r18, 0x65	; 101
    a9c0:	38 e8       	ldi	r19, 0x88	; 136
    a9c2:	48 e8       	ldi	r20, 0x88	; 136
    a9c4:	5c e3       	ldi	r21, 0x3C	; 60
    a9c6:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a9ca:	9b 01       	movw	r18, r22
    a9cc:	ac 01       	movw	r20, r24
    a9ce:	f8 01       	movw	r30, r16
    a9d0:	66 81       	ldd	r22, Z+6	; 0x06
    a9d2:	77 81       	ldd	r23, Z+7	; 0x07
    a9d4:	80 85       	ldd	r24, Z+8	; 0x08
    a9d6:	91 85       	ldd	r25, Z+9	; 0x09
    a9d8:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <__subsf3>
    a9dc:	2d c0       	rjmp	.+90     	; 0xaa38 <update_level_helper+0x2ce>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    a9de:	f6 01       	movw	r30, r12
    a9e0:	63 8d       	ldd	r22, Z+27	; 0x1b
    a9e2:	70 e0       	ldi	r23, 0x00	; 0
    a9e4:	80 e0       	ldi	r24, 0x00	; 0
    a9e6:	90 e0       	ldi	r25, 0x00	; 0
    a9e8:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    a9ec:	25 e6       	ldi	r18, 0x65	; 101
    a9ee:	38 e8       	ldi	r19, 0x88	; 136
    a9f0:	48 e8       	ldi	r20, 0x88	; 136
    a9f2:	5c e3       	ldi	r21, 0x3C	; 60
    a9f4:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    a9f8:	9b 01       	movw	r18, r22
    a9fa:	ac 01       	movw	r20, r24
    a9fc:	f8 01       	movw	r30, r16
    a9fe:	62 81       	ldd	r22, Z+2	; 0x02
    aa00:	73 81       	ldd	r23, Z+3	; 0x03
    aa02:	84 81       	ldd	r24, Z+4	; 0x04
    aa04:	95 81       	ldd	r25, Z+5	; 0x05
    aa06:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    aa0a:	1c c0       	rjmp	.+56     	; 0xaa44 <update_level_helper+0x2da>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    aa0c:	f6 01       	movw	r30, r12
    aa0e:	63 8d       	ldd	r22, Z+27	; 0x1b
    aa10:	70 e0       	ldi	r23, 0x00	; 0
    aa12:	80 e0       	ldi	r24, 0x00	; 0
    aa14:	90 e0       	ldi	r25, 0x00	; 0
    aa16:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    aa1a:	25 e6       	ldi	r18, 0x65	; 101
    aa1c:	38 e8       	ldi	r19, 0x88	; 136
    aa1e:	48 e8       	ldi	r20, 0x88	; 136
    aa20:	5c e3       	ldi	r21, 0x3C	; 60
    aa22:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    aa26:	9b 01       	movw	r18, r22
    aa28:	ac 01       	movw	r20, r24
    aa2a:	f8 01       	movw	r30, r16
    aa2c:	66 81       	ldd	r22, Z+6	; 0x06
    aa2e:	77 81       	ldd	r23, Z+7	; 0x07
    aa30:	80 85       	ldd	r24, Z+8	; 0x08
    aa32:	91 85       	ldd	r25, Z+9	; 0x09
    aa34:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    aa38:	f8 01       	movw	r30, r16
    aa3a:	66 83       	std	Z+6, r22	; 0x06
    aa3c:	77 83       	std	Z+7, r23	; 0x07
    aa3e:	80 87       	std	Z+8, r24	; 0x08
    aa40:	91 87       	std	Z+9, r25	; 0x09
    aa42:	05 c0       	rjmp	.+10     	; 0xaa4e <update_level_helper+0x2e4>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    aa44:	f8 01       	movw	r30, r16
    aa46:	62 83       	std	Z+2, r22	; 0x02
    aa48:	73 83       	std	Z+3, r23	; 0x03
    aa4a:	84 83       	std	Z+4, r24	; 0x04
    aa4c:	95 83       	std	Z+5, r25	; 0x05
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    aa4e:	f6 01       	movw	r30, r12
    aa50:	90 a4       	ldd	r9, Z+40	; 0x28
    aa52:	69 2d       	mov	r22, r9
    aa54:	70 e0       	ldi	r23, 0x00	; 0
    aa56:	80 e0       	ldi	r24, 0x00	; 0
    aa58:	90 e0       	ldi	r25, 0x00	; 0
    aa5a:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    aa5e:	2b 01       	movw	r4, r22
    aa60:	3c 01       	movw	r6, r24
    aa62:	f8 e0       	ldi	r31, 0x08	; 8
    aa64:	f9 15       	cp	r31, r9
    aa66:	80 f0       	brcs	.+32     	; 0xaa88 <update_level_helper+0x31e>
    aa68:	f6 01       	movw	r30, r12
    aa6a:	63 8d       	ldd	r22, Z+27	; 0x1b
    aa6c:	70 e0       	ldi	r23, 0x00	; 0
    aa6e:	80 e0       	ldi	r24, 0x00	; 0
    aa70:	90 e0       	ldi	r25, 0x00	; 0
    aa72:	0e 94 d4 5a 	call	0xb5a8	; 0xb5a8 <__floatsisf>
    aa76:	25 e6       	ldi	r18, 0x65	; 101
    aa78:	38 e8       	ldi	r19, 0x88	; 136
    aa7a:	48 e8       	ldi	r20, 0x88	; 136
    aa7c:	5c e3       	ldi	r21, 0x3C	; 60
    aa7e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__mulsf3>
    aa82:	9b 01       	movw	r18, r22
    aa84:	ac 01       	movw	r20, r24
    aa86:	03 c0       	rjmp	.+6      	; 0xaa8e <update_level_helper+0x324>
    aa88:	20 e0       	ldi	r18, 0x00	; 0
    aa8a:	30 e0       	ldi	r19, 0x00	; 0
    aa8c:	a9 01       	movw	r20, r18
    aa8e:	c3 01       	movw	r24, r6
    aa90:	b2 01       	movw	r22, r4
    aa92:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <__addsf3>
    aa96:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__fixunssfsi>
    aa9a:	f6 01       	movw	r30, r12
    aa9c:	60 a7       	std	Z+40, r22	; 0x28
				collision_detect_shot(player, shot);
    aa9e:	b8 01       	movw	r22, r16
    aaa0:	ce 01       	movw	r24, r28
    aaa2:	0e 94 0b 4f 	call	0x9e16	; 0x9e16 <collision_detect_shot>
    aaa6:	f3 e2       	ldi	r31, 0x23	; 35
    aaa8:	af 0e       	add	r10, r31
    aaaa:	b1 1c       	adc	r11, r1
    aaac:	0d 5d       	subi	r16, 0xDD	; 221
    aaae:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    aab0:	86 e4       	ldi	r24, 0x46	; 70
    aab2:	a8 16       	cp	r10, r24
    aab4:	b1 04       	cpc	r11, r1
    aab6:	09 f0       	breq	.+2      	; 0xaaba <update_level_helper+0x350>
    aab8:	51 cf       	rjmp	.-350    	; 0xa95c <update_level_helper+0x1f2>
    aaba:	0c c0       	rjmp	.+24     	; 0xaad4 <update_level_helper+0x36a>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    aabc:	91 ff       	sbrs	r25, 1
    aabe:	0a c0       	rjmp	.+20     	; 0xaad4 <update_level_helper+0x36a>
		{
			SFX_NAVIGATE;
    aac0:	2f ef       	ldi	r18, 0xFF	; 255
    aac2:	47 e1       	ldi	r20, 0x17	; 23
    aac4:	67 e0       	ldi	r22, 0x07	; 7
    aac6:	84 e0       	ldi	r24, 0x04	; 4
    aac8:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
			save_score();
    aacc:	0e 94 3a 49 	call	0x9274	; 0x9274 <save_score>
			exit_game();
    aad0:	0e 94 ac 53 	call	0xa758	; 0xa758 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) &&
    aad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    aad6:	85 30       	cpi	r24, 0x05	; 5
    aad8:	08 f4       	brcc	.+2      	; 0xaadc <update_level_helper+0x372>
    aada:	5a c0       	rjmp	.+180    	; 0xab90 <update_level_helper+0x426>
	    !(other_player->flags & EXPLODING_FLAG) &&
    aadc:	f7 01       	movw	r30, r14
    aade:	83 89       	ldd	r24, Z+19	; 0x13
			exit_game();
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) &&
    aae0:	80 fd       	sbrc	r24, 0
    aae2:	56 c0       	rjmp	.+172    	; 0xab90 <update_level_helper+0x426>
	    !(other_player->flags & EXPLODING_FLAG) &&
    aae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    aae6:	86 85       	ldd	r24, Z+14	; 0x0e
    aae8:	98 17       	cp	r25, r24
    aaea:	09 f4       	brne	.+2      	; 0xaaee <update_level_helper+0x384>
    aaec:	51 c0       	rjmp	.+162    	; 0xab90 <update_level_helper+0x426>
	    (player->score != other_player->score))
	{
		save_score();
    aaee:	0e 94 3a 49 	call	0x9274	; 0x9274 <save_score>
		load_level_tiles(true);
    aaf2:	81 e0       	ldi	r24, 0x01	; 1
    aaf4:	0e 94 94 51 	call	0xa328	; 0xa328 <load_level_tiles>
		SetSpriteVisibility(false);
    aaf8:	80 e0       	ldi	r24, 0x00	; 0
    aafa:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		print_level_score(player, other_player);
    aafe:	b7 01       	movw	r22, r14
    ab00:	ce 01       	movw	r24, r28
    ab02:	0e 94 17 4a 	call	0x942e	; 0x942e <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    ab06:	82 e0       	ldi	r24, 0x02	; 2
    ab08:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
		player->level_score = 0;
    ab0c:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    ab0e:	f7 01       	movw	r30, r14
    ab10:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    ab12:	10 91 c2 0b 	lds	r17, 0x0BC2
    ab16:	1f 5f       	subi	r17, 0xFF	; 255
		SFX_LEVEL_CLEAR;
    ab18:	2f ef       	ldi	r18, 0xFF	; 255
    ab1a:	47 e1       	ldi	r20, 0x17	; 23
    ab1c:	64 e0       	ldi	r22, 0x04	; 4
    ab1e:	84 e0       	ldi	r24, 0x04	; 4
    ab20:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    ab24:	1a 30       	cpi	r17, 0x0A	; 10
    ab26:	10 f1       	brcs	.+68     	; 0xab6c <update_level_helper+0x402>
		{
		    if (other_player->score > player->score)
    ab28:	f7 01       	movw	r30, r14
    ab2a:	96 85       	ldd	r25, Z+14	; 0x0e
    ab2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab2e:	89 17       	cp	r24, r25
    ab30:	28 f4       	brcc	.+10     	; 0xab3c <update_level_helper+0x3d2>
    ab32:	9c 2f       	mov	r25, r28
    ab34:	8d 2f       	mov	r24, r29
		    {
		        tmp = player;
		        player = other_player;
    ab36:	e7 01       	movw	r28, r14
		        other_player = tmp;
    ab38:	e9 2e       	mov	r14, r25
    ab3a:	f8 2e       	mov	r15, r24
		    }
		    print_final_score(player, other_player);
    ab3c:	b7 01       	movw	r22, r14
    ab3e:	ce 01       	movw	r24, r28
    ab40:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    ab44:	82 e0       	ldi	r24, 0x02	; 2
    ab46:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    ab4a:	df 91       	pop	r29
    ab4c:	cf 91       	pop	r28
    ab4e:	1f 91       	pop	r17
    ab50:	0f 91       	pop	r16
    ab52:	ff 90       	pop	r15
    ab54:	ef 90       	pop	r14
    ab56:	df 90       	pop	r13
    ab58:	cf 90       	pop	r12
    ab5a:	bf 90       	pop	r11
    ab5c:	af 90       	pop	r10
    ab5e:	9f 90       	pop	r9
    ab60:	7f 90       	pop	r7
    ab62:	6f 90       	pop	r6
    ab64:	5f 90       	pop	r5
    ab66:	4f 90       	pop	r4
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    ab68:	0c 94 ac 53 	jmp	0xa758	; 0xa758 <exit_game>
		}
		else
		{
			level_transition(next_level);
    ab6c:	81 2f       	mov	r24, r17
		}
	}
}
    ab6e:	df 91       	pop	r29
    ab70:	cf 91       	pop	r28
    ab72:	1f 91       	pop	r17
    ab74:	0f 91       	pop	r16
    ab76:	ff 90       	pop	r15
    ab78:	ef 90       	pop	r14
    ab7a:	df 90       	pop	r13
    ab7c:	cf 90       	pop	r12
    ab7e:	bf 90       	pop	r11
    ab80:	af 90       	pop	r10
    ab82:	9f 90       	pop	r9
    ab84:	7f 90       	pop	r7
    ab86:	6f 90       	pop	r6
    ab88:	5f 90       	pop	r5
    ab8a:	4f 90       	pop	r4
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    ab8c:	0c 94 a9 52 	jmp	0xa552	; 0xa552 <level_transition>
		}
	}
}
    ab90:	df 91       	pop	r29
    ab92:	cf 91       	pop	r28
    ab94:	1f 91       	pop	r17
    ab96:	0f 91       	pop	r16
    ab98:	ff 90       	pop	r15
    ab9a:	ef 90       	pop	r14
    ab9c:	df 90       	pop	r13
    ab9e:	cf 90       	pop	r12
    aba0:	bf 90       	pop	r11
    aba2:	af 90       	pop	r10
    aba4:	9f 90       	pop	r9
    aba6:	7f 90       	pop	r7
    aba8:	6f 90       	pop	r6
    abaa:	5f 90       	pop	r5
    abac:	4f 90       	pop	r4
    abae:	08 95       	ret

0000abb0 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    abb0:	df 92       	push	r13
    abb2:	ef 92       	push	r14
    abb4:	ff 92       	push	r15
    abb6:	0f 93       	push	r16
    abb8:	1f 93       	push	r17
    abba:	cf 93       	push	r28
    abbc:	df 93       	push	r29
    abbe:	8c 01       	movw	r16, r24
    abc0:	eb 01       	movw	r28, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    abc2:	80 91 c3 0b 	lds	r24, 0x0BC3
    abc6:	88 23       	and	r24, r24
    abc8:	d1 f0       	breq	.+52     	; 0xabfe <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    abca:	80 e0       	ldi	r24, 0x00	; 0
    abcc:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    abd0:	40 e4       	ldi	r20, 0x40	; 64
    abd2:	51 e2       	ldi	r21, 0x21	; 33
    abd4:	6c e0       	ldi	r22, 0x0C	; 12
    abd6:	88 e0       	ldi	r24, 0x08	; 8
    abd8:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		Print(12, 13, strPaused);
    abdc:	46 e9       	ldi	r20, 0x96	; 150
    abde:	51 e0       	ldi	r21, 0x01	; 1
    abe0:	6d e0       	ldi	r22, 0x0D	; 13
    abe2:	70 e0       	ldi	r23, 0x00	; 0
    abe4:	8c e0       	ldi	r24, 0x0C	; 12
    abe6:	90 e0       	ldi	r25, 0x00	; 0
    abe8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
		Print(11, 14, strExit);
    abec:	4d e9       	ldi	r20, 0x9D	; 157
    abee:	51 e0       	ldi	r21, 0x01	; 1
    abf0:	6e e0       	ldi	r22, 0x0E	; 14
    abf2:	70 e0       	ldi	r23, 0x00	; 0
    abf4:	8b e0       	ldi	r24, 0x0B	; 11
    abf6:	90 e0       	ldi	r25, 0x00	; 0
    abf8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    abfc:	44 c0       	rjmp	.+136    	; 0xac86 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    abfe:	81 e0       	ldi	r24, 0x01	; 1
    ac00:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    ac04:	60 e0       	ldi	r22, 0x00	; 0
    ac06:	8e ed       	ldi	r24, 0xDE	; 222
    ac08:	9b e0       	ldi	r25, 0x0B	; 11
    ac0a:	0e 94 a5 4b 	call	0x974a	; 0x974a <tank_map>
    ac0e:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    ac10:	68 2f       	mov	r22, r24
    ac12:	81 e5       	ldi	r24, 0x51	; 81
    ac14:	9f e0       	ldi	r25, 0x0F	; 15
    ac16:	0e 94 a5 4b 	call	0x974a	; 0x974a <tank_map>
    ac1a:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    ac1c:	68 2f       	mov	r22, r24
    ac1e:	8e ed       	ldi	r24, 0xDE	; 222
    ac20:	9b e0       	ldi	r25, 0x0B	; 11
    ac22:	0e 94 27 4c 	call	0x984e	; 0x984e <shot_map>
    ac26:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    ac28:	68 2f       	mov	r22, r24
    ac2a:	81 e5       	ldi	r24, 0x51	; 81
    ac2c:	9f e0       	ldi	r25, 0x0F	; 15
    ac2e:	0e 94 27 4c 	call	0x984e	; 0x984e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    ac32:	40 91 02 01 	lds	r20, 0x0102
    ac36:	6f e0       	ldi	r22, 0x0F	; 15
    ac38:	8e ed       	ldi	r24, 0xDE	; 222
    ac3a:	9b e0       	ldi	r25, 0x0B	; 11
    ac3c:	0e 94 dc 4a 	call	0x95b8	; 0x95b8 <render_banter>
    ac40:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    ac44:	40 91 01 01 	lds	r20, 0x0101
    ac48:	60 e0       	ldi	r22, 0x00	; 0
    ac4a:	81 e5       	ldi	r24, 0x51	; 81
    ac4c:	9f e0       	ldi	r25, 0x0F	; 15
    ac4e:	0e 94 dc 4a 	call	0x95b8	; 0x95b8 <render_banter>
    ac52:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    ac56:	60 e0       	ldi	r22, 0x00	; 0
    ac58:	8e ed       	ldi	r24, 0xDE	; 222
    ac5a:	9b e0       	ldi	r25, 0x0B	; 11
    ac5c:	0e 94 04 4b 	call	0x9608	; 0x9608 <render_player>
		render_player(&player2, p2_index);
    ac60:	6d 2d       	mov	r22, r13
    ac62:	81 e5       	ldi	r24, 0x51	; 81
    ac64:	9f e0       	ldi	r25, 0x0F	; 15
    ac66:	0e 94 04 4b 	call	0x9608	; 0x9608 <render_player>
		render_shot(&player1, p1_shot_index);
    ac6a:	6e 2d       	mov	r22, r14
    ac6c:	8e ed       	ldi	r24, 0xDE	; 222
    ac6e:	9b e0       	ldi	r25, 0x0B	; 11
    ac70:	0e 94 2d 4b 	call	0x965a	; 0x965a <render_shot>
		render_shot(&player2, p2_shot_index);
    ac74:	6f 2d       	mov	r22, r15
    ac76:	81 e5       	ldi	r24, 0x51	; 81
    ac78:	9f e0       	ldi	r25, 0x0F	; 15
    ac7a:	0e 94 2d 4b 	call	0x965a	; 0x965a <render_shot>
		render_tile_explosions(&tile_animations);
    ac7e:	85 ec       	ldi	r24, 0xC5	; 197
    ac80:	9b e0       	ldi	r25, 0x0B	; 11
    ac82:	0e 94 64 4b 	call	0x96c8	; 0x96c8 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    ac86:	2f e0       	ldi	r18, 0x0F	; 15
    ac88:	41 e5       	ldi	r20, 0x51	; 81
    ac8a:	5f e0       	ldi	r21, 0x0F	; 15
    ac8c:	6e ed       	ldi	r22, 0xDE	; 222
    ac8e:	7b e0       	ldi	r23, 0x0B	; 11
    ac90:	c8 01       	movw	r24, r16
    ac92:	0e 94 b5 53 	call	0xa76a	; 0xa76a <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    ac96:	20 e0       	ldi	r18, 0x00	; 0
    ac98:	4e ed       	ldi	r20, 0xDE	; 222
    ac9a:	5b e0       	ldi	r21, 0x0B	; 11
    ac9c:	61 e5       	ldi	r22, 0x51	; 81
    ac9e:	7f e0       	ldi	r23, 0x0F	; 15
    aca0:	ce 01       	movw	r24, r28
    aca2:	0e 94 b5 53 	call	0xa76a	; 0xa76a <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    aca6:	2f e0       	ldi	r18, 0x0F	; 15
    aca8:	40 e0       	ldi	r20, 0x00	; 0
    acaa:	61 e5       	ldi	r22, 0x51	; 81
    acac:	7f e0       	ldi	r23, 0x0F	; 15
    acae:	8e ed       	ldi	r24, 0xDE	; 222
    acb0:	9b e0       	ldi	r25, 0x0B	; 11
    acb2:	0e 94 93 50 	call	0xa126	; 0xa126 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    acb6:	20 e0       	ldi	r18, 0x00	; 0
    acb8:	4f e0       	ldi	r20, 0x0F	; 15
    acba:	6e ed       	ldi	r22, 0xDE	; 222
    acbc:	7b e0       	ldi	r23, 0x0B	; 11
    acbe:	81 e5       	ldi	r24, 0x51	; 81
    acc0:	9f e0       	ldi	r25, 0x0F	; 15
}
    acc2:	df 91       	pop	r29
    acc4:	cf 91       	pop	r28
    acc6:	1f 91       	pop	r17
    acc8:	0f 91       	pop	r16
    acca:	ff 90       	pop	r15
    accc:	ef 90       	pop	r14
    acce:	df 90       	pop	r13

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    acd0:	0c 94 93 50 	jmp	0xa126	; 0xa126 <collision_detect_player>

0000acd4 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    acd4:	fc 01       	movw	r30, r24
    acd6:	80 81       	ld	r24, Z
    acd8:	91 81       	ldd	r25, Z+1	; 0x01
    acda:	91 ff       	sbrs	r25, 1
    acdc:	0a c0       	rjmp	.+20     	; 0xacf2 <update_tank_rank+0x1e>
	{
		SFX_NAVIGATE;
    acde:	2f ef       	ldi	r18, 0xFF	; 255
    ace0:	47 e1       	ldi	r20, 0x17	; 23
    ace2:	67 e0       	ldi	r22, 0x07	; 7
    ace4:	84 e0       	ldi	r24, 0x04	; 4
    ace6:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		fade_through();
    acea:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_splash();
    acee:	0c 94 d9 52 	jmp	0xa5b2	; 0xa5b2 <load_splash>
    acf2:	08 95       	ret

0000acf4 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    acf4:	0f 93       	push	r16
    acf6:	1f 93       	push	r17
    acf8:	cf 93       	push	r28
    acfa:	df 93       	push	r29
    acfc:	ec 01       	movw	r28, r24
    acfe:	ca 01       	movw	r24, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    ad00:	fb 01       	movw	r30, r22
    ad02:	20 81       	ld	r18, Z
    ad04:	31 81       	ldd	r19, Z+1	; 0x01
    ad06:	f9 01       	movw	r30, r18
    ad08:	e0 71       	andi	r30, 0x10	; 16
    ad0a:	ff 27       	eor	r31, r31
    ad0c:	24 ff       	sbrs	r18, 4
    ad0e:	09 c0       	rjmp	.+18     	; 0xad22 <_handle_select_helper+0x2e>
    ad10:	4d 81       	ldd	r20, Y+5	; 0x05
    ad12:	41 11       	cpse	r20, r1
    ad14:	06 c0       	rjmp	.+12     	; 0xad22 <_handle_select_helper+0x2e>
	{
		ps->handle_id--;
    ad16:	88 81       	ld	r24, Y
    ad18:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    ad1a:	87 ff       	sbrs	r24, 7
    ad1c:	0f c0       	rjmp	.+30     	; 0xad3c <_handle_select_helper+0x48>
    ad1e:	18 82       	st	Y, r1
    ad20:	24 c0       	rjmp	.+72     	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    ad22:	b9 01       	movw	r22, r18
    ad24:	60 72       	andi	r22, 0x20	; 32
    ad26:	77 27       	eor	r23, r23
    ad28:	25 ff       	sbrs	r18, 5
    ad2a:	0a c0       	rjmp	.+20     	; 0xad40 <_handle_select_helper+0x4c>
    ad2c:	4d 81       	ldd	r20, Y+5	; 0x05
    ad2e:	41 11       	cpse	r20, r1
    ad30:	07 c0       	rjmp	.+14     	; 0xad40 <_handle_select_helper+0x4c>
	{
		ps->handle_id++;
    ad32:	88 81       	ld	r24, Y
    ad34:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    ad36:	89 30       	cpi	r24, 0x09	; 9
    ad38:	0c f0       	brlt	.+2      	; 0xad3c <_handle_select_helper+0x48>
    ad3a:	88 e0       	ldi	r24, 0x08	; 8
    ad3c:	88 83       	st	Y, r24
    ad3e:	15 c0       	rjmp	.+42     	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    ad40:	a9 01       	movw	r20, r18
    ad42:	44 27       	eor	r20, r20
    ad44:	51 70       	andi	r21, 0x01	; 1
    ad46:	30 ff       	sbrs	r19, 0
    ad48:	1a c0       	rjmp	.+52     	; 0xad7e <_handle_select_helper+0x8a>
    ad4a:	ad 81       	ldd	r26, Y+5	; 0x05
    ad4c:	a1 11       	cpse	r26, r1
    ad4e:	17 c0       	rjmp	.+46     	; 0xad7e <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    ad50:	81 e0       	ldi	r24, 0x01	; 1
    ad52:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    ad54:	69 91       	ld	r22, Y+
    ad56:	f3 e0       	ldi	r31, 0x03	; 3
    ad58:	6f 02       	muls	r22, r31
    ad5a:	b0 01       	movw	r22, r0
    ad5c:	11 24       	eor	r1, r1
    ad5e:	6a 5d       	subi	r22, 0xDA	; 218
    ad60:	7e 4f       	sbci	r23, 0xFE	; 254
    ad62:	43 e0       	ldi	r20, 0x03	; 3
    ad64:	ce 01       	movw	r24, r28
    ad66:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		SFX_NAVIGATE;
    ad6a:	2f ef       	ldi	r18, 0xFF	; 255
    ad6c:	47 e1       	ldi	r20, 0x17	; 23
    ad6e:	67 e0       	ldi	r22, 0x07	; 7
    ad70:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    ad72:	df 91       	pop	r29
    ad74:	cf 91       	pop	r28
    ad76:	1f 91       	pop	r17
    ad78:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    ad7a:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    ad7e:	27 ff       	sbrs	r18, 7
    ad80:	09 c0       	rjmp	.+18     	; 0xad94 <_handle_select_helper+0xa0>
    ad82:	ad 81       	ldd	r26, Y+5	; 0x05
    ad84:	a1 30       	cpi	r26, 0x01	; 1
    ad86:	31 f4       	brne	.+12     	; 0xad94 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    ad88:	8c 81       	ldd	r24, Y+4	; 0x04
    ad8a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    ad8c:	83 30       	cpi	r24, 0x03	; 3
    ad8e:	5c f0       	brlt	.+22     	; 0xada6 <_handle_select_helper+0xb2>
    ad90:	82 e0       	ldi	r24, 0x02	; 2
    ad92:	09 c0       	rjmp	.+18     	; 0xada6 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    ad94:	26 ff       	sbrs	r18, 6
    ad96:	0b c0       	rjmp	.+22     	; 0xadae <_handle_select_helper+0xba>
    ad98:	ad 81       	ldd	r26, Y+5	; 0x05
    ad9a:	a1 30       	cpi	r26, 0x01	; 1
    ad9c:	41 f4       	brne	.+16     	; 0xadae <_handle_select_helper+0xba>
	{
		ps->char_index--;
    ad9e:	8c 81       	ldd	r24, Y+4	; 0x04
    ada0:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    ada2:	87 fd       	sbrc	r24, 7
    ada4:	02 c0       	rjmp	.+4      	; 0xadaa <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    ada6:	8c 83       	std	Y+4, r24	; 0x04
    ada8:	e0 cf       	rjmp	.-64     	; 0xad6a <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    adaa:	1c 82       	std	Y+4, r1	; 0x04
    adac:	de cf       	rjmp	.-68     	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    adae:	ef 2b       	or	r30, r31
    adb0:	61 f0       	breq	.+24     	; 0xadca <_handle_select_helper+0xd6>
    adb2:	ed 81       	ldd	r30, Y+5	; 0x05
    adb4:	e1 30       	cpi	r30, 0x01	; 1
    adb6:	49 f4       	brne	.+18     	; 0xadca <_handle_select_helper+0xd6>
	{
		ps->handle[(u8) ps->char_index]--;
    adb8:	8c 81       	ldd	r24, Y+4	; 0x04
    adba:	c8 0f       	add	r28, r24
    adbc:	d1 1d       	adc	r29, r1
    adbe:	89 81       	ldd	r24, Y+1	; 0x01
    adc0:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    adc2:	81 34       	cpi	r24, 0x41	; 65
    adc4:	78 f4       	brcc	.+30     	; 0xade4 <_handle_select_helper+0xf0>
    adc6:	81 e4       	ldi	r24, 0x41	; 65
    adc8:	0d c0       	rjmp	.+26     	; 0xade4 <_handle_select_helper+0xf0>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    adca:	67 2b       	or	r22, r23
    adcc:	69 f0       	breq	.+26     	; 0xade8 <_handle_select_helper+0xf4>
    adce:	6d 81       	ldd	r22, Y+5	; 0x05
    add0:	61 30       	cpi	r22, 0x01	; 1
    add2:	51 f4       	brne	.+20     	; 0xade8 <_handle_select_helper+0xf4>
	{
		ps->handle[(u8) ps->char_index]++;
    add4:	8c 81       	ldd	r24, Y+4	; 0x04
    add6:	c8 0f       	add	r28, r24
    add8:	d1 1d       	adc	r29, r1
    adda:	89 81       	ldd	r24, Y+1	; 0x01
    addc:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    adde:	8b 35       	cpi	r24, 0x5B	; 91
    ade0:	08 f0       	brcs	.+2      	; 0xade4 <_handle_select_helper+0xf0>
    ade2:	8a e5       	ldi	r24, 0x5A	; 90
    ade4:	89 83       	std	Y+1, r24	; 0x01
    ade6:	c1 cf       	rjmp	.-126    	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    ade8:	45 2b       	or	r20, r21
    adea:	29 f1       	breq	.+74     	; 0xae36 <_handle_select_helper+0x142>
    adec:	4d 81       	ldd	r20, Y+5	; 0x05
    adee:	41 30       	cpi	r20, 0x01	; 1
    adf0:	11 f5       	brne	.+68     	; 0xae36 <_handle_select_helper+0x142>
	{
		player->handle_id = ps->handle_id;
    adf2:	fe 01       	movw	r30, r28
    adf4:	21 91       	ld	r18, Z+
    adf6:	8f 01       	movw	r16, r30
    adf8:	fc 01       	movw	r30, r24
    adfa:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    adfc:	43 e0       	ldi	r20, 0x03	; 3
    adfe:	b8 01       	movw	r22, r16
    ae00:	0b 96       	adiw	r24, 0x0b	; 11
    ae02:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    ae06:	88 81       	ld	r24, Y
    ae08:	f3 e0       	ldi	r31, 0x03	; 3
    ae0a:	8f 02       	muls	r24, r31
    ae0c:	c0 01       	movw	r24, r0
    ae0e:	11 24       	eor	r1, r1
    ae10:	43 e0       	ldi	r20, 0x03	; 3
    ae12:	b8 01       	movw	r22, r16
    ae14:	8a 5d       	subi	r24, 0xDA	; 218
    ae16:	9e 4f       	sbci	r25, 0xFE	; 254
    ae18:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		SFX_NAVIGATE;
    ae1c:	2f ef       	ldi	r18, 0xFF	; 255
    ae1e:	47 e1       	ldi	r20, 0x17	; 23
    ae20:	67 e0       	ldi	r22, 0x07	; 7
    ae22:	84 e0       	ldi	r24, 0x04	; 4
    ae24:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ae28:	84 e2       	ldi	r24, 0x24	; 36
    ae2a:	91 e0       	ldi	r25, 0x01	; 1
    ae2c:	0e 94 86 38 	call	0x710c	; 0x710c <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    ae30:	82 e0       	ldi	r24, 0x02	; 2
    ae32:	8d 83       	std	Y+5, r24	; 0x05
    ae34:	1a c0       	rjmp	.+52     	; 0xae6a <_handle_select_helper+0x176>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    ae36:	31 ff       	sbrs	r19, 1
    ae38:	18 c0       	rjmp	.+48     	; 0xae6a <_handle_select_helper+0x176>
    ae3a:	8d 81       	ldd	r24, Y+5	; 0x05
    ae3c:	81 30       	cpi	r24, 0x01	; 1
    ae3e:	11 f4       	brne	.+4      	; 0xae44 <_handle_select_helper+0x150>
	{
		ps->select_state = SELECTING;
    ae40:	1d 82       	std	Y+5, r1	; 0x05
    ae42:	93 cf       	rjmp	.-218    	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    ae44:	82 30       	cpi	r24, 0x02	; 2
    ae46:	19 f4       	brne	.+6      	; 0xae4e <_handle_select_helper+0x15a>
	{
		ps->select_state = EDITING;
    ae48:	81 e0       	ldi	r24, 0x01	; 1
    ae4a:	8d 83       	std	Y+5, r24	; 0x05
    ae4c:	8e cf       	rjmp	.-228    	; 0xad6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    ae4e:	2f ef       	ldi	r18, 0xFF	; 255
    ae50:	47 e1       	ldi	r20, 0x17	; 23
    ae52:	67 e0       	ldi	r22, 0x07	; 7
    ae54:	84 e0       	ldi	r24, 0x04	; 4
    ae56:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		fade_through();
    ae5a:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_splash();
	}
}
    ae5e:	df 91       	pop	r29
    ae60:	cf 91       	pop	r28
    ae62:	1f 91       	pop	r17
    ae64:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    ae66:	0c 94 d9 52 	jmp	0xa5b2	; 0xa5b2 <load_splash>
	}
}
    ae6a:	df 91       	pop	r29
    ae6c:	cf 91       	pop	r28
    ae6e:	1f 91       	pop	r17
    ae70:	0f 91       	pop	r16
    ae72:	08 95       	ret

0000ae74 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    ae74:	af 92       	push	r10
    ae76:	bf 92       	push	r11
    ae78:	cf 92       	push	r12
    ae7a:	df 92       	push	r13
    ae7c:	ef 92       	push	r14
    ae7e:	ff 92       	push	r15
    ae80:	0f 93       	push	r16
    ae82:	1f 93       	push	r17
    ae84:	cf 93       	push	r28
    ae86:	df 93       	push	r29
    ae88:	00 d0       	rcall	.+0      	; 0xae8a <_handle_select_render_helper+0x16>
    ae8a:	1f 92       	push	r1
    ae8c:	cd b7       	in	r28, 0x3d	; 61
    ae8e:	de b7       	in	r29, 0x3e	; 62
    ae90:	7c 01       	movw	r14, r24
    ae92:	b4 2e       	mov	r11, r20
    ae94:	a2 2e       	mov	r10, r18
	u8 tmp[3] = {' ', ' ', ' '};
    ae96:	80 e2       	ldi	r24, 0x20	; 32
    ae98:	89 83       	std	Y+1, r24	; 0x01
    ae9a:	8a 83       	std	Y+2, r24	; 0x02
    ae9c:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    ae9e:	f7 01       	movw	r30, r14
    aea0:	85 81       	ldd	r24, Z+5	; 0x05
    aea2:	81 11       	cpse	r24, r1
    aea4:	1d c0       	rjmp	.+58     	; 0xaee0 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    aea6:	40 e0       	ldi	r20, 0x00	; 0
    aea8:	6b ec       	ldi	r22, 0xCB	; 203
    aeaa:	70 e2       	ldi	r23, 0x20	; 32
    aeac:	82 2f       	mov	r24, r18
    aeae:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    aeb2:	40 e0       	ldi	r20, 0x00	; 0
    aeb4:	60 e1       	ldi	r22, 0x10	; 16
    aeb6:	71 e2       	ldi	r23, 0x21	; 33
    aeb8:	81 e0       	ldi	r24, 0x01	; 1
    aeba:	8a 0d       	add	r24, r10
    aebc:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    aec0:	f7 01       	movw	r30, r14
    aec2:	40 81       	ld	r20, Z
    aec4:	44 0f       	add	r20, r20
    aec6:	44 0f       	add	r20, r20
    aec8:	44 0f       	add	r20, r20
    aeca:	40 5c       	subi	r20, 0xC0	; 192
    aecc:	01 e0       	ldi	r16, 0x01	; 1
    aece:	21 e0       	ldi	r18, 0x01	; 1
    aed0:	6b 2d       	mov	r22, r11
    aed2:	66 0f       	add	r22, r22
    aed4:	66 0f       	add	r22, r22
    aed6:	66 0f       	add	r22, r22
    aed8:	8a 2d       	mov	r24, r10
    aeda:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
    aede:	6e c0       	rjmp	.+220    	; 0xafbc <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    aee0:	81 30       	cpi	r24, 0x01	; 1
    aee2:	09 f0       	breq	.+2      	; 0xaee6 <_handle_select_render_helper+0x72>
    aee4:	43 c0       	rjmp	.+134    	; 0xaf6c <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_ball, 0);
    aee6:	40 e0       	ldi	r20, 0x00	; 0
    aee8:	6b ec       	ldi	r22, 0xCB	; 203
    aeea:	70 e2       	ldi	r23, 0x20	; 32
    aeec:	82 2f       	mov	r24, r18
    aeee:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    aef2:	11 e0       	ldi	r17, 0x01	; 1
    aef4:	1a 0d       	add	r17, r10
    aef6:	40 e0       	ldi	r20, 0x00	; 0
    aef8:	6b ec       	ldi	r22, 0xCB	; 203
    aefa:	70 e2       	ldi	r23, 0x20	; 32
    aefc:	81 2f       	mov	r24, r17
    aefe:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    af02:	cb 2c       	mov	r12, r11
    af04:	d1 2c       	mov	r13, r1
    af06:	f5 e0       	ldi	r31, 0x05	; 5
    af08:	cf 0e       	add	r12, r31
    af0a:	d1 1c       	adc	r13, r1
    af0c:	f7 01       	movw	r30, r14
    af0e:	40 81       	ld	r20, Z
    af10:	44 0f       	add	r20, r20
    af12:	44 0f       	add	r20, r20
    af14:	44 0f       	add	r20, r20
    af16:	48 5c       	subi	r20, 0xC8	; 200
    af18:	84 81       	ldd	r24, Z+4	; 0x04
    af1a:	b6 01       	movw	r22, r12
    af1c:	68 0f       	add	r22, r24
    af1e:	71 1d       	adc	r23, r1
    af20:	87 fd       	sbrc	r24, 7
    af22:	7a 95       	dec	r23
    af24:	66 0f       	add	r22, r22
    af26:	66 0f       	add	r22, r22
    af28:	66 0f       	add	r22, r22
    af2a:	01 e0       	ldi	r16, 0x01	; 1
    af2c:	21 e0       	ldi	r18, 0x01	; 1
    af2e:	8a 2d       	mov	r24, r10
    af30:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    af34:	f7 01       	movw	r30, r14
    af36:	40 81       	ld	r20, Z
    af38:	44 0f       	add	r20, r20
    af3a:	44 0f       	add	r20, r20
    af3c:	44 0f       	add	r20, r20
    af3e:	48 5b       	subi	r20, 0xB8	; 184
    af40:	84 81       	ldd	r24, Z+4	; 0x04
    af42:	c8 0e       	add	r12, r24
    af44:	d1 1c       	adc	r13, r1
    af46:	87 fd       	sbrc	r24, 7
    af48:	da 94       	dec	r13
    af4a:	6c 2d       	mov	r22, r12
    af4c:	66 0f       	add	r22, r22
    af4e:	66 0f       	add	r22, r22
    af50:	66 0f       	add	r22, r22
    af52:	21 e0       	ldi	r18, 0x01	; 1
    af54:	81 2f       	mov	r24, r17
    af56:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    af5a:	43 e0       	ldi	r20, 0x03	; 3
    af5c:	b7 01       	movw	r22, r14
    af5e:	6f 5f       	subi	r22, 0xFF	; 255
    af60:	7f 4f       	sbci	r23, 0xFF	; 255
    af62:	ce 01       	movw	r24, r28
    af64:	01 96       	adiw	r24, 0x01	; 1
    af66:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
    af6a:	28 c0       	rjmp	.+80     	; 0xafbc <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    af6c:	82 30       	cpi	r24, 0x02	; 2
    af6e:	31 f5       	brne	.+76     	; 0xafbc <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    af70:	04 2f       	mov	r16, r20
    af72:	10 e0       	ldi	r17, 0x00	; 0
    af74:	48 e2       	ldi	r20, 0x28	; 40
    af76:	65 e0       	ldi	r22, 0x05	; 5
    af78:	70 e0       	ldi	r23, 0x00	; 0
    af7a:	c8 01       	movw	r24, r16
    af7c:	06 96       	adiw	r24, 0x06	; 6
    af7e:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    af82:	23 e0       	ldi	r18, 0x03	; 3
    af84:	a7 01       	movw	r20, r14
    af86:	4f 5f       	subi	r20, 0xFF	; 255
    af88:	5f 4f       	sbci	r21, 0xFF	; 255
    af8a:	65 e0       	ldi	r22, 0x05	; 5
    af8c:	87 e0       	ldi	r24, 0x07	; 7
    af8e:	8b 0d       	add	r24, r11
    af90:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    af94:	49 e2       	ldi	r20, 0x29	; 41
    af96:	65 e0       	ldi	r22, 0x05	; 5
    af98:	70 e0       	ldi	r23, 0x00	; 0
    af9a:	c8 01       	movw	r24, r16
    af9c:	0a 96       	adiw	r24, 0x0a	; 10
    af9e:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		MapSprite2(idx, map_none, 0);
    afa2:	40 e0       	ldi	r20, 0x00	; 0
    afa4:	60 e1       	ldi	r22, 0x10	; 16
    afa6:	71 e2       	ldi	r23, 0x21	; 33
    afa8:	8a 2d       	mov	r24, r10
    afaa:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    afae:	40 e0       	ldi	r20, 0x00	; 0
    afb0:	60 e1       	ldi	r22, 0x10	; 16
    afb2:	71 e2       	ldi	r23, 0x21	; 33
    afb4:	81 e0       	ldi	r24, 0x01	; 1
    afb6:	8a 0d       	add	r24, r10
    afb8:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    afbc:	f7 01       	movw	r30, r14
    afbe:	60 81       	ld	r22, Z
    afc0:	68 5f       	subi	r22, 0xF8	; 248
    afc2:	23 e0       	ldi	r18, 0x03	; 3
    afc4:	ae 01       	movw	r20, r28
    afc6:	4f 5f       	subi	r20, 0xFF	; 255
    afc8:	5f 4f       	sbci	r21, 0xFF	; 255
    afca:	85 e0       	ldi	r24, 0x05	; 5
    afcc:	8b 0d       	add	r24, r11
    afce:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
}
    afd2:	0f 90       	pop	r0
    afd4:	0f 90       	pop	r0
    afd6:	0f 90       	pop	r0
    afd8:	df 91       	pop	r29
    afda:	cf 91       	pop	r28
    afdc:	1f 91       	pop	r17
    afde:	0f 91       	pop	r16
    afe0:	ff 90       	pop	r15
    afe2:	ef 90       	pop	r14
    afe4:	df 90       	pop	r13
    afe6:	cf 90       	pop	r12
    afe8:	bf 90       	pop	r11
    afea:	af 90       	pop	r10
    afec:	08 95       	ret

0000afee <load_handle_select>:

void load_handle_select()
{
    afee:	8f 92       	push	r8
    aff0:	9f 92       	push	r9
    aff2:	af 92       	push	r10
    aff4:	bf 92       	push	r11
    aff6:	cf 92       	push	r12
    aff8:	df 92       	push	r13
    affa:	ef 92       	push	r14
    affc:	ff 92       	push	r15
    affe:	0f 93       	push	r16
    b000:	1f 93       	push	r17
    b002:	cf 93       	push	r28
    b004:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b006:	82 e0       	ldi	r24, 0x02	; 2
    b008:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    b00c:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    b010:	40 e0       	ldi	r20, 0x00	; 0
    b012:	6a e0       	ldi	r22, 0x0A	; 10
    b014:	71 e2       	ldi	r23, 0x21	; 33
    b016:	80 e0       	ldi	r24, 0x00	; 0
    b018:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    b01c:	40 e0       	ldi	r20, 0x00	; 0
    b01e:	62 ef       	ldi	r22, 0xF2	; 242
    b020:	70 e2       	ldi	r23, 0x20	; 32
    b022:	84 e0       	ldi	r24, 0x04	; 4
    b024:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    b028:	02 e0       	ldi	r16, 0x02	; 2
    b02a:	22 e0       	ldi	r18, 0x02	; 2
    b02c:	40 e2       	ldi	r20, 0x20	; 32
    b02e:	68 e1       	ldi	r22, 0x18	; 24
    b030:	80 e0       	ldi	r24, 0x00	; 0
    b032:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    b036:	22 e0       	ldi	r18, 0x02	; 2
    b038:	40 e2       	ldi	r20, 0x20	; 32
    b03a:	60 ea       	ldi	r22, 0xA0	; 160
    b03c:	84 e0       	ldi	r24, 0x04	; 4
    b03e:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	Print(9, 1, strHandlesTitle);
    b042:	42 eb       	ldi	r20, 0xB2	; 178
    b044:	52 e0       	ldi	r21, 0x02	; 2
    b046:	61 e0       	ldi	r22, 0x01	; 1
    b048:	70 e0       	ldi	r23, 0x00	; 0
    b04a:	89 e0       	ldi	r24, 0x09	; 9
    b04c:	90 e0       	ldi	r25, 0x00	; 0
    b04e:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(6, 5, strPlayer1);
    b052:	41 ea       	ldi	r20, 0xA1	; 161
    b054:	52 e0       	ldi	r21, 0x02	; 2
    b056:	65 e0       	ldi	r22, 0x05	; 5
    b058:	70 e0       	ldi	r23, 0x00	; 0
    b05a:	86 e0       	ldi	r24, 0x06	; 6
    b05c:	90 e0       	ldi	r25, 0x00	; 0
    b05e:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(23, 5, strPlayer2);
    b062:	4e e9       	ldi	r20, 0x9E	; 158
    b064:	52 e0       	ldi	r21, 0x02	; 2
    b066:	65 e0       	ldi	r22, 0x05	; 5
    b068:	70 e0       	ldi	r23, 0x00	; 0
    b06a:	87 e1       	ldi	r24, 0x17	; 23
    b06c:	90 e0       	ldi	r25, 0x00	; 0
    b06e:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    b072:	06 e2       	ldi	r16, 0x26	; 38
    b074:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < 27; i += 1)
    b076:	c0 e0       	ldi	r28, 0x00	; 0
    b078:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b07a:	83 e0       	ldi	r24, 0x03	; 3
    b07c:	88 2e       	mov	r8, r24
    b07e:	91 2c       	mov	r9, r1
    b080:	58 01       	movw	r10, r16
    b082:	ce 01       	movw	r24, r28
    b084:	b4 01       	movw	r22, r8
    b086:	0e 94 bb 59 	call	0xb376	; 0xb376 <__divmodhi4>
    b08a:	7c 01       	movw	r14, r24
    b08c:	6b 01       	movw	r12, r22
    b08e:	88 e0       	ldi	r24, 0x08	; 8
    b090:	c8 0e       	add	r12, r24
    b092:	d1 1c       	adc	r13, r1
    b094:	f8 01       	movw	r30, r16
    b096:	41 91       	ld	r20, Z+
    b098:	8f 01       	movw	r16, r30
    b09a:	b6 01       	movw	r22, r12
    b09c:	c7 01       	movw	r24, r14
    b09e:	03 96       	adiw	r24, 0x03	; 3
    b0a0:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b0a4:	f5 01       	movw	r30, r10
    b0a6:	40 81       	ld	r20, Z
    b0a8:	b6 01       	movw	r22, r12
    b0aa:	c7 01       	movw	r24, r14
    b0ac:	44 96       	adiw	r24, 0x14	; 20
    b0ae:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b0b2:	21 96       	adiw	r28, 0x01	; 1
    b0b4:	cb 31       	cpi	r28, 0x1B	; 27
    b0b6:	d1 05       	cpc	r29, r1
    b0b8:	19 f7       	brne	.-58     	; 0xb080 <load_handle_select+0x92>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    b0ba:	43 e9       	ldi	r20, 0x93	; 147
    b0bc:	52 e0       	ldi	r21, 0x02	; 2
    b0be:	65 e1       	ldi	r22, 0x15	; 21
    b0c0:	70 e0       	ldi	r23, 0x00	; 0
    b0c2:	88 e0       	ldi	r24, 0x08	; 8
    b0c4:	90 e0       	ldi	r25, 0x00	; 0
    b0c6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 22, strConfirmHandle);
    b0ca:	47 e8       	ldi	r20, 0x87	; 135
    b0cc:	52 e0       	ldi	r21, 0x02	; 2
    b0ce:	66 e1       	ldi	r22, 0x16	; 22
    b0d0:	70 e0       	ldi	r23, 0x00	; 0
    b0d2:	88 e0       	ldi	r24, 0x08	; 8
    b0d4:	90 e0       	ldi	r25, 0x00	; 0
    b0d6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 23, strCancelHandle);
    b0da:	4c e7       	ldi	r20, 0x7C	; 124
    b0dc:	52 e0       	ldi	r21, 0x02	; 2
    b0de:	67 e1       	ldi	r22, 0x17	; 23
    b0e0:	70 e0       	ldi	r23, 0x00	; 0
    b0e2:	88 e0       	ldi	r24, 0x08	; 8
    b0e4:	90 e0       	ldi	r25, 0x00	; 0
    b0e6:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 24, strChangeHandle);
    b0ea:	4d e6       	ldi	r20, 0x6D	; 109
    b0ec:	52 e0       	ldi	r21, 0x02	; 2
    b0ee:	68 e1       	ldi	r22, 0x18	; 24
    b0f0:	70 e0       	ldi	r23, 0x00	; 0
    b0f2:	88 e0       	ldi	r24, 0x08	; 8
    b0f4:	90 e0       	ldi	r25, 0x00	; 0
}
    b0f6:	df 91       	pop	r29
    b0f8:	cf 91       	pop	r28
    b0fa:	1f 91       	pop	r17
    b0fc:	0f 91       	pop	r16
    b0fe:	ff 90       	pop	r15
    b100:	ef 90       	pop	r14
    b102:	df 90       	pop	r13
    b104:	cf 90       	pop	r12
    b106:	bf 90       	pop	r11
    b108:	af 90       	pop	r10
    b10a:	9f 90       	pop	r9
    b10c:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    b10e:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

0000b112 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b112:	0f 93       	push	r16
    b114:	cf 93       	push	r28
    b116:	df 93       	push	r29
    b118:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    b11a:	80 91 c4 0b 	lds	r24, 0x0BC4
    b11e:	81 30       	cpi	r24, 0x01	; 1
    b120:	49 f0       	breq	.+18     	; 0xb134 <update_splash+0x22>
    b122:	82 30       	cpi	r24, 0x02	; 2
    b124:	59 f0       	breq	.+22     	; 0xb13c <update_splash+0x2a>
    b126:	81 11       	cpse	r24, r1
    b128:	10 c0       	rjmp	.+32     	; 0xb14a <update_splash+0x38>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b12a:	01 e0       	ldi	r16, 0x01	; 1
    b12c:	21 e0       	ldi	r18, 0x01	; 1
    b12e:	48 e6       	ldi	r20, 0x68	; 104
    b130:	60 e3       	ldi	r22, 0x30	; 48
    b132:	09 c0       	rjmp	.+18     	; 0xb146 <update_splash+0x34>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b134:	01 e0       	ldi	r16, 0x01	; 1
    b136:	21 e0       	ldi	r18, 0x01	; 1
    b138:	40 e7       	ldi	r20, 0x70	; 112
    b13a:	03 c0       	rjmp	.+6      	; 0xb142 <update_splash+0x30>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b13c:	01 e0       	ldi	r16, 0x01	; 1
    b13e:	21 e0       	ldi	r18, 0x01	; 1
    b140:	48 e7       	ldi	r20, 0x78	; 120
    b142:	60 e3       	ldi	r22, 0x30	; 48
    b144:	80 e0       	ldi	r24, 0x00	; 0
    b146:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    b14a:	43 e9       	ldi	r20, 0x93	; 147
    b14c:	52 e0       	ldi	r21, 0x02	; 2
    b14e:	65 e1       	ldi	r22, 0x15	; 21
    b150:	70 e0       	ldi	r23, 0x00	; 0
    b152:	89 e0       	ldi	r24, 0x09	; 9
    b154:	90 e0       	ldi	r25, 0x00	; 0
    b156:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>

	// Update
	if (p1->pressed & BTN_UP)
    b15a:	88 81       	ld	r24, Y
    b15c:	99 81       	ldd	r25, Y+1	; 0x01
    b15e:	84 ff       	sbrs	r24, 4
    b160:	10 c0       	rjmp	.+32     	; 0xb182 <update_splash+0x70>
	{
		game.selection--;
    b162:	80 91 c4 0b 	lds	r24, 0x0BC4
    b166:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b168:	87 ff       	sbrs	r24, 7
    b16a:	13 c0       	rjmp	.+38     	; 0xb192 <update_splash+0x80>
    b16c:	10 92 c4 0b 	sts	0x0BC4, r1
		SFX_NAVIGATE;
    b170:	2f ef       	ldi	r18, 0xFF	; 255
    b172:	47 e1       	ldi	r20, 0x17	; 23
    b174:	67 e0       	ldi	r22, 0x07	; 7
    b176:	84 e0       	ldi	r24, 0x04	; 4
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    b178:	df 91       	pop	r29
    b17a:	cf 91       	pop	r28
    b17c:	0f 91       	pop	r16
	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
		if (game.selection < PVCPU) game.selection = PVCPU;
		SFX_NAVIGATE;
    b17e:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <TriggerNote>
	}
	else if (p1->pressed & BTN_DOWN)
    b182:	85 ff       	sbrs	r24, 5
    b184:	09 c0       	rjmp	.+18     	; 0xb198 <update_splash+0x86>
	{
		game.selection++;
    b186:	80 91 c4 0b 	lds	r24, 0x0BC4
    b18a:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b18c:	83 30       	cpi	r24, 0x03	; 3
    b18e:	0c f0       	brlt	.+2      	; 0xb192 <update_splash+0x80>
    b190:	82 e0       	ldi	r24, 0x02	; 2
    b192:	80 93 c4 0b 	sts	0x0BC4, r24
    b196:	ec cf       	rjmp	.-40     	; 0xb170 <update_splash+0x5e>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b198:	90 ff       	sbrs	r25, 0
    b19a:	2c c0       	rjmp	.+88     	; 0xb1f4 <update_splash+0xe2>
    b19c:	80 91 c4 0b 	lds	r24, 0x0BC4
    b1a0:	82 30       	cpi	r24, 0x02	; 2
    b1a2:	a8 f4       	brcc	.+42     	; 0xb1ce <update_splash+0xbc>
	{
		p1s.select_state = SELECTING;
    b1a4:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    b1a8:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    b1ac:	2f ef       	ldi	r18, 0xFF	; 255
    b1ae:	47 e1       	ldi	r20, 0x17	; 23
    b1b0:	67 e0       	ldi	r22, 0x07	; 7
    b1b2:	84 e0       	ldi	r24, 0x04	; 4
    b1b4:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		fade_through();
    b1b8:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_eeprom(&handles);
    b1bc:	84 e2       	ldi	r24, 0x24	; 36
    b1be:	91 e0       	ldi	r25, 0x01	; 1
    b1c0:	0e 94 11 49 	call	0x9222	; 0x9222 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    b1c4:	df 91       	pop	r29
    b1c6:	cf 91       	pop	r28
    b1c8:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    b1ca:	0c 94 f7 57 	jmp	0xafee	; 0xafee <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    b1ce:	82 30       	cpi	r24, 0x02	; 2
    b1d0:	89 f4       	brne	.+34     	; 0xb1f4 <update_splash+0xe2>
	{
		SFX_NAVIGATE;
    b1d2:	2f ef       	ldi	r18, 0xFF	; 255
    b1d4:	47 e1       	ldi	r20, 0x17	; 23
    b1d6:	67 e0       	ldi	r22, 0x07	; 7
    b1d8:	84 e0       	ldi	r24, 0x04	; 4
    b1da:	0e 94 ae 3a 	call	0x755c	; 0x755c <TriggerNote>
		fade_through();
    b1de:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_eeprom(&scores);
    b1e2:	84 e0       	ldi	r24, 0x04	; 4
    b1e4:	91 e0       	ldi	r25, 0x01	; 1
    b1e6:	0e 94 11 49 	call	0x9222	; 0x9222 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    b1ea:	df 91       	pop	r29
    b1ec:	cf 91       	pop	r28
    b1ee:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    b1f0:	0c 94 0f 53 	jmp	0xa61e	; 0xa61e <load_tank_rank>
		return;
	}
}
    b1f4:	df 91       	pop	r29
    b1f6:	cf 91       	pop	r28
    b1f8:	0f 91       	pop	r16
    b1fa:	08 95       	ret

0000b1fc <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b1fc:	0f 93       	push	r16
    b1fe:	1f 93       	push	r17
    b200:	cf 93       	push	r28
    b202:	df 93       	push	r29
    b204:	8c 01       	movw	r16, r24
    b206:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    b208:	28 e0       	ldi	r18, 0x08	; 8
    b20a:	42 e0       	ldi	r20, 0x02	; 2
    b20c:	bc 01       	movw	r22, r24
    b20e:	8a e2       	ldi	r24, 0x2A	; 42
    b210:	9b e0       	ldi	r25, 0x0B	; 11
    b212:	0e 94 3a 57 	call	0xae74	; 0xae74 <_handle_select_render_helper>
	if (game.selection == PVP)
    b216:	80 91 c4 0b 	lds	r24, 0x0BC4
    b21a:	81 30       	cpi	r24, 0x01	; 1
    b21c:	39 f4       	brne	.+14     	; 0xb22c <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    b21e:	2a e0       	ldi	r18, 0x0A	; 10
    b220:	43 e1       	ldi	r20, 0x13	; 19
    b222:	be 01       	movw	r22, r28
    b224:	84 e2       	ldi	r24, 0x24	; 36
    b226:	9b e0       	ldi	r25, 0x0B	; 11
    b228:	0e 94 3a 57 	call	0xae74	; 0xae74 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    b22c:	4e ed       	ldi	r20, 0xDE	; 222
    b22e:	5b e0       	ldi	r21, 0x0B	; 11
    b230:	b8 01       	movw	r22, r16
    b232:	8a e2       	ldi	r24, 0x2A	; 42
    b234:	9b e0       	ldi	r25, 0x0B	; 11
    b236:	0e 94 7a 56 	call	0xacf4	; 0xacf4 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    b23a:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    b23e:	80 91 c4 0b 	lds	r24, 0x0BC4
    b242:	81 30       	cpi	r24, 0x01	; 1
    b244:	19 f0       	breq	.+6      	; 0xb24c <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    b246:	12 30       	cpi	r17, 0x02	; 2
    b248:	69 f0       	breq	.+26     	; 0xb264 <update_handle_select+0x68>
    b24a:	21 c0       	rjmp	.+66     	; 0xb28e <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    b24c:	41 e5       	ldi	r20, 0x51	; 81
    b24e:	5f e0       	ldi	r21, 0x0F	; 15
    b250:	be 01       	movw	r22, r28
    b252:	84 e2       	ldi	r24, 0x24	; 36
    b254:	9b e0       	ldi	r25, 0x0B	; 11
    b256:	0e 94 7a 56 	call	0xacf4	; 0xacf4 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    b25a:	80 91 29 0b 	lds	r24, 0x0B29
    b25e:	82 30       	cpi	r24, 0x02	; 2
    b260:	b1 f4       	brne	.+44     	; 0xb28e <update_handle_select+0x92>
    b262:	f1 cf       	rjmp	.-30     	; 0xb246 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    b264:	80 91 c4 0b 	lds	r24, 0x0BC4
    b268:	81 11       	cpse	r24, r1
    b26a:	0a c0       	rjmp	.+20     	; 0xb280 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    b26c:	89 e0       	ldi	r24, 0x09	; 9
    b26e:	80 93 5b 0f 	sts	0x0F5B, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b272:	43 e0       	ldi	r20, 0x03	; 3
    b274:	61 e4       	ldi	r22, 0x41	; 65
    b276:	71 e0       	ldi	r23, 0x01	; 1
    b278:	8c e5       	ldi	r24, 0x5C	; 92
    b27a:	9f e0       	ldi	r25, 0x0F	; 15
    b27c:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		}
		level_transition(0);
    b280:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    b282:	df 91       	pop	r29
    b284:	cf 91       	pop	r28
    b286:	1f 91       	pop	r17
    b288:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    b28a:	0c 94 a9 52 	jmp	0xa552	; 0xa552 <level_transition>
	}
}
    b28e:	df 91       	pop	r29
    b290:	cf 91       	pop	r28
    b292:	1f 91       	pop	r17
    b294:	0f 91       	pop	r16
    b296:	08 95       	ret

0000b298 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b298:	8e ef       	ldi	r24, 0xFE	; 254
    b29a:	92 e0       	ldi	r25, 0x02	; 2
    b29c:	0e 94 c7 39 	call	0x738e	; 0x738e <InitMusicPlayer>
	SetMasterVolume(0xff);
    b2a0:	8f ef       	ldi	r24, 0xFF	; 255
    b2a2:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <SetMasterVolume>
	SetTileTable(tiles_data);
    b2a6:	82 ea       	ldi	r24, 0xA2	; 162
    b2a8:	93 e4       	ldi	r25, 0x43	; 67
    b2aa:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b2ae:	82 ea       	ldi	r24, 0xA2	; 162
    b2b0:	97 e3       	ldi	r25, 0x37	; 55
    b2b2:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    b2b6:	8f e2       	ldi	r24, 0x2F	; 47
    b2b8:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    b2bc:	60 e0       	ldi	r22, 0x00	; 0
    b2be:	83 e0       	ldi	r24, 0x03	; 3
    b2c0:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	ClearVram();
    b2c4:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <ClearVram>
	init_game_state();
    b2c8:	0e 94 de 48 	call	0x91bc	; 0x91bc <init_game_state>
	init_tile_animations(&tile_animations);
    b2cc:	85 ec       	ldi	r24, 0xC5	; 197
    b2ce:	9b e0       	ldi	r25, 0x0B	; 11
    b2d0:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <init_tile_animations>
	load_splash();
    b2d4:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    b2d8:	81 e0       	ldi	r24, 0x01	; 1
    b2da:	90 e0       	ldi	r25, 0x00	; 0
    b2dc:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    b2e0:	6b eb       	ldi	r22, 0xBB	; 187
    b2e2:	7b e0       	ldi	r23, 0x0B	; 11
    b2e4:	8c e5       	ldi	r24, 0x5C	; 92
    b2e6:	9c e0       	ldi	r25, 0x0C	; 12
    b2e8:	0e 94 34 46 	call	0x8c68	; 0x8c68 <LBGetJoyPadState>
		switch (game.current_screen)
    b2ec:	80 91 c1 0b 	lds	r24, 0x0BC1
    b2f0:	81 30       	cpi	r24, 0x01	; 1
    b2f2:	99 f0       	breq	.+38     	; 0xb31a <main+0x82>
    b2f4:	58 f0       	brcs	.+22     	; 0xb30c <main+0x74>
    b2f6:	82 30       	cpi	r24, 0x02	; 2
    b2f8:	b9 f0       	breq	.+46     	; 0xb328 <main+0x90>
    b2fa:	83 30       	cpi	r24, 0x03	; 3
    b2fc:	69 f7       	brne	.-38     	; 0xb2d8 <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				// p2 should be replaced by AI input for Player v CPU
				update_level(&p1, &p2);
    b2fe:	6b eb       	ldi	r22, 0xBB	; 187
    b300:	7b e0       	ldi	r23, 0x0B	; 11
    b302:	8c e5       	ldi	r24, 0x5C	; 92
    b304:	9c e0       	ldi	r25, 0x0C	; 12
    b306:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <update_level>
				break;
    b30a:	e6 cf       	rjmp	.-52     	; 0xb2d8 <main+0x40>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    b30c:	6b eb       	ldi	r22, 0xBB	; 187
    b30e:	7b e0       	ldi	r23, 0x0B	; 11
    b310:	8c e5       	ldi	r24, 0x5C	; 92
    b312:	9c e0       	ldi	r25, 0x0C	; 12
    b314:	0e 94 89 58 	call	0xb112	; 0xb112 <update_splash>
				break;
    b318:	df cf       	rjmp	.-66     	; 0xb2d8 <main+0x40>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    b31a:	6b eb       	ldi	r22, 0xBB	; 187
    b31c:	7b e0       	ldi	r23, 0x0B	; 11
    b31e:	8c e5       	ldi	r24, 0x5C	; 92
    b320:	9c e0       	ldi	r25, 0x0C	; 12
    b322:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <update_tank_rank>
				break;
    b326:	d8 cf       	rjmp	.-80     	; 0xb2d8 <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    b328:	6b eb       	ldi	r22, 0xBB	; 187
    b32a:	7b e0       	ldi	r23, 0x0B	; 11
    b32c:	8c e5       	ldi	r24, 0x5C	; 92
    b32e:	9c e0       	ldi	r25, 0x0C	; 12
    b330:	0e 94 fe 58 	call	0xb1fc	; 0xb1fc <update_handle_select>
				break;
    b334:	d1 cf       	rjmp	.-94     	; 0xb2d8 <main+0x40>

0000b336 <__udivmodqi4>:
    b336:	99 1b       	sub	r25, r25
    b338:	79 e0       	ldi	r23, 0x09	; 9
    b33a:	04 c0       	rjmp	.+8      	; 0xb344 <__udivmodqi4_ep>

0000b33c <__udivmodqi4_loop>:
    b33c:	99 1f       	adc	r25, r25
    b33e:	96 17       	cp	r25, r22
    b340:	08 f0       	brcs	.+2      	; 0xb344 <__udivmodqi4_ep>
    b342:	96 1b       	sub	r25, r22

0000b344 <__udivmodqi4_ep>:
    b344:	88 1f       	adc	r24, r24
    b346:	7a 95       	dec	r23
    b348:	c9 f7       	brne	.-14     	; 0xb33c <__udivmodqi4_loop>
    b34a:	80 95       	com	r24
    b34c:	08 95       	ret

0000b34e <__udivmodhi4>:
    b34e:	aa 1b       	sub	r26, r26
    b350:	bb 1b       	sub	r27, r27
    b352:	51 e1       	ldi	r21, 0x11	; 17
    b354:	07 c0       	rjmp	.+14     	; 0xb364 <__udivmodhi4_ep>

0000b356 <__udivmodhi4_loop>:
    b356:	aa 1f       	adc	r26, r26
    b358:	bb 1f       	adc	r27, r27
    b35a:	a6 17       	cp	r26, r22
    b35c:	b7 07       	cpc	r27, r23
    b35e:	10 f0       	brcs	.+4      	; 0xb364 <__udivmodhi4_ep>
    b360:	a6 1b       	sub	r26, r22
    b362:	b7 0b       	sbc	r27, r23

0000b364 <__udivmodhi4_ep>:
    b364:	88 1f       	adc	r24, r24
    b366:	99 1f       	adc	r25, r25
    b368:	5a 95       	dec	r21
    b36a:	a9 f7       	brne	.-22     	; 0xb356 <__udivmodhi4_loop>
    b36c:	80 95       	com	r24
    b36e:	90 95       	com	r25
    b370:	bc 01       	movw	r22, r24
    b372:	cd 01       	movw	r24, r26
    b374:	08 95       	ret

0000b376 <__divmodhi4>:
    b376:	97 fb       	bst	r25, 7
    b378:	07 2e       	mov	r0, r23
    b37a:	16 f4       	brtc	.+4      	; 0xb380 <__divmodhi4+0xa>
    b37c:	00 94       	com	r0
    b37e:	07 d0       	rcall	.+14     	; 0xb38e <__divmodhi4_neg1>
    b380:	77 fd       	sbrc	r23, 7
    b382:	09 d0       	rcall	.+18     	; 0xb396 <__divmodhi4_neg2>
    b384:	0e 94 a7 59 	call	0xb34e	; 0xb34e <__udivmodhi4>
    b388:	07 fc       	sbrc	r0, 7
    b38a:	05 d0       	rcall	.+10     	; 0xb396 <__divmodhi4_neg2>
    b38c:	3e f4       	brtc	.+14     	; 0xb39c <__divmodhi4_exit>

0000b38e <__divmodhi4_neg1>:
    b38e:	90 95       	com	r25
    b390:	81 95       	neg	r24
    b392:	9f 4f       	sbci	r25, 0xFF	; 255
    b394:	08 95       	ret

0000b396 <__divmodhi4_neg2>:
    b396:	70 95       	com	r23
    b398:	61 95       	neg	r22
    b39a:	7f 4f       	sbci	r23, 0xFF	; 255

0000b39c <__divmodhi4_exit>:
    b39c:	08 95       	ret

0000b39e <__tablejump2__>:
    b39e:	ee 0f       	add	r30, r30
    b3a0:	ff 1f       	adc	r31, r31

0000b3a2 <__tablejump__>:
    b3a2:	05 90       	lpm	r0, Z+
    b3a4:	f4 91       	lpm	r31, Z
    b3a6:	e0 2d       	mov	r30, r0
    b3a8:	09 94       	ijmp

0000b3aa <__subsf3>:
    b3aa:	50 58       	subi	r21, 0x80	; 128

0000b3ac <__addsf3>:
    b3ac:	bb 27       	eor	r27, r27
    b3ae:	aa 27       	eor	r26, r26
    b3b0:	0e d0       	rcall	.+28     	; 0xb3ce <__addsf3x>
    b3b2:	70 c1       	rjmp	.+736    	; 0xb694 <__fp_round>
    b3b4:	61 d1       	rcall	.+706    	; 0xb678 <__fp_pscA>
    b3b6:	30 f0       	brcs	.+12     	; 0xb3c4 <__addsf3+0x18>
    b3b8:	66 d1       	rcall	.+716    	; 0xb686 <__fp_pscB>
    b3ba:	20 f0       	brcs	.+8      	; 0xb3c4 <__addsf3+0x18>
    b3bc:	31 f4       	brne	.+12     	; 0xb3ca <__addsf3+0x1e>
    b3be:	9f 3f       	cpi	r25, 0xFF	; 255
    b3c0:	11 f4       	brne	.+4      	; 0xb3c6 <__addsf3+0x1a>
    b3c2:	1e f4       	brtc	.+6      	; 0xb3ca <__addsf3+0x1e>
    b3c4:	56 c1       	rjmp	.+684    	; 0xb672 <__fp_nan>
    b3c6:	0e f4       	brtc	.+2      	; 0xb3ca <__addsf3+0x1e>
    b3c8:	e0 95       	com	r30
    b3ca:	e7 fb       	bst	r30, 7
    b3cc:	4c c1       	rjmp	.+664    	; 0xb666 <__fp_inf>

0000b3ce <__addsf3x>:
    b3ce:	e9 2f       	mov	r30, r25
    b3d0:	72 d1       	rcall	.+740    	; 0xb6b6 <__fp_split3>
    b3d2:	80 f3       	brcs	.-32     	; 0xb3b4 <__addsf3+0x8>
    b3d4:	ba 17       	cp	r27, r26
    b3d6:	62 07       	cpc	r22, r18
    b3d8:	73 07       	cpc	r23, r19
    b3da:	84 07       	cpc	r24, r20
    b3dc:	95 07       	cpc	r25, r21
    b3de:	18 f0       	brcs	.+6      	; 0xb3e6 <__addsf3x+0x18>
    b3e0:	71 f4       	brne	.+28     	; 0xb3fe <__addsf3x+0x30>
    b3e2:	9e f5       	brtc	.+102    	; 0xb44a <__addsf3x+0x7c>
    b3e4:	8a c1       	rjmp	.+788    	; 0xb6fa <__fp_zero>
    b3e6:	0e f4       	brtc	.+2      	; 0xb3ea <__addsf3x+0x1c>
    b3e8:	e0 95       	com	r30
    b3ea:	0b 2e       	mov	r0, r27
    b3ec:	ba 2f       	mov	r27, r26
    b3ee:	a0 2d       	mov	r26, r0
    b3f0:	0b 01       	movw	r0, r22
    b3f2:	b9 01       	movw	r22, r18
    b3f4:	90 01       	movw	r18, r0
    b3f6:	0c 01       	movw	r0, r24
    b3f8:	ca 01       	movw	r24, r20
    b3fa:	a0 01       	movw	r20, r0
    b3fc:	11 24       	eor	r1, r1
    b3fe:	ff 27       	eor	r31, r31
    b400:	59 1b       	sub	r21, r25
    b402:	99 f0       	breq	.+38     	; 0xb42a <__addsf3x+0x5c>
    b404:	59 3f       	cpi	r21, 0xF9	; 249
    b406:	50 f4       	brcc	.+20     	; 0xb41c <__addsf3x+0x4e>
    b408:	50 3e       	cpi	r21, 0xE0	; 224
    b40a:	68 f1       	brcs	.+90     	; 0xb466 <__addsf3x+0x98>
    b40c:	1a 16       	cp	r1, r26
    b40e:	f0 40       	sbci	r31, 0x00	; 0
    b410:	a2 2f       	mov	r26, r18
    b412:	23 2f       	mov	r18, r19
    b414:	34 2f       	mov	r19, r20
    b416:	44 27       	eor	r20, r20
    b418:	58 5f       	subi	r21, 0xF8	; 248
    b41a:	f3 cf       	rjmp	.-26     	; 0xb402 <__addsf3x+0x34>
    b41c:	46 95       	lsr	r20
    b41e:	37 95       	ror	r19
    b420:	27 95       	ror	r18
    b422:	a7 95       	ror	r26
    b424:	f0 40       	sbci	r31, 0x00	; 0
    b426:	53 95       	inc	r21
    b428:	c9 f7       	brne	.-14     	; 0xb41c <__addsf3x+0x4e>
    b42a:	7e f4       	brtc	.+30     	; 0xb44a <__addsf3x+0x7c>
    b42c:	1f 16       	cp	r1, r31
    b42e:	ba 0b       	sbc	r27, r26
    b430:	62 0b       	sbc	r22, r18
    b432:	73 0b       	sbc	r23, r19
    b434:	84 0b       	sbc	r24, r20
    b436:	ba f0       	brmi	.+46     	; 0xb466 <__addsf3x+0x98>
    b438:	91 50       	subi	r25, 0x01	; 1
    b43a:	a1 f0       	breq	.+40     	; 0xb464 <__addsf3x+0x96>
    b43c:	ff 0f       	add	r31, r31
    b43e:	bb 1f       	adc	r27, r27
    b440:	66 1f       	adc	r22, r22
    b442:	77 1f       	adc	r23, r23
    b444:	88 1f       	adc	r24, r24
    b446:	c2 f7       	brpl	.-16     	; 0xb438 <__addsf3x+0x6a>
    b448:	0e c0       	rjmp	.+28     	; 0xb466 <__addsf3x+0x98>
    b44a:	ba 0f       	add	r27, r26
    b44c:	62 1f       	adc	r22, r18
    b44e:	73 1f       	adc	r23, r19
    b450:	84 1f       	adc	r24, r20
    b452:	48 f4       	brcc	.+18     	; 0xb466 <__addsf3x+0x98>
    b454:	87 95       	ror	r24
    b456:	77 95       	ror	r23
    b458:	67 95       	ror	r22
    b45a:	b7 95       	ror	r27
    b45c:	f7 95       	ror	r31
    b45e:	9e 3f       	cpi	r25, 0xFE	; 254
    b460:	08 f0       	brcs	.+2      	; 0xb464 <__addsf3x+0x96>
    b462:	b3 cf       	rjmp	.-154    	; 0xb3ca <__addsf3+0x1e>
    b464:	93 95       	inc	r25
    b466:	88 0f       	add	r24, r24
    b468:	08 f0       	brcs	.+2      	; 0xb46c <__addsf3x+0x9e>
    b46a:	99 27       	eor	r25, r25
    b46c:	ee 0f       	add	r30, r30
    b46e:	97 95       	ror	r25
    b470:	87 95       	ror	r24
    b472:	08 95       	ret

0000b474 <__cmpsf2>:
    b474:	d4 d0       	rcall	.+424    	; 0xb61e <__fp_cmp>
    b476:	08 f4       	brcc	.+2      	; 0xb47a <__cmpsf2+0x6>
    b478:	81 e0       	ldi	r24, 0x01	; 1
    b47a:	08 95       	ret

0000b47c <__divsf3>:
    b47c:	0c d0       	rcall	.+24     	; 0xb496 <__divsf3x>
    b47e:	0a c1       	rjmp	.+532    	; 0xb694 <__fp_round>
    b480:	02 d1       	rcall	.+516    	; 0xb686 <__fp_pscB>
    b482:	40 f0       	brcs	.+16     	; 0xb494 <__divsf3+0x18>
    b484:	f9 d0       	rcall	.+498    	; 0xb678 <__fp_pscA>
    b486:	30 f0       	brcs	.+12     	; 0xb494 <__divsf3+0x18>
    b488:	21 f4       	brne	.+8      	; 0xb492 <__divsf3+0x16>
    b48a:	5f 3f       	cpi	r21, 0xFF	; 255
    b48c:	19 f0       	breq	.+6      	; 0xb494 <__divsf3+0x18>
    b48e:	eb c0       	rjmp	.+470    	; 0xb666 <__fp_inf>
    b490:	51 11       	cpse	r21, r1
    b492:	34 c1       	rjmp	.+616    	; 0xb6fc <__fp_szero>
    b494:	ee c0       	rjmp	.+476    	; 0xb672 <__fp_nan>

0000b496 <__divsf3x>:
    b496:	0f d1       	rcall	.+542    	; 0xb6b6 <__fp_split3>
    b498:	98 f3       	brcs	.-26     	; 0xb480 <__divsf3+0x4>

0000b49a <__divsf3_pse>:
    b49a:	99 23       	and	r25, r25
    b49c:	c9 f3       	breq	.-14     	; 0xb490 <__divsf3+0x14>
    b49e:	55 23       	and	r21, r21
    b4a0:	b1 f3       	breq	.-20     	; 0xb48e <__divsf3+0x12>
    b4a2:	95 1b       	sub	r25, r21
    b4a4:	55 0b       	sbc	r21, r21
    b4a6:	bb 27       	eor	r27, r27
    b4a8:	aa 27       	eor	r26, r26
    b4aa:	62 17       	cp	r22, r18
    b4ac:	73 07       	cpc	r23, r19
    b4ae:	84 07       	cpc	r24, r20
    b4b0:	38 f0       	brcs	.+14     	; 0xb4c0 <__divsf3_pse+0x26>
    b4b2:	9f 5f       	subi	r25, 0xFF	; 255
    b4b4:	5f 4f       	sbci	r21, 0xFF	; 255
    b4b6:	22 0f       	add	r18, r18
    b4b8:	33 1f       	adc	r19, r19
    b4ba:	44 1f       	adc	r20, r20
    b4bc:	aa 1f       	adc	r26, r26
    b4be:	a9 f3       	breq	.-22     	; 0xb4aa <__divsf3_pse+0x10>
    b4c0:	33 d0       	rcall	.+102    	; 0xb528 <__divsf3_pse+0x8e>
    b4c2:	0e 2e       	mov	r0, r30
    b4c4:	3a f0       	brmi	.+14     	; 0xb4d4 <__divsf3_pse+0x3a>
    b4c6:	e0 e8       	ldi	r30, 0x80	; 128
    b4c8:	30 d0       	rcall	.+96     	; 0xb52a <__divsf3_pse+0x90>
    b4ca:	91 50       	subi	r25, 0x01	; 1
    b4cc:	50 40       	sbci	r21, 0x00	; 0
    b4ce:	e6 95       	lsr	r30
    b4d0:	00 1c       	adc	r0, r0
    b4d2:	ca f7       	brpl	.-14     	; 0xb4c6 <__divsf3_pse+0x2c>
    b4d4:	29 d0       	rcall	.+82     	; 0xb528 <__divsf3_pse+0x8e>
    b4d6:	fe 2f       	mov	r31, r30
    b4d8:	27 d0       	rcall	.+78     	; 0xb528 <__divsf3_pse+0x8e>
    b4da:	66 0f       	add	r22, r22
    b4dc:	77 1f       	adc	r23, r23
    b4de:	88 1f       	adc	r24, r24
    b4e0:	bb 1f       	adc	r27, r27
    b4e2:	26 17       	cp	r18, r22
    b4e4:	37 07       	cpc	r19, r23
    b4e6:	48 07       	cpc	r20, r24
    b4e8:	ab 07       	cpc	r26, r27
    b4ea:	b0 e8       	ldi	r27, 0x80	; 128
    b4ec:	09 f0       	breq	.+2      	; 0xb4f0 <__divsf3_pse+0x56>
    b4ee:	bb 0b       	sbc	r27, r27
    b4f0:	80 2d       	mov	r24, r0
    b4f2:	bf 01       	movw	r22, r30
    b4f4:	ff 27       	eor	r31, r31
    b4f6:	93 58       	subi	r25, 0x83	; 131
    b4f8:	5f 4f       	sbci	r21, 0xFF	; 255
    b4fa:	2a f0       	brmi	.+10     	; 0xb506 <__divsf3_pse+0x6c>
    b4fc:	9e 3f       	cpi	r25, 0xFE	; 254
    b4fe:	51 05       	cpc	r21, r1
    b500:	68 f0       	brcs	.+26     	; 0xb51c <__divsf3_pse+0x82>
    b502:	b1 c0       	rjmp	.+354    	; 0xb666 <__fp_inf>
    b504:	fb c0       	rjmp	.+502    	; 0xb6fc <__fp_szero>
    b506:	5f 3f       	cpi	r21, 0xFF	; 255
    b508:	ec f3       	brlt	.-6      	; 0xb504 <__divsf3_pse+0x6a>
    b50a:	98 3e       	cpi	r25, 0xE8	; 232
    b50c:	dc f3       	brlt	.-10     	; 0xb504 <__divsf3_pse+0x6a>
    b50e:	86 95       	lsr	r24
    b510:	77 95       	ror	r23
    b512:	67 95       	ror	r22
    b514:	b7 95       	ror	r27
    b516:	f7 95       	ror	r31
    b518:	9f 5f       	subi	r25, 0xFF	; 255
    b51a:	c9 f7       	brne	.-14     	; 0xb50e <__divsf3_pse+0x74>
    b51c:	88 0f       	add	r24, r24
    b51e:	91 1d       	adc	r25, r1
    b520:	96 95       	lsr	r25
    b522:	87 95       	ror	r24
    b524:	97 f9       	bld	r25, 7
    b526:	08 95       	ret
    b528:	e1 e0       	ldi	r30, 0x01	; 1
    b52a:	66 0f       	add	r22, r22
    b52c:	77 1f       	adc	r23, r23
    b52e:	88 1f       	adc	r24, r24
    b530:	bb 1f       	adc	r27, r27
    b532:	62 17       	cp	r22, r18
    b534:	73 07       	cpc	r23, r19
    b536:	84 07       	cpc	r24, r20
    b538:	ba 07       	cpc	r27, r26
    b53a:	20 f0       	brcs	.+8      	; 0xb544 <__divsf3_pse+0xaa>
    b53c:	62 1b       	sub	r22, r18
    b53e:	73 0b       	sbc	r23, r19
    b540:	84 0b       	sbc	r24, r20
    b542:	ba 0b       	sbc	r27, r26
    b544:	ee 1f       	adc	r30, r30
    b546:	88 f7       	brcc	.-30     	; 0xb52a <__divsf3_pse+0x90>
    b548:	e0 95       	com	r30
    b54a:	08 95       	ret

0000b54c <__fixunssfsi>:
    b54c:	bc d0       	rcall	.+376    	; 0xb6c6 <__fp_splitA>
    b54e:	88 f0       	brcs	.+34     	; 0xb572 <__fixunssfsi+0x26>
    b550:	9f 57       	subi	r25, 0x7F	; 127
    b552:	90 f0       	brcs	.+36     	; 0xb578 <__fixunssfsi+0x2c>
    b554:	b9 2f       	mov	r27, r25
    b556:	99 27       	eor	r25, r25
    b558:	b7 51       	subi	r27, 0x17	; 23
    b55a:	a0 f0       	brcs	.+40     	; 0xb584 <__fixunssfsi+0x38>
    b55c:	d1 f0       	breq	.+52     	; 0xb592 <__fixunssfsi+0x46>
    b55e:	66 0f       	add	r22, r22
    b560:	77 1f       	adc	r23, r23
    b562:	88 1f       	adc	r24, r24
    b564:	99 1f       	adc	r25, r25
    b566:	1a f0       	brmi	.+6      	; 0xb56e <__fixunssfsi+0x22>
    b568:	ba 95       	dec	r27
    b56a:	c9 f7       	brne	.-14     	; 0xb55e <__fixunssfsi+0x12>
    b56c:	12 c0       	rjmp	.+36     	; 0xb592 <__fixunssfsi+0x46>
    b56e:	b1 30       	cpi	r27, 0x01	; 1
    b570:	81 f0       	breq	.+32     	; 0xb592 <__fixunssfsi+0x46>
    b572:	c3 d0       	rcall	.+390    	; 0xb6fa <__fp_zero>
    b574:	b1 e0       	ldi	r27, 0x01	; 1
    b576:	08 95       	ret
    b578:	c0 c0       	rjmp	.+384    	; 0xb6fa <__fp_zero>
    b57a:	67 2f       	mov	r22, r23
    b57c:	78 2f       	mov	r23, r24
    b57e:	88 27       	eor	r24, r24
    b580:	b8 5f       	subi	r27, 0xF8	; 248
    b582:	39 f0       	breq	.+14     	; 0xb592 <__fixunssfsi+0x46>
    b584:	b9 3f       	cpi	r27, 0xF9	; 249
    b586:	cc f3       	brlt	.-14     	; 0xb57a <__fixunssfsi+0x2e>
    b588:	86 95       	lsr	r24
    b58a:	77 95       	ror	r23
    b58c:	67 95       	ror	r22
    b58e:	b3 95       	inc	r27
    b590:	d9 f7       	brne	.-10     	; 0xb588 <__fixunssfsi+0x3c>
    b592:	3e f4       	brtc	.+14     	; 0xb5a2 <__fixunssfsi+0x56>
    b594:	90 95       	com	r25
    b596:	80 95       	com	r24
    b598:	70 95       	com	r23
    b59a:	61 95       	neg	r22
    b59c:	7f 4f       	sbci	r23, 0xFF	; 255
    b59e:	8f 4f       	sbci	r24, 0xFF	; 255
    b5a0:	9f 4f       	sbci	r25, 0xFF	; 255
    b5a2:	08 95       	ret

0000b5a4 <__floatunsisf>:
    b5a4:	e8 94       	clt
    b5a6:	09 c0       	rjmp	.+18     	; 0xb5ba <__floatsisf+0x12>

0000b5a8 <__floatsisf>:
    b5a8:	97 fb       	bst	r25, 7
    b5aa:	3e f4       	brtc	.+14     	; 0xb5ba <__floatsisf+0x12>
    b5ac:	90 95       	com	r25
    b5ae:	80 95       	com	r24
    b5b0:	70 95       	com	r23
    b5b2:	61 95       	neg	r22
    b5b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b5b6:	8f 4f       	sbci	r24, 0xFF	; 255
    b5b8:	9f 4f       	sbci	r25, 0xFF	; 255
    b5ba:	99 23       	and	r25, r25
    b5bc:	a9 f0       	breq	.+42     	; 0xb5e8 <__floatsisf+0x40>
    b5be:	f9 2f       	mov	r31, r25
    b5c0:	96 e9       	ldi	r25, 0x96	; 150
    b5c2:	bb 27       	eor	r27, r27
    b5c4:	93 95       	inc	r25
    b5c6:	f6 95       	lsr	r31
    b5c8:	87 95       	ror	r24
    b5ca:	77 95       	ror	r23
    b5cc:	67 95       	ror	r22
    b5ce:	b7 95       	ror	r27
    b5d0:	f1 11       	cpse	r31, r1
    b5d2:	f8 cf       	rjmp	.-16     	; 0xb5c4 <__floatsisf+0x1c>
    b5d4:	fa f4       	brpl	.+62     	; 0xb614 <__floatsisf+0x6c>
    b5d6:	bb 0f       	add	r27, r27
    b5d8:	11 f4       	brne	.+4      	; 0xb5de <__floatsisf+0x36>
    b5da:	60 ff       	sbrs	r22, 0
    b5dc:	1b c0       	rjmp	.+54     	; 0xb614 <__floatsisf+0x6c>
    b5de:	6f 5f       	subi	r22, 0xFF	; 255
    b5e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b5e2:	8f 4f       	sbci	r24, 0xFF	; 255
    b5e4:	9f 4f       	sbci	r25, 0xFF	; 255
    b5e6:	16 c0       	rjmp	.+44     	; 0xb614 <__floatsisf+0x6c>
    b5e8:	88 23       	and	r24, r24
    b5ea:	11 f0       	breq	.+4      	; 0xb5f0 <__floatsisf+0x48>
    b5ec:	96 e9       	ldi	r25, 0x96	; 150
    b5ee:	11 c0       	rjmp	.+34     	; 0xb612 <__floatsisf+0x6a>
    b5f0:	77 23       	and	r23, r23
    b5f2:	21 f0       	breq	.+8      	; 0xb5fc <__floatsisf+0x54>
    b5f4:	9e e8       	ldi	r25, 0x8E	; 142
    b5f6:	87 2f       	mov	r24, r23
    b5f8:	76 2f       	mov	r23, r22
    b5fa:	05 c0       	rjmp	.+10     	; 0xb606 <__floatsisf+0x5e>
    b5fc:	66 23       	and	r22, r22
    b5fe:	71 f0       	breq	.+28     	; 0xb61c <__floatsisf+0x74>
    b600:	96 e8       	ldi	r25, 0x86	; 134
    b602:	86 2f       	mov	r24, r22
    b604:	70 e0       	ldi	r23, 0x00	; 0
    b606:	60 e0       	ldi	r22, 0x00	; 0
    b608:	2a f0       	brmi	.+10     	; 0xb614 <__floatsisf+0x6c>
    b60a:	9a 95       	dec	r25
    b60c:	66 0f       	add	r22, r22
    b60e:	77 1f       	adc	r23, r23
    b610:	88 1f       	adc	r24, r24
    b612:	da f7       	brpl	.-10     	; 0xb60a <__floatsisf+0x62>
    b614:	88 0f       	add	r24, r24
    b616:	96 95       	lsr	r25
    b618:	87 95       	ror	r24
    b61a:	97 f9       	bld	r25, 7
    b61c:	08 95       	ret

0000b61e <__fp_cmp>:
    b61e:	99 0f       	add	r25, r25
    b620:	00 08       	sbc	r0, r0
    b622:	55 0f       	add	r21, r21
    b624:	aa 0b       	sbc	r26, r26
    b626:	e0 e8       	ldi	r30, 0x80	; 128
    b628:	fe ef       	ldi	r31, 0xFE	; 254
    b62a:	16 16       	cp	r1, r22
    b62c:	17 06       	cpc	r1, r23
    b62e:	e8 07       	cpc	r30, r24
    b630:	f9 07       	cpc	r31, r25
    b632:	c0 f0       	brcs	.+48     	; 0xb664 <__fp_cmp+0x46>
    b634:	12 16       	cp	r1, r18
    b636:	13 06       	cpc	r1, r19
    b638:	e4 07       	cpc	r30, r20
    b63a:	f5 07       	cpc	r31, r21
    b63c:	98 f0       	brcs	.+38     	; 0xb664 <__fp_cmp+0x46>
    b63e:	62 1b       	sub	r22, r18
    b640:	73 0b       	sbc	r23, r19
    b642:	84 0b       	sbc	r24, r20
    b644:	95 0b       	sbc	r25, r21
    b646:	39 f4       	brne	.+14     	; 0xb656 <__fp_cmp+0x38>
    b648:	0a 26       	eor	r0, r26
    b64a:	61 f0       	breq	.+24     	; 0xb664 <__fp_cmp+0x46>
    b64c:	23 2b       	or	r18, r19
    b64e:	24 2b       	or	r18, r20
    b650:	25 2b       	or	r18, r21
    b652:	21 f4       	brne	.+8      	; 0xb65c <__fp_cmp+0x3e>
    b654:	08 95       	ret
    b656:	0a 26       	eor	r0, r26
    b658:	09 f4       	brne	.+2      	; 0xb65c <__fp_cmp+0x3e>
    b65a:	a1 40       	sbci	r26, 0x01	; 1
    b65c:	a6 95       	lsr	r26
    b65e:	8f ef       	ldi	r24, 0xFF	; 255
    b660:	81 1d       	adc	r24, r1
    b662:	81 1d       	adc	r24, r1
    b664:	08 95       	ret

0000b666 <__fp_inf>:
    b666:	97 f9       	bld	r25, 7
    b668:	9f 67       	ori	r25, 0x7F	; 127
    b66a:	80 e8       	ldi	r24, 0x80	; 128
    b66c:	70 e0       	ldi	r23, 0x00	; 0
    b66e:	60 e0       	ldi	r22, 0x00	; 0
    b670:	08 95       	ret

0000b672 <__fp_nan>:
    b672:	9f ef       	ldi	r25, 0xFF	; 255
    b674:	80 ec       	ldi	r24, 0xC0	; 192
    b676:	08 95       	ret

0000b678 <__fp_pscA>:
    b678:	00 24       	eor	r0, r0
    b67a:	0a 94       	dec	r0
    b67c:	16 16       	cp	r1, r22
    b67e:	17 06       	cpc	r1, r23
    b680:	18 06       	cpc	r1, r24
    b682:	09 06       	cpc	r0, r25
    b684:	08 95       	ret

0000b686 <__fp_pscB>:
    b686:	00 24       	eor	r0, r0
    b688:	0a 94       	dec	r0
    b68a:	12 16       	cp	r1, r18
    b68c:	13 06       	cpc	r1, r19
    b68e:	14 06       	cpc	r1, r20
    b690:	05 06       	cpc	r0, r21
    b692:	08 95       	ret

0000b694 <__fp_round>:
    b694:	09 2e       	mov	r0, r25
    b696:	03 94       	inc	r0
    b698:	00 0c       	add	r0, r0
    b69a:	11 f4       	brne	.+4      	; 0xb6a0 <__fp_round+0xc>
    b69c:	88 23       	and	r24, r24
    b69e:	52 f0       	brmi	.+20     	; 0xb6b4 <__fp_round+0x20>
    b6a0:	bb 0f       	add	r27, r27
    b6a2:	40 f4       	brcc	.+16     	; 0xb6b4 <__fp_round+0x20>
    b6a4:	bf 2b       	or	r27, r31
    b6a6:	11 f4       	brne	.+4      	; 0xb6ac <__fp_round+0x18>
    b6a8:	60 ff       	sbrs	r22, 0
    b6aa:	04 c0       	rjmp	.+8      	; 0xb6b4 <__fp_round+0x20>
    b6ac:	6f 5f       	subi	r22, 0xFF	; 255
    b6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    b6b0:	8f 4f       	sbci	r24, 0xFF	; 255
    b6b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b6b4:	08 95       	ret

0000b6b6 <__fp_split3>:
    b6b6:	57 fd       	sbrc	r21, 7
    b6b8:	90 58       	subi	r25, 0x80	; 128
    b6ba:	44 0f       	add	r20, r20
    b6bc:	55 1f       	adc	r21, r21
    b6be:	59 f0       	breq	.+22     	; 0xb6d6 <__fp_splitA+0x10>
    b6c0:	5f 3f       	cpi	r21, 0xFF	; 255
    b6c2:	71 f0       	breq	.+28     	; 0xb6e0 <__fp_splitA+0x1a>
    b6c4:	47 95       	ror	r20

0000b6c6 <__fp_splitA>:
    b6c6:	88 0f       	add	r24, r24
    b6c8:	97 fb       	bst	r25, 7
    b6ca:	99 1f       	adc	r25, r25
    b6cc:	61 f0       	breq	.+24     	; 0xb6e6 <__fp_splitA+0x20>
    b6ce:	9f 3f       	cpi	r25, 0xFF	; 255
    b6d0:	79 f0       	breq	.+30     	; 0xb6f0 <__fp_splitA+0x2a>
    b6d2:	87 95       	ror	r24
    b6d4:	08 95       	ret
    b6d6:	12 16       	cp	r1, r18
    b6d8:	13 06       	cpc	r1, r19
    b6da:	14 06       	cpc	r1, r20
    b6dc:	55 1f       	adc	r21, r21
    b6de:	f2 cf       	rjmp	.-28     	; 0xb6c4 <__fp_split3+0xe>
    b6e0:	46 95       	lsr	r20
    b6e2:	f1 df       	rcall	.-30     	; 0xb6c6 <__fp_splitA>
    b6e4:	08 c0       	rjmp	.+16     	; 0xb6f6 <__fp_splitA+0x30>
    b6e6:	16 16       	cp	r1, r22
    b6e8:	17 06       	cpc	r1, r23
    b6ea:	18 06       	cpc	r1, r24
    b6ec:	99 1f       	adc	r25, r25
    b6ee:	f1 cf       	rjmp	.-30     	; 0xb6d2 <__fp_splitA+0xc>
    b6f0:	86 95       	lsr	r24
    b6f2:	71 05       	cpc	r23, r1
    b6f4:	61 05       	cpc	r22, r1
    b6f6:	08 94       	sec
    b6f8:	08 95       	ret

0000b6fa <__fp_zero>:
    b6fa:	e8 94       	clt

0000b6fc <__fp_szero>:
    b6fc:	bb 27       	eor	r27, r27
    b6fe:	66 27       	eor	r22, r22
    b700:	77 27       	eor	r23, r23
    b702:	cb 01       	movw	r24, r22
    b704:	97 f9       	bld	r25, 7
    b706:	08 95       	ret

0000b708 <__gesf2>:
    b708:	8a df       	rcall	.-236    	; 0xb61e <__fp_cmp>
    b70a:	08 f4       	brcc	.+2      	; 0xb70e <__gesf2+0x6>
    b70c:	8f ef       	ldi	r24, 0xFF	; 255
    b70e:	08 95       	ret

0000b710 <__mulsf3>:
    b710:	0b d0       	rcall	.+22     	; 0xb728 <__mulsf3x>
    b712:	c0 cf       	rjmp	.-128    	; 0xb694 <__fp_round>
    b714:	b1 df       	rcall	.-158    	; 0xb678 <__fp_pscA>
    b716:	28 f0       	brcs	.+10     	; 0xb722 <__mulsf3+0x12>
    b718:	b6 df       	rcall	.-148    	; 0xb686 <__fp_pscB>
    b71a:	18 f0       	brcs	.+6      	; 0xb722 <__mulsf3+0x12>
    b71c:	95 23       	and	r25, r21
    b71e:	09 f0       	breq	.+2      	; 0xb722 <__mulsf3+0x12>
    b720:	a2 cf       	rjmp	.-188    	; 0xb666 <__fp_inf>
    b722:	a7 cf       	rjmp	.-178    	; 0xb672 <__fp_nan>
    b724:	11 24       	eor	r1, r1
    b726:	ea cf       	rjmp	.-44     	; 0xb6fc <__fp_szero>

0000b728 <__mulsf3x>:
    b728:	c6 df       	rcall	.-116    	; 0xb6b6 <__fp_split3>
    b72a:	a0 f3       	brcs	.-24     	; 0xb714 <__mulsf3+0x4>

0000b72c <__mulsf3_pse>:
    b72c:	95 9f       	mul	r25, r21
    b72e:	d1 f3       	breq	.-12     	; 0xb724 <__mulsf3+0x14>
    b730:	95 0f       	add	r25, r21
    b732:	50 e0       	ldi	r21, 0x00	; 0
    b734:	55 1f       	adc	r21, r21
    b736:	62 9f       	mul	r22, r18
    b738:	f0 01       	movw	r30, r0
    b73a:	72 9f       	mul	r23, r18
    b73c:	bb 27       	eor	r27, r27
    b73e:	f0 0d       	add	r31, r0
    b740:	b1 1d       	adc	r27, r1
    b742:	63 9f       	mul	r22, r19
    b744:	aa 27       	eor	r26, r26
    b746:	f0 0d       	add	r31, r0
    b748:	b1 1d       	adc	r27, r1
    b74a:	aa 1f       	adc	r26, r26
    b74c:	64 9f       	mul	r22, r20
    b74e:	66 27       	eor	r22, r22
    b750:	b0 0d       	add	r27, r0
    b752:	a1 1d       	adc	r26, r1
    b754:	66 1f       	adc	r22, r22
    b756:	82 9f       	mul	r24, r18
    b758:	22 27       	eor	r18, r18
    b75a:	b0 0d       	add	r27, r0
    b75c:	a1 1d       	adc	r26, r1
    b75e:	62 1f       	adc	r22, r18
    b760:	73 9f       	mul	r23, r19
    b762:	b0 0d       	add	r27, r0
    b764:	a1 1d       	adc	r26, r1
    b766:	62 1f       	adc	r22, r18
    b768:	83 9f       	mul	r24, r19
    b76a:	a0 0d       	add	r26, r0
    b76c:	61 1d       	adc	r22, r1
    b76e:	22 1f       	adc	r18, r18
    b770:	74 9f       	mul	r23, r20
    b772:	33 27       	eor	r19, r19
    b774:	a0 0d       	add	r26, r0
    b776:	61 1d       	adc	r22, r1
    b778:	23 1f       	adc	r18, r19
    b77a:	84 9f       	mul	r24, r20
    b77c:	60 0d       	add	r22, r0
    b77e:	21 1d       	adc	r18, r1
    b780:	82 2f       	mov	r24, r18
    b782:	76 2f       	mov	r23, r22
    b784:	6a 2f       	mov	r22, r26
    b786:	11 24       	eor	r1, r1
    b788:	9f 57       	subi	r25, 0x7F	; 127
    b78a:	50 40       	sbci	r21, 0x00	; 0
    b78c:	8a f0       	brmi	.+34     	; 0xb7b0 <__mulsf3_pse+0x84>
    b78e:	e1 f0       	breq	.+56     	; 0xb7c8 <__mulsf3_pse+0x9c>
    b790:	88 23       	and	r24, r24
    b792:	4a f0       	brmi	.+18     	; 0xb7a6 <__mulsf3_pse+0x7a>
    b794:	ee 0f       	add	r30, r30
    b796:	ff 1f       	adc	r31, r31
    b798:	bb 1f       	adc	r27, r27
    b79a:	66 1f       	adc	r22, r22
    b79c:	77 1f       	adc	r23, r23
    b79e:	88 1f       	adc	r24, r24
    b7a0:	91 50       	subi	r25, 0x01	; 1
    b7a2:	50 40       	sbci	r21, 0x00	; 0
    b7a4:	a9 f7       	brne	.-22     	; 0xb790 <__mulsf3_pse+0x64>
    b7a6:	9e 3f       	cpi	r25, 0xFE	; 254
    b7a8:	51 05       	cpc	r21, r1
    b7aa:	70 f0       	brcs	.+28     	; 0xb7c8 <__mulsf3_pse+0x9c>
    b7ac:	5c cf       	rjmp	.-328    	; 0xb666 <__fp_inf>
    b7ae:	a6 cf       	rjmp	.-180    	; 0xb6fc <__fp_szero>
    b7b0:	5f 3f       	cpi	r21, 0xFF	; 255
    b7b2:	ec f3       	brlt	.-6      	; 0xb7ae <__mulsf3_pse+0x82>
    b7b4:	98 3e       	cpi	r25, 0xE8	; 232
    b7b6:	dc f3       	brlt	.-10     	; 0xb7ae <__mulsf3_pse+0x82>
    b7b8:	86 95       	lsr	r24
    b7ba:	77 95       	ror	r23
    b7bc:	67 95       	ror	r22
    b7be:	b7 95       	ror	r27
    b7c0:	f7 95       	ror	r31
    b7c2:	e7 95       	ror	r30
    b7c4:	9f 5f       	subi	r25, 0xFF	; 255
    b7c6:	c1 f7       	brne	.-16     	; 0xb7b8 <__mulsf3_pse+0x8c>
    b7c8:	fe 2b       	or	r31, r30
    b7ca:	88 0f       	add	r24, r24
    b7cc:	91 1d       	adc	r25, r1
    b7ce:	96 95       	lsr	r25
    b7d0:	87 95       	ror	r24
    b7d2:	97 f9       	bld	r25, 7
    b7d4:	08 95       	ret

0000b7d6 <_exit>:
    b7d6:	f8 94       	cli

0000b7d8 <__stop_program>:
    b7d8:	ff cf       	rjmp	.-2      	; 0xb7d8 <__stop_program>
