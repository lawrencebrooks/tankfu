
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000e90c  0000ea0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e90c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f9d  00800106  00800106  0000ea26  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000ea14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000ef90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f1e6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006b8  00000000  00000000  0000f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009eb0  00000000  00000000  0000f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000160d  00000000  00000000  00019760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000229f  00000000  00000000  0001ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015c4  00000000  00000000  0001d00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e64  00000000  00000000  0001e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000092a7  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 3f 	jmp	0x7e62	; 0x7e62 <__ctors_end>
       4:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
       8:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
       c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      10:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      14:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      18:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      1c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      20:	0c 94 39 44 	jmp	0x8872	; 0x8872 <__vector_8>
      24:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      28:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      2c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      30:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      34:	0c 94 08 42 	jmp	0x8410	; 0x8410 <__vector_13>
      38:	0c 94 47 42 	jmp	0x848e	; 0x848e <__vector_14>
      3c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      40:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      44:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      48:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      4c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      50:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      54:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      58:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      5c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      60:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      64:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      68:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>
      6c:	0c 94 9a 3f 	jmp	0x7f34	; 0x7f34 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	b4 45 b7 45 13 46 17 46 1e 46 bf 45 c4 45 c9 45     .E.E.F.F.F.E.E.E
      ce:	26 46 cc 45 cf 45 d2 45 0d 46 10 46 36 46           &F.E.E.E.F.F6F

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <default_scores>:
      e8:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
      f8:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000106 <default_handles>:
     106:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     116:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000124 <strLevels>:
     124:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     134:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     144:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     154:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     164:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     174:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     184:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     194:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     1a4:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     1b4:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     1c4:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000001d4 <strPaused>:
     1d4:	50 41 55 53 45 44 00                                PAUSED.

000001db <strExit>:
     1db:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000001e4 <strTotal>:
     1e4:	54 4f 54 41 4c 3a 00                                TOTAL:.

000001eb <strScore>:
     1eb:	53 43 4f 52 45 3a 00                                SCORE:.

000001f2 <strBanterClear>:
     1f2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000201 <banter_map>:
     201:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     211:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     221:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     231:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     241:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     251:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     261:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     271:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     281:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     291:	20 20 20 20 20 00                                        .

00000297 <strFinalScore>:
     297:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

000002a3 <strBy>:
     2a3:	42 59 00                                            BY.

000002a6 <strOwns>:
     2a6:	4f 57 4e 53 00                                      OWNS.

000002ab <strChangeHandle>:
     2ab:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

000002ba <strReset>:
     2ba:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     2ca:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000002d3 <strCancelHandle>:
     2d3:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000002de <strConfirmHandle>:
     2de:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     2ee:	54 00                                               T.

000002f0 <strSelectHandle>:
     2f0:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000301 <strPlayer2>:
     301:	50 32 00                                            P2.

00000304 <strPlayer1>:
     304:	50 31 00                                            P1.

00000307 <strVertSep>:
     307:	3b 00                                               ;.

00000309 <strUnderline>:
     309:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000315 <strHandlesTitle>:
     315:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000321 <strHighscores>:
     321:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

0000032b <str2Player>:
     32b:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

0000033c <str1Player>:
     33c:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

0000034a <strCopyright>:
     34a:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     35a:	4f 4f 4b 53 00                                      OOKS.

0000035f <my_patches>:
     35f:	02 41 13 00 00 4f 07 50 07 02 5c 0c 00 00 e3 06     .A...O.P..\.....
     36f:	e4 06 02 15 0a 00 00 45 02 46 02 02 64 08 00 00     .......E.F..d...
     37f:	af 01 b0 01 02 44 06 00 00 1e 02 1f 02 02 d2 04     .....D..........
     38f:	00 00 70 01 71 01 02 15 0a 00 00 45 02 46 02 02     ..p.q......E.F..
     39f:	5c 0c 00 00 e3 06 e4 06 00 00 00 b0 03 00 00 00     \...............
	...

000003b0 <ad_alarm>:
     3b0:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     3c0:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     3d0:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     3e0:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     3f0:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     400:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     410:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     420:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     430:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     440:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     450:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     460:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     470:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     480:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     490:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     4a0:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     4b0:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     4c0:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     4d0:	00 ff                                               ..

000004d2 <ad_navigate>:
     4d2:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     4e2:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     4f2:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     502:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     512:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     522:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     532:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     542:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     552:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     562:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     572:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     582:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     592:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     5a2:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     5b2:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     5c2:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     5d2:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     5e2:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     5f2:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     602:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     612:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     622:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     632:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000644 <ad_metal>:
     644:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     654:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     664:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     674:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     684:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     694:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     6a4:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     6b4:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     6c4:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     6d4:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     6e4:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     6f4:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     704:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     714:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     724:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     734:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     744:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     754:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     764:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     774:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     784:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     794:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     7a4:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     7b4:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     7c4:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     7d4:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     7e4:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     7f4:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     804:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     814:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     824:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     834:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     844:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     854:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000864 <ad_item>:
     864:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     874:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     884:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     894:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     8a4:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     8b4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     8c4:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     8d4:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     8e4:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     8f4:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     904:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     914:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     924:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     934:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     944:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     954:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     964:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     974:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     984:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     994:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     9a4:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     9b4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     9c4:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     9d4:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     9e4:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     9f4:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     a04:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000a15 <ad_cannonball>:
     a15:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     a25:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     a35:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     a45:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     a55:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     a65:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     a75:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     a85:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     a95:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     aa5:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     ab5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     ac5:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     ad5:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     ae5:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     af5:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     b05:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     b15:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     b25:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     b35:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     b45:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     b55:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     b65:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     b75:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     b85:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     b95:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     ba5:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     bb5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     bc5:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     bd5:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     be5:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     bf5:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     c05:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     c15:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     c25:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     c35:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     c45:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c55:	ff ff ff ff ff 00 00                                .......

00000c5c <ad_brick_explode>:
     c5c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     c6c:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     c7c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     c8c:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     c9c:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     cac:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     cbc:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     ccc:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     cdc:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     cec:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     cfc:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     d0c:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     d1c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     d2c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     d3c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     d4c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     d5c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     d6c:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     d7c:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     d8c:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     d9c:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     dac:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     dbc:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     dcc:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     ddc:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     dec:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     dfc:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     e0c:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     e1c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     e2c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     e3c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     e4c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     e5c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     e6c:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     e7c:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     e8c:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     e9c:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     eac:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     ebc:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     ecc:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     edc:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     eec:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     efc:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     f0c:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     f1c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     f2c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     f3c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     f4c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     f5c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     f6c:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     f7c:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     f8c:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     f9c:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     fac:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     fbc:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     fcc:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     fdc:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     fec:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     ffc:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    100c:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    101c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    102c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    103c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    104c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    105c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    106c:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    107c:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    108c:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    109c:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    10ac:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    10bc:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    10cc:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    10dc:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    10ec:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    10fc:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    110c:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    111c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    112c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    113c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    114c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    115c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    116c:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    117c:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    118c:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    119c:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    11ac:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    11bc:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    11cc:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    11dc:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    11ec:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    11fc:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    120c:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    121c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    122c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    123c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    124c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    125c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    126c:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    127c:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    128c:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    129c:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    12ac:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    12bc:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    12cc:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    12dc:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    12ec:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    12fc:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    130c:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    131c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    132c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    133c:	04 04 02 01 00                                      .....

00001341 <ad_banter>:
    1341:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1351:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1361:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1371:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1381:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1391:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    13a1:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    13b1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    13c1:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    13d1:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    13e1:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    13f1:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1401:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1411:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1421:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1431:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1441:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1451:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1461:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1471:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1481:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1491:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    14a1:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    14b1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    14c1:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    14d1:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    14e1:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    14f1:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1501:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1511:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1521:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1531:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1541:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1551:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1561:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1571:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1581:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1591:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    15a1:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    15b1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    15c1:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    15d1:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    15e1:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    15f1:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1601:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1611:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1621:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1631:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1641:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1651:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1661:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1671:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1681:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1691:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    16a1:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    16b1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    16c1:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    16d1:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    16e1:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    16f1:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1701:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1711:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1721:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1731:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1741:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1751:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1761:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1771:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1781:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1791:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    17a1:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    17b1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    17c1:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    17d1:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    17e1:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    17f1:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    1801:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1811:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1821:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1831:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1841:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1851:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    1861:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    1871:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    1881:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    1891:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    18a1:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    18b1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    18c1:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    18d1:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    18e1:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    18f1:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    1901:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1911:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1921:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1931:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1941:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1951:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    1961:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    1971:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    1981:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    1991:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    19a1:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    19b1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    19c1:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    19d1:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    19e1:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    19f1:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    1a01:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1a11:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1a21:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1a31:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1a41:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1a51:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1a61:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1a71:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1a81:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001a92 <level_data>:
    1a92:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1aa2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1aca:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1ae2:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1af2:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b02:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1b1e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1b2e:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b3e:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1b5a:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1b7a:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1b8a:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1b9a:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1baa:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1bba:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1bca:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1bda:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1bea:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1bfa:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1c0a:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1c1a:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1c2a:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1c3a:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1c4a:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1c62:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1c72:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1c8e:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1ca6:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1cc2:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1cd2:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1ce2:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1cfe:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1d0e:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1d1e:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1d3e:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1d5e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1d6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1d7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1d8e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1d9e:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dba:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dd6:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1de6:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1df6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1e06:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1e16:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1e26:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1e36:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1e46:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e56:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    1e66:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1e76:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1e86:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1e96:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1ea6:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1eb6:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1ec6:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1ed6:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1ee6:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1ef6:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1f06:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1f16:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1f26:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1f36:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1f46:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1f56:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1f66:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1f76:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1f86:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1f96:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1fa6:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1fb6:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1fc6:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1fd6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1fe6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1ff6:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    2006:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    2016:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    202e:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    204a:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    205a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    206a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    207a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    208a:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20a6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20c6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20e2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2102:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    211e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    213e:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    2156:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2172:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2182:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    2192:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    21a2:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    21b2:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    21c2:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    21d2:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    21e2:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    21f2:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2202:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2212:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2222:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2232:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2242:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2252:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2262:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2272:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2282:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    229e:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    22c2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22e2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22fe:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    231e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    233a:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    234a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    235a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    236a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    237a:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    238a:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    239a:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    23aa:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    23ba:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    23ca:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    23da:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    23ea:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    23fa:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    240a:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    241a:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    242a:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    243a:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    244a:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    245a:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    246a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2486:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    249e:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    24ae:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    24be:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    24ce:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    24e6:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    24f6:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2506:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2516:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2526:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2536:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    254e:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    255e:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    256e:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2586:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2596:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    25a6:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    25b6:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    25c6:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    25d6:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    25e6:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    25fe:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    260e:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2626:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2636:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2646:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2656:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2666:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2682:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    269e:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    26be:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    26ce:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    26de:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    26fa:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    271a:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2736:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2756:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2766:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2776:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2786:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    279e:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    27ae:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    27be:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    27ce:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    27de:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    27ee:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    280a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    281a:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    282a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    283a:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    285a:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    2876:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    2896:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    28ae:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    28be:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    28da:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    28f6:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2916:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2926:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2936:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2946:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2956:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    2966:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    297e:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    298e:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    299e:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    29ae:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    29be:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    29ce:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    29de:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    29ee:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    29fe:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2a26:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2a36:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a46:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2a56:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    2a6e:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    2a7e:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    2a8e:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    2a9e:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    2aae:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    2abe:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    2ace:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    2ae6:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    2af6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b06:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2b16:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2b26:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b36:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2b46:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2b56:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2b66:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2b76:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2b86:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2b96:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ba6:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2bb6:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2bc6:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2be2:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c06:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c16:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c26:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c36:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c46:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2c56:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2c6e:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2c7e:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2c8e:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2c9e:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2cae:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2cbe:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2cce:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2cde:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2cee:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2cfe:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2d0e:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2d32:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d4e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2d5e:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2d6e:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2d7e:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2d8e:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2d9e:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2dae:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2dbe:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2dd6:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2de6:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e02:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e22:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2e32:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2e42:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2e52:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2e62:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2e72:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2e82:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2e92:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2ea2:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2eb2:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2ec2:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2ed2:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2ee2:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2ef2:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f02:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f12:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f22:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f32:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f4e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f6a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f8a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fa6:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2fb6:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2fc6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fe2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ffa:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    300a:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    301a:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    302a:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    303a:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    304a:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    305a:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    306a:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    307a:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    308a:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    309a:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    30aa:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    30c2:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    30d2:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    30e2:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    30f2:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3102:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3112:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    312e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    314a:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    315a:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    316a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3186:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31a6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e2:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    31f2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3202:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3212:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    323a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    325a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3276:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3296:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    32a6:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    32b6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32d2:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    32ee:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3306:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3316:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3326:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3336:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3346:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3356:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3366:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3376:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3386:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3396:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    33a6:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    33b6:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    33c6:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    33de:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    33fe:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    341a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    343a:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    344a:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    345a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3476:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3492:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34b2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34ce:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    34de:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    34ee:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    34fe:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    350e:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    351e:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3536:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3546:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3556:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3566:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    3576:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3586:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    3596:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    35ae:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    35be:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    35ce:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    35de:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    35ee:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    35fe:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    361a:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    362a:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    363a:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    364a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    365a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    366a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    367a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    368a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    369a:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    36aa:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    36ce:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    36de:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    36ee:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    36fe:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3716:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3726:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3736:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    3746:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    3756:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    3766:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3776:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    378e:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    379e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    37ae:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    37be:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    37ce:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    37de:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    37ee:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    37fe:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    380e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    381e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    382e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    383e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    384e:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    385e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    386e:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    387e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    388e:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    389e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38ae:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    38be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    38ce:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    38de:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    38ee:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38fe:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    390e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    391e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    392e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    393e:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    394e:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    395e:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    397e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    399e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39ba:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39da:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    39f2:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    3a16:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a32:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a52:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a6e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3a7e:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a8e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aaa:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3aba:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3aca:	02 02                                               ..

00003acc <sprites_data>:
    3acc:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3adc:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3aec:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3afc:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3b0c:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3b1c:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3b2c:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3b3c:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3b4c:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3b5c:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3b6c:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3b7c:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3b8c:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3b9c:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3bac:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3bbc:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3bcc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bdc:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3bec:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3bfc:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c1c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3c2c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3c3c:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3c4c:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3c5c:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3c6c:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3c7c:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c8c:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c9c:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cac:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3cbc:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3ccc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3cdc:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3cec:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3cfc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d1c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d2c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d4c:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3d5c:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3d6c:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3d7c:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3d8c:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3d9c:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3dac:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3dbc:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3dcc:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3ddc:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3dec:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3dfc:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3e0c:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3e1c:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3e2c:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3e3c:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3e4c:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3e5c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3e6c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3e7c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e8c:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e9c:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3eac:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3ebc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ecc:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3edc:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3eec:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3efc:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f0c:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f1c:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3f2c:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3f3c:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3f4c:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3f5c:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3f6c:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3f7c:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3f8c:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3f9c:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3fac:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3fbc:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3fcc:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3fdc:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3fec:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3ffc:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    400c:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    401c:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    402c:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    403c:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    404c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    405c:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    406c:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    407c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    408c:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    409c:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40ac:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    40bc:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    40cc:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40dc:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40ec:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    40fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    410c:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    411c:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    412c:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    413c:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    414c:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    415c:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    416c:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    417c:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    418c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    419c:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    41ac:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    41bc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41cc:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    41dc:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    41ec:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    41fc:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    420c:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    421c:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    422c:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    423c:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    424c:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    425c:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    426c:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    427c:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    428c:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    429c:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42ac:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    42bc:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    42cc:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    42dc:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    42ec:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    42fc:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    430c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    431c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    432c:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    433c:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    434c:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    435c:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    436c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    437c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    438c:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    439c:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    43ac:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    43bc:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    43cc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000440c <map_sub_turret>:
    440c:	01 01 23                                            ..#

0000440f <map_sub_shot>:
    440f:	01 01 1b                                            ...

00004412 <map_up_arrow>:
    4412:	01 01 22                                            .."

00004415 <map_down_arrow>:
    4415:	01 01 21                                            ..!

00004418 <map_right_arrow>:
    4418:	01 01 20                                            .. 

0000441b <map_rocket_right_1>:
    441b:	01 01 1a                                            ...

0000441e <map_rocket_right_0>:
    441e:	01 01 19                                            ...

00004421 <map_rocket_up_1>:
    4421:	01 01 18                                            ...

00004424 <map_rocket_up_0>:
    4424:	01 01 17                                            ...

00004427 <map_ball>:
    4427:	01 01 16                                            ...

0000442a <map_explosion_2>:
    442a:	02 02 08 09 09 08                                   ......

00004430 <map_explosion_1>:
    4430:	02 02 06 07 10 11                                   ......

00004436 <map_explosion_0>:
    4436:	02 02 04 05 0e 0f                                   ......

0000443c <map_tank2_right_0>:
    443c:	02 02 14 15 1e 1f                                   ......

00004442 <map_tank2_up_0>:
    4442:	02 02 12 13 1c 1d                                   ......

00004448 <map_tank1_right_0>:
    4448:	02 02 02 03 0c 0d                                   ......

0000444e <map_tank1_up_0>:
    444e:	02 02 00 01 0a 0b                                   ......

00004454 <map_tank_blank>:
    4454:	02 02 24 24 24 24                                   ..$$$$

0000445a <map_none>:
    445a:	01 01 24                                            ..$

0000445d <tiles_data>:
	...
    449d:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    44ad:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    44bd:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    44cd:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    44dd:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    44ed:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    44fd:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    450d:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    451d:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    452d:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    453d:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    454d:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    455d:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    456d:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    457d:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    458d:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    459d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    45ad:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    45bd:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    45cd:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    45e5:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    45f5:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4605:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    461d:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    462d:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    463d:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    464d:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4665:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4685:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    469d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    46ad:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    46bd:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    46cd:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    46dd:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    46ed:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    46fd:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    470d:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    471d:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    472d:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    473d:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    474d:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    475d:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    476d:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    477d:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    478d:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    479d:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    47ad:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    47bd:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    47cd:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    47dd:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    47ed:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    47fd:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    480d:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    481d:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    482d:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    483d:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    484d:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    485d:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    486d:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    487d:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    488d:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    489d:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48ad:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    48bd:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    48cd:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    48dd:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    48ed:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    48fd:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    490d:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    491d:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    492d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    493d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    494d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    495d:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    496d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    497d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    498d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    49bd:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    49cd:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49dd:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    49ed:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    49fd:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a0d:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a1d:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4a2d:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a3d:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a4d:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a5d:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4a6d:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4a7d:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4a8d:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4a9d:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4aad:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4abd:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4acd:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4add:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4aed:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4afd:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b0d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b1d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b2d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4b5d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b6d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b7d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b8d:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b9d:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4bad:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bbd:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bcd:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bdd:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4c1d:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4c2d:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4c3d:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4c4d:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4c5d:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4c6d:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4c7d:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4c8d:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    4ccd:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4d05:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4d15:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4d25:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4d35:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4d45:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4d55:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4d65:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4d75:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4d85:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4d95:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4da5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4db5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4dc5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4dd5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4de5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4df5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e05:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e15:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4e25:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4e35:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4e45:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4e55:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4e65:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4e75:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4e85:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4e95:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4ea5:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4edd:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4eed:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4efd:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4f21:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4f31:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4f41:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4f51:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4f61:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4f71:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4f81:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4f91:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4fa1:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4fb1:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4fc1:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4fd1:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4fe1:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4ff1:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5001:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5011:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5021:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    5031:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5041:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5051:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    5061:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    5071:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5081:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5091:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    50a1:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    50b1:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    50c1:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    50d1:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    50e1:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    50f1:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5101:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5111:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5121:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5131:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5141:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5151:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    5161:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5171:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5181:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    5191:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    51a1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51b1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    51c1:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    51d1:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    51e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51f1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5201:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5211:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5221:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5231:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5241:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5251:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5261:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    5271:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5281:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5291:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    52a1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    52b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52c1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52d1:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    52e1:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    52f1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5301:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5311:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5321:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5331:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5341:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5351:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    5361:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5371:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5381:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5391:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    53a1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53c1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    53d1:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    53e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53f1:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5401:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5411:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5421:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5431:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5441:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5451:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    5461:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5471:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    5481:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    5491:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    54a1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54b1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    54c1:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    54d1:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    54e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54f1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5501:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5511:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5521:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5531:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5541:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5551:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5561:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5571:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5581:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5591:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    55a1:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55c1:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    55d1:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    55e1:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55f1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5601:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5611:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5621:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5631:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5641:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5651:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5661:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5671:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5681:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5691:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56a1:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56b1:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    56c1:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    56d1:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    56e1:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    56f1:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5701:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5711:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5721:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5731:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5741:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5751:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5761:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5771:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5781:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5791:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    57a1:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57c1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57d1:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    57e1:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    57f1:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5801:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5811:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5821:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5831:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5841:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5851:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    5861:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5871:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5881:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5891:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    58a1:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    58b1:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    58c1:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    58d1:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    58e1:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    58f1:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5901:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5911:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5921:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5931:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5941:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5951:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    5961:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5971:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5981:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5991:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    59a1:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59c1:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    59d1:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    59e1:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59f1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a01:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5a11:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5a21:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a31:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a41:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a51:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5a61:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5a71:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5a81:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a91:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5aa1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5ab1:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5ac1:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5ad1:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5ae1:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5af1:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5b01:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5b11:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5b21:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b31:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    5b41:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    5b51:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    5b61:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b71:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5b81:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5b91:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    5ba1:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    5bb1:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5bc1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5bd1:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5be1:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5bf1:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c01:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c11:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5c21:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c31:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c41:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c51:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5c61:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c71:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c81:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5c91:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5ca1:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    5cb1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5cc1:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5cd1:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5ce1:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5cf1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d01:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d11:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d21:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d31:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d41:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d51:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d61:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    5d71:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    5d81:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    5d91:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    5da1:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    5db1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5dc1:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5dd1:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5de1:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5df1:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5e01:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5e11:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5e21:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5e31:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    5e41:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    5e51:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5e61:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e71:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    5e81:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    5e91:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5ea1:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5eb1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ec1:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5ed1:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5ee1:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5ef1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5f01:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5f11:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5f21:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f31:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f41:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f51:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    5f61:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f71:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f81:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5f91:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5fa1:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5fb1:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5fc1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5fd1:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5fe1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ff1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6001:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6011:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6021:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6031:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6041:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    6051:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    6061:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    6071:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    6081:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6091:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    60a1:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    60b1:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    60c1:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    60d1:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    60e1:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    60f1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6101:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6111:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6121:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    6131:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    6141:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    6151:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    6161:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    6171:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6181:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6191:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    61a1:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    61b1:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61c1:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    61d1:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    61e1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    61f1:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6201:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6211:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6221:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    6231:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6241:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6251:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6261:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6271:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6281:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6291:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    62a1:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62b1:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62c1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62d1:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    62e1:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62f1:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6301:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6311:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6321:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6331:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6341:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6351:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6361:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6371:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6381:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6391:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    63a1:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    63b1:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63c1:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    63d1:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    63e1:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    63f1:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6401:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6411:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6421:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    6431:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6441:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6451:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    6461:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6471:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6481:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6491:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    64a1:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    64b1:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    64c1:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    64d1:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    64e1:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    64f1:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6501:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6511:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6521:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6531:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6541:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6551:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6561:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6571:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6581:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6591:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    65a1:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65b1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    65c1:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    65d1:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    65e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65f1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6601:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6611:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6621:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6631:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6641:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6651:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6661:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    6671:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6681:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6691:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66a1:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    66b1:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66c1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66d1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    66f1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6701:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6711:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6721:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6731:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6741:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6751:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6761:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6771:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6781:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6791:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    67a1:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    67b1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67c1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67d1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    67e1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    67f1:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6801:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6811:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6821:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6831:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6841:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6851:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6861:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6871:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6881:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6891:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    68a1:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    68b1:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    68c1:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    68d1:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    68e1:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    68f1:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6901:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6911:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6921:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6931:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6941:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6951:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6961:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6971:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6981:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6991:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69a1:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    69b1:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    69c1:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    69d1:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69e1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69f1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6a01:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a11:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a21:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a31:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a41:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a51:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a61:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a71:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a81:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a91:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6aa1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ab1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ac1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6ad1:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6ae1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6af1:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b01:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6b11:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    6b65:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6b75:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6b8d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ba5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6bb5:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6be5:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6bf5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6c05:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6c1d:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    6c2d:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    6c3d:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6c4d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6c65:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6c75:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6c85:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    6c9d:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    6cad:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6cbd:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6ccd:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6ce5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6cf5:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6d29:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    6d39:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6d49:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    6d65:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    6d75:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6d85:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6da5:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6db5:	df df df df df df df df 00 00 df df df df 00 00     ................
    6dc5:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    6de5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6df5:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6e05:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6e45:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e55:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6e75:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6ec5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6ee9:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    6ef9:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    6f09:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6f25:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6f35:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    6f45:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6f65:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    6f75:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    6f85:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6fa5:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6fb5:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6fc5:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    6fe5:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    6ff5:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    7005:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7029:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    7039:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    7049:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    7065:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    7075:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    7085:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    70a5:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    70b5:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    70c5:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    70e5:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    70f5:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7105:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    7125:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7135:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7145:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7165:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7175:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    7185:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    71ad:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    71c5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    71dd:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    71ed:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    71fd:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    720d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    721d:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    722d:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    723d:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    724d:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    726d:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7285:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    729d:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    72ad:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    72bd:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    72cd:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    72e5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    72f5:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    730d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7325:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7335:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    7345:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    7365:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    7375:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7385:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    73a5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    73b5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    73c5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    73e5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    73f5:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7405:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7425:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    7435:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7445:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7465:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7475:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7485:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    74a5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74b5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    74c5:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    74e5:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74f5:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7505:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7525:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7535:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7545:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7565:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7575:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7585:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    75a9:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    75b9:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    75c9:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    75e5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    75f5:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7605:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7625:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7635:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7645:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7665:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7675:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7685:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    76a5:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    76b5:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    76c5:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    76e5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    76f5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7705:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7725:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7735:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7745:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7765:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7775:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7785:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    77a5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    77b5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    77c5:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    77e5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    77f5:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7805:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7825:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7835:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7845:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7865:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7875:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7885:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    78a5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78b5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78c5:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    78e5:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    78f5:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7905:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7925:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7935:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7945:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7965:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7975:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    7985:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    79a5:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    79b5:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    79c5:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    79e5:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    79f5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a05:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7a25:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7a35:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a45:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7a65:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a75:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a85:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7aa9:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    7ab9:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7b0d:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00007b1d <map_sub_emerging>:
    7b1d:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b2d:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7b3d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b4d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b5d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b6d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    7b7d:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    7b8d:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    7b9d:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    7bad:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    7bbd:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    7bcd:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    7bdd:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7bed:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7bfd:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c0d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c1d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c2d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c3d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c4d:	0d 0d 0d 0d 0d 0d                                   ......

00007c53 <map_sub>:
    7c53:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c63:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7c73:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c83:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c93:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ca3:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7cb3:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7cc3:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7cd3:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7ce3:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7cf3:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7d03:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7d13:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d23:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7d33:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d43:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d53:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d63:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d73:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d83:	0d 0d 0d 0d 0d 0d                                   ......

00007d89 <map_scope_2>:
    7d89:	01 01 12                                            ...

00007d8c <map_scope_1>:
    7d8c:	01 01 11                                            ...

00007d8f <map_scope_0>:
    7d8f:	01 01 10                                            ...

00007d92 <map_blue_tank>:
    7d92:	02 02 2b 2c 31 32                                   ..+,12

00007d98 <map_green_tank>:
    7d98:	02 02 18 19 23 24                                   ....#$

00007d9e <map_fence>:
    7d9e:	01 01 0f                                            ...

00007da1 <map_turf>:
    7da1:	01 01 0e                                            ...

00007da4 <map_water>:
    7da4:	01 01 0d                                            ...

00007da7 <map_metal_bl>:
    7da7:	01 01 0c                                            ...

00007daa <map_metal_tr>:
    7daa:	01 01 0b                                            ...

00007dad <map_metal_br>:
    7dad:	01 01 0a                                            ...

00007db0 <map_metal_tl>:
    7db0:	01 01 09                                            ...

00007db3 <map_tile_exp_2>:
    7db3:	01 01 08                                            ...

00007db6 <map_tile_exp_1>:
    7db6:	01 01 07                                            ...

00007db9 <map_tile_exp_0>:
    7db9:	01 01 06                                            ...

00007dbc <map_rocket_itm>:
    7dbc:	01 01 04                                            ...

00007dbf <map_explode_itm>:
    7dbf:	01 01 03                                            ...

00007dc2 <map_speed_itm>:
    7dc2:	01 01 02                                            ...

00007dc5 <map_metal>:
    7dc5:	01 01 05                                            ...

00007dc8 <map_brick>:
    7dc8:	01 01 01                                            ...

00007dcb <map_splash>:
    7dcb:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    7ddb:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    7deb:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    7dfb:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    7e0b:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    7e1b:	1a 00 00 1a 2f 30                                   ..../0

00007e21 <map_pause>:
    7e21:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    7e31:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    7e41:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    7e51:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00007e5f <map_tile_none>:
    7e5f:	01 01 00                                            ...

00007e62 <__ctors_end>:
    7e62:	11 24       	eor	r1, r1
    7e64:	1f be       	out	0x3f, r1	; 63
    7e66:	cf ef       	ldi	r28, 0xFF	; 255
    7e68:	d0 e1       	ldi	r29, 0x10	; 16
    7e6a:	de bf       	out	0x3e, r29	; 62
    7e6c:	cd bf       	out	0x3d, r28	; 61

00007e6e <__do_copy_data>:
    7e6e:	11 e0       	ldi	r17, 0x01	; 1
    7e70:	a0 e0       	ldi	r26, 0x00	; 0
    7e72:	b1 e0       	ldi	r27, 0x01	; 1
    7e74:	ec e0       	ldi	r30, 0x0C	; 12
    7e76:	f9 ee       	ldi	r31, 0xE9	; 233
    7e78:	02 c0       	rjmp	.+4      	; 0x7e7e <__do_copy_data+0x10>
    7e7a:	05 90       	lpm	r0, Z+
    7e7c:	0d 92       	st	X+, r0
    7e7e:	a6 30       	cpi	r26, 0x06	; 6
    7e80:	b1 07       	cpc	r27, r17
    7e82:	d9 f7       	brne	.-10     	; 0x7e7a <__do_copy_data+0xc>

00007e84 <__do_clear_bss>:
    7e84:	10 e1       	ldi	r17, 0x10	; 16
    7e86:	a6 e0       	ldi	r26, 0x06	; 6
    7e88:	b1 e0       	ldi	r27, 0x01	; 1
    7e8a:	01 c0       	rjmp	.+2      	; 0x7e8e <.do_clear_bss_start>

00007e8c <.do_clear_bss_loop>:
    7e8c:	1d 92       	st	X+, r1

00007e8e <.do_clear_bss_start>:
    7e8e:	a3 3a       	cpi	r26, 0xA3	; 163
    7e90:	b1 07       	cpc	r27, r17
    7e92:	e1 f7       	brne	.-8      	; 0x7e8c <.do_clear_bss_loop>

00007e94 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7e94:	0e 94 0c 44 	call	0x8818	; 0x8818 <wdt_randomize>
#endif

    MCUSR = 0;
    7e98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7e9a:	88 e1       	ldi	r24, 0x18	; 24
    7e9c:	0f b6       	in	r0, 0x3f	; 63
    7e9e:	f8 94       	cli
    7ea0:	80 93 60 00 	sts	0x0060, r24
    7ea4:	10 92 60 00 	sts	0x0060, r1
    7ea8:	0f be       	out	0x3f, r0	; 63

00007eaa <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7eaa:	0e 94 ce 44 	call	0x899c	; 0x899c <isEepromFormatted>
    7eae:	81 11       	cpse	r24, r1
    7eb0:	02 c0       	rjmp	.+4      	; 0x7eb6 <Initialize+0xc>
    7eb2:	0e 94 ac 44 	call	0x8958	; 0x8958 <FormatEeprom>

	cli();
    7eb6:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7eb8:	81 e0       	ldi	r24, 0x01	; 1
    7eba:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    7ebe:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7ec2:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7ec6:	10 92 02 0b 	sts	0x0B02, r1
    7eca:	10 92 08 0b 	sts	0x0B08, r1
    7ece:	10 92 0e 0b 	sts	0x0B0E, r1
    7ed2:	10 92 14 0b 	sts	0x0B14, r1
    7ed6:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7eda:	10 92 ea 0a 	sts	0x0AEA, r1
	sync_flags=0;
    7ede:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7ee2:	92 e1       	ldi	r25, 0x12	; 18
    7ee4:	90 93 eb 0a 	sts	0x0AEB, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7ee8:	90 ee       	ldi	r25, 0xE0	; 224
    7eea:	90 93 f2 0a 	sts	0x0AF2, r25
	first_render_line=FIRST_RENDER_LINE;
    7eee:	94 e1       	ldi	r25, 0x14	; 20
    7ef0:	90 93 f1 0a 	sts	0x0AF1, r25

	joypad1_status_hi=0;
    7ef4:	10 92 f6 0a 	sts	0x0AF6, r1
    7ef8:	10 92 f5 0a 	sts	0x0AF5, r1
	joypad2_status_hi=0;
    7efc:	10 92 fa 0a 	sts	0x0AFA, r1
    7f00:	10 92 f9 0a 	sts	0x0AF9, r1
	sound_enabled=1;
    7f04:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    7f08:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <InitializeVideoMode>
    7f0c:	80 e7       	ldi	r24, 0x70	; 112
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7f10:	fc 01       	movw	r30, r24
    7f12:	25 91       	lpm	r18, Z+
    7f14:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7f16:	f9 01       	movw	r30, r18
    7f18:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7f1a:	30 83       	st	Z, r19
    7f1c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7f1e:	20 e0       	ldi	r18, 0x00	; 0
    7f20:	8e 39       	cpi	r24, 0x9E	; 158
    7f22:	92 07       	cpc	r25, r18
    7f24:	a9 f7       	brne	.-22     	; 0x7f10 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7f26:	78 94       	sei
	
	DisplayLogo();
    7f28:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <DisplayLogo>
    7f2c:	0e 94 9c 71 	call	0xe338	; 0xe338 <main>
    7f30:	0c 94 84 74 	jmp	0xe908	; 0xe908 <_exit>

00007f34 <__bad_interrupt>:
    7f34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007f38 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    7f38:	0b e9       	ldi	r16, 0x9B	; 155
    7f3a:	0a 95       	dec	r16
    7f3c:	f1 f7       	brne	.-4      	; 0x7f3a <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    7f3e:	00 91 d9 0a 	lds	r16, 0x0AD9

		ldi ZL,lo8(ram_tiles_restore);
    7f42:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    7f44:	fa e0       	ldi	r31, 0x0A	; 10
		ldi r18,3
    7f46:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7f48:	02 9f       	mul	r16, r18
		add ZL,r0
    7f4a:	e0 0d       	add	r30, r0
		adc ZH,r1
    7f4c:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7f4e:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7f50:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7f52:	20 91 d8 0a 	lds	r18, 0x0AD8
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7f56:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7f58:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7f5a:	30 0f       	add	r19, r16

		cp r18,r16
    7f5c:	20 17       	cp	r18, r16
		breq no_ramtiles
    7f5e:	51 f0       	breq	.+20     	; 0x7f74 <no_ramtiles>
		nop
    7f60:	00 00       	nop
	...

00007f64 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7f64:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7f66:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7f68:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7f6a:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7f6c:	0c 93       	st	X, r16

		inc r16
    7f6e:	03 95       	inc	r16
		cp r16,r18
    7f70:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7f72:	c0 f3       	brcs	.-16     	; 0x7f64 <upd_loop>

00007f74 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7f74:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7f76:	1a 95       	dec	r17
		brne .-4
    7f78:	f1 f7       	brne	.-4      	; 0x7f76 <no_ramtiles+0x2>
		rjmp .
    7f7a:	00 c0       	rjmp	.+0      	; 0x7f7c <no_ramtiles+0x8>
		dec r19
    7f7c:	3a 95       	dec	r19
		brne 1b
    7f7e:	d1 f7       	brne	.-12     	; 0x7f74 <no_ramtiles>
		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1

#endif


		lds r2,overlay_tile_table
    7f80:	20 90 e7 0a 	lds	r2, 0x0AE7
		lds r3,overlay_tile_table+1
    7f84:	30 90 e8 0a 	lds	r3, 0x0AE8
		lds r16,tile_table_lo 
    7f88:	00 91 e3 0a 	lds	r16, 0x0AE3
		lds r17,tile_table_hi
    7f8c:	10 91 e4 0a 	lds	r17, 0x0AE4
		movw r12,r16
    7f90:	68 01       	movw	r12, r16
		movw r6,r16
    7f92:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    7f94:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    7f96:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7f98:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    7f9a:	4e 01       	movw	r8, r28
		clr r0
    7f9c:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    7f9e:	30 91 e6 0a 	lds	r19, 0x0AE6
		cpi r19,0
    7fa2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    7fa4:	09 f0       	breq	.+2      	; 0x7fa8 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    7fa6:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    7fa8:	09 f0       	breq	.+2      	; 0x7fac <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    7faa:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    7fac:	09 f0       	breq	.+2      	; 0x7fb0 <no_ramtiles+0x3c>
		mov r24,r19
    7fae:	83 2f       	mov	r24, r19

		breq .+2
    7fb0:	09 f0       	breq	.+2      	; 0x7fb4 <no_ramtiles+0x40>
		movw r12,r2
    7fb2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    7fb4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    7fb6:	a0 2e       	mov	r10, r16
		clr r22
    7fb8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    7fba:	78 e0       	ldi	r23, 0x08	; 8

00007fbc <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    7fbc:	09 d3       	rcall	.+1554   	; 0x85d0 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    7fbe:	3c e0       	ldi	r19, 0x0C	; 12
    7fc0:	3a 95       	dec	r19
    7fc2:	f1 f7       	brne	.-4      	; 0x7fc0 <next_tile_line+0x4>
    7fc4:	00 c0       	rjmp	.+0      	; 0x7fc6 <next_tile_line+0xa>

		;***draw line***
		call render_tile_line
    7fc6:	0e 94 12 40 	call	0x8024	; 0x8024 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    7fca:	3f e0       	ldi	r19, 0x0F	; 15
    7fcc:	3a 95       	dec	r19
    7fce:	f1 f7       	brne	.-4      	; 0x7fcc <next_tile_line+0x10>
    7fd0:	00 c0       	rjmp	.+0      	; 0x7fd2 <next_tile_line+0x16>

		dec r10
    7fd2:	aa 94       	dec	r10
		breq frame_end
    7fd4:	a1 f0       	breq	.+40     	; 0x7ffe <frame_end>
	
		inc r22
    7fd6:	63 95       	inc	r22
		lpm ;3 nop
    7fd8:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    7fda:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    7fdc:	29 f0       	breq	.+10     	; 0x7fe8 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7fde:	33 e0       	ldi	r19, 0x03	; 3
    7fe0:	3a 95       	dec	r19
    7fe2:	f1 f7       	brne	.-4      	; 0x7fe0 <next_tile_line+0x24>
    7fe4:	00 c0       	rjmp	.+0      	; 0x7fe6 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    7fe6:	ea cf       	rjmp	.-44     	; 0x7fbc <next_tile_line>

00007fe8 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    7fe8:	66 27       	eor	r22, r22

		clr r0
    7fea:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    7fec:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7fee:	c3 0f       	add	r28, r19
		adc YH,r0
    7ff0:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7ff2:	8a 95       	dec	r24
		brne .+2
    7ff4:	09 f4       	brne	.+2      	; 0x7ff8 <next_tile_row+0x10>
		movw YL,r8	;main vram
    7ff6:	e4 01       	movw	r28, r8
		brne .+2
    7ff8:	09 f4       	brne	.+2      	; 0x7ffc <next_tile_row+0x14>
		movw r12,r6	;main tile table
    7ffa:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    7ffc:	df cf       	rjmp	.-66     	; 0x7fbc <next_tile_line>

00007ffe <frame_end>:

	frame_end:

		WAIT r19,18
    7ffe:	36 e0       	ldi	r19, 0x06	; 6
    8000:	3a 95       	dec	r19
    8002:	f1 f7       	brne	.-4      	; 0x8000 <frame_end+0x2>

		rcall hsync_pulse ;145
    8004:	e5 d2       	rcall	.+1482   	; 0x85d0 <hsync_pulse>
	
#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
		clr r1
    8006:	11 24       	eor	r1, r1
		call RestoreBackground
    8008:	0e 94 8e 41 	call	0x831c	; 0x831c <RestoreBackground>
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    800c:	e0 91 ec 0a 	lds	r30, 0x0AEC
		ldi r20,SYNC_FLAG_FIELD
    8010:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    8012:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    8014:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    8016:	e0 93 ec 0a 	sts	0x0AEC, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    801a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    801c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    8020:	11 24       	eor	r1, r1


		ret
    8022:	08 95       	ret

00008024 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8024:	de 01       	movw	r26, r28

		mul r22,r23
    8026:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    8028:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    802a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    802c:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    802e:	00 0d       	add	r16, r0
		adc r17,r1
    8030:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8032:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8034:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    8036:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    8038:	00 0d       	add	r16, r0
		adc r17,r1
    803a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    803c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    803e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    8040:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    8042:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    8044:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    8046:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    8048:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    804a:	08 f4       	brcc	.+2      	; 0x804e <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    804c:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    804e:	04 0e       	add	r0, r20
	    adc r1,r21
    8050:	15 1e       	adc	r1, r21

		movw ZL,r0
    8052:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    8054:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    8056:	f0 f0       	brcs	.+60     	; 0x8094 <ramloop>

00008058 <romloop>:
	

	romloop:
	    lpm r16,Z+
    8058:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    805a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    805c:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    805e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    8060:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    8062:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    8064:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    8066:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    8068:	28 31       	cpi	r18, 0x18	; 24
		nop
    806a:	00 00       	nop

	    lpm r16,Z+
    806c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    806e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    8070:	08 f4       	brcc	.+2      	; 0x8074 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    8072:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    8074:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    8076:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    8078:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    807a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    807c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    807e:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    8080:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    8082:	1a 95       	dec	r17
   
	    lpm r16,Z+
    8084:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8086:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    8088:	05 91       	lpm	r16, Z+

		breq end	
    808a:	31 f1       	breq	.+76     	; 0x80d8 <end>
	    movw ZL,r0   	;copy next tile adress
    808c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    808e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    8090:	18 f7       	brcc	.-58     	; 0x8058 <romloop>
	
		rjmp .
    8092:	00 c0       	rjmp	.+0      	; 0x8094 <ramloop>

00008094 <ramloop>:

	ramloop:

	    ld r16,Z+
    8094:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8096:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8098:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    809a:	01 91       	ld	r16, Z+
		nop   
    809c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    809e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    80a0:	23 9f       	mul	r18, r19


	    ld r16,Z+
    80a2:	01 91       	ld	r16, Z+
		nop
    80a4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    80a6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    80a8:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    80aa:	00 c0       	rjmp	.+0      	; 0x80ac <ramloop+0x18>

	    ld r16,Z+
    80ac:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    80ae:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    80b0:	08 f0       	brcs	.+2      	; 0x80b4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    80b2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    80b4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    80b6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    80b8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    80ba:	15 1e       	adc	r1, r21
		rjmp .
    80bc:	00 c0       	rjmp	.+0      	; 0x80be <ramloop+0x2a>
    
		ld r16,Z+		
    80be:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    80c0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    80c2:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    80c4:	00 c0       	rjmp	.+0      	; 0x80c6 <ramloop+0x32>

	    ld r16,Z+	
    80c6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    80c8:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    80ca:	01 91       	ld	r16, Z+

	    dec r17
    80cc:	1a 95       	dec	r17
	    breq end
    80ce:	21 f0       	breq	.+8      	; 0x80d8 <end>
	
		movw ZL,r0
    80d0:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    80d2:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    80d4:	08 f6       	brcc	.-126    	; 0x8058 <romloop>
		rjmp ramloop
    80d6:	de cf       	rjmp	.-68     	; 0x8094 <ramloop>

000080d8 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    80d8:	08 b9       	out	0x08, r16	; 8
		clr r16	
    80da:	00 27       	eor	r16, r16
		lpm	
    80dc:	c8 95       	lpm
		nop
    80de:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    80e0:	08 b9       	out	0x08, r16	; 8

		ret
    80e2:	08 95       	ret

000080e4 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    80e4:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    80e6:	e0 91 e3 0a 	lds	r30, 0x0AE3
	lds ZH,tile_table_hi
    80ea:	f0 91 e4 0a 	lds	r31, 0x0AE4
	mul r24,r18
    80ee:	82 9f       	mul	r24, r18
	add ZL,r0
    80f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    80f2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    80f4:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    80f6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    80f8:	62 9f       	mul	r22, r18
	add XL,r0
    80fa:	a0 0d       	add	r26, r0
	adc XH,r1
    80fc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    80fe:	15 90       	lpm	r1, Z+
    8100:	1d 92       	st	X+, r1
    8102:	15 90       	lpm	r1, Z+
    8104:	1d 92       	st	X+, r1
    8106:	15 90       	lpm	r1, Z+
    8108:	1d 92       	st	X+, r1
    810a:	15 90       	lpm	r1, Z+
    810c:	1d 92       	st	X+, r1
    810e:	15 90       	lpm	r1, Z+
    8110:	1d 92       	st	X+, r1
    8112:	15 90       	lpm	r1, Z+
    8114:	1d 92       	st	X+, r1
    8116:	15 90       	lpm	r1, Z+
    8118:	1d 92       	st	X+, r1
    811a:	15 90       	lpm	r1, Z+
    811c:	1d 92       	st	X+, r1
    811e:	15 90       	lpm	r1, Z+
    8120:	1d 92       	st	X+, r1
    8122:	15 90       	lpm	r1, Z+
    8124:	1d 92       	st	X+, r1
    8126:	15 90       	lpm	r1, Z+
    8128:	1d 92       	st	X+, r1
    812a:	15 90       	lpm	r1, Z+
    812c:	1d 92       	st	X+, r1
    812e:	15 90       	lpm	r1, Z+
    8130:	1d 92       	st	X+, r1
    8132:	15 90       	lpm	r1, Z+
    8134:	1d 92       	st	X+, r1
    8136:	15 90       	lpm	r1, Z+
    8138:	1d 92       	st	X+, r1
    813a:	15 90       	lpm	r1, Z+
    813c:	1d 92       	st	X+, r1
    813e:	15 90       	lpm	r1, Z+
    8140:	1d 92       	st	X+, r1
    8142:	15 90       	lpm	r1, Z+
    8144:	1d 92       	st	X+, r1
    8146:	15 90       	lpm	r1, Z+
    8148:	1d 92       	st	X+, r1
    814a:	15 90       	lpm	r1, Z+
    814c:	1d 92       	st	X+, r1
    814e:	15 90       	lpm	r1, Z+
    8150:	1d 92       	st	X+, r1
    8152:	15 90       	lpm	r1, Z+
    8154:	1d 92       	st	X+, r1
    8156:	15 90       	lpm	r1, Z+
    8158:	1d 92       	st	X+, r1
    815a:	15 90       	lpm	r1, Z+
    815c:	1d 92       	st	X+, r1
    815e:	15 90       	lpm	r1, Z+
    8160:	1d 92       	st	X+, r1
    8162:	15 90       	lpm	r1, Z+
    8164:	1d 92       	st	X+, r1
    8166:	15 90       	lpm	r1, Z+
    8168:	1d 92       	st	X+, r1
    816a:	15 90       	lpm	r1, Z+
    816c:	1d 92       	st	X+, r1
    816e:	15 90       	lpm	r1, Z+
    8170:	1d 92       	st	X+, r1
    8172:	15 90       	lpm	r1, Z+
    8174:	1d 92       	st	X+, r1
    8176:	15 90       	lpm	r1, Z+
    8178:	1d 92       	st	X+, r1
    817a:	15 90       	lpm	r1, Z+
    817c:	1d 92       	st	X+, r1
    817e:	15 90       	lpm	r1, Z+
    8180:	1d 92       	st	X+, r1
    8182:	15 90       	lpm	r1, Z+
    8184:	1d 92       	st	X+, r1
    8186:	15 90       	lpm	r1, Z+
    8188:	1d 92       	st	X+, r1
    818a:	15 90       	lpm	r1, Z+
    818c:	1d 92       	st	X+, r1
    818e:	15 90       	lpm	r1, Z+
    8190:	1d 92       	st	X+, r1
    8192:	15 90       	lpm	r1, Z+
    8194:	1d 92       	st	X+, r1
    8196:	15 90       	lpm	r1, Z+
    8198:	1d 92       	st	X+, r1
    819a:	15 90       	lpm	r1, Z+
    819c:	1d 92       	st	X+, r1
    819e:	15 90       	lpm	r1, Z+
    81a0:	1d 92       	st	X+, r1
    81a2:	15 90       	lpm	r1, Z+
    81a4:	1d 92       	st	X+, r1
    81a6:	15 90       	lpm	r1, Z+
    81a8:	1d 92       	st	X+, r1
    81aa:	15 90       	lpm	r1, Z+
    81ac:	1d 92       	st	X+, r1
    81ae:	15 90       	lpm	r1, Z+
    81b0:	1d 92       	st	X+, r1
    81b2:	15 90       	lpm	r1, Z+
    81b4:	1d 92       	st	X+, r1
    81b6:	15 90       	lpm	r1, Z+
    81b8:	1d 92       	st	X+, r1
    81ba:	15 90       	lpm	r1, Z+
    81bc:	1d 92       	st	X+, r1
    81be:	15 90       	lpm	r1, Z+
    81c0:	1d 92       	st	X+, r1
    81c2:	15 90       	lpm	r1, Z+
    81c4:	1d 92       	st	X+, r1
    81c6:	15 90       	lpm	r1, Z+
    81c8:	1d 92       	st	X+, r1
    81ca:	15 90       	lpm	r1, Z+
    81cc:	1d 92       	st	X+, r1
    81ce:	15 90       	lpm	r1, Z+
    81d0:	1d 92       	st	X+, r1
    81d2:	15 90       	lpm	r1, Z+
    81d4:	1d 92       	st	X+, r1
    81d6:	15 90       	lpm	r1, Z+
    81d8:	1d 92       	st	X+, r1
    81da:	15 90       	lpm	r1, Z+
    81dc:	1d 92       	st	X+, r1
    81de:	15 90       	lpm	r1, Z+
    81e0:	1d 92       	st	X+, r1
    81e2:	15 90       	lpm	r1, Z+
    81e4:	1d 92       	st	X+, r1
    81e6:	15 90       	lpm	r1, Z+
    81e8:	1d 92       	st	X+, r1
    81ea:	15 90       	lpm	r1, Z+
    81ec:	1d 92       	st	X+, r1
    81ee:	15 90       	lpm	r1, Z+
    81f0:	1d 92       	st	X+, r1
    81f2:	15 90       	lpm	r1, Z+
    81f4:	1d 92       	st	X+, r1
    81f6:	15 90       	lpm	r1, Z+
    81f8:	1d 92       	st	X+, r1
    81fa:	15 90       	lpm	r1, Z+
    81fc:	1d 92       	st	X+, r1
	clr r1
    81fe:	11 24       	eor	r1, r1
	ret
    8200:	08 95       	ret

00008202 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8202:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    8204:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    8206:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    8208:	82 9f       	mul	r24, r18
	add ZL,r0
    820a:	e0 0d       	add	r30, r0
	adc ZH,r1
    820c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    820e:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8210:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8212:	62 9f       	mul	r22, r18
	add XL,r0
    8214:	a0 0d       	add	r26, r0
	adc XH,r1
    8216:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    8218:	11 90       	ld	r1, Z+
    821a:	1d 92       	st	X+, r1
    821c:	11 90       	ld	r1, Z+
    821e:	1d 92       	st	X+, r1
    8220:	11 90       	ld	r1, Z+
    8222:	1d 92       	st	X+, r1
    8224:	11 90       	ld	r1, Z+
    8226:	1d 92       	st	X+, r1
    8228:	11 90       	ld	r1, Z+
    822a:	1d 92       	st	X+, r1
    822c:	11 90       	ld	r1, Z+
    822e:	1d 92       	st	X+, r1
    8230:	11 90       	ld	r1, Z+
    8232:	1d 92       	st	X+, r1
    8234:	11 90       	ld	r1, Z+
    8236:	1d 92       	st	X+, r1
    8238:	11 90       	ld	r1, Z+
    823a:	1d 92       	st	X+, r1
    823c:	11 90       	ld	r1, Z+
    823e:	1d 92       	st	X+, r1
    8240:	11 90       	ld	r1, Z+
    8242:	1d 92       	st	X+, r1
    8244:	11 90       	ld	r1, Z+
    8246:	1d 92       	st	X+, r1
    8248:	11 90       	ld	r1, Z+
    824a:	1d 92       	st	X+, r1
    824c:	11 90       	ld	r1, Z+
    824e:	1d 92       	st	X+, r1
    8250:	11 90       	ld	r1, Z+
    8252:	1d 92       	st	X+, r1
    8254:	11 90       	ld	r1, Z+
    8256:	1d 92       	st	X+, r1
    8258:	11 90       	ld	r1, Z+
    825a:	1d 92       	st	X+, r1
    825c:	11 90       	ld	r1, Z+
    825e:	1d 92       	st	X+, r1
    8260:	11 90       	ld	r1, Z+
    8262:	1d 92       	st	X+, r1
    8264:	11 90       	ld	r1, Z+
    8266:	1d 92       	st	X+, r1
    8268:	11 90       	ld	r1, Z+
    826a:	1d 92       	st	X+, r1
    826c:	11 90       	ld	r1, Z+
    826e:	1d 92       	st	X+, r1
    8270:	11 90       	ld	r1, Z+
    8272:	1d 92       	st	X+, r1
    8274:	11 90       	ld	r1, Z+
    8276:	1d 92       	st	X+, r1
    8278:	11 90       	ld	r1, Z+
    827a:	1d 92       	st	X+, r1
    827c:	11 90       	ld	r1, Z+
    827e:	1d 92       	st	X+, r1
    8280:	11 90       	ld	r1, Z+
    8282:	1d 92       	st	X+, r1
    8284:	11 90       	ld	r1, Z+
    8286:	1d 92       	st	X+, r1
    8288:	11 90       	ld	r1, Z+
    828a:	1d 92       	st	X+, r1
    828c:	11 90       	ld	r1, Z+
    828e:	1d 92       	st	X+, r1
    8290:	11 90       	ld	r1, Z+
    8292:	1d 92       	st	X+, r1
    8294:	11 90       	ld	r1, Z+
    8296:	1d 92       	st	X+, r1
    8298:	11 90       	ld	r1, Z+
    829a:	1d 92       	st	X+, r1
    829c:	11 90       	ld	r1, Z+
    829e:	1d 92       	st	X+, r1
    82a0:	11 90       	ld	r1, Z+
    82a2:	1d 92       	st	X+, r1
    82a4:	11 90       	ld	r1, Z+
    82a6:	1d 92       	st	X+, r1
    82a8:	11 90       	ld	r1, Z+
    82aa:	1d 92       	st	X+, r1
    82ac:	11 90       	ld	r1, Z+
    82ae:	1d 92       	st	X+, r1
    82b0:	11 90       	ld	r1, Z+
    82b2:	1d 92       	st	X+, r1
    82b4:	11 90       	ld	r1, Z+
    82b6:	1d 92       	st	X+, r1
    82b8:	11 90       	ld	r1, Z+
    82ba:	1d 92       	st	X+, r1
    82bc:	11 90       	ld	r1, Z+
    82be:	1d 92       	st	X+, r1
    82c0:	11 90       	ld	r1, Z+
    82c2:	1d 92       	st	X+, r1
    82c4:	11 90       	ld	r1, Z+
    82c6:	1d 92       	st	X+, r1
    82c8:	11 90       	ld	r1, Z+
    82ca:	1d 92       	st	X+, r1
    82cc:	11 90       	ld	r1, Z+
    82ce:	1d 92       	st	X+, r1
    82d0:	11 90       	ld	r1, Z+
    82d2:	1d 92       	st	X+, r1
    82d4:	11 90       	ld	r1, Z+
    82d6:	1d 92       	st	X+, r1
    82d8:	11 90       	ld	r1, Z+
    82da:	1d 92       	st	X+, r1
    82dc:	11 90       	ld	r1, Z+
    82de:	1d 92       	st	X+, r1
    82e0:	11 90       	ld	r1, Z+
    82e2:	1d 92       	st	X+, r1
    82e4:	11 90       	ld	r1, Z+
    82e6:	1d 92       	st	X+, r1
    82e8:	11 90       	ld	r1, Z+
    82ea:	1d 92       	st	X+, r1
    82ec:	11 90       	ld	r1, Z+
    82ee:	1d 92       	st	X+, r1
    82f0:	11 90       	ld	r1, Z+
    82f2:	1d 92       	st	X+, r1
    82f4:	11 90       	ld	r1, Z+
    82f6:	1d 92       	st	X+, r1
    82f8:	11 90       	ld	r1, Z+
    82fa:	1d 92       	st	X+, r1
    82fc:	11 90       	ld	r1, Z+
    82fe:	1d 92       	st	X+, r1
    8300:	11 90       	ld	r1, Z+
    8302:	1d 92       	st	X+, r1
    8304:	11 90       	ld	r1, Z+
    8306:	1d 92       	st	X+, r1
    8308:	11 90       	ld	r1, Z+
    830a:	1d 92       	st	X+, r1
    830c:	11 90       	ld	r1, Z+
    830e:	1d 92       	st	X+, r1
    8310:	11 90       	ld	r1, Z+
    8312:	1d 92       	st	X+, r1
    8314:	11 90       	ld	r1, Z+
    8316:	1d 92       	st	X+, r1
	clr r1
    8318:	11 24       	eor	r1, r1
	ret
    831a:	08 95       	ret

0000831c <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    831c:	e0 91 d9 0a 	lds	r30, 0x0AD9
	mov   r24,     ZL
    8320:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    8322:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    8324:	e8 0f       	add	r30, r24
	clr   ZH
    8326:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    8328:	e0 57       	subi	r30, 0x70	; 112
	sbci  ZH,      hi8(-(ram_tiles_restore))
    832a:	f5 4f       	sbci	r31, 0xF5	; 245

	lds   r0,      free_tile_index
    832c:	00 90 d8 0a 	lds	r0, 0x0AD8
	sub   r24,     r0
    8330:	80 19       	sub	r24, r0
	brcc  rbg_exit
    8332:	30 f4       	brcc	.+12     	; 0x8340 <rbg_exit>

00008334 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    8334:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    8336:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    8338:	01 90       	ld	r0, Z+
	st    X,       r0
    833a:	0c 92       	st	X, r0
	inc   r24
    833c:	83 95       	inc	r24
	brne  rbg_loop
    833e:	d1 f7       	brne	.-12     	; 0x8334 <rbg_loop>

00008340 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    8340:	08 95       	ret

00008342 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    8342:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    8344:	79 9f       	mul	r23, r25
	mov   XL,      r1
    8346:	a1 2d       	mov	r26, r1
	clr   XH
    8348:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    834a:	a5 52       	subi	r26, 0x25	; 37
	sbci  XH,      hi8(-(sprites_tile_banks))
    834c:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    834e:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    8350:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    8352:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    8354:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    8356:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    8358:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    835a:	89 9f       	mul	r24, r25
	movw  XL,      r0
    835c:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    835e:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    8360:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    8362:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    8364:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    8366:	09 c0       	rjmp	.+18     	; 0x837a <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    8368:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    836a:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    836c:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    836e:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    8370:	0a c0       	rjmp	.+20     	; 0x8386 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    8372:	17 96       	adiw	r26, 0x07	; 7

00008374 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    8374:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    8376:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    8378:	08 c0       	rjmp	.+16     	; 0x838a <x_check_end>

0000837a <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    837a:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    837c:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    837e:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    8380:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    8382:	f8 cf       	rjmp	.-16     	; 0x8374 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    8384:	11 97       	sbiw	r26, 0x01	; 1

00008386 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    8386:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    8388:	b9 1f       	adc	r27, r25

0000838a <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    838a:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    838c:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    838e:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    8390:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    8392:	09 c0       	rjmp	.+18     	; 0x83a6 <y_2nd_tile>

	mul   r22,     r19
    8394:	63 9f       	mul	r22, r19
	add   XL,      r0
    8396:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    8398:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    839a:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    839c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    839e:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    83a0:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    83a2:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    83a4:	08 c0       	rjmp	.+16     	; 0x83b6 <y_check_end>

000083a6 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    83a6:	13 2e       	mov	r1, r19
	dec   r1
    83a8:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    83aa:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    83ac:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    83ae:	61 9d       	mul	r22, r1
	add   ZL,      r0
    83b0:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    83b2:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    83b4:	13 2e       	mov	r1, r19

000083b6 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83b6:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    83b8:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    83ba:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    83bc:	05 c0       	rjmp	.+10     	; 0x83c8 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    83be:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    83c0:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    83c2:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    83c4:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    83c6:	04 c0       	rjmp	.+8      	; 0x83d0 <x_diff_end>

000083c8 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    83c8:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    83ca:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    83cc:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    83ce:	6f ef       	ldi	r22, 0xFF	; 255

000083d0 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    83d0:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    83d2:	04 2e       	mov	r0, r20
	lsr   r20
    83d4:	46 95       	lsr	r20
	brcc  x_loop1
    83d6:	30 f4       	brcc	.+12     	; 0x83e4 <x_loop1>
	breq  x_loopx
    83d8:	61 f0       	breq	.+24     	; 0x83f2 <x_loopx>

000083da <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83da:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83dc:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83de:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    83e0:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    83e2:	b7 1f       	adc	r27, r23

000083e4 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83e4:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83e6:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83e8:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    83ea:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    83ec:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    83ee:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    83f0:	a1 f7       	brne	.-24     	; 0x83da <x_loop0>

000083f2 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83f2:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83f4:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83f6:	2c 93       	st	X, r18

	dec   r1
    83f8:	1a 94       	dec	r1
	breq  loop_e
    83fa:	49 f0       	breq	.+18     	; 0x840e <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    83fc:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    83fe:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    8400:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    8402:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    8404:	40 2d       	mov	r20, r0
	lsr   r20
    8406:	46 95       	lsr	r20
	brcc  x_loop1
    8408:	68 f7       	brcc	.-38     	; 0x83e4 <x_loop1>
	brne  x_loop0
    840a:	39 f7       	brne	.-50     	; 0x83da <x_loop0>
	rjmp  x_loopx
    840c:	f2 cf       	rjmp	.-28     	; 0x83f2 <x_loopx>

0000840e <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    840e:	08 95       	ret

00008410 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    8410:	0f 92       	push	r0
	push  r1
    8412:	1f 92       	push	r1
	push  ZL
    8414:	ef 93       	push	r30
	push  ZH
    8416:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    8418:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    841a:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    841e:	ff 93       	push	r31

	sbrc  ZL,      2
    8420:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    8422:	04 c0       	rjmp	.+8      	; 0x842c <__vector_13+0x1c>
	sbrc  ZL,      1
    8424:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    8426:	02 c0       	rjmp	.+4      	; 0x842c <__vector_13+0x1c>
	nop
    8428:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    842a:	00 c0       	rjmp	.+0      	; 0x842c <__vector_13+0x1c>
	sbrs  ZL,      0
    842c:	e0 ff       	sbrs	r30, 0
	rjmp  .
    842e:	00 c0       	rjmp	.+0      	; 0x8430 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    8430:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    8434:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8436:	e0 93 eb 0a 	sts	0x0AEB, r30

	;process sync phases
	lds ZH,sync_phase
    843a:	f0 91 ea 0a 	lds	r31, 0x0AEA
	sbrc ZH,0
    843e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8440:	51 c0       	rjmp	.+162    	; 0x84e4 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8442:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8444:	98 f0       	brcs	.+38     	; 0x846c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8446:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8448:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    844c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    844e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8452:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8454:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8456:	26 f4       	brtc	.+8      	; 0x8460 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8458:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    845a:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <update_sound>
	rjmp sync_end
    845e:	b1 c0       	rjmp	.+354    	; 0x85c2 <sync_end>

00008460 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8460:	e5 e1       	ldi	r30, 0x15	; 21
    8462:	ea 95       	dec	r30
    8464:	f1 f7       	brne	.-4      	; 0x8462 <sync_pre_eq_no_sound_update+0x2>
    8466:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8468:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    846a:	ab c0       	rjmp	.+342    	; 0x85c2 <sync_end>

0000846c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    846c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    846e:	08 f1       	brcs	.+66     	; 0x84b2 <sync_post_eq>

	rjmp .
    8470:	00 c0       	rjmp	.+0      	; 0x8472 <sync_eq+0x6>
	rjmp .
    8472:	00 c0       	rjmp	.+0      	; 0x8474 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8474:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8476:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8478:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    847a:	16 f4       	brtc	.+4      	; 0x8480 <sync_eq_skip>
	
	call update_sound
    847c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <update_sound>

00008480 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8480:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8482:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8486:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8488:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    848c:	9a c0       	rjmp	.+308    	; 0x85c2 <sync_end>

0000848e <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    848e:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    8490:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    8494:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    8496:	04 c0       	rjmp	.+8      	; 0x84a0 <__vector_14+0x12>
	sbrc  ZL,      1
    8498:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    849a:	02 c0       	rjmp	.+4      	; 0x84a0 <__vector_14+0x12>
	nop
    849c:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    849e:	00 c0       	rjmp	.+0      	; 0x84a0 <__vector_14+0x12>
	sbrs  ZL,      0
    84a0:	e0 ff       	sbrs	r30, 0
	rjmp  .
    84a2:	00 c0       	rjmp	.+0      	; 0x84a4 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    84a4:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    84a6:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    84a8:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    84aa:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    84ae:	ef 91       	pop	r30
	reti
    84b0:	18 95       	reti

000084b2 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    84b2:	00 c0       	rjmp	.+0      	; 0x84b4 <sync_post_eq+0x2>

	bst ZL,0
    84b4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84b6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    84b8:	26 f4       	brtc	.+8      	; 0x84c2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    84ba:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    84bc:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <update_sound>
	rjmp sync_pre_eq_cont
    84c0:	05 c0       	rjmp	.+10     	; 0x84cc <sync_pre_eq_cont>

000084c2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    84c2:	e5 e1       	ldi	r30, 0x15	; 21
    84c4:	ea 95       	dec	r30
    84c6:	f1 f7       	brne	.-4      	; 0x84c4 <sync_post_eq_no_sound_update+0x2>
    84c8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    84ca:	28 9a       	sbi	0x05, 0	; 5

000084cc <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    84cc:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    84d0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    84d2:	09 f0       	breq	.+2      	; 0x84d6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    84d4:	76 c0       	rjmp	.+236    	; 0x85c2 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    84d6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    84d8:	e0 93 eb 0a 	sts	0x0AEB, r30
	ldi ZL,1
    84dc:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    84de:	e0 93 ea 0a 	sts	0x0AEA, r30
	
	rjmp sync_end
    84e2:	6f c0       	rjmp	.+222    	; 0x85c2 <sync_end>

000084e4 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    84e4:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    84e6:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    84ea:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    84ec:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    84f0:	00 c0       	rjmp	.+0      	; 0x84f2 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84f2:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    84f4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    84f6:	00 c0       	rjmp	.+0      	; 0x84f8 <sync_hsync+0x14>
	call update_sound
    84f8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    84fc:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    84fe:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    8502:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8504:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cp ZL,ZH
    8508:	ef 17       	cp	r30, r31
	brsh no_render
    850a:	d0 f4       	brcc	.+52     	; 0x8540 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    850c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    850e:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    8512:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8514:	00 90 f2 0a 	lds	r0, 0x0AF2
	sub ZH,r0			
    8518:	f0 19       	sub	r31, r0
	cp ZL,ZH
    851a:	ef 17       	cp	r30, r31
	brlo no_render
    851c:	88 f0       	brcs	.+34     	; 0x8540 <no_render>

	;push r1-r29
	ldi ZL,29
    851e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8520:	ff 27       	eor	r31, r31

00008522 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8522:	00 80       	ld	r0, Z
	push r0
    8524:	0f 92       	push	r0
	dec ZL
    8526:	ea 95       	dec	r30
	brne push_loop	
    8528:	e1 f7       	brne	.-8      	; 0x8522 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    852a:	06 e0       	ldi	r16, 0x06	; 6
    852c:	0a 95       	dec	r16
    852e:	f1 f7       	brne	.-4      	; 0x852c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8530:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8534:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8536:	ff 27       	eor	r31, r31

00008538 <pop_loop>:
pop_loop:
	pop r0
    8538:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    853a:	01 92       	st	Z+, r0
	cpi ZL,30
    853c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    853e:	e0 f3       	brcs	.-8      	; 0x8538 <pop_loop>

00008540 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8540:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    8544:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8546:	09 f0       	breq	.+2      	; 0x854a <no_render+0xa>
	rjmp sync_end
    8548:	3c c0       	rjmp	.+120    	; 0x85c2 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    854a:	2f 93       	push	r18
	push r19
    854c:	3f 93       	push	r19
	push r20
    854e:	4f 93       	push	r20
	push r21
    8550:	5f 93       	push	r21
	push r22
    8552:	6f 93       	push	r22
	push r23
    8554:	7f 93       	push	r23
	push r24
    8556:	8f 93       	push	r24
	push r25
    8558:	9f 93       	push	r25
	push r26
    855a:	af 93       	push	r26
	push r27
    855c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    855e:	78 94       	sei
	clr r1
    8560:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8562:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8564:	e0 93 ea 0a 	sts	0x0AEA, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8568:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    856a:	e0 93 eb 0a 	sts	0x0AEB, r30



	;increment the vsync counter
	lds r24,vsync_counter
    856e:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,vsync_counter+1
    8572:	90 91 fc 0a 	lds	r25, 0x0AFC
	adiw r24,1
    8576:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    8578:	80 93 fb 0a 	sts	0x0AFB, r24
	sts vsync_counter+1,r25
    857c:	90 93 fc 0a 	sts	0x0AFC, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8580:	e0 91 ed 0a 	lds	r30, 0x0AED
	lds ZH,pre_vsync_user_callback+1
    8584:	f0 91 ee 0a 	lds	r31, 0x0AEE
	cp  ZL,r1
    8588:	e1 15       	cp	r30, r1
	cpc ZH,r1
    858a:	f1 05       	cpc	r31, r1
	breq .+2 
    858c:	09 f0       	breq	.+2      	; 0x8590 <no_render+0x50>
	icall
    858e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8590:	0e 94 9c 44 	call	0x8938	; 0x8938 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8594:	0e 94 09 53 	call	0xa612	; 0xa612 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    8598:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <process_music>
	clr r1
    859c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    859e:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,post_vsync_user_callback+1
    85a2:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    85a6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    85a8:	f1 05       	cpc	r31, r1
	breq .+2 
    85aa:	09 f0       	breq	.+2      	; 0x85ae <no_render+0x6e>
	icall
    85ac:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    85ae:	bf 91       	pop	r27
	pop r26
    85b0:	af 91       	pop	r26
	pop r25
    85b2:	9f 91       	pop	r25
	pop r24
    85b4:	8f 91       	pop	r24
	pop r23
    85b6:	7f 91       	pop	r23
	pop r22
    85b8:	6f 91       	pop	r22
	pop r21
    85ba:	5f 91       	pop	r21
	pop r20
    85bc:	4f 91       	pop	r20
	pop r19
    85be:	3f 91       	pop	r19
	pop r18
    85c0:	2f 91       	pop	r18

000085c2 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    85c2:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    85c4:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    85c6:	ff 91       	pop	r31
	pop ZL
    85c8:	ef 91       	pop	r30
	pop r1
    85ca:	1f 90       	pop	r1
	pop r0
    85cc:	0f 90       	pop	r0
	reti
    85ce:	18 95       	reti

000085d0 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    85d0:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    85d2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    85d4:	00 c0       	rjmp	.+0      	; 0x85d6 <hsync_pulse+0x6>
	call update_sound
    85d6:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <update_sound>

	lds ZL,sync_pulse
    85da:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    85de:	ea 95       	dec	r30
	sts sync_pulse,ZL
    85e0:	e0 93 eb 0a 	sts	0x0AEB, r30

	ret
    85e4:	08 95       	ret

000085e6 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    85e6:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    85ea:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    85ec:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <ProcessMusic>
#endif

	ret
    85f0:	08 95       	ret

000085f2 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    85f2:	0f 93       	push	r16
	push r17
    85f4:	1f 93       	push	r17
	push r18
    85f6:	2f 93       	push	r18
	push r28
    85f8:	cf 93       	push	r28
	push r29
    85fa:	df 93       	push	r29

	mov r18,ZL
    85fc:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    85fe:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8602:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8606:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8608:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    860c:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8610:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8614:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8616:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8618:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    861c:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8620:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8624:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8626:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8628:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    862a:	d0 2d       	mov	r29, r0
	nop
    862c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    862e:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8632:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8636:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8638:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    863c:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8640:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8644:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8646:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8648:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    864c:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8650:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8654:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8656:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8658:	20 ff       	sbrs	r18, 0
	rjmp .
    865a:	00 c0       	rjmp	.+0      	; 0x865c <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    865c:	01 03       	mulsu	r16, r17
	clr r0
    865e:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8660:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8662:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8664:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8666:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    866a:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    866e:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8670:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8674:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8678:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    867c:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    867e:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8680:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    8684:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    8688:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    868c:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    868e:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8690:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8692:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8694:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    8698:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    869c:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    86a0:	ea 95       	dec	r30
	brpl ch4_no_shift	
    86a2:	92 f4       	brpl	.+36     	; 0x86c8 <ch4_no_shift>

	lds ZH,tr4_params
    86a4:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    86a8:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    86aa:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    86ac:	00 2e       	mov	r0, r16
	lsr r0
    86ae:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    86b0:	00 26       	eor	r0, r16
	bst r0,0
    86b2:	00 fa       	bst	r0, 0
	lsr r17
    86b4:	16 95       	lsr	r17
	ror r16
    86b6:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    86b8:	16 f9       	bld	r17, 6
	sbrs ZH,0
    86ba:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    86bc:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    86be:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    86c2:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    86c6:	03 c0       	rjmp	.+6      	; 0x86ce <ch4_end>

000086c8 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    86c8:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    86ca:	1a 95       	dec	r17
	brne .-4
    86cc:	f1 f7       	brne	.-4      	; 0x86ca <ch4_no_shift+0x2>

000086ce <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    86ce:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    86d2:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    86d4:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    86d6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    86d8:	21 ff       	sbrs	r18, 1
	rjmp .
    86da:	00 c0       	rjmp	.+0      	; 0x86dc <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    86dc:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    86de:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    86e0:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    86e4:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    86e6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    86e8:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    86ea:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    86ec:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    86f0:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    86f4:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    86f6:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    86fa:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    86fe:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8702:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8704:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    8708:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    870a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    870c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    870e:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8712:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    8716:	00 19       	sub	r16, r0
	sbc r17,r1
    8718:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    871a:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    871e:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8722:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8724:	f1 05       	cpc	r31, r1
	brlo .+2
    8726:	08 f0       	brcs	.+2      	; 0x872a <ch4_end+0x5c>
	movw ZL,r16
    8728:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    872a:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    872e:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8732:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8734:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    8738:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    873a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    873c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    873e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8740:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8742:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8744:	d0 05       	cpc	r29, r0
	brlt .+2
    8746:	0c f0       	brlt	.+2      	; 0x874a <ch4_end+0x7c>
	ldi r28,127
    8748:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    874a:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    874c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    874e:	d0 05       	cpc	r29, r0
	brge .+2
    8750:	0c f4       	brge	.+2      	; 0x8754 <ch4_end+0x86>
	ldi r28,-128
    8752:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8754:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8756:	c0 93 b3 00 	sts	0x00B3, r28

0000875a <update_sound_end>:
#endif


update_sound_end:

	pop r29
    875a:	df 91       	pop	r29
	pop r28
    875c:	cf 91       	pop	r28
	pop r18
    875e:	2f 91       	pop	r18
	pop r17
    8760:	1f 91       	pop	r17
	pop r16
    8762:	0f 91       	pop	r16
	
	ret
    8764:	08 95       	ret

00008766 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8766:	80 93 db 0a 	sts	0x0ADB, r24
	sts sprites_tile_banks+1,r25
    876a:	90 93 dc 0a 	sts	0x0ADC, r25
	ret
    876e:	08 95       	ret

00008770 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8770:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8772:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8774:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8776:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8778:	68 e1       	ldi	r22, 0x18	; 24

0000877a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    877a:	6d 93       	st	X+, r22
	sbiw r30,1
    877c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    877e:	e9 f7       	brne	.-6      	; 0x877a <fill_vram_loop>

	clr r1
    8780:	11 24       	eor	r1, r1

	ret
    8782:	08 95       	ret

00008784 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8784:	50 91 e5 0a 	lds	r21, 0x0AE5
	add r20,21
    8788:	45 0f       	add	r20, r21
	rjmp SetTile	
    878a:	00 c0       	rjmp	.+0      	; 0x878c <SetTile>

0000878c <SetTile>:

	ret

#else

	clr r25
    878c:	99 27       	eor	r25, r25
	clr r23	
    878e:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8790:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8792:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8794:	08 0e       	add	r0, r24
	adc r1,r25
    8796:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8798:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    879a:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    879c:	a0 0d       	add	r26, r0
	adc XH,r1
    879e:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    87a0:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    87a2:	4c 93       	st	X, r20

	clr r1
    87a4:	11 24       	eor	r1, r1

	ret
    87a6:	08 95       	ret

000087a8 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    87a8:	80 93 e5 0a 	sts	0x0AE5, r24
	ret
    87ac:	08 95       	ret

000087ae <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    87ae:	80 93 e3 0a 	sts	0x0AE3, r24
	sts tile_table_hi,r25	
    87b2:	90 93 e4 0a 	sts	0x0AE4, r25
	ret
    87b6:	08 95       	ret

000087b8 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    87b8:	80 91 ec 0a 	lds	r24, 0x0AEC
	andi r24,SYNC_FLAG_VSYNC
    87bc:	81 70       	andi	r24, 0x01	; 1
	ret
    87be:	08 95       	ret

000087c0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    87c0:	20 91 ec 0a 	lds	r18, 0x0AEC
	andi r18,~SYNC_FLAG_VSYNC
    87c4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    87c6:	20 93 ec 0a 	sts	0x0AEC, r18
	ret
    87ca:	08 95       	ret

000087cc <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    87cc:	88 23       	and	r24, r24
	brne rj_p2
    87ce:	29 f4       	brne	.+10     	; 0x87da <rj_p2>
		
	lds r24,joypad1_status_lo
    87d0:	80 91 f3 0a 	lds	r24, 0x0AF3
	lds r25,joypad1_status_lo+1
    87d4:	90 91 f4 0a 	lds	r25, 0x0AF4
	ret
    87d8:	08 95       	ret

000087da <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    87da:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad2_status_lo+1	
    87de:	90 91 f8 0a 	lds	r25, 0x0AF8

	ret
    87e2:	08 95       	ret

000087e4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    87e4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    87e6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    87e8:	f1 f7       	brne	.-4      	; 0x87e6 <WaitUs+0x2>
	nop
    87ea:	00 00       	nop
	sbiw r24,1
    87ec:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    87ee:	d1 f7       	brne	.-12     	; 0x87e4 <WaitUs>

	ret
    87f0:	08 95       	ret

000087f2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    87f2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    87f4:	fe cf       	rjmp	.-4      	; 0x87f2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    87f6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    87f8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    87fa:	60 bd       	out	0x20, r22	; 32
   cli
    87fc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    87fe:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8800:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8802:	78 94       	sei
   ret
    8804:	08 95       	ret

00008806 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8806:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8808:	fe cf       	rjmp	.-4      	; 0x8806 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    880a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    880c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    880e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8810:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8812:	80 b5       	in	r24, 0x20	; 32
   sei
    8814:	78 94       	sei
   ret
    8816:	08 95       	ret

00008818 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8818:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    881a:	80 93 eb 0a 	sts	0x0AEB, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    881e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    8822:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    8826:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    882a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    882e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    8832:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8836:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    883a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    883e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8840:	80 93 81 00 	sts	0x0081, r24

		cli
    8844:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8846:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8848:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    884c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    884e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8852:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8854:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8858:	90 93 60 00 	sts	0x0060, r25
	
		sei
    885c:	78 94       	sei

0000885e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    885e:	80 91 eb 0a 	lds	r24, 0x0AEB
		cpi r24,8
    8862:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8864:	e0 f3       	brcs	.-8      	; 0x885e <wait>

		ret
    8866:	08 95       	ret

00008868 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8868:	80 91 fd 0a 	lds	r24, 0x0AFD
		lds r25,random_value+1
    886c:	90 91 fe 0a 	lds	r25, 0x0AFE
		ret
    8870:	08 95       	ret

00008872 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8872:	0f 93       	push	r16
		push r17
    8874:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8876:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8878:	0f 93       	push	r16

		lds r16,sync_pulse
    887a:	00 91 eb 0a 	lds	r16, 0x0AEB
		inc r16
    887e:	03 95       	inc	r16
		sts sync_pulse,r16
    8880:	00 93 eb 0a 	sts	0x0AEB, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8884:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8886:	08 c0       	rjmp	.+16     	; 0x8898 <__vector_8+0x26>
		lds r17,random_value
    8888:	10 91 fd 0a 	lds	r17, 0x0AFD
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    888c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8890:	10 27       	eor	r17, r16
		sts random_value,r17
    8892:	10 93 fd 0a 	sts	0x0AFD, r17
		rjmp 2f
    8896:	07 c0       	rjmp	.+14     	; 0x88a6 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8898:	10 91 fe 0a 	lds	r17, 0x0AFE
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    889c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    88a0:	10 27       	eor	r17, r16
		sts random_value+1,r17
    88a2:	10 93 fe 0a 	sts	0x0AFE, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    88a6:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    88a8:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    88ac:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    88ae:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    88b0:	1f 91       	pop	r17
		pop r16
    88b2:	0f 91       	pop	r16
		reti
    88b4:	18 95       	reti

000088b6 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    88b6:	98 e0       	ldi	r25, 0x08	; 8
    88b8:	88 e1       	ldi	r24, 0x18	; 24
    88ba:	0f b6       	in	r0, 0x3f	; 63
    88bc:	f8 94       	cli
    88be:	a8 95       	wdr
    88c0:	80 93 60 00 	sts	0x0060, r24
    88c4:	0f be       	out	0x3f, r0	; 63
    88c6:	90 93 60 00 	sts	0x0060, r25
	while(1);
    88ca:	ff cf       	rjmp	.-2      	; 0x88ca <SoftReset+0x14>

000088cc <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    88cc:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    88ce:	c8 95       	lpm
    88d0:	c8 95       	lpm
		Wait200ns();
    88d2:	c8 95       	lpm
    88d4:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    88d6:	12 98       	cbi	0x02, 2	; 2
    88d8:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    88da:	80 e0       	ldi	r24, 0x00	; 0
    88dc:	90 e0       	ldi	r25, 0x00	; 0
    88de:	20 e0       	ldi	r18, 0x00	; 0
    88e0:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    88e2:	36 95       	lsr	r19
    88e4:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    88e6:	96 95       	lsr	r25
    88e8:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    88ea:	c8 95       	lpm
    88ec:	c8 95       	lpm
			Wait200ns();
    88ee:	c8 95       	lpm
    88f0:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    88f2:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    88f4:	00 9b       	sbis	0x00, 0	; 0
    88f6:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    88f8:	01 9b       	sbis	0x00, 1	; 0
    88fa:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    88fc:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    88fe:	c8 95       	lpm
    8900:	c8 95       	lpm
			Wait200ns();
    8902:	c8 95       	lpm
    8904:	c8 95       	lpm
    8906:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8908:	61 f7       	brne	.-40     	; 0x88e2 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    890a:	30 93 f4 0a 	sts	0x0AF4, r19
    890e:	20 93 f3 0a 	sts	0x0AF3, r18
		joypad2_status_lo=p2ButtonsLo;
    8912:	90 93 f8 0a 	sts	0x0AF8, r25
    8916:	80 93 f7 0a 	sts	0x0AF7, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    891a:	80 91 f3 0a 	lds	r24, 0x0AF3
    891e:	90 91 f4 0a 	lds	r25, 0x0AF4
    8922:	0f 97       	sbiw	r24, 0x0f	; 15
    8924:	31 f0       	breq	.+12     	; 0x8932 <ReadButtons+0x66>
    8926:	80 91 f7 0a 	lds	r24, 0x0AF7
    892a:	90 91 f8 0a 	lds	r25, 0x0AF8
    892e:	0f 97       	sbiw	r24, 0x0f	; 15
    8930:	11 f4       	brne	.+4      	; 0x8936 <ReadButtons+0x6a>
		SoftReset();
    8932:	0e 94 5b 44 	call	0x88b6	; 0x88b6 <SoftReset>
    8936:	08 95       	ret

00008938 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8938:	10 92 3f 0b 	sts	0x0B3F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    893c:	00 99       	sbic	0x00, 0	; 0
    893e:	03 c0       	rjmp	.+6      	; 0x8946 <ReadControllers+0xe>
    8940:	81 e0       	ldi	r24, 0x01	; 1
    8942:	80 93 3f 0b 	sts	0x0B3F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8946:	01 99       	sbic	0x00, 1	; 0
    8948:	05 c0       	rjmp	.+10     	; 0x8954 <ReadControllers+0x1c>
    894a:	80 91 3f 0b 	lds	r24, 0x0B3F
    894e:	82 60       	ori	r24, 0x02	; 2
    8950:	80 93 3f 0b 	sts	0x0B3F, r24
			
	//read the standard buttons
	ReadButtons();
    8954:	0c 94 66 44 	jmp	0x88cc	; 0x88cc <ReadButtons>

00008958 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8958:	cf 93       	push	r28
    895a:	df 93       	push	r29
    895c:	c0 e0       	ldi	r28, 0x00	; 0
    895e:	d0 e0       	ldi	r29, 0x00	; 0
    8960:	fe 01       	movw	r30, r28
    8962:	e2 56       	subi	r30, 0x62	; 98
    8964:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8966:	64 91       	lpm	r22, Z
    8968:	ce 01       	movw	r24, r28
    896a:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <WriteEeprom>
    896e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8970:	c0 32       	cpi	r28, 0x20	; 32
    8972:	d1 05       	cpc	r29, r1
    8974:	a9 f7       	brne	.-22     	; 0x8960 <FormatEeprom+0x8>
    8976:	c0 e2       	ldi	r28, 0x20	; 32
    8978:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    897a:	6f ef       	ldi	r22, 0xFF	; 255
    897c:	ce 01       	movw	r24, r28
    897e:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8982:	6f ef       	ldi	r22, 0xFF	; 255
    8984:	ce 01       	movw	r24, r28
    8986:	01 96       	adiw	r24, 0x01	; 1
    8988:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    898c:	a0 96       	adiw	r28, 0x20	; 32
    898e:	c1 15       	cp	r28, r1
    8990:	88 e0       	ldi	r24, 0x08	; 8
    8992:	d8 07       	cpc	r29, r24
    8994:	91 f7       	brne	.-28     	; 0x897a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8996:	df 91       	pop	r29
    8998:	cf 91       	pop	r28
    899a:	08 95       	ret

0000899c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    899c:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    899e:	80 e0       	ldi	r24, 0x00	; 0
    89a0:	90 e0       	ldi	r25, 0x00	; 0
    89a2:	0e 94 03 44 	call	0x8806	; 0x8806 <ReadEeprom>
    89a6:	c8 2f       	mov	r28, r24
    89a8:	81 e0       	ldi	r24, 0x01	; 1
    89aa:	90 e0       	ldi	r25, 0x00	; 0
    89ac:	0e 94 03 44 	call	0x8806	; 0x8806 <ReadEeprom>
    89b0:	28 2f       	mov	r18, r24
    89b2:	30 e0       	ldi	r19, 0x00	; 0
    89b4:	32 2f       	mov	r19, r18
    89b6:	22 27       	eor	r18, r18
    89b8:	2c 0f       	add	r18, r28
    89ba:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    89bc:	81 e0       	ldi	r24, 0x01	; 1
    89be:	2a 35       	cpi	r18, 0x5A	; 90
    89c0:	35 45       	sbci	r19, 0x55	; 85
    89c2:	09 f0       	breq	.+2      	; 0x89c6 <isEepromFormatted+0x2a>
    89c4:	80 e0       	ldi	r24, 0x00	; 0
}
    89c6:	cf 91       	pop	r28
    89c8:	08 95       	ret

000089ca <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    89ca:	8f 92       	push	r8
    89cc:	9f 92       	push	r9
    89ce:	af 92       	push	r10
    89d0:	bf 92       	push	r11
    89d2:	cf 92       	push	r12
    89d4:	df 92       	push	r13
    89d6:	ef 92       	push	r14
    89d8:	ff 92       	push	r15
    89da:	0f 93       	push	r16
    89dc:	1f 93       	push	r17
    89de:	cf 93       	push	r28
    89e0:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    89e2:	fb 01       	movw	r30, r22
    89e4:	11 82       	std	Z+1, r1	; 0x01
    89e6:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    89e8:	8f 3f       	cpi	r24, 0xFF	; 255
    89ea:	ff ef       	ldi	r31, 0xFF	; 255
    89ec:	9f 07       	cpc	r25, r31
    89ee:	89 f1       	breq	.+98     	; 0x8a52 <EepromBlockExists+0x88>
    89f0:	6a 01       	movw	r12, r20
    89f2:	8b 01       	movw	r16, r22
    89f4:	7c 01       	movw	r14, r24
    89f6:	a1 2c       	mov	r10, r1
    89f8:	b1 2c       	mov	r11, r1
    89fa:	c0 e0       	ldi	r28, 0x00	; 0
    89fc:	d3 e0       	ldi	r29, 0x03	; 3
    89fe:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8a00:	c5 01       	movw	r24, r10
    8a02:	0e 94 03 44 	call	0x8806	; 0x8806 <ReadEeprom>
    8a06:	88 2e       	mov	r8, r24
    8a08:	c5 01       	movw	r24, r10
    8a0a:	01 96       	adiw	r24, 0x01	; 1
    8a0c:	0e 94 03 44 	call	0x8806	; 0x8806 <ReadEeprom>
    8a10:	28 2f       	mov	r18, r24
    8a12:	30 e0       	ldi	r19, 0x00	; 0
    8a14:	32 2f       	mov	r19, r18
    8a16:	22 27       	eor	r18, r18
    8a18:	28 0d       	add	r18, r8
    8a1a:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8a1c:	2e 15       	cp	r18, r14
    8a1e:	3f 05       	cpc	r19, r15
    8a20:	29 f4       	brne	.+10     	; 0x8a2c <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    8a22:	f8 01       	movw	r30, r16
    8a24:	b1 82       	std	Z+1, r11	; 0x01
    8a26:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8a28:	d0 e0       	ldi	r29, 0x00	; 0
    8a2a:	0b c0       	rjmp	.+22     	; 0x8a42 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8a2c:	2f 3f       	cpi	r18, 0xFF	; 255
    8a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a30:	41 f4       	brne	.+16     	; 0x8a42 <EepromBlockExists+0x78>
    8a32:	91 10       	cpse	r9, r1
    8a34:	06 c0       	rjmp	.+12     	; 0x8a42 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8a36:	c1 14       	cp	r12, r1
    8a38:	d1 04       	cpc	r13, r1
    8a3a:	11 f0       	breq	.+4      	; 0x8a40 <EepromBlockExists+0x76>
    8a3c:	f6 01       	movw	r30, r12
    8a3e:	c0 83       	st	Z, r28
    8a40:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    8a42:	cf 5f       	subi	r28, 0xFF	; 255
    8a44:	f0 e2       	ldi	r31, 0x20	; 32
    8a46:	af 0e       	add	r10, r31
    8a48:	b1 1c       	adc	r11, r1
    8a4a:	c0 34       	cpi	r28, 0x40	; 64
    8a4c:	c9 f6       	brne	.-78     	; 0x8a00 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8a4e:	8d 2f       	mov	r24, r29
    8a50:	01 c0       	rjmp	.+2      	; 0x8a54 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8a52:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    8a54:	df 91       	pop	r29
    8a56:	cf 91       	pop	r28
    8a58:	1f 91       	pop	r17
    8a5a:	0f 91       	pop	r16
    8a5c:	ff 90       	pop	r15
    8a5e:	ef 90       	pop	r14
    8a60:	df 90       	pop	r13
    8a62:	cf 90       	pop	r12
    8a64:	bf 90       	pop	r11
    8a66:	af 90       	pop	r10
    8a68:	9f 90       	pop	r9
    8a6a:	8f 90       	pop	r8
    8a6c:	08 95       	ret

00008a6e <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8a6e:	ef 92       	push	r14
    8a70:	ff 92       	push	r15
    8a72:	0f 93       	push	r16
    8a74:	1f 93       	push	r17
    8a76:	cf 93       	push	r28
    8a78:	df 93       	push	r29
    8a7a:	00 d0       	rcall	.+0      	; 0x8a7c <EepromWriteBlock+0xe>
    8a7c:	1f 92       	push	r1
    8a7e:	cd b7       	in	r28, 0x3d	; 61
    8a80:	de b7       	in	r29, 0x3e	; 62
    8a82:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8a84:	1a 82       	std	Y+2, r1	; 0x02
    8a86:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8a88:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8a8a:	ae 01       	movw	r20, r28
    8a8c:	4d 5f       	subi	r20, 0xFD	; 253
    8a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    8a90:	be 01       	movw	r22, r28
    8a92:	6f 5f       	subi	r22, 0xFF	; 255
    8a94:	7f 4f       	sbci	r23, 0xFF	; 255
    8a96:	fc 01       	movw	r30, r24
    8a98:	80 81       	ld	r24, Z
    8a9a:	91 81       	ldd	r25, Z+1	; 0x01
    8a9c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8aa0:	88 23       	and	r24, r24
    8aa2:	11 f0       	breq	.+4      	; 0x8aa8 <EepromWriteBlock+0x3a>
    8aa4:	83 30       	cpi	r24, 0x03	; 3
    8aa6:	19 f5       	brne	.+70     	; 0x8aee <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8aa8:	89 81       	ldd	r24, Y+1	; 0x01
    8aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    8aac:	89 2b       	or	r24, r25
    8aae:	49 f4       	brne	.+18     	; 0x8ac2 <EepromWriteBlock+0x54>
    8ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    8ab2:	88 23       	and	r24, r24
    8ab4:	d9 f0       	breq	.+54     	; 0x8aec <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8ab6:	f0 e2       	ldi	r31, 0x20	; 32
    8ab8:	8f 9f       	mul	r24, r31
    8aba:	c0 01       	movw	r24, r0
    8abc:	11 24       	eor	r1, r1
    8abe:	9a 83       	std	Y+2, r25	; 0x02
    8ac0:	89 83       	std	Y+1, r24	; 0x01
    8ac2:	78 01       	movw	r14, r16
    8ac4:	20 e2       	ldi	r18, 0x20	; 32
    8ac6:	e2 0e       	add	r14, r18
    8ac8:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8aca:	f8 01       	movw	r30, r16
    8acc:	61 91       	ld	r22, Z+
    8ace:	8f 01       	movw	r16, r30
    8ad0:	89 81       	ldd	r24, Y+1	; 0x01
    8ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ad4:	9c 01       	movw	r18, r24
    8ad6:	2f 5f       	subi	r18, 0xFF	; 255
    8ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    8ada:	3a 83       	std	Y+2, r19	; 0x02
    8adc:	29 83       	std	Y+1, r18	; 0x01
    8ade:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8ae2:	0e 15       	cp	r16, r14
    8ae4:	1f 05       	cpc	r17, r15
    8ae6:	89 f7       	brne	.-30     	; 0x8aca <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8ae8:	80 e0       	ldi	r24, 0x00	; 0
    8aea:	01 c0       	rjmp	.+2      	; 0x8aee <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8aec:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8aee:	0f 90       	pop	r0
    8af0:	0f 90       	pop	r0
    8af2:	0f 90       	pop	r0
    8af4:	df 91       	pop	r29
    8af6:	cf 91       	pop	r28
    8af8:	1f 91       	pop	r17
    8afa:	0f 91       	pop	r16
    8afc:	ff 90       	pop	r15
    8afe:	ef 90       	pop	r14
    8b00:	08 95       	ret

00008b02 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    8b02:	cf 92       	push	r12
    8b04:	df 92       	push	r13
    8b06:	ff 92       	push	r15
    8b08:	0f 93       	push	r16
    8b0a:	1f 93       	push	r17
    8b0c:	cf 93       	push	r28
    8b0e:	df 93       	push	r29
    8b10:	00 d0       	rcall	.+0      	; 0x8b12 <EepromReadBlock+0x10>
    8b12:	cd b7       	in	r28, 0x3d	; 61
    8b14:	de b7       	in	r29, 0x3e	; 62
    8b16:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8b18:	40 e0       	ldi	r20, 0x00	; 0
    8b1a:	50 e0       	ldi	r21, 0x00	; 0
    8b1c:	be 01       	movw	r22, r28
    8b1e:	6f 5f       	subi	r22, 0xFF	; 255
    8b20:	7f 4f       	sbci	r23, 0xFF	; 255
    8b22:	0e 94 e5 44 	call	0x89ca	; 0x89ca <EepromBlockExists>
    8b26:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8b28:	81 11       	cpse	r24, r1
    8b2a:	13 c0       	rjmp	.+38     	; 0x8b52 <EepromReadBlock+0x50>
    8b2c:	68 01       	movw	r12, r16
    8b2e:	80 e2       	ldi	r24, 0x20	; 32
    8b30:	c8 0e       	add	r12, r24
    8b32:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8b34:	89 81       	ldd	r24, Y+1	; 0x01
    8b36:	9a 81       	ldd	r25, Y+2	; 0x02
    8b38:	9c 01       	movw	r18, r24
    8b3a:	2f 5f       	subi	r18, 0xFF	; 255
    8b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b3e:	3a 83       	std	Y+2, r19	; 0x02
    8b40:	29 83       	std	Y+1, r18	; 0x01
    8b42:	0e 94 03 44 	call	0x8806	; 0x8806 <ReadEeprom>
    8b46:	f8 01       	movw	r30, r16
    8b48:	81 93       	st	Z+, r24
    8b4a:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8b4c:	ec 15       	cp	r30, r12
    8b4e:	fd 05       	cpc	r31, r13
    8b50:	89 f7       	brne	.-30     	; 0x8b34 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8b52:	8f 2d       	mov	r24, r15
    8b54:	0f 90       	pop	r0
    8b56:	0f 90       	pop	r0
    8b58:	df 91       	pop	r29
    8b5a:	cf 91       	pop	r28
    8b5c:	1f 91       	pop	r17
    8b5e:	0f 91       	pop	r16
    8b60:	ff 90       	pop	r15
    8b62:	df 90       	pop	r13
    8b64:	cf 90       	pop	r12
    8b66:	08 95       	ret

00008b68 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8b68:	fc 01       	movw	r30, r24
    8b6a:	67 87       	std	Z+15, r22	; 0x0f
    8b6c:	08 95       	ret

00008b6e <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8b6e:	e2 e0       	ldi	r30, 0x02	; 2
    8b70:	fb e0       	ldi	r31, 0x0B	; 11
    8b72:	81 e0       	ldi	r24, 0x01	; 1
    8b74:	91 e0       	ldi	r25, 0x01	; 1
    8b76:	95 8b       	std	Z+21, r25	; 0x15
    8b78:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8b7a:	63 8b       	std	Z+19, r22	; 0x13
    8b7c:	08 95       	ret

00008b7e <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8b7e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8b80:	90 81       	ld	r25, Z
    8b82:	9f 75       	andi	r25, 0x5F	; 95
    8b84:	90 83       	st	Z, r25
    8b86:	08 95       	ret

00008b88 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8b88:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8b8a:	90 81       	ld	r25, Z
    8b8c:	90 64       	ori	r25, 0x40	; 64
    8b8e:	90 83       	st	Z, r25
    8b90:	08 95       	ret

00008b92 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8b92:	fc 01       	movw	r30, r24
    8b94:	66 87       	std	Z+14, r22	; 0x0e
    8b96:	08 95       	ret

00008b98 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8b98:	fc 01       	movw	r30, r24
    8b9a:	62 87       	std	Z+10, r22	; 0x0a
    8b9c:	08 95       	ret

00008b9e <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8b9e:	fc 01       	movw	r30, r24
    8ba0:	63 87       	std	Z+11, r22	; 0x0b
    8ba2:	08 95       	ret

00008ba4 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8ba4:	cf 93       	push	r28
    8ba6:	df 93       	push	r29
    8ba8:	ec 01       	movw	r28, r24
    8baa:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8bac:	29 81       	ldd	r18, Y+1	; 0x01
    8bae:	30 e0       	ldi	r19, 0x00	; 0
    8bb0:	f9 01       	movw	r30, r18
    8bb2:	ee 0f       	add	r30, r30
    8bb4:	ff 1f       	adc	r31, r31
    8bb6:	e8 5f       	subi	r30, 0xF8	; 248
    8bb8:	fa 46       	sbci	r31, 0x6A	; 106
    8bba:	65 91       	lpm	r22, Z+
    8bbc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8bbe:	f9 01       	movw	r30, r18
    8bc0:	e4 0f       	add	r30, r20
    8bc2:	f1 1d       	adc	r31, r1
    8bc4:	47 fd       	sbrc	r20, 7
    8bc6:	fa 95       	dec	r31
    8bc8:	ee 0f       	add	r30, r30
    8bca:	ff 1f       	adc	r31, r31
    8bcc:	e8 5f       	subi	r30, 0xF8	; 248
    8bce:	fa 46       	sbci	r31, 0x6A	; 106
    8bd0:	85 91       	lpm	r24, Z+
    8bd2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8bd4:	86 1b       	sub	r24, r22
    8bd6:	97 0b       	sbc	r25, r23
    8bd8:	68 85       	ldd	r22, Y+8	; 0x08
    8bda:	70 e0       	ldi	r23, 0x00	; 0
    8bdc:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
	if(delta==0)delta++;
    8be0:	61 15       	cp	r22, r1
    8be2:	71 05       	cpc	r23, r1
    8be4:	11 f4       	brne	.+4      	; 0x8bea <PatchCommand11+0x46>
    8be6:	61 e0       	ldi	r22, 0x01	; 1
    8be8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8bea:	ea 81       	ldd	r30, Y+2	; 0x02
    8bec:	86 e0       	ldi	r24, 0x06	; 6
    8bee:	e8 9f       	mul	r30, r24
    8bf0:	f0 01       	movw	r30, r0
    8bf2:	11 24       	eor	r1, r1
    8bf4:	ee 5f       	subi	r30, 0xFE	; 254
    8bf6:	f4 4f       	sbci	r31, 0xF4	; 244
    8bf8:	81 81       	ldd	r24, Z+1	; 0x01
    8bfa:	92 81       	ldd	r25, Z+2	; 0x02
    8bfc:	86 0f       	add	r24, r22
    8bfe:	97 1f       	adc	r25, r23
    8c00:	92 83       	std	Z+2, r25	; 0x02
    8c02:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8c04:	7e 83       	std	Y+6, r23	; 0x06
    8c06:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8c08:	88 81       	ld	r24, Y
    8c0a:	88 60       	ori	r24, 0x08	; 8
    8c0c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8c0e:	89 81       	ldd	r24, Y+1	; 0x01
    8c10:	48 0f       	add	r20, r24
    8c12:	4f 83       	std	Y+7, r20	; 0x07
}
    8c14:	df 91       	pop	r29
    8c16:	cf 91       	pop	r28
    8c18:	08 95       	ret

00008c1a <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8c1a:	fc 01       	movw	r30, r24
    8c1c:	60 87       	std	Z+8, r22	; 0x08
    8c1e:	08 95       	ret

00008c20 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8c20:	fc 01       	movw	r30, r24
    8c22:	64 83       	std	Z+4, r22	; 0x04
    8c24:	08 95       	ret

00008c26 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8c26:	fc 01       	movw	r30, r24
    8c28:	82 81       	ldd	r24, Z+2	; 0x02
    8c2a:	0c 94 f7 49 	jmp	0x93ee	; 0x93ee <SetMixerWave>

00008c2e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8c2e:	fc 01       	movw	r30, r24
	track->note+=param;
    8c30:	91 81       	ldd	r25, Z+1	; 0x01
    8c32:	69 0f       	add	r22, r25
    8c34:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8c36:	82 81       	ldd	r24, Z+2	; 0x02
    8c38:	0c 94 e0 49 	jmp	0x93c0	; 0x93c0 <SetMixerNote>

00008c3c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8c3c:	fc 01       	movw	r30, r24
	track->note-=param;
    8c3e:	91 81       	ldd	r25, Z+1	; 0x01
    8c40:	96 1b       	sub	r25, r22
    8c42:	69 2f       	mov	r22, r25
    8c44:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8c46:	82 81       	ldd	r24, Z+2	; 0x02
    8c48:	0c 94 e0 49 	jmp	0x93c0	; 0x93c0 <SetMixerNote>

00008c4c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8c4c:	1f 93       	push	r17
    8c4e:	cf 93       	push	r28
    8c50:	df 93       	push	r29
    8c52:	ec 01       	movw	r28, r24
    8c54:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8c56:	8a 81       	ldd	r24, Y+2	; 0x02
    8c58:	0e 94 e0 49 	call	0x93c0	; 0x93c0 <SetMixerNote>
	track->note=param;
    8c5c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8c5e:	88 81       	ld	r24, Y
    8c60:	87 7f       	andi	r24, 0xF7	; 247
    8c62:	88 83       	st	Y, r24
}
    8c64:	df 91       	pop	r29
    8c66:	cf 91       	pop	r28
    8c68:	1f 91       	pop	r17
    8c6a:	08 95       	ret

00008c6c <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8c6c:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8c6e:	14 96       	adiw	r26, 0x04	; 4
    8c70:	8c 91       	ld	r24, X
    8c72:	14 97       	sbiw	r26, 0x04	; 4
    8c74:	88 23       	and	r24, r24
    8c76:	19 f1       	breq	.+70     	; 0x8cbe <PatchCommand14+0x52>
    8c78:	55 96       	adiw	r26, 0x15	; 21
    8c7a:	2d 91       	ld	r18, X+
    8c7c:	3c 91       	ld	r19, X
    8c7e:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8c80:	66 23       	and	r22, r22
    8c82:	79 f0       	breq	.+30     	; 0x8ca2 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8c84:	77 27       	eor	r23, r23
    8c86:	67 fd       	sbrc	r22, 7
    8c88:	70 95       	com	r23
    8c8a:	6f 5f       	subi	r22, 0xFF	; 255
    8c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    8c8e:	ab 01       	movw	r20, r22
    8c90:	44 0f       	add	r20, r20
    8c92:	55 1f       	adc	r21, r21
    8c94:	64 0f       	add	r22, r20
    8c96:	75 1f       	adc	r23, r21
    8c98:	26 1b       	sub	r18, r22
    8c9a:	37 0b       	sbc	r19, r23
    8c9c:	09 c0       	rjmp	.+18     	; 0x8cb0 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8c9e:	ef 3f       	cpi	r30, 0xFF	; 255
    8ca0:	39 f0       	breq	.+14     	; 0x8cb0 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8ca2:	23 50       	subi	r18, 0x03	; 3
    8ca4:	31 09       	sbc	r19, r1
    8ca6:	f9 01       	movw	r30, r18
    8ca8:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8caa:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8cac:	ed 30       	cpi	r30, 0x0D	; 13
    8cae:	b9 f7       	brne	.-18     	; 0x8c9e <PatchCommand14+0x32>
    8cb0:	56 96       	adiw	r26, 0x16	; 22
    8cb2:	3c 93       	st	X, r19
    8cb4:	2e 93       	st	-X, r18
    8cb6:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8cb8:	81 50       	subi	r24, 0x01	; 1
    8cba:	14 96       	adiw	r26, 0x04	; 4
    8cbc:	8c 93       	st	X, r24
    8cbe:	08 95       	ret

00008cc0 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8cc0:	90 93 b8 0b 	sts	0x0BB8, r25
    8cc4:	80 93 b7 0b 	sts	0x0BB7, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8cc8:	8f e6       	ldi	r24, 0x6F	; 111
    8cca:	80 93 ba 0b 	sts	0x0BBA, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8cce:	10 92 00 0b 	sts	0x0B00, r1
    8cd2:	e2 e5       	ldi	r30, 0x52	; 82
    8cd4:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8cd6:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8cd8:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8cda:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8cdc:	28 e1       	ldi	r18, 0x18	; 24
    8cde:	df 01       	movw	r26, r30
    8ce0:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8ce2:	8c 93       	st	X, r24
    8ce4:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8ce6:	9c 93       	st	X, r25
    8ce8:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8cea:	1c 92       	st	X, r1
    8cec:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8cee:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8cf0:	10 82       	st	Z, r1
    8cf2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8cf4:	2c 93       	st	X, r18
    8cf6:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8cf8:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8cfa:	8f 5f       	subi	r24, 0xFF	; 255
    8cfc:	77 96       	adiw	r30, 0x17	; 23
    8cfe:	85 30       	cpi	r24, 0x05	; 5
    8d00:	71 f7       	brne	.-36     	; 0x8cde <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8d02:	08 95       	ret

00008d04 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8d04:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8d06:	ed 91       	ld	r30, X+
    8d08:	fc 91       	ld	r31, X
    8d0a:	11 97       	sbiw	r26, 0x01	; 1
    8d0c:	9f 01       	movw	r18, r30
    8d0e:	2f 5f       	subi	r18, 0xFF	; 255
    8d10:	3f 4f       	sbci	r19, 0xFF	; 255
    8d12:	11 96       	adiw	r26, 0x01	; 1
    8d14:	3c 93       	st	X, r19
    8d16:	2e 93       	st	-X, r18
    8d18:	e4 91       	lpm	r30, Z
    8d1a:	e7 fd       	sbrc	r30, 7
    8d1c:	03 c0       	rjmp	.+6      	; 0x8d24 <ReadVarLen+0x20>
    8d1e:	8e 2f       	mov	r24, r30
    8d20:	90 e0       	ldi	r25, 0x00	; 0
    8d22:	08 95       	ret
    {
       value &= 0x7F;
    8d24:	ef 77       	andi	r30, 0x7F	; 127
    8d26:	8e 2f       	mov	r24, r30
    8d28:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8d2a:	96 95       	lsr	r25
    8d2c:	98 2f       	mov	r25, r24
    8d2e:	88 27       	eor	r24, r24
    8d30:	97 95       	ror	r25
    8d32:	87 95       	ror	r24
    8d34:	2f 5f       	subi	r18, 0xFF	; 255
    8d36:	3f 4f       	sbci	r19, 0xFF	; 255
    8d38:	f9 01       	movw	r30, r18
    8d3a:	31 97       	sbiw	r30, 0x01	; 1
    8d3c:	e4 91       	lpm	r30, Z
    8d3e:	4e 2f       	mov	r20, r30
    8d40:	4f 77       	andi	r20, 0x7F	; 127
    8d42:	84 0f       	add	r24, r20
    8d44:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8d46:	e7 fd       	sbrc	r30, 7
    8d48:	f0 cf       	rjmp	.-32     	; 0x8d2a <ReadVarLen+0x26>
    8d4a:	2d 93       	st	X+, r18
    8d4c:	3c 93       	st	X, r19
    }


    return value;
}
    8d4e:	08 95       	ret

00008d50 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8d50:	ef 92       	push	r14
    8d52:	ff 92       	push	r15
    8d54:	0f 93       	push	r16
    8d56:	1f 93       	push	r17
    8d58:	cf 93       	push	r28
    8d5a:	df 93       	push	r29
    8d5c:	1f 92       	push	r1
    8d5e:	cd b7       	in	r28, 0x3d	; 61
    8d60:	de b7       	in	r29, 0x3e	; 62
    8d62:	7c 01       	movw	r14, r24
    8d64:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8d66:	fc 01       	movw	r30, r24
    8d68:	80 81       	ld	r24, Z
    8d6a:	08 2f       	mov	r16, r24
    8d6c:	00 1f       	adc	r16, r16
    8d6e:	00 27       	eor	r16, r16
    8d70:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8d72:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8d74:	9f ef       	ldi	r25, 0xFF	; 255
    8d76:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8d78:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8d7a:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8d7c:	87 7b       	andi	r24, 0xB7	; 183
    8d7e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8d80:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8d82:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8d84:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8d86:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8d88:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8d8a:	82 81       	ldd	r24, Z+2	; 0x02
    8d8c:	83 30       	cpi	r24, 0x03	; 3
    8d8e:	69 f4       	brne	.+26     	; 0x8daa <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8d90:	01 11       	cpse	r16, r1
    8d92:	01 c0       	rjmp	.+2      	; 0x8d96 <TriggerCommon+0x46>
    8d94:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8d96:	81 e0       	ldi	r24, 0x01	; 1
    8d98:	91 e0       	ldi	r25, 0x01	; 1
    8d9a:	90 93 17 0b 	sts	0x0B17, r25
    8d9e:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8da2:	81 e0       	ldi	r24, 0x01	; 1
    8da4:	80 93 15 0b 	sts	0x0B15, r24
    8da8:	39 c0       	rjmp	.+114    	; 0x8e1c <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8daa:	84 30       	cpi	r24, 0x04	; 4
    8dac:	69 f5       	brne	.+90     	; 0x8e08 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8dae:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8db2:	80 91 b7 0b 	lds	r24, 0x0BB7
    8db6:	90 91 b8 0b 	lds	r25, 0x0BB8
    8dba:	f9 e0       	ldi	r31, 0x09	; 9
    8dbc:	6f 9f       	mul	r22, r31
    8dbe:	80 0d       	add	r24, r0
    8dc0:	91 1d       	adc	r25, r1
    8dc2:	11 24       	eor	r1, r1
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	31 96       	adiw	r30, 0x01	; 1
    8dc8:	a5 91       	lpm	r26, Z+
    8dca:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8dcc:	b0 93 1f 0b 	sts	0x0B1F, r27
    8dd0:	a0 93 1e 0b 	sts	0x0B1E, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8dd4:	ac 01       	movw	r20, r24
    8dd6:	49 5f       	subi	r20, 0xF9	; 249
    8dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dda:	fa 01       	movw	r30, r20
    8ddc:	65 91       	lpm	r22, Z+
    8dde:	74 91       	lpm	r23, Z
    8de0:	05 96       	adiw	r24, 0x05	; 5
    8de2:	fc 01       	movw	r30, r24
    8de4:	85 91       	lpm	r24, Z+
    8de6:	94 91       	lpm	r25, Z
    8de8:	68 1b       	sub	r22, r24
    8dea:	79 0b       	sbc	r23, r25
    8dec:	70 93 21 0b 	sts	0x0B21, r23
    8df0:	60 93 20 0b 	sts	0x0B20, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8df4:	fa 01       	movw	r30, r20
    8df6:	85 91       	lpm	r24, Z+
    8df8:	94 91       	lpm	r25, Z
    8dfa:	a8 0f       	add	r26, r24
    8dfc:	b9 1f       	adc	r27, r25
    8dfe:	b0 93 23 0b 	sts	0x0B23, r27
    8e02:	a0 93 22 0b 	sts	0x0B22, r26
    8e06:	05 c0       	rjmp	.+10     	; 0x8e12 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8e08:	60 e0       	ldi	r22, 0x00	; 0
    8e0a:	29 83       	std	Y+1, r18	; 0x01
    8e0c:	0e 94 f7 49 	call	0x93ee	; 0x93ee <SetMixerWave>
			SetMixerNote(track->channel,note);
    8e10:	29 81       	ldd	r18, Y+1	; 0x01
    8e12:	62 2f       	mov	r22, r18
    8e14:	f7 01       	movw	r30, r14
    8e16:	82 81       	ldd	r24, Z+2	; 0x02
    8e18:	0e 94 e0 49 	call	0x93c0	; 0x93c0 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8e1c:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8e1e:	00 23       	and	r16, r16
    8e20:	11 f0       	breq	.+4      	; 0x8e26 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8e22:	11 8b       	std	Z+17, r17	; 0x11
    8e24:	01 c0       	rjmp	.+2      	; 0x8e28 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8e26:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8e28:	e0 91 b7 0b 	lds	r30, 0x0BB7
    8e2c:	f0 91 b8 0b 	lds	r31, 0x0BB8
    8e30:	39 e0       	ldi	r19, 0x09	; 9
    8e32:	13 9f       	mul	r17, r19
    8e34:	e0 0d       	add	r30, r0
    8e36:	f1 1d       	adc	r31, r1
    8e38:	11 24       	eor	r1, r1
    8e3a:	33 96       	adiw	r30, 0x03	; 3
    8e3c:	85 91       	lpm	r24, Z+
    8e3e:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8e40:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8e42:	00 97       	sbiw	r24, 0x00	; 0
    8e44:	19 f4       	brne	.+6      	; 0x8e4c <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8e46:	16 8a       	std	Z+22, r1	; 0x16
    8e48:	15 8a       	std	Z+21, r1	; 0x15
    8e4a:	08 c0       	rjmp	.+16     	; 0x8e5c <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8e4c:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8e4e:	fc 01       	movw	r30, r24
    8e50:	24 91       	lpm	r18, Z
    8e52:	f7 01       	movw	r30, r14
    8e54:	22 8b       	std	Z+18, r18	; 0x12
    8e56:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8e58:	96 8b       	std	Z+22, r25	; 0x16
    8e5a:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8e5c:	0f 90       	pop	r0
    8e5e:	df 91       	pop	r29
    8e60:	cf 91       	pop	r28
    8e62:	1f 91       	pop	r17
    8e64:	0f 91       	pop	r16
    8e66:	ff 90       	pop	r15
    8e68:	ef 90       	pop	r14
    8e6a:	08 95       	ret

00008e6c <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8e6c:	cf 93       	push	r28
    8e6e:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8e70:	e0 91 b7 0b 	lds	r30, 0x0BB7
    8e74:	f0 91 b8 0b 	lds	r31, 0x0BB8
    8e78:	99 e0       	ldi	r25, 0x09	; 9
    8e7a:	89 9f       	mul	r24, r25
    8e7c:	e0 0d       	add	r30, r0
    8e7e:	f1 1d       	adc	r31, r1
    8e80:	11 24       	eor	r1, r1
    8e82:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8e84:	e1 30       	cpi	r30, 0x01	; 1
    8e86:	e9 f0       	breq	.+58     	; 0x8ec2 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8e88:	e2 30       	cpi	r30, 0x02	; 2
    8e8a:	e9 f0       	breq	.+58     	; 0x8ec6 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8e8c:	20 91 59 0b 	lds	r18, 0x0B59
    8e90:	27 ff       	sbrs	r18, 7
    8e92:	1d c0       	rjmp	.+58     	; 0x8ece <TriggerFx+0x62>
    8e94:	20 91 6a 0b 	lds	r18, 0x0B6A
    8e98:	28 13       	cpse	r18, r24
    8e9a:	02 c0       	rjmp	.+4      	; 0x8ea0 <TriggerFx+0x34>
    8e9c:	41 11       	cpse	r20, r1
    8e9e:	17 c0       	rjmp	.+46     	; 0x8ece <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8ea0:	20 91 70 0b 	lds	r18, 0x0B70
    8ea4:	27 ff       	sbrs	r18, 7
    8ea6:	11 c0       	rjmp	.+34     	; 0x8eca <TriggerFx+0x5e>
    8ea8:	20 91 81 0b 	lds	r18, 0x0B81
    8eac:	28 13       	cpse	r18, r24
    8eae:	02 c0       	rjmp	.+4      	; 0x8eb4 <TriggerFx+0x48>
    8eb0:	41 11       	cpse	r20, r1
    8eb2:	0b c0       	rjmp	.+22     	; 0x8eca <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8eb4:	20 91 6d 0b 	lds	r18, 0x0B6D
    8eb8:	90 91 84 0b 	lds	r25, 0x0B84
    8ebc:	92 17       	cp	r25, r18
    8ebe:	28 f4       	brcc	.+10     	; 0x8eca <TriggerFx+0x5e>
    8ec0:	06 c0       	rjmp	.+12     	; 0x8ece <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8ec2:	c3 e0       	ldi	r28, 0x03	; 3
    8ec4:	05 c0       	rjmp	.+10     	; 0x8ed0 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8ec6:	c4 e0       	ldi	r28, 0x04	; 4
    8ec8:	03 c0       	rjmp	.+6      	; 0x8ed0 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8eca:	c2 e0       	ldi	r28, 0x02	; 2
    8ecc:	01 c0       	rjmp	.+2      	; 0x8ed0 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8ece:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8ed0:	97 e1       	ldi	r25, 0x17	; 23
    8ed2:	c9 9f       	mul	r28, r25
    8ed4:	e0 01       	movw	r28, r0
    8ed6:	11 24       	eor	r1, r1
    8ed8:	ce 5b       	subi	r28, 0xBE	; 190
    8eda:	d4 4f       	sbci	r29, 0xF4	; 244
    8edc:	90 e8       	ldi	r25, 0x80	; 128
    8ede:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8ee0:	1e 8a       	std	Y+22, r1	; 0x16
    8ee2:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8ee4:	20 e5       	ldi	r18, 0x50	; 80
    8ee6:	46 2f       	mov	r20, r22
    8ee8:	68 2f       	mov	r22, r24
    8eea:	ce 01       	movw	r24, r28
    8eec:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8ef0:	88 81       	ld	r24, Y
    8ef2:	80 62       	ori	r24, 0x20	; 32
    8ef4:	88 83       	st	Y, r24
}
    8ef6:	df 91       	pop	r29
    8ef8:	cf 91       	pop	r28
    8efa:	08 95       	ret

00008efc <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8efc:	cf 93       	push	r28
    8efe:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8f00:	a8 2f       	mov	r26, r24
    8f02:	b0 e0       	ldi	r27, 0x00	; 0
    8f04:	97 e1       	ldi	r25, 0x17	; 23
    8f06:	89 9f       	mul	r24, r25
    8f08:	f0 01       	movw	r30, r0
    8f0a:	11 24       	eor	r1, r1
    8f0c:	ee 5b       	subi	r30, 0xBE	; 190
    8f0e:	f4 4f       	sbci	r31, 0xF4	; 244
    8f10:	80 81       	ld	r24, Z
    8f12:	85 ff       	sbrs	r24, 5
    8f14:	02 c0       	rjmp	.+4      	; 0x8f1a <TriggerNote+0x1e>
    8f16:	87 fd       	sbrc	r24, 7
    8f18:	2e c0       	rjmp	.+92     	; 0x8f76 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8f1a:	21 11       	cpse	r18, r1
    8f1c:	18 c0       	rjmp	.+48     	; 0x8f4e <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8f1e:	97 e1       	ldi	r25, 0x17	; 23
    8f20:	9a 9f       	mul	r25, r26
    8f22:	f0 01       	movw	r30, r0
    8f24:	9b 9f       	mul	r25, r27
    8f26:	f0 0d       	add	r31, r0
    8f28:	11 24       	eor	r1, r1
    8f2a:	ee 5b       	subi	r30, 0xBE	; 190
    8f2c:	f4 4f       	sbci	r31, 0xF4	; 244
    8f2e:	97 85       	ldd	r25, Z+15	; 0x0f
    8f30:	91 11       	cpse	r25, r1
    8f32:	02 c0       	rjmp	.+4      	; 0x8f38 <TriggerNote+0x3c>
    8f34:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8f36:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8f38:	97 e1       	ldi	r25, 0x17	; 23
    8f3a:	9a 9f       	mul	r25, r26
    8f3c:	f0 01       	movw	r30, r0
    8f3e:	9b 9f       	mul	r25, r27
    8f40:	f0 0d       	add	r31, r0
    8f42:	11 24       	eor	r1, r1
    8f44:	ee 5b       	subi	r30, 0xBE	; 190
    8f46:	f4 4f       	sbci	r31, 0xF4	; 244
    8f48:	8f 7b       	andi	r24, 0xBF	; 191
    8f4a:	80 83       	st	Z, r24
    8f4c:	14 c0       	rjmp	.+40     	; 0x8f76 <TriggerNote+0x7a>
    8f4e:	82 2f       	mov	r24, r18
    8f50:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8f52:	97 e1       	ldi	r25, 0x17	; 23
    8f54:	9a 9f       	mul	r25, r26
    8f56:	e0 01       	movw	r28, r0
    8f58:	9b 9f       	mul	r25, r27
    8f5a:	d0 0d       	add	r29, r0
    8f5c:	11 24       	eor	r1, r1
    8f5e:	ce 5b       	subi	r28, 0xBE	; 190
    8f60:	d4 4f       	sbci	r29, 0xF4	; 244
    8f62:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8f64:	1e 8a       	std	Y+22, r1	; 0x16
    8f66:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8f68:	48 2f       	mov	r20, r24
    8f6a:	ce 01       	movw	r24, r28
    8f6c:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8f70:	88 81       	ld	r24, Y
    8f72:	80 62       	ori	r24, 0x20	; 32
    8f74:	88 83       	st	Y, r24
		}

	}
}
    8f76:	df 91       	pop	r29
    8f78:	cf 91       	pop	r28
    8f7a:	08 95       	ret

00008f7c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8f7c:	6f 92       	push	r6
    8f7e:	7f 92       	push	r7
    8f80:	8f 92       	push	r8
    8f82:	9f 92       	push	r9
    8f84:	af 92       	push	r10
    8f86:	bf 92       	push	r11
    8f88:	cf 92       	push	r12
    8f8a:	df 92       	push	r13
    8f8c:	ef 92       	push	r14
    8f8e:	ff 92       	push	r15
    8f90:	0f 93       	push	r16
    8f92:	1f 93       	push	r17
    8f94:	cf 93       	push	r28
    8f96:	df 93       	push	r29
    8f98:	c2 e4       	ldi	r28, 0x42	; 66
    8f9a:	db e0       	ldi	r29, 0x0B	; 11
    8f9c:	02 e0       	ldi	r16, 0x02	; 2
    8f9e:	1b e0       	ldi	r17, 0x0B	; 11
    8fa0:	d8 01       	movw	r26, r16
    8fa2:	9e 01       	movw	r18, r28
    8fa4:	40 e0       	ldi	r20, 0x00	; 0
    8fa6:	50 e0       	ldi	r21, 0x00	; 0
    8fa8:	ca 01       	movw	r24, r20
    8faa:	8e 5b       	subi	r24, 0xBE	; 190
    8fac:	94 4f       	sbci	r25, 0xF4	; 244
    8fae:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8fb0:	fc 01       	movw	r30, r24
    8fb2:	87 85       	ldd	r24, Z+15	; 0x0f
    8fb4:	88 23       	and	r24, r24
    8fb6:	91 f0       	breq	.+36     	; 0x8fdc <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8fb8:	66 85       	ldd	r22, Z+14	; 0x0e
    8fba:	99 27       	eor	r25, r25
    8fbc:	87 fd       	sbrc	r24, 7
    8fbe:	90 95       	com	r25
    8fc0:	86 0f       	add	r24, r22
    8fc2:	91 1d       	adc	r25, r1
    8fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    8fc6:	91 05       	cpc	r25, r1
    8fc8:	19 f0       	breq	.+6      	; 0x8fd0 <ProcessMusic+0x54>
    8fca:	14 f0       	brlt	.+4      	; 0x8fd0 <ProcessMusic+0x54>
    8fcc:	8f ef       	ldi	r24, 0xFF	; 255
    8fce:	90 e0       	ldi	r25, 0x00	; 0
    8fd0:	97 ff       	sbrs	r25, 7
    8fd2:	02 c0       	rjmp	.+4      	; 0x8fd8 <ProcessMusic+0x5c>
    8fd4:	80 e0       	ldi	r24, 0x00	; 0
    8fd6:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8fd8:	f6 01       	movw	r30, r12
    8fda:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8fdc:	f9 01       	movw	r30, r18
    8fde:	f0 80       	ld	r15, Z
    8fe0:	f3 fe       	sbrs	r15, 3
    8fe2:	2a c0       	rjmp	.+84     	; 0x9038 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8fe4:	65 81       	ldd	r22, Z+5	; 0x05
    8fe6:	76 81       	ldd	r23, Z+6	; 0x06
    8fe8:	11 96       	adiw	r26, 0x01	; 1
    8fea:	8d 91       	ld	r24, X+
    8fec:	9c 91       	ld	r25, X
    8fee:	12 97       	sbiw	r26, 0x02	; 2
    8ff0:	86 0f       	add	r24, r22
    8ff2:	97 1f       	adc	r25, r23
    8ff4:	12 96       	adiw	r26, 0x02	; 2
    8ff6:	9c 93       	st	X, r25
    8ff8:	8e 93       	st	-X, r24
    8ffa:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8ffc:	f6 01       	movw	r30, r12
    8ffe:	e7 80       	ldd	r14, Z+7	; 0x07
    9000:	ee 2d       	mov	r30, r14
    9002:	f0 e0       	ldi	r31, 0x00	; 0
    9004:	ee 0f       	add	r30, r30
    9006:	ff 1f       	adc	r31, r31
    9008:	e8 5f       	subi	r30, 0xF8	; 248
    900a:	fa 46       	sbci	r31, 0x6A	; 106
    900c:	c5 90       	lpm	r12, Z+
    900e:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9010:	16 16       	cp	r1, r22
    9012:	17 06       	cpc	r1, r23
    9014:	24 f4       	brge	.+8      	; 0x901e <ProcessMusic+0xa2>
    9016:	8c 15       	cp	r24, r12
    9018:	9d 05       	cpc	r25, r13
    901a:	30 f4       	brcc	.+12     	; 0x9028 <ProcessMusic+0xac>
    901c:	0d c0       	rjmp	.+26     	; 0x9038 <ProcessMusic+0xbc>
    901e:	67 2b       	or	r22, r23
    9020:	59 f0       	breq	.+22     	; 0x9038 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    9022:	c8 16       	cp	r12, r24
    9024:	d9 06       	cpc	r13, r25
    9026:	40 f0       	brcs	.+16     	; 0x9038 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    9028:	12 96       	adiw	r26, 0x02	; 2
    902a:	dc 92       	st	X, r13
    902c:	ce 92       	st	-X, r12
    902e:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9030:	8f 2d       	mov	r24, r15
    9032:	87 7f       	andi	r24, 0xF7	; 247
    9034:	f9 01       	movw	r30, r18
    9036:	80 83       	st	Z, r24
    9038:	49 5e       	subi	r20, 0xE9	; 233
    903a:	5f 4f       	sbci	r21, 0xFF	; 255
    903c:	29 5e       	subi	r18, 0xE9	; 233
    903e:	3f 4f       	sbci	r19, 0xFF	; 255
    9040:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9042:	43 37       	cpi	r20, 0x73	; 115
    9044:	51 05       	cpc	r21, r1
    9046:	09 f0       	breq	.+2      	; 0x904a <ProcessMusic+0xce>
    9048:	af cf       	rjmp	.-162    	; 0x8fa8 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    904a:	80 91 00 0b 	lds	r24, 0x0B00
    904e:	88 23       	and	r24, r24
    9050:	09 f4       	brne	.+2      	; 0x9054 <ProcessMusic+0xd8>
    9052:	cc c0       	rjmp	.+408    	; 0x91ec <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    9054:	57 e1       	ldi	r21, 0x17	; 23
    9056:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    9058:	80 91 b5 0b 	lds	r24, 0x0BB5
    905c:	90 91 b6 0b 	lds	r25, 0x0BB6
    9060:	20 91 bb 0b 	lds	r18, 0x0BBB
    9064:	30 91 bc 0b 	lds	r19, 0x0BBC
    9068:	82 17       	cp	r24, r18
    906a:	93 07       	cpc	r25, r19
    906c:	09 f0       	breq	.+2      	; 0x9070 <ProcessMusic+0xf4>
    906e:	b9 c0       	rjmp	.+370    	; 0x91e2 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    9070:	20 91 be 0b 	lds	r18, 0x0BBE
    9074:	30 91 bf 0b 	lds	r19, 0x0BBF
    9078:	b9 01       	movw	r22, r18
    907a:	6f 5f       	subi	r22, 0xFF	; 255
    907c:	7f 4f       	sbci	r23, 0xFF	; 255
    907e:	70 93 bf 0b 	sts	0x0BBF, r23
    9082:	60 93 be 0b 	sts	0x0BBE, r22
    9086:	f9 01       	movw	r30, r18
    9088:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    908a:	4f 3f       	cpi	r20, 0xFF	; 255
    908c:	79 f5       	brne	.+94     	; 0x90ec <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    908e:	a9 01       	movw	r20, r18
    9090:	4e 5f       	subi	r20, 0xFE	; 254
    9092:	5f 4f       	sbci	r21, 0xFF	; 255
    9094:	50 93 bf 0b 	sts	0x0BBF, r21
    9098:	40 93 be 0b 	sts	0x0BBE, r20
    909c:	fb 01       	movw	r30, r22
    909e:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    90a0:	6f 32       	cpi	r22, 0x2F	; 47
    90a2:	19 f4       	brne	.+6      	; 0x90aa <ProcessMusic+0x12e>
						playSong=false;
    90a4:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    90a8:	9c c0       	rjmp	.+312    	; 0x91e2 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    90aa:	66 30       	cpi	r22, 0x06	; 6
    90ac:	09 f0       	breq	.+2      	; 0x90b0 <ProcessMusic+0x134>
    90ae:	8c c0       	rjmp	.+280    	; 0x91c8 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    90b0:	fa 01       	movw	r30, r20
    90b2:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    90b4:	c9 01       	movw	r24, r18
    90b6:	04 96       	adiw	r24, 0x04	; 4
    90b8:	90 93 bf 0b 	sts	0x0BBF, r25
    90bc:	80 93 be 0b 	sts	0x0BBE, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    90c0:	f9 01       	movw	r30, r18
    90c2:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    90c4:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    90c6:	e3 35       	cpi	r30, 0x53	; 83
    90c8:	29 f4       	brne	.+10     	; 0x90d4 <ProcessMusic+0x158>
							loopStart=songPos;
    90ca:	90 93 c1 0b 	sts	0x0BC1, r25
    90ce:	80 93 c0 0b 	sts	0x0BC0, r24
    90d2:	7a c0       	rjmp	.+244    	; 0x91c8 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    90d4:	e5 34       	cpi	r30, 0x45	; 69
    90d6:	09 f0       	breq	.+2      	; 0x90da <ProcessMusic+0x15e>
    90d8:	77 c0       	rjmp	.+238    	; 0x91c8 <ProcessMusic+0x24c>
							songPos=loopStart;
    90da:	80 91 c0 0b 	lds	r24, 0x0BC0
    90de:	90 91 c1 0b 	lds	r25, 0x0BC1
    90e2:	90 93 bf 0b 	sts	0x0BBF, r25
    90e6:	80 93 be 0b 	sts	0x0BBE, r24
    90ea:	6e c0       	rjmp	.+220    	; 0x91c8 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    90ec:	47 fd       	sbrc	r20, 7
    90ee:	40 93 b9 0b 	sts	0x0BB9, r20
					channel=lastStatus&0x0f;
    90f2:	90 91 b9 0b 	lds	r25, 0x0BB9
    90f6:	89 2f       	mov	r24, r25
    90f8:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    90fa:	47 ff       	sbrs	r20, 7
    90fc:	08 c0       	rjmp	.+16     	; 0x910e <ProcessMusic+0x192>
    90fe:	2e 5f       	subi	r18, 0xFE	; 254
    9100:	3f 4f       	sbci	r19, 0xFF	; 255
    9102:	30 93 bf 0b 	sts	0x0BBF, r19
    9106:	20 93 be 0b 	sts	0x0BBE, r18
    910a:	fb 01       	movw	r30, r22
    910c:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    910e:	90 7f       	andi	r25, 0xF0	; 240
    9110:	90 3b       	cpi	r25, 0xB0	; 176
    9112:	e1 f0       	breq	.+56     	; 0x914c <ProcessMusic+0x1d0>
    9114:	90 3c       	cpi	r25, 0xC0	; 192
    9116:	09 f4       	brne	.+2      	; 0x911a <ProcessMusic+0x19e>
    9118:	51 c0       	rjmp	.+162    	; 0x91bc <ProcessMusic+0x240>
    911a:	90 39       	cpi	r25, 0x90	; 144
    911c:	09 f0       	breq	.+2      	; 0x9120 <ProcessMusic+0x1a4>
    911e:	54 c0       	rjmp	.+168    	; 0x91c8 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    9120:	e0 91 be 0b 	lds	r30, 0x0BBE
    9124:	f0 91 bf 0b 	lds	r31, 0x0BBF
    9128:	9f 01       	movw	r18, r30
    912a:	2f 5f       	subi	r18, 0xFF	; 255
    912c:	3f 4f       	sbci	r19, 0xFF	; 255
    912e:	30 93 bf 0b 	sts	0x0BBF, r19
    9132:	20 93 be 0b 	sts	0x0BBE, r18
    9136:	24 91       	lpm	r18, Z
    9138:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    913a:	f8 9e       	mul	r15, r24
    913c:	f0 01       	movw	r30, r0
    913e:	11 24       	eor	r1, r1
    9140:	ee 5b       	subi	r30, 0xBE	; 190
    9142:	f4 4f       	sbci	r31, 0xF4	; 244
    9144:	60 89       	ldd	r22, Z+16	; 0x10
    9146:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
    914a:	3e c0       	rjmp	.+124    	; 0x91c8 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    914c:	e0 91 be 0b 	lds	r30, 0x0BBE
    9150:	f0 91 bf 0b 	lds	r31, 0x0BBF
    9154:	9f 01       	movw	r18, r30
    9156:	2f 5f       	subi	r18, 0xFF	; 255
    9158:	3f 4f       	sbci	r19, 0xFF	; 255
    915a:	30 93 bf 0b 	sts	0x0BBF, r19
    915e:	20 93 be 0b 	sts	0x0BBE, r18
    9162:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    9164:	47 30       	cpi	r20, 0x07	; 7
    9166:	49 f4       	brne	.+18     	; 0x917a <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    9168:	f8 9e       	mul	r15, r24
    916a:	d0 01       	movw	r26, r0
    916c:	11 24       	eor	r1, r1
    916e:	ae 5b       	subi	r26, 0xBE	; 190
    9170:	b4 4f       	sbci	r27, 0xF4	; 244
    9172:	ee 0f       	add	r30, r30
    9174:	1c 96       	adiw	r26, 0x0c	; 12
    9176:	ec 93       	st	X, r30
    9178:	27 c0       	rjmp	.+78     	; 0x91c8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    917a:	4b 30       	cpi	r20, 0x0B	; 11
    917c:	49 f4       	brne	.+18     	; 0x9190 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    917e:	f8 9e       	mul	r15, r24
    9180:	d0 01       	movw	r26, r0
    9182:	11 24       	eor	r1, r1
    9184:	ae 5b       	subi	r26, 0xBE	; 190
    9186:	b4 4f       	sbci	r27, 0xF4	; 244
    9188:	ee 0f       	add	r30, r30
    918a:	13 96       	adiw	r26, 0x03	; 3
    918c:	ec 93       	st	X, r30
    918e:	1c c0       	rjmp	.+56     	; 0x91c8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    9190:	4c 35       	cpi	r20, 0x5C	; 92
    9192:	49 f4       	brne	.+18     	; 0x91a6 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    9194:	f8 9e       	mul	r15, r24
    9196:	d0 01       	movw	r26, r0
    9198:	11 24       	eor	r1, r1
    919a:	ae 5b       	subi	r26, 0xBE	; 190
    919c:	b4 4f       	sbci	r27, 0xF4	; 244
    919e:	ee 0f       	add	r30, r30
    91a0:	1a 96       	adiw	r26, 0x0a	; 10
    91a2:	ec 93       	st	X, r30
    91a4:	11 c0       	rjmp	.+34     	; 0x91c8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    91a6:	44 36       	cpi	r20, 0x64	; 100
    91a8:	79 f4       	brne	.+30     	; 0x91c8 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    91aa:	f8 9e       	mul	r15, r24
    91ac:	d0 01       	movw	r26, r0
    91ae:	11 24       	eor	r1, r1
    91b0:	ae 5b       	subi	r26, 0xBE	; 190
    91b2:	b4 4f       	sbci	r27, 0xF4	; 244
    91b4:	ee 0f       	add	r30, r30
    91b6:	1b 96       	adiw	r26, 0x0b	; 11
    91b8:	ec 93       	st	X, r30
    91ba:	06 c0       	rjmp	.+12     	; 0x91c8 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    91bc:	f8 9e       	mul	r15, r24
    91be:	f0 01       	movw	r30, r0
    91c0:	11 24       	eor	r1, r1
    91c2:	ee 5b       	subi	r30, 0xBE	; 190
    91c4:	f4 4f       	sbci	r31, 0xF4	; 244
    91c6:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    91c8:	8e eb       	ldi	r24, 0xBE	; 190
    91ca:	9b e0       	ldi	r25, 0x0B	; 11
    91cc:	0e 94 82 46 	call	0x8d04	; 0x8d04 <ReadVarLen>
    91d0:	90 93 bc 0b 	sts	0x0BBC, r25
    91d4:	80 93 bb 0b 	sts	0x0BBB, r24
				currDeltaTime=0;
    91d8:	10 92 b6 0b 	sts	0x0BB6, r1
    91dc:	10 92 b5 0b 	sts	0x0BB5, r1
    91e0:	3b cf       	rjmp	.-394    	; 0x9058 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    91e2:	01 96       	adiw	r24, 0x01	; 1
    91e4:	90 93 b6 0b 	sts	0x0BB6, r25
    91e8:	80 93 b5 0b 	sts	0x0BB5, r24
    91ec:	9b e4       	ldi	r25, 0x4B	; 75
    91ee:	a9 2e       	mov	r10, r25
    91f0:	9b e0       	ldi	r25, 0x0B	; 11
    91f2:	b9 2e       	mov	r11, r25
    91f4:	25 e5       	ldi	r18, 0x55	; 85
    91f6:	c2 2e       	mov	r12, r18
    91f8:	2b e0       	ldi	r18, 0x0B	; 11
    91fa:	d2 2e       	mov	r13, r18
    91fc:	36 e5       	ldi	r19, 0x56	; 86
    91fe:	e3 2e       	mov	r14, r19
    9200:	3b e0       	ldi	r19, 0x0B	; 11
    9202:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9204:	66 24       	eor	r6, r6
    9206:	6a 94       	dec	r6
    9208:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    920a:	88 81       	ld	r24, Y
    920c:	85 ff       	sbrs	r24, 5
    920e:	42 c0       	rjmp	.+132    	; 0x9294 <ProcessMusic+0x318>
    9210:	2d 89       	ldd	r18, Y+21	; 0x15
    9212:	3e 89       	ldd	r19, Y+22	; 0x16
    9214:	23 2b       	or	r18, r19
    9216:	09 f4       	brne	.+2      	; 0x921a <ProcessMusic+0x29e>
    9218:	3d c0       	rjmp	.+122    	; 0x9294 <ProcessMusic+0x318>
    921a:	86 fd       	sbrc	r24, 6
    921c:	3b c0       	rjmp	.+118    	; 0x9294 <ProcessMusic+0x318>
    921e:	47 01       	movw	r8, r14
    9220:	f2 e0       	ldi	r31, 0x02	; 2
    9222:	8f 1a       	sub	r8, r31
    9224:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    9226:	d6 01       	movw	r26, r12
    9228:	9c 91       	ld	r25, X
    922a:	f4 01       	movw	r30, r8
    922c:	80 81       	ld	r24, Z
    922e:	98 13       	cpse	r25, r24
    9230:	2e c0       	rjmp	.+92     	; 0x928e <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    9232:	ed 89       	ldd	r30, Y+21	; 0x15
    9234:	fe 89       	ldd	r31, Y+22	; 0x16
    9236:	bf 01       	movw	r22, r30
    9238:	6f 5f       	subi	r22, 0xFF	; 255
    923a:	7f 4f       	sbci	r23, 0xFF	; 255
    923c:	7e 8b       	std	Y+22, r23	; 0x16
    923e:	6d 8b       	std	Y+21, r22	; 0x15
    9240:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    9242:	8f 3f       	cpi	r24, 0xFF	; 255
    9244:	31 f4       	brne	.+12     	; 0x9252 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9246:	88 81       	ld	r24, Y
    9248:	8f 77       	andi	r24, 0x7F	; 127
    924a:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    924c:	1e 8a       	std	Y+22, r1	; 0x16
    924e:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    9250:	1e c0       	rjmp	.+60     	; 0x928e <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    9252:	9f 01       	movw	r18, r30
    9254:	2e 5f       	subi	r18, 0xFE	; 254
    9256:	3f 4f       	sbci	r19, 0xFF	; 255
    9258:	3e 8b       	std	Y+22, r19	; 0x16
    925a:	2d 8b       	std	Y+21, r18	; 0x15
    925c:	fb 01       	movw	r30, r22
    925e:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    9260:	e8 2f       	mov	r30, r24
    9262:	f0 e0       	ldi	r31, 0x00	; 0
    9264:	ee 0f       	add	r30, r30
    9266:	ff 1f       	adc	r31, r31
    9268:	e2 54       	subi	r30, 0x42	; 66
    926a:	ff 4f       	sbci	r31, 0xFF	; 255
    926c:	25 91       	lpm	r18, Z+
    926e:	34 91       	lpm	r19, Z
    9270:	ce 01       	movw	r24, r28
    9272:	f9 01       	movw	r30, r18
    9274:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    9276:	ed 89       	ldd	r30, Y+21	; 0x15
    9278:	fe 89       	ldd	r31, Y+22	; 0x16
    927a:	cf 01       	movw	r24, r30
    927c:	01 96       	adiw	r24, 0x01	; 1
    927e:	9e 8b       	std	Y+22, r25	; 0x16
    9280:	8d 8b       	std	Y+21, r24	; 0x15
    9282:	e4 91       	lpm	r30, Z
    9284:	d4 01       	movw	r26, r8
    9286:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    9288:	f6 01       	movw	r30, r12
    928a:	10 82       	st	Z, r1
    928c:	cc cf       	rjmp	.-104    	; 0x9226 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    928e:	9f 5f       	subi	r25, 0xFF	; 255
    9290:	d6 01       	movw	r26, r12
    9292:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    9294:	98 81       	ld	r25, Y
    9296:	95 ff       	sbrs	r25, 5
    9298:	6c c0       	rjmp	.+216    	; 0x9372 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    929a:	f7 01       	movw	r30, r14
    929c:	80 81       	ld	r24, Z
    929e:	8f 3f       	cpi	r24, 0xFF	; 255
    92a0:	11 f0       	breq	.+4      	; 0x92a6 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    92a2:	8f 5f       	subi	r24, 0xFF	; 255
    92a4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    92a6:	97 fd       	sbrc	r25, 7
    92a8:	04 c0       	rjmp	.+8      	; 0x92b2 <ProcessMusic+0x336>
    92aa:	f7 01       	movw	r30, r14
    92ac:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    92ae:	90 81       	ld	r25, Z
    92b0:	01 c0       	rjmp	.+2      	; 0x92b4 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    92b2:	9f ef       	ldi	r25, 0xFF	; 255
    92b4:	f7 01       	movw	r30, r14
    92b6:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    92b8:	80 81       	ld	r24, Z
    92ba:	88 23       	and	r24, r24
    92bc:	09 f4       	brne	.+2      	; 0x92c0 <ProcessMusic+0x344>
    92be:	4e c0       	rjmp	.+156    	; 0x935c <ProcessMusic+0x3e0>
    92c0:	31 96       	adiw	r30, 0x01	; 1
    92c2:	50 81       	ld	r21, Z
    92c4:	55 23       	and	r21, r21
    92c6:	09 f4       	brne	.+2      	; 0x92ca <ProcessMusic+0x34e>
    92c8:	49 c0       	rjmp	.+146    	; 0x935c <ProcessMusic+0x3e0>
    92ca:	99 23       	and	r25, r25
    92cc:	09 f4       	brne	.+2      	; 0x92d0 <ProcessMusic+0x354>
    92ce:	46 c0       	rjmp	.+140    	; 0x935c <ProcessMusic+0x3e0>
    92d0:	40 91 ba 0b 	lds	r20, 0x0BBA
    92d4:	44 23       	and	r20, r20
    92d6:	09 f4       	brne	.+2      	; 0x92da <ProcessMusic+0x35e>
    92d8:	41 c0       	rjmp	.+130    	; 0x935c <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    92da:	89 9f       	mul	r24, r25
    92dc:	c0 01       	movw	r24, r0
    92de:	11 24       	eor	r1, r1
    92e0:	93 95       	inc	r25
				uVol>>=8;
    92e2:	89 2f       	mov	r24, r25
    92e4:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    92e6:	58 9f       	mul	r21, r24
    92e8:	90 01       	movw	r18, r0
    92ea:	59 9f       	mul	r21, r25
    92ec:	30 0d       	add	r19, r0
    92ee:	11 24       	eor	r1, r1
    92f0:	c9 01       	movw	r24, r18
    92f2:	93 95       	inc	r25
				uVol>>=8;
    92f4:	89 2f       	mov	r24, r25
    92f6:	99 27       	eor	r25, r25
    92f8:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    92fa:	50 81       	ld	r21, Z
    92fc:	58 9f       	mul	r21, r24
    92fe:	90 01       	movw	r18, r0
    9300:	59 9f       	mul	r21, r25
    9302:	30 0d       	add	r19, r0
    9304:	11 24       	eor	r1, r1
    9306:	33 95       	inc	r19
					uVol>>=8;
    9308:	23 2f       	mov	r18, r19
    930a:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    930c:	42 9f       	mul	r20, r18
    930e:	c0 01       	movw	r24, r0
    9310:	43 9f       	mul	r20, r19
    9312:	90 0d       	add	r25, r0
    9314:	11 24       	eor	r1, r1
    9316:	93 95       	inc	r25
				uVol>>=8;
    9318:	89 2f       	mov	r24, r25
    931a:	99 27       	eor	r25, r25
    931c:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    931e:	20 81       	ld	r18, Z
    9320:	22 23       	and	r18, r18
    9322:	f1 f0       	breq	.+60     	; 0x9360 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9324:	d5 01       	movw	r26, r10
    9326:	ec 91       	ld	r30, X
    9328:	f0 e0       	ldi	r31, 0x00	; 0
    932a:	e0 50       	subi	r30, 0x00	; 0
    932c:	f9 46       	sbci	r31, 0x69	; 105
    932e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9330:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9332:	2e 9f       	mul	r18, r30
    9334:	f0 01       	movw	r30, r0
    9336:	11 24       	eor	r1, r1
    9338:	f3 95       	inc	r31
					tVol>>=8;
    933a:	ef 2f       	mov	r30, r31
    933c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    933e:	a3 01       	movw	r20, r6
    9340:	4e 1b       	sub	r20, r30
    9342:	5f 0b       	sbc	r21, r31
    9344:	48 9f       	mul	r20, r24
    9346:	90 01       	movw	r18, r0
    9348:	49 9f       	mul	r20, r25
    934a:	30 0d       	add	r19, r0
    934c:	58 9f       	mul	r21, r24
    934e:	30 0d       	add	r19, r0
    9350:	11 24       	eor	r1, r1
    9352:	c9 01       	movw	r24, r18
    9354:	93 95       	inc	r25
					uVol>>=8;
    9356:	89 2f       	mov	r24, r25
    9358:	99 27       	eor	r25, r25
    935a:	02 c0       	rjmp	.+4      	; 0x9360 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    935c:	80 e0       	ldi	r24, 0x00	; 0
    935e:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9360:	f5 01       	movw	r30, r10
    9362:	30 81       	ld	r19, Z
    9364:	f7 01       	movw	r30, r14
    9366:	39 97       	sbiw	r30, 0x09	; 9
    9368:	20 81       	ld	r18, Z
    936a:	23 0f       	add	r18, r19
    936c:	d5 01       	movw	r26, r10
    936e:	2c 93       	st	X, r18
    9370:	02 c0       	rjmp	.+4      	; 0x9376 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    9372:	80 e0       	ldi	r24, 0x00	; 0
    9374:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9376:	f8 01       	movw	r30, r16
    9378:	80 83       	st	Z, r24
    937a:	67 96       	adiw	r28, 0x17	; 23
    937c:	0a 5f       	subi	r16, 0xFA	; 250
    937e:	1f 4f       	sbci	r17, 0xFF	; 255
    9380:	f7 e1       	ldi	r31, 0x17	; 23
    9382:	af 0e       	add	r10, r31
    9384:	b1 1c       	adc	r11, r1
    9386:	87 e1       	ldi	r24, 0x17	; 23
    9388:	c8 0e       	add	r12, r24
    938a:	d1 1c       	adc	r13, r1
    938c:	97 e1       	ldi	r25, 0x17	; 23
    938e:	e9 0e       	add	r14, r25
    9390:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9392:	ab e0       	ldi	r26, 0x0B	; 11
    9394:	c5 3b       	cpi	r28, 0xB5	; 181
    9396:	da 07       	cpc	r29, r26
    9398:	09 f0       	breq	.+2      	; 0x939c <ProcessMusic+0x420>
    939a:	37 cf       	rjmp	.-402    	; 0x920a <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    939c:	df 91       	pop	r29
    939e:	cf 91       	pop	r28
    93a0:	1f 91       	pop	r17
    93a2:	0f 91       	pop	r16
    93a4:	ff 90       	pop	r15
    93a6:	ef 90       	pop	r14
    93a8:	df 90       	pop	r13
    93aa:	cf 90       	pop	r12
    93ac:	bf 90       	pop	r11
    93ae:	af 90       	pop	r10
    93b0:	9f 90       	pop	r9
    93b2:	8f 90       	pop	r8
    93b4:	7f 90       	pop	r7
    93b6:	6f 90       	pop	r6
    93b8:	08 95       	ret

000093ba <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    93ba:	80 93 ba 0b 	sts	0x0BBA, r24
    93be:	08 95       	ret

000093c0 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    93c0:	99 27       	eor	r25, r25
	clr r23
    93c2:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    93c4:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    93c6:	09 f4       	brne	.+2      	; 0x93ca <set_note_waves>
		ret
    93c8:	08 95       	ret

000093ca <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    93ca:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    93cc:	f5 e9       	ldi	r31, 0x95	; 149
	lsl r22
    93ce:	66 0f       	add	r22, r22
	rol r23
    93d0:	77 1f       	adc	r23, r23
	add ZL,r22
    93d2:	e6 0f       	add	r30, r22
	adc ZH,r23	
    93d4:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    93d6:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    93d8:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    93da:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    93dc:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    93de:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    93e0:	28 9f       	mul	r18, r24
	add ZL,r0
    93e2:	e0 0d       	add	r30, r0
	adc ZH,r1
    93e4:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    93e6:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    93e8:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    93ea:	11 24       	eor	r1, r1
	

	ret
    93ec:	08 95       	ret

000093ee <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    93ee:	99 27       	eor	r25, r25
	clr r23
    93f0:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    93f2:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    93f4:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    93f6:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    93f8:	28 9f       	mul	r18, r24
	add ZL,r0
    93fa:	e0 0d       	add	r30, r0
	adc ZH,r1
    93fc:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    93fe:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9400:	31 f4       	brne	.+12     	; 0x940e <smw1>
	lds r22,tr4_params
    9402:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    9406:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    9408:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    940c:	0b c0       	rjmp	.+22     	; 0x9424 <esmw>

0000940e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    940e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9410:	31 f4       	brne	.+12     	; 0x941e <smw2>
	lds r22,tr4_params
    9412:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    9416:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9418:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    941c:	03 c0       	rjmp	.+6      	; 0x9424 <esmw>

0000941e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    941e:	77 e9       	ldi	r23, 0x97	; 151
	add r23,r22
    9420:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9422:	75 83       	std	Z+5, r23	; 0x05

00009424 <esmw>:

esmw:
	clr r1	
    9424:	11 24       	eor	r1, r1
	ret
    9426:	08 95       	ret
	...

00009500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9502:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9506:	08 95       	ret

00009508 <steptable>:
    9508:	22 00       	.word	0x0022	; ????
    950a:	24 00       	.word	0x0024	; ????
    950c:	26 00       	.word	0x0026	; ????
    950e:	28 00       	.word	0x0028	; ????
    9510:	2b 00       	.word	0x002b	; ????
    9512:	2d 00       	.word	0x002d	; ????
    9514:	30 00       	.word	0x0030	; ????
    9516:	33 00       	.word	0x0033	; ????
    9518:	36 00       	.word	0x0036	; ????
    951a:	39 00       	.word	0x0039	; ????
    951c:	3d 00       	.word	0x003d	; ????
    951e:	40 00       	.word	0x0040	; ????
    9520:	44 00       	.word	0x0044	; ????
    9522:	48 00       	.word	0x0048	; ????
    9524:	4c 00       	.word	0x004c	; ????
    9526:	51 00       	.word	0x0051	; ????
    9528:	56 00       	.word	0x0056	; ????
    952a:	5b 00       	.word	0x005b	; ????
    952c:	60 00       	.word	0x0060	; ????
    952e:	66 00       	.word	0x0066	; ????
    9530:	6c 00       	.word	0x006c	; ????
    9532:	73 00       	.word	0x0073	; ????
    9534:	79 00       	.word	0x0079	; ????
    9536:	81 00       	.word	0x0081	; ????
    9538:	88 00       	.word	0x0088	; ????
    953a:	90 00       	.word	0x0090	; ????
    953c:	99 00       	.word	0x0099	; ????
    953e:	a2 00       	.word	0x00a2	; ????
    9540:	ac 00       	.word	0x00ac	; ????
    9542:	b6 00       	.word	0x00b6	; ????
    9544:	c1 00       	.word	0x00c1	; ????
    9546:	cc 00       	.word	0x00cc	; ????
    9548:	d8 00       	.word	0x00d8	; ????
    954a:	e5 00       	.word	0x00e5	; ????
    954c:	f3 00       	.word	0x00f3	; ????
    954e:	01 01       	movw	r0, r2
    9550:	10 01       	movw	r2, r0
    9552:	21 01       	movw	r4, r2
    9554:	32 01       	movw	r6, r4
    9556:	44 01       	movw	r8, r8
    9558:	57 01       	movw	r10, r14
    955a:	6c 01       	movw	r12, r24
    955c:	81 01       	movw	r16, r2
    955e:	98 01       	movw	r18, r16
    9560:	b0 01       	movw	r22, r0
    9562:	ca 01       	movw	r24, r20
    9564:	e5 01       	movw	r28, r10
    9566:	02 02       	muls	r16, r18
    9568:	21 02       	muls	r18, r17
    956a:	41 02       	muls	r20, r17
    956c:	64 02       	muls	r22, r20
    956e:	88 02       	muls	r24, r24
    9570:	ae 02       	muls	r26, r30
    9572:	d7 02       	muls	r29, r23
    9574:	03 03       	mulsu	r16, r19
    9576:	30 03       	mulsu	r19, r16
    9578:	61 03       	mulsu	r22, r17
    957a:	94 03       	fmuls	r17, r20
    957c:	cb 03       	fmulsu	r20, r19
    957e:	05 04       	cpc	r0, r5
    9580:	42 04       	cpc	r4, r2
    9582:	83 04       	cpc	r8, r3
    9584:	c7 04       	cpc	r12, r7
    9586:	10 05       	cpc	r17, r0
    9588:	5d 05       	cpc	r21, r13
    958a:	af 05       	cpc	r26, r15
    958c:	05 06       	cpc	r0, r21
    958e:	61 06       	cpc	r6, r17
    9590:	c2 06       	cpc	r12, r18
    9592:	29 07       	cpc	r18, r25
    9594:	96 07       	cpc	r25, r22
    9596:	09 08       	sbc	r0, r9
    9598:	83 08       	sbc	r8, r3
    959a:	05 09       	sbc	r16, r5
    959c:	8e 09       	sbc	r24, r14
    959e:	20 0a       	sbc	r2, r16
    95a0:	ba 0a       	sbc	r11, r26
    95a2:	5d 0b       	sbc	r21, r29
    95a4:	0a 0c       	add	r0, r10
    95a6:	c1 0c       	add	r12, r1
    95a8:	84 0d       	add	r24, r4
    95aa:	51 0e       	add	r5, r17
    95ac:	2b 0f       	add	r18, r27
    95ae:	12 10       	cpse	r1, r2
    95b0:	07 11       	cpse	r16, r7
    95b2:	0a 12       	cpse	r0, r26
    95b4:	1d 13       	cpse	r17, r29
    95b6:	40 14       	cp	r4, r0
    95b8:	74 15       	cp	r23, r4
    95ba:	ba 16       	cp	r11, r26
    95bc:	14 18       	sub	r1, r4
    95be:	83 19       	sub	r24, r3
    95c0:	07 1b       	sub	r16, r23
    95c2:	a3 1c       	adc	r10, r3
    95c4:	57 1e       	adc	r5, r23
    95c6:	24 20       	and	r2, r4
    95c8:	0e 22       	and	r0, r30
    95ca:	14 24       	eor	r1, r4
    95cc:	39 26       	eor	r3, r25
    95ce:	7f 28       	or	r7, r15
    95d0:	e8 2a       	or	r14, r24
    95d2:	75 2d       	mov	r23, r5
    95d4:	29 30       	cpi	r18, 0x09	; 9
    95d6:	06 33       	cpi	r16, 0x36	; 54
    95d8:	0f 36       	cpi	r16, 0x6F	; 111
    95da:	45 39       	cpi	r20, 0x95	; 149
    95dc:	ad 3c       	cpi	r26, 0xCD	; 205
    95de:	49 40       	sbci	r20, 0x09	; 9
    95e0:	1b 44       	sbci	r17, 0x4B	; 75
    95e2:	28 48       	sbci	r18, 0x88	; 136
    95e4:	73 4c       	sbci	r23, 0xC3	; 195
    95e6:	fe 50       	subi	r31, 0x0E	; 14
    95e8:	cf 55       	subi	r28, 0x5F	; 95
    95ea:	ea 5a       	subi	r30, 0xAA	; 170
    95ec:	51 60       	ori	r21, 0x01	; 1
    95ee:	0c 66       	ori	r16, 0x6C	; 108
    95f0:	1d 6c       	ori	r17, 0xCD	; 205
    95f2:	8b 72       	andi	r24, 0x2B	; 43
    95f4:	5a 79       	andi	r21, 0x9A	; 154
    95f6:	92 80       	ldd	r9, Z+2	; 0x02
    95f8:	37 88       	ldd	r3, Z+23	; 0x17
    95fa:	50 90 e5 98 	lds	r5, 0x98E5
    95fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9600:	9f ab       	std	Y+55, r25	; 0x37
    9602:	d3 b5       	in	r29, 0x23	; 35
    9604:	a3 c0       	rjmp	.+326    	; 0x974c <waves+0x4c>
	...

00009700 <waves>:
    9700:	00 03       	mulsu	r16, r16
    9702:	06 09       	sbc	r16, r6
    9704:	0c 10       	cpse	r0, r12
    9706:	13 16       	cp	r1, r19
    9708:	19 1c       	adc	r1, r9
    970a:	1f 22       	and	r1, r31
    970c:	25 28       	or	r2, r5
    970e:	2b 2e       	mov	r2, r27
    9710:	31 33       	cpi	r19, 0x31	; 49
    9712:	36 39       	cpi	r19, 0x96	; 150
    9714:	3c 3f       	cpi	r19, 0xFC	; 252
    9716:	41 44       	sbci	r20, 0x41	; 65
    9718:	47 49       	sbci	r20, 0x97	; 151
    971a:	4c 4e       	sbci	r20, 0xEC	; 236
    971c:	51 53       	subi	r21, 0x31	; 49
    971e:	55 58       	subi	r21, 0x85	; 133
    9720:	5a 5c       	subi	r21, 0xCA	; 202
    9722:	5e 60       	ori	r21, 0x0E	; 14
    9724:	62 64       	ori	r22, 0x42	; 66
    9726:	66 68       	ori	r22, 0x86	; 134
    9728:	6a 6b       	ori	r22, 0xBA	; 186
    972a:	6d 6f       	ori	r22, 0xFD	; 253
    972c:	70 71       	andi	r23, 0x10	; 16
    972e:	73 74       	andi	r23, 0x43	; 67
    9730:	75 76       	andi	r23, 0x65	; 101
    9732:	78 79       	andi	r23, 0x98	; 152
    9734:	7a 7a       	andi	r23, 0xAA	; 170
    9736:	7b 7c       	andi	r23, 0xCB	; 203
    9738:	7d 7d       	andi	r23, 0xDD	; 221
    973a:	7e 7e       	andi	r23, 0xEE	; 238
    973c:	7e 7f       	andi	r23, 0xFE	; 254
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7e 7e       	andi	r23, 0xEE	; 238
    9746:	7e 7d       	andi	r23, 0xDE	; 222
    9748:	7d 7c       	andi	r23, 0xCD	; 205
    974a:	7b 7a       	andi	r23, 0xAB	; 171
    974c:	7a 79       	andi	r23, 0x9A	; 154
    974e:	78 76       	andi	r23, 0x68	; 104
    9750:	75 74       	andi	r23, 0x45	; 69
    9752:	73 71       	andi	r23, 0x13	; 19
    9754:	70 6f       	ori	r23, 0xF0	; 240
    9756:	6d 6b       	ori	r22, 0xBD	; 189
    9758:	6a 68       	ori	r22, 0x8A	; 138
    975a:	66 64       	ori	r22, 0x46	; 70
    975c:	62 60       	ori	r22, 0x02	; 2
    975e:	5e 5c       	subi	r21, 0xCE	; 206
    9760:	5a 58       	subi	r21, 0x8A	; 138
    9762:	55 53       	subi	r21, 0x35	; 53
    9764:	51 4e       	sbci	r21, 0xE1	; 225
    9766:	4c 49       	sbci	r20, 0x9C	; 156
    9768:	47 44       	sbci	r20, 0x47	; 71
    976a:	41 3f       	cpi	r20, 0xF1	; 241
    976c:	3c 39       	cpi	r19, 0x9C	; 156
    976e:	36 33       	cpi	r19, 0x36	; 54
    9770:	31 2e       	mov	r3, r17
    9772:	2b 28       	or	r2, r11
    9774:	25 22       	and	r2, r21
    9776:	1f 1c       	adc	r1, r15
    9778:	19 16       	cp	r1, r25
    977a:	13 10       	cpse	r1, r3
    977c:	0c 09       	sbc	r16, r12
    977e:	06 03       	mulsu	r16, r22
    9780:	00 fd       	sbrc	r16, 0
    9782:	fa f7       	brpl	.-2      	; 0x9782 <waves+0x82>
    9784:	f4 f0       	brlt	.+60     	; 0x97c2 <waves+0xc2>
    9786:	ed ea       	ldi	r30, 0xAD	; 173
    9788:	e7 e4       	ldi	r30, 0x47	; 71
    978a:	e1 de       	rcall	.-574    	; 0x954e <steptable+0x46>
    978c:	db d8       	rcall	.-3658   	; 0x8944 <ReadControllers+0xc>
    978e:	d5 d2       	rcall	.+1450   	; 0x9d3a <waves+0x63a>
    9790:	cf cd       	rjmp	.-1122   	; 0x9330 <ProcessMusic+0x3b4>
    9792:	ca c7       	rjmp	.+3988   	; 0xa728 <LBGetJoyPadState+0x6c>
    9794:	c4 c1       	rjmp	.+904    	; 0x9b1e <waves+0x41e>
    9796:	bf bc       	out	0x2f, r11	; 47
    9798:	b9 b7       	in	r27, 0x39	; 57
    979a:	b4 b2       	in	r11, 0x14	; 20
    979c:	af ad       	ldd	r26, Y+63	; 0x3f
    979e:	ab a8       	ldd	r10, Y+51	; 0x33
    97a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    97a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    97a4:	9e 9c       	mul	r9, r14
    97a6:	9a 98       	cbi	0x13, 2	; 19
    97a8:	96 95       	lsr	r25
    97aa:	93 91       	.word	0x9193	; ????
    97ac:	90 8f       	std	Z+24, r25	; 0x18
    97ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    97b0:	8b 8a       	std	Y+19, r8	; 0x13
    97b2:	88 87       	std	Y+8, r24	; 0x08
    97b4:	86 86       	std	Z+14, r8	; 0x0e
    97b6:	85 84       	ldd	r8, Z+13	; 0x0d
    97b8:	83 83       	std	Z+3, r24	; 0x03
    97ba:	82 82       	std	Z+2, r8	; 0x02
    97bc:	82 81       	ldd	r24, Z+2	; 0x02
    97be:	81 81       	ldd	r24, Z+1	; 0x01
    97c0:	81 81       	ldd	r24, Z+1	; 0x01
    97c2:	81 81       	ldd	r24, Z+1	; 0x01
    97c4:	82 82       	std	Z+2, r8	; 0x02
    97c6:	82 83       	std	Z+2, r24	; 0x02
    97c8:	83 84       	ldd	r8, Z+11	; 0x0b
    97ca:	85 86       	std	Z+13, r8	; 0x0d
    97cc:	86 87       	std	Z+14, r24	; 0x0e
    97ce:	88 8a       	std	Y+16, r8	; 0x10
    97d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    97d2:	8d 8f       	std	Y+29, r24	; 0x1d
    97d4:	90 91 93 95 	lds	r25, 0x9593
    97d8:	96 98       	cbi	0x12, 6	; 18
    97da:	9a 9c       	mul	r9, r10
    97dc:	9e a0       	ldd	r9, Y+38	; 0x26
    97de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    97e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    97e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    97e4:	af b2       	in	r10, 0x1f	; 31
    97e6:	b4 b7       	in	r27, 0x34	; 52
    97e8:	b9 bc       	out	0x29, r11	; 41
    97ea:	bf c1       	rjmp	.+894    	; 0x9b6a <waves+0x46a>
    97ec:	c4 c7       	rjmp	.+3976   	; 0xa776 <LBPrintStr+0xc>
    97ee:	ca cd       	rjmp	.-1132   	; 0x9384 <ProcessMusic+0x408>
    97f0:	cf d2       	rcall	.+1438   	; 0x9d90 <waves+0x690>
    97f2:	d5 d8       	rcall	.-3670   	; 0x899e <isEepromFormatted+0x2>
    97f4:	db de       	rcall	.-586    	; 0x95ac <steptable+0xa4>
    97f6:	e1 e4       	ldi	r30, 0x41	; 65
    97f8:	e7 ea       	ldi	r30, 0xA7	; 167
    97fa:	ed f0       	brhs	.+58     	; 0x9836 <waves+0x136>
    97fc:	f4 f7       	brge	.-4      	; 0x97fa <waves+0xfa>
    97fe:	fa fd       	.word	0xfdfa	; ????
    9800:	80 81       	ld	r24, Z
    9802:	82 83       	std	Z+2, r24	; 0x02
    9804:	84 85       	ldd	r24, Z+12	; 0x0c
    9806:	86 87       	std	Z+14, r24	; 0x0e
    9808:	88 89       	ldd	r24, Y+16	; 0x10
    980a:	8a 8b       	std	Y+18, r24	; 0x12
    980c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    980e:	8e 8f       	std	Y+30, r24	; 0x1e
    9810:	90 91 92 93 	lds	r25, 0x9392
    9814:	94 95       	.word	0x9594	; ????
    9816:	96 97       	sbiw	r26, 0x26	; 38
    9818:	98 99       	sbic	0x13, 0	; 19
    981a:	9a 9b       	sbis	0x13, 2	; 19
    981c:	9c 9d       	mul	r25, r12
    981e:	9e 9f       	mul	r25, r30
    9820:	a0 a1       	ldd	r26, Z+32	; 0x20
    9822:	a2 a3       	std	Z+34, r26	; 0x22
    9824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9826:	a6 a7       	std	Z+46, r26	; 0x2e
    9828:	a8 a9       	ldd	r26, Y+48	; 0x30
    982a:	aa ab       	std	Y+50, r26	; 0x32
    982c:	ac ad       	ldd	r26, Y+60	; 0x3c
    982e:	ae af       	std	Y+62, r26	; 0x3e
    9830:	b0 b1       	in	r27, 0x00	; 0
    9832:	b2 b3       	in	r27, 0x12	; 18
    9834:	b4 b5       	in	r27, 0x24	; 36
    9836:	b6 b7       	in	r27, 0x36	; 54
    9838:	b8 b9       	out	0x08, r27	; 8
    983a:	ba bb       	out	0x1a, r27	; 26
    983c:	bc bd       	out	0x2c, r27	; 44
    983e:	be bf       	out	0x3e, r27	; 62
    9840:	c0 c1       	rjmp	.+896    	; 0x9bc2 <waves+0x4c2>
    9842:	c2 c3       	rjmp	.+1924   	; 0x9fc8 <waves+0x8c8>
    9844:	c4 c5       	rjmp	.+2952   	; 0xa3ce <MoveSprite+0x24>
    9846:	c6 c7       	rjmp	.+3980   	; 0xa7d4 <LBCollides+0x8>
    9848:	c8 c9       	rjmp	.-3184   	; 0x8bda <PatchCommand11+0x36>
    984a:	ca cb       	rjmp	.-2156   	; 0x8fe0 <ProcessMusic+0x64>
    984c:	cc cd       	rjmp	.-1128   	; 0x93e6 <set_note_waves+0x1c>
    984e:	ce cf       	rjmp	.-100    	; 0x97ec <waves+0xec>
    9850:	d0 d1       	rcall	.+928    	; 0x9bf2 <waves+0x4f2>
    9852:	d2 d3       	rcall	.+1956   	; 0x9ff8 <waves+0x8f8>
    9854:	d4 d5       	rcall	.+2984   	; 0xa3fe <InitializeVideoMode+0x8>
    9856:	d6 d7       	rcall	.+4012   	; 0xa804 <LBCollides+0x38>
    9858:	d8 d9       	rcall	.-3152   	; 0x8c0a <PatchCommand11+0x66>
    985a:	da db       	rcall	.-2124   	; 0x9010 <ProcessMusic+0x94>
    985c:	dc dd       	rcall	.-1096   	; 0x9416 <smw1+0x8>
    985e:	de df       	rcall	.-68     	; 0x981c <waves+0x11c>
    9860:	e0 e1       	ldi	r30, 0x10	; 16
    9862:	e2 e3       	ldi	r30, 0x32	; 50
    9864:	e4 e5       	ldi	r30, 0x54	; 84
    9866:	e6 e7       	ldi	r30, 0x76	; 118
    9868:	e8 e9       	ldi	r30, 0x98	; 152
    986a:	ea eb       	ldi	r30, 0xBA	; 186
    986c:	ec ed       	ldi	r30, 0xDC	; 220
    986e:	ee ef       	ldi	r30, 0xFE	; 254
    9870:	f0 f1       	brcs	.+124    	; 0x98ee <waves+0x1ee>
    9872:	f2 f3       	brmi	.-4      	; 0x9870 <waves+0x170>
    9874:	f4 f5       	brge	.+124    	; 0x98f2 <waves+0x1f2>
    9876:	f6 f7       	brtc	.-4      	; 0x9874 <waves+0x174>
    9878:	f8 f9       	.word	0xf9f8	; ????
    987a:	fa fb       	.word	0xfbfa	; ????
    987c:	fc fd       	.word	0xfdfc	; ????
    987e:	fe ff       	.word	0xfffe	; ????
    9880:	00 01       	movw	r0, r0
    9882:	02 03       	mulsu	r16, r18
    9884:	04 05       	cpc	r16, r4
    9886:	06 07       	cpc	r16, r22
    9888:	08 09       	sbc	r16, r8
    988a:	0a 0b       	sbc	r16, r26
    988c:	0c 0d       	add	r16, r12
    988e:	0e 0f       	add	r16, r30
    9890:	10 11       	cpse	r17, r0
    9892:	12 13       	cpse	r17, r18
    9894:	14 15       	cp	r17, r4
    9896:	16 17       	cp	r17, r22
    9898:	18 19       	sub	r17, r8
    989a:	1a 1b       	sub	r17, r26
    989c:	1c 1d       	adc	r17, r12
    989e:	1e 1f       	adc	r17, r30
    98a0:	20 21       	and	r18, r0
    98a2:	22 23       	and	r18, r18
    98a4:	24 25       	eor	r18, r4
    98a6:	26 27       	eor	r18, r22
    98a8:	28 29       	or	r18, r8
    98aa:	2a 2b       	or	r18, r26
    98ac:	2c 2d       	mov	r18, r12
    98ae:	2e 2f       	mov	r18, r30
    98b0:	30 31       	cpi	r19, 0x10	; 16
    98b2:	32 33       	cpi	r19, 0x32	; 50
    98b4:	34 35       	cpi	r19, 0x54	; 84
    98b6:	36 37       	cpi	r19, 0x76	; 118
    98b8:	38 39       	cpi	r19, 0x98	; 152
    98ba:	3a 3b       	cpi	r19, 0xBA	; 186
    98bc:	3c 3d       	cpi	r19, 0xDC	; 220
    98be:	3e 3f       	cpi	r19, 0xFE	; 254
    98c0:	40 41       	sbci	r20, 0x10	; 16
    98c2:	42 43       	sbci	r20, 0x32	; 50
    98c4:	44 45       	sbci	r20, 0x54	; 84
    98c6:	46 47       	sbci	r20, 0x76	; 118
    98c8:	48 49       	sbci	r20, 0x98	; 152
    98ca:	4a 4b       	sbci	r20, 0xBA	; 186
    98cc:	4c 4d       	sbci	r20, 0xDC	; 220
    98ce:	4e 4f       	sbci	r20, 0xFE	; 254
    98d0:	50 51       	subi	r21, 0x10	; 16
    98d2:	52 53       	subi	r21, 0x32	; 50
    98d4:	54 55       	subi	r21, 0x54	; 84
    98d6:	56 57       	subi	r21, 0x76	; 118
    98d8:	58 59       	subi	r21, 0x98	; 152
    98da:	5a 5b       	subi	r21, 0xBA	; 186
    98dc:	5c 5d       	subi	r21, 0xDC	; 220
    98de:	5e 5f       	subi	r21, 0xFE	; 254
    98e0:	60 61       	ori	r22, 0x10	; 16
    98e2:	62 63       	ori	r22, 0x32	; 50
    98e4:	64 65       	ori	r22, 0x54	; 84
    98e6:	66 67       	ori	r22, 0x76	; 118
    98e8:	68 69       	ori	r22, 0x98	; 152
    98ea:	6a 6b       	ori	r22, 0xBA	; 186
    98ec:	6c 6d       	ori	r22, 0xDC	; 220
    98ee:	6e 6f       	ori	r22, 0xFE	; 254
    98f0:	70 71       	andi	r23, 0x10	; 16
    98f2:	72 73       	andi	r23, 0x32	; 50
    98f4:	74 75       	andi	r23, 0x54	; 84
    98f6:	76 77       	andi	r23, 0x76	; 118
    98f8:	78 79       	andi	r23, 0x98	; 152
    98fa:	7a 7b       	andi	r23, 0xBA	; 186
    98fc:	7c 7d       	andi	r23, 0xDC	; 220
    98fe:	7e 7f       	andi	r23, 0xFE	; 254
    9900:	00 02       	muls	r16, r16
    9902:	04 06       	cpc	r0, r20
    9904:	08 0a       	sbc	r0, r24
    9906:	0c 0e       	add	r0, r28
    9908:	10 12       	cpse	r1, r16
    990a:	14 16       	cp	r1, r20
    990c:	18 1a       	sub	r1, r24
    990e:	1c 1e       	adc	r1, r28
    9910:	20 22       	and	r2, r16
    9912:	24 26       	eor	r2, r20
    9914:	28 2a       	or	r2, r24
    9916:	2c 2e       	mov	r2, r28
    9918:	30 32       	cpi	r19, 0x20	; 32
    991a:	34 36       	cpi	r19, 0x64	; 100
    991c:	38 3a       	cpi	r19, 0xA8	; 168
    991e:	3c 3e       	cpi	r19, 0xEC	; 236
    9920:	40 42       	sbci	r20, 0x20	; 32
    9922:	44 46       	sbci	r20, 0x64	; 100
    9924:	48 4a       	sbci	r20, 0xA8	; 168
    9926:	4c 4e       	sbci	r20, 0xEC	; 236
    9928:	50 52       	subi	r21, 0x20	; 32
    992a:	54 56       	subi	r21, 0x64	; 100
    992c:	58 5a       	subi	r21, 0xA8	; 168
    992e:	5c 5e       	subi	r21, 0xEC	; 236
    9930:	60 62       	ori	r22, 0x20	; 32
    9932:	64 66       	ori	r22, 0x64	; 100
    9934:	68 6a       	ori	r22, 0xA8	; 168
    9936:	6c 6e       	ori	r22, 0xEC	; 236
    9938:	70 72       	andi	r23, 0x20	; 32
    993a:	74 76       	andi	r23, 0x64	; 100
    993c:	78 7a       	andi	r23, 0xA8	; 168
    993e:	7c 7e       	andi	r23, 0xEC	; 236
    9940:	7f 7d       	andi	r23, 0xDF	; 223
    9942:	7b 79       	andi	r23, 0x9B	; 155
    9944:	77 75       	andi	r23, 0x57	; 87
    9946:	73 71       	andi	r23, 0x13	; 19
    9948:	6f 6d       	ori	r22, 0xDF	; 223
    994a:	6b 69       	ori	r22, 0x9B	; 155
    994c:	67 65       	ori	r22, 0x57	; 87
    994e:	63 61       	ori	r22, 0x13	; 19
    9950:	5f 5d       	subi	r21, 0xDF	; 223
    9952:	5b 59       	subi	r21, 0x9B	; 155
    9954:	57 55       	subi	r21, 0x57	; 87
    9956:	53 51       	subi	r21, 0x13	; 19
    9958:	4f 4d       	sbci	r20, 0xDF	; 223
    995a:	4b 49       	sbci	r20, 0x9B	; 155
    995c:	47 45       	sbci	r20, 0x57	; 87
    995e:	43 41       	sbci	r20, 0x13	; 19
    9960:	3f 3d       	cpi	r19, 0xDF	; 223
    9962:	3b 39       	cpi	r19, 0x9B	; 155
    9964:	37 35       	cpi	r19, 0x57	; 87
    9966:	33 31       	cpi	r19, 0x13	; 19
    9968:	2f 2d       	mov	r18, r15
    996a:	2b 29       	or	r18, r11
    996c:	27 25       	eor	r18, r7
    996e:	23 21       	and	r18, r3
    9970:	1f 1d       	adc	r17, r15
    9972:	1b 19       	sub	r17, r11
    9974:	17 15       	cp	r17, r7
    9976:	13 11       	cpse	r17, r3
    9978:	0f 0d       	add	r16, r15
    997a:	0b 09       	sbc	r16, r11
    997c:	07 05       	cpc	r16, r7
    997e:	03 01       	movw	r0, r6
    9980:	ff fd       	.word	0xfdff	; ????
    9982:	fb f9       	.word	0xf9fb	; ????
    9984:	f7 f5       	brid	.+124    	; 0x9a02 <waves+0x302>
    9986:	f3 f1       	brvs	.+124    	; 0x9a04 <waves+0x304>
    9988:	ef ed       	ldi	r30, 0xDF	; 223
    998a:	eb e9       	ldi	r30, 0x9B	; 155
    998c:	e7 e5       	ldi	r30, 0x57	; 87
    998e:	e3 e1       	ldi	r30, 0x13	; 19
    9990:	df dd       	rcall	.-1090   	; 0x9550 <steptable+0x48>
    9992:	db d9       	rcall	.-3146   	; 0x8d4a <ReadVarLen+0x46>
    9994:	d7 d5       	rcall	.+2990   	; 0xa544 <Print+0x32>
    9996:	d3 d1       	rcall	.+934    	; 0x9d3e <waves+0x63e>
    9998:	cf cd       	rjmp	.-1122   	; 0x9538 <steptable+0x30>
    999a:	cb c9       	rjmp	.-3178   	; 0x8d32 <ReadVarLen+0x2e>
    999c:	c7 c5       	rjmp	.+2958   	; 0xa52c <Print+0x1a>
    999e:	c3 c1       	rjmp	.+902    	; 0x9d26 <waves+0x626>
    99a0:	bf bd       	out	0x2f, r27	; 47
    99a2:	bb b9       	out	0x0b, r27	; 11
    99a4:	b7 b5       	in	r27, 0x27	; 39
    99a6:	b3 b1       	in	r27, 0x03	; 3
    99a8:	af ad       	ldd	r26, Y+63	; 0x3f
    99aa:	ab a9       	ldd	r26, Y+51	; 0x33
    99ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    99b0:	9f 9d       	mul	r25, r15
    99b2:	9b 99       	sbic	0x13, 3	; 19
    99b4:	97 95       	ror	r25
    99b6:	93 91       	.word	0x9193	; ????
    99b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99ba:	8b 89       	ldd	r24, Y+19	; 0x13
    99bc:	87 85       	ldd	r24, Z+15	; 0x0f
    99be:	83 81       	ldd	r24, Z+3	; 0x03
    99c0:	80 82       	st	Z, r8
    99c2:	84 86       	std	Z+12, r8	; 0x0c
    99c4:	88 8a       	std	Y+16, r8	; 0x10
    99c6:	8c 8e       	std	Y+28, r8	; 0x1c
    99c8:	90 92 94 96 	sts	0x9694, r9
    99cc:	98 9a       	sbi	0x13, 0	; 19
    99ce:	9c 9e       	mul	r9, r28
    99d0:	a0 a2       	std	Z+32, r10	; 0x20
    99d2:	a4 a6       	std	Z+44, r10	; 0x2c
    99d4:	a8 aa       	std	Y+48, r10	; 0x30
    99d6:	ac ae       	std	Y+60, r10	; 0x3c
    99d8:	b0 b2       	in	r11, 0x10	; 16
    99da:	b4 b6       	in	r11, 0x34	; 52
    99dc:	b8 ba       	out	0x18, r11	; 24
    99de:	bc be       	out	0x3c, r11	; 60
    99e0:	c0 c2       	rjmp	.+1408   	; 0x9f62 <waves+0x862>
    99e2:	c4 c6       	rjmp	.+3464   	; 0xa76c <LBPrintStr+0x2>
    99e4:	c8 ca       	rjmp	.-2672   	; 0x8f76 <TriggerNote+0x7a>
    99e6:	cc ce       	rjmp	.-616    	; 0x9780 <waves+0x80>
    99e8:	d0 d2       	rcall	.+1440   	; 0x9f8a <waves+0x88a>
    99ea:	d4 d6       	rcall	.+3496   	; 0xa794 <LBPrintStr+0x2a>
    99ec:	d8 da       	rcall	.-2640   	; 0x8f9e <ProcessMusic+0x22>
    99ee:	dc de       	rcall	.-584    	; 0x97a8 <waves+0xa8>
    99f0:	e0 e2       	ldi	r30, 0x20	; 32
    99f2:	e4 e6       	ldi	r30, 0x64	; 100
    99f4:	e8 ea       	ldi	r30, 0xA8	; 168
    99f6:	ec ee       	ldi	r30, 0xEC	; 236
    99f8:	f0 f2       	brcs	.-68     	; 0x99b6 <waves+0x2b6>
    99fa:	f4 f6       	brge	.-68     	; 0x99b8 <waves+0x2b8>
    99fc:	f8 fa       	.word	0xfaf8	; ????
    99fe:	fc fe       	.word	0xfefc	; ????
    9a00:	7f 7f       	andi	r23, 0xFF	; 255
    9a02:	7f 7f       	andi	r23, 0xFF	; 255
    9a04:	7f 7f       	andi	r23, 0xFF	; 255
    9a06:	7f 7f       	andi	r23, 0xFF	; 255
    9a08:	7f 7f       	andi	r23, 0xFF	; 255
    9a0a:	7f 7f       	andi	r23, 0xFF	; 255
    9a0c:	7f 7f       	andi	r23, 0xFF	; 255
    9a0e:	7f 7f       	andi	r23, 0xFF	; 255
    9a10:	7f 7f       	andi	r23, 0xFF	; 255
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	80 80       	ld	r8, Z
    9a42:	80 80       	ld	r8, Z
    9a44:	80 80       	ld	r8, Z
    9a46:	80 80       	ld	r8, Z
    9a48:	80 80       	ld	r8, Z
    9a4a:	80 80       	ld	r8, Z
    9a4c:	80 80       	ld	r8, Z
    9a4e:	80 80       	ld	r8, Z
    9a50:	80 80       	ld	r8, Z
    9a52:	80 80       	ld	r8, Z
    9a54:	80 80       	ld	r8, Z
    9a56:	80 80       	ld	r8, Z
    9a58:	80 80       	ld	r8, Z
    9a5a:	80 80       	ld	r8, Z
    9a5c:	80 80       	ld	r8, Z
    9a5e:	80 80       	ld	r8, Z
    9a60:	80 80       	ld	r8, Z
    9a62:	80 80       	ld	r8, Z
    9a64:	80 80       	ld	r8, Z
    9a66:	80 80       	ld	r8, Z
    9a68:	80 80       	ld	r8, Z
    9a6a:	80 80       	ld	r8, Z
    9a6c:	80 80       	ld	r8, Z
    9a6e:	80 80       	ld	r8, Z
    9a70:	80 80       	ld	r8, Z
    9a72:	80 80       	ld	r8, Z
    9a74:	80 80       	ld	r8, Z
    9a76:	80 80       	ld	r8, Z
    9a78:	80 80       	ld	r8, Z
    9a7a:	80 80       	ld	r8, Z
    9a7c:	80 80       	ld	r8, Z
    9a7e:	80 80       	ld	r8, Z
    9a80:	80 80       	ld	r8, Z
    9a82:	80 80       	ld	r8, Z
    9a84:	80 80       	ld	r8, Z
    9a86:	80 80       	ld	r8, Z
    9a88:	80 80       	ld	r8, Z
    9a8a:	80 80       	ld	r8, Z
    9a8c:	80 80       	ld	r8, Z
    9a8e:	80 80       	ld	r8, Z
    9a90:	80 80       	ld	r8, Z
    9a92:	80 80       	ld	r8, Z
    9a94:	80 80       	ld	r8, Z
    9a96:	80 80       	ld	r8, Z
    9a98:	80 80       	ld	r8, Z
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 80       	ld	r8, Z
    9af6:	80 80       	ld	r8, Z
    9af8:	80 80       	ld	r8, Z
    9afa:	80 80       	ld	r8, Z
    9afc:	80 80       	ld	r8, Z
    9afe:	80 80       	ld	r8, Z
    9b00:	7f 7f       	andi	r23, 0xFF	; 255
    9b02:	7f 7f       	andi	r23, 0xFF	; 255
    9b04:	7f 7f       	andi	r23, 0xFF	; 255
    9b06:	7f 7f       	andi	r23, 0xFF	; 255
    9b08:	7f 7f       	andi	r23, 0xFF	; 255
    9b0a:	7f 7f       	andi	r23, 0xFF	; 255
    9b0c:	7f 7f       	andi	r23, 0xFF	; 255
    9b0e:	7f 7f       	andi	r23, 0xFF	; 255
    9b10:	7f 7f       	andi	r23, 0xFF	; 255
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7f       	andi	r23, 0xFF	; 255
    9b7c:	7f 7f       	andi	r23, 0xFF	; 255
    9b7e:	7f 7f       	andi	r23, 0xFF	; 255
    9b80:	80 80       	ld	r8, Z
    9b82:	80 80       	ld	r8, Z
    9b84:	80 80       	ld	r8, Z
    9b86:	80 80       	ld	r8, Z
    9b88:	80 80       	ld	r8, Z
    9b8a:	80 80       	ld	r8, Z
    9b8c:	80 80       	ld	r8, Z
    9b8e:	80 80       	ld	r8, Z
    9b90:	80 80       	ld	r8, Z
    9b92:	80 80       	ld	r8, Z
    9b94:	80 80       	ld	r8, Z
    9b96:	80 80       	ld	r8, Z
    9b98:	80 80       	ld	r8, Z
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 80       	ld	r8, Z
    9bf6:	80 80       	ld	r8, Z
    9bf8:	80 80       	ld	r8, Z
    9bfa:	80 80       	ld	r8, Z
    9bfc:	80 80       	ld	r8, Z
    9bfe:	80 80       	ld	r8, Z
    9c00:	7f 7f       	andi	r23, 0xFF	; 255
    9c02:	7f 7f       	andi	r23, 0xFF	; 255
    9c04:	7f 7f       	andi	r23, 0xFF	; 255
    9c06:	7f 7f       	andi	r23, 0xFF	; 255
    9c08:	7f 7f       	andi	r23, 0xFF	; 255
    9c0a:	7f 7f       	andi	r23, 0xFF	; 255
    9c0c:	7f 7f       	andi	r23, 0xFF	; 255
    9c0e:	7f 7f       	andi	r23, 0xFF	; 255
    9c10:	7f 7f       	andi	r23, 0xFF	; 255
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	7f 7f       	andi	r23, 0xFF	; 255
    9c42:	7f 7f       	andi	r23, 0xFF	; 255
    9c44:	7f 7f       	andi	r23, 0xFF	; 255
    9c46:	7f 7f       	andi	r23, 0xFF	; 255
    9c48:	7f 7f       	andi	r23, 0xFF	; 255
    9c4a:	7f 7f       	andi	r23, 0xFF	; 255
    9c4c:	7f 7f       	andi	r23, 0xFF	; 255
    9c4e:	7f 7f       	andi	r23, 0xFF	; 255
    9c50:	7f 7f       	andi	r23, 0xFF	; 255
    9c52:	7f 7f       	andi	r23, 0xFF	; 255
    9c54:	7f 7f       	andi	r23, 0xFF	; 255
    9c56:	7f 7f       	andi	r23, 0xFF	; 255
    9c58:	7f 7f       	andi	r23, 0xFF	; 255
    9c5a:	7f 7f       	andi	r23, 0xFF	; 255
    9c5c:	7f 7f       	andi	r23, 0xFF	; 255
    9c5e:	7f 7f       	andi	r23, 0xFF	; 255
    9c60:	7f 7f       	andi	r23, 0xFF	; 255
    9c62:	7f 7f       	andi	r23, 0xFF	; 255
    9c64:	7f 7f       	andi	r23, 0xFF	; 255
    9c66:	7f 7f       	andi	r23, 0xFF	; 255
    9c68:	7f 7f       	andi	r23, 0xFF	; 255
    9c6a:	7f 7f       	andi	r23, 0xFF	; 255
    9c6c:	7f 7f       	andi	r23, 0xFF	; 255
    9c6e:	7f 7f       	andi	r23, 0xFF	; 255
    9c70:	7f 7f       	andi	r23, 0xFF	; 255
    9c72:	7f 7f       	andi	r23, 0xFF	; 255
    9c74:	7f 7f       	andi	r23, 0xFF	; 255
    9c76:	7f 7f       	andi	r23, 0xFF	; 255
    9c78:	7f 7f       	andi	r23, 0xFF	; 255
    9c7a:	7f 7f       	andi	r23, 0xFF	; 255
    9c7c:	7f 7f       	andi	r23, 0xFF	; 255
    9c7e:	7f 7f       	andi	r23, 0xFF	; 255
    9c80:	7f 7f       	andi	r23, 0xFF	; 255
    9c82:	7f 7f       	andi	r23, 0xFF	; 255
    9c84:	7f 7f       	andi	r23, 0xFF	; 255
    9c86:	7f 7f       	andi	r23, 0xFF	; 255
    9c88:	7f 7f       	andi	r23, 0xFF	; 255
    9c8a:	7f 7f       	andi	r23, 0xFF	; 255
    9c8c:	7f 7f       	andi	r23, 0xFF	; 255
    9c8e:	7f 7f       	andi	r23, 0xFF	; 255
    9c90:	7f 7f       	andi	r23, 0xFF	; 255
    9c92:	7f 7f       	andi	r23, 0xFF	; 255
    9c94:	7f 7f       	andi	r23, 0xFF	; 255
    9c96:	7f 7f       	andi	r23, 0xFF	; 255
    9c98:	7f 7f       	andi	r23, 0xFF	; 255
    9c9a:	7f 7f       	andi	r23, 0xFF	; 255
    9c9c:	7f 7f       	andi	r23, 0xFF	; 255
    9c9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ca0:	7f 7f       	andi	r23, 0xFF	; 255
    9ca2:	7f 7f       	andi	r23, 0xFF	; 255
    9ca4:	7f 7f       	andi	r23, 0xFF	; 255
    9ca6:	7f 7f       	andi	r23, 0xFF	; 255
    9ca8:	7f 7f       	andi	r23, 0xFF	; 255
    9caa:	7f 7f       	andi	r23, 0xFF	; 255
    9cac:	7f 7f       	andi	r23, 0xFF	; 255
    9cae:	7f 7f       	andi	r23, 0xFF	; 255
    9cb0:	7f 7f       	andi	r23, 0xFF	; 255
    9cb2:	7f 7f       	andi	r23, 0xFF	; 255
    9cb4:	7f 7f       	andi	r23, 0xFF	; 255
    9cb6:	7f 7f       	andi	r23, 0xFF	; 255
    9cb8:	7f 7f       	andi	r23, 0xFF	; 255
    9cba:	7f 7f       	andi	r23, 0xFF	; 255
    9cbc:	7f 7f       	andi	r23, 0xFF	; 255
    9cbe:	7f 7f       	andi	r23, 0xFF	; 255
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 80       	ld	r8, Z
    9cf6:	80 80       	ld	r8, Z
    9cf8:	80 80       	ld	r8, Z
    9cfa:	80 80       	ld	r8, Z
    9cfc:	80 80       	ld	r8, Z
    9cfe:	80 80       	ld	r8, Z
    9d00:	03 09       	sbc	r16, r3
    9d02:	13 1e       	adc	r1, r19
    9d04:	28 31       	cpi	r18, 0x18	; 24
    9d06:	3a 40       	sbci	r19, 0x0A	; 10
    9d08:	46 4c       	sbci	r20, 0xC6	; 198
    9d0a:	50 54       	subi	r21, 0x40	; 64
    9d0c:	58 5b       	subi	r21, 0xB8	; 184
    9d0e:	5e 61       	ori	r21, 0x1E	; 30
    9d10:	63 65       	ori	r22, 0x53	; 83
    9d12:	67 69       	ori	r22, 0x97	; 151
    9d14:	6b 6c       	ori	r22, 0xCB	; 203
    9d16:	6e 6f       	ori	r22, 0xFE	; 254
    9d18:	70 71       	andi	r23, 0x10	; 16
    9d1a:	72 73       	andi	r23, 0x32	; 50
    9d1c:	74 75       	andi	r23, 0x54	; 84
    9d1e:	76 77       	andi	r23, 0x76	; 118
    9d20:	77 78       	andi	r23, 0x87	; 135
    9d22:	79 79       	andi	r23, 0x99	; 153
    9d24:	7a 7a       	andi	r23, 0xAA	; 170
    9d26:	7b 7b       	andi	r23, 0xBB	; 187
    9d28:	7c 7c       	andi	r23, 0xCC	; 204
    9d2a:	7c 7d       	andi	r23, 0xDC	; 220
    9d2c:	7d 7d       	andi	r23, 0xDD	; 221
    9d2e:	7e 7e       	andi	r23, 0xEE	; 238
    9d30:	7e 7e       	andi	r23, 0xEE	; 238
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7e       	andi	r23, 0xEF	; 239
    9d4e:	7e 7e       	andi	r23, 0xEE	; 238
    9d50:	7e 7d       	andi	r23, 0xDE	; 222
    9d52:	7d 7d       	andi	r23, 0xDD	; 221
    9d54:	7c 7c       	andi	r23, 0xCC	; 204
    9d56:	7c 7b       	andi	r23, 0xBC	; 188
    9d58:	7b 7a       	andi	r23, 0xAB	; 171
    9d5a:	7a 79       	andi	r23, 0x9A	; 154
    9d5c:	79 78       	andi	r23, 0x89	; 137
    9d5e:	77 77       	andi	r23, 0x77	; 119
    9d60:	76 75       	andi	r23, 0x56	; 86
    9d62:	74 73       	andi	r23, 0x34	; 52
    9d64:	72 71       	andi	r23, 0x12	; 18
    9d66:	70 6f       	ori	r23, 0xF0	; 240
    9d68:	6e 6c       	ori	r22, 0xCE	; 206
    9d6a:	6b 69       	ori	r22, 0x9B	; 155
    9d6c:	67 65       	ori	r22, 0x57	; 87
    9d6e:	63 61       	ori	r22, 0x13	; 19
    9d70:	5e 5b       	subi	r21, 0xBE	; 190
    9d72:	58 54       	subi	r21, 0x48	; 72
    9d74:	50 4c       	sbci	r21, 0xC0	; 192
    9d76:	46 40       	sbci	r20, 0x06	; 6
    9d78:	3a 31       	cpi	r19, 0x1A	; 26
    9d7a:	28 1e       	adc	r2, r24
    9d7c:	13 09       	sbc	r17, r3
    9d7e:	03 00       	.word	0x0003	; ????
    9d80:	c6 cc       	rjmp	.-1652   	; 0x970e <waves+0xe>
    9d82:	d5 db       	rcall	.-2134   	; 0x952e <steptable+0x26>
    9d84:	df e3       	ldi	r29, 0x3F	; 63
    9d86:	e5 e7       	ldi	r30, 0x75	; 117
    9d88:	e9 ea       	ldi	r30, 0xA9	; 169
    9d8a:	eb ec       	ldi	r30, 0xCB	; 203
    9d8c:	ed ee       	ldi	r30, 0xED	; 237
    9d8e:	ef ef       	ldi	r30, 0xFF	; 255
    9d90:	f0 f0       	brcs	.+60     	; 0x9dce <waves+0x6ce>
    9d92:	f0 f1       	brcs	.+124    	; 0x9e10 <waves+0x710>
    9d94:	f1 f1       	breq	.+124    	; 0x9e12 <waves+0x712>
    9d96:	f1 f2       	breq	.-68     	; 0x9d54 <waves+0x654>
    9d98:	f2 f2       	brmi	.-68     	; 0x9d56 <waves+0x656>
    9d9a:	f2 f2       	brmi	.-68     	; 0x9d58 <waves+0x658>
    9d9c:	f2 f2       	brmi	.-68     	; 0x9d5a <waves+0x65a>
    9d9e:	f2 f3       	brmi	.-4      	; 0x9d9c <waves+0x69c>
    9da0:	f3 f3       	brvs	.-4      	; 0x9d9e <waves+0x69e>
    9da2:	f3 f3       	brvs	.-4      	; 0x9da0 <waves+0x6a0>
    9da4:	f3 f3       	brvs	.-4      	; 0x9da2 <waves+0x6a2>
    9da6:	f3 f3       	brvs	.-4      	; 0x9da4 <waves+0x6a4>
    9da8:	f3 f3       	brvs	.-4      	; 0x9da6 <waves+0x6a6>
    9daa:	f3 f3       	brvs	.-4      	; 0x9da8 <waves+0x6a8>
    9dac:	f3 f3       	brvs	.-4      	; 0x9daa <waves+0x6aa>
    9dae:	f3 f3       	brvs	.-4      	; 0x9dac <waves+0x6ac>
    9db0:	f3 f3       	brvs	.-4      	; 0x9dae <waves+0x6ae>
    9db2:	f3 f3       	brvs	.-4      	; 0x9db0 <waves+0x6b0>
    9db4:	f3 f3       	brvs	.-4      	; 0x9db2 <waves+0x6b2>
    9db6:	f3 f3       	brvs	.-4      	; 0x9db4 <waves+0x6b4>
    9db8:	f3 f3       	brvs	.-4      	; 0x9db6 <waves+0x6b6>
    9dba:	f3 f3       	brvs	.-4      	; 0x9db8 <waves+0x6b8>
    9dbc:	f3 f3       	brvs	.-4      	; 0x9dba <waves+0x6ba>
    9dbe:	f3 f3       	brvs	.-4      	; 0x9dbc <waves+0x6bc>
    9dc0:	f3 f3       	brvs	.-4      	; 0x9dbe <waves+0x6be>
    9dc2:	f3 f3       	brvs	.-4      	; 0x9dc0 <waves+0x6c0>
    9dc4:	f3 f3       	brvs	.-4      	; 0x9dc2 <waves+0x6c2>
    9dc6:	f3 f3       	brvs	.-4      	; 0x9dc4 <waves+0x6c4>
    9dc8:	f3 f3       	brvs	.-4      	; 0x9dc6 <waves+0x6c6>
    9dca:	f3 f3       	brvs	.-4      	; 0x9dc8 <waves+0x6c8>
    9dcc:	f3 f3       	brvs	.-4      	; 0x9dca <waves+0x6ca>
    9dce:	f3 f3       	brvs	.-4      	; 0x9dcc <waves+0x6cc>
    9dd0:	f3 f3       	brvs	.-4      	; 0x9dce <waves+0x6ce>
    9dd2:	f3 f3       	brvs	.-4      	; 0x9dd0 <waves+0x6d0>
    9dd4:	f3 f3       	brvs	.-4      	; 0x9dd2 <waves+0x6d2>
    9dd6:	f3 f3       	brvs	.-4      	; 0x9dd4 <waves+0x6d4>
    9dd8:	f3 f3       	brvs	.-4      	; 0x9dd6 <waves+0x6d6>
    9dda:	f3 f3       	brvs	.-4      	; 0x9dd8 <waves+0x6d8>
    9ddc:	f3 f3       	brvs	.-4      	; 0x9dda <waves+0x6da>
    9dde:	f3 f3       	brvs	.-4      	; 0x9ddc <waves+0x6dc>
    9de0:	f2 f2       	brmi	.-68     	; 0x9d9e <waves+0x69e>
    9de2:	f2 f2       	brmi	.-68     	; 0x9da0 <waves+0x6a0>
    9de4:	f2 f2       	brmi	.-68     	; 0x9da2 <waves+0x6a2>
    9de6:	f2 f2       	brmi	.-68     	; 0x9da4 <waves+0x6a4>
    9de8:	f1 f1       	breq	.+124    	; 0x9e66 <waves+0x766>
    9dea:	f1 f1       	breq	.+124    	; 0x9e68 <waves+0x768>
    9dec:	f0 f0       	brcs	.+60     	; 0x9e2a <waves+0x72a>
    9dee:	f0 ef       	ldi	r31, 0xF0	; 240
    9df0:	ef ee       	ldi	r30, 0xEF	; 239
    9df2:	ed ec       	ldi	r30, 0xCD	; 205
    9df4:	eb ea       	ldi	r30, 0xAB	; 171
    9df6:	e9 e7       	ldi	r30, 0x79	; 121
    9df8:	e5 e3       	ldi	r30, 0x35	; 53
    9dfa:	df db       	rcall	.-2114   	; 0x95ba <steptable+0xb2>
    9dfc:	d5 cc       	rjmp	.-1622   	; 0x97a8 <waves+0xa8>
    9dfe:	c6 00       	.word	0x00c6	; ????
    9e00:	00 28       	or	r0, r0
    9e02:	3d 42       	sbci	r19, 0x2D	; 45
    9e04:	30 2d       	mov	r19, r0
    9e06:	2c 2b       	or	r18, r28
    9e08:	2c 2d       	mov	r18, r12
    9e0a:	2e 2f       	mov	r18, r30
    9e0c:	30 32       	cpi	r19, 0x20	; 32
    9e0e:	33 35       	cpi	r19, 0x53	; 83
    9e10:	37 39       	cpi	r19, 0x97	; 151
    9e12:	3b 3d       	cpi	r19, 0xDB	; 219
    9e14:	3f 41       	sbci	r19, 0x1F	; 31
    9e16:	43 45       	sbci	r20, 0x53	; 83
    9e18:	48 4a       	sbci	r20, 0xA8	; 168
    9e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9e1c:	50 53       	subi	r21, 0x30	; 48
    9e1e:	55 57       	subi	r21, 0x75	; 117
    9e20:	59 5b       	subi	r21, 0xB9	; 185
    9e22:	5d 5f       	subi	r21, 0xFD	; 253
    9e24:	61 63       	ori	r22, 0x31	; 49
    9e26:	65 67       	ori	r22, 0x75	; 117
    9e28:	69 6b       	ori	r22, 0xB9	; 185
    9e2a:	6c 6e       	ori	r22, 0xEC	; 236
    9e2c:	70 71       	andi	r23, 0x10	; 16
    9e2e:	73 74       	andi	r23, 0x43	; 67
    9e30:	75 77       	andi	r23, 0x75	; 117
    9e32:	78 79       	andi	r23, 0x98	; 152
    9e34:	7a 7b       	andi	r23, 0xBA	; 186
    9e36:	7c 7d       	andi	r23, 0xDC	; 220
    9e38:	7d 7e       	andi	r23, 0xED	; 237
    9e3a:	7e 7f       	andi	r23, 0xFE	; 254
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	7f 7f       	andi	r23, 0xFF	; 255
    9e42:	7f 7f       	andi	r23, 0xFF	; 255
    9e44:	7f 7f       	andi	r23, 0xFF	; 255
    9e46:	7e 7e       	andi	r23, 0xEE	; 238
    9e48:	7d 7d       	andi	r23, 0xDD	; 221
    9e4a:	7c 7b       	andi	r23, 0xBC	; 188
    9e4c:	7a 79       	andi	r23, 0x9A	; 154
    9e4e:	78 77       	andi	r23, 0x78	; 120
    9e50:	75 74       	andi	r23, 0x45	; 69
    9e52:	73 71       	andi	r23, 0x13	; 19
    9e54:	70 6e       	ori	r23, 0xE0	; 224
    9e56:	6c 6b       	ori	r22, 0xBC	; 188
    9e58:	69 67       	ori	r22, 0x79	; 121
    9e5a:	65 63       	ori	r22, 0x35	; 53
    9e5c:	61 5f       	subi	r22, 0xF1	; 241
    9e5e:	5d 5b       	subi	r21, 0xBD	; 189
    9e60:	59 57       	subi	r21, 0x79	; 121
    9e62:	55 53       	subi	r21, 0x35	; 53
    9e64:	50 4e       	sbci	r21, 0xE0	; 224
    9e66:	4c 4a       	sbci	r20, 0xAC	; 172
    9e68:	48 45       	sbci	r20, 0x58	; 88
    9e6a:	43 41       	sbci	r20, 0x13	; 19
    9e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9e6e:	3b 39       	cpi	r19, 0x9B	; 155
    9e70:	37 35       	cpi	r19, 0x57	; 87
    9e72:	33 32       	cpi	r19, 0x23	; 35
    9e74:	30 2f       	mov	r19, r16
    9e76:	2e 2d       	mov	r18, r14
    9e78:	2c 2b       	or	r18, r28
    9e7a:	2c 2d       	mov	r18, r12
    9e7c:	30 42       	sbci	r19, 0x20	; 32
    9e7e:	3d 28       	or	r3, r13
    9e80:	00 e9       	ldi	r16, 0x90	; 144
    9e82:	e5 fe       	sbrs	r14, 5
    9e84:	d4 d7       	rcall	.+4008   	; 0xae2e <save_score+0x42>
    9e86:	d7 d7       	rcall	.+4014   	; 0xae36 <save_score+0x4a>
    9e88:	d6 d4       	rcall	.+2476   	; 0xa836 <LBLineIntersect+0x16>
    9e8a:	d2 d0       	rcall	.+420    	; 0xa030 <waves+0x930>
    9e8c:	ce cc       	rjmp	.-1636   	; 0x982a <waves+0x12a>
    9e8e:	ca c8       	rjmp	.-3692   	; 0x9024 <ProcessMusic+0xa8>
    9e90:	c6 c3       	rjmp	.+1932   	; 0xa61e <LBGetNextFrame+0x4>
    9e92:	c1 bf       	out	0x31, r28	; 49
    9e94:	bd ba       	out	0x1d, r11	; 29
    9e96:	b8 b6       	in	r11, 0x38	; 56
    9e98:	b4 b1       	in	r27, 0x04	; 4
    9e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9ea2:	9f 9e       	mul	r9, r31
    9ea4:	9c 9a       	sbi	0x13, 4	; 19
    9ea6:	99 97       	sbiw	r26, 0x29	; 41
    9ea8:	95 94       	asr	r9
    9eaa:	93 91       	.word	0x9193	; ????
    9eac:	90 8f       	std	Z+24, r25	; 0x18
    9eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9eb0:	8b 8a       	std	Y+19, r8	; 0x13
    9eb2:	89 88       	ldd	r8, Y+17	; 0x11
    9eb4:	88 87       	std	Y+8, r24	; 0x08
    9eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    9eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    9eba:	84 84       	ldd	r8, Z+12	; 0x0c
    9ebc:	83 83       	std	Z+3, r24	; 0x03
    9ebe:	83 83       	std	Z+3, r24	; 0x03
    9ec0:	83 83       	std	Z+3, r24	; 0x03
    9ec2:	83 83       	std	Z+3, r24	; 0x03
    9ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    9ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    9ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    9eca:	86 87       	std	Z+14, r24	; 0x0e
    9ecc:	88 88       	ldd	r8, Y+16	; 0x10
    9ece:	89 8a       	std	Y+17, r8	; 0x11
    9ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ed4:	90 91 93 94 	lds	r25, 0x9493
    9ed8:	95 97       	sbiw	r26, 0x25	; 37
    9eda:	99 9a       	sbi	0x13, 1	; 19
    9edc:	9c 9e       	mul	r9, r28
    9ede:	9f a1       	ldd	r25, Y+39	; 0x27
    9ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ee6:	af b1       	in	r26, 0x0f	; 15
    9ee8:	b4 b6       	in	r11, 0x34	; 52
    9eea:	b8 ba       	out	0x18, r11	; 24
    9eec:	bd bf       	out	0x3d, r27	; 61
    9eee:	c1 c3       	rjmp	.+1922   	; 0xa672 <LBGetNextFrameReverse+0xe>
    9ef0:	c6 c8       	rjmp	.-3700   	; 0x907e <ProcessMusic+0x102>
    9ef2:	ca cc       	rjmp	.-1644   	; 0x9888 <waves+0x188>
    9ef4:	ce d0       	rcall	.+412    	; 0xa092 <waves+0x992>
    9ef6:	d2 d4       	rcall	.+2468   	; 0xa89c <LBLineIntersect+0x7c>
    9ef8:	d6 d7       	rcall	.+4012   	; 0xaea6 <save_score+0xba>
    9efa:	d7 d7       	rcall	.+4014   	; 0xaeaa <save_score+0xbe>
    9efc:	d4 fe       	sbrs	r13, 4
    9efe:	e5 e9       	ldi	r30, 0x95	; 149
    9f00:	f9 f8       	.word	0xf8f9	; ????
    9f02:	f9 f5       	brne	.+126    	; 0x9f82 <waves+0x882>
    9f04:	eb e1       	ldi	r30, 0x1B	; 27
    9f06:	dd de       	rcall	.-582    	; 0x9cc2 <waves+0x5c2>
    9f08:	e0 e2       	ldi	r30, 0x20	; 32
    9f0a:	e4 e5       	ldi	r30, 0x54	; 84
    9f0c:	e6 e5       	ldi	r30, 0x56	; 86
    9f0e:	e4 e2       	ldi	r30, 0x24	; 36
    9f10:	de d9       	rcall	.-3140   	; 0x92ce <ProcessMusic+0x352>
    9f12:	d2 ca       	rjmp	.-2652   	; 0x94b8 <esmw+0x94>
    9f14:	c1 b7       	in	r28, 0x31	; 49
    9f16:	ac a2       	std	Y+36, r10	; 0x24
    9f18:	99 91       	ld	r25, Y+
    9f1a:	8a 86       	std	Y+10, r8	; 0x0a
    9f1c:	83 81       	ldd	r24, Z+3	; 0x03
    9f1e:	80 80       	ld	r8, Z
    9f20:	81 82       	std	Z+1, r8	; 0x01
    9f22:	83 85       	ldd	r24, Z+11	; 0x0b
    9f24:	86 88       	ldd	r8, Z+22	; 0x16
    9f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9f28:	8d 8f       	std	Y+29, r24	; 0x1d
    9f2a:	90 92 93 95 	sts	0x9593, r9
    9f2e:	96 97       	sbiw	r26, 0x26	; 38
    9f30:	98 99       	sbic	0x13, 0	; 19
    9f32:	9a 9b       	sbis	0x13, 2	; 19
    9f34:	9b 9c       	mul	r9, r11
    9f36:	9d 9d       	mul	r25, r13
    9f38:	9d 9e       	mul	r9, r29
    9f3a:	9e 9e       	mul	r9, r30
    9f3c:	9f 9f       	mul	r25, r31
    9f3e:	9f 9f       	mul	r25, r31
    9f40:	9f 9f       	mul	r25, r31
    9f42:	9f 9e       	mul	r9, r31
    9f44:	9e 9e       	mul	r9, r30
    9f46:	9d 9d       	mul	r25, r13
    9f48:	9d 9c       	mul	r9, r13
    9f4a:	9b 9b       	sbis	0x13, 3	; 19
    9f4c:	9a 99       	sbic	0x13, 2	; 19
    9f4e:	98 97       	sbiw	r26, 0x28	; 40
    9f50:	96 95       	lsr	r25
    9f52:	93 92       	.word	0x9293	; ????
    9f54:	90 8f       	std	Z+24, r25	; 0x18
    9f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9f58:	8a 88       	ldd	r8, Y+18	; 0x12
    9f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9f5c:	83 82       	std	Z+3, r8	; 0x03
    9f5e:	81 80       	ldd	r8, Z+1	; 0x01
    9f60:	80 81       	ld	r24, Z
    9f62:	83 86       	std	Z+11, r8	; 0x0b
    9f64:	8a 91       	ld	r24, -Y
    9f66:	99 a2       	std	Y+33, r9	; 0x21
    9f68:	ac b7       	in	r26, 0x3c	; 60
    9f6a:	c1 ca       	rjmp	.-2686   	; 0x94ee <esmw+0xca>
    9f6c:	d2 d9       	rcall	.-3164   	; 0x9312 <ProcessMusic+0x396>
    9f6e:	de e2       	ldi	r29, 0x2E	; 46
    9f70:	e4 e5       	ldi	r30, 0x54	; 84
    9f72:	e6 e5       	ldi	r30, 0x56	; 86
    9f74:	e4 e2       	ldi	r30, 0x24	; 36
    9f76:	e0 de       	rcall	.-576    	; 0x9d38 <waves+0x638>
    9f78:	dd e1       	ldi	r29, 0x1D	; 29
    9f7a:	eb f5       	brvc	.+122    	; 0x9ff6 <waves+0x8f6>
    9f7c:	f9 f8       	.word	0xf8f9	; ????
    9f7e:	f9 00       	.word	0x00f9	; ????
    9f80:	07 08       	sbc	r0, r7
    9f82:	07 0b       	sbc	r16, r23
    9f84:	15 1f       	adc	r17, r21
    9f86:	23 22       	and	r2, r19
    9f88:	20 1e       	adc	r2, r16
    9f8a:	1c 1b       	sub	r17, r28
    9f8c:	1a 1b       	sub	r17, r26
    9f8e:	1c 1e       	adc	r1, r28
    9f90:	22 27       	eor	r18, r18
    9f92:	2e 36       	cpi	r18, 0x6E	; 110
    9f94:	3f 49       	sbci	r19, 0x9F	; 159
    9f96:	54 5e       	subi	r21, 0xE4	; 228
    9f98:	67 6f       	ori	r22, 0xF7	; 247
    9f9a:	76 7a       	andi	r23, 0xA6	; 166
    9f9c:	7e 7f       	andi	r23, 0xFE	; 254
    9f9e:	7f 7f       	andi	r23, 0xFF	; 255
    9fa0:	7f 7e       	andi	r23, 0xEF	; 239
    9fa2:	7d 7b       	andi	r23, 0xBD	; 189
    9fa4:	7a 78       	andi	r23, 0x8A	; 138
    9fa6:	76 74       	andi	r23, 0x46	; 70
    9fa8:	73 71       	andi	r23, 0x13	; 19
    9faa:	70 6e       	ori	r23, 0xE0	; 224
    9fac:	6d 6b       	ori	r22, 0xBD	; 189
    9fae:	6a 69       	ori	r22, 0x9A	; 154
    9fb0:	68 67       	ori	r22, 0x78	; 120
    9fb2:	66 65       	ori	r22, 0x56	; 86
    9fb4:	65 64       	ori	r22, 0x45	; 69
    9fb6:	64 63       	ori	r22, 0x34	; 52
    9fb8:	63 62       	ori	r22, 0x23	; 35
    9fba:	62 62       	ori	r22, 0x22	; 34
    9fbc:	61 61       	ori	r22, 0x11	; 17
    9fbe:	61 61       	ori	r22, 0x11	; 17
    9fc0:	61 61       	ori	r22, 0x11	; 17
    9fc2:	61 62       	ori	r22, 0x21	; 33
    9fc4:	62 62       	ori	r22, 0x22	; 34
    9fc6:	63 63       	ori	r22, 0x33	; 51
    9fc8:	63 64       	ori	r22, 0x43	; 67
    9fca:	65 65       	ori	r22, 0x55	; 85
    9fcc:	66 67       	ori	r22, 0x76	; 118
    9fce:	68 69       	ori	r22, 0x98	; 152
    9fd0:	6a 6b       	ori	r22, 0xBA	; 186
    9fd2:	6d 6e       	ori	r22, 0xED	; 237
    9fd4:	70 71       	andi	r23, 0x10	; 16
    9fd6:	73 74       	andi	r23, 0x43	; 67
    9fd8:	76 78       	andi	r23, 0x86	; 134
    9fda:	7a 7b       	andi	r23, 0xBA	; 186
    9fdc:	7d 7e       	andi	r23, 0xED	; 237
    9fde:	7f 7f       	andi	r23, 0xFF	; 255
    9fe0:	7f 7f       	andi	r23, 0xFF	; 255
    9fe2:	7e 7a       	andi	r23, 0xAE	; 174
    9fe4:	76 6f       	ori	r23, 0xF6	; 246
    9fe6:	67 5e       	subi	r22, 0xE7	; 231
    9fe8:	54 49       	sbci	r21, 0x94	; 148
    9fea:	3f 36       	cpi	r19, 0x6F	; 111
    9fec:	2e 27       	eor	r18, r30
    9fee:	22 1e       	adc	r2, r18
    9ff0:	1c 1b       	sub	r17, r28
    9ff2:	1a 1b       	sub	r17, r26
    9ff4:	1c 1e       	adc	r1, r28
    9ff6:	20 22       	and	r2, r16
    9ff8:	23 1f       	adc	r18, r19
    9ffa:	15 0b       	sbc	r17, r21
    9ffc:	07 08       	sbc	r0, r7
    9ffe:	07 00       	.word	0x0007	; ????
    a000:	1f 31       	cpi	r17, 0x1F	; 31
    a002:	3d 44       	sbci	r19, 0x4D	; 77
    a004:	4e 53       	subi	r20, 0x3E	; 62
    a006:	54 56       	subi	r21, 0x64	; 100
    a008:	5a 5f       	subi	r21, 0xFA	; 250
    a00a:	64 69       	ori	r22, 0x94	; 148
    a00c:	6e 74       	andi	r22, 0x4E	; 78
    a00e:	76 79       	andi	r23, 0x96	; 150
    a010:	7c 7f       	andi	r23, 0xFC	; 252
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7c       	andi	r23, 0xCF	; 207
    a07c:	78 71       	andi	r23, 0x18	; 24
    a07e:	68 4c       	sbci	r22, 0xC8	; 200
    a080:	2c 1c       	adc	r2, r12
    a082:	12 0c       	add	r1, r2
    a084:	0a 0b       	sbc	r16, r26
    a086:	0a 05       	cpc	r16, r10
    a088:	fd f3       	brhs	.-2      	; 0xa088 <waves+0x988>
    a08a:	e9 df       	rcall	.-46     	; 0xa05e <waves+0x95e>
    a08c:	d4 ca       	rjmp	.-2648   	; 0x9636 <steptable+0x12e>
    a08e:	c0 b7       	in	r28, 0x30	; 48
    a090:	ae a6       	std	Y+46, r10	; 0x2e
    a092:	9e 97       	sbiw	r26, 0x2e	; 46
    a094:	91 8b       	std	Z+17, r25	; 0x11
    a096:	86 85       	ldd	r24, Z+14	; 0x0e
    a098:	82 80       	ldd	r8, Z+2	; 0x02
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 87       	std	Z+8, r24	; 0x08
    a0f6:	91 9d       	mul	r25, r1
    a0f8:	ac c4       	rjmp	.+2392   	; 0xaa52 <LBWaitSeconds+0x1c>
    a0fa:	cb d4       	rcall	.+2454   	; 0xaa92 <init_tile_animations+0xe>
    a0fc:	dd f2       	brhs	.-74     	; 0xa0b4 <waves+0x9b4>
    a0fe:	fa fa       	.word	0xfafa	; ????

0000a100 <SetSpriteVisibility>:
u8* GetUserRamTile(u8 index){
	return ram_tiles + (index * TILE_HEIGHT * TILE_WIDTH);
}

void SetSpriteVisibility(bool visible){
	sprites_on = visible;
    a100:	80 93 00 01 	sts	0x0100, r24
    a104:	08 95       	ret

0000a106 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    a106:	2f 92       	push	r2
    a108:	3f 92       	push	r3
    a10a:	4f 92       	push	r4
    a10c:	5f 92       	push	r5
    a10e:	6f 92       	push	r6
    a110:	7f 92       	push	r7
    a112:	8f 92       	push	r8
    a114:	9f 92       	push	r9
    a116:	af 92       	push	r10
    a118:	bf 92       	push	r11
    a11a:	cf 92       	push	r12
    a11c:	df 92       	push	r13
    a11e:	ef 92       	push	r14
    a120:	ff 92       	push	r15
    a122:	0f 93       	push	r16
    a124:	1f 93       	push	r17
    a126:	cf 93       	push	r28
    a128:	df 93       	push	r29
    a12a:	00 d0       	rcall	.+0      	; 0xa12c <ProcessSprites+0x26>
    a12c:	00 d0       	rcall	.+0      	; 0xa12e <ProcessSprites+0x28>
    a12e:	00 d0       	rcall	.+0      	; 0xa130 <ProcessSprites+0x2a>
    a130:	cd b7       	in	r28, 0x3d	; 61
    a132:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    a134:	80 91 00 01 	lds	r24, 0x0100
    a138:	88 23       	and	r24, r24
    a13a:	09 f4       	brne	.+2      	; 0xa13e <ProcessSprites+0x38>
    a13c:	cb c0       	rjmp	.+406    	; 0xa2d4 <ProcessSprites+0x1ce>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    a13e:	80 91 da 0a 	lds	r24, 0x0ADA
    a142:	80 93 d9 0a 	sts	0x0AD9, r24
	free_tile_index = user_ram_tiles_c;
    a146:	80 93 d8 0a 	sts	0x0AD8, r24
    a14a:	00 e0       	ldi	r16, 0x00	; 0
    a14c:	10 e0       	ldi	r17, 0x00	; 0
    a14e:	f8 01       	movw	r30, r16
    a150:	e8 59       	subi	r30, 0x98	; 152
    a152:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    a154:	81 81       	ldd	r24, Z+1	; 0x01
    a156:	90 81       	ld	r25, Z
    a158:	32 81       	ldd	r19, Z+2	; 0x02
    a15a:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    a15c:	28 e0       	ldi	r18, 0x08	; 8
    a15e:	29 0f       	add	r18, r25
    a160:	26 95       	lsr	r18
    a162:	26 95       	lsr	r18
    a164:	26 95       	lsr	r18
    a166:	33 24       	eor	r3, r3
    a168:	3a 94       	dec	r3
    a16a:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    a16c:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    a16e:	19 f0       	breq	.+6      	; 0xa176 <ProcessSprites+0x70>
    a170:	e2 e0       	ldi	r30, 0x02	; 2
    a172:	2e 2e       	mov	r2, r30
    a174:	02 c0       	rjmp	.+4      	; 0xa17a <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    a176:	22 24       	eor	r2, r2
    a178:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    a17a:	28 e0       	ldi	r18, 0x08	; 8
    a17c:	28 0f       	add	r18, r24
    a17e:	52 2e       	mov	r5, r18
    a180:	56 94       	lsr	r5
    a182:	56 94       	lsr	r5
    a184:	56 94       	lsr	r5
    a186:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    a188:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    a18a:	19 f0       	breq	.+6      	; 0xa192 <ProcessSprites+0x8c>
    a18c:	22 e0       	ldi	r18, 0x02	; 2
    a18e:	29 83       	std	Y+1, r18	; 0x01
    a190:	02 c0       	rjmp	.+4      	; 0xa196 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    a192:	e1 e0       	ldi	r30, 0x01	; 1
    a194:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    a196:	68 2e       	mov	r6, r24
    a198:	71 2c       	mov	r7, r1
    a19a:	76 2c       	mov	r7, r6
    a19c:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a19e:	69 0e       	add	r6, r25
    a1a0:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    a1a2:	50 e0       	ldi	r21, 0x00	; 0
    a1a4:	54 2f       	mov	r21, r20
    a1a6:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a1a8:	ca 01       	movw	r24, r20
    a1aa:	83 0f       	add	r24, r19
    a1ac:	91 1d       	adc	r25, r1
    a1ae:	9b 83       	std	Y+3, r25	; 0x03
    a1b0:	8a 83       	std	Y+2, r24	; 0x02
    a1b2:	e1 2c       	mov	r14, r1
    a1b4:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1b6:	9e e1       	ldi	r25, 0x1E	; 30
    a1b8:	59 9e       	mul	r5, r25
    a1ba:	50 01       	movw	r10, r0
    a1bc:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    a1be:	9e 2c       	mov	r9, r14
    a1c0:	88 24       	eor	r8, r8
    a1c2:	43 2c       	mov	r4, r3
    a1c4:	c1 2c       	mov	r12, r1
    a1c6:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    a1c8:	ed e1       	ldi	r30, 0x1D	; 29
    a1ca:	e4 15       	cp	r30, r4
    a1cc:	08 f4       	brcc	.+2      	; 0xa1d0 <ProcessSprites+0xca>
    a1ce:	53 c0       	rjmp	.+166    	; 0xa276 <ProcessSprites+0x170>
    a1d0:	fb e1       	ldi	r31, 0x1B	; 27
    a1d2:	f5 15       	cp	r31, r5
    a1d4:	08 f4       	brcc	.+2      	; 0xa1d8 <ProcessSprites+0xd2>
    a1d6:	4f c0       	rjmp	.+158    	; 0xa276 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1d8:	c5 01       	movw	r24, r10
    a1da:	84 0d       	add	r24, r4
    a1dc:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    a1de:	9c 01       	movw	r18, r24
    a1e0:	20 5e       	subi	r18, 0xE0	; 224
    a1e2:	3e 4f       	sbci	r19, 0xFE	; 254
    a1e4:	3e 83       	std	Y+6, r19	; 0x06
    a1e6:	2d 83       	std	Y+5, r18	; 0x05
    a1e8:	f9 01       	movw	r30, r18
    a1ea:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    a1ec:	81 e0       	ldi	r24, 0x01	; 1
    a1ee:	98 31       	cpi	r25, 0x18	; 24
    a1f0:	08 f4       	brcc	.+2      	; 0xa1f4 <ProcessSprites+0xee>
    a1f2:	80 e0       	ldi	r24, 0x00	; 0
    a1f4:	21 e0       	ldi	r18, 0x01	; 1
    a1f6:	30 91 d9 0a 	lds	r19, 0x0AD9
    a1fa:	93 17       	cp	r25, r19
    a1fc:	18 f0       	brcs	.+6      	; 0xa204 <ProcessSprites+0xfe>
    a1fe:	20 e0       	ldi	r18, 0x00	; 0
    a200:	88 23       	and	r24, r24
    a202:	61 f1       	breq	.+88     	; 0xa25c <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    a204:	60 91 d8 0a 	lds	r22, 0x0AD8
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    a208:	68 31       	cpi	r22, 0x18	; 24
    a20a:	30 f5       	brcc	.+76     	; 0xa258 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    a20c:	88 23       	and	r24, r24
    a20e:	31 f0       	breq	.+12     	; 0xa21c <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    a210:	88 ee       	ldi	r24, 0xE8	; 232
    a212:	89 0f       	add	r24, r25
    a214:	9c 83       	std	Y+4, r25	; 0x04
    a216:	0e 94 72 40 	call	0x80e4	; 0x80e4 <CopyFlashTile>
    a21a:	06 c0       	rjmp	.+12     	; 0xa228 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    a21c:	22 23       	and	r18, r18
    a21e:	29 f0       	breq	.+10     	; 0xa22a <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    a220:	89 2f       	mov	r24, r25
    a222:	9c 83       	std	Y+4, r25	; 0x04
    a224:	0e 94 01 41 	call	0x8202	; 0x8202 <CopyRamTile>
    a228:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    a22a:	80 91 d8 0a 	lds	r24, 0x0AD8
    a22e:	e8 2f       	mov	r30, r24
    a230:	f0 e0       	ldi	r31, 0x00	; 0
    a232:	9f 01       	movw	r18, r30
    a234:	22 0f       	add	r18, r18
    a236:	33 1f       	adc	r19, r19
    a238:	e2 0f       	add	r30, r18
    a23a:	f3 1f       	adc	r31, r19
    a23c:	e0 57       	subi	r30, 0x70	; 112
    a23e:	f5 4f       	sbci	r31, 0xF5	; 245
    a240:	2d 81       	ldd	r18, Y+5	; 0x05
    a242:	3e 81       	ldd	r19, Y+6	; 0x06
    a244:	31 83       	std	Z+1, r19	; 0x01
    a246:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    a248:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    a24a:	f9 01       	movw	r30, r18
    a24c:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    a24e:	91 e0       	ldi	r25, 0x01	; 1
    a250:	98 0f       	add	r25, r24
    a252:	90 93 d8 0a 	sts	0x0AD8, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    a256:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    a258:	98 31       	cpi	r25, 0x18	; 24
    a25a:	68 f4       	brcc	.+26     	; 0xa276 <ProcessSprites+0x170>
    a25c:	80 91 d9 0a 	lds	r24, 0x0AD9
    a260:	98 17       	cp	r25, r24
    a262:	48 f0       	brcs	.+18     	; 0xa276 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a264:	93 01       	movw	r18, r6
    a266:	a6 01       	movw	r20, r12
    a268:	48 0d       	add	r20, r8
    a26a:	59 1d       	adc	r21, r9
    a26c:	6a 81       	ldd	r22, Y+2	; 0x02
    a26e:	7b 81       	ldd	r23, Y+3	; 0x03
    a270:	89 2f       	mov	r24, r25
    a272:	0e 94 a1 41 	call	0x8342	; 0x8342 <BlitSpritePart>
    a276:	ff ef       	ldi	r31, 0xFF	; 255
    a278:	cf 1a       	sub	r12, r31
    a27a:	df 0a       	sbc	r13, r31
    a27c:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    a27e:	c2 14       	cp	r12, r2
    a280:	08 f4       	brcc	.+2      	; 0xa284 <ProcessSprites+0x17e>
    a282:	a2 cf       	rjmp	.-188    	; 0xa1c8 <ProcessSprites+0xc2>
    a284:	2f ef       	ldi	r18, 0xFF	; 255
    a286:	e2 1a       	sub	r14, r18
    a288:	f2 0a       	sbc	r15, r18
    a28a:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    a28c:	99 81       	ldd	r25, Y+1	; 0x01
    a28e:	e9 16       	cp	r14, r25
    a290:	08 f4       	brcc	.+2      	; 0xa294 <ProcessSprites+0x18e>
    a292:	91 cf       	rjmp	.-222    	; 0xa1b6 <ProcessSprites+0xb0>
    a294:	0c 5f       	subi	r16, 0xFC	; 252
    a296:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    a298:	08 32       	cpi	r16, 0x28	; 40
    a29a:	11 05       	cpc	r17, r1
    a29c:	09 f0       	breq	.+2      	; 0xa2a0 <ProcessSprites+0x19a>
    a29e:	57 cf       	rjmp	.-338    	; 0xa14e <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    a2a0:	26 96       	adiw	r28, 0x06	; 6
    a2a2:	0f b6       	in	r0, 0x3f	; 63
    a2a4:	f8 94       	cli
    a2a6:	de bf       	out	0x3e, r29	; 62
    a2a8:	0f be       	out	0x3f, r0	; 63
    a2aa:	cd bf       	out	0x3d, r28	; 61
    a2ac:	df 91       	pop	r29
    a2ae:	cf 91       	pop	r28
    a2b0:	1f 91       	pop	r17
    a2b2:	0f 91       	pop	r16
    a2b4:	ff 90       	pop	r15
    a2b6:	ef 90       	pop	r14
    a2b8:	df 90       	pop	r13
    a2ba:	cf 90       	pop	r12
    a2bc:	bf 90       	pop	r11
    a2be:	af 90       	pop	r10
    a2c0:	9f 90       	pop	r9
    a2c2:	8f 90       	pop	r8
    a2c4:	7f 90       	pop	r7
    a2c6:	6f 90       	pop	r6
    a2c8:	5f 90       	pop	r5
    a2ca:	4f 90       	pop	r4
    a2cc:	3f 90       	pop	r3
    a2ce:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    a2d0:	0c 94 8e 41 	jmp	0x831c	; 0x831c <RestoreBackground>
	#endif

}
    a2d4:	26 96       	adiw	r28, 0x06	; 6
    a2d6:	0f b6       	in	r0, 0x3f	; 63
    a2d8:	f8 94       	cli
    a2da:	de bf       	out	0x3e, r29	; 62
    a2dc:	0f be       	out	0x3f, r0	; 63
    a2de:	cd bf       	out	0x3d, r28	; 61
    a2e0:	df 91       	pop	r29
    a2e2:	cf 91       	pop	r28
    a2e4:	1f 91       	pop	r17
    a2e6:	0f 91       	pop	r16
    a2e8:	ff 90       	pop	r15
    a2ea:	ef 90       	pop	r14
    a2ec:	df 90       	pop	r13
    a2ee:	cf 90       	pop	r12
    a2f0:	bf 90       	pop	r11
    a2f2:	af 90       	pop	r10
    a2f4:	9f 90       	pop	r9
    a2f6:	8f 90       	pop	r8
    a2f8:	7f 90       	pop	r7
    a2fa:	6f 90       	pop	r6
    a2fc:	5f 90       	pop	r5
    a2fe:	4f 90       	pop	r4
    a300:	3f 90       	pop	r3
    a302:	2f 90       	pop	r2
    a304:	08 95       	ret

0000a306 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a306:	df 92       	push	r13
    a308:	ef 92       	push	r14
    a30a:	ff 92       	push	r15
    a30c:	0f 93       	push	r16
    a30e:	1f 93       	push	r17
    a310:	cf 93       	push	r28
    a312:	df 93       	push	r29
    a314:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a316:	fb 01       	movw	r30, r22
    a318:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a31a:	31 96       	adiw	r30, 0x01	; 1
    a31c:	64 91       	lpm	r22, Z
    a31e:	5f ef       	ldi	r21, 0xFF	; 255
    a320:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a322:	24 2f       	mov	r18, r20
    a324:	21 70       	andi	r18, 0x01	; 1
    a326:	40 ff       	sbrs	r20, 0
    a328:	04 c0       	rjmp	.+8      	; 0xa332 <MapSprite2+0x2c>
			x=(mapWidth-1);
    a32a:	95 2f       	mov	r25, r21
			dx=-1;
    a32c:	ff 24       	eor	r15, r15
    a32e:	fa 94       	dec	r15
    a330:	03 c0       	rjmp	.+6      	; 0xa338 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a332:	ff 24       	eor	r15, r15
    a334:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a336:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a338:	41 ff       	sbrs	r20, 1
    a33a:	05 c0       	rjmp	.+10     	; 0xa346 <MapSprite2+0x40>
			y=(mapHeight-1);
    a33c:	7f ef       	ldi	r23, 0xFF	; 255
    a33e:	76 0f       	add	r23, r22
			dy=-1;
    a340:	ee 24       	eor	r14, r14
    a342:	ea 94       	dec	r14
    a344:	03 c0       	rjmp	.+6      	; 0xa34c <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a346:	ee 24       	eor	r14, r14
    a348:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a34a:	70 e0       	ldi	r23, 0x00	; 0
    a34c:	21 11       	cpse	r18, r1
    a34e:	01 c0       	rjmp	.+2      	; 0xa352 <MapSprite2+0x4c>
    a350:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a352:	00 e0       	ldi	r16, 0x00	; 0
    a354:	06 17       	cp	r16, r22
    a356:	09 f1       	breq	.+66     	; 0xa39a <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a358:	71 03       	mulsu	r23, r17
    a35a:	e0 01       	movw	r28, r0
    a35c:	11 24       	eor	r1, r1
    a35e:	d8 2e       	mov	r13, r24
    a360:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a362:	8d 15       	cp	r24, r13
    a364:	b1 f0       	breq	.+44     	; 0xa392 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a366:	9e 01       	movw	r18, r28
    a368:	29 0f       	add	r18, r25
    a36a:	31 1d       	adc	r19, r1
    a36c:	97 fd       	sbrc	r25, 7
    a36e:	3a 95       	dec	r19
    a370:	2e 5f       	subi	r18, 0xFE	; 254
    a372:	3f 4f       	sbci	r19, 0xFF	; 255
    a374:	fd 01       	movw	r30, r26
    a376:	e2 0f       	add	r30, r18
    a378:	f3 1f       	adc	r31, r19
    a37a:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a37c:	34 e0       	ldi	r19, 0x04	; 4
    a37e:	83 9f       	mul	r24, r19
    a380:	f0 01       	movw	r30, r0
    a382:	11 24       	eor	r1, r1
    a384:	e8 59       	subi	r30, 0x98	; 152
    a386:	fb 4f       	sbci	r31, 0xFB	; 251
    a388:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a38a:	8f 5f       	subi	r24, 0xFF	; 255
    a38c:	43 83       	std	Z+3, r20	; 0x03
    a38e:	9f 0d       	add	r25, r15
    a390:	e8 cf       	rjmp	.-48     	; 0xa362 <MapSprite2+0x5c>
    a392:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a394:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a396:	95 2f       	mov	r25, r21
    a398:	dd cf       	rjmp	.-70     	; 0xa354 <MapSprite2+0x4e>
	    }
	}
    a39a:	df 91       	pop	r29
    a39c:	cf 91       	pop	r28
    a39e:	1f 91       	pop	r17
    a3a0:	0f 91       	pop	r16
    a3a2:	ff 90       	pop	r15
    a3a4:	ef 90       	pop	r14
    a3a6:	df 90       	pop	r13
    a3a8:	08 95       	ret

0000a3aa <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a3aa:	0f 93       	push	r16
    a3ac:	cf 93       	push	r28
    a3ae:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a3b0:	30 e0       	ldi	r19, 0x00	; 0
    a3b2:	30 17       	cp	r19, r16
    a3b4:	e1 f0       	breq	.+56     	; 0xa3ee <MoveSprite+0x44>
    a3b6:	b4 2f       	mov	r27, r20
    a3b8:	a0 e2       	ldi	r26, 0x20	; 32
    a3ba:	a4 0f       	add	r26, r20
    a3bc:	78 2f       	mov	r23, r24
    a3be:	72 0f       	add	r23, r18
    a3c0:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a3c2:	87 17       	cp	r24, r23
    a3c4:	81 f0       	breq	.+32     	; 0xa3e6 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a3c6:	c4 e0       	ldi	r28, 0x04	; 4
    a3c8:	8c 9f       	mul	r24, r28
    a3ca:	f0 01       	movw	r30, r0
    a3cc:	11 24       	eor	r1, r1
    a3ce:	e8 59       	subi	r30, 0x98	; 152
    a3d0:	fb 4f       	sbci	r31, 0xFB	; 251
    a3d2:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a3d4:	41 3e       	cpi	r20, 0xE1	; 225
    a3d6:	51 05       	cpc	r21, r1
    a3d8:	14 f0       	brlt	.+4      	; 0xa3de <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a3da:	a1 83       	std	Z+1, r26	; 0x01
    a3dc:	01 c0       	rjmp	.+2      	; 0xa3e0 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a3de:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a3e0:	8f 5f       	subi	r24, 0xFF	; 255
    a3e2:	98 5f       	subi	r25, 0xF8	; 248
    a3e4:	ee cf       	rjmp	.-36     	; 0xa3c2 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a3e6:	3f 5f       	subi	r19, 0xFF	; 255
    a3e8:	48 5f       	subi	r20, 0xF8	; 248
    a3ea:	5f 4f       	sbci	r21, 0xFF	; 255
    a3ec:	e2 cf       	rjmp	.-60     	; 0xa3b2 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a3ee:	cf 91       	pop	r28
    a3f0:	0f 91       	pop	r16
    a3f2:	08 95       	ret

0000a3f4 <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    a3f4:	08 95       	ret

0000a3f6 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a3f6:	e8 e6       	ldi	r30, 0x68	; 104
    a3f8:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a3fa:	80 ef       	ldi	r24, 0xF0	; 240
    a3fc:	80 83       	st	Z, r24
    a3fe:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    a400:	94 e0       	ldi	r25, 0x04	; 4
    a402:	e0 39       	cpi	r30, 0x90	; 144
    a404:	f9 07       	cpc	r31, r25
    a406:	d1 f7       	brne	.-12     	; 0xa3fc <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    a408:	10 92 d8 0a 	sts	0x0AD8, r1
		user_ram_tiles_c_tmp = 0U;
    a40c:	10 92 da 0a 	sts	0x0ADA, r1
    a410:	08 95       	ret

0000a412 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    a412:	4f 92       	push	r4
    a414:	5f 92       	push	r5
    a416:	6f 92       	push	r6
    a418:	7f 92       	push	r7
    a41a:	8f 92       	push	r8
    a41c:	9f 92       	push	r9
    a41e:	af 92       	push	r10
    a420:	bf 92       	push	r11
    a422:	cf 92       	push	r12
    a424:	df 92       	push	r13
    a426:	ef 92       	push	r14
    a428:	ff 92       	push	r15
    a42a:	0f 93       	push	r16
    a42c:	1f 93       	push	r17
    a42e:	cf 93       	push	r28
    a430:	df 93       	push	r29
    a432:	68 2e       	mov	r6, r24
    a434:	56 2e       	mov	r5, r22
    a436:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    a438:	fa 01       	movw	r30, r20
    a43a:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    a43c:	31 96       	adiw	r30, 0x01	; 1
    a43e:	84 90       	lpm	r8, Z
    a440:	c7 2c       	mov	r12, r7
    a442:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a444:	00 e0       	ldi	r16, 0x00	; 0
    a446:	10 e0       	ldi	r17, 0x00	; 0
    a448:	91 2c       	mov	r9, r1
    a44a:	98 14       	cp	r9, r8
    a44c:	f1 f0       	breq	.+60     	; 0xa48a <DrawMap+0x78>
    a44e:	c0 e0       	ldi	r28, 0x00	; 0
    a450:	d0 e0       	ldi	r29, 0x00	; 0
    a452:	58 01       	movw	r10, r16
    a454:	f2 e0       	ldi	r31, 0x02	; 2
    a456:	af 0e       	add	r10, r31
    a458:	b1 1c       	adc	r11, r1
    a45a:	49 2c       	mov	r4, r9
    a45c:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    a45e:	c7 15       	cp	r28, r7
    a460:	80 f4       	brcc	.+32     	; 0xa482 <DrawMap+0x70>
    a462:	95 01       	movw	r18, r10
    a464:	2c 0f       	add	r18, r28
    a466:	3d 1f       	adc	r19, r29
    a468:	f7 01       	movw	r30, r14
    a46a:	e2 0f       	add	r30, r18
    a46c:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a46e:	24 91       	lpm	r18, Z
    a470:	42 2f       	mov	r20, r18
    a472:	50 e0       	ldi	r21, 0x00	; 0
    a474:	64 2d       	mov	r22, r4
    a476:	8c 2f       	mov	r24, r28
    a478:	86 0d       	add	r24, r6
    a47a:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
    a47e:	21 96       	adiw	r28, 0x01	; 1
    a480:	ee cf       	rjmp	.-36     	; 0xa45e <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a482:	93 94       	inc	r9
    a484:	0c 0d       	add	r16, r12
    a486:	1d 1d       	adc	r17, r13
    a488:	e0 cf       	rjmp	.-64     	; 0xa44a <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    a48a:	df 91       	pop	r29
    a48c:	cf 91       	pop	r28
    a48e:	1f 91       	pop	r17
    a490:	0f 91       	pop	r16
    a492:	ff 90       	pop	r15
    a494:	ef 90       	pop	r14
    a496:	df 90       	pop	r13
    a498:	cf 90       	pop	r12
    a49a:	bf 90       	pop	r11
    a49c:	af 90       	pop	r10
    a49e:	9f 90       	pop	r9
    a4a0:	8f 90       	pop	r8
    a4a2:	7f 90       	pop	r7
    a4a4:	6f 90       	pop	r6
    a4a6:	5f 90       	pop	r5
    a4a8:	4f 90       	pop	r4
    a4aa:	08 95       	ret

0000a4ac <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    a4ac:	df 92       	push	r13
    a4ae:	ef 92       	push	r14
    a4b0:	ff 92       	push	r15
    a4b2:	0f 93       	push	r16
    a4b4:	1f 93       	push	r17
    a4b6:	cf 93       	push	r28
    a4b8:	df 93       	push	r29
    a4ba:	f6 2e       	mov	r15, r22
    a4bc:	04 2f       	mov	r16, r20
    a4be:	d2 2e       	mov	r13, r18
    a4c0:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    a4c2:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    a4c4:	8a e0       	ldi	r24, 0x0A	; 10
    a4c6:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    a4c8:	01 11       	cpse	r16, r1
    a4ca:	02 c0       	rjmp	.+4      	; 0xa4d0 <PrintByte+0x24>
    a4cc:	11 11       	cpse	r17, r1
    a4ce:	07 c0       	rjmp	.+14     	; 0xa4de <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    a4d0:	80 2f       	mov	r24, r16
    a4d2:	6e 2d       	mov	r22, r14
    a4d4:	0e 94 2c 72 	call	0xe458	; 0xe458 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    a4d8:	40 e1       	ldi	r20, 0x10	; 16
    a4da:	49 0f       	add	r20, r25
    a4dc:	05 c0       	rjmp	.+10     	; 0xa4e8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    a4de:	dd 20       	and	r13, r13
    a4e0:	11 f0       	breq	.+4      	; 0xa4e6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    a4e2:	40 e1       	ldi	r20, 0x10	; 16
    a4e4:	01 c0       	rjmp	.+2      	; 0xa4e8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    a4e6:	40 e0       	ldi	r20, 0x00	; 0
    a4e8:	6f 2d       	mov	r22, r15
    a4ea:	8c 2f       	mov	r24, r28
    a4ec:	0e 94 c2 43 	call	0x8784	; 0x8784 <SetFont>
			}
		}
		val=val/10;
    a4f0:	80 2f       	mov	r24, r16
    a4f2:	6e 2d       	mov	r22, r14
    a4f4:	0e 94 2c 72 	call	0xe458	; 0xe458 <__udivmodqi4>
    a4f8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    a4fa:	1f 5f       	subi	r17, 0xFF	; 255
    a4fc:	21 97       	sbiw	r28, 0x01	; 1
    a4fe:	13 30       	cpi	r17, 0x03	; 3
    a500:	19 f7       	brne	.-58     	; 0xa4c8 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    a502:	df 91       	pop	r29
    a504:	cf 91       	pop	r28
    a506:	1f 91       	pop	r17
    a508:	0f 91       	pop	r16
    a50a:	ff 90       	pop	r15
    a50c:	ef 90       	pop	r14
    a50e:	df 90       	pop	r13
    a510:	08 95       	ret

0000a512 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    a512:	0f 93       	push	r16
    a514:	1f 93       	push	r17
    a516:	cf 93       	push	r28
    a518:	df 93       	push	r29
    a51a:	06 2f       	mov	r16, r22
    a51c:	c4 2f       	mov	r28, r20
    a51e:	d5 2f       	mov	r29, r21
    a520:	18 2f       	mov	r17, r24
    a522:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a524:	fe 01       	movw	r30, r28
    a526:	44 91       	lpm	r20, Z
		if(c!=0){
    a528:	44 23       	and	r20, r20
    a52a:	49 f0       	breq	.+18     	; 0xa53e <Print+0x2c>
			c=((c&127)-32);			
    a52c:	4f 77       	andi	r20, 0x7F	; 127
    a52e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    a530:	60 2f       	mov	r22, r16
    a532:	8c 2f       	mov	r24, r28
    a534:	81 0f       	add	r24, r17
    a536:	0e 94 c2 43 	call	0x8784	; 0x8784 <SetFont>
    a53a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    a53c:	f3 cf       	rjmp	.-26     	; 0xa524 <Print+0x12>
	
}
    a53e:	df 91       	pop	r29
    a540:	cf 91       	pop	r28
    a542:	1f 91       	pop	r17
    a544:	0f 91       	pop	r16
    a546:	08 95       	ret

0000a548 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    a548:	40 52       	subi	r20, 0x20	; 32
    a54a:	0c 94 c2 43 	jmp	0x8784	; 0x8784 <SetFont>

0000a54e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a54e:	0f 93       	push	r16
    a550:	1f 93       	push	r17
    a552:	cf 93       	push	r28
    a554:	df 93       	push	r29
    a556:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a558:	c0 e0       	ldi	r28, 0x00	; 0
    a55a:	d0 e0       	ldi	r29, 0x00	; 0
    a55c:	c0 17       	cp	r28, r16
    a55e:	d1 07       	cpc	r29, r17
    a560:	44 f4       	brge	.+16     	; 0xa572 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a562:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <GetVsyncFlag>
    a566:	88 23       	and	r24, r24
    a568:	e1 f3       	breq	.-8      	; 0xa562 <WaitVsync+0x14>
		ClearVsyncFlag();		
    a56a:	0e 94 e0 43 	call	0x87c0	; 0x87c0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a56e:	21 96       	adiw	r28, 0x01	; 1
    a570:	f5 cf       	rjmp	.-22     	; 0xa55c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a572:	df 91       	pop	r29
    a574:	cf 91       	pop	r28
    a576:	1f 91       	pop	r17
    a578:	0f 91       	pop	r16
    a57a:	08 95       	ret

0000a57c <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a57c:	80 93 c3 0b 	sts	0x0BC3, r24
	currFadeFrame=0;
    a580:	10 92 c6 0b 	sts	0x0BC6, r1
	fadeActive=true;
    a584:	81 e0       	ldi	r24, 0x01	; 1
    a586:	80 93 c5 0b 	sts	0x0BC5, r24
		
	if(blocking){
    a58a:	66 23       	and	r22, r22
    a58c:	21 f0       	breq	.+8      	; 0xa596 <doFade+0x1a>
		while(fadeActive==true);
    a58e:	80 91 c5 0b 	lds	r24, 0x0BC5
    a592:	81 11       	cpse	r24, r1
    a594:	fc cf       	rjmp	.-8      	; 0xa58e <doFade+0x12>
    a596:	08 95       	ret

0000a598 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a598:	81 11       	cpse	r24, r1
    a59a:	03 c0       	rjmp	.+6      	; 0xa5a2 <FadeIn+0xa>
		DDRC=0xff;
    a59c:	8f ef       	ldi	r24, 0xFF	; 255
    a59e:	87 b9       	out	0x07, r24	; 7
		return;
    a5a0:	08 95       	ret
	}
	fadeStep=1;
    a5a2:	91 e0       	ldi	r25, 0x01	; 1
    a5a4:	90 93 c7 0b 	sts	0x0BC7, r25
	fadeDir=1;
    a5a8:	90 93 c4 0b 	sts	0x0BC4, r25
	doFade(speed,blocking);
    a5ac:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <doFade>

0000a5b0 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a5b0:	81 11       	cpse	r24, r1
    a5b2:	02 c0       	rjmp	.+4      	; 0xa5b8 <FadeOut+0x8>
		DDRC=0;
    a5b4:	17 b8       	out	0x07, r1	; 7
		return;
    a5b6:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a5b8:	9c e0       	ldi	r25, 0x0C	; 12
    a5ba:	90 93 c7 0b 	sts	0x0BC7, r25
	fadeDir=-1;
    a5be:	9f ef       	ldi	r25, 0xFF	; 255
    a5c0:	90 93 c4 0b 	sts	0x0BC4, r25
	doFade(speed,blocking);
    a5c4:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <doFade>

0000a5c8 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a5c8:	80 91 c5 0b 	lds	r24, 0x0BC5
    a5cc:	88 23       	and	r24, r24
    a5ce:	01 f1       	breq	.+64     	; 0xa610 <ProcessFading+0x48>
		if(currFadeFrame==0){
    a5d0:	80 91 c6 0b 	lds	r24, 0x0BC6
    a5d4:	81 11       	cpse	r24, r1
    a5d6:	19 c0       	rjmp	.+50     	; 0xa60a <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a5d8:	80 91 c3 0b 	lds	r24, 0x0BC3
    a5dc:	80 93 c6 0b 	sts	0x0BC6, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a5e0:	e0 91 c7 0b 	lds	r30, 0x0BC7
    a5e4:	f0 e0       	ldi	r31, 0x00	; 0
    a5e6:	e5 52       	subi	r30, 0x25	; 37
    a5e8:	ff 4f       	sbci	r31, 0xFF	; 255
    a5ea:	e4 91       	lpm	r30, Z
    a5ec:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a5ee:	90 91 c4 0b 	lds	r25, 0x0BC4
    a5f2:	80 91 c7 0b 	lds	r24, 0x0BC7
    a5f6:	89 0f       	add	r24, r25
    a5f8:	80 93 c7 0b 	sts	0x0BC7, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a5fc:	88 23       	and	r24, r24
    a5fe:	11 f0       	breq	.+4      	; 0xa604 <ProcessFading+0x3c>
    a600:	8d 30       	cpi	r24, 0x0D	; 13
    a602:	31 f4       	brne	.+12     	; 0xa610 <ProcessFading+0x48>
				fadeActive=false;
    a604:	10 92 c5 0b 	sts	0x0BC5, r1
    a608:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a60a:	81 50       	subi	r24, 0x01	; 1
    a60c:	80 93 c6 0b 	sts	0x0BC6, r24
    a610:	08 95       	ret

0000a612 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    a612:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    a616:	0c 94 83 50 	jmp	0xa106	; 0xa106 <ProcessSprites>

0000a61a <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    a61a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a61c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a61e:	93 81       	ldd	r25, Z+3	; 0x03
    a620:	9f 5f       	subi	r25, 0xFF	; 255
    a622:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a624:	22 81       	ldd	r18, Z+2	; 0x02
    a626:	80 81       	ld	r24, Z
    a628:	92 17       	cp	r25, r18
    a62a:	38 f4       	brcc	.+14     	; 0xa63a <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    a62c:	e8 0f       	add	r30, r24
    a62e:	f1 1d       	adc	r31, r1
    a630:	e8 0f       	add	r30, r24
    a632:	f1 1d       	adc	r31, r1
    a634:	86 81       	ldd	r24, Z+6	; 0x06
    a636:	97 81       	ldd	r25, Z+7	; 0x07
    a638:	08 95       	ret
	}
	anim->frame_count = 0;
    a63a:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a63c:	90 e0       	ldi	r25, 0x00	; 0
    a63e:	01 96       	adiw	r24, 0x01	; 1
    a640:	61 81       	ldd	r22, Z+1	; 0x01
    a642:	70 e0       	ldi	r23, 0x00	; 0
    a644:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    a648:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a64a:	81 11       	cpse	r24, r1
    a64c:	02 c0       	rjmp	.+4      	; 0xa652 <LBGetNextFrame+0x38>
    a64e:	21 e0       	ldi	r18, 0x01	; 1
    a650:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    a652:	99 27       	eor	r25, r25
    a654:	03 96       	adiw	r24, 0x03	; 3
    a656:	88 0f       	add	r24, r24
    a658:	99 1f       	adc	r25, r25
    a65a:	e8 0f       	add	r30, r24
    a65c:	f9 1f       	adc	r31, r25
    a65e:	80 81       	ld	r24, Z
    a660:	91 81       	ldd	r25, Z+1	; 0x01
}
    a662:	08 95       	ret

0000a664 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    a664:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a666:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a668:	93 81       	ldd	r25, Z+3	; 0x03
    a66a:	9f 5f       	subi	r25, 0xFF	; 255
    a66c:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a66e:	22 81       	ldd	r18, Z+2	; 0x02
    a670:	80 81       	ld	r24, Z
    a672:	92 17       	cp	r25, r18
    a674:	e0 f0       	brcs	.+56     	; 0xa6ae <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    a676:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    a678:	95 81       	ldd	r25, Z+5	; 0x05
    a67a:	99 23       	and	r25, r25
    a67c:	49 f0       	breq	.+18     	; 0xa690 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    a67e:	81 50       	subi	r24, 0x01	; 1
    a680:	10 f0       	brcs	.+4      	; 0xa686 <LBGetNextFrameReverse+0x22>
    a682:	80 83       	st	Z, r24
    a684:	13 c0       	rjmp	.+38     	; 0xa6ac <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    a686:	10 82       	st	Z, r1
			anim->looped = 1;
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    a68c:	15 82       	std	Z+5, r1	; 0x05
    a68e:	0e c0       	rjmp	.+28     	; 0xa6ac <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a690:	21 81       	ldd	r18, Z+1	; 0x01
    a692:	90 e0       	ldi	r25, 0x00	; 0
    a694:	01 96       	adiw	r24, 0x01	; 1
    a696:	62 2f       	mov	r22, r18
    a698:	70 e0       	ldi	r23, 0x00	; 0
    a69a:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    a69e:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    a6a0:	81 11       	cpse	r24, r1
    a6a2:	04 c0       	rjmp	.+8      	; 0xa6ac <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    a6a4:	81 e0       	ldi	r24, 0x01	; 1
    a6a6:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    a6a8:	21 50       	subi	r18, 0x01	; 1
    a6aa:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    a6ac:	80 81       	ld	r24, Z
    a6ae:	e8 0f       	add	r30, r24
    a6b0:	f1 1d       	adc	r31, r1
    a6b2:	e8 0f       	add	r30, r24
    a6b4:	f1 1d       	adc	r31, r1
    a6b6:	86 81       	ldd	r24, Z+6	; 0x06
    a6b8:	97 81       	ldd	r25, Z+7	; 0x07
}
    a6ba:	08 95       	ret

0000a6bc <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a6bc:	0f 93       	push	r16
    a6be:	1f 93       	push	r17
    a6c0:	cf 93       	push	r28
    a6c2:	df 93       	push	r29
    a6c4:	1f 92       	push	r1
    a6c6:	cd b7       	in	r28, 0x3d	; 61
    a6c8:	de b7       	in	r29, 0x3e	; 62
    a6ca:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    a6cc:	86 2f       	mov	r24, r22
    a6ce:	69 83       	std	Y+1, r22	; 0x01
    a6d0:	0e 94 e6 43 	call	0x87cc	; 0x87cc <ReadJoypad>
    a6d4:	d8 01       	movw	r26, r16
    a6d6:	15 96       	adiw	r26, 0x05	; 5
    a6d8:	9c 93       	st	X, r25
    a6da:	8e 93       	st	-X, r24
    a6dc:	14 97       	sbiw	r26, 0x04	; 4
    a6de:	69 81       	ldd	r22, Y+1	; 0x01
    a6e0:	e6 2f       	mov	r30, r22
    a6e2:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a6e4:	00 97       	sbiw	r24, 0x00	; 0
    a6e6:	51 f0       	breq	.+20     	; 0xa6fc <LBGetJoyPadState+0x40>
    a6e8:	df 01       	movw	r26, r30
    a6ea:	aa 0f       	add	r26, r26
    a6ec:	bb 1f       	adc	r27, r27
    a6ee:	a5 5c       	subi	r26, 0xC5	; 197
    a6f0:	b4 4f       	sbci	r27, 0xF4	; 244
    a6f2:	2d 91       	ld	r18, X+
    a6f4:	3c 91       	ld	r19, X
    a6f6:	82 17       	cp	r24, r18
    a6f8:	93 07       	cpc	r25, r19
    a6fa:	21 f0       	breq	.+8      	; 0xa704 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a6fc:	d8 01       	movw	r26, r16
    a6fe:	16 96       	adiw	r26, 0x06	; 6
    a700:	1c 92       	st	X, r1
    a702:	07 c0       	rjmp	.+14     	; 0xa712 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a704:	d8 01       	movw	r26, r16
    a706:	16 96       	adiw	r26, 0x06	; 6
    a708:	2c 91       	ld	r18, X
    a70a:	16 97       	sbiw	r26, 0x06	; 6
    a70c:	2f 5f       	subi	r18, 0xFF	; 255
    a70e:	16 96       	adiw	r26, 0x06	; 6
    a710:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a712:	ee 0f       	add	r30, r30
    a714:	ff 1f       	adc	r31, r31
    a716:	e5 5c       	subi	r30, 0xC5	; 197
    a718:	f4 4f       	sbci	r31, 0xF4	; 244
    a71a:	20 81       	ld	r18, Z
    a71c:	31 81       	ldd	r19, Z+1	; 0x01
    a71e:	a9 01       	movw	r20, r18
    a720:	40 95       	com	r20
    a722:	50 95       	com	r21
    a724:	48 23       	and	r20, r24
    a726:	59 23       	and	r21, r25
    a728:	d8 01       	movw	r26, r16
    a72a:	11 96       	adiw	r26, 0x01	; 1
    a72c:	5c 93       	st	X, r21
    a72e:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a730:	ac 01       	movw	r20, r24
    a732:	40 95       	com	r20
    a734:	50 95       	com	r21
    a736:	24 23       	and	r18, r20
    a738:	35 23       	and	r19, r21
    a73a:	13 96       	adiw	r26, 0x03	; 3
    a73c:	3c 93       	st	X, r19
    a73e:	2e 93       	st	-X, r18
    a740:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a742:	91 83       	std	Z+1, r25	; 0x01
    a744:	80 83       	st	Z, r24
}
    a746:	0f 90       	pop	r0
    a748:	df 91       	pop	r29
    a74a:	cf 91       	pop	r28
    a74c:	1f 91       	pop	r17
    a74e:	0f 91       	pop	r16
    a750:	08 95       	ret

0000a752 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    a752:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    a754:	fb 01       	movw	r30, r22
    a756:	2e 2f       	mov	r18, r30
    a758:	23 1b       	sub	r18, r19
    a75a:	24 17       	cp	r18, r20
    a75c:	28 f4       	brcc	.+10     	; 0xa768 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    a75e:	21 91       	ld	r18, Z+
    a760:	dc 01       	movw	r26, r24
    a762:	2d 93       	st	X+, r18
    a764:	cd 01       	movw	r24, r26
    a766:	f7 cf       	rjmp	.-18     	; 0xa756 <LBCopyChars+0x4>
	}
}
    a768:	08 95       	ret

0000a76a <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    a76a:	af 92       	push	r10
    a76c:	bf 92       	push	r11
    a76e:	cf 92       	push	r12
    a770:	df 92       	push	r13
    a772:	ef 92       	push	r14
    a774:	ff 92       	push	r15
    a776:	0f 93       	push	r16
    a778:	1f 93       	push	r17
    a77a:	cf 93       	push	r28
    a77c:	df 93       	push	r29
    a77e:	1f 92       	push	r1
    a780:	cd b7       	in	r28, 0x3d	; 61
    a782:	de b7       	in	r29, 0x3e	; 62
    a784:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    a786:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    a788:	c6 2e       	mov	r12, r22
    a78a:	d1 2c       	mov	r13, r1
    a78c:	90 e0       	ldi	r25, 0x00	; 0
    a78e:	5c 01       	movw	r10, r24
    a790:	a4 1a       	sub	r10, r20
    a792:	b5 0a       	sbc	r11, r21
    a794:	80 2f       	mov	r24, r16
    a796:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    a798:	82 17       	cp	r24, r18
    a79a:	60 f4       	brcc	.+24     	; 0xa7b4 <LBPrintStr+0x4a>
    a79c:	c5 01       	movw	r24, r10
    a79e:	80 0f       	add	r24, r16
    a7a0:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    a7a2:	f8 01       	movw	r30, r16
    a7a4:	41 91       	ld	r20, Z+
    a7a6:	8f 01       	movw	r16, r30
    a7a8:	b6 01       	movw	r22, r12
    a7aa:	29 83       	std	Y+1, r18	; 0x01
    a7ac:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
    a7b0:	29 81       	ldd	r18, Y+1	; 0x01
    a7b2:	f0 cf       	rjmp	.-32     	; 0xa794 <LBPrintStr+0x2a>
	}
}
    a7b4:	0f 90       	pop	r0
    a7b6:	df 91       	pop	r29
    a7b8:	cf 91       	pop	r28
    a7ba:	1f 91       	pop	r17
    a7bc:	0f 91       	pop	r16
    a7be:	ff 90       	pop	r15
    a7c0:	ef 90       	pop	r14
    a7c2:	df 90       	pop	r13
    a7c4:	cf 90       	pop	r12
    a7c6:	bf 90       	pop	r11
    a7c8:	af 90       	pop	r10
    a7ca:	08 95       	ret

0000a7cc <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a7cc:	af 92       	push	r10
    a7ce:	cf 92       	push	r12
    a7d0:	ef 92       	push	r14
    a7d2:	ff 92       	push	r15
    a7d4:	0f 93       	push	r16
    a7d6:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a7d8:	70 e0       	ldi	r23, 0x00	; 0
    a7da:	f1 2c       	mov	r15, r1
    a7dc:	fb 01       	movw	r30, r22
    a7de:	e2 0f       	add	r30, r18
    a7e0:	f1 1d       	adc	r31, r1
    a7e2:	ee 16       	cp	r14, r30
    a7e4:	ff 06       	cpc	r15, r31
    a7e6:	a4 f4       	brge	.+40     	; 0xa810 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a7e8:	ea 0c       	add	r14, r10
    a7ea:	f1 1c       	adc	r15, r1
    a7ec:	6e 15       	cp	r22, r14
    a7ee:	7f 05       	cpc	r23, r15
    a7f0:	7c f4       	brge	.+30     	; 0xa810 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a7f2:	28 2f       	mov	r18, r24
    a7f4:	30 e0       	ldi	r19, 0x00	; 0
    a7f6:	10 e0       	ldi	r17, 0x00	; 0
    a7f8:	c9 01       	movw	r24, r18
    a7fa:	84 0f       	add	r24, r20
    a7fc:	91 1d       	adc	r25, r1
    a7fe:	08 17       	cp	r16, r24
    a800:	19 07       	cpc	r17, r25
    a802:	34 f4       	brge	.+12     	; 0xa810 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a804:	0c 0d       	add	r16, r12
    a806:	11 1d       	adc	r17, r1
    a808:	81 e0       	ldi	r24, 0x01	; 1
    a80a:	20 17       	cp	r18, r16
    a80c:	31 07       	cpc	r19, r17
    a80e:	0c f0       	brlt	.+2      	; 0xa812 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a810:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a812:	1f 91       	pop	r17
    a814:	0f 91       	pop	r16
    a816:	ff 90       	pop	r15
    a818:	ef 90       	pop	r14
    a81a:	cf 90       	pop	r12
    a81c:	af 90       	pop	r10
    a81e:	08 95       	ret

0000a820 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    a820:	2f 92       	push	r2
    a822:	3f 92       	push	r3
    a824:	4f 92       	push	r4
    a826:	5f 92       	push	r5
    a828:	6f 92       	push	r6
    a82a:	7f 92       	push	r7
    a82c:	8f 92       	push	r8
    a82e:	9f 92       	push	r9
    a830:	af 92       	push	r10
    a832:	bf 92       	push	r11
    a834:	cf 92       	push	r12
    a836:	df 92       	push	r13
    a838:	ef 92       	push	r14
    a83a:	ff 92       	push	r15
    a83c:	0f 93       	push	r16
    a83e:	1f 93       	push	r17
    a840:	cf 93       	push	r28
    a842:	df 93       	push	r29
    a844:	00 d0       	rcall	.+0      	; 0xa846 <LBLineIntersect+0x26>
    a846:	00 d0       	rcall	.+0      	; 0xa848 <LBLineIntersect+0x28>
    a848:	cd b7       	in	r28, 0x3d	; 61
    a84a:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a84c:	f1 2c       	mov	r15, r1
    a84e:	8a 2c       	mov	r8, r10
    a850:	91 2c       	mov	r9, r1
    a852:	8e 18       	sub	r8, r14
    a854:	9f 08       	sbc	r9, r15
    a856:	a8 2e       	mov	r10, r24
    a858:	b1 2c       	mov	r11, r1
    a85a:	24 2e       	mov	r2, r20
    a85c:	31 2c       	mov	r3, r1
    a85e:	2a 18       	sub	r2, r10
    a860:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a862:	10 e0       	ldi	r17, 0x00	; 0
    a864:	d1 2c       	mov	r13, r1
    a866:	c0 1a       	sub	r12, r16
    a868:	d1 0a       	sbc	r13, r17
    a86a:	46 2f       	mov	r20, r22
    a86c:	50 e0       	ldi	r21, 0x00	; 0
    a86e:	5c 83       	std	Y+4, r21	; 0x04
    a870:	4b 83       	std	Y+3, r20	; 0x03
    a872:	82 2f       	mov	r24, r18
    a874:	90 e0       	ldi	r25, 0x00	; 0
    a876:	9a 83       	std	Y+2, r25	; 0x02
    a878:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a87a:	82 9c       	mul	r8, r2
    a87c:	90 01       	movw	r18, r0
    a87e:	83 9c       	mul	r8, r3
    a880:	30 0d       	add	r19, r0
    a882:	92 9c       	mul	r9, r2
    a884:	30 0d       	add	r19, r0
    a886:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a888:	ca 01       	movw	r24, r20
    a88a:	e9 81       	ldd	r30, Y+1	; 0x01
    a88c:	fa 81       	ldd	r31, Y+2	; 0x02
    a88e:	8e 1b       	sub	r24, r30
    a890:	9f 0b       	sbc	r25, r31
    a892:	c8 9e       	mul	r12, r24
    a894:	b0 01       	movw	r22, r0
    a896:	c9 9e       	mul	r12, r25
    a898:	70 0d       	add	r23, r0
    a89a:	d8 9e       	mul	r13, r24
    a89c:	70 0d       	add	r23, r0
    a89e:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a8a0:	62 0f       	add	r22, r18
    a8a2:	73 1f       	adc	r23, r19
    a8a4:	88 27       	eor	r24, r24
    a8a6:	77 fd       	sbrc	r23, 7
    a8a8:	80 95       	com	r24
    a8aa:	98 2f       	mov	r25, r24
    a8ac:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    a8b0:	2b 01       	movw	r4, r22
    a8b2:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a8b4:	20 e0       	ldi	r18, 0x00	; 0
    a8b6:	30 e0       	ldi	r19, 0x00	; 0
    a8b8:	a9 01       	movw	r20, r18
    a8ba:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    a8be:	88 23       	and	r24, r24
    a8c0:	09 f4       	brne	.+2      	; 0xa8c4 <LBLineIntersect+0xa4>
    a8c2:	6c c0       	rjmp	.+216    	; 0xa99c <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8c4:	4b 81       	ldd	r20, Y+3	; 0x03
    a8c6:	5c 81       	ldd	r21, Y+4	; 0x04
    a8c8:	4e 19       	sub	r20, r14
    a8ca:	5f 09       	sbc	r21, r15
    a8cc:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8ce:	0a 19       	sub	r16, r10
    a8d0:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8d2:	c4 9e       	mul	r12, r20
    a8d4:	c0 01       	movw	r24, r0
    a8d6:	c5 9e       	mul	r12, r21
    a8d8:	90 0d       	add	r25, r0
    a8da:	d4 9e       	mul	r13, r20
    a8dc:	90 0d       	add	r25, r0
    a8de:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8e0:	80 9e       	mul	r8, r16
    a8e2:	b0 01       	movw	r22, r0
    a8e4:	81 9e       	mul	r8, r17
    a8e6:	70 0d       	add	r23, r0
    a8e8:	90 9e       	mul	r9, r16
    a8ea:	70 0d       	add	r23, r0
    a8ec:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8ee:	68 0f       	add	r22, r24
    a8f0:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8f2:	88 27       	eor	r24, r24
    a8f4:	77 fd       	sbrc	r23, 7
    a8f6:	80 95       	com	r24
    a8f8:	98 2f       	mov	r25, r24
    a8fa:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8fe:	a3 01       	movw	r20, r6
    a900:	92 01       	movw	r18, r4
    a902:	0e 94 c9 72 	call	0xe592	; 0xe592 <__divsf3>
    a906:	4b 01       	movw	r8, r22
    a908:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a90a:	20 e0       	ldi	r18, 0x00	; 0
    a90c:	30 e0       	ldi	r19, 0x00	; 0
    a90e:	a9 01       	movw	r20, r18
    a910:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    a914:	87 fd       	sbrc	r24, 7
    a916:	42 c0       	rjmp	.+132    	; 0xa99c <LBLineIntersect+0x17c>
    a918:	20 e0       	ldi	r18, 0x00	; 0
    a91a:	30 e0       	ldi	r19, 0x00	; 0
    a91c:	40 e8       	ldi	r20, 0x80	; 128
    a91e:	5f e3       	ldi	r21, 0x3F	; 63
    a920:	c5 01       	movw	r24, r10
    a922:	b4 01       	movw	r22, r8
    a924:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    a928:	18 16       	cp	r1, r24
    a92a:	c4 f1       	brlt	.+112    	; 0xa99c <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a92c:	2e 9c       	mul	r2, r14
    a92e:	b0 01       	movw	r22, r0
    a930:	2f 9c       	mul	r2, r15
    a932:	70 0d       	add	r23, r0
    a934:	3e 9c       	mul	r3, r14
    a936:	70 0d       	add	r23, r0
    a938:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a93a:	29 81       	ldd	r18, Y+1	; 0x01
    a93c:	3a 81       	ldd	r19, Y+2	; 0x02
    a93e:	8b 81       	ldd	r24, Y+3	; 0x03
    a940:	9c 81       	ldd	r25, Y+4	; 0x04
    a942:	28 1b       	sub	r18, r24
    a944:	39 0b       	sbc	r19, r25
    a946:	20 9f       	mul	r18, r16
    a948:	c0 01       	movw	r24, r0
    a94a:	21 9f       	mul	r18, r17
    a94c:	90 0d       	add	r25, r0
    a94e:	30 9f       	mul	r19, r16
    a950:	90 0d       	add	r25, r0
    a952:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a954:	68 0f       	add	r22, r24
    a956:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a958:	88 27       	eor	r24, r24
    a95a:	77 fd       	sbrc	r23, 7
    a95c:	80 95       	com	r24
    a95e:	98 2f       	mov	r25, r24
    a960:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a964:	a3 01       	movw	r20, r6
    a966:	92 01       	movw	r18, r4
    a968:	0e 94 c9 72 	call	0xe592	; 0xe592 <__divsf3>
    a96c:	6b 01       	movw	r12, r22
    a96e:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a970:	20 e0       	ldi	r18, 0x00	; 0
    a972:	30 e0       	ldi	r19, 0x00	; 0
    a974:	a9 01       	movw	r20, r18
    a976:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    a97a:	87 fd       	sbrc	r24, 7
    a97c:	0f c0       	rjmp	.+30     	; 0xa99c <LBLineIntersect+0x17c>
    a97e:	11 e0       	ldi	r17, 0x01	; 1
    a980:	20 e0       	ldi	r18, 0x00	; 0
    a982:	30 e0       	ldi	r19, 0x00	; 0
    a984:	40 e8       	ldi	r20, 0x80	; 128
    a986:	5f e3       	ldi	r21, 0x3F	; 63
    a988:	c7 01       	movw	r24, r14
    a98a:	b6 01       	movw	r22, r12
    a98c:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    a990:	18 16       	cp	r1, r24
    a992:	0c f0       	brlt	.+2      	; 0xa996 <LBLineIntersect+0x176>
    a994:	10 e0       	ldi	r17, 0x00	; 0
    a996:	81 e0       	ldi	r24, 0x01	; 1
    a998:	81 27       	eor	r24, r17
    a99a:	01 c0       	rjmp	.+2      	; 0xa99e <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a99c:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a99e:	0f 90       	pop	r0
    a9a0:	0f 90       	pop	r0
    a9a2:	0f 90       	pop	r0
    a9a4:	0f 90       	pop	r0
    a9a6:	df 91       	pop	r29
    a9a8:	cf 91       	pop	r28
    a9aa:	1f 91       	pop	r17
    a9ac:	0f 91       	pop	r16
    a9ae:	ff 90       	pop	r15
    a9b0:	ef 90       	pop	r14
    a9b2:	df 90       	pop	r13
    a9b4:	cf 90       	pop	r12
    a9b6:	bf 90       	pop	r11
    a9b8:	af 90       	pop	r10
    a9ba:	9f 90       	pop	r9
    a9bc:	8f 90       	pop	r8
    a9be:	7f 90       	pop	r7
    a9c0:	6f 90       	pop	r6
    a9c2:	5f 90       	pop	r5
    a9c4:	4f 90       	pop	r4
    a9c6:	3f 90       	pop	r3
    a9c8:	2f 90       	pop	r2
    a9ca:	08 95       	ret

0000a9cc <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a9cc:	0f 93       	push	r16
    a9ce:	1f 93       	push	r17
    a9d0:	cf 93       	push	r28
    a9d2:	df 93       	push	r29
    a9d4:	8c 01       	movw	r16, r24
    a9d6:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetTrueRandomSeed();
    a9d8:	80 91 39 0b 	lds	r24, 0x0B39
    a9dc:	90 91 3a 0b 	lds	r25, 0x0B3A
    a9e0:	89 2b       	or	r24, r25
    a9e2:	31 f4       	brne	.+12     	; 0xa9f0 <LBRandom+0x24>
    a9e4:	0e 94 34 44 	call	0x8868	; 0x8868 <GetTrueRandomSeed>
    a9e8:	90 93 3a 0b 	sts	0x0B3A, r25
    a9ec:	80 93 39 0b 	sts	0x0B39, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    a9f0:	90 91 38 0b 	lds	r25, 0x0B38
    a9f4:	20 91 39 0b 	lds	r18, 0x0B39
    a9f8:	30 91 3a 0b 	lds	r19, 0x0B3A
    a9fc:	09 2e       	mov	r0, r25
    a9fe:	02 c0       	rjmp	.+4      	; 0xaa04 <LBRandom+0x38>
    aa00:	36 95       	lsr	r19
    aa02:	27 95       	ror	r18
    aa04:	0a 94       	dec	r0
    aa06:	e2 f7       	brpl	.-8      	; 0xaa00 <LBRandom+0x34>
	unsigned int delta = to - from;
    aa08:	be 01       	movw	r22, r28
    aa0a:	60 1b       	sub	r22, r16
    aa0c:	71 0b       	sbc	r23, r17

	shift_count++;
    aa0e:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    aa10:	90 31       	cpi	r25, 0x10	; 16
    aa12:	18 f4       	brcc	.+6      	; 0xaa1a <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    aa14:	90 93 38 0b 	sts	0x0B38, r25
    aa18:	02 c0       	rjmp	.+4      	; 0xaa1e <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    aa1a:	10 92 38 0b 	sts	0x0B38, r1

	return from + ((delta + shifted) % delta);
    aa1e:	cb 01       	movw	r24, r22
    aa20:	82 0f       	add	r24, r18
    aa22:	93 1f       	adc	r25, r19
    aa24:	0e 94 38 72 	call	0xe470	; 0xe470 <__udivmodhi4>
}
    aa28:	80 0f       	add	r24, r16
    aa2a:	91 1f       	adc	r25, r17
    aa2c:	df 91       	pop	r29
    aa2e:	cf 91       	pop	r28
    aa30:	1f 91       	pop	r17
    aa32:	0f 91       	pop	r16
    aa34:	08 95       	ret

0000aa36 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    aa36:	cf 93       	push	r28
    aa38:	df 93       	push	r29
    aa3a:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    aa3c:	c0 e0       	ldi	r28, 0x00	; 0
    aa3e:	cd 17       	cp	r28, r29
    aa40:	31 f0       	breq	.+12     	; 0xaa4e <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    aa42:	8f ef       	ldi	r24, 0xFF	; 255
    aa44:	9f ef       	ldi	r25, 0xFF	; 255
    aa46:	0e 94 f2 43 	call	0x87e4	; 0x87e4 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    aa4a:	cf 5f       	subi	r28, 0xFF	; 255
    aa4c:	f8 cf       	rjmp	.-16     	; 0xaa3e <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    aa4e:	df 91       	pop	r29
    aa50:	cf 91       	pop	r28
    aa52:	08 95       	ret

0000aa54 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    aa54:	2b e8       	ldi	r18, 0x8B	; 139
    aa56:	30 e0       	ldi	r19, 0x00	; 0
    aa58:	fc 01       	movw	r30, r24
    aa5a:	21 93       	st	Z+, r18
    aa5c:	31 93       	st	Z+, r19
    aa5e:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    aa60:	4e e1       	ldi	r20, 0x1E	; 30
    aa62:	50 e0       	ldi	r21, 0x00	; 0
    aa64:	68 ee       	ldi	r22, 0xE8	; 232
    aa66:	70 e0       	ldi	r23, 0x00	; 0
    aa68:	0c 94 7b 74 	jmp	0xe8f6	; 0xe8f6 <memcpy_P>

0000aa6c <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    aa6c:	2a e8       	ldi	r18, 0x8A	; 138
    aa6e:	30 e0       	ldi	r19, 0x00	; 0
    aa70:	fc 01       	movw	r30, r24
    aa72:	21 93       	st	Z+, r18
    aa74:	31 93       	st	Z+, r19
    aa76:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    aa78:	4e e1       	ldi	r20, 0x1E	; 30
    aa7a:	50 e0       	ldi	r21, 0x00	; 0
    aa7c:	66 e0       	ldi	r22, 0x06	; 6
    aa7e:	71 e0       	ldi	r23, 0x01	; 1
    aa80:	0c 94 7b 74 	jmp	0xe8f6	; 0xe8f6 <memcpy_P>

0000aa84 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    aa84:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    aa86:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aa88:	16 86       	std	Z+14, r1	; 0x0e
    aa8a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    aa8c:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    aa8e:	73 e0       	ldi	r23, 0x03	; 3
    aa90:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aa92:	65 e0       	ldi	r22, 0x05	; 5
    aa94:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    aa96:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    aa98:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    aa9a:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aa9c:	49 eb       	ldi	r20, 0xB9	; 185
    aa9e:	5d e7       	ldi	r21, 0x7D	; 125
    aaa0:	50 87       	std	Z+8, r21	; 0x08
    aaa2:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aaa4:	26 eb       	ldi	r18, 0xB6	; 182
    aaa6:	3d e7       	ldi	r19, 0x7D	; 125
    aaa8:	32 87       	std	Z+10, r19	; 0x0a
    aaaa:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aaac:	83 eb       	ldi	r24, 0xB3	; 179
    aaae:	9d e7       	ldi	r25, 0x7D	; 125
    aab0:	94 87       	std	Z+12, r25	; 0x0c
    aab2:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aab4:	14 8e       	std	Z+28, r1	; 0x1c
    aab6:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    aab8:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    aaba:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aabc:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    aabe:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    aac0:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    aac2:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aac4:	56 8b       	std	Z+22, r21	; 0x16
    aac6:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aac8:	30 8f       	std	Z+24, r19	; 0x18
    aaca:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aacc:	92 8f       	std	Z+26, r25	; 0x1a
    aace:	81 8f       	std	Z+25, r24	; 0x19
    aad0:	08 95       	ret

0000aad2 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    aad2:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    aad4:	15 86       	std	Z+13, r1	; 0x0d
    aad6:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    aad8:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    aada:	83 e0       	ldi	r24, 0x03	; 3
    aadc:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    aade:	8e e1       	ldi	r24, 0x1E	; 30
    aae0:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    aae2:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    aae4:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    aae6:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    aae8:	8f e8       	ldi	r24, 0x8F	; 143
    aaea:	9d e7       	ldi	r25, 0x7D	; 125
    aaec:	97 83       	std	Z+7, r25	; 0x07
    aaee:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    aaf0:	8c e8       	ldi	r24, 0x8C	; 140
    aaf2:	9d e7       	ldi	r25, 0x7D	; 125
    aaf4:	91 87       	std	Z+9, r25	; 0x09
    aaf6:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    aaf8:	89 e8       	ldi	r24, 0x89	; 137
    aafa:	9d e7       	ldi	r25, 0x7D	; 125
    aafc:	93 87       	std	Z+11, r25	; 0x0b
    aafe:	82 87       	std	Z+10, r24	; 0x0a
    ab00:	08 95       	ret

0000ab02 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    ab02:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    ab04:	15 86       	std	Z+13, r1	; 0x0d
    ab06:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    ab08:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    ab0a:	82 e0       	ldi	r24, 0x02	; 2
    ab0c:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    ab0e:	8c e3       	ldi	r24, 0x3C	; 60
    ab10:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    ab12:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    ab14:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    ab16:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    ab18:	8d e1       	ldi	r24, 0x1D	; 29
    ab1a:	9b e7       	ldi	r25, 0x7B	; 123
    ab1c:	97 83       	std	Z+7, r25	; 0x07
    ab1e:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    ab20:	83 e5       	ldi	r24, 0x53	; 83
    ab22:	9c e7       	ldi	r25, 0x7C	; 124
    ab24:	91 87       	std	Z+9, r25	; 0x09
    ab26:	80 87       	std	Z+8, r24	; 0x08
    ab28:	08 95       	ret

0000ab2a <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    ab2a:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    ab2c:	88 e7       	ldi	r24, 0x78	; 120
    ab2e:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    ab30:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    ab32:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    ab34:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    ab36:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    ab38:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    ab3a:	84 e0       	ldi	r24, 0x04	; 4
    ab3c:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    ab3e:	66 23       	and	r22, r22
    ab40:	11 f0       	breq	.+4      	; 0xab46 <init_shot_state+0x1c>
    ab42:	85 e0       	ldi	r24, 0x05	; 5
    ab44:	01 c0       	rjmp	.+2      	; 0xab48 <init_shot_state+0x1e>
    ab46:	81 e0       	ldi	r24, 0x01	; 1
    ab48:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    ab4a:	80 e0       	ldi	r24, 0x00	; 0
    ab4c:	90 e0       	ldi	r25, 0x00	; 0
    ab4e:	a0 e7       	ldi	r26, 0x70	; 112
    ab50:	b3 e4       	ldi	r27, 0x43	; 67
    ab52:	83 83       	std	Z+3, r24	; 0x03
    ab54:	94 83       	std	Z+4, r25	; 0x04
    ab56:	a5 83       	std	Z+5, r26	; 0x05
    ab58:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    ab5a:	17 82       	std	Z+7, r1	; 0x07
    ab5c:	10 86       	std	Z+8, r1	; 0x08
    ab5e:	11 86       	std	Z+9, r1	; 0x09
    ab60:	12 86       	std	Z+10, r1	; 0x0a
    ab62:	08 95       	ret

0000ab64 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    ab64:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    ab66:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    ab68:	82 e0       	ldi	r24, 0x02	; 2
    ab6a:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ab6c:	85 e0       	ldi	r24, 0x05	; 5
    ab6e:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    ab70:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    ab72:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    ab74:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    ab76:	61 11       	cpse	r22, r1
    ab78:	03 c0       	rjmp	.+6      	; 0xab80 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    ab7a:	87 e2       	ldi	r24, 0x27	; 39
    ab7c:	94 e4       	ldi	r25, 0x44	; 68
    ab7e:	13 c0       	rjmp	.+38     	; 0xaba6 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    ab80:	61 30       	cpi	r22, 0x01	; 1
    ab82:	79 f4       	brne	.+30     	; 0xaba2 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    ab84:	84 e2       	ldi	r24, 0x24	; 36
    ab86:	94 e4       	ldi	r25, 0x44	; 68
    ab88:	97 8b       	std	Z+23, r25	; 0x17
    ab8a:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    ab8c:	81 e2       	ldi	r24, 0x21	; 33
    ab8e:	94 e4       	ldi	r25, 0x44	; 68
    ab90:	91 8f       	std	Z+25, r25	; 0x19
    ab92:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    ab94:	8e e1       	ldi	r24, 0x1E	; 30
    ab96:	94 e4       	ldi	r25, 0x44	; 68
    ab98:	93 a3       	std	Z+35, r25	; 0x23
    ab9a:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    ab9c:	8b e1       	ldi	r24, 0x1B	; 27
    ab9e:	94 e4       	ldi	r25, 0x44	; 68
    aba0:	08 c0       	rjmp	.+16     	; 0xabb2 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    aba2:	8f e0       	ldi	r24, 0x0F	; 15
    aba4:	94 e4       	ldi	r25, 0x44	; 68
    aba6:	97 8b       	std	Z+23, r25	; 0x17
    aba8:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    abaa:	91 8f       	std	Z+25, r25	; 0x19
    abac:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    abae:	93 a3       	std	Z+35, r25	; 0x23
    abb0:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    abb2:	95 a3       	std	Z+37, r25	; 0x25
    abb4:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    abb6:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    abb8:	82 e0       	ldi	r24, 0x02	; 2
    abba:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    abbc:	85 e0       	ldi	r24, 0x05	; 5
    abbe:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    abc0:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    abc2:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    abc4:	11 a2       	std	Z+33, r1	; 0x21
    abc6:	08 95       	ret

0000abc8 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    abc8:	0f 93       	push	r16
    abca:	1f 93       	push	r17
    abcc:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    abce:	85 e0       	ldi	r24, 0x05	; 5
    abd0:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    abd2:	83 e0       	ldi	r24, 0x03	; 3
    abd4:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    abd6:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    abd8:	8a e5       	ldi	r24, 0x5A	; 90
    abda:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    abdc:	43 83       	std	Z+3, r20	; 0x03
    abde:	54 83       	std	Z+4, r21	; 0x04
    abe0:	65 83       	std	Z+5, r22	; 0x05
    abe2:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    abe4:	07 83       	std	Z+7, r16	; 0x07
    abe6:	10 87       	std	Z+8, r17	; 0x08
    abe8:	21 87       	std	Z+9, r18	; 0x09
    abea:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    abec:	8a ef       	ldi	r24, 0xFA	; 250
    abee:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    abf0:	82 e0       	ldi	r24, 0x02	; 2
    abf2:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    abf4:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    abf6:	40 e0       	ldi	r20, 0x00	; 0
    abf8:	50 e0       	ldi	r21, 0x00	; 0
    abfa:	60 e7       	ldi	r22, 0x70	; 112
    abfc:	73 e4       	ldi	r23, 0x43	; 67
    abfe:	47 87       	std	Z+15, r20	; 0x0f
    ac00:	50 8b       	std	Z+16, r21	; 0x10
    ac02:	61 8b       	std	Z+17, r22	; 0x11
    ac04:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    ac06:	13 8a       	std	Z+19, r1	; 0x13
    ac08:	14 8a       	std	Z+20, r1	; 0x14
    ac0a:	15 8a       	std	Z+21, r1	; 0x15
    ac0c:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    ac0e:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    ac10:	94 e6       	ldi	r25, 0x64	; 100
    ac12:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    ac14:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    ac16:	84 e0       	ldi	r24, 0x04	; 4
    ac18:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    ac1a:	81 e0       	ldi	r24, 0x01	; 1
    ac1c:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    ac1e:	62 e0       	ldi	r22, 0x02	; 2
    ac20:	cf 01       	movw	r24, r30
    ac22:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    ac24:	1f 91       	pop	r17
    ac26:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    ac28:	0c 94 b2 55 	jmp	0xab64	; 0xab64 <set_shot_animations>

0000ac2c <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    ac2c:	0f 93       	push	r16
    ac2e:	1f 93       	push	r17
    ac30:	cf 93       	push	r28
    ac32:	df 93       	push	r29
    ac34:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    ac36:	8a e5       	ldi	r24, 0x5A	; 90
    ac38:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    ac3a:	88 e7       	ldi	r24, 0x78	; 120
    ac3c:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    ac3e:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    ac40:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    ac42:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    ac44:	18 82       	st	Y, r1
	p->shared.speed = 0;
    ac46:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    ac48:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    ac4a:	82 e3       	ldi	r24, 0x32	; 50
    ac4c:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    ac4e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    ac50:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    ac52:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    ac54:	fe 01       	movw	r30, r28
    ac56:	ec 5a       	subi	r30, 0xAC	; 172
    ac58:	ff 4f       	sbci	r31, 0xFF	; 255
    ac5a:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    ac5c:	31 96       	adiw	r30, 0x01	; 1
    ac5e:	91 e0       	ldi	r25, 0x01	; 1
    ac60:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ac62:	31 96       	adiw	r30, 0x01	; 1
    ac64:	85 e0       	ldi	r24, 0x05	; 5
    ac66:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    ac68:	31 96       	adiw	r30, 0x01	; 1
    ac6a:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    ac6c:	31 96       	adiw	r30, 0x01	; 1
    ac6e:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    ac70:	31 96       	adiw	r30, 0x01	; 1
    ac72:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    ac74:	31 96       	adiw	r30, 0x01	; 1
    ac76:	71 83       	std	Z+1, r23	; 0x01
    ac78:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    ac7a:	36 96       	adiw	r30, 0x06	; 6
    ac7c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    ac7e:	31 96       	adiw	r30, 0x01	; 1
    ac80:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    ac82:	31 96       	adiw	r30, 0x01	; 1
    ac84:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    ac86:	31 96       	adiw	r30, 0x01	; 1
    ac88:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    ac8a:	31 96       	adiw	r30, 0x01	; 1
    ac8c:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    ac8e:	31 96       	adiw	r30, 0x01	; 1
    ac90:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    ac92:	31 96       	adiw	r30, 0x01	; 1
    ac94:	51 83       	std	Z+1, r21	; 0x01
    ac96:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    ac98:	36 96       	adiw	r30, 0x06	; 6
    ac9a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    ac9c:	31 96       	adiw	r30, 0x01	; 1
    ac9e:	93 e0       	ldi	r25, 0x03	; 3
    aca0:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    aca2:	31 96       	adiw	r30, 0x01	; 1
    aca4:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    aca6:	31 96       	adiw	r30, 0x01	; 1
    aca8:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    acaa:	31 96       	adiw	r30, 0x01	; 1
    acac:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    acae:	31 96       	adiw	r30, 0x01	; 1
    acb0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    acb2:	31 96       	adiw	r30, 0x01	; 1
    acb4:	86 e3       	ldi	r24, 0x36	; 54
    acb6:	94 e4       	ldi	r25, 0x44	; 68
    acb8:	91 83       	std	Z+1, r25	; 0x01
    acba:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    acbc:	32 96       	adiw	r30, 0x02	; 2
    acbe:	80 e3       	ldi	r24, 0x30	; 48
    acc0:	94 e4       	ldi	r25, 0x44	; 68
    acc2:	91 83       	std	Z+1, r25	; 0x01
    acc4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    acc6:	32 96       	adiw	r30, 0x02	; 2
    acc8:	8a e2       	ldi	r24, 0x2A	; 42
    acca:	94 e4       	ldi	r25, 0x44	; 68
    accc:	91 83       	std	Z+1, r25	; 0x01
    acce:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    acd0:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    acd2:	8e 01       	movw	r16, r28
    acd4:	04 5d       	subi	r16, 0xD4	; 212
    acd6:	1f 4f       	sbci	r17, 0xFF	; 255
    acd8:	60 e0       	ldi	r22, 0x00	; 0
    acda:	c8 01       	movw	r24, r16
    acdc:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    ace0:	60 e0       	ldi	r22, 0x00	; 0
    ace2:	c8 01       	movw	r24, r16
    ace4:	0e 94 b2 55 	call	0xab64	; 0xab64 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    ace8:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    acea:	1d 8e       	std	Y+29, r1	; 0x1d
    acec:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    acee:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    acf0:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    acf2:	1c a2       	std	Y+36, r1	; 0x24
    acf4:	1d a2       	std	Y+37, r1	; 0x25
    acf6:	1e a2       	std	Y+38, r1	; 0x26
    acf8:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    acfa:	18 a6       	std	Y+40, r1	; 0x28
    acfc:	19 a6       	std	Y+41, r1	; 0x29
    acfe:	1a a6       	std	Y+42, r1	; 0x2a
    ad00:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    ad02:	1f 8e       	std	Y+31, r1	; 0x1f
    ad04:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    ad06:	19 a2       	std	Y+33, r1	; 0x21
    ad08:	18 a2       	std	Y+32, r1	; 0x20
}
    ad0a:	df 91       	pop	r29
    ad0c:	cf 91       	pop	r28
    ad0e:	1f 91       	pop	r17
    ad10:	0f 91       	pop	r16
    ad12:	08 95       	ret

0000ad14 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    ad14:	fc 01       	movw	r30, r24
    ad16:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    ad18:	60 e0       	ldi	r22, 0x00	; 0
    ad1a:	8c 96       	adiw	r24, 0x2c	; 44
    ad1c:	0c 94 95 55 	jmp	0xab2a	; 0xab2a <init_shot_state>

0000ad20 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    ad20:	ef e0       	ldi	r30, 0x0F	; 15
    ad22:	fc e0       	ldi	r31, 0x0C	; 12
    ad24:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    ad26:	14 86       	std	Z+12, r1	; 0x0c
	game.paused = 0;
    ad28:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    ad2a:	13 86       	std	Z+11, r1	; 0x0b
    ad2c:	12 86       	std	Z+10, r1	; 0x0a
	game.boss_fight_status = 0;
    ad2e:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    ad30:	17 82       	std	Z+7, r1	; 0x07
    ad32:	16 82       	std	Z+6, r1	; 0x06
	game.boss_fight_joypad = 0;
    ad34:	11 86       	std	Z+9, r1	; 0x09
    ad36:	10 86       	std	Z+8, r1	; 0x08
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    ad38:	82 e0       	ldi	r24, 0x02	; 2
    ad3a:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    ad3c:	14 82       	std	Z+4, r1	; 0x04
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    ad3e:	48 e4       	ldi	r20, 0x48	; 72
    ad40:	54 e4       	ldi	r21, 0x44	; 68
    ad42:	6e e4       	ldi	r22, 0x4E	; 78
    ad44:	74 e4       	ldi	r23, 0x44	; 68
    ad46:	89 e3       	ldi	r24, 0x39	; 57
    ad48:	9c e0       	ldi	r25, 0x0C	; 12
    ad4a:	0e 94 16 56 	call	0xac2c	; 0xac2c <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    ad4e:	4c e3       	ldi	r20, 0x3C	; 60
    ad50:	54 e4       	ldi	r21, 0x44	; 68
    ad52:	62 e4       	ldi	r22, 0x42	; 66
    ad54:	74 e4       	ldi	r23, 0x44	; 68
    ad56:	87 ea       	ldi	r24, 0xA7	; 167
    ad58:	9f e0       	ldi	r25, 0x0F	; 15
    ad5a:	0c 94 16 56 	jmp	0xac2c	; 0xac2c <init_player>

0000ad5e <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    ad5e:	cf 93       	push	r28
    ad60:	df 93       	push	r29
    ad62:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    ad64:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    ad66:	6a 89       	ldd	r22, Y+18	; 0x12
    ad68:	70 e0       	ldi	r23, 0x00	; 0
    ad6a:	80 e0       	ldi	r24, 0x00	; 0
    ad6c:	90 e0       	ldi	r25, 0x00	; 0
    ad6e:	0e 94 62 73 	call	0xe6c4	; 0xe6c4 <__floatunsisf>
    ad72:	6b 83       	std	Y+3, r22	; 0x03
    ad74:	7c 83       	std	Y+4, r23	; 0x04
    ad76:	8d 83       	std	Y+5, r24	; 0x05
    ad78:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    ad7a:	6b 89       	ldd	r22, Y+19	; 0x13
    ad7c:	70 e0       	ldi	r23, 0x00	; 0
    ad7e:	80 e0       	ldi	r24, 0x00	; 0
    ad80:	90 e0       	ldi	r25, 0x00	; 0
    ad82:	0e 94 62 73 	call	0xe6c4	; 0xe6c4 <__floatunsisf>
    ad86:	6f 83       	std	Y+7, r22	; 0x07
    ad88:	78 87       	std	Y+8, r23	; 0x08
    ad8a:	89 87       	std	Y+9, r24	; 0x09
    ad8c:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    ad8e:	18 82       	st	Y, r1
	player->shared.speed = 0;
    ad90:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    ad92:	1a 82       	std	Y+2, r1	; 0x02
	
}
    ad94:	df 91       	pop	r29
    ad96:	cf 91       	pop	r28
    ad98:	08 95       	ret

0000ad9a <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    ad9a:	cf 93       	push	r28
    ad9c:	df 93       	push	r29
    ad9e:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    ada0:	bc 01       	movw	r22, r24
    ada2:	88 81       	ld	r24, Y
    ada4:	99 81       	ldd	r25, Y+1	; 0x01
    ada6:	0e 94 81 45 	call	0x8b02	; 0x8b02 <EepromReadBlock>
	if (status == 0x03)
    adaa:	83 30       	cpi	r24, 0x03	; 3
    adac:	29 f4       	brne	.+10     	; 0xadb8 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    adae:	ce 01       	movw	r24, r28
	}
}
    adb0:	df 91       	pop	r29
    adb2:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    adb4:	0c 94 37 45 	jmp	0x8a6e	; 0x8a6e <EepromWriteBlock>
	}
}
    adb8:	df 91       	pop	r29
    adba:	cf 91       	pop	r28
    adbc:	08 95       	ret

0000adbe <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    adbe:	61 e0       	ldi	r22, 0x01	; 1
    adc0:	83 e0       	ldi	r24, 0x03	; 3
    adc2:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <FadeOut>
	ClearVram();
    adc6:	0e 94 b8 43 	call	0x8770	; 0x8770 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    adca:	60 e0       	ldi	r22, 0x00	; 0
    adcc:	83 e0       	ldi	r24, 0x03	; 3
    adce:	0c 94 cc 52 	jmp	0xa598	; 0xa598 <FadeIn>

0000add2 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    add2:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    add4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    add6:	40 e0       	ldi	r20, 0x00	; 0
    add8:	6a e5       	ldi	r22, 0x5A	; 90
    adda:	74 e4       	ldi	r23, 0x44	; 68
    addc:	8c 2f       	mov	r24, r28
    adde:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
    ade2:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    ade4:	ca 30       	cpi	r28, 0x0A	; 10
    ade6:	b9 f7       	brne	.-18     	; 0xadd6 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    ade8:	cf 91       	pop	r28
    adea:	08 95       	ret

0000adec <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    adec:	cf 92       	push	r12
    adee:	df 92       	push	r13
    adf0:	ff 92       	push	r15
    adf2:	0f 93       	push	r16
    adf4:	1f 93       	push	r17
    adf6:	cf 93       	push	r28
    adf8:	df 93       	push	r29
    adfa:	cd b7       	in	r28, 0x3d	; 61
    adfc:	de b7       	in	r29, 0x3e	; 62
    adfe:	2a 97       	sbiw	r28, 0x0a	; 10
    ae00:	0f b6       	in	r0, 0x3f	; 63
    ae02:	f8 94       	cli
    ae04:	de bf       	out	0x3e, r29	; 62
    ae06:	0f be       	out	0x3f, r0	; 63
    ae08:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    ae0a:	90 91 48 0c 	lds	r25, 0x0C48
    ae0e:	80 91 b6 0f 	lds	r24, 0x0FB6
    ae12:	98 17       	cp	r25, r24
    ae14:	28 f4       	brcc	.+10     	; 0xae20 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    ae16:	e9 e3       	ldi	r30, 0x39	; 57
    ae18:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    ae1a:	a7 ea       	ldi	r26, 0xA7	; 167
    ae1c:	bf e0       	ldi	r27, 0x0F	; 15
    ae1e:	04 c0       	rjmp	.+8      	; 0xae28 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    ae20:	e7 ea       	ldi	r30, 0xA7	; 167
    ae22:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    ae24:	a9 e3       	ldi	r26, 0x39	; 57
    ae26:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    ae28:	1b 96       	adiw	r26, 0x0b	; 11
    ae2a:	8c 91       	ld	r24, X
    ae2c:	1b 97       	sbiw	r26, 0x0b	; 11
    ae2e:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    ae30:	83 85       	ldd	r24, Z+11	; 0x0b
    ae32:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    ae34:	1f 96       	adiw	r26, 0x0f	; 15
    ae36:	8c 91       	ld	r24, X
    ae38:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    ae3a:	97 85       	ldd	r25, Z+15	; 0x0f
    ae3c:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    ae3e:	21 e0       	ldi	r18, 0x01	; 1
    ae40:	30 91 12 0c 	lds	r19, 0x0C12
    ae44:	38 30       	cpi	r19, 0x08	; 8
    ae46:	09 f0       	breq	.+2      	; 0xae4a <save_score+0x5e>
    ae48:	20 e0       	ldi	r18, 0x00	; 0
    ae4a:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    ae4c:	f8 2e       	mov	r15, r24
    ae4e:	f9 1a       	sub	r15, r25
    ae50:	00 e0       	ldi	r16, 0x00	; 0
    ae52:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    ae54:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    ae56:	81 11       	cpse	r24, r1
    ae58:	08 c0       	rjmp	.+16     	; 0xae6a <save_score+0x7e>
    ae5a:	f8 01       	movw	r30, r16
    ae5c:	e8 53       	subi	r30, 0x38	; 56
    ae5e:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    ae60:	94 81       	ldd	r25, Z+4	; 0x04
    ae62:	25 81       	ldd	r18, Z+5	; 0x05
    ae64:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    ae66:	9f 15       	cp	r25, r15
    ae68:	d0 f4       	brcc	.+52     	; 0xae9e <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    ae6a:	45 e0       	ldi	r20, 0x05	; 5
    ae6c:	c8 01       	movw	r24, r16
    ae6e:	86 53       	subi	r24, 0x36	; 54
    ae70:	94 4f       	sbci	r25, 0xF4	; 244
    ae72:	6c 01       	movw	r12, r24
    ae74:	bc 01       	movw	r22, r24
    ae76:	ce 01       	movw	r24, r28
    ae78:	06 96       	adiw	r24, 0x06	; 6
    ae7a:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    ae7e:	45 e0       	ldi	r20, 0x05	; 5
    ae80:	be 01       	movw	r22, r28
    ae82:	6f 5f       	subi	r22, 0xFF	; 255
    ae84:	7f 4f       	sbci	r23, 0xFF	; 255
    ae86:	c6 01       	movw	r24, r12
    ae88:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    ae8c:	45 e0       	ldi	r20, 0x05	; 5
    ae8e:	be 01       	movw	r22, r28
    ae90:	6a 5f       	subi	r22, 0xFA	; 250
    ae92:	7f 4f       	sbci	r23, 0xFF	; 255
    ae94:	ce 01       	movw	r24, r28
    ae96:	01 96       	adiw	r24, 0x01	; 1
    ae98:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
				saved = 1;
    ae9c:	81 e0       	ldi	r24, 0x01	; 1
    ae9e:	0b 5f       	subi	r16, 0xFB	; 251
    aea0:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    aea2:	0e 31       	cpi	r16, 0x1E	; 30
    aea4:	11 05       	cpc	r17, r1
    aea6:	b9 f6       	brne	.-82     	; 0xae56 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    aea8:	88 ec       	ldi	r24, 0xC8	; 200
    aeaa:	9b e0       	ldi	r25, 0x0B	; 11
    aeac:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    aeb0:	2a 96       	adiw	r28, 0x0a	; 10
    aeb2:	0f b6       	in	r0, 0x3f	; 63
    aeb4:	f8 94       	cli
    aeb6:	de bf       	out	0x3e, r29	; 62
    aeb8:	0f be       	out	0x3f, r0	; 63
    aeba:	cd bf       	out	0x3d, r28	; 61
    aebc:	df 91       	pop	r29
    aebe:	cf 91       	pop	r28
    aec0:	1f 91       	pop	r17
    aec2:	0f 91       	pop	r16
    aec4:	ff 90       	pop	r15
    aec6:	df 90       	pop	r13
    aec8:	cf 90       	pop	r12
    aeca:	08 95       	ret

0000aecc <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    aecc:	0f 93       	push	r16
    aece:	1f 93       	push	r17
    aed0:	cf 93       	push	r28
    aed2:	df 93       	push	r29
    aed4:	8c 01       	movw	r16, r24
    aed6:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    aed8:	88 81       	ld	r24, Y
    aeda:	81 30       	cpi	r24, 0x01	; 1
    aedc:	69 f1       	breq	.+90     	; 0xaf38 <position_shot+0x6c>
    aede:	98 f0       	brcs	.+38     	; 0xaf06 <position_shot+0x3a>
    aee0:	82 30       	cpi	r24, 0x02	; 2
    aee2:	f1 f1       	breq	.+124    	; 0xaf60 <position_shot+0x94>
    aee4:	83 30       	cpi	r24, 0x03	; 3
    aee6:	09 f0       	breq	.+2      	; 0xaeea <position_shot+0x1e>
    aee8:	59 c0       	rjmp	.+178    	; 0xaf9c <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    aeea:	f8 01       	movw	r30, r16
    aeec:	83 81       	ldd	r24, Z+3	; 0x03
    aeee:	94 81       	ldd	r25, Z+4	; 0x04
    aef0:	a5 81       	ldd	r26, Z+5	; 0x05
    aef2:	b6 81       	ldd	r27, Z+6	; 0x06
    aef4:	8b 83       	std	Y+3, r24	; 0x03
    aef6:	9c 83       	std	Y+4, r25	; 0x04
    aef8:	ad 83       	std	Y+5, r26	; 0x05
    aefa:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    aefc:	20 e0       	ldi	r18, 0x00	; 0
    aefe:	30 e0       	ldi	r19, 0x00	; 0
    af00:	40 e8       	ldi	r20, 0x80	; 128
    af02:	50 e4       	ldi	r21, 0x40	; 64
    af04:	41 c0       	rjmp	.+130    	; 0xaf88 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    af06:	20 e0       	ldi	r18, 0x00	; 0
    af08:	30 e0       	ldi	r19, 0x00	; 0
    af0a:	40 e8       	ldi	r20, 0x80	; 128
    af0c:	50 e4       	ldi	r21, 0x40	; 64
    af0e:	f8 01       	movw	r30, r16
    af10:	63 81       	ldd	r22, Z+3	; 0x03
    af12:	74 81       	ldd	r23, Z+4	; 0x04
    af14:	85 81       	ldd	r24, Z+5	; 0x05
    af16:	96 81       	ldd	r25, Z+6	; 0x06
    af18:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    af1c:	6b 83       	std	Y+3, r22	; 0x03
    af1e:	7c 83       	std	Y+4, r23	; 0x04
    af20:	8d 83       	std	Y+5, r24	; 0x05
    af22:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    af24:	f8 01       	movw	r30, r16
    af26:	87 81       	ldd	r24, Z+7	; 0x07
    af28:	90 85       	ldd	r25, Z+8	; 0x08
    af2a:	a1 85       	ldd	r26, Z+9	; 0x09
    af2c:	b2 85       	ldd	r27, Z+10	; 0x0a
    af2e:	8f 83       	std	Y+7, r24	; 0x07
    af30:	98 87       	std	Y+8, r25	; 0x08
    af32:	a9 87       	std	Y+9, r26	; 0x09
    af34:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    af36:	32 c0       	rjmp	.+100    	; 0xaf9c <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    af38:	20 e0       	ldi	r18, 0x00	; 0
    af3a:	30 e0       	ldi	r19, 0x00	; 0
    af3c:	40 e0       	ldi	r20, 0x00	; 0
    af3e:	51 e4       	ldi	r21, 0x41	; 65
    af40:	f8 01       	movw	r30, r16
    af42:	63 81       	ldd	r22, Z+3	; 0x03
    af44:	74 81       	ldd	r23, Z+4	; 0x04
    af46:	85 81       	ldd	r24, Z+5	; 0x05
    af48:	96 81       	ldd	r25, Z+6	; 0x06
    af4a:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    af4e:	6b 83       	std	Y+3, r22	; 0x03
    af50:	7c 83       	std	Y+4, r23	; 0x04
    af52:	8d 83       	std	Y+5, r24	; 0x05
    af54:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    af56:	20 e0       	ldi	r18, 0x00	; 0
    af58:	30 e0       	ldi	r19, 0x00	; 0
    af5a:	40 e8       	ldi	r20, 0x80	; 128
    af5c:	50 e4       	ldi	r21, 0x40	; 64
    af5e:	13 c0       	rjmp	.+38     	; 0xaf86 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    af60:	20 e0       	ldi	r18, 0x00	; 0
    af62:	30 e0       	ldi	r19, 0x00	; 0
    af64:	40 e8       	ldi	r20, 0x80	; 128
    af66:	50 e4       	ldi	r21, 0x40	; 64
    af68:	f8 01       	movw	r30, r16
    af6a:	63 81       	ldd	r22, Z+3	; 0x03
    af6c:	74 81       	ldd	r23, Z+4	; 0x04
    af6e:	85 81       	ldd	r24, Z+5	; 0x05
    af70:	96 81       	ldd	r25, Z+6	; 0x06
    af72:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    af76:	6b 83       	std	Y+3, r22	; 0x03
    af78:	7c 83       	std	Y+4, r23	; 0x04
    af7a:	8d 83       	std	Y+5, r24	; 0x05
    af7c:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    af7e:	20 e0       	ldi	r18, 0x00	; 0
    af80:	30 e0       	ldi	r19, 0x00	; 0
    af82:	40 e0       	ldi	r20, 0x00	; 0
    af84:	51 e4       	ldi	r21, 0x41	; 65
    af86:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    af88:	67 81       	ldd	r22, Z+7	; 0x07
    af8a:	70 85       	ldd	r23, Z+8	; 0x08
    af8c:	81 85       	ldd	r24, Z+9	; 0x09
    af8e:	92 85       	ldd	r25, Z+10	; 0x0a
    af90:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    af94:	6f 83       	std	Y+7, r22	; 0x07
    af96:	78 87       	std	Y+8, r23	; 0x08
    af98:	89 87       	std	Y+9, r24	; 0x09
    af9a:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    af9c:	df 91       	pop	r29
    af9e:	cf 91       	pop	r28
    afa0:	1f 91       	pop	r17
    afa2:	0f 91       	pop	r16
    afa4:	08 95       	ret

0000afa6 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    afa6:	0f 93       	push	r16
    afa8:	1f 93       	push	r17
    afaa:	cf 93       	push	r28
    afac:	df 93       	push	r29
    afae:	8c 01       	movw	r16, r24
    afb0:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    afb2:	ac 01       	movw	r20, r24
    afb4:	44 5f       	subi	r20, 0xF4	; 244
    afb6:	5f 4f       	sbci	r21, 0xFF	; 255
    afb8:	23 e0       	ldi	r18, 0x03	; 3
    afba:	6e e0       	ldi	r22, 0x0E	; 14
    afbc:	84 e0       	ldi	r24, 0x04	; 4
    afbe:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    afc2:	46 ea       	ldi	r20, 0xA6	; 166
    afc4:	52 e0       	ldi	r21, 0x02	; 2
    afc6:	6e e0       	ldi	r22, 0x0E	; 14
    afc8:	70 e0       	ldi	r23, 0x00	; 0
    afca:	88 e0       	ldi	r24, 0x08	; 8
    afcc:	90 e0       	ldi	r25, 0x00	; 0
    afce:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    afd2:	ae 01       	movw	r20, r28
    afd4:	44 5f       	subi	r20, 0xF4	; 244
    afd6:	5f 4f       	sbci	r21, 0xFF	; 255
    afd8:	23 e0       	ldi	r18, 0x03	; 3
    afda:	6e e0       	ldi	r22, 0x0E	; 14
    afdc:	8d e0       	ldi	r24, 0x0D	; 13
    afde:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
	Print(17, 14, (char*) strBy);
    afe2:	43 ea       	ldi	r20, 0xA3	; 163
    afe4:	52 e0       	ldi	r21, 0x02	; 2
    afe6:	6e e0       	ldi	r22, 0x0E	; 14
    afe8:	70 e0       	ldi	r23, 0x00	; 0
    afea:	81 e1       	ldi	r24, 0x11	; 17
    afec:	90 e0       	ldi	r25, 0x00	; 0
    afee:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    aff2:	21 e0       	ldi	r18, 0x01	; 1
    aff4:	f8 01       	movw	r30, r16
    aff6:	40 89       	ldd	r20, Z+16	; 0x10
    aff8:	6e e0       	ldi	r22, 0x0E	; 14
    affa:	70 e0       	ldi	r23, 0x00	; 0
    affc:	86 e1       	ldi	r24, 0x16	; 22
    affe:	90 e0       	ldi	r25, 0x00	; 0
    b000:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
	PrintChar(23, 14, '-');
    b004:	4d e2       	ldi	r20, 0x2D	; 45
    b006:	6e e0       	ldi	r22, 0x0E	; 14
    b008:	70 e0       	ldi	r23, 0x00	; 0
    b00a:	87 e1       	ldi	r24, 0x17	; 23
    b00c:	90 e0       	ldi	r25, 0x00	; 0
    b00e:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b012:	21 e0       	ldi	r18, 0x01	; 1
    b014:	48 89       	ldd	r20, Y+16	; 0x10
    b016:	6e e0       	ldi	r22, 0x0E	; 14
    b018:	70 e0       	ldi	r23, 0x00	; 0
    b01a:	8a e1       	ldi	r24, 0x1A	; 26
    b01c:	90 e0       	ldi	r25, 0x00	; 0
}
    b01e:	df 91       	pop	r29
    b020:	cf 91       	pop	r28
    b022:	1f 91       	pop	r17
    b024:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b026:	0c 94 56 52 	jmp	0xa4ac	; 0xa4ac <PrintByte>

0000b02a <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b02a:	0f 93       	push	r16
    b02c:	1f 93       	push	r17
    b02e:	cf 93       	push	r28
    b030:	df 93       	push	r29
    b032:	8c 01       	movw	r16, r24
    b034:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    b036:	47 e9       	ldi	r20, 0x97	; 151
    b038:	52 e0       	ldi	r21, 0x02	; 2
    b03a:	6c e0       	ldi	r22, 0x0C	; 12
    b03c:	70 e0       	ldi	r23, 0x00	; 0
    b03e:	89 e0       	ldi	r24, 0x09	; 9
    b040:	90 e0       	ldi	r25, 0x00	; 0
    b042:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b046:	a8 01       	movw	r20, r16
    b048:	44 5f       	subi	r20, 0xF4	; 244
    b04a:	5f 4f       	sbci	r21, 0xFF	; 255
    b04c:	23 e0       	ldi	r18, 0x03	; 3
    b04e:	6e e0       	ldi	r22, 0x0E	; 14
    b050:	84 e0       	ldi	r24, 0x04	; 4
    b052:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b056:	46 ea       	ldi	r20, 0xA6	; 166
    b058:	52 e0       	ldi	r21, 0x02	; 2
    b05a:	6e e0       	ldi	r22, 0x0E	; 14
    b05c:	70 e0       	ldi	r23, 0x00	; 0
    b05e:	88 e0       	ldi	r24, 0x08	; 8
    b060:	90 e0       	ldi	r25, 0x00	; 0
    b062:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b066:	ae 01       	movw	r20, r28
    b068:	44 5f       	subi	r20, 0xF4	; 244
    b06a:	5f 4f       	sbci	r21, 0xFF	; 255
    b06c:	23 e0       	ldi	r18, 0x03	; 3
    b06e:	6e e0       	ldi	r22, 0x0E	; 14
    b070:	8d e0       	ldi	r24, 0x0D	; 13
    b072:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b076:	43 ea       	ldi	r20, 0xA3	; 163
    b078:	52 e0       	ldi	r21, 0x02	; 2
    b07a:	6e e0       	ldi	r22, 0x0E	; 14
    b07c:	70 e0       	ldi	r23, 0x00	; 0
    b07e:	81 e1       	ldi	r24, 0x11	; 17
    b080:	90 e0       	ldi	r25, 0x00	; 0
    b082:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    PrintByte(22, 14, winner->score ,true);
    b086:	21 e0       	ldi	r18, 0x01	; 1
    b088:	f8 01       	movw	r30, r16
    b08a:	47 85       	ldd	r20, Z+15	; 0x0f
    b08c:	6e e0       	ldi	r22, 0x0E	; 14
    b08e:	70 e0       	ldi	r23, 0x00	; 0
    b090:	86 e1       	ldi	r24, 0x16	; 22
    b092:	90 e0       	ldi	r25, 0x00	; 0
    b094:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
    PrintChar(23, 14, '-');
    b098:	4d e2       	ldi	r20, 0x2D	; 45
    b09a:	6e e0       	ldi	r22, 0x0E	; 14
    b09c:	70 e0       	ldi	r23, 0x00	; 0
    b09e:	87 e1       	ldi	r24, 0x17	; 23
    b0a0:	90 e0       	ldi	r25, 0x00	; 0
    b0a2:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b0a6:	21 e0       	ldi	r18, 0x01	; 1
    b0a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    b0aa:	6e e0       	ldi	r22, 0x0E	; 14
    b0ac:	70 e0       	ldi	r23, 0x00	; 0
    b0ae:	8a e1       	ldi	r24, 0x1A	; 26
    b0b0:	90 e0       	ldi	r25, 0x00	; 0
    b0b2:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    b0b6:	80 91 12 0c 	lds	r24, 0x0C12
    b0ba:	88 30       	cpi	r24, 0x08	; 8
    b0bc:	59 f4       	brne	.+22     	; 0xb0d4 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    b0be:	4a e2       	ldi	r20, 0x2A	; 42
    b0c0:	6e e0       	ldi	r22, 0x0E	; 14
    b0c2:	70 e0       	ldi	r23, 0x00	; 0
    b0c4:	8c e1       	ldi	r24, 0x1C	; 28
    b0c6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    b0c8:	df 91       	pop	r29
    b0ca:	cf 91       	pop	r28
    b0cc:	1f 91       	pop	r17
    b0ce:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    b0d0:	0c 94 a4 52 	jmp	0xa548	; 0xa548 <PrintChar>
	}
}
    b0d4:	df 91       	pop	r29
    b0d6:	cf 91       	pop	r28
    b0d8:	1f 91       	pop	r17
    b0da:	0f 91       	pop	r16
    b0dc:	08 95       	ret

0000b0de <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    b0de:	fc 01       	movw	r30, r24
    b0e0:	20 81       	ld	r18, Z
    b0e2:	31 81       	ldd	r19, Z+1	; 0x01
    b0e4:	21 70       	andi	r18, 0x01	; 1
    b0e6:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    b0e8:	81 e0       	ldi	r24, 0x01	; 1
    b0ea:	23 2b       	or	r18, r19
    b0ec:	09 f4       	brne	.+2      	; 0xb0f0 <shoot_pressed+0x12>
    b0ee:	80 e0       	ldi	r24, 0x00	; 0
}
    b0f0:	08 95       	ret

0000b0f2 <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b0f2:	fc 01       	movw	r30, r24
    b0f4:	82 a1       	ldd	r24, Z+34	; 0x22
    b0f6:	fb 01       	movw	r30, r22
    b0f8:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    b0fa:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b0fc:	81 11       	cpse	r24, r1
    b0fe:	09 c0       	rjmp	.+18     	; 0xb112 <get_delta+0x20>
		return FRAME_TIME * s->speed;
    b100:	80 e0       	ldi	r24, 0x00	; 0
    b102:	90 e0       	ldi	r25, 0x00	; 0
    b104:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    b108:	25 e6       	ldi	r18, 0x65	; 101
    b10a:	38 e8       	ldi	r19, 0x88	; 136
    b10c:	48 e8       	ldi	r20, 0x88	; 136
    b10e:	5c e3       	ldi	r21, 0x3C	; 60
    b110:	0e c0       	rjmp	.+28     	; 0xb12e <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    b112:	80 e0       	ldi	r24, 0x00	; 0
    b114:	90 e0       	ldi	r25, 0x00	; 0
    b116:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    b11a:	25 e6       	ldi	r18, 0x65	; 101
    b11c:	38 e8       	ldi	r19, 0x88	; 136
    b11e:	48 e8       	ldi	r20, 0x88	; 136
    b120:	5c e3       	ldi	r21, 0x3C	; 60
    b122:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    b126:	23 e3       	ldi	r18, 0x33	; 51
    b128:	33 e3       	ldi	r19, 0x33	; 51
    b12a:	43 eb       	ldi	r20, 0xB3	; 179
    b12c:	5f e3       	ldi	r21, 0x3F	; 63
    b12e:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
}
    b132:	08 95       	ret

0000b134 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b134:	cf 93       	push	r28
    b136:	df 93       	push	r29
    b138:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b13a:	ac 01       	movw	r20, r24
    b13c:	44 5f       	subi	r20, 0xF4	; 244
    b13e:	5f 4f       	sbci	r21, 0xFF	; 255
    b140:	23 e0       	ldi	r18, 0x03	; 3
    b142:	60 e0       	ldi	r22, 0x00	; 0
    b144:	8a e0       	ldi	r24, 0x0A	; 10
    b146:	8c 0f       	add	r24, r28
    b148:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b14c:	d0 e0       	ldi	r29, 0x00	; 0
    b14e:	4b ee       	ldi	r20, 0xEB	; 235
    b150:	51 e0       	ldi	r21, 0x01	; 1
    b152:	60 e0       	ldi	r22, 0x00	; 0
    b154:	70 e0       	ldi	r23, 0x00	; 0
    b156:	ce 01       	movw	r24, r28
    b158:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(x, 1, (char*) strTotal);
    b15c:	44 ee       	ldi	r20, 0xE4	; 228
    b15e:	51 e0       	ldi	r21, 0x01	; 1
    b160:	61 e0       	ldi	r22, 0x01	; 1
    b162:	70 e0       	ldi	r23, 0x00	; 0
    b164:	ce 01       	movw	r24, r28
	
}
    b166:	df 91       	pop	r29
    b168:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b16a:	0c 94 89 52 	jmp	0xa512	; 0xa512 <Print>

0000b16e <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b16e:	0f 93       	push	r16
    b170:	1f 93       	push	r17
    b172:	cf 93       	push	r28
    b174:	df 93       	push	r29
    b176:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b178:	c6 2f       	mov	r28, r22
    b17a:	d0 e0       	ldi	r29, 0x00	; 0
    b17c:	28 96       	adiw	r28, 0x08	; 8
    b17e:	20 e0       	ldi	r18, 0x00	; 0
    b180:	fc 01       	movw	r30, r24
    b182:	40 89       	ldd	r20, Z+16	; 0x10
    b184:	60 e0       	ldi	r22, 0x00	; 0
    b186:	70 e0       	ldi	r23, 0x00	; 0
    b188:	ce 01       	movw	r24, r28
    b18a:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b18e:	20 e0       	ldi	r18, 0x00	; 0
    b190:	f8 01       	movw	r30, r16
    b192:	47 85       	ldd	r20, Z+15	; 0x0f
    b194:	61 e0       	ldi	r22, 0x01	; 1
    b196:	70 e0       	ldi	r23, 0x00	; 0
    b198:	ce 01       	movw	r24, r28
}
    b19a:	df 91       	pop	r29
    b19c:	cf 91       	pop	r28
    b19e:	1f 91       	pop	r17
    b1a0:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b1a2:	0c 94 56 52 	jmp	0xa4ac	; 0xa4ac <PrintByte>

0000b1a6 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b1a6:	cf 93       	push	r28
    b1a8:	df 93       	push	r29
    b1aa:	ec 01       	movw	r28, r24
    b1ac:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b1ae:	9d 89       	ldd	r25, Y+21	; 0x15
    b1b0:	9a 35       	cpi	r25, 0x5A	; 90
    b1b2:	99 f0       	breq	.+38     	; 0xb1da <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b1b4:	91 11       	cpse	r25, r1
    b1b6:	0c c0       	rjmp	.+24     	; 0xb1d0 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b1b8:	4e 89       	ldd	r20, Y+22	; 0x16
    b1ba:	9f e0       	ldi	r25, 0x0F	; 15
    b1bc:	49 9f       	mul	r20, r25
    b1be:	a0 01       	movw	r20, r0
    b1c0:	11 24       	eor	r1, r1
    b1c2:	4f 5f       	subi	r20, 0xFF	; 255
    b1c4:	5d 4f       	sbci	r21, 0xFD	; 253
    b1c6:	62 e0       	ldi	r22, 0x02	; 2
    b1c8:	70 e0       	ldi	r23, 0x00	; 0
    b1ca:	90 e0       	ldi	r25, 0x00	; 0
    b1cc:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b1d0:	8d 89       	ldd	r24, Y+21	; 0x15
    b1d2:	8f 5f       	subi	r24, 0xFF	; 255
    b1d4:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b1d6:	41 e0       	ldi	r20, 0x01	; 1
    b1d8:	0a c0       	rjmp	.+20     	; 0xb1ee <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b1da:	44 23       	and	r20, r20
    b1dc:	41 f0       	breq	.+16     	; 0xb1ee <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b1de:	42 ef       	ldi	r20, 0xF2	; 242
    b1e0:	51 e0       	ldi	r21, 0x01	; 1
    b1e2:	62 e0       	ldi	r22, 0x02	; 2
    b1e4:	70 e0       	ldi	r23, 0x00	; 0
    b1e6:	90 e0       	ldi	r25, 0x00	; 0
    b1e8:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    b1ec:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b1ee:	84 2f       	mov	r24, r20
    b1f0:	df 91       	pop	r29
    b1f2:	cf 91       	pop	r28
    b1f4:	08 95       	ret

0000b1f6 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b1f6:	ef 92       	push	r14
    b1f8:	ff 92       	push	r15
    b1fa:	0f 93       	push	r16
    b1fc:	1f 93       	push	r17
    b1fe:	cf 93       	push	r28
    b200:	df 93       	push	r29
    b202:	1f 92       	push	r1
    b204:	cd b7       	in	r28, 0x3d	; 61
    b206:	de b7       	in	r29, 0x3e	; 62
    b208:	7c 01       	movw	r14, r24
    b20a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b20c:	fc 01       	movw	r30, r24
    b20e:	67 81       	ldd	r22, Z+7	; 0x07
    b210:	70 85       	ldd	r23, Z+8	; 0x08
    b212:	81 85       	ldd	r24, Z+9	; 0x09
    b214:	92 85       	ldd	r25, Z+10	; 0x0a
    b216:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b21a:	46 2f       	mov	r20, r22
    b21c:	f7 01       	movw	r30, r14
    b21e:	63 81       	ldd	r22, Z+3	; 0x03
    b220:	74 81       	ldd	r23, Z+4	; 0x04
    b222:	85 81       	ldd	r24, Z+5	; 0x05
    b224:	96 81       	ldd	r25, Z+6	; 0x06
    b226:	49 83       	std	Y+1, r20	; 0x01
    b228:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b22c:	02 e0       	ldi	r16, 0x02	; 2
    b22e:	22 e0       	ldi	r18, 0x02	; 2
    b230:	49 81       	ldd	r20, Y+1	; 0x01
    b232:	81 2f       	mov	r24, r17
    b234:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
}
    b238:	0f 90       	pop	r0
    b23a:	df 91       	pop	r29
    b23c:	cf 91       	pop	r28
    b23e:	1f 91       	pop	r17
    b240:	0f 91       	pop	r16
    b242:	ff 90       	pop	r15
    b244:	ef 90       	pop	r14
    b246:	08 95       	ret

0000b248 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b248:	ef 92       	push	r14
    b24a:	ff 92       	push	r15
    b24c:	0f 93       	push	r16
    b24e:	1f 93       	push	r17
    b250:	cf 93       	push	r28
    b252:	df 93       	push	r29
    b254:	1f 92       	push	r1
    b256:	cd b7       	in	r28, 0x3d	; 61
    b258:	de b7       	in	r29, 0x3e	; 62
    b25a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b25c:	81 89       	ldd	r24, Z+17	; 0x11
    b25e:	88 23       	and	r24, r24
    b260:	b9 f0       	breq	.+46     	; 0xb290 <render_shot+0x48>
    b262:	16 2f       	mov	r17, r22
    b264:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b266:	63 a9       	ldd	r22, Z+51	; 0x33
    b268:	74 a9       	ldd	r23, Z+52	; 0x34
    b26a:	85 a9       	ldd	r24, Z+53	; 0x35
    b26c:	96 a9       	ldd	r25, Z+54	; 0x36
    b26e:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b272:	46 2f       	mov	r20, r22
    b274:	f7 01       	movw	r30, r14
    b276:	67 a5       	ldd	r22, Z+47	; 0x2f
    b278:	70 a9       	ldd	r23, Z+48	; 0x30
    b27a:	81 a9       	ldd	r24, Z+49	; 0x31
    b27c:	92 a9       	ldd	r25, Z+50	; 0x32
    b27e:	49 83       	std	Y+1, r20	; 0x01
    b280:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b284:	01 e0       	ldi	r16, 0x01	; 1
    b286:	21 e0       	ldi	r18, 0x01	; 1
    b288:	49 81       	ldd	r20, Y+1	; 0x01
    b28a:	81 2f       	mov	r24, r17
    b28c:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
			sprite_index++;
		}
	}
}
    b290:	0f 90       	pop	r0
    b292:	df 91       	pop	r29
    b294:	cf 91       	pop	r28
    b296:	1f 91       	pop	r17
    b298:	0f 91       	pop	r16
    b29a:	ff 90       	pop	r15
    b29c:	ef 90       	pop	r14
    b29e:	08 95       	ret

0000b2a0 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b2a0:	ef 92       	push	r14
    b2a2:	ff 92       	push	r15
    b2a4:	0f 93       	push	r16
    b2a6:	1f 93       	push	r17
    b2a8:	cf 93       	push	r28
    b2aa:	df 93       	push	r29
    b2ac:	ec 01       	movw	r28, r24
    b2ae:	25 96       	adiw	r28, 0x05	; 5
    b2b0:	8c 01       	movw	r16, r24
    b2b2:	0f 5d       	subi	r16, 0xDF	; 223
    b2b4:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b2b6:	8e e1       	ldi	r24, 0x1E	; 30
    b2b8:	e8 2e       	mov	r14, r24
    b2ba:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b2bc:	88 85       	ldd	r24, Y+8	; 0x08
    b2be:	99 85       	ldd	r25, Y+9	; 0x09
    b2c0:	89 2b       	or	r24, r25
    b2c2:	c1 f0       	breq	.+48     	; 0xb2f4 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b2c4:	ce 01       	movw	r24, r28
    b2c6:	04 97       	sbiw	r24, 0x04	; 4
    b2c8:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b2cc:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b2ce:	48 81       	ld	r20, Y
    b2d0:	88 85       	ldd	r24, Y+8	; 0x08
    b2d2:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b2d4:	b7 01       	movw	r22, r14
    b2d6:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    b2da:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b2dc:	44 23       	and	r20, r20
    b2de:	39 f0       	breq	.+14     	; 0xb2ee <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b2e0:	40 e0       	ldi	r20, 0x00	; 0
    b2e2:	50 e0       	ldi	r21, 0x00	; 0
    b2e4:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
				ta->anims[i].tile_index = 0;
    b2e8:	19 86       	std	Y+9, r1	; 0x09
    b2ea:	18 86       	std	Y+8, r1	; 0x08
    b2ec:	03 c0       	rjmp	.+6      	; 0xb2f4 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b2ee:	a9 01       	movw	r20, r18
    b2f0:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
    b2f4:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b2f6:	c0 17       	cp	r28, r16
    b2f8:	d1 07       	cpc	r29, r17
    b2fa:	01 f7       	brne	.-64     	; 0xb2bc <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b2fc:	df 91       	pop	r29
    b2fe:	cf 91       	pop	r28
    b300:	1f 91       	pop	r17
    b302:	0f 91       	pop	r16
    b304:	ff 90       	pop	r15
    b306:	ef 90       	pop	r14
    b308:	08 95       	ret

0000b30a <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b30a:	cf 93       	push	r28
    b30c:	df 93       	push	r29
    b30e:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b310:	0e 94 32 53 	call	0xa664	; 0xa664 <LBGetNextFrameReverse>
    b314:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b316:	4c 81       	ldd	r20, Y+4	; 0x04
    b318:	8c 85       	ldd	r24, Y+12	; 0x0c
    b31a:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b31c:	6e e1       	ldi	r22, 0x1E	; 30
    b31e:	70 e0       	ldi	r23, 0x00	; 0
    b320:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    b324:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b326:	44 23       	and	r20, r20
    b328:	19 f0       	breq	.+6      	; 0xb330 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b32a:	44 ea       	ldi	r20, 0xA4	; 164
    b32c:	5d e7       	ldi	r21, 0x7D	; 125
    b32e:	01 c0       	rjmp	.+2      	; 0xb332 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b330:	a9 01       	movw	r20, r18
    b332:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	}
	return ta->anim.looped;
}
    b336:	8c 81       	ldd	r24, Y+4	; 0x04
    b338:	df 91       	pop	r29
    b33a:	cf 91       	pop	r28
    b33c:	08 95       	ret

0000b33e <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b33e:	1f 93       	push	r17
    b340:	cf 93       	push	r28
    b342:	df 93       	push	r29
    b344:	ec 01       	movw	r28, r24
    b346:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    b348:	8c 89       	ldd	r24, Y+20	; 0x14
    b34a:	80 ff       	sbrs	r24, 0
    b34c:	17 c0       	rjmp	.+46     	; 0xb37c <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b34e:	ce 01       	movw	r24, r28
    b350:	84 59       	subi	r24, 0x94	; 148
    b352:	9f 4f       	sbci	r25, 0xFF	; 255
    b354:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b358:	fe 01       	movw	r30, r28
    b35a:	e0 59       	subi	r30, 0x90	; 144
    b35c:	ff 4f       	sbci	r31, 0xFF	; 255
    b35e:	20 81       	ld	r18, Z
    b360:	22 23       	and	r18, r18
    b362:	09 f4       	brne	.+2      	; 0xb366 <tank_map+0x28>
    b364:	4a c0       	rjmp	.+148    	; 0xb3fa <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b366:	8c 89       	ldd	r24, Y+20	; 0x14
    b368:	91 e0       	ldi	r25, 0x01	; 1
    b36a:	98 27       	eor	r25, r24
    b36c:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b36e:	ce 01       	movw	r24, r28
    b370:	0e 94 af 56 	call	0xad5e	; 0xad5e <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b374:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b376:	84 e5       	ldi	r24, 0x54	; 84
    b378:	94 e4       	ldi	r25, 0x44	; 68
    b37a:	40 c0       	rjmp	.+128    	; 0xb3fc <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b37c:	9f 89       	ldd	r25, Y+23	; 0x17
    b37e:	98 37       	cpi	r25, 0x78	; 120
    b380:	11 f0       	breq	.+4      	; 0xb386 <tank_map+0x48>
		{
			player->grace_frame++;
    b382:	9f 5f       	subi	r25, 0xFF	; 255
    b384:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    b386:	98 81       	ld	r25, Y
    b388:	91 30       	cpi	r25, 0x01	; 1
    b38a:	61 f0       	breq	.+24     	; 0xb3a4 <tank_map+0x66>
    b38c:	b0 f0       	brcs	.+44     	; 0xb3ba <tank_map+0x7c>
    b38e:	92 30       	cpi	r25, 0x02	; 2
    b390:	69 f0       	breq	.+26     	; 0xb3ac <tank_map+0x6e>
    b392:	93 30       	cpi	r25, 0x03	; 3
    b394:	91 f4       	brne	.+36     	; 0xb3ba <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b396:	ce 01       	movw	r24, r28
    b398:	80 5a       	subi	r24, 0xA0	; 160
    b39a:	9f 4f       	sbci	r25, 0xFF	; 255
    b39c:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b3a0:	41 e0       	ldi	r20, 0x01	; 1
    b3a2:	11 c0       	rjmp	.+34     	; 0xb3c6 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b3a4:	ce 01       	movw	r24, r28
    b3a6:	80 5a       	subi	r24, 0xA0	; 160
    b3a8:	9f 4f       	sbci	r25, 0xFF	; 255
    b3aa:	0a c0       	rjmp	.+20     	; 0xb3c0 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b3ac:	ce 01       	movw	r24, r28
    b3ae:	8c 5a       	subi	r24, 0xAC	; 172
    b3b0:	9f 4f       	sbci	r25, 0xFF	; 255
    b3b2:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b3b6:	42 e0       	ldi	r20, 0x02	; 2
    b3b8:	06 c0       	rjmp	.+12     	; 0xb3c6 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b3ba:	ce 01       	movw	r24, r28
    b3bc:	8c 5a       	subi	r24, 0xAC	; 172
    b3be:	9f 4f       	sbci	r25, 0xFF	; 255
    b3c0:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b3c4:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    b3c6:	2f 89       	ldd	r18, Y+23	; 0x17
    b3c8:	28 37       	cpi	r18, 0x78	; 120
    b3ca:	31 f0       	breq	.+12     	; 0xb3d8 <tank_map+0x9a>
    b3cc:	20 91 37 0b 	lds	r18, 0x0B37
    b3d0:	22 23       	and	r18, r18
    b3d2:	11 f0       	breq	.+4      	; 0xb3d8 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b3d4:	84 e5       	ldi	r24, 0x54	; 84
    b3d6:	94 e4       	ldi	r25, 0x44	; 68
		}
		toggle_counter--;
    b3d8:	20 91 03 01 	lds	r18, 0x0103
    b3dc:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    b3de:	19 f0       	breq	.+6      	; 0xb3e6 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    b3e0:	20 93 03 01 	sts	0x0103, r18
    b3e4:	0b c0       	rjmp	.+22     	; 0xb3fc <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    b3e6:	24 e1       	ldi	r18, 0x14	; 20
    b3e8:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    b3ec:	30 91 37 0b 	lds	r19, 0x0B37
    b3f0:	21 e0       	ldi	r18, 0x01	; 1
    b3f2:	23 27       	eor	r18, r19
    b3f4:	20 93 37 0b 	sts	0x0B37, r18
    b3f8:	01 c0       	rjmp	.+2      	; 0xb3fc <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b3fa:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b3fc:	bc 01       	movw	r22, r24
    b3fe:	81 2f       	mov	r24, r17
    b400:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b404:	84 e0       	ldi	r24, 0x04	; 4
    b406:	81 0f       	add	r24, r17
    b408:	df 91       	pop	r29
    b40a:	cf 91       	pop	r28
    b40c:	1f 91       	pop	r17
    b40e:	08 95       	ret

0000b410 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b410:	cf 93       	push	r28
    b412:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    b414:	fc 01       	movw	r30, r24
    b416:	22 ad       	ldd	r18, Z+58	; 0x3a
    b418:	22 23       	and	r18, r18
    b41a:	d9 f0       	breq	.+54     	; 0xb452 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    b41c:	24 a5       	ldd	r18, Z+44	; 0x2c
    b41e:	21 30       	cpi	r18, 0x01	; 1
    b420:	59 f0       	breq	.+22     	; 0xb438 <shot_map+0x28>
    b422:	a8 f0       	brcs	.+42     	; 0xb44e <shot_map+0x3e>
    b424:	22 30       	cpi	r18, 0x02	; 2
    b426:	71 f0       	breq	.+28     	; 0xb444 <shot_map+0x34>
    b428:	23 30       	cpi	r18, 0x03	; 3
    b42a:	89 f4       	brne	.+34     	; 0xb44e <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    b42c:	88 5b       	subi	r24, 0xB8	; 184
    b42e:	9f 4f       	sbci	r25, 0xFF	; 255
    b430:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b434:	41 e0       	ldi	r20, 0x01	; 1
    b436:	10 c0       	rjmp	.+32     	; 0xb458 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    b438:	88 5b       	subi	r24, 0xB8	; 184
    b43a:	9f 4f       	sbci	r25, 0xFF	; 255
    b43c:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b440:	40 e0       	ldi	r20, 0x00	; 0
    b442:	0a c0       	rjmp	.+20     	; 0xb458 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    b444:	cc 96       	adiw	r24, 0x3c	; 60
    b446:	0e 94 0d 53 	call	0xa61a	; 0xa61a <LBGetNextFrame>
    b44a:	42 e0       	ldi	r20, 0x02	; 2
    b44c:	05 c0       	rjmp	.+10     	; 0xb458 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    b44e:	cc 96       	adiw	r24, 0x3c	; 60
    b450:	f5 cf       	rjmp	.-22     	; 0xb43c <shot_map+0x2c>
    b452:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    b454:	84 e5       	ldi	r24, 0x54	; 84
    b456:	94 e4       	ldi	r25, 0x44	; 68
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    b458:	bc 01       	movw	r22, r24
    b45a:	8c 2f       	mov	r24, r28
    b45c:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    b460:	81 e0       	ldi	r24, 0x01	; 1
    b462:	8c 0f       	add	r24, r28
    b464:	cf 91       	pop	r28
    b466:	08 95       	ret

0000b468 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    b468:	cf 93       	push	r28
    b46a:	df 93       	push	r29
    b46c:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    b46e:	88 81       	ld	r24, Y
    b470:	81 11       	cpse	r24, r1
    b472:	0b c0       	rjmp	.+22     	; 0xb48a <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    b474:	6f 81       	ldd	r22, Y+7	; 0x07
    b476:	78 85       	ldd	r23, Y+8	; 0x08
    b478:	89 85       	ldd	r24, Y+9	; 0x09
    b47a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b47c:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b480:	66 95       	lsr	r22
    b482:	66 95       	lsr	r22
    b484:	66 95       	lsr	r22
    b486:	6f 5f       	subi	r22, 0xFF	; 255
    b488:	1d c0       	rjmp	.+58     	; 0xb4c4 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    b48a:	81 30       	cpi	r24, 0x01	; 1
    b48c:	69 f4       	brne	.+26     	; 0xb4a8 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    b48e:	20 e0       	ldi	r18, 0x00	; 0
    b490:	30 e0       	ldi	r19, 0x00	; 0
    b492:	40 e0       	ldi	r20, 0x00	; 0
    b494:	5e e3       	ldi	r21, 0x3E	; 62
    b496:	6b 81       	ldd	r22, Y+3	; 0x03
    b498:	7c 81       	ldd	r23, Y+4	; 0x04
    b49a:	8d 81       	ldd	r24, Y+5	; 0x05
    b49c:	9e 81       	ldd	r25, Y+6	; 0x06
    b49e:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    b4a2:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b4a6:	27 c0       	rjmp	.+78     	; 0xb4f6 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    b4a8:	82 30       	cpi	r24, 0x02	; 2
    b4aa:	d9 f4       	brne	.+54     	; 0xb4e2 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    b4ac:	20 e0       	ldi	r18, 0x00	; 0
    b4ae:	30 e0       	ldi	r19, 0x00	; 0
    b4b0:	40 e0       	ldi	r20, 0x00	; 0
    b4b2:	5e e3       	ldi	r21, 0x3E	; 62
    b4b4:	6f 81       	ldd	r22, Y+7	; 0x07
    b4b6:	78 85       	ldd	r23, Y+8	; 0x08
    b4b8:	89 85       	ldd	r24, Y+9	; 0x09
    b4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4bc:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    b4c0:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
		sprite->y = tile * 8;
    b4c4:	88 e0       	ldi	r24, 0x08	; 8
    b4c6:	68 9f       	mul	r22, r24
    b4c8:	b0 01       	movw	r22, r0
    b4ca:	11 24       	eor	r1, r1
    b4cc:	88 27       	eor	r24, r24
    b4ce:	77 fd       	sbrc	r23, 7
    b4d0:	80 95       	com	r24
    b4d2:	98 2f       	mov	r25, r24
    b4d4:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    b4d8:	6f 83       	std	Y+7, r22	; 0x07
    b4da:	78 87       	std	Y+8, r23	; 0x08
    b4dc:	89 87       	std	Y+9, r24	; 0x09
    b4de:	9a 87       	std	Y+10, r25	; 0x0a
    b4e0:	18 c0       	rjmp	.+48     	; 0xb512 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    b4e2:	6b 81       	ldd	r22, Y+3	; 0x03
    b4e4:	7c 81       	ldd	r23, Y+4	; 0x04
    b4e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b4e8:	9e 81       	ldd	r25, Y+6	; 0x06
    b4ea:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b4ee:	66 95       	lsr	r22
    b4f0:	66 95       	lsr	r22
    b4f2:	66 95       	lsr	r22
    b4f4:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    b4f6:	88 e0       	ldi	r24, 0x08	; 8
    b4f8:	68 9f       	mul	r22, r24
    b4fa:	b0 01       	movw	r22, r0
    b4fc:	11 24       	eor	r1, r1
    b4fe:	88 27       	eor	r24, r24
    b500:	77 fd       	sbrc	r23, 7
    b502:	80 95       	com	r24
    b504:	98 2f       	mov	r25, r24
    b506:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    b50a:	6b 83       	std	Y+3, r22	; 0x03
    b50c:	7c 83       	std	Y+4, r23	; 0x04
    b50e:	8d 83       	std	Y+5, r24	; 0x05
    b510:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b512:	81 e0       	ldi	r24, 0x01	; 1
    b514:	8a 83       	std	Y+2, r24	; 0x02
}
    b516:	df 91       	pop	r29
    b518:	cf 91       	pop	r28
    b51a:	08 95       	ret

0000b51c <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    b51c:	cf 93       	push	r28
    b51e:	df 93       	push	r29
    b520:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    b522:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    b526:	9b 01       	movw	r18, r22
    b528:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    b52a:	88 81       	ld	r24, Y
    b52c:	81 11       	cpse	r24, r1
    b52e:	07 c0       	rjmp	.+14     	; 0xb53e <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    b530:	6f 81       	ldd	r22, Y+7	; 0x07
    b532:	78 85       	ldd	r23, Y+8	; 0x08
    b534:	89 85       	ldd	r24, Y+9	; 0x09
    b536:	9a 85       	ldd	r25, Y+10	; 0x0a
    b538:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b53c:	11 c0       	rjmp	.+34     	; 0xb560 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    b53e:	81 30       	cpi	r24, 0x01	; 1
    b540:	39 f4       	brne	.+14     	; 0xb550 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    b542:	6b 81       	ldd	r22, Y+3	; 0x03
    b544:	7c 81       	ldd	r23, Y+4	; 0x04
    b546:	8d 81       	ldd	r24, Y+5	; 0x05
    b548:	9e 81       	ldd	r25, Y+6	; 0x06
    b54a:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    b54e:	13 c0       	rjmp	.+38     	; 0xb576 <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    b550:	82 30       	cpi	r24, 0x02	; 2
    b552:	59 f4       	brne	.+22     	; 0xb56a <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    b554:	6f 81       	ldd	r22, Y+7	; 0x07
    b556:	78 85       	ldd	r23, Y+8	; 0x08
    b558:	89 85       	ldd	r24, Y+9	; 0x09
    b55a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b55c:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    b560:	6f 83       	std	Y+7, r22	; 0x07
    b562:	78 87       	std	Y+8, r23	; 0x08
    b564:	89 87       	std	Y+9, r24	; 0x09
    b566:	9a 87       	std	Y+10, r25	; 0x0a
    b568:	0a c0       	rjmp	.+20     	; 0xb57e <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    b56a:	6b 81       	ldd	r22, Y+3	; 0x03
    b56c:	7c 81       	ldd	r23, Y+4	; 0x04
    b56e:	8d 81       	ldd	r24, Y+5	; 0x05
    b570:	9e 81       	ldd	r25, Y+6	; 0x06
    b572:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b576:	6b 83       	std	Y+3, r22	; 0x03
    b578:	7c 83       	std	Y+4, r23	; 0x04
    b57a:	8d 83       	std	Y+5, r24	; 0x05
    b57c:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b57e:	81 e0       	ldi	r24, 0x01	; 1
    b580:	8a 83       	std	Y+2, r24	; 0x02
}
    b582:	df 91       	pop	r29
    b584:	cf 91       	pop	r28
    b586:	08 95       	ret

0000b588 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b588:	88 54       	subi	r24, 0x48	; 72
    b58a:	93 4f       	sbci	r25, 0xF3	; 243
    b58c:	fc 01       	movw	r30, r24
    b58e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b590:	81 30       	cpi	r24, 0x01	; 1
    b592:	31 f0       	breq	.+12     	; 0xb5a0 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b594:	82 30       	cpi	r24, 0x02	; 2
    b596:	31 f0       	breq	.+12     	; 0xb5a4 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b598:	87 33       	cpi	r24, 0x37	; 55
    b59a:	31 f0       	breq	.+12     	; 0xb5a8 <solid_square_tile+0x20>

	return 0;
    b59c:	80 e0       	ldi	r24, 0x00	; 0
    b59e:	08 95       	ret
    b5a0:	81 e0       	ldi	r24, 0x01	; 1
    b5a2:	08 95       	ret
    b5a4:	82 e0       	ldi	r24, 0x02	; 2
    b5a6:	08 95       	ret
    b5a8:	87 e3       	ldi	r24, 0x37	; 55
}
    b5aa:	08 95       	ret

0000b5ac <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b5ac:	88 54       	subi	r24, 0x48	; 72
    b5ae:	93 4f       	sbci	r25, 0xF3	; 243
    b5b0:	fc 01       	movw	r30, r24
    b5b2:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b5b4:	83 30       	cpi	r24, 0x03	; 3
    b5b6:	41 f0       	breq	.+16     	; 0xb5c8 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b5b8:	86 30       	cpi	r24, 0x06	; 6
    b5ba:	41 f0       	breq	.+16     	; 0xb5cc <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b5bc:	84 30       	cpi	r24, 0x04	; 4
    b5be:	41 f0       	breq	.+16     	; 0xb5d0 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b5c0:	85 30       	cpi	r24, 0x05	; 5
    b5c2:	41 f0       	breq	.+16     	; 0xb5d4 <solid_directional_tile+0x28>
	
	return 0;
    b5c4:	80 e0       	ldi	r24, 0x00	; 0
    b5c6:	08 95       	ret
    b5c8:	83 e0       	ldi	r24, 0x03	; 3
    b5ca:	08 95       	ret
    b5cc:	86 e0       	ldi	r24, 0x06	; 6
    b5ce:	08 95       	ret
    b5d0:	84 e0       	ldi	r24, 0x04	; 4
    b5d2:	08 95       	ret
    b5d4:	85 e0       	ldi	r24, 0x05	; 5
}
    b5d6:	08 95       	ret

0000b5d8 <solid_tile>:

u8 solid_tile(int tile_index)
{
    b5d8:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    b5da:	fc 01       	movw	r30, r24
    b5dc:	e8 54       	subi	r30, 0x48	; 72
    b5de:	f3 4f       	sbci	r31, 0xF3	; 243
    b5e0:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b5e2:	91 30       	cpi	r25, 0x01	; 1
    b5e4:	39 f0       	breq	.+14     	; 0xb5f4 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    b5e6:	92 30       	cpi	r25, 0x02	; 2
    b5e8:	39 f0       	breq	.+14     	; 0xb5f8 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    b5ea:	97 33       	cpi	r25, 0x37	; 55
    b5ec:	39 f0       	breq	.+14     	; 0xb5fc <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    b5ee:	c9 01       	movw	r24, r18
    b5f0:	0c 94 d6 5a 	jmp	0xb5ac	; 0xb5ac <solid_directional_tile>
    b5f4:	81 e0       	ldi	r24, 0x01	; 1
    b5f6:	08 95       	ret
    b5f8:	82 e0       	ldi	r24, 0x02	; 2
    b5fa:	08 95       	ret
    b5fc:	87 e3       	ldi	r24, 0x37	; 55
}
    b5fe:	08 95       	ret

0000b600 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    b600:	7f 92       	push	r7
    b602:	8f 92       	push	r8
    b604:	9f 92       	push	r9
    b606:	af 92       	push	r10
    b608:	bf 92       	push	r11
    b60a:	cf 92       	push	r12
    b60c:	df 92       	push	r13
    b60e:	ef 92       	push	r14
    b610:	ff 92       	push	r15
    b612:	0f 93       	push	r16
    b614:	1f 93       	push	r17
    b616:	cf 93       	push	r28
    b618:	df 93       	push	r29
    b61a:	b6 2e       	mov	r11, r22
    b61c:	94 2e       	mov	r9, r20
    b61e:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    b620:	fc 01       	movw	r30, r24
    b622:	e8 54       	subi	r30, 0x48	; 72
    b624:	f3 4f       	sbci	r31, 0xF3	; 243
    b626:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    b628:	6e e1       	ldi	r22, 0x1E	; 30
    b62a:	70 e0       	ldi	r23, 0x00	; 0
    b62c:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    b630:	f8 2e       	mov	r15, r24
    b632:	ff 0c       	add	r15, r15
    b634:	ff 0c       	add	r15, r15
    b636:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    b638:	6d 5f       	subi	r22, 0xFD	; 253
    b63a:	7f 4f       	sbci	r23, 0xFF	; 255
    b63c:	16 2f       	mov	r17, r22
    b63e:	11 0f       	add	r17, r17
    b640:	11 0f       	add	r17, r17
    b642:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    b644:	83 e0       	ldi	r24, 0x03	; 3
    b646:	d8 16       	cp	r13, r24
    b648:	19 f0       	breq	.+6      	; 0xb650 <collides_directional_tile+0x50>
    b64a:	86 e0       	ldi	r24, 0x06	; 6
    b64c:	d8 12       	cpse	r13, r24
    b64e:	31 c0       	rjmp	.+98     	; 0xb6b2 <collides_directional_tile+0xb2>
    b650:	cf ef       	ldi	r28, 0xFF	; 255
    b652:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    b654:	c9 0d       	add	r28, r9
    b656:	27 e0       	ldi	r18, 0x07	; 7
    b658:	72 2e       	mov	r7, r18
    b65a:	7f 0c       	add	r7, r15
    b65c:	37 e0       	ldi	r19, 0x07	; 7
    b65e:	83 2e       	mov	r8, r19
    b660:	81 0e       	add	r8, r17
    b662:	ac 2e       	mov	r10, r28
    b664:	cb 2c       	mov	r12, r11
    b666:	e9 2c       	mov	r14, r9
    b668:	0b 2d       	mov	r16, r11
    b66a:	21 2f       	mov	r18, r17
    b66c:	47 2d       	mov	r20, r7
    b66e:	68 2d       	mov	r22, r8
    b670:	8f 2d       	mov	r24, r15
    b672:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b676:	81 11       	cpse	r24, r1
    b678:	58 c0       	rjmp	.+176    	; 0xb72a <collides_directional_tile+0x12a>
    b67a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    b67c:	db 0d       	add	r29, r11
    b67e:	a9 2c       	mov	r10, r9
    b680:	cd 2e       	mov	r12, r29
    b682:	21 2f       	mov	r18, r17
    b684:	47 2d       	mov	r20, r7
    b686:	68 2d       	mov	r22, r8
    b688:	8f 2d       	mov	r24, r15
    b68a:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b68e:	81 11       	cpse	r24, r1
    b690:	4c c0       	rjmp	.+152    	; 0xb72a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    b692:	ac 2e       	mov	r10, r28
    b694:	0d 2f       	mov	r16, r29
    b696:	21 2f       	mov	r18, r17
    b698:	47 2d       	mov	r20, r7
    b69a:	68 2d       	mov	r22, r8
    b69c:	8f 2d       	mov	r24, r15
    b69e:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b6a2:	81 11       	cpse	r24, r1
    b6a4:	42 c0       	rjmp	.+132    	; 0xb72a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    b6a6:	ec 2e       	mov	r14, r28
    b6a8:	0b 2d       	mov	r16, r11
    b6aa:	21 2f       	mov	r18, r17
    b6ac:	47 2d       	mov	r20, r7
    b6ae:	68 2d       	mov	r22, r8
    b6b0:	34 c0       	rjmp	.+104    	; 0xb71a <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    b6b2:	8c ef       	ldi	r24, 0xFC	; 252
    b6b4:	8d 0d       	add	r24, r13
    b6b6:	82 30       	cpi	r24, 0x02	; 2
    b6b8:	b0 f5       	brcc	.+108    	; 0xb726 <collides_directional_tile+0x126>
    b6ba:	cf ef       	ldi	r28, 0xFF	; 255
    b6bc:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    b6be:	c4 0f       	add	r28, r20
    b6c0:	87 e0       	ldi	r24, 0x07	; 7
    b6c2:	78 2e       	mov	r7, r24
    b6c4:	71 0e       	add	r7, r17
    b6c6:	97 e0       	ldi	r25, 0x07	; 7
    b6c8:	89 2e       	mov	r8, r25
    b6ca:	8f 0c       	add	r8, r15
    b6cc:	ac 2e       	mov	r10, r28
    b6ce:	cb 2c       	mov	r12, r11
    b6d0:	e4 2e       	mov	r14, r20
    b6d2:	0b 2d       	mov	r16, r11
    b6d4:	27 2d       	mov	r18, r7
    b6d6:	48 2d       	mov	r20, r8
    b6d8:	61 2f       	mov	r22, r17
    b6da:	8f 2d       	mov	r24, r15
    b6dc:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b6e0:	81 11       	cpse	r24, r1
    b6e2:	23 c0       	rjmp	.+70     	; 0xb72a <collides_directional_tile+0x12a>
    b6e4:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    b6e6:	db 0d       	add	r29, r11
    b6e8:	a9 2c       	mov	r10, r9
    b6ea:	cd 2e       	mov	r12, r29
    b6ec:	27 2d       	mov	r18, r7
    b6ee:	48 2d       	mov	r20, r8
    b6f0:	61 2f       	mov	r22, r17
    b6f2:	8f 2d       	mov	r24, r15
    b6f4:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b6f8:	81 11       	cpse	r24, r1
    b6fa:	17 c0       	rjmp	.+46     	; 0xb72a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    b6fc:	ac 2e       	mov	r10, r28
    b6fe:	0d 2f       	mov	r16, r29
    b700:	27 2d       	mov	r18, r7
    b702:	48 2d       	mov	r20, r8
    b704:	61 2f       	mov	r22, r17
    b706:	8f 2d       	mov	r24, r15
    b708:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b70c:	81 11       	cpse	r24, r1
    b70e:	0d c0       	rjmp	.+26     	; 0xb72a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    b710:	ec 2e       	mov	r14, r28
    b712:	0b 2d       	mov	r16, r11
    b714:	27 2d       	mov	r18, r7
    b716:	48 2d       	mov	r20, r8
    b718:	61 2f       	mov	r22, r17
    b71a:	8f 2d       	mov	r24, r15
    b71c:	0e 94 10 54 	call	0xa820	; 0xa820 <LBLineIntersect>
    b720:	81 11       	cpse	r24, r1
    b722:	03 c0       	rjmp	.+6      	; 0xb72a <collides_directional_tile+0x12a>
    b724:	03 c0       	rjmp	.+6      	; 0xb72c <collides_directional_tile+0x12c>
	}
	
	return 0;
    b726:	80 e0       	ldi	r24, 0x00	; 0
    b728:	01 c0       	rjmp	.+2      	; 0xb72c <collides_directional_tile+0x12c>
    b72a:	8d 2d       	mov	r24, r13
}
    b72c:	df 91       	pop	r29
    b72e:	cf 91       	pop	r28
    b730:	1f 91       	pop	r17
    b732:	0f 91       	pop	r16
    b734:	ff 90       	pop	r15
    b736:	ef 90       	pop	r14
    b738:	df 90       	pop	r13
    b73a:	cf 90       	pop	r12
    b73c:	bf 90       	pop	r11
    b73e:	af 90       	pop	r10
    b740:	9f 90       	pop	r9
    b742:	8f 90       	pop	r8
    b744:	7f 90       	pop	r7
    b746:	08 95       	ret

0000b748 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    b748:	8f 92       	push	r8
    b74a:	9f 92       	push	r9
    b74c:	af 92       	push	r10
    b74e:	cf 92       	push	r12
    b750:	ef 92       	push	r14
    b752:	0f 93       	push	r16
    b754:	1f 93       	push	r17
    b756:	cf 93       	push	r28
    b758:	df 93       	push	r29
    b75a:	4c 01       	movw	r8, r24
    b75c:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b75e:	20 e0       	ldi	r18, 0x00	; 0
    b760:	30 e0       	ldi	r19, 0x00	; 0
    b762:	40 e0       	ldi	r20, 0x00	; 0
    b764:	50 e4       	ldi	r21, 0x40	; 64
    b766:	6f 81       	ldd	r22, Y+7	; 0x07
    b768:	78 85       	ldd	r23, Y+8	; 0x08
    b76a:	89 85       	ldd	r24, Y+9	; 0x09
    b76c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b76e:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b772:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b776:	e6 2e       	mov	r14, r22
    b778:	20 e0       	ldi	r18, 0x00	; 0
    b77a:	30 e0       	ldi	r19, 0x00	; 0
    b77c:	40 e0       	ldi	r20, 0x00	; 0
    b77e:	50 e4       	ldi	r21, 0x40	; 64
    b780:	6b 81       	ldd	r22, Y+3	; 0x03
    b782:	7c 81       	ldd	r23, Y+4	; 0x04
    b784:	8d 81       	ldd	r24, Y+5	; 0x05
    b786:	9e 81       	ldd	r25, Y+6	; 0x06
    b788:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b78c:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b790:	06 2f       	mov	r16, r22
    b792:	20 e0       	ldi	r18, 0x00	; 0
    b794:	30 e0       	ldi	r19, 0x00	; 0
    b796:	40 e8       	ldi	r20, 0x80	; 128
    b798:	5f e3       	ldi	r21, 0x3F	; 63
    b79a:	f4 01       	movw	r30, r8
    b79c:	67 81       	ldd	r22, Z+7	; 0x07
    b79e:	70 85       	ldd	r23, Z+8	; 0x08
    b7a0:	81 85       	ldd	r24, Z+9	; 0x09
    b7a2:	92 85       	ldd	r25, Z+10	; 0x0a
    b7a4:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b7a8:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b7ac:	16 2f       	mov	r17, r22
    b7ae:	20 e0       	ldi	r18, 0x00	; 0
    b7b0:	30 e0       	ldi	r19, 0x00	; 0
    b7b2:	40 e8       	ldi	r20, 0x80	; 128
    b7b4:	5f e3       	ldi	r21, 0x3F	; 63
    b7b6:	f4 01       	movw	r30, r8
    b7b8:	63 81       	ldd	r22, Z+3	; 0x03
    b7ba:	74 81       	ldd	r23, Z+4	; 0x04
    b7bc:	85 81       	ldd	r24, Z+5	; 0x05
    b7be:	96 81       	ldd	r25, Z+6	; 0x06
    b7c0:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b7c4:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b7c8:	86 2f       	mov	r24, r22
    b7ca:	94 e0       	ldi	r25, 0x04	; 4
    b7cc:	a9 2e       	mov	r10, r25
    b7ce:	24 e0       	ldi	r18, 0x04	; 4
    b7d0:	c2 2e       	mov	r12, r18
    b7d2:	2e e0       	ldi	r18, 0x0E	; 14
    b7d4:	4e e0       	ldi	r20, 0x0E	; 14
    b7d6:	61 2f       	mov	r22, r17
    b7d8:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b7dc:	88 23       	and	r24, r24
    b7de:	41 f0       	breq	.+16     	; 0xb7f0 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b7e0:	f4 01       	movw	r30, r8
    b7e2:	87 89       	ldd	r24, Z+23	; 0x17
    b7e4:	88 37       	cpi	r24, 0x78	; 120
    b7e6:	21 f4       	brne	.+8      	; 0xb7f0 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b7e8:	81 e0       	ldi	r24, 0x01	; 1
    b7ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    b7ec:	99 30       	cpi	r25, 0x09	; 9
    b7ee:	08 f4       	brcc	.+2      	; 0xb7f2 <player_shot+0xaa>
    b7f0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    b7f2:	df 91       	pop	r29
    b7f4:	cf 91       	pop	r28
    b7f6:	1f 91       	pop	r17
    b7f8:	0f 91       	pop	r16
    b7fa:	ef 90       	pop	r14
    b7fc:	cf 90       	pop	r12
    b7fe:	af 90       	pop	r10
    b800:	9f 90       	pop	r9
    b802:	8f 90       	pop	r8
    b804:	08 95       	ret

0000b806 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    b806:	af 92       	push	r10
    b808:	cf 92       	push	r12
    b80a:	ef 92       	push	r14
    b80c:	0f 93       	push	r16
    b80e:	1f 93       	push	r17
    b810:	cf 93       	push	r28
    b812:	df 93       	push	r29
    b814:	ec 01       	movw	r28, r24
    b816:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    b818:	20 e0       	ldi	r18, 0x00	; 0
    b81a:	30 e0       	ldi	r19, 0x00	; 0
    b81c:	40 e0       	ldi	r20, 0x00	; 0
    b81e:	50 e4       	ldi	r21, 0x40	; 64
    b820:	fb 01       	movw	r30, r22
    b822:	67 81       	ldd	r22, Z+7	; 0x07
    b824:	70 85       	ldd	r23, Z+8	; 0x08
    b826:	81 85       	ldd	r24, Z+9	; 0x09
    b828:	92 85       	ldd	r25, Z+10	; 0x0a
    b82a:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b82e:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b832:	e6 2e       	mov	r14, r22
    b834:	20 e0       	ldi	r18, 0x00	; 0
    b836:	30 e0       	ldi	r19, 0x00	; 0
    b838:	40 e0       	ldi	r20, 0x00	; 0
    b83a:	50 e4       	ldi	r21, 0x40	; 64
    b83c:	f8 01       	movw	r30, r16
    b83e:	63 81       	ldd	r22, Z+3	; 0x03
    b840:	74 81       	ldd	r23, Z+4	; 0x04
    b842:	85 81       	ldd	r24, Z+5	; 0x05
    b844:	96 81       	ldd	r25, Z+6	; 0x06
    b846:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b84a:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b84e:	06 2f       	mov	r16, r22
    b850:	6f 81       	ldd	r22, Y+7	; 0x07
    b852:	78 85       	ldd	r23, Y+8	; 0x08
    b854:	89 85       	ldd	r24, Y+9	; 0x09
    b856:	9a 85       	ldd	r25, Y+10	; 0x0a
    b858:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b85c:	16 2f       	mov	r17, r22
    b85e:	6b 81       	ldd	r22, Y+3	; 0x03
    b860:	7c 81       	ldd	r23, Y+4	; 0x04
    b862:	8d 81       	ldd	r24, Y+5	; 0x05
    b864:	9e 81       	ldd	r25, Y+6	; 0x06
    b866:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    b86a:	86 2f       	mov	r24, r22
    b86c:	94 e0       	ldi	r25, 0x04	; 4
    b86e:	a9 2e       	mov	r10, r25
    b870:	24 e0       	ldi	r18, 0x04	; 4
    b872:	c2 2e       	mov	r12, r18
    b874:	28 e0       	ldi	r18, 0x08	; 8
    b876:	48 e0       	ldi	r20, 0x08	; 8
    b878:	61 2f       	mov	r22, r17
    b87a:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
    b87e:	88 23       	and	r24, r24
    b880:	39 f0       	breq	.+14     	; 0xb890 <turret_shot+0x8a>
    b882:	91 e0       	ldi	r25, 0x01	; 1
    b884:	8b 85       	ldd	r24, Y+11	; 0x0b
    b886:	81 11       	cpse	r24, r1
    b888:	01 c0       	rjmp	.+2      	; 0xb88c <turret_shot+0x86>
    b88a:	90 e0       	ldi	r25, 0x00	; 0
    b88c:	89 2f       	mov	r24, r25
    b88e:	01 c0       	rjmp	.+2      	; 0xb892 <turret_shot+0x8c>
    b890:	80 e0       	ldi	r24, 0x00	; 0
}
    b892:	df 91       	pop	r29
    b894:	cf 91       	pop	r28
    b896:	1f 91       	pop	r17
    b898:	0f 91       	pop	r16
    b89a:	ef 90       	pop	r14
    b89c:	cf 90       	pop	r12
    b89e:	af 90       	pop	r10
    b8a0:	08 95       	ret

0000b8a2 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    b8a2:	cf 92       	push	r12
    b8a4:	df 92       	push	r13
    b8a6:	ef 92       	push	r14
    b8a8:	ff 92       	push	r15
    b8aa:	cf 93       	push	r28
    b8ac:	df 93       	push	r29
    b8ae:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b8b0:	cb 80       	ldd	r12, Y+3	; 0x03
    b8b2:	dc 80       	ldd	r13, Y+4	; 0x04
    b8b4:	ed 80       	ldd	r14, Y+5	; 0x05
    b8b6:	fe 80       	ldd	r15, Y+6	; 0x06
    b8b8:	20 e0       	ldi	r18, 0x00	; 0
    b8ba:	30 e0       	ldi	r19, 0x00	; 0
    b8bc:	a9 01       	movw	r20, r18
    b8be:	c7 01       	movw	r24, r14
    b8c0:	b6 01       	movw	r22, r12
    b8c2:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    b8c6:	87 fd       	sbrc	r24, 7
    b8c8:	31 c0       	rjmp	.+98     	; 0xb92c <collision_detect_boundries+0x8a>
    b8ca:	20 e0       	ldi	r18, 0x00	; 0
    b8cc:	30 e0       	ldi	r19, 0x00	; 0
    b8ce:	40 e0       	ldi	r20, 0x00	; 0
    b8d0:	51 e4       	ldi	r21, 0x41	; 65
    b8d2:	c7 01       	movw	r24, r14
    b8d4:	b6 01       	movw	r22, r12
    b8d6:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b8da:	20 e0       	ldi	r18, 0x00	; 0
    b8dc:	30 e0       	ldi	r19, 0x00	; 0
    b8de:	40 e7       	ldi	r20, 0x70	; 112
    b8e0:	53 e4       	ldi	r21, 0x43	; 67
    b8e2:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    b8e6:	18 16       	cp	r1, r24
    b8e8:	0c f1       	brlt	.+66     	; 0xb92c <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b8ea:	cf 80       	ldd	r12, Y+7	; 0x07
    b8ec:	d8 84       	ldd	r13, Y+8	; 0x08
    b8ee:	e9 84       	ldd	r14, Y+9	; 0x09
    b8f0:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b8f2:	20 e0       	ldi	r18, 0x00	; 0
    b8f4:	30 e0       	ldi	r19, 0x00	; 0
    b8f6:	40 ec       	ldi	r20, 0xC0	; 192
    b8f8:	51 e4       	ldi	r21, 0x41	; 65
    b8fa:	c7 01       	movw	r24, r14
    b8fc:	b6 01       	movw	r22, r12
    b8fe:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    b902:	87 fd       	sbrc	r24, 7
    b904:	13 c0       	rjmp	.+38     	; 0xb92c <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b906:	20 e0       	ldi	r18, 0x00	; 0
    b908:	30 e0       	ldi	r19, 0x00	; 0
    b90a:	40 e0       	ldi	r20, 0x00	; 0
    b90c:	51 e4       	ldi	r21, 0x41	; 65
    b90e:	c7 01       	movw	r24, r14
    b910:	b6 01       	movw	r22, r12
    b912:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    b916:	c1 e0       	ldi	r28, 0x01	; 1
    b918:	20 e0       	ldi	r18, 0x00	; 0
    b91a:	30 e0       	ldi	r19, 0x00	; 0
    b91c:	40 e6       	ldi	r20, 0x60	; 96
    b91e:	53 e4       	ldi	r21, 0x43	; 67
    b920:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    b924:	18 16       	cp	r1, r24
    b926:	1c f0       	brlt	.+6      	; 0xb92e <collision_detect_boundries+0x8c>
    b928:	c0 e0       	ldi	r28, 0x00	; 0
    b92a:	01 c0       	rjmp	.+2      	; 0xb92e <collision_detect_boundries+0x8c>
	{
		return 1;
    b92c:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    b92e:	8c 2f       	mov	r24, r28
    b930:	df 91       	pop	r29
    b932:	cf 91       	pop	r28
    b934:	ff 90       	pop	r15
    b936:	ef 90       	pop	r14
    b938:	df 90       	pop	r13
    b93a:	cf 90       	pop	r12
    b93c:	08 95       	ret

0000b93e <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b93e:	1f 93       	push	r17
    b940:	cf 93       	push	r28
    b942:	df 93       	push	r29
    b944:	9c 01       	movw	r18, r24
    b946:	fb 01       	movw	r30, r22
    b948:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    b94a:	6e e1       	ldi	r22, 0x1E	; 30
    b94c:	70 e0       	ldi	r23, 0x00	; 0
    b94e:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    b952:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    b954:	63 e0       	ldi	r22, 0x03	; 3
    b956:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    b958:	e9 01       	movw	r28, r18
    b95a:	c8 54       	subi	r28, 0x48	; 72
    b95c:	d3 4f       	sbci	r29, 0xF3	; 243
    b95e:	49 81       	ldd	r20, Y+1	; 0x01
    b960:	44 23       	and	r20, r20
    b962:	71 f0       	breq	.+28     	; 0xb980 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b964:	e9 01       	movw	r28, r18
    b966:	c7 54       	subi	r28, 0x47	; 71
    b968:	d3 4f       	sbci	r29, 0xF3	; 243
    b96a:	49 81       	ldd	r20, Y+1	; 0x01
    b96c:	44 23       	and	r20, r20
    b96e:	91 f0       	breq	.+36     	; 0xb994 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b970:	e9 01       	movw	r28, r18
    b972:	ca 52       	subi	r28, 0x2A	; 42
    b974:	d3 4f       	sbci	r29, 0xF3	; 243
    b976:	49 81       	ldd	r20, Y+1	; 0x01
    b978:	41 11       	cpse	r20, r1
    b97a:	04 c0       	rjmp	.+8      	; 0xb984 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b97c:	64 e0       	ldi	r22, 0x04	; 4
    b97e:	69 0f       	add	r22, r25
    b980:	af 01       	movw	r20, r30
    b982:	0a c0       	rjmp	.+20     	; 0xb998 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b984:	e9 01       	movw	r28, r18
    b986:	c9 52       	subi	r28, 0x29	; 41
    b988:	d3 4f       	sbci	r29, 0xF3	; 243
    b98a:	29 81       	ldd	r18, Y+1	; 0x01
    b98c:	21 11       	cpse	r18, r1
    b98e:	07 c0       	rjmp	.+14     	; 0xb99e <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b990:	64 e0       	ldi	r22, 0x04	; 4
    b992:	69 0f       	add	r22, r25
    b994:	af 01       	movw	r20, r30
    b996:	8f 5f       	subi	r24, 0xFF	; 255
    b998:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b99c:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b99e:	df 91       	pop	r29
    b9a0:	cf 91       	pop	r28
    b9a2:	1f 91       	pop	r17
    b9a4:	08 95       	ret

0000b9a6 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b9a6:	ff 92       	push	r15
    b9a8:	0f 93       	push	r16
    b9aa:	1f 93       	push	r17
    b9ac:	cf 93       	push	r28
    b9ae:	df 93       	push	r29
    b9b0:	ec 01       	movw	r28, r24
    b9b2:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b9b4:	20 e0       	ldi	r18, 0x00	; 0
    b9b6:	30 e0       	ldi	r19, 0x00	; 0
    b9b8:	40 e0       	ldi	r20, 0x00	; 0
    b9ba:	5e e3       	ldi	r21, 0x3E	; 62
    b9bc:	6f 81       	ldd	r22, Y+7	; 0x07
    b9be:	78 85       	ldd	r23, Y+8	; 0x08
    b9c0:	89 85       	ldd	r24, Y+9	; 0x09
    b9c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b9c4:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    b9c8:	20 e0       	ldi	r18, 0x00	; 0
    b9ca:	30 e0       	ldi	r19, 0x00	; 0
    b9cc:	40 e4       	ldi	r20, 0x40	; 64
    b9ce:	50 e4       	ldi	r21, 0x40	; 64
    b9d0:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    b9d4:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b9d8:	8e e1       	ldi	r24, 0x1E	; 30
    b9da:	68 9f       	mul	r22, r24
    b9dc:	80 01       	movw	r16, r0
    b9de:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    b9e0:	20 e0       	ldi	r18, 0x00	; 0
    b9e2:	30 e0       	ldi	r19, 0x00	; 0
    b9e4:	40 e0       	ldi	r20, 0x00	; 0
    b9e6:	5e e3       	ldi	r21, 0x3E	; 62
    b9e8:	6b 81       	ldd	r22, Y+3	; 0x03
    b9ea:	7c 81       	ldd	r23, Y+4	; 0x04
    b9ec:	8d 81       	ldd	r24, Y+5	; 0x05
    b9ee:	9e 81       	ldd	r25, Y+6	; 0x06
    b9f0:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    b9f4:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b9f8:	06 0f       	add	r16, r22
    b9fa:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    b9fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b9fe:	88 23       	and	r24, r24
    ba00:	79 f0       	breq	.+30     	; 0xba20 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ba02:	40 e0       	ldi	r20, 0x00	; 0
    ba04:	50 e0       	ldi	r21, 0x00	; 0
    ba06:	61 e0       	ldi	r22, 0x01	; 1
    ba08:	8a e0       	ldi	r24, 0x0A	; 10
    ba0a:	8f 0d       	add	r24, r15
    ba0c:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ba10:	47 e0       	ldi	r20, 0x07	; 7
    ba12:	62 ec       	ldi	r22, 0xC2	; 194
    ba14:	7d e7       	ldi	r23, 0x7D	; 125
    ba16:	c8 01       	movw	r24, r16
    ba18:	0e 94 9f 5c 	call	0xb93e	; 0xb93e <drop_item>
		player->max_speed = MAX_SPEED;
    ba1c:	82 e3       	ldi	r24, 0x32	; 50
    ba1e:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    ba20:	89 8d       	ldd	r24, Y+25	; 0x19
    ba22:	88 23       	and	r24, r24
    ba24:	69 f0       	breq	.+26     	; 0xba40 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    ba26:	40 e0       	ldi	r20, 0x00	; 0
    ba28:	50 e0       	ldi	r21, 0x00	; 0
    ba2a:	61 e0       	ldi	r22, 0x01	; 1
    ba2c:	8b e0       	ldi	r24, 0x0B	; 11
    ba2e:	8f 0d       	add	r24, r15
    ba30:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ba34:	49 e0       	ldi	r20, 0x09	; 9
    ba36:	6c eb       	ldi	r22, 0xBC	; 188
    ba38:	7d e7       	ldi	r23, 0x7D	; 125
    ba3a:	c8 01       	movw	r24, r16
    ba3c:	0e 94 9f 5c 	call	0xb93e	; 0xb93e <drop_item>
	}
	player->has_over_speed = false;
    ba40:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    ba42:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    ba44:	8c 89       	ldd	r24, Y+20	; 0x14
    ba46:	81 60       	ori	r24, 0x01	; 1
    ba48:	8c 8b       	std	Y+20, r24	; 0x14
}
    ba4a:	df 91       	pop	r29
    ba4c:	cf 91       	pop	r28
    ba4e:	1f 91       	pop	r17
    ba50:	0f 91       	pop	r16
    ba52:	ff 90       	pop	r15
    ba54:	08 95       	ret

0000ba56 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ba56:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ba58:	70 e0       	ldi	r23, 0x00	; 0
    ba5a:	8e e1       	ldi	r24, 0x1E	; 30
    ba5c:	48 9f       	mul	r20, r24
    ba5e:	60 0d       	add	r22, r0
    ba60:	71 1d       	adc	r23, r1
    ba62:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ba64:	21 11       	cpse	r18, r1
    ba66:	05 c0       	rjmp	.+10     	; 0xba72 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    ba68:	71 83       	std	Z+1, r23	; 0x01
    ba6a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ba6c:	6f 5f       	subi	r22, 0xFF	; 255
    ba6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba70:	0c c0       	rjmp	.+24     	; 0xba8a <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    ba72:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    ba74:	21 30       	cpi	r18, 0x01	; 1
    ba76:	11 f4       	brne	.+4      	; 0xba7c <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    ba78:	01 96       	adiw	r24, 0x01	; 1
    ba7a:	03 c0       	rjmp	.+6      	; 0xba82 <get_interesting_tile_indexes_shot+0x2c>
    ba7c:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    ba7e:	22 30       	cpi	r18, 0x02	; 2
    ba80:	39 f4       	brne	.+14     	; 0xba90 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    ba82:	91 83       	std	Z+1, r25	; 0x01
    ba84:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ba86:	61 5e       	subi	r22, 0xE1	; 225
    ba88:	7f 4f       	sbci	r23, 0xFF	; 255
    ba8a:	73 83       	std	Z+3, r23	; 0x03
    ba8c:	62 83       	std	Z+2, r22	; 0x02
    ba8e:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ba90:	71 83       	std	Z+1, r23	; 0x01
    ba92:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ba94:	93 83       	std	Z+3, r25	; 0x03
    ba96:	82 83       	std	Z+2, r24	; 0x02
    ba98:	08 95       	ret

0000ba9a <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    ba9a:	ef 92       	push	r14
    ba9c:	ff 92       	push	r15
    ba9e:	0f 93       	push	r16
    baa0:	1f 93       	push	r17
    baa2:	cf 93       	push	r28
    baa4:	df 93       	push	r29
    baa6:	ec 01       	movw	r28, r24
    baa8:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    baaa:	8e e1       	ldi	r24, 0x1E	; 30
    baac:	e8 2e       	mov	r14, r24
    baae:	f1 2c       	mov	r15, r1
    bab0:	cb 01       	movw	r24, r22
    bab2:	b7 01       	movw	r22, r14
    bab4:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    bab8:	6d 5f       	subi	r22, 0xFD	; 253
    baba:	40 e0       	ldi	r20, 0x00	; 0
    babc:	50 e0       	ldi	r21, 0x00	; 0
    babe:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    bac2:	88 81       	ld	r24, Y
    bac4:	fe 01       	movw	r30, r28
    bac6:	9e e0       	ldi	r25, 0x0E	; 14
    bac8:	89 9f       	mul	r24, r25
    baca:	e0 0d       	add	r30, r0
    bacc:	f1 1d       	adc	r31, r1
    bace:	11 24       	eor	r1, r1
    bad0:	85 85       	ldd	r24, Z+13	; 0x0d
    bad2:	96 85       	ldd	r25, Z+14	; 0x0e
    bad4:	00 97       	sbiw	r24, 0x00	; 0
    bad6:	41 f0       	breq	.+16     	; 0xbae8 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    bad8:	b7 01       	movw	r22, r14
    bada:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    bade:	6d 5f       	subi	r22, 0xFD	; 253
    bae0:	40 e0       	ldi	r20, 0x00	; 0
    bae2:	50 e0       	ldi	r21, 0x00	; 0
    bae4:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    bae8:	88 81       	ld	r24, Y
    baea:	fe 01       	movw	r30, r28
    baec:	9e e0       	ldi	r25, 0x0E	; 14
    baee:	89 9f       	mul	r24, r25
    baf0:	e0 0d       	add	r30, r0
    baf2:	f1 1d       	adc	r31, r1
    baf4:	11 24       	eor	r1, r1
    baf6:	16 87       	std	Z+14, r17	; 0x0e
    baf8:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    bafa:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    bafc:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    bafe:	82 30       	cpi	r24, 0x02	; 2
    bb00:	11 f0       	breq	.+4      	; 0xbb06 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    bb02:	88 83       	st	Y, r24
    bb04:	01 c0       	rjmp	.+2      	; 0xbb08 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    bb06:	18 82       	st	Y, r1
	}
}
    bb08:	df 91       	pop	r29
    bb0a:	cf 91       	pop	r28
    bb0c:	1f 91       	pop	r17
    bb0e:	0f 91       	pop	r16
    bb10:	ff 90       	pop	r15
    bb12:	ef 90       	pop	r14
    bb14:	08 95       	ret

0000bb16 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    bb16:	fb 01       	movw	r30, r22
	switch (tile_type)
    bb18:	84 30       	cpi	r24, 0x04	; 4
    bb1a:	71 f0       	breq	.+28     	; 0xbb38 <richochet+0x22>
    bb1c:	18 f4       	brcc	.+6      	; 0xbb24 <richochet+0xe>
    bb1e:	83 30       	cpi	r24, 0x03	; 3
    bb20:	31 f0       	breq	.+12     	; 0xbb2e <richochet+0x18>
    bb22:	08 95       	ret
    bb24:	85 30       	cpi	r24, 0x05	; 5
    bb26:	99 f0       	breq	.+38     	; 0xbb4e <richochet+0x38>
    bb28:	86 30       	cpi	r24, 0x06	; 6
    bb2a:	59 f0       	breq	.+22     	; 0xbb42 <richochet+0x2c>
    bb2c:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bb2e:	80 81       	ld	r24, Z
    bb30:	8d 7f       	andi	r24, 0xFD	; 253
    bb32:	29 f4       	brne	.+10     	; 0xbb3e <richochet+0x28>
				sprite->direction = D_RIGHT;
    bb34:	81 e0       	ldi	r24, 0x01	; 1
    bb36:	09 c0       	rjmp	.+18     	; 0xbb4a <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bb38:	80 81       	ld	r24, Z
    bb3a:	8d 7f       	andi	r24, 0xFD	; 253
    bb3c:	29 f0       	breq	.+10     	; 0xbb48 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    bb3e:	82 e0       	ldi	r24, 0x02	; 2
    bb40:	04 c0       	rjmp	.+8      	; 0xbb4a <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bb42:	80 81       	ld	r24, Z
    bb44:	8d 7f       	andi	r24, 0xFD	; 253
    bb46:	31 f4       	brne	.+12     	; 0xbb54 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    bb48:	83 e0       	ldi	r24, 0x03	; 3
    bb4a:	80 83       	st	Z, r24
    bb4c:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bb4e:	80 81       	ld	r24, Z
    bb50:	8d 7f       	andi	r24, 0xFD	; 253
    bb52:	81 f3       	breq	.-32     	; 0xbb34 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    bb54:	10 82       	st	Z, r1
    bb56:	08 95       	ret

0000bb58 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    bb58:	2f 92       	push	r2
    bb5a:	3f 92       	push	r3
    bb5c:	4f 92       	push	r4
    bb5e:	5f 92       	push	r5
    bb60:	6f 92       	push	r6
    bb62:	7f 92       	push	r7
    bb64:	8f 92       	push	r8
    bb66:	9f 92       	push	r9
    bb68:	af 92       	push	r10
    bb6a:	bf 92       	push	r11
    bb6c:	cf 92       	push	r12
    bb6e:	df 92       	push	r13
    bb70:	ef 92       	push	r14
    bb72:	ff 92       	push	r15
    bb74:	0f 93       	push	r16
    bb76:	1f 93       	push	r17
    bb78:	cf 93       	push	r28
    bb7a:	df 93       	push	r29
    bb7c:	00 d0       	rcall	.+0      	; 0xbb7e <collision_detect_shot+0x26>
    bb7e:	00 d0       	rcall	.+0      	; 0xbb80 <collision_detect_shot+0x28>
    bb80:	1f 92       	push	r1
    bb82:	cd b7       	in	r28, 0x3d	; 61
    bb84:	de b7       	in	r29, 0x3e	; 62
    bb86:	3c 01       	movw	r6, r24
    bb88:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    bb8a:	1a 82       	std	Y+2, r1	; 0x02
    bb8c:	19 82       	std	Y+1, r1	; 0x01
    bb8e:	1c 82       	std	Y+4, r1	; 0x04
    bb90:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    bb92:	20 e0       	ldi	r18, 0x00	; 0
    bb94:	30 e0       	ldi	r19, 0x00	; 0
    bb96:	40 e0       	ldi	r20, 0x00	; 0
    bb98:	5e e3       	ldi	r21, 0x3E	; 62
    bb9a:	db 01       	movw	r26, r22
    bb9c:	17 96       	adiw	r26, 0x07	; 7
    bb9e:	6d 91       	ld	r22, X+
    bba0:	7d 91       	ld	r23, X+
    bba2:	8d 91       	ld	r24, X+
    bba4:	9c 91       	ld	r25, X
    bba6:	1a 97       	sbiw	r26, 0x0a	; 10
    bba8:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    bbac:	20 e0       	ldi	r18, 0x00	; 0
    bbae:	30 e0       	ldi	r19, 0x00	; 0
    bbb0:	40 e4       	ldi	r20, 0x40	; 64
    bbb2:	50 e4       	ldi	r21, 0x40	; 64
    bbb4:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    bbb8:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    bbbc:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    bbbe:	20 e0       	ldi	r18, 0x00	; 0
    bbc0:	30 e0       	ldi	r19, 0x00	; 0
    bbc2:	40 e0       	ldi	r20, 0x00	; 0
    bbc4:	5e e3       	ldi	r21, 0x3E	; 62
    bbc6:	f4 01       	movw	r30, r8
    bbc8:	63 81       	ldd	r22, Z+3	; 0x03
    bbca:	74 81       	ldd	r23, Z+4	; 0x04
    bbcc:	85 81       	ldd	r24, Z+5	; 0x05
    bbce:	96 81       	ldd	r25, Z+6	; 0x06
    bbd0:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    bbd4:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    bbd8:	d4 01       	movw	r26, r8
    bbda:	2c 91       	ld	r18, X
    bbdc:	41 2f       	mov	r20, r17
    bbde:	ce 01       	movw	r24, r28
    bbe0:	01 96       	adiw	r24, 0x01	; 1
    bbe2:	0e 94 2b 5d 	call	0xba56	; 0xba56 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    bbe6:	c4 01       	movw	r24, r8
    bbe8:	0e 94 51 5c 	call	0xb8a2	; 0xb8a2 <collision_detect_boundries>
    bbec:	88 23       	and	r24, r24
    bbee:	69 f0       	breq	.+26     	; 0xbc0a <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    bbf0:	f4 01       	movw	r30, r8
    bbf2:	63 85       	ldd	r22, Z+11	; 0x0b
    bbf4:	c4 01       	movw	r24, r8
    bbf6:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
		player->active_shots--;
    bbfa:	d3 01       	movw	r26, r6
    bbfc:	51 96       	adiw	r26, 0x11	; 17
    bbfe:	8c 91       	ld	r24, X
    bc00:	51 97       	sbiw	r26, 0x11	; 17
    bc02:	81 50       	subi	r24, 0x01	; 1
    bc04:	51 96       	adiw	r26, 0x11	; 17
    bc06:	8c 93       	st	X, r24
		return;
    bc08:	ab c1       	rjmp	.+854    	; 0xbf60 <collision_detect_shot+0x408>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    bc0a:	b4 01       	movw	r22, r8
    bc0c:	89 e3       	ldi	r24, 0x39	; 57
    bc0e:	9c e0       	ldi	r25, 0x0C	; 12
    bc10:	0e 94 a4 5b 	call	0xb748	; 0xb748 <player_shot>
    bc14:	88 23       	and	r24, r24
    bc16:	b9 f0       	breq	.+46     	; 0xbc46 <collision_detect_shot+0xee>
    bc18:	80 91 4d 0c 	lds	r24, 0x0C4D
    bc1c:	80 fd       	sbrc	r24, 0
    bc1e:	13 c0       	rjmp	.+38     	; 0xbc46 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    bc20:	80 91 b7 0f 	lds	r24, 0x0FB7
    bc24:	8f 5f       	subi	r24, 0xFF	; 255
    bc26:	80 93 b7 0f 	sts	0x0FB7, r24
		player2.score++;
    bc2a:	80 91 b6 0f 	lds	r24, 0x0FB6
    bc2e:	8f 5f       	subi	r24, 0xFF	; 255
    bc30:	80 93 b6 0f 	sts	0x0FB6, r24
		render_score(&player2, 15);
    bc34:	6f e0       	ldi	r22, 0x0F	; 15
    bc36:	87 ea       	ldi	r24, 0xA7	; 167
    bc38:	9f e0       	ldi	r25, 0x0F	; 15
    bc3a:	0e 94 b7 58 	call	0xb16e	; 0xb16e <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    bc3e:	09 e3       	ldi	r16, 0x39	; 57
    bc40:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    bc42:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    bc44:	54 c0       	rjmp	.+168    	; 0xbcee <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    bc46:	b4 01       	movw	r22, r8
    bc48:	87 ea       	ldi	r24, 0xA7	; 167
    bc4a:	9f e0       	ldi	r25, 0x0F	; 15
    bc4c:	0e 94 a4 5b 	call	0xb748	; 0xb748 <player_shot>
    bc50:	90 91 12 0c 	lds	r25, 0x0C12
    bc54:	88 23       	and	r24, r24
    bc56:	d1 f0       	breq	.+52     	; 0xbc8c <collision_detect_shot+0x134>
    bc58:	80 91 bb 0f 	lds	r24, 0x0FBB
    bc5c:	80 fd       	sbrc	r24, 0
    bc5e:	16 c0       	rjmp	.+44     	; 0xbc8c <collision_detect_shot+0x134>
    bc60:	91 11       	cpse	r25, r1
    bc62:	14 c0       	rjmp	.+40     	; 0xbc8c <collision_detect_shot+0x134>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    bc64:	80 91 49 0c 	lds	r24, 0x0C49
    bc68:	8f 5f       	subi	r24, 0xFF	; 255
    bc6a:	80 93 49 0c 	sts	0x0C49, r24
		player1.score++;
    bc6e:	80 91 48 0c 	lds	r24, 0x0C48
    bc72:	8f 5f       	subi	r24, 0xFF	; 255
    bc74:	80 93 48 0c 	sts	0x0C48, r24
		render_score(&player1, 0);
    bc78:	60 e0       	ldi	r22, 0x00	; 0
    bc7a:	89 e3       	ldi	r24, 0x39	; 57
    bc7c:	9c e0       	ldi	r25, 0x0C	; 12
    bc7e:	0e 94 b7 58 	call	0xb16e	; 0xb16e <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    bc82:	07 ea       	ldi	r16, 0xA7	; 167
    bc84:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    bc86:	6f e0       	ldi	r22, 0x0F	; 15
    bc88:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    bc8a:	31 c0       	rjmp	.+98     	; 0xbcee <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    bc8c:	94 30       	cpi	r25, 0x04	; 4
    bc8e:	91 f5       	brne	.+100    	; 0xbcf4 <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    bc90:	b4 01       	movw	r22, r8
    bc92:	8f e6       	ldi	r24, 0x6F	; 111
    bc94:	90 e1       	ldi	r25, 0x10	; 16
    bc96:	0e 94 03 5c 	call	0xb806	; 0xb806 <turret_shot>
    bc9a:	88 23       	and	r24, r24
    bc9c:	41 f0       	breq	.+16     	; 0xbcae <collision_detect_shot+0x156>
		{
			turret1.lives--;
    bc9e:	80 91 7a 10 	lds	r24, 0x107A
    bca2:	81 50       	subi	r24, 0x01	; 1
    bca4:	80 93 7a 10 	sts	0x107A, r24
			init_shot_state(shot, shot->shot_type);
    bca8:	f4 01       	movw	r30, r8
    bcaa:	63 85       	ldd	r22, Z+11	; 0x0b
    bcac:	0f c0       	rjmp	.+30     	; 0xbccc <collision_detect_shot+0x174>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    bcae:	b4 01       	movw	r22, r8
    bcb0:	8b e3       	ldi	r24, 0x3B	; 59
    bcb2:	90 e1       	ldi	r25, 0x10	; 16
    bcb4:	0e 94 03 5c 	call	0xb806	; 0xb806 <turret_shot>
    bcb8:	88 23       	and	r24, r24
    bcba:	e1 f0       	breq	.+56     	; 0xbcf4 <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    bcbc:	80 91 46 10 	lds	r24, 0x1046
    bcc0:	81 50       	subi	r24, 0x01	; 1
    bcc2:	80 93 46 10 	sts	0x1046, r24
			init_shot_state(shot, shot->shot_type);
    bcc6:	d4 01       	movw	r26, r8
    bcc8:	1b 96       	adiw	r26, 0x0b	; 11
    bcca:	6c 91       	ld	r22, X
    bccc:	c4 01       	movw	r24, r8
    bcce:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
			game.boss_fight_player->active_shots--;
    bcd2:	e0 91 15 0c 	lds	r30, 0x0C15
    bcd6:	f0 91 16 0c 	lds	r31, 0x0C16
    bcda:	81 89       	ldd	r24, Z+17	; 0x11
    bcdc:	81 50       	subi	r24, 0x01	; 1
    bcde:	81 8b       	std	Z+17, r24	; 0x11
			SFX_TANK_EXPLODE;
    bce0:	2f ef       	ldi	r18, 0xFF	; 255
    bce2:	40 e1       	ldi	r20, 0x10	; 16
    bce4:	67 e0       	ldi	r22, 0x07	; 7
    bce6:	84 e0       	ldi	r24, 0x04	; 4
    bce8:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
    bcec:	03 c0       	rjmp	.+6      	; 0xbcf4 <collision_detect_shot+0x19c>
		}
	}
	if (p)
    bcee:	01 15       	cp	r16, r1
    bcf0:	11 05       	cpc	r17, r1
    bcf2:	59 f4       	brne	.+22     	; 0xbd0a <collision_detect_shot+0x1b2>
    bcf4:	fe 01       	movw	r30, r28
    bcf6:	31 96       	adiw	r30, 0x01	; 1
    bcf8:	2f 01       	movw	r4, r30
    bcfa:	1d 82       	std	Y+5, r1	; 0x05
    bcfc:	f1 2c       	mov	r15, r1
    bcfe:	d1 2c       	mov	r13, r1
    bd00:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bd02:	5e e1       	ldi	r21, 0x1E	; 30
    bd04:	25 2e       	mov	r2, r21
    bd06:	31 2c       	mov	r3, r1
    bd08:	44 c0       	rjmp	.+136    	; 0xbd92 <collision_detect_shot+0x23a>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    bd0a:	d4 01       	movw	r26, r8
    bd0c:	1b 96       	adiw	r26, 0x0b	; 11
    bd0e:	6c 91       	ld	r22, X
    bd10:	c4 01       	movw	r24, r8
    bd12:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
		player->active_shots--;
    bd16:	f3 01       	movw	r30, r6
    bd18:	81 89       	ldd	r24, Z+17	; 0x11
    bd1a:	81 50       	subi	r24, 0x01	; 1
    bd1c:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    bd1e:	6f 2d       	mov	r22, r15
    bd20:	c8 01       	movw	r24, r16
    bd22:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <kill_player>
		SFX_TANK_EXPLODE;
    bd26:	2f ef       	ldi	r18, 0xFF	; 255
    bd28:	40 e1       	ldi	r20, 0x10	; 16
    bd2a:	67 e0       	ldi	r22, 0x07	; 7
    bd2c:	11 c1       	rjmp	.+546    	; 0xbf50 <collision_detect_shot+0x3f8>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    bd2e:	c5 01       	movw	r24, r10
    bd30:	0e 94 d6 5a 	call	0xb5ac	; 0xb5ac <solid_directional_tile>
    bd34:	88 23       	and	r24, r24
    bd36:	c1 f1       	breq	.+112    	; 0xbda8 <collision_detect_shot+0x250>
    bd38:	20 e0       	ldi	r18, 0x00	; 0
    bd3a:	30 e0       	ldi	r19, 0x00	; 0
    bd3c:	40 e0       	ldi	r20, 0x00	; 0
    bd3e:	50 e4       	ldi	r21, 0x40	; 64
    bd40:	f4 01       	movw	r30, r8
    bd42:	67 81       	ldd	r22, Z+7	; 0x07
    bd44:	70 85       	ldd	r23, Z+8	; 0x08
    bd46:	81 85       	ldd	r24, Z+9	; 0x09
    bd48:	92 85       	ldd	r25, Z+10	; 0x0a
    bd4a:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    bd4e:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    bd52:	c6 2e       	mov	r12, r22
    bd54:	20 e0       	ldi	r18, 0x00	; 0
    bd56:	30 e0       	ldi	r19, 0x00	; 0
    bd58:	40 e0       	ldi	r20, 0x00	; 0
    bd5a:	50 e4       	ldi	r21, 0x40	; 64
    bd5c:	d4 01       	movw	r26, r8
    bd5e:	13 96       	adiw	r26, 0x03	; 3
    bd60:	6d 91       	ld	r22, X+
    bd62:	7d 91       	ld	r23, X+
    bd64:	8d 91       	ld	r24, X+
    bd66:	9c 91       	ld	r25, X
    bd68:	16 97       	sbiw	r26, 0x06	; 6
    bd6a:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    bd6e:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    bd72:	04 e0       	ldi	r16, 0x04	; 4
    bd74:	24 e0       	ldi	r18, 0x04	; 4
    bd76:	4c 2d       	mov	r20, r12
    bd78:	c5 01       	movw	r24, r10
    bd7a:	0e 94 00 5b 	call	0xb600	; 0xb600 <collides_directional_tile>
    bd7e:	88 23       	and	r24, r24
    bd80:	99 f0       	breq	.+38     	; 0xbda8 <collision_detect_shot+0x250>
		{
			hit = hit | HIT_ANGLE;
    bd82:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    bd84:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    bd86:	bd 81       	ldd	r27, Y+5	; 0x05
    bd88:	b1 30       	cpi	r27, 0x01	; 1
    bd8a:	09 f4       	brne	.+2      	; 0xbd8e <collision_detect_shot+0x236>
    bd8c:	88 c0       	rjmp	.+272    	; 0xbe9e <collision_detect_shot+0x346>
    bd8e:	f1 e0       	ldi	r31, 0x01	; 1
    bd90:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    bd92:	d2 01       	movw	r26, r4
    bd94:	ad 90       	ld	r10, X+
    bd96:	bd 90       	ld	r11, X+
    bd98:	2d 01       	movw	r4, r26
    bd9a:	f5 01       	movw	r30, r10
    bd9c:	e8 54       	subi	r30, 0x48	; 72
    bd9e:	f3 4f       	sbci	r31, 0xF3	; 243
    bda0:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    bda2:	ee 20       	and	r14, r14
    bda4:	81 f3       	breq	.-32     	; 0xbd86 <collision_detect_shot+0x22e>
    bda6:	c3 cf       	rjmp	.-122    	; 0xbd2e <collision_detect_shot+0x1d6>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bda8:	b1 e0       	ldi	r27, 0x01	; 1
    bdaa:	eb 12       	cpse	r14, r27
    bdac:	3b c0       	rjmp	.+118    	; 0xbe24 <collision_detect_shot+0x2cc>
    bdae:	c5 01       	movw	r24, r10
    bdb0:	b1 01       	movw	r22, r2
    bdb2:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    bdb6:	6d 5f       	subi	r22, 0xFD	; 253
    bdb8:	7f 4f       	sbci	r23, 0xFF	; 255
    bdba:	e6 2e       	mov	r14, r22
    bdbc:	ee 0c       	add	r14, r14
    bdbe:	ee 0c       	add	r14, r14
    bdc0:	ee 0c       	add	r14, r14
    bdc2:	08 2f       	mov	r16, r24
    bdc4:	00 0f       	add	r16, r16
    bdc6:	00 0f       	add	r16, r16
    bdc8:	00 0f       	add	r16, r16
    bdca:	20 e0       	ldi	r18, 0x00	; 0
    bdcc:	30 e0       	ldi	r19, 0x00	; 0
    bdce:	40 e0       	ldi	r20, 0x00	; 0
    bdd0:	50 e4       	ldi	r21, 0x40	; 64
    bdd2:	f4 01       	movw	r30, r8
    bdd4:	67 81       	ldd	r22, Z+7	; 0x07
    bdd6:	70 85       	ldd	r23, Z+8	; 0x08
    bdd8:	81 85       	ldd	r24, Z+9	; 0x09
    bdda:	92 85       	ldd	r25, Z+10	; 0x0a
    bddc:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    bde0:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    bde4:	b6 2e       	mov	r11, r22
    bde6:	20 e0       	ldi	r18, 0x00	; 0
    bde8:	30 e0       	ldi	r19, 0x00	; 0
    bdea:	40 e0       	ldi	r20, 0x00	; 0
    bdec:	50 e4       	ldi	r21, 0x40	; 64
    bdee:	d4 01       	movw	r26, r8
    bdf0:	13 96       	adiw	r26, 0x03	; 3
    bdf2:	6d 91       	ld	r22, X+
    bdf4:	7d 91       	ld	r23, X+
    bdf6:	8d 91       	ld	r24, X+
    bdf8:	9c 91       	ld	r25, X
    bdfa:	16 97       	sbiw	r26, 0x06	; 6
    bdfc:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    be00:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    be04:	86 2f       	mov	r24, r22
    be06:	38 e0       	ldi	r19, 0x08	; 8
    be08:	a3 2e       	mov	r10, r19
    be0a:	48 e0       	ldi	r20, 0x08	; 8
    be0c:	c4 2e       	mov	r12, r20
    be0e:	24 e0       	ldi	r18, 0x04	; 4
    be10:	44 e0       	ldi	r20, 0x04	; 4
    be12:	6b 2d       	mov	r22, r11
    be14:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
    be18:	88 23       	and	r24, r24
    be1a:	09 f4       	brne	.+2      	; 0xbe1e <collision_detect_shot+0x2c6>
    be1c:	b4 cf       	rjmp	.-152    	; 0xbd86 <collision_detect_shot+0x22e>
		{
			hit = hit | HIT_BRICK;
    be1e:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    be20:	dd 80       	ldd	r13, Y+5	; 0x05
    be22:	b1 cf       	rjmp	.-158    	; 0xbd86 <collision_detect_shot+0x22e>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    be24:	b2 e0       	ldi	r27, 0x02	; 2
    be26:	eb 12       	cpse	r14, r27
    be28:	ae cf       	rjmp	.-164    	; 0xbd86 <collision_detect_shot+0x22e>
    be2a:	c5 01       	movw	r24, r10
    be2c:	b1 01       	movw	r22, r2
    be2e:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    be32:	6d 5f       	subi	r22, 0xFD	; 253
    be34:	7f 4f       	sbci	r23, 0xFF	; 255
    be36:	e6 2e       	mov	r14, r22
    be38:	ee 0c       	add	r14, r14
    be3a:	ee 0c       	add	r14, r14
    be3c:	ee 0c       	add	r14, r14
    be3e:	08 2f       	mov	r16, r24
    be40:	00 0f       	add	r16, r16
    be42:	00 0f       	add	r16, r16
    be44:	00 0f       	add	r16, r16
    be46:	20 e0       	ldi	r18, 0x00	; 0
    be48:	30 e0       	ldi	r19, 0x00	; 0
    be4a:	40 e0       	ldi	r20, 0x00	; 0
    be4c:	50 e4       	ldi	r21, 0x40	; 64
    be4e:	f4 01       	movw	r30, r8
    be50:	67 81       	ldd	r22, Z+7	; 0x07
    be52:	70 85       	ldd	r23, Z+8	; 0x08
    be54:	81 85       	ldd	r24, Z+9	; 0x09
    be56:	92 85       	ldd	r25, Z+10	; 0x0a
    be58:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    be5c:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    be60:	b6 2e       	mov	r11, r22
    be62:	20 e0       	ldi	r18, 0x00	; 0
    be64:	30 e0       	ldi	r19, 0x00	; 0
    be66:	40 e0       	ldi	r20, 0x00	; 0
    be68:	50 e4       	ldi	r21, 0x40	; 64
    be6a:	d4 01       	movw	r26, r8
    be6c:	13 96       	adiw	r26, 0x03	; 3
    be6e:	6d 91       	ld	r22, X+
    be70:	7d 91       	ld	r23, X+
    be72:	8d 91       	ld	r24, X+
    be74:	9c 91       	ld	r25, X
    be76:	16 97       	sbiw	r26, 0x06	; 6
    be78:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    be7c:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    be80:	86 2f       	mov	r24, r22
    be82:	98 e0       	ldi	r25, 0x08	; 8
    be84:	a9 2e       	mov	r10, r25
    be86:	28 e0       	ldi	r18, 0x08	; 8
    be88:	c2 2e       	mov	r12, r18
    be8a:	24 e0       	ldi	r18, 0x04	; 4
    be8c:	44 e0       	ldi	r20, 0x04	; 4
    be8e:	6b 2d       	mov	r22, r11
    be90:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
    be94:	88 23       	and	r24, r24
    be96:	09 f4       	brne	.+2      	; 0xbe9a <collision_detect_shot+0x342>
    be98:	76 cf       	rjmp	.-276    	; 0xbd86 <collision_detect_shot+0x22e>
        {
		    hit = hit | HIT_METAL;
    be9a:	11 60       	ori	r17, 0x01	; 1
    be9c:	74 cf       	rjmp	.-280    	; 0xbd86 <collision_detect_shot+0x22e>
        }
	}
	
	if (hit & HIT_ANGLE)
    be9e:	12 ff       	sbrs	r17, 2
    bea0:	25 c0       	rjmp	.+74     	; 0xbeec <collision_detect_shot+0x394>
	{
		recoil_sprite_fine(player, &shot->shared);
    bea2:	b4 01       	movw	r22, r8
    bea4:	c3 01       	movw	r24, r6
    bea6:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    beaa:	b4 01       	movw	r22, r8
    beac:	8f 2d       	mov	r24, r15
    beae:	0e 94 8b 5d 	call	0xbb16	; 0xbb16 <richochet>
		shot->rebounds--;
    beb2:	f4 01       	movw	r30, r8
    beb4:	85 85       	ldd	r24, Z+13	; 0x0d
    beb6:	81 50       	subi	r24, 0x01	; 1
    beb8:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    beba:	81 11       	cpse	r24, r1
    bebc:	0b c0       	rjmp	.+22     	; 0xbed4 <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    bebe:	63 85       	ldd	r22, Z+11	; 0x0b
    bec0:	c4 01       	movw	r24, r8
    bec2:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
			player->active_shots--;
    bec6:	d3 01       	movw	r26, r6
    bec8:	51 96       	adiw	r26, 0x11	; 17
    beca:	8c 91       	ld	r24, X
    becc:	51 97       	sbiw	r26, 0x11	; 17
    bece:	81 50       	subi	r24, 0x01	; 1
    bed0:	51 96       	adiw	r26, 0x11	; 17
    bed2:	8c 93       	st	X, r24
		}
		SFX_METAL;
    bed4:	80 91 4d 0c 	lds	r24, 0x0C4D
    bed8:	80 fd       	sbrc	r24, 0
    beda:	42 c0       	rjmp	.+132    	; 0xbf60 <collision_detect_shot+0x408>
    bedc:	80 91 bb 0f 	lds	r24, 0x0FBB
    bee0:	80 fd       	sbrc	r24, 0
    bee2:	3e c0       	rjmp	.+124    	; 0xbf60 <collision_detect_shot+0x408>
    bee4:	2f ef       	ldi	r18, 0xFF	; 255
    bee6:	47 e1       	ldi	r20, 0x17	; 23
    bee8:	64 e0       	ldi	r22, 0x04	; 4
    beea:	32 c0       	rjmp	.+100    	; 0xbf50 <collision_detect_shot+0x3f8>
	}
	else if (hit & HIT_BRICK)
    beec:	11 ff       	sbrs	r17, 1
    beee:	34 c0       	rjmp	.+104    	; 0xbf58 <collision_detect_shot+0x400>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    bef0:	fe 01       	movw	r30, r28
    bef2:	31 96       	adiw	r30, 0x01	; 1
    bef4:	7f 01       	movw	r14, r30
    bef6:	ed 0c       	add	r14, r13
    bef8:	f1 1c       	adc	r15, r1
    befa:	ed 0c       	add	r14, r13
    befc:	f1 1c       	adc	r15, r1
    befe:	d7 01       	movw	r26, r14
    bf00:	6d 91       	ld	r22, X+
    bf02:	7c 91       	ld	r23, X
    bf04:	8c e1       	ldi	r24, 0x1C	; 28
    bf06:	9c e0       	ldi	r25, 0x0C	; 12
    bf08:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    bf0c:	d7 01       	movw	r26, r14
    bf0e:	ed 91       	ld	r30, X+
    bf10:	fc 91       	ld	r31, X
    bf12:	e8 54       	subi	r30, 0x48	; 72
    bf14:	f3 4f       	sbci	r31, 0xF3	; 243
    bf16:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    bf18:	f4 01       	movw	r30, r8
    bf1a:	84 85       	ldd	r24, Z+12	; 0x0c
    bf1c:	81 50       	subi	r24, 0x01	; 1
    bf1e:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    bf20:	81 11       	cpse	r24, r1
    bf22:	0b c0       	rjmp	.+22     	; 0xbf3a <collision_detect_shot+0x3e2>
		{
			init_shot_state(shot, shot->shot_type);
    bf24:	63 85       	ldd	r22, Z+11	; 0x0b
    bf26:	c4 01       	movw	r24, r8
    bf28:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
			player->active_shots--;
    bf2c:	d3 01       	movw	r26, r6
    bf2e:	51 96       	adiw	r26, 0x11	; 17
    bf30:	8c 91       	ld	r24, X
    bf32:	51 97       	sbiw	r26, 0x11	; 17
    bf34:	81 50       	subi	r24, 0x01	; 1
    bf36:	51 96       	adiw	r26, 0x11	; 17
    bf38:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    bf3a:	80 91 4d 0c 	lds	r24, 0x0C4D
    bf3e:	80 fd       	sbrc	r24, 0
    bf40:	0f c0       	rjmp	.+30     	; 0xbf60 <collision_detect_shot+0x408>
    bf42:	80 91 bb 0f 	lds	r24, 0x0FBB
    bf46:	80 fd       	sbrc	r24, 0
    bf48:	0b c0       	rjmp	.+22     	; 0xbf60 <collision_detect_shot+0x408>
    bf4a:	2f ed       	ldi	r18, 0xDF	; 223
    bf4c:	47 e1       	ldi	r20, 0x17	; 23
    bf4e:	61 e0       	ldi	r22, 0x01	; 1
    bf50:	84 e0       	ldi	r24, 0x04	; 4
    bf52:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
    bf56:	04 c0       	rjmp	.+8      	; 0xbf60 <collision_detect_shot+0x408>
	}
	else if (hit & HIT_METAL)
    bf58:	10 ff       	sbrs	r17, 0
    bf5a:	02 c0       	rjmp	.+4      	; 0xbf60 <collision_detect_shot+0x408>
	{
        init_shot_state(shot, shot->shot_type);
    bf5c:	f4 01       	movw	r30, r8
    bf5e:	af cf       	rjmp	.-162    	; 0xbebe <collision_detect_shot+0x366>
        player->active_shots--;
        SFX_METAL;
	}
}
    bf60:	0f 90       	pop	r0
    bf62:	0f 90       	pop	r0
    bf64:	0f 90       	pop	r0
    bf66:	0f 90       	pop	r0
    bf68:	0f 90       	pop	r0
    bf6a:	df 91       	pop	r29
    bf6c:	cf 91       	pop	r28
    bf6e:	1f 91       	pop	r17
    bf70:	0f 91       	pop	r16
    bf72:	ff 90       	pop	r15
    bf74:	ef 90       	pop	r14
    bf76:	df 90       	pop	r13
    bf78:	cf 90       	pop	r12
    bf7a:	bf 90       	pop	r11
    bf7c:	af 90       	pop	r10
    bf7e:	9f 90       	pop	r9
    bf80:	8f 90       	pop	r8
    bf82:	7f 90       	pop	r7
    bf84:	6f 90       	pop	r6
    bf86:	5f 90       	pop	r5
    bf88:	4f 90       	pop	r4
    bf8a:	3f 90       	pop	r3
    bf8c:	2f 90       	pop	r2
    bf8e:	08 95       	ret

0000bf90 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    bf90:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    bf92:	70 e0       	ldi	r23, 0x00	; 0
    bf94:	8e e1       	ldi	r24, 0x1E	; 30
    bf96:	48 9f       	mul	r20, r24
    bf98:	60 0d       	add	r22, r0
    bf9a:	71 1d       	adc	r23, r1
    bf9c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    bf9e:	21 11       	cpse	r18, r1
    bfa0:	09 c0       	rjmp	.+18     	; 0xbfb4 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    bfa2:	71 83       	std	Z+1, r23	; 0x01
    bfa4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bfa6:	cb 01       	movw	r24, r22
    bfa8:	01 96       	adiw	r24, 0x01	; 1
    bfaa:	93 83       	std	Z+3, r25	; 0x03
    bfac:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    bfae:	6e 5f       	subi	r22, 0xFE	; 254
    bfb0:	7f 4f       	sbci	r23, 0xFF	; 255
    bfb2:	12 c0       	rjmp	.+36     	; 0xbfd8 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    bfb4:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    bfb6:	21 30       	cpi	r18, 0x01	; 1
    bfb8:	29 f4       	brne	.+10     	; 0xbfc4 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    bfba:	02 96       	adiw	r24, 0x02	; 2
    bfbc:	91 83       	std	Z+1, r25	; 0x01
    bfbe:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    bfc0:	4e 96       	adiw	r24, 0x1e	; 30
    bfc2:	06 c0       	rjmp	.+12     	; 0xbfd0 <get_interesting_tile_indexes+0x40>
    bfc4:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    bfc6:	22 30       	cpi	r18, 0x02	; 2
    bfc8:	51 f4       	brne	.+20     	; 0xbfde <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    bfca:	91 83       	std	Z+1, r25	; 0x01
    bfcc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    bfce:	01 96       	adiw	r24, 0x01	; 1
    bfd0:	93 83       	std	Z+3, r25	; 0x03
    bfd2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    bfd4:	62 5c       	subi	r22, 0xC2	; 194
    bfd6:	7f 4f       	sbci	r23, 0xFF	; 255
    bfd8:	75 83       	std	Z+5, r23	; 0x05
    bfda:	64 83       	std	Z+4, r22	; 0x04
    bfdc:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    bfde:	71 83       	std	Z+1, r23	; 0x01
    bfe0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    bfe2:	62 5e       	subi	r22, 0xE2	; 226
    bfe4:	7f 4f       	sbci	r23, 0xFF	; 255
    bfe6:	73 83       	std	Z+3, r23	; 0x03
    bfe8:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    bfea:	95 83       	std	Z+5, r25	; 0x05
    bfec:	84 83       	std	Z+4, r24	; 0x04
    bfee:	08 95       	ret

0000bff0 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    bff0:	1f 93       	push	r17
    bff2:	cf 93       	push	r28
    bff4:	df 93       	push	r29
    bff6:	fc 01       	movw	r30, r24
    bff8:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    bffa:	54 96       	adiw	r26, 0x14	; 20
    bffc:	8c 91       	ld	r24, X
    bffe:	54 97       	sbiw	r26, 0x14	; 20
    c000:	80 fd       	sbrc	r24, 0
    c002:	13 c0       	rjmp	.+38     	; 0xc02a <explode_player+0x3a>
    c004:	12 2f       	mov	r17, r18
    c006:	64 2f       	mov	r22, r20
    c008:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c00a:	80 89       	ldd	r24, Z+16	; 0x10
    c00c:	8f 5f       	subi	r24, 0xFF	; 255
    c00e:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c010:	87 85       	ldd	r24, Z+15	; 0x0f
    c012:	8f 5f       	subi	r24, 0xFF	; 255
    c014:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c016:	cf 01       	movw	r24, r30
    c018:	0e 94 b7 58 	call	0xb16e	; 0xb16e <render_score>
		kill_player(other_player, other_player_hud_x);
    c01c:	61 2f       	mov	r22, r17
    c01e:	ce 01       	movw	r24, r28
	}
}
    c020:	df 91       	pop	r29
    c022:	cf 91       	pop	r28
    c024:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c026:	0c 94 d3 5c 	jmp	0xb9a6	; 0xb9a6 <kill_player>
	}
}
    c02a:	df 91       	pop	r29
    c02c:	cf 91       	pop	r28
    c02e:	1f 91       	pop	r17
    c030:	08 95       	ret

0000c032 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    c032:	cf 92       	push	r12
    c034:	df 92       	push	r13
    c036:	ef 92       	push	r14
    c038:	ff 92       	push	r15
    c03a:	cf 93       	push	r28
    c03c:	df 93       	push	r29
    c03e:	ec 01       	movw	r28, r24
    c040:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    c042:	98 81       	ld	r25, Y
    c044:	9d 7f       	andi	r25, 0xFD	; 253
    c046:	09 f0       	breq	.+2      	; 0xc04a <slide+0x18>
    c048:	54 c0       	rjmp	.+168    	; 0xc0f2 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    c04a:	ca 01       	movw	r24, r20
    c04c:	6e e1       	ldi	r22, 0x1E	; 30
    c04e:	70 e0       	ldi	r23, 0x00	; 0
    c050:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    c054:	88 0f       	add	r24, r24
    c056:	88 0f       	add	r24, r24
    c058:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    c05a:	21 11       	cpse	r18, r1
    c05c:	22 c0       	rjmp	.+68     	; 0xc0a2 <slide+0x70>
    c05e:	cb 80       	ldd	r12, Y+3	; 0x03
    c060:	dc 80       	ldd	r13, Y+4	; 0x04
    c062:	ed 80       	ldd	r14, Y+5	; 0x05
    c064:	fe 80       	ldd	r15, Y+6	; 0x06
    c066:	68 2f       	mov	r22, r24
    c068:	70 e0       	ldi	r23, 0x00	; 0
    c06a:	80 e0       	ldi	r24, 0x00	; 0
    c06c:	90 e0       	ldi	r25, 0x00	; 0
    c06e:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c072:	9b 01       	movw	r18, r22
    c074:	ac 01       	movw	r20, r24
    c076:	c7 01       	movw	r24, r14
    c078:	b6 01       	movw	r22, r12
    c07a:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c07e:	20 e0       	ldi	r18, 0x00	; 0
    c080:	30 e0       	ldi	r19, 0x00	; 0
    c082:	40 e8       	ldi	r20, 0x80	; 128
    c084:	50 e4       	ldi	r21, 0x40	; 64
    c086:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    c08a:	18 16       	cp	r1, r24
    c08c:	0c f0       	brlt	.+2      	; 0xc090 <slide+0x5e>
    c08e:	85 c0       	rjmp	.+266    	; 0xc19a <slide+0x168>
			player->shared.x++; 
    c090:	20 e0       	ldi	r18, 0x00	; 0
    c092:	30 e0       	ldi	r19, 0x00	; 0
    c094:	40 e8       	ldi	r20, 0x80	; 128
    c096:	5f e3       	ldi	r21, 0x3F	; 63
    c098:	c7 01       	movw	r24, r14
    c09a:	b6 01       	movw	r22, r12
    c09c:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    c0a0:	23 c0       	rjmp	.+70     	; 0xc0e8 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    c0a2:	22 30       	cpi	r18, 0x02	; 2
    c0a4:	09 f0       	breq	.+2      	; 0xc0a8 <slide+0x76>
    c0a6:	79 c0       	rjmp	.+242    	; 0xc19a <slide+0x168>
    c0a8:	cb 80       	ldd	r12, Y+3	; 0x03
    c0aa:	dc 80       	ldd	r13, Y+4	; 0x04
    c0ac:	ed 80       	ldd	r14, Y+5	; 0x05
    c0ae:	fe 80       	ldd	r15, Y+6	; 0x06
    c0b0:	68 2f       	mov	r22, r24
    c0b2:	70 e0       	ldi	r23, 0x00	; 0
    c0b4:	80 e0       	ldi	r24, 0x00	; 0
    c0b6:	90 e0       	ldi	r25, 0x00	; 0
    c0b8:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c0bc:	9b 01       	movw	r18, r22
    c0be:	ac 01       	movw	r20, r24
    c0c0:	c7 01       	movw	r24, r14
    c0c2:	b6 01       	movw	r22, r12
    c0c4:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c0c8:	20 e0       	ldi	r18, 0x00	; 0
    c0ca:	30 e0       	ldi	r19, 0x00	; 0
    c0cc:	40 e4       	ldi	r20, 0x40	; 64
    c0ce:	51 ec       	ldi	r21, 0xC1	; 193
    c0d0:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    c0d4:	87 ff       	sbrs	r24, 7
    c0d6:	61 c0       	rjmp	.+194    	; 0xc19a <slide+0x168>
			player->shared.x--;
    c0d8:	20 e0       	ldi	r18, 0x00	; 0
    c0da:	30 e0       	ldi	r19, 0x00	; 0
    c0dc:	40 e8       	ldi	r20, 0x80	; 128
    c0de:	5f e3       	ldi	r21, 0x3F	; 63
    c0e0:	c7 01       	movw	r24, r14
    c0e2:	b6 01       	movw	r22, r12
    c0e4:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c0e8:	6b 83       	std	Y+3, r22	; 0x03
    c0ea:	7c 83       	std	Y+4, r23	; 0x04
    c0ec:	8d 83       	std	Y+5, r24	; 0x05
    c0ee:	9e 83       	std	Y+6, r25	; 0x06
    c0f0:	54 c0       	rjmp	.+168    	; 0xc19a <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    c0f2:	ca 01       	movw	r24, r20
    c0f4:	6e e1       	ldi	r22, 0x1E	; 30
    c0f6:	70 e0       	ldi	r23, 0x00	; 0
    c0f8:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    c0fc:	ab 01       	movw	r20, r22
    c0fe:	4d 5f       	subi	r20, 0xFD	; 253
    c100:	5f 4f       	sbci	r21, 0xFF	; 255
    c102:	44 0f       	add	r20, r20
    c104:	44 0f       	add	r20, r20
    c106:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    c108:	21 11       	cpse	r18, r1
    c10a:	21 c0       	rjmp	.+66     	; 0xc14e <slide+0x11c>
    c10c:	cf 80       	ldd	r12, Y+7	; 0x07
    c10e:	d8 84       	ldd	r13, Y+8	; 0x08
    c110:	e9 84       	ldd	r14, Y+9	; 0x09
    c112:	fa 84       	ldd	r15, Y+10	; 0x0a
    c114:	64 2f       	mov	r22, r20
    c116:	70 e0       	ldi	r23, 0x00	; 0
    c118:	80 e0       	ldi	r24, 0x00	; 0
    c11a:	90 e0       	ldi	r25, 0x00	; 0
    c11c:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c120:	9b 01       	movw	r18, r22
    c122:	ac 01       	movw	r20, r24
    c124:	c7 01       	movw	r24, r14
    c126:	b6 01       	movw	r22, r12
    c128:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c12c:	20 e0       	ldi	r18, 0x00	; 0
    c12e:	30 e0       	ldi	r19, 0x00	; 0
    c130:	40 e8       	ldi	r20, 0x80	; 128
    c132:	50 e4       	ldi	r21, 0x40	; 64
    c134:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    c138:	18 16       	cp	r1, r24
    c13a:	7c f5       	brge	.+94     	; 0xc19a <slide+0x168>
			player->shared.y++;
    c13c:	20 e0       	ldi	r18, 0x00	; 0
    c13e:	30 e0       	ldi	r19, 0x00	; 0
    c140:	40 e8       	ldi	r20, 0x80	; 128
    c142:	5f e3       	ldi	r21, 0x3F	; 63
    c144:	c7 01       	movw	r24, r14
    c146:	b6 01       	movw	r22, r12
    c148:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    c14c:	22 c0       	rjmp	.+68     	; 0xc192 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    c14e:	22 30       	cpi	r18, 0x02	; 2
    c150:	21 f5       	brne	.+72     	; 0xc19a <slide+0x168>
    c152:	cf 80       	ldd	r12, Y+7	; 0x07
    c154:	d8 84       	ldd	r13, Y+8	; 0x08
    c156:	e9 84       	ldd	r14, Y+9	; 0x09
    c158:	fa 84       	ldd	r15, Y+10	; 0x0a
    c15a:	64 2f       	mov	r22, r20
    c15c:	70 e0       	ldi	r23, 0x00	; 0
    c15e:	80 e0       	ldi	r24, 0x00	; 0
    c160:	90 e0       	ldi	r25, 0x00	; 0
    c162:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c166:	9b 01       	movw	r18, r22
    c168:	ac 01       	movw	r20, r24
    c16a:	c7 01       	movw	r24, r14
    c16c:	b6 01       	movw	r22, r12
    c16e:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c172:	20 e0       	ldi	r18, 0x00	; 0
    c174:	30 e0       	ldi	r19, 0x00	; 0
    c176:	40 e4       	ldi	r20, 0x40	; 64
    c178:	51 ec       	ldi	r21, 0xC1	; 193
    c17a:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    c17e:	87 ff       	sbrs	r24, 7
    c180:	0c c0       	rjmp	.+24     	; 0xc19a <slide+0x168>
			player->shared.y--;
    c182:	20 e0       	ldi	r18, 0x00	; 0
    c184:	30 e0       	ldi	r19, 0x00	; 0
    c186:	40 e8       	ldi	r20, 0x80	; 128
    c188:	5f e3       	ldi	r21, 0x3F	; 63
    c18a:	c7 01       	movw	r24, r14
    c18c:	b6 01       	movw	r22, r12
    c18e:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c192:	6f 83       	std	Y+7, r22	; 0x07
    c194:	78 87       	std	Y+8, r23	; 0x08
    c196:	89 87       	std	Y+9, r24	; 0x09
    c198:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    c19a:	df 91       	pop	r29
    c19c:	cf 91       	pop	r28
    c19e:	ff 90       	pop	r15
    c1a0:	ef 90       	pop	r14
    c1a2:	df 90       	pop	r13
    c1a4:	cf 90       	pop	r12
    c1a6:	08 95       	ret

0000c1a8 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    c1a8:	2f 92       	push	r2
    c1aa:	3f 92       	push	r3
    c1ac:	4f 92       	push	r4
    c1ae:	5f 92       	push	r5
    c1b0:	6f 92       	push	r6
    c1b2:	7f 92       	push	r7
    c1b4:	8f 92       	push	r8
    c1b6:	9f 92       	push	r9
    c1b8:	af 92       	push	r10
    c1ba:	bf 92       	push	r11
    c1bc:	cf 92       	push	r12
    c1be:	df 92       	push	r13
    c1c0:	ef 92       	push	r14
    c1c2:	ff 92       	push	r15
    c1c4:	0f 93       	push	r16
    c1c6:	1f 93       	push	r17
    c1c8:	cf 93       	push	r28
    c1ca:	df 93       	push	r29
    c1cc:	cd b7       	in	r28, 0x3d	; 61
    c1ce:	de b7       	in	r29, 0x3e	; 62
    c1d0:	2b 97       	sbiw	r28, 0x0b	; 11
    c1d2:	0f b6       	in	r0, 0x3f	; 63
    c1d4:	f8 94       	cli
    c1d6:	de bf       	out	0x3e, r29	; 62
    c1d8:	0f be       	out	0x3f, r0	; 63
    c1da:	cd bf       	out	0x3d, r28	; 61
    c1dc:	4c 01       	movw	r8, r24
    c1de:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    c1e0:	1a 82       	std	Y+2, r1	; 0x02
    c1e2:	19 82       	std	Y+1, r1	; 0x01
    c1e4:	1c 82       	std	Y+4, r1	; 0x04
    c1e6:	1b 82       	std	Y+3, r1	; 0x03
    c1e8:	1e 82       	std	Y+6, r1	; 0x06
    c1ea:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c1ec:	20 e0       	ldi	r18, 0x00	; 0
    c1ee:	30 e0       	ldi	r19, 0x00	; 0
    c1f0:	40 e0       	ldi	r20, 0x00	; 0
    c1f2:	5e e3       	ldi	r21, 0x3E	; 62
    c1f4:	dc 01       	movw	r26, r24
    c1f6:	17 96       	adiw	r26, 0x07	; 7
    c1f8:	6d 91       	ld	r22, X+
    c1fa:	7d 91       	ld	r23, X+
    c1fc:	8d 91       	ld	r24, X+
    c1fe:	9c 91       	ld	r25, X
    c200:	1a 97       	sbiw	r26, 0x0a	; 10
    c202:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c206:	20 e0       	ldi	r18, 0x00	; 0
    c208:	30 e0       	ldi	r19, 0x00	; 0
    c20a:	40 e4       	ldi	r20, 0x40	; 64
    c20c:	50 e4       	ldi	r21, 0x40	; 64
    c20e:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c212:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c216:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c218:	20 e0       	ldi	r18, 0x00	; 0
    c21a:	30 e0       	ldi	r19, 0x00	; 0
    c21c:	40 e0       	ldi	r20, 0x00	; 0
    c21e:	5e e3       	ldi	r21, 0x3E	; 62
    c220:	f4 01       	movw	r30, r8
    c222:	63 81       	ldd	r22, Z+3	; 0x03
    c224:	74 81       	ldd	r23, Z+4	; 0x04
    c226:	85 81       	ldd	r24, Z+5	; 0x05
    c228:	96 81       	ldd	r25, Z+6	; 0x06
    c22a:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c22e:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c232:	d4 01       	movw	r26, r8
    c234:	2c 91       	ld	r18, X
    c236:	40 2f       	mov	r20, r16
    c238:	ce 01       	movw	r24, r28
    c23a:	01 96       	adiw	r24, 0x01	; 1
    c23c:	0e 94 c8 5f 	call	0xbf90	; 0xbf90 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c240:	c4 01       	movw	r24, r8
    c242:	0e 94 51 5c 	call	0xb8a2	; 0xb8a2 <collision_detect_boundries>
    c246:	88 23       	and	r24, r24
    c248:	39 f0       	breq	.+14     	; 0xc258 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    c24a:	c4 01       	movw	r24, r8
    c24c:	0e 94 34 5a 	call	0xb468	; 0xb468 <recoil_sprite>
		player->shared.speed = 0;
    c250:	f4 01       	movw	r30, r8
    c252:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    c254:	d1 2c       	mov	r13, r1
    c256:	2c c1       	rjmp	.+600    	; 0xc4b0 <collision_detect_player+0x308>
    c258:	ce 01       	movw	r24, r28
    c25a:	01 96       	adiw	r24, 0x01	; 1
    c25c:	98 87       	std	Y+8, r25	; 0x08
    c25e:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c260:	41 2c       	mov	r4, r1
    c262:	51 2c       	mov	r5, r1
    c264:	b1 2c       	mov	r11, r1
    c266:	d1 2c       	mov	r13, r1
    c268:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c26a:	9b e0       	ldi	r25, 0x0B	; 11
    c26c:	91 0f       	add	r25, r17
    c26e:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c270:	16 5f       	subi	r17, 0xF6	; 246
    c272:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    c274:	af 81       	ldd	r26, Y+7	; 0x07
    c276:	b8 85       	ldd	r27, Y+8	; 0x08
    c278:	6d 90       	ld	r6, X+
    c27a:	7d 90       	ld	r7, X+
    c27c:	b8 87       	std	Y+8, r27	; 0x08
    c27e:	af 83       	std	Y+7, r26	; 0x07
    c280:	c3 01       	movw	r24, r6
    c282:	6e e1       	ldi	r22, 0x1E	; 30
    c284:	70 e0       	ldi	r23, 0x00	; 0
    c286:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    c28a:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    c28c:	13 e0       	ldi	r17, 0x03	; 3
    c28e:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c290:	c3 01       	movw	r24, r6
    c292:	0e 94 d6 5a 	call	0xb5ac	; 0xb5ac <solid_directional_tile>
    c296:	88 23       	and	r24, r24
    c298:	51 f1       	breq	.+84     	; 0xc2ee <collision_detect_player+0x146>
    c29a:	f4 01       	movw	r30, r8
    c29c:	67 81       	ldd	r22, Z+7	; 0x07
    c29e:	70 85       	ldd	r23, Z+8	; 0x08
    c2a0:	81 85       	ldd	r24, Z+9	; 0x09
    c2a2:	92 85       	ldd	r25, Z+10	; 0x0a
    c2a4:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c2a8:	46 2f       	mov	r20, r22
    c2aa:	d4 01       	movw	r26, r8
    c2ac:	13 96       	adiw	r26, 0x03	; 3
    c2ae:	6d 91       	ld	r22, X+
    c2b0:	7d 91       	ld	r23, X+
    c2b2:	8d 91       	ld	r24, X+
    c2b4:	9c 91       	ld	r25, X
    c2b6:	16 97       	sbiw	r26, 0x06	; 6
    c2b8:	4b 87       	std	Y+11, r20	; 0x0b
    c2ba:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c2be:	00 e1       	ldi	r16, 0x10	; 16
    c2c0:	20 e1       	ldi	r18, 0x10	; 16
    c2c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    c2c4:	c3 01       	movw	r24, r6
    c2c6:	0e 94 00 5b 	call	0xb600	; 0xb600 <collides_directional_tile>
    c2ca:	88 23       	and	r24, r24
    c2cc:	81 f0       	breq	.+32     	; 0xc2ee <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    c2ce:	f4 01       	movw	r30, r8
    c2d0:	83 85       	ldd	r24, Z+11	; 0x0b
    c2d2:	89 30       	cpi	r24, 0x09	; 9
    c2d4:	21 f4       	brne	.+8      	; 0xc2de <collision_detect_player+0x136>
    c2d6:	c4 01       	movw	r24, r8
    c2d8:	0e 94 34 5a 	call	0xb468	; 0xb468 <recoil_sprite>
    c2dc:	04 c0       	rjmp	.+8      	; 0xc2e6 <collision_detect_player+0x13e>
    c2de:	b4 01       	movw	r22, r8
    c2e0:	c4 01       	movw	r24, r8
    c2e2:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <recoil_sprite_fine>
			player->shared.speed = 0;
    c2e6:	d4 01       	movw	r26, r8
    c2e8:	11 96       	adiw	r26, 0x01	; 1
    c2ea:	1c 92       	st	X, r1
    c2ec:	bc c0       	rjmp	.+376    	; 0xc466 <collision_detect_player+0x2be>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c2ee:	c3 01       	movw	r24, r6
    c2f0:	0e 94 c4 5a 	call	0xb588	; 0xb588 <solid_square_tile>
    c2f4:	88 23       	and	r24, r24
    c2f6:	51 f1       	breq	.+84     	; 0xc34c <collision_detect_player+0x1a4>
    c2f8:	f4 01       	movw	r30, r8
    c2fa:	67 81       	ldd	r22, Z+7	; 0x07
    c2fc:	70 85       	ldd	r23, Z+8	; 0x08
    c2fe:	81 85       	ldd	r24, Z+9	; 0x09
    c300:	92 85       	ldd	r25, Z+10	; 0x0a
    c302:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c306:	26 2e       	mov	r2, r22
    c308:	d4 01       	movw	r26, r8
    c30a:	13 96       	adiw	r26, 0x03	; 3
    c30c:	6d 91       	ld	r22, X+
    c30e:	7d 91       	ld	r23, X+
    c310:	8d 91       	ld	r24, X+
    c312:	9c 91       	ld	r25, X
    c314:	16 97       	sbiw	r26, 0x06	; 6
    c316:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c31a:	86 2f       	mov	r24, r22
    c31c:	38 e0       	ldi	r19, 0x08	; 8
    c31e:	a3 2e       	mov	r10, r19
    c320:	48 e0       	ldi	r20, 0x08	; 8
    c322:	c4 2e       	mov	r12, r20
    c324:	e1 2e       	mov	r14, r17
    c326:	ee 0c       	add	r14, r14
    c328:	ee 0c       	add	r14, r14
    c32a:	ee 0c       	add	r14, r14
    c32c:	0f 2d       	mov	r16, r15
    c32e:	00 0f       	add	r16, r16
    c330:	00 0f       	add	r16, r16
    c332:	00 0f       	add	r16, r16
    c334:	20 e1       	ldi	r18, 0x10	; 16
    c336:	40 e1       	ldi	r20, 0x10	; 16
    c338:	62 2d       	mov	r22, r2
    c33a:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
    c33e:	88 23       	and	r24, r24
    c340:	29 f0       	breq	.+10     	; 0xc34c <collision_detect_player+0x1a4>
		{
			collision_count++;
    c342:	53 94       	inc	r5
			collision_tile = i;
			player->shared.speed = 0;
    c344:	f4 01       	movw	r30, r8
    c346:	11 82       	std	Z+1, r1	; 0x01
    c348:	b4 2c       	mov	r11, r4
    c34a:	8d c0       	rjmp	.+282    	; 0xc466 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c34c:	f3 01       	movw	r30, r6
    c34e:	e8 54       	subi	r30, 0x48	; 72
    c350:	f3 4f       	sbci	r31, 0xF3	; 243
    c352:	81 81       	ldd	r24, Z+1	; 0x01
    c354:	8d 34       	cpi	r24, 0x4D	; 77
    c356:	59 f5       	brne	.+86     	; 0xc3ae <collision_detect_player+0x206>
    c358:	e1 2e       	mov	r14, r17
    c35a:	ee 0c       	add	r14, r14
    c35c:	ee 0c       	add	r14, r14
    c35e:	ee 0c       	add	r14, r14
    c360:	0f 2d       	mov	r16, r15
    c362:	00 0f       	add	r16, r16
    c364:	00 0f       	add	r16, r16
    c366:	00 0f       	add	r16, r16
    c368:	d4 01       	movw	r26, r8
    c36a:	17 96       	adiw	r26, 0x07	; 7
    c36c:	6d 91       	ld	r22, X+
    c36e:	7d 91       	ld	r23, X+
    c370:	8d 91       	ld	r24, X+
    c372:	9c 91       	ld	r25, X
    c374:	1a 97       	sbiw	r26, 0x0a	; 10
    c376:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c37a:	76 2e       	mov	r7, r22
    c37c:	f4 01       	movw	r30, r8
    c37e:	63 81       	ldd	r22, Z+3	; 0x03
    c380:	74 81       	ldd	r23, Z+4	; 0x04
    c382:	85 81       	ldd	r24, Z+5	; 0x05
    c384:	96 81       	ldd	r25, Z+6	; 0x06
    c386:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c38a:	86 2f       	mov	r24, r22
    c38c:	98 e0       	ldi	r25, 0x08	; 8
    c38e:	a9 2e       	mov	r10, r25
    c390:	28 e0       	ldi	r18, 0x08	; 8
    c392:	c2 2e       	mov	r12, r18
    c394:	20 e1       	ldi	r18, 0x10	; 16
    c396:	40 e1       	ldi	r20, 0x10	; 16
    c398:	67 2d       	mov	r22, r7
    c39a:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <LBCollides>
    c39e:	88 23       	and	r24, r24
    c3a0:	09 f4       	brne	.+2      	; 0xc3a4 <collision_detect_player+0x1fc>
    c3a2:	61 c0       	rjmp	.+194    	; 0xc466 <collision_detect_player+0x2be>
		{
			player->max_speed = WATER_SPEED;
    c3a4:	e9 e1       	ldi	r30, 0x19	; 25
    c3a6:	d4 01       	movw	r26, r8
    c3a8:	58 96       	adiw	r26, 0x18	; 24
    c3aa:	ec 93       	st	X, r30
    c3ac:	67 c0       	rjmp	.+206    	; 0xc47c <collision_detect_player+0x2d4>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c3ae:	8c 32       	cpi	r24, 0x2C	; 44
    c3b0:	99 f2       	breq	.-90     	; 0xc358 <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c3b2:	87 30       	cpi	r24, 0x07	; 7
    c3b4:	99 f4       	brne	.+38     	; 0xc3dc <collision_detect_player+0x234>
    c3b6:	d4 01       	movw	r26, r8
    c3b8:	54 96       	adiw	r26, 0x14	; 20
    c3ba:	8c 91       	ld	r24, X
    c3bc:	54 97       	sbiw	r26, 0x14	; 20
    c3be:	80 fd       	sbrc	r24, 0
    c3c0:	52 c0       	rjmp	.+164    	; 0xc466 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c3c2:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c3c4:	e1 e4       	ldi	r30, 0x41	; 65
    c3c6:	58 96       	adiw	r26, 0x18	; 24
    c3c8:	ec 93       	st	X, r30
    c3ca:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    c3cc:	f1 e0       	ldi	r31, 0x01	; 1
    c3ce:	5a 96       	adiw	r26, 0x1a	; 26
    c3d0:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c3d2:	42 ec       	ldi	r20, 0xC2	; 194
    c3d4:	5d e7       	ldi	r21, 0x7D	; 125
    c3d6:	61 e0       	ldi	r22, 0x01	; 1
    c3d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    c3da:	10 c0       	rjmp	.+32     	; 0xc3fc <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c3dc:	89 30       	cpi	r24, 0x09	; 9
    c3de:	29 f5       	brne	.+74     	; 0xc42a <collision_detect_player+0x282>
    c3e0:	d4 01       	movw	r26, r8
    c3e2:	54 96       	adiw	r26, 0x14	; 20
    c3e4:	8c 91       	ld	r24, X
    c3e6:	54 97       	sbiw	r26, 0x14	; 20
    c3e8:	80 fd       	sbrc	r24, 0
    c3ea:	3d c0       	rjmp	.+122    	; 0xc466 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c3ec:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c3ee:	e1 e0       	ldi	r30, 0x01	; 1
    c3f0:	59 96       	adiw	r26, 0x19	; 25
    c3f2:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c3f4:	4c eb       	ldi	r20, 0xBC	; 188
    c3f6:	5d e7       	ldi	r21, 0x7D	; 125
    c3f8:	61 e0       	ldi	r22, 0x01	; 1
    c3fa:	89 85       	ldd	r24, Y+9	; 0x09
    c3fc:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    c400:	40 e0       	ldi	r20, 0x00	; 0
    c402:	50 e0       	ldi	r21, 0x00	; 0
    c404:	61 2f       	mov	r22, r17
    c406:	8f 2d       	mov	r24, r15
    c408:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
			SFX_ITEM;
    c40c:	80 91 4d 0c 	lds	r24, 0x0C4D
    c410:	80 fd       	sbrc	r24, 0
    c412:	29 c0       	rjmp	.+82     	; 0xc466 <collision_detect_player+0x2be>
    c414:	80 91 bb 0f 	lds	r24, 0x0FBB
    c418:	80 fd       	sbrc	r24, 0
    c41a:	25 c0       	rjmp	.+74     	; 0xc466 <collision_detect_player+0x2be>
    c41c:	2f ef       	ldi	r18, 0xFF	; 255
    c41e:	47 e1       	ldi	r20, 0x17	; 23
    c420:	63 e0       	ldi	r22, 0x03	; 3
    c422:	84 e0       	ldi	r24, 0x04	; 4
    c424:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
    c428:	1e c0       	rjmp	.+60     	; 0xc466 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c42a:	88 30       	cpi	r24, 0x08	; 8
    c42c:	e1 f4       	brne	.+56     	; 0xc466 <collision_detect_player+0x2be>
    c42e:	d4 01       	movw	r26, r8
    c430:	54 96       	adiw	r26, 0x14	; 20
    c432:	8c 91       	ld	r24, X
    c434:	80 fd       	sbrc	r24, 0
    c436:	17 c0       	rjmp	.+46     	; 0xc466 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c438:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    c43a:	40 e0       	ldi	r20, 0x00	; 0
    c43c:	50 e0       	ldi	r21, 0x00	; 0
    c43e:	61 2f       	mov	r22, r17
    c440:	8f 2d       	mov	r24, r15
    c442:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
			SFX_ITEM;
    c446:	80 91 4d 0c 	lds	r24, 0x0C4D
    c44a:	80 fd       	sbrc	r24, 0
    c44c:	0a c0       	rjmp	.+20     	; 0xc462 <collision_detect_player+0x2ba>
    c44e:	80 91 bb 0f 	lds	r24, 0x0FBB
    c452:	80 fd       	sbrc	r24, 0
    c454:	06 c0       	rjmp	.+12     	; 0xc462 <collision_detect_player+0x2ba>
    c456:	2f ef       	ldi	r18, 0xFF	; 255
    c458:	47 e1       	ldi	r20, 0x17	; 23
    c45a:	63 e0       	ldi	r22, 0x03	; 3
    c45c:	84 e0       	ldi	r24, 0x04	; 4
    c45e:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
			explode = 1;
    c462:	dd 24       	eor	r13, r13
    c464:	d3 94       	inc	r13
		}
		
		if (!hit_water)
    c466:	31 10       	cpse	r3, r1
    c468:	09 c0       	rjmp	.+18     	; 0xc47c <collision_detect_player+0x2d4>
		{
			player->max_speed = MAX_SPEED;
    c46a:	82 e3       	ldi	r24, 0x32	; 50
    c46c:	f4 01       	movw	r30, r8
    c46e:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c470:	82 8d       	ldd	r24, Z+26	; 0x1a
    c472:	88 23       	and	r24, r24
    c474:	29 f0       	breq	.+10     	; 0xc480 <collision_detect_player+0x2d8>
    c476:	91 e4       	ldi	r25, 0x41	; 65
    c478:	90 8f       	std	Z+24, r25	; 0x18
    c47a:	02 c0       	rjmp	.+4      	; 0xc480 <collision_detect_player+0x2d8>
    c47c:	33 24       	eor	r3, r3
    c47e:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c480:	43 94       	inc	r4
    c482:	a3 e0       	ldi	r26, 0x03	; 3
    c484:	4a 12       	cpse	r4, r26
    c486:	f6 ce       	rjmp	.-532    	; 0xc274 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    c488:	55 20       	and	r5, r5
    c48a:	91 f0       	breq	.+36     	; 0xc4b0 <collision_detect_player+0x308>
    c48c:	c4 01       	movw	r24, r8
    c48e:	0e 94 34 5a 	call	0xb468	; 0xb468 <recoil_sprite>
	if (collision_count == 1)
    c492:	b1 e0       	ldi	r27, 0x01	; 1
    c494:	5b 12       	cpse	r5, r27
    c496:	0c c0       	rjmp	.+24     	; 0xc4b0 <collision_detect_player+0x308>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    c498:	fe 01       	movw	r30, r28
    c49a:	31 96       	adiw	r30, 0x01	; 1
    c49c:	eb 0d       	add	r30, r11
    c49e:	f1 1d       	adc	r31, r1
    c4a0:	eb 0d       	add	r30, r11
    c4a2:	f1 1d       	adc	r31, r1
    c4a4:	40 81       	ld	r20, Z
    c4a6:	51 81       	ldd	r21, Z+1	; 0x01
    c4a8:	6b 2d       	mov	r22, r11
    c4aa:	c4 01       	movw	r24, r8
    c4ac:	0e 94 19 60 	call	0xc032	; 0xc032 <slide>
	}
	return explode;
}
    c4b0:	8d 2d       	mov	r24, r13
    c4b2:	2b 96       	adiw	r28, 0x0b	; 11
    c4b4:	0f b6       	in	r0, 0x3f	; 63
    c4b6:	f8 94       	cli
    c4b8:	de bf       	out	0x3e, r29	; 62
    c4ba:	0f be       	out	0x3f, r0	; 63
    c4bc:	cd bf       	out	0x3d, r28	; 61
    c4be:	df 91       	pop	r29
    c4c0:	cf 91       	pop	r28
    c4c2:	1f 91       	pop	r17
    c4c4:	0f 91       	pop	r16
    c4c6:	ff 90       	pop	r15
    c4c8:	ef 90       	pop	r14
    c4ca:	df 90       	pop	r13
    c4cc:	cf 90       	pop	r12
    c4ce:	bf 90       	pop	r11
    c4d0:	af 90       	pop	r10
    c4d2:	9f 90       	pop	r9
    c4d4:	8f 90       	pop	r8
    c4d6:	7f 90       	pop	r7
    c4d8:	6f 90       	pop	r6
    c4da:	5f 90       	pop	r5
    c4dc:	4f 90       	pop	r4
    c4de:	3f 90       	pop	r3
    c4e0:	2f 90       	pop	r2
    c4e2:	08 95       	ret

0000c4e4 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c4e4:	ef 92       	push	r14
    c4e6:	ff 92       	push	r15
    c4e8:	1f 93       	push	r17
    c4ea:	cf 93       	push	r28
    c4ec:	df 93       	push	r29
    c4ee:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c4f0:	c0 e0       	ldi	r28, 0x00	; 0
    c4f2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c4f4:	8e e1       	ldi	r24, 0x1E	; 30
    c4f6:	e8 2e       	mov	r14, r24
    c4f8:	f1 2c       	mov	r15, r1
    c4fa:	ce 01       	movw	r24, r28
    c4fc:	b7 01       	movw	r22, r14
    c4fe:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
		y = 3 + i / 30;
    c502:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c504:	11 23       	and	r17, r17
    c506:	19 f0       	breq	.+6      	; 0xc50e <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c508:	4f e5       	ldi	r20, 0x5F	; 95
    c50a:	5e e7       	ldi	r21, 0x7E	; 126
    c50c:	2d c0       	rjmp	.+90     	; 0xc568 <load_level_tiles+0x84>
    c50e:	fe 01       	movw	r30, r28
    c510:	e8 54       	subi	r30, 0x48	; 72
    c512:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c514:	91 81       	ldd	r25, Z+1	; 0x01
    c516:	97 30       	cpi	r25, 0x07	; 7
    c518:	99 f1       	breq	.+102    	; 0xc580 <load_level_tiles+0x9c>
    c51a:	88 f4       	brcc	.+34     	; 0xc53e <load_level_tiles+0x5a>
    c51c:	93 30       	cpi	r25, 0x03	; 3
    c51e:	39 f1       	breq	.+78     	; 0xc56e <load_level_tiles+0x8a>
    c520:	40 f4       	brcc	.+16     	; 0xc532 <load_level_tiles+0x4e>
    c522:	91 30       	cpi	r25, 0x01	; 1
    c524:	f9 f0       	breq	.+62     	; 0xc564 <load_level_tiles+0x80>
    c526:	92 30       	cpi	r25, 0x02	; 2
    c528:	09 f0       	breq	.+2      	; 0xc52c <load_level_tiles+0x48>
    c52a:	3f c0       	rjmp	.+126    	; 0xc5aa <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c52c:	45 ec       	ldi	r20, 0xC5	; 197
    c52e:	5d e7       	ldi	r21, 0x7D	; 125
    c530:	1b c0       	rjmp	.+54     	; 0xc568 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c532:	95 30       	cpi	r25, 0x05	; 5
    c534:	f9 f0       	breq	.+62     	; 0xc574 <load_level_tiles+0x90>
    c536:	08 f5       	brcc	.+66     	; 0xc57a <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c538:	4a ea       	ldi	r20, 0xAA	; 170
    c53a:	5d e7       	ldi	r21, 0x7D	; 125
    c53c:	15 c0       	rjmp	.+42     	; 0xc568 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c53e:	9c 32       	cpi	r25, 0x2C	; 44
    c540:	59 f1       	breq	.+86     	; 0xc598 <load_level_tiles+0xb4>
    c542:	38 f4       	brcc	.+14     	; 0xc552 <load_level_tiles+0x6e>
    c544:	98 30       	cpi	r25, 0x08	; 8
    c546:	f9 f0       	breq	.+62     	; 0xc586 <load_level_tiles+0xa2>
    c548:	99 30       	cpi	r25, 0x09	; 9
    c54a:	79 f5       	brne	.+94     	; 0xc5aa <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c54c:	4c eb       	ldi	r20, 0xBC	; 188
    c54e:	5d e7       	ldi	r21, 0x7D	; 125
    c550:	0b c0       	rjmp	.+22     	; 0xc568 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c552:	92 34       	cpi	r25, 0x42	; 66
    c554:	d9 f0       	breq	.+54     	; 0xc58c <load_level_tiles+0xa8>
    c556:	9d 34       	cpi	r25, 0x4D	; 77
    c558:	e1 f0       	breq	.+56     	; 0xc592 <load_level_tiles+0xae>
    c55a:	97 33       	cpi	r25, 0x37	; 55
    c55c:	31 f5       	brne	.+76     	; 0xc5aa <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    c55e:	4e e9       	ldi	r20, 0x9E	; 158
    c560:	5d e7       	ldi	r21, 0x7D	; 125
    c562:	02 c0       	rjmp	.+4      	; 0xc568 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c564:	48 ec       	ldi	r20, 0xC8	; 200
    c566:	5d e7       	ldi	r21, 0x7D	; 125
    c568:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
    c56c:	22 c0       	rjmp	.+68     	; 0xc5b2 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c56e:	40 eb       	ldi	r20, 0xB0	; 176
    c570:	5d e7       	ldi	r21, 0x7D	; 125
    c572:	fa cf       	rjmp	.-12     	; 0xc568 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c574:	47 ea       	ldi	r20, 0xA7	; 167
    c576:	5d e7       	ldi	r21, 0x7D	; 125
    c578:	f7 cf       	rjmp	.-18     	; 0xc568 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c57a:	4d ea       	ldi	r20, 0xAD	; 173
    c57c:	5d e7       	ldi	r21, 0x7D	; 125
    c57e:	f4 cf       	rjmp	.-24     	; 0xc568 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c580:	42 ec       	ldi	r20, 0xC2	; 194
    c582:	5d e7       	ldi	r21, 0x7D	; 125
    c584:	f1 cf       	rjmp	.-30     	; 0xc568 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c586:	4f eb       	ldi	r20, 0xBF	; 191
    c588:	5d e7       	ldi	r21, 0x7D	; 125
    c58a:	ee cf       	rjmp	.-36     	; 0xc568 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c58c:	41 ea       	ldi	r20, 0xA1	; 161
    c58e:	5d e7       	ldi	r21, 0x7D	; 125
    c590:	eb cf       	rjmp	.-42     	; 0xc568 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    c592:	44 ea       	ldi	r20, 0xA4	; 164
    c594:	5d e7       	ldi	r21, 0x7D	; 125
    c596:	e8 cf       	rjmp	.-48     	; 0xc568 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    c598:	44 ea       	ldi	r20, 0xA4	; 164
    c59a:	5d e7       	ldi	r21, 0x7D	; 125
    c59c:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
    c5a0:	d0 93 3a 10 	sts	0x103A, r29
    c5a4:	c0 93 39 10 	sts	0x1039, r28
    c5a8:	04 c0       	rjmp	.+8      	; 0xc5b2 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c5aa:	40 e0       	ldi	r20, 0x00	; 0
    c5ac:	50 e0       	ldi	r21, 0x00	; 0
    c5ae:	0e 94 c6 43 	call	0x878c	; 0x878c <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c5b2:	21 96       	adiw	r28, 0x01	; 1
    c5b4:	ce 3e       	cpi	r28, 0xEE	; 238
    c5b6:	82 e0       	ldi	r24, 0x02	; 2
    c5b8:	d8 07       	cpc	r29, r24
    c5ba:	09 f0       	breq	.+2      	; 0xc5be <load_level_tiles+0xda>
    c5bc:	9e cf       	rjmp	.-196    	; 0xc4fa <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c5be:	df 91       	pop	r29
    c5c0:	cf 91       	pop	r28
    c5c2:	1f 91       	pop	r17
    c5c4:	ff 90       	pop	r15
    c5c6:	ef 90       	pop	r14
    c5c8:	08 95       	ret

0000c5ca <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    c5ca:	cf 93       	push	r28
    c5cc:	df 93       	push	r29
    c5ce:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    c5d0:	6a 8b       	std	Y+18, r22	; 0x12
	p->spawn_y = y;
    c5d2:	4b 8b       	std	Y+19, r20	; 0x13
	p->level_score = 0;
    c5d4:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    c5d6:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    c5d8:	19 8e       	std	Y+25, r1	; 0x19
	p->max_speed = MAX_SPEED;
    c5da:	82 e3       	ldi	r24, 0x32	; 50
    c5dc:	88 8f       	std	Y+24, r24	; 0x18
	player_init_shot_state(p);
    c5de:	ce 01       	movw	r24, r28
    c5e0:	0e 94 8a 56 	call	0xad14	; 0xad14 <player_init_shot_state>
	player_spawn(p);
    c5e4:	ce 01       	movw	r24, r28
}
    c5e6:	df 91       	pop	r29
    c5e8:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    c5ea:	0c 94 af 56 	jmp	0xad5e	; 0xad5e <player_spawn>

0000c5ee <load_level>:
}

void load_level(int level_number)
{
    c5ee:	8f 92       	push	r8
    c5f0:	9f 92       	push	r9
    c5f2:	af 92       	push	r10
    c5f4:	bf 92       	push	r11
    c5f6:	cf 92       	push	r12
    c5f8:	df 92       	push	r13
    c5fa:	ef 92       	push	r14
    c5fc:	ff 92       	push	r15
    c5fe:	0f 93       	push	r16
    c600:	1f 93       	push	r17
    c602:	cf 93       	push	r28
    c604:	df 93       	push	r29
    c606:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c608:	8e ee       	ldi	r24, 0xEE	; 238
    c60a:	92 e0       	ldi	r25, 0x02	; 2
    c60c:	c8 9f       	mul	r28, r24
    c60e:	70 01       	movw	r14, r0
    c610:	c9 9f       	mul	r28, r25
    c612:	f0 0c       	add	r15, r0
    c614:	d8 9f       	mul	r29, r24
    c616:	f0 0c       	add	r15, r0
    c618:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    c61a:	10 92 1a 0c 	sts	0x0C1A, r1
    c61e:	10 92 19 0c 	sts	0x0C19, r1
	init_tile_animations(&tile_animations);
    c622:	8c e1       	ldi	r24, 0x1C	; 28
    c624:	9c e0       	ldi	r25, 0x0C	; 12
    c626:	0e 94 42 55 	call	0xaa84	; 0xaa84 <init_tile_animations>
	init_scope_animation(&scope_animation);
    c62a:	8d e2       	ldi	r24, 0x2D	; 45
    c62c:	90 e1       	ldi	r25, 0x10	; 16
    c62e:	0e 94 69 55 	call	0xaad2	; 0xaad2 <init_scope_animation>
	init_sub_animation(&sub_animation);
    c632:	8f e1       	ldi	r24, 0x1F	; 31
    c634:	90 e1       	ldi	r25, 0x10	; 16
    c636:	0e 94 81 55 	call	0xab02	; 0xab02 <init_sub_animation>
	game.current_screen = LEVEL;
    c63a:	83 e0       	ldi	r24, 0x03	; 3
    c63c:	80 93 0f 0c 	sts	0x0C0F, r24
	clear_sprites();
    c640:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
	game.current_level = level_number;
    c644:	c0 93 10 0c 	sts	0x0C10, r28
    c648:	89 eb       	ldi	r24, 0xB9	; 185
    c64a:	a8 2e       	mov	r10, r24
    c64c:	8c e0       	ldi	r24, 0x0C	; 12
    c64e:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    c650:	00 e0       	ldi	r16, 0x00	; 0
    c652:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    c654:	9e e1       	ldi	r25, 0x1E	; 30
    c656:	c9 2e       	mov	r12, r25
    c658:	d1 2c       	mov	r13, r1
    c65a:	c8 01       	movw	r24, r16
    c65c:	b6 01       	movw	r22, r12
    c65e:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    c662:	d8 2f       	mov	r29, r24
    c664:	dd 0f       	add	r29, r29
    c666:	dd 0f       	add	r29, r29
    c668:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    c66a:	ab 01       	movw	r20, r22
    c66c:	4d 5f       	subi	r20, 0xFD	; 253
    c66e:	5f 4f       	sbci	r21, 0xFF	; 255
    c670:	c4 2f       	mov	r28, r20
    c672:	cc 0f       	add	r28, r28
    c674:	cc 0f       	add	r28, r28
    c676:	cc 0f       	add	r28, r28
    c678:	f8 01       	movw	r30, r16
    c67a:	ee 0d       	add	r30, r14
    c67c:	ff 1d       	adc	r31, r15
    c67e:	ee 56       	subi	r30, 0x6E	; 110
    c680:	f5 4e       	sbci	r31, 0xE5	; 229
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c682:	e4 91       	lpm	r30, Z
    c684:	45 01       	movw	r8, r10
    c686:	d5 01       	movw	r26, r10
    c688:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c68a:	e8 35       	cpi	r30, 0x58	; 88
    c68c:	31 f4       	brne	.+12     	; 0xc69a <load_level+0xac>
		{
			prep_player(&player1, x, y);
    c68e:	4c 2f       	mov	r20, r28
    c690:	6d 2f       	mov	r22, r29
    c692:	89 e3       	ldi	r24, 0x39	; 57
    c694:	9c e0       	ldi	r25, 0x0C	; 12
    c696:	0e 94 e5 62 	call	0xc5ca	; 0xc5ca <prep_player>
    c69a:	bf ef       	ldi	r27, 0xFF	; 255
    c69c:	ab 1a       	sub	r10, r27
    c69e:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c6a0:	f4 01       	movw	r30, r8
    c6a2:	80 81       	ld	r24, Z
    c6a4:	83 36       	cpi	r24, 0x63	; 99
    c6a6:	31 f4       	brne	.+12     	; 0xc6b4 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    c6a8:	4c 2f       	mov	r20, r28
    c6aa:	6d 2f       	mov	r22, r29
    c6ac:	87 ea       	ldi	r24, 0xA7	; 167
    c6ae:	9f e0       	ldi	r25, 0x0F	; 15
    c6b0:	0e 94 e5 62 	call	0xc5ca	; 0xc5ca <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c6b4:	0f 5f       	subi	r16, 0xFF	; 255
    c6b6:	1f 4f       	sbci	r17, 0xFF	; 255
    c6b8:	0e 3e       	cpi	r16, 0xEE	; 238
    c6ba:	f2 e0       	ldi	r31, 0x02	; 2
    c6bc:	1f 07       	cpc	r17, r31
    c6be:	69 f6       	brne	.-102    	; 0xc65a <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    c6c0:	60 e0       	ldi	r22, 0x00	; 0
    c6c2:	89 e3       	ldi	r24, 0x39	; 57
    c6c4:	9c e0       	ldi	r25, 0x0C	; 12
    c6c6:	0e 94 9a 58 	call	0xb134	; 0xb134 <render_hud>
	render_hud(&player2, 15);
    c6ca:	6f e0       	ldi	r22, 0x0F	; 15
    c6cc:	87 ea       	ldi	r24, 0xA7	; 167
    c6ce:	9f e0       	ldi	r25, 0x0F	; 15
    c6d0:	0e 94 9a 58 	call	0xb134	; 0xb134 <render_hud>
	render_score(&player1, 0);
    c6d4:	60 e0       	ldi	r22, 0x00	; 0
    c6d6:	89 e3       	ldi	r24, 0x39	; 57
    c6d8:	9c e0       	ldi	r25, 0x0C	; 12
    c6da:	0e 94 b7 58 	call	0xb16e	; 0xb16e <render_score>
	render_score(&player2, 15);
    c6de:	6f e0       	ldi	r22, 0x0F	; 15
    c6e0:	87 ea       	ldi	r24, 0xA7	; 167
    c6e2:	9f e0       	ldi	r25, 0x0F	; 15
    c6e4:	0e 94 b7 58 	call	0xb16e	; 0xb16e <render_score>
	Print(14, 0, (char*) strVertSep);
    c6e8:	47 e0       	ldi	r20, 0x07	; 7
    c6ea:	53 e0       	ldi	r21, 0x03	; 3
    c6ec:	60 e0       	ldi	r22, 0x00	; 0
    c6ee:	70 e0       	ldi	r23, 0x00	; 0
    c6f0:	8e e0       	ldi	r24, 0x0E	; 14
    c6f2:	90 e0       	ldi	r25, 0x00	; 0
    c6f4:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(14, 1, (char*) strVertSep);
    c6f8:	47 e0       	ldi	r20, 0x07	; 7
    c6fa:	53 e0       	ldi	r21, 0x03	; 3
    c6fc:	61 e0       	ldi	r22, 0x01	; 1
    c6fe:	70 e0       	ldi	r23, 0x00	; 0
    c700:	8e e0       	ldi	r24, 0x0E	; 14
    c702:	90 e0       	ldi	r25, 0x00	; 0
    c704:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(14, 2, (char*) strVertSep);
    c708:	47 e0       	ldi	r20, 0x07	; 7
    c70a:	53 e0       	ldi	r21, 0x03	; 3
    c70c:	62 e0       	ldi	r22, 0x02	; 2
    c70e:	70 e0       	ldi	r23, 0x00	; 0
    c710:	8e e0       	ldi	r24, 0x0E	; 14
    c712:	90 e0       	ldi	r25, 0x00	; 0
    c714:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	load_level_tiles(false);
    c718:	80 e0       	ldi	r24, 0x00	; 0
}
    c71a:	df 91       	pop	r29
    c71c:	cf 91       	pop	r28
    c71e:	1f 91       	pop	r17
    c720:	0f 91       	pop	r16
    c722:	ff 90       	pop	r15
    c724:	ef 90       	pop	r14
    c726:	df 90       	pop	r13
    c728:	cf 90       	pop	r12
    c72a:	bf 90       	pop	r11
    c72c:	af 90       	pop	r10
    c72e:	9f 90       	pop	r9
    c730:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    c732:	0c 94 72 62 	jmp	0xc4e4	; 0xc4e4 <load_level_tiles>

0000c736 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c736:	cf 93       	push	r28
    c738:	df 93       	push	r29
    c73a:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c73c:	61 e0       	ldi	r22, 0x01	; 1
    c73e:	83 e0       	ldi	r24, 0x03	; 3
    c740:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <FadeOut>
	ClearVram();
    c744:	0e 94 b8 43 	call	0x8770	; 0x8770 <ClearVram>
	clear_sprites();
    c748:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c74c:	d0 e0       	ldi	r29, 0x00	; 0
    c74e:	ae 01       	movw	r20, r28
    c750:	84 e0       	ldi	r24, 0x04	; 4
    c752:	44 0f       	add	r20, r20
    c754:	55 1f       	adc	r21, r21
    c756:	8a 95       	dec	r24
    c758:	e1 f7       	brne	.-8      	; 0xc752 <level_transition+0x1c>
    c75a:	4c 5d       	subi	r20, 0xDC	; 220
    c75c:	5e 4f       	sbci	r21, 0xFE	; 254
    c75e:	6c e0       	ldi	r22, 0x0C	; 12
    c760:	70 e0       	ldi	r23, 0x00	; 0
    c762:	88 e0       	ldi	r24, 0x08	; 8
    c764:	90 e0       	ldi	r25, 0x00	; 0
    c766:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	FadeIn(1, true);
    c76a:	61 e0       	ldi	r22, 0x01	; 1
    c76c:	81 e0       	ldi	r24, 0x01	; 1
    c76e:	0e 94 cc 52 	call	0xa598	; 0xa598 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c772:	84 e0       	ldi	r24, 0x04	; 4
    c774:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <LBWaitSeconds>
	FadeOut(1, true);
    c778:	61 e0       	ldi	r22, 0x01	; 1
    c77a:	81 e0       	ldi	r24, 0x01	; 1
    c77c:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <FadeOut>
	ClearVram();
    c780:	0e 94 b8 43 	call	0x8770	; 0x8770 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c784:	60 e0       	ldi	r22, 0x00	; 0
    c786:	83 e0       	ldi	r24, 0x03	; 3
    c788:	0e 94 cc 52 	call	0xa598	; 0xa598 <FadeIn>
	load_level(index);
    c78c:	ce 01       	movw	r24, r28
}
    c78e:	df 91       	pop	r29
    c790:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c792:	0c 94 f7 62 	jmp	0xc5ee	; 0xc5ee <load_level>

0000c796 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c796:	8d e2       	ldi	r24, 0x2D	; 45
    c798:	90 e1       	ldi	r25, 0x10	; 16
    c79a:	0e 94 85 59 	call	0xb30a	; 0xb30a <render_scope>
    c79e:	88 23       	and	r24, r24
    c7a0:	41 f0       	breq	.+16     	; 0xc7b2 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c7a2:	82 e0       	ldi	r24, 0x02	; 2
    c7a4:	80 93 12 0c 	sts	0x0C12, r24
		SFX_ALARM;
    c7a8:	41 e0       	ldi	r20, 0x01	; 1
    c7aa:	6f ef       	ldi	r22, 0xFF	; 255
    c7ac:	88 e0       	ldi	r24, 0x08	; 8
    c7ae:	0c 94 36 47 	jmp	0x8e6c	; 0x8e6c <TriggerFx>
    c7b2:	08 95       	ret

0000c7b4 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    c7b4:	0f 93       	push	r16
    c7b6:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c7b8:	8f e1       	ldi	r24, 0x1F	; 31
    c7ba:	90 e1       	ldi	r25, 0x10	; 16
    c7bc:	0e 94 32 53 	call	0xa664	; 0xa664 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c7c0:	ac 01       	movw	r20, r24
    c7c2:	64 e0       	ldi	r22, 0x04	; 4
    c7c4:	81 e0       	ldi	r24, 0x01	; 1
    c7c6:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	if (sub_animation.anim.reversing)
    c7ca:	80 91 24 10 	lds	r24, 0x1024
    c7ce:	88 23       	and	r24, r24
    c7d0:	d9 f0       	breq	.+54     	; 0xc808 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c7d2:	84 e0       	ldi	r24, 0x04	; 4
    c7d4:	80 93 12 0c 	sts	0x0C12, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    c7d8:	00 e0       	ldi	r16, 0x00	; 0
    c7da:	10 e0       	ldi	r17, 0x00	; 0
    c7dc:	20 e9       	ldi	r18, 0x90	; 144
    c7de:	32 e4       	ldi	r19, 0x42	; 66
    c7e0:	40 e0       	ldi	r20, 0x00	; 0
    c7e2:	50 e0       	ldi	r21, 0x00	; 0
    c7e4:	60 ec       	ldi	r22, 0xC0	; 192
    c7e6:	72 e4       	ldi	r23, 0x42	; 66
    c7e8:	8f e6       	ldi	r24, 0x6F	; 111
    c7ea:	90 e1       	ldi	r25, 0x10	; 16
    c7ec:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    c7f0:	00 e0       	ldi	r16, 0x00	; 0
    c7f2:	10 e0       	ldi	r17, 0x00	; 0
    c7f4:	20 e9       	ldi	r18, 0x90	; 144
    c7f6:	32 e4       	ldi	r19, 0x42	; 66
    c7f8:	40 e0       	ldi	r20, 0x00	; 0
    c7fa:	50 e0       	ldi	r21, 0x00	; 0
    c7fc:	60 e4       	ldi	r22, 0x40	; 64
    c7fe:	73 e4       	ldi	r23, 0x43	; 67
    c800:	8b e3       	ldi	r24, 0x3B	; 59
    c802:	90 e1       	ldi	r25, 0x10	; 16
    c804:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <init_turret>
	}
}
    c808:	1f 91       	pop	r17
    c80a:	0f 91       	pop	r16
    c80c:	08 95       	ret

0000c80e <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c80e:	8f e1       	ldi	r24, 0x1F	; 31
    c810:	90 e1       	ldi	r25, 0x10	; 16
    c812:	0e 94 32 53 	call	0xa664	; 0xa664 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    c816:	20 91 1f 10 	lds	r18, 0x101F
    c81a:	21 11       	cpse	r18, r1
    c81c:	05 c0       	rjmp	.+10     	; 0xc828 <render_boss_fight_sub_sinking+0x1a>
    c81e:	ac 01       	movw	r20, r24
    c820:	64 e0       	ldi	r22, 0x04	; 4
    c822:	81 e0       	ldi	r24, 0x01	; 1
    c824:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	if (sub_animation.anim.looped)
    c828:	80 91 23 10 	lds	r24, 0x1023
    c82c:	88 23       	and	r24, r24
    c82e:	19 f0       	breq	.+6      	; 0xc836 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    c830:	88 e0       	ldi	r24, 0x08	; 8
    c832:	80 93 12 0c 	sts	0x0C12, r24
    c836:	08 95       	ret

0000c838 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    c838:	ef 92       	push	r14
    c83a:	ff 92       	push	r15
    c83c:	0f 93       	push	r16
    c83e:	1f 93       	push	r17
    c840:	cf 93       	push	r28
    c842:	df 93       	push	r29
    c844:	1f 92       	push	r1
    c846:	cd b7       	in	r28, 0x3d	; 61
    c848:	de b7       	in	r29, 0x3e	; 62
    c84a:	7c 01       	movw	r14, r24
    c84c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    c84e:	fc 01       	movw	r30, r24
    c850:	67 81       	ldd	r22, Z+7	; 0x07
    c852:	70 85       	ldd	r23, Z+8	; 0x08
    c854:	81 85       	ldd	r24, Z+9	; 0x09
    c856:	92 85       	ldd	r25, Z+10	; 0x0a
    c858:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c85c:	46 2f       	mov	r20, r22
    c85e:	f7 01       	movw	r30, r14
    c860:	63 81       	ldd	r22, Z+3	; 0x03
    c862:	74 81       	ldd	r23, Z+4	; 0x04
    c864:	85 81       	ldd	r24, Z+5	; 0x05
    c866:	96 81       	ldd	r25, Z+6	; 0x06
    c868:	49 83       	std	Y+1, r20	; 0x01
    c86a:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c86e:	01 e0       	ldi	r16, 0x01	; 1
    c870:	21 e0       	ldi	r18, 0x01	; 1
    c872:	49 81       	ldd	r20, Y+1	; 0x01
    c874:	81 2f       	mov	r24, r17
    c876:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
}
    c87a:	0f 90       	pop	r0
    c87c:	df 91       	pop	r29
    c87e:	cf 91       	pop	r28
    c880:	1f 91       	pop	r17
    c882:	0f 91       	pop	r16
    c884:	ff 90       	pop	r15
    c886:	ef 90       	pop	r14
    c888:	08 95       	ret

0000c88a <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    c88a:	ef 92       	push	r14
    c88c:	ff 92       	push	r15
    c88e:	0f 93       	push	r16
    c890:	1f 93       	push	r17
    c892:	cf 93       	push	r28
    c894:	df 93       	push	r29
    c896:	1f 92       	push	r1
    c898:	cd b7       	in	r28, 0x3d	; 61
    c89a:	de b7       	in	r29, 0x3e	; 62
    c89c:	7c 01       	movw	r14, r24
    c89e:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    c8a0:	fc 01       	movw	r30, r24
    c8a2:	63 89       	ldd	r22, Z+19	; 0x13
    c8a4:	74 89       	ldd	r23, Z+20	; 0x14
    c8a6:	85 89       	ldd	r24, Z+21	; 0x15
    c8a8:	96 89       	ldd	r25, Z+22	; 0x16
    c8aa:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c8ae:	46 2f       	mov	r20, r22
    c8b0:	f7 01       	movw	r30, r14
    c8b2:	67 85       	ldd	r22, Z+15	; 0x0f
    c8b4:	70 89       	ldd	r23, Z+16	; 0x10
    c8b6:	81 89       	ldd	r24, Z+17	; 0x11
    c8b8:	92 89       	ldd	r25, Z+18	; 0x12
    c8ba:	49 83       	std	Y+1, r20	; 0x01
    c8bc:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    c8c0:	01 e0       	ldi	r16, 0x01	; 1
    c8c2:	21 e0       	ldi	r18, 0x01	; 1
    c8c4:	49 81       	ldd	r20, Y+1	; 0x01
    c8c6:	81 2f       	mov	r24, r17
    c8c8:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
}
    c8cc:	0f 90       	pop	r0
    c8ce:	df 91       	pop	r29
    c8d0:	cf 91       	pop	r28
    c8d2:	1f 91       	pop	r17
    c8d4:	0f 91       	pop	r16
    c8d6:	ff 90       	pop	r15
    c8d8:	ef 90       	pop	r14
    c8da:	08 95       	ret

0000c8dc <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c8dc:	cf 92       	push	r12
    c8de:	df 92       	push	r13
    c8e0:	ef 92       	push	r14
    c8e2:	ff 92       	push	r15
    c8e4:	cf 93       	push	r28
    c8e6:	df 93       	push	r29
    c8e8:	ec 01       	movw	r28, r24
    c8ea:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    c8ec:	cb 80       	ldd	r12, Y+3	; 0x03
    c8ee:	dc 80       	ldd	r13, Y+4	; 0x04
    c8f0:	ed 80       	ldd	r14, Y+5	; 0x05
    c8f2:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    c8f4:	6f 81       	ldd	r22, Y+7	; 0x07
    c8f6:	78 85       	ldd	r23, Y+8	; 0x08
    c8f8:	89 85       	ldd	r24, Y+9	; 0x09
    c8fa:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    c8fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    c8fe:	21 11       	cpse	r18, r1
    c900:	27 c0       	rjmp	.+78     	; 0xc950 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    c902:	20 e0       	ldi	r18, 0x00	; 0
    c904:	30 e0       	ldi	r19, 0x00	; 0
    c906:	40 e0       	ldi	r20, 0x00	; 0
    c908:	5e e3       	ldi	r21, 0x3E	; 62
    c90a:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c90e:	20 e0       	ldi	r18, 0x00	; 0
    c910:	30 e0       	ldi	r19, 0x00	; 0
    c912:	40 e4       	ldi	r20, 0x40	; 64
    c914:	50 e4       	ldi	r21, 0x40	; 64
    c916:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c91a:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    c91e:	8e e1       	ldi	r24, 0x1E	; 30
    c920:	68 9f       	mul	r22, r24
    c922:	e0 01       	movw	r28, r0
    c924:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    c926:	20 e0       	ldi	r18, 0x00	; 0
    c928:	30 e0       	ldi	r19, 0x00	; 0
    c92a:	40 e0       	ldi	r20, 0x00	; 0
    c92c:	5e e3       	ldi	r21, 0x3E	; 62
    c92e:	c7 01       	movw	r24, r14
    c930:	b6 01       	movw	r22, r12
    c932:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c936:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c93a:	c6 0f       	add	r28, r22
    c93c:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    c93e:	be 01       	movw	r22, r28
    c940:	8c e1       	ldi	r24, 0x1C	; 28
    c942:	9c e0       	ldi	r25, 0x0C	; 12
    c944:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    c948:	c8 54       	subi	r28, 0x48	; 72
    c94a:	d3 4f       	sbci	r29, 0xF3	; 243
    c94c:	19 82       	std	Y+1, r1	; 0x01
    c94e:	56 c0       	rjmp	.+172    	; 0xc9fc <update_turret+0x120>
	}
	else if (t->shared.direction == D_LEFT)
    c950:	98 81       	ld	r25, Y
    c952:	93 30       	cpi	r25, 0x03	; 3
    c954:	19 f5       	brne	.+70     	; 0xc99c <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    c956:	63 2f       	mov	r22, r19
    c958:	70 e0       	ldi	r23, 0x00	; 0
    c95a:	80 e0       	ldi	r24, 0x00	; 0
    c95c:	90 e0       	ldi	r25, 0x00	; 0
    c95e:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c962:	9b 01       	movw	r18, r22
    c964:	ac 01       	movw	r20, r24
    c966:	c7 01       	movw	r24, r14
    c968:	b6 01       	movw	r22, r12
    c96a:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    c96e:	87 ff       	sbrs	r24, 7
    c970:	02 c0       	rjmp	.+4      	; 0xc976 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    c972:	81 e0       	ldi	r24, 0x01	; 1
    c974:	24 c0       	rjmp	.+72     	; 0xc9be <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    c976:	69 81       	ldd	r22, Y+1	; 0x01
    c978:	70 e0       	ldi	r23, 0x00	; 0
    c97a:	80 e0       	ldi	r24, 0x00	; 0
    c97c:	90 e0       	ldi	r25, 0x00	; 0
    c97e:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c982:	25 e6       	ldi	r18, 0x65	; 101
    c984:	38 e8       	ldi	r19, 0x88	; 136
    c986:	48 e8       	ldi	r20, 0x88	; 136
    c988:	5c e3       	ldi	r21, 0x3C	; 60
    c98a:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c98e:	9b 01       	movw	r18, r22
    c990:	ac 01       	movw	r20, r24
    c992:	c7 01       	movw	r24, r14
    c994:	b6 01       	movw	r22, r12
    c996:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    c99a:	2c c0       	rjmp	.+88     	; 0xc9f4 <update_turret+0x118>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    c99c:	91 30       	cpi	r25, 0x01	; 1
    c99e:	71 f5       	brne	.+92     	; 0xc9fc <update_turret+0x120>
	{
		if (t->shared.x > right_limit)
    c9a0:	64 2f       	mov	r22, r20
    c9a2:	70 e0       	ldi	r23, 0x00	; 0
    c9a4:	80 e0       	ldi	r24, 0x00	; 0
    c9a6:	90 e0       	ldi	r25, 0x00	; 0
    c9a8:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c9ac:	9b 01       	movw	r18, r22
    c9ae:	ac 01       	movw	r20, r24
    c9b0:	c7 01       	movw	r24, r14
    c9b2:	b6 01       	movw	r22, r12
    c9b4:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    c9b8:	18 16       	cp	r1, r24
    c9ba:	54 f4       	brge	.+20     	; 0xc9d0 <update_turret+0xf4>
		{
			t->shared.direction = D_LEFT;
    c9bc:	83 e0       	ldi	r24, 0x03	; 3
    c9be:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    c9c0:	6c e8       	ldi	r22, 0x8C	; 140
    c9c2:	70 e0       	ldi	r23, 0x00	; 0
    c9c4:	8a e5       	ldi	r24, 0x5A	; 90
    c9c6:	90 e0       	ldi	r25, 0x00	; 0
    c9c8:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    c9cc:	89 83       	std	Y+1, r24	; 0x01
    c9ce:	16 c0       	rjmp	.+44     	; 0xc9fc <update_turret+0x120>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    c9d0:	69 81       	ldd	r22, Y+1	; 0x01
    c9d2:	70 e0       	ldi	r23, 0x00	; 0
    c9d4:	80 e0       	ldi	r24, 0x00	; 0
    c9d6:	90 e0       	ldi	r25, 0x00	; 0
    c9d8:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    c9dc:	25 e6       	ldi	r18, 0x65	; 101
    c9de:	38 e8       	ldi	r19, 0x88	; 136
    c9e0:	48 e8       	ldi	r20, 0x88	; 136
    c9e2:	5c e3       	ldi	r21, 0x3C	; 60
    c9e4:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    c9e8:	9b 01       	movw	r18, r22
    c9ea:	ac 01       	movw	r20, r24
    c9ec:	c7 01       	movw	r24, r14
    c9ee:	b6 01       	movw	r22, r12
    c9f0:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    c9f4:	6b 83       	std	Y+3, r22	; 0x03
    c9f6:	7c 83       	std	Y+4, r23	; 0x04
    c9f8:	8d 83       	std	Y+5, r24	; 0x05
    c9fa:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    c9fc:	df 91       	pop	r29
    c9fe:	cf 91       	pop	r28
    ca00:	ff 90       	pop	r15
    ca02:	ef 90       	pop	r14
    ca04:	df 90       	pop	r13
    ca06:	cf 90       	pop	r12
    ca08:	08 95       	ret

0000ca0a <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    ca0a:	0f 93       	push	r16
    ca0c:	1f 93       	push	r17
    ca0e:	cf 93       	push	r28
    ca10:	df 93       	push	r29
    ca12:	8c 01       	movw	r16, r24
    ca14:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    ca16:	fc 01       	movw	r30, r24
    ca18:	83 85       	ldd	r24, Z+11	; 0x0b
    ca1a:	81 11       	cpse	r24, r1
    ca1c:	02 c0       	rjmp	.+4      	; 0xca22 <update_turret_shot+0x18>
	{
		s->active = 0;
    ca1e:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    ca20:	76 c0       	rjmp	.+236    	; 0xcb0e <update_turret_shot+0x104>
	}
	if (!s->active)
    ca22:	8e 85       	ldd	r24, Y+14	; 0x0e
    ca24:	81 11       	cpse	r24, r1
    ca26:	2e c0       	rjmp	.+92     	; 0xca84 <update_turret_shot+0x7a>
	{
		s->active = 1;
    ca28:	81 e0       	ldi	r24, 0x01	; 1
    ca2a:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    ca2c:	20 e0       	ldi	r18, 0x00	; 0
    ca2e:	30 e0       	ldi	r19, 0x00	; 0
    ca30:	40 e4       	ldi	r20, 0x40	; 64
    ca32:	50 e4       	ldi	r21, 0x40	; 64
    ca34:	f8 01       	movw	r30, r16
    ca36:	63 81       	ldd	r22, Z+3	; 0x03
    ca38:	74 81       	ldd	r23, Z+4	; 0x04
    ca3a:	85 81       	ldd	r24, Z+5	; 0x05
    ca3c:	96 81       	ldd	r25, Z+6	; 0x06
    ca3e:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    ca42:	6b 83       	std	Y+3, r22	; 0x03
    ca44:	7c 83       	std	Y+4, r23	; 0x04
    ca46:	8d 83       	std	Y+5, r24	; 0x05
    ca48:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    ca4a:	20 e0       	ldi	r18, 0x00	; 0
    ca4c:	30 e0       	ldi	r19, 0x00	; 0
    ca4e:	40 e4       	ldi	r20, 0x40	; 64
    ca50:	50 e4       	ldi	r21, 0x40	; 64
    ca52:	f8 01       	movw	r30, r16
    ca54:	67 81       	ldd	r22, Z+7	; 0x07
    ca56:	70 85       	ldd	r23, Z+8	; 0x08
    ca58:	81 85       	ldd	r24, Z+9	; 0x09
    ca5a:	92 85       	ldd	r25, Z+10	; 0x0a
    ca5c:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    ca60:	6f 83       	std	Y+7, r22	; 0x07
    ca62:	78 87       	std	Y+8, r23	; 0x08
    ca64:	89 87       	std	Y+9, r24	; 0x09
    ca66:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
    ca68:	80 91 4d 0c 	lds	r24, 0x0C4D
    ca6c:	80 fd       	sbrc	r24, 0
    ca6e:	0a c0       	rjmp	.+20     	; 0xca84 <update_turret_shot+0x7a>
    ca70:	80 91 bb 0f 	lds	r24, 0x0FBB
    ca74:	80 fd       	sbrc	r24, 0
    ca76:	06 c0       	rjmp	.+12     	; 0xca84 <update_turret_shot+0x7a>
    ca78:	2f ef       	ldi	r18, 0xFF	; 255
    ca7a:	47 e1       	ldi	r20, 0x17	; 23
    ca7c:	62 e0       	ldi	r22, 0x02	; 2
    ca7e:	84 e0       	ldi	r24, 0x04	; 4
    ca80:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    ca84:	23 e3       	ldi	r18, 0x33	; 51
    ca86:	35 e5       	ldi	r19, 0x55	; 85
    ca88:	45 e8       	ldi	r20, 0x85	; 133
    ca8a:	50 e4       	ldi	r21, 0x40	; 64
    ca8c:	6f 81       	ldd	r22, Y+7	; 0x07
    ca8e:	78 85       	ldd	r23, Y+8	; 0x08
    ca90:	89 85       	ldd	r24, Y+9	; 0x09
    ca92:	9a 85       	ldd	r25, Y+10	; 0x0a
    ca94:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    ca98:	6f 83       	std	Y+7, r22	; 0x07
    ca9a:	78 87       	std	Y+8, r23	; 0x08
    ca9c:	89 87       	std	Y+9, r24	; 0x09
    ca9e:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    caa0:	20 e0       	ldi	r18, 0x00	; 0
    caa2:	30 e0       	ldi	r19, 0x00	; 0
    caa4:	40 e0       	ldi	r20, 0x00	; 0
    caa6:	51 e4       	ldi	r21, 0x41	; 65
    caa8:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    caac:	20 e0       	ldi	r18, 0x00	; 0
    caae:	30 e0       	ldi	r19, 0x00	; 0
    cab0:	48 e5       	ldi	r20, 0x58	; 88
    cab2:	53 e4       	ldi	r21, 0x43	; 67
    cab4:	0e 94 14 74 	call	0xe828	; 0xe828 <__gesf2>
    cab8:	18 16       	cp	r1, r24
    caba:	0c f4       	brge	.+2      	; 0xcabe <update_turret_shot+0xb4>
    cabc:	b0 cf       	rjmp	.-160    	; 0xca1e <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    cabe:	00 91 15 0c 	lds	r16, 0x0C15
    cac2:	10 91 16 0c 	lds	r17, 0x0C16
    cac6:	be 01       	movw	r22, r28
    cac8:	c8 01       	movw	r24, r16
    caca:	0e 94 a4 5b 	call	0xb748	; 0xb748 <player_shot>
    cace:	88 23       	and	r24, r24
    cad0:	f1 f0       	breq	.+60     	; 0xcb0e <update_turret_shot+0x104>
    cad2:	f8 01       	movw	r30, r16
    cad4:	84 89       	ldd	r24, Z+20	; 0x14
    cad6:	80 fd       	sbrc	r24, 0
    cad8:	1a c0       	rjmp	.+52     	; 0xcb0e <update_turret_shot+0x104>
	{
		game.boss_fight_player_lives--;
    cada:	90 91 14 0c 	lds	r25, 0x0C14
    cade:	91 50       	subi	r25, 0x01	; 1
    cae0:	90 93 14 0c 	sts	0x0C14, r25
		if (game.boss_fight_player_lives <= 0)
    cae4:	91 11       	cpse	r25, r1
    cae6:	03 c0       	rjmp	.+6      	; 0xcaee <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    cae8:	80 e1       	ldi	r24, 0x10	; 16
    caea:	80 93 12 0c 	sts	0x0C12, r24
		}
		s->active = 0;
    caee:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    caf0:	60 91 13 0c 	lds	r22, 0x0C13
    caf4:	c8 01       	movw	r24, r16
    caf6:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <kill_player>
		SFX_TANK_EXPLODE;
    cafa:	2f ef       	ldi	r18, 0xFF	; 255
    cafc:	40 e1       	ldi	r20, 0x10	; 16
    cafe:	67 e0       	ldi	r22, 0x07	; 7
    cb00:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    cb02:	df 91       	pop	r29
    cb04:	cf 91       	pop	r28
    cb06:	1f 91       	pop	r17
    cb08:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    cb0a:	0c 94 7e 47 	jmp	0x8efc	; 0x8efc <TriggerNote>
	}
}
    cb0e:	df 91       	pop	r29
    cb10:	cf 91       	pop	r28
    cb12:	1f 91       	pop	r17
    cb14:	0f 91       	pop	r16
    cb16:	08 95       	ret

0000cb18 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    cb18:	10 92 0f 0c 	sts	0x0C0F, r1
	clear_sprites();
    cb1c:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    cb20:	4c e3       	ldi	r20, 0x3C	; 60
    cb22:	53 e0       	ldi	r21, 0x03	; 3
    cb24:	6d e0       	ldi	r22, 0x0D	; 13
    cb26:	70 e0       	ldi	r23, 0x00	; 0
    cb28:	87 e0       	ldi	r24, 0x07	; 7
    cb2a:	90 e0       	ldi	r25, 0x00	; 0
    cb2c:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(7, 14, (char*) str2Player);
    cb30:	4b e2       	ldi	r20, 0x2B	; 43
    cb32:	53 e0       	ldi	r21, 0x03	; 3
    cb34:	6e e0       	ldi	r22, 0x0E	; 14
    cb36:	70 e0       	ldi	r23, 0x00	; 0
    cb38:	87 e0       	ldi	r24, 0x07	; 7
    cb3a:	90 e0       	ldi	r25, 0x00	; 0
    cb3c:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(7, 15, (char*) strHighscores);
    cb40:	41 e2       	ldi	r20, 0x21	; 33
    cb42:	53 e0       	ldi	r21, 0x03	; 3
    cb44:	6f e0       	ldi	r22, 0x0F	; 15
    cb46:	70 e0       	ldi	r23, 0x00	; 0
    cb48:	87 e0       	ldi	r24, 0x07	; 7
    cb4a:	90 e0       	ldi	r25, 0x00	; 0
    cb4c:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(5, 26, (char*) strCopyright);
    cb50:	4a e4       	ldi	r20, 0x4A	; 74
    cb52:	53 e0       	ldi	r21, 0x03	; 3
    cb54:	6a e1       	ldi	r22, 0x1A	; 26
    cb56:	70 e0       	ldi	r23, 0x00	; 0
    cb58:	85 e0       	ldi	r24, 0x05	; 5
    cb5a:	90 e0       	ldi	r25, 0x00	; 0
    cb5c:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    cb60:	4b ec       	ldi	r20, 0xCB	; 203
    cb62:	5d e7       	ldi	r21, 0x7D	; 125
    cb64:	65 e0       	ldi	r22, 0x05	; 5
    cb66:	84 e0       	ldi	r24, 0x04	; 4
    cb68:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	MapSprite2(0, map_right_arrow, 0);
    cb6c:	40 e0       	ldi	r20, 0x00	; 0
    cb6e:	68 e1       	ldi	r22, 0x18	; 24
    cb70:	74 e4       	ldi	r23, 0x44	; 68
    cb72:	80 e0       	ldi	r24, 0x00	; 0
    cb74:	0c 94 83 51 	jmp	0xa306	; 0xa306 <MapSprite2>

0000cb78 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    cb78:	fc 01       	movw	r30, r24
    cb7a:	20 81       	ld	r18, Z
    cb7c:	31 81       	ldd	r19, Z+1	; 0x01
    cb7e:	28 70       	andi	r18, 0x08	; 8
    cb80:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cb82:	81 e0       	ldi	r24, 0x01	; 1
    cb84:	23 2b       	or	r18, r19
    cb86:	09 f4       	brne	.+2      	; 0xcb8a <select_pressed+0x12>
    cb88:	80 e0       	ldi	r24, 0x00	; 0
}
    cb8a:	08 95       	ret

0000cb8c <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    cb8c:	ff 92       	push	r15
    cb8e:	0f 93       	push	r16
    cb90:	1f 93       	push	r17
    cb92:	cf 93       	push	r28
    cb94:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    cb96:	81 e0       	ldi	r24, 0x01	; 1
    cb98:	80 93 0f 0c 	sts	0x0C0F, r24
	clear_sprites();
    cb9c:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    cba0:	48 e9       	ldi	r20, 0x98	; 152
    cba2:	5d e7       	ldi	r21, 0x7D	; 125
    cba4:	61 e0       	ldi	r22, 0x01	; 1
    cba6:	87 e0       	ldi	r24, 0x07	; 7
    cba8:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    cbac:	42 e9       	ldi	r20, 0x92	; 146
    cbae:	5d e7       	ldi	r21, 0x7D	; 125
    cbb0:	61 e0       	ldi	r22, 0x01	; 1
    cbb2:	84 e1       	ldi	r24, 0x14	; 20
    cbb4:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    cbb8:	41 e2       	ldi	r20, 0x21	; 33
    cbba:	53 e0       	ldi	r21, 0x03	; 3
    cbbc:	62 e0       	ldi	r22, 0x02	; 2
    cbbe:	70 e0       	ldi	r23, 0x00	; 0
    cbc0:	8a e0       	ldi	r24, 0x0A	; 10
    cbc2:	90 e0       	ldi	r25, 0x00	; 0
    cbc4:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    cbc8:	0e ec       	ldi	r16, 0xCE	; 206
    cbca:	1b e0       	ldi	r17, 0x0B	; 11
    cbcc:	c7 e0       	ldi	r28, 0x07	; 7
    cbce:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    cbd0:	ff 24       	eor	r15, r15
    cbd2:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    cbd4:	20 e0       	ldi	r18, 0x00	; 0
    cbd6:	4f 2d       	mov	r20, r15
    cbd8:	be 01       	movw	r22, r28
    cbda:	82 e0       	ldi	r24, 0x02	; 2
    cbdc:	90 e0       	ldi	r25, 0x00	; 0
    cbde:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
		PrintChar(3, y, '.');
    cbe2:	4e e2       	ldi	r20, 0x2E	; 46
    cbe4:	be 01       	movw	r22, r28
    cbe6:	83 e0       	ldi	r24, 0x03	; 3
    cbe8:	90 e0       	ldi	r25, 0x00	; 0
    cbea:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
    cbee:	f8 01       	movw	r30, r16
    cbf0:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    cbf2:	80 81       	ld	r24, Z
    cbf4:	93 e0       	ldi	r25, 0x03	; 3
    cbf6:	89 9f       	mul	r24, r25
    cbf8:	a0 01       	movw	r20, r0
    cbfa:	11 24       	eor	r1, r1
    cbfc:	4f 50       	subi	r20, 0x0F	; 15
    cbfe:	54 4f       	sbci	r21, 0xF4	; 244
    cc00:	23 e0       	ldi	r18, 0x03	; 3
    cc02:	6c 2f       	mov	r22, r28
    cc04:	85 e0       	ldi	r24, 0x05	; 5
    cc06:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
		Print(9, y, (char*) strOwns);
    cc0a:	46 ea       	ldi	r20, 0xA6	; 166
    cc0c:	52 e0       	ldi	r21, 0x02	; 2
    cc0e:	be 01       	movw	r22, r28
    cc10:	89 e0       	ldi	r24, 0x09	; 9
    cc12:	90 e0       	ldi	r25, 0x00	; 0
    cc14:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    cc18:	f8 01       	movw	r30, r16
    cc1a:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    cc1c:	80 81       	ld	r24, Z
    cc1e:	e3 e0       	ldi	r30, 0x03	; 3
    cc20:	8e 9f       	mul	r24, r30
    cc22:	a0 01       	movw	r20, r0
    cc24:	11 24       	eor	r1, r1
    cc26:	4f 50       	subi	r20, 0x0F	; 15
    cc28:	54 4f       	sbci	r21, 0xF4	; 244
    cc2a:	23 e0       	ldi	r18, 0x03	; 3
    cc2c:	6c 2f       	mov	r22, r28
    cc2e:	8e e0       	ldi	r24, 0x0E	; 14
    cc30:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
		Print(18, y, (char*) strBy);
    cc34:	43 ea       	ldi	r20, 0xA3	; 163
    cc36:	52 e0       	ldi	r21, 0x02	; 2
    cc38:	be 01       	movw	r22, r28
    cc3a:	82 e1       	ldi	r24, 0x12	; 18
    cc3c:	90 e0       	ldi	r25, 0x00	; 0
    cc3e:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    cc42:	21 e0       	ldi	r18, 0x01	; 1
    cc44:	f8 01       	movw	r30, r16
    cc46:	32 97       	sbiw	r30, 0x02	; 2
    cc48:	40 81       	ld	r20, Z
    cc4a:	be 01       	movw	r22, r28
    cc4c:	87 e1       	ldi	r24, 0x17	; 23
    cc4e:	90 e0       	ldi	r25, 0x00	; 0
    cc50:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
		PrintChar(24, y, '-');
    cc54:	4d e2       	ldi	r20, 0x2D	; 45
    cc56:	be 01       	movw	r22, r28
    cc58:	88 e1       	ldi	r24, 0x18	; 24
    cc5a:	90 e0       	ldi	r25, 0x00	; 0
    cc5c:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    cc60:	21 e0       	ldi	r18, 0x01	; 1
    cc62:	f8 01       	movw	r30, r16
    cc64:	31 97       	sbiw	r30, 0x01	; 1
    cc66:	40 81       	ld	r20, Z
    cc68:	be 01       	movw	r22, r28
    cc6a:	8b e1       	ldi	r24, 0x1B	; 27
    cc6c:	90 e0       	ldi	r25, 0x00	; 0
    cc6e:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <PrintByte>
		if (scores.data[i+4])
    cc72:	f8 01       	movw	r30, r16
    cc74:	80 81       	ld	r24, Z
    cc76:	88 23       	and	r24, r24
    cc78:	11 f0       	breq	.+4      	; 0xcc7e <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    cc7a:	4a e2       	ldi	r20, 0x2A	; 42
    cc7c:	01 c0       	rjmp	.+2      	; 0xcc80 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    cc7e:	40 e2       	ldi	r20, 0x20	; 32
    cc80:	be 01       	movw	r22, r28
    cc82:	8d e1       	ldi	r24, 0x1D	; 29
    cc84:	90 e0       	ldi	r25, 0x00	; 0
    cc86:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
		y += 3;
		rank += 1;
    cc8a:	f3 94       	inc	r15
    cc8c:	23 96       	adiw	r28, 0x03	; 3
    cc8e:	0b 5f       	subi	r16, 0xFB	; 251
    cc90:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    cc92:	f6 e0       	ldi	r31, 0x06	; 6
    cc94:	ff 12       	cpse	r15, r31
    cc96:	9e cf       	rjmp	.-196    	; 0xcbd4 <load_tank_rank+0x48>
		else
			PrintChar(29, y, ' ');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    cc98:	4a eb       	ldi	r20, 0xBA	; 186
    cc9a:	52 e0       	ldi	r21, 0x02	; 2
    cc9c:	66 e1       	ldi	r22, 0x16	; 22
    cc9e:	70 e0       	ldi	r23, 0x00	; 0
    cca0:	83 e0       	ldi	r24, 0x03	; 3
    cca2:	90 e0       	ldi	r25, 0x00	; 0
    cca4:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(10, 24, (char*) strCancelHandle);
    cca8:	43 ed       	ldi	r20, 0xD3	; 211
    ccaa:	52 e0       	ldi	r21, 0x02	; 2
    ccac:	68 e1       	ldi	r22, 0x18	; 24
    ccae:	70 e0       	ldi	r23, 0x00	; 0
    ccb0:	8a e0       	ldi	r24, 0x0A	; 10
    ccb2:	90 e0       	ldi	r25, 0x00	; 0
}
    ccb4:	df 91       	pop	r29
    ccb6:	cf 91       	pop	r28
    ccb8:	1f 91       	pop	r17
    ccba:	0f 91       	pop	r16
    ccbc:	ff 90       	pop	r15
			PrintChar(29, y, ' ');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    ccbe:	0c 94 89 52 	jmp	0xa512	; 0xa512 <Print>

0000ccc2 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    ccc2:	0e 94 f6 56 	call	0xadec	; 0xadec <save_score>
	fade_through();
    ccc6:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
	SetSpriteVisibility(true);
    ccca:	81 e0       	ldi	r24, 0x01	; 1
    cccc:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
	init_game_state();
    ccd0:	0e 94 90 56 	call	0xad20	; 0xad20 <init_game_state>
	load_tank_rank();
    ccd4:	0c 94 c6 65 	jmp	0xcb8c	; 0xcb8c <load_tank_rank>

0000ccd8 <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    ccd8:	cf 92       	push	r12
    ccda:	df 92       	push	r13
    ccdc:	ef 92       	push	r14
    ccde:	ff 92       	push	r15
    cce0:	0f 93       	push	r16
    cce2:	1f 93       	push	r17
    cce4:	cf 93       	push	r28
    cce6:	df 93       	push	r29
    cce8:	00 d0       	rcall	.+0      	; 0xccea <update_player+0x12>
    ccea:	00 d0       	rcall	.+0      	; 0xccec <update_player+0x14>
    ccec:	cd b7       	in	r28, 0x3d	; 61
    ccee:	de b7       	in	r29, 0x3e	; 62
    ccf0:	8c 01       	movw	r16, r24
    ccf2:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    ccf4:	fb 01       	movw	r30, r22
    ccf6:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    ccf8:	fc 01       	movw	r30, r24
    ccfa:	80 81       	ld	r24, Z
    ccfc:	83 ff       	sbrs	r24, 3
    ccfe:	13 c0       	rjmp	.+38     	; 0xcd26 <update_player+0x4e>
    cd00:	80 91 12 0c 	lds	r24, 0x0C12
    cd04:	81 11       	cpse	r24, r1
    cd06:	0f c0       	rjmp	.+30     	; 0xcd26 <update_player+0x4e>
	{
		SFX_NAVIGATE;
    cd08:	2f ef       	ldi	r18, 0xFF	; 255
    cd0a:	47 e1       	ldi	r20, 0x17	; 23
    cd0c:	65 e0       	ldi	r22, 0x05	; 5
    cd0e:	84 e0       	ldi	r24, 0x04	; 4
    cd10:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		game.paused = game.paused ^ 1;
    cd14:	90 91 11 0c 	lds	r25, 0x0C11
    cd18:	81 e0       	ldi	r24, 0x01	; 1
    cd1a:	89 27       	eor	r24, r25
    cd1c:	80 93 11 0c 	sts	0x0C11, r24
		load_level_tiles(false);
    cd20:	80 e0       	ldi	r24, 0x00	; 0
    cd22:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cd26:	80 91 11 0c 	lds	r24, 0x0C11
    cd2a:	81 11       	cpse	r24, r1
    cd2c:	d1 c0       	rjmp	.+418    	; 0xced0 <update_player+0x1f8>
    cd2e:	f6 01       	movw	r30, r12
    cd30:	84 89       	ldd	r24, Z+20	; 0x14
    cd32:	80 fd       	sbrc	r24, 0
    cd34:	cd c0       	rjmp	.+410    	; 0xced0 <update_player+0x1f8>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    cd36:	f8 01       	movw	r30, r16
    cd38:	80 81       	ld	r24, Z
    cd3a:	91 81       	ldd	r25, Z+1	; 0x01
    cd3c:	93 ff       	sbrs	r25, 3
    cd3e:	1b c0       	rjmp	.+54     	; 0xcd76 <update_player+0x9e>
    cd40:	f6 01       	movw	r30, r12
    cd42:	85 89       	ldd	r24, Z+21	; 0x15
    cd44:	8a 35       	cpi	r24, 0x5A	; 90
    cd46:	b9 f4       	brne	.+46     	; 0xcd76 <update_player+0x9e>
		{
			player->banter_frame = 0;
    cd48:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    cd4a:	69 e0       	ldi	r22, 0x09	; 9
    cd4c:	70 e0       	ldi	r23, 0x00	; 0
    cd4e:	80 e0       	ldi	r24, 0x00	; 0
    cd50:	90 e0       	ldi	r25, 0x00	; 0
    cd52:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    cd56:	f6 01       	movw	r30, r12
    cd58:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    cd5a:	80 91 4d 0c 	lds	r24, 0x0C4D
    cd5e:	80 fd       	sbrc	r24, 0
    cd60:	0a c0       	rjmp	.+20     	; 0xcd76 <update_player+0x9e>
    cd62:	80 91 bb 0f 	lds	r24, 0x0FBB
    cd66:	80 fd       	sbrc	r24, 0
    cd68:	06 c0       	rjmp	.+12     	; 0xcd76 <update_player+0x9e>
    cd6a:	2f e5       	ldi	r18, 0x5F	; 95
    cd6c:	4e e1       	ldi	r20, 0x1E	; 30
    cd6e:	60 e0       	ldi	r22, 0x00	; 0
    cd70:	84 e0       	ldi	r24, 0x04	; 4
    cd72:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    cd76:	f6 01       	movw	r30, r12
    cd78:	80 8d       	ldd	r24, Z+24	; 0x18
    cd7a:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    cd7c:	f8 01       	movw	r30, r16
    cd7e:	84 81       	ldd	r24, Z+4	; 0x04
    cd80:	84 ff       	sbrs	r24, 4
    cd82:	10 c0       	rjmp	.+32     	; 0xcda4 <update_player+0xcc>
		{
			player->shared.direction = D_UP;
    cd84:	f6 01       	movw	r30, r12
    cd86:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    cd88:	b6 01       	movw	r22, r12
    cd8a:	c6 01       	movw	r24, r12
    cd8c:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cd90:	9b 01       	movw	r18, r22
    cd92:	ac 01       	movw	r20, r24
    cd94:	f6 01       	movw	r30, r12
    cd96:	67 81       	ldd	r22, Z+7	; 0x07
    cd98:	70 85       	ldd	r23, Z+8	; 0x08
    cd9a:	81 85       	ldd	r24, Z+9	; 0x09
    cd9c:	92 85       	ldd	r25, Z+10	; 0x0a
    cd9e:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    cda2:	25 c0       	rjmp	.+74     	; 0xcdee <update_player+0x116>
		}
		else if ((p->held & BTN_RIGHT))
    cda4:	87 ff       	sbrs	r24, 7
    cda6:	11 c0       	rjmp	.+34     	; 0xcdca <update_player+0xf2>
		{
			player->shared.direction = D_RIGHT;
    cda8:	81 e0       	ldi	r24, 0x01	; 1
    cdaa:	f6 01       	movw	r30, r12
    cdac:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    cdae:	b6 01       	movw	r22, r12
    cdb0:	c6 01       	movw	r24, r12
    cdb2:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cdb6:	9b 01       	movw	r18, r22
    cdb8:	ac 01       	movw	r20, r24
    cdba:	f6 01       	movw	r30, r12
    cdbc:	63 81       	ldd	r22, Z+3	; 0x03
    cdbe:	74 81       	ldd	r23, Z+4	; 0x04
    cdc0:	85 81       	ldd	r24, Z+5	; 0x05
    cdc2:	96 81       	ldd	r25, Z+6	; 0x06
    cdc4:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    cdc8:	2a c0       	rjmp	.+84     	; 0xce1e <update_player+0x146>
		}
		else if ((p->held & BTN_DOWN))
    cdca:	85 ff       	sbrs	r24, 5
    cdcc:	16 c0       	rjmp	.+44     	; 0xcdfa <update_player+0x122>
		{
			player->shared.direction = D_DOWN;
    cdce:	82 e0       	ldi	r24, 0x02	; 2
    cdd0:	f6 01       	movw	r30, r12
    cdd2:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    cdd4:	b6 01       	movw	r22, r12
    cdd6:	c6 01       	movw	r24, r12
    cdd8:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cddc:	9b 01       	movw	r18, r22
    cdde:	ac 01       	movw	r20, r24
    cde0:	f6 01       	movw	r30, r12
    cde2:	67 81       	ldd	r22, Z+7	; 0x07
    cde4:	70 85       	ldd	r23, Z+8	; 0x08
    cde6:	81 85       	ldd	r24, Z+9	; 0x09
    cde8:	92 85       	ldd	r25, Z+10	; 0x0a
    cdea:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    cdee:	f6 01       	movw	r30, r12
    cdf0:	67 83       	std	Z+7, r22	; 0x07
    cdf2:	70 87       	std	Z+8, r23	; 0x08
    cdf4:	81 87       	std	Z+9, r24	; 0x09
    cdf6:	92 87       	std	Z+10, r25	; 0x0a
    cdf8:	1a c0       	rjmp	.+52     	; 0xce2e <update_player+0x156>
		}
		else if ((p->held & BTN_LEFT))
    cdfa:	86 ff       	sbrs	r24, 6
    cdfc:	16 c0       	rjmp	.+44     	; 0xce2a <update_player+0x152>
		{
			player->shared.direction = D_LEFT;
    cdfe:	83 e0       	ldi	r24, 0x03	; 3
    ce00:	f6 01       	movw	r30, r12
    ce02:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    ce04:	b6 01       	movw	r22, r12
    ce06:	c6 01       	movw	r24, r12
    ce08:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    ce0c:	9b 01       	movw	r18, r22
    ce0e:	ac 01       	movw	r20, r24
    ce10:	f6 01       	movw	r30, r12
    ce12:	63 81       	ldd	r22, Z+3	; 0x03
    ce14:	74 81       	ldd	r23, Z+4	; 0x04
    ce16:	85 81       	ldd	r24, Z+5	; 0x05
    ce18:	96 81       	ldd	r25, Z+6	; 0x06
    ce1a:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    ce1e:	f6 01       	movw	r30, r12
    ce20:	63 83       	std	Z+3, r22	; 0x03
    ce22:	74 83       	std	Z+4, r23	; 0x04
    ce24:	85 83       	std	Z+5, r24	; 0x05
    ce26:	96 83       	std	Z+6, r25	; 0x06
    ce28:	02 c0       	rjmp	.+4      	; 0xce2e <update_player+0x156>
		}
		else
		{
			player->shared.speed = 0;
    ce2a:	f6 01       	movw	r30, r12
    ce2c:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    ce2e:	c8 01       	movw	r24, r16
    ce30:	0e 94 6f 58 	call	0xb0de	; 0xb0de <shoot_pressed>
    ce34:	88 23       	and	r24, r24
    ce36:	09 f4       	brne	.+2      	; 0xce3a <update_player+0x162>
    ce38:	4b c0       	rjmp	.+150    	; 0xced0 <update_player+0x1f8>
    ce3a:	f6 01       	movw	r30, r12
    ce3c:	81 89       	ldd	r24, Z+17	; 0x11
    ce3e:	81 11       	cpse	r24, r1
    ce40:	47 c0       	rjmp	.+142    	; 0xced0 <update_player+0x1f8>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    ce42:	82 ad       	ldd	r24, Z+58	; 0x3a
    ce44:	81 11       	cpse	r24, r1
    ce46:	44 c0       	rjmp	.+136    	; 0xced0 <update_player+0x1f8>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    ce48:	76 01       	movw	r14, r12
    ce4a:	fc e2       	ldi	r31, 0x2C	; 44
    ce4c:	ef 0e       	add	r14, r31
    ce4e:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    ce50:	f6 01       	movw	r30, r12
    ce52:	81 8d       	ldd	r24, Z+25	; 0x19
    ce54:	88 23       	and	r24, r24
    ce56:	a1 f0       	breq	.+40     	; 0xce80 <update_player+0x1a8>
					{
						init_shot_state(shot, ROCKET_SHOT);
    ce58:	61 e0       	ldi	r22, 0x01	; 1
    ce5a:	c7 01       	movw	r24, r14
    ce5c:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    ce60:	61 e0       	ldi	r22, 0x01	; 1
    ce62:	c7 01       	movw	r24, r14
    ce64:	0e 94 b2 55 	call	0xab64	; 0xab64 <set_shot_animations>
						SFX_ROCKET;
    ce68:	80 91 4d 0c 	lds	r24, 0x0C4D
    ce6c:	80 fd       	sbrc	r24, 0
    ce6e:	1e c0       	rjmp	.+60     	; 0xceac <update_player+0x1d4>
    ce70:	80 91 bb 0f 	lds	r24, 0x0FBB
    ce74:	80 fd       	sbrc	r24, 0
    ce76:	1a c0       	rjmp	.+52     	; 0xceac <update_player+0x1d4>
    ce78:	2f ef       	ldi	r18, 0xFF	; 255
    ce7a:	47 e1       	ldi	r20, 0x17	; 23
    ce7c:	66 e0       	ldi	r22, 0x06	; 6
    ce7e:	13 c0       	rjmp	.+38     	; 0xcea6 <update_player+0x1ce>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    ce80:	60 e0       	ldi	r22, 0x00	; 0
    ce82:	c7 01       	movw	r24, r14
    ce84:	0e 94 95 55 	call	0xab2a	; 0xab2a <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    ce88:	60 e0       	ldi	r22, 0x00	; 0
    ce8a:	c7 01       	movw	r24, r14
    ce8c:	0e 94 b2 55 	call	0xab64	; 0xab64 <set_shot_animations>
						SFX_CANNONBALL;
    ce90:	80 91 4d 0c 	lds	r24, 0x0C4D
    ce94:	80 fd       	sbrc	r24, 0
    ce96:	0a c0       	rjmp	.+20     	; 0xceac <update_player+0x1d4>
    ce98:	80 91 bb 0f 	lds	r24, 0x0FBB
    ce9c:	80 fd       	sbrc	r24, 0
    ce9e:	06 c0       	rjmp	.+12     	; 0xceac <update_player+0x1d4>
    cea0:	2f ef       	ldi	r18, 0xFF	; 255
    cea2:	47 e1       	ldi	r20, 0x17	; 23
    cea4:	62 e0       	ldi	r22, 0x02	; 2
    cea6:	84 e0       	ldi	r24, 0x04	; 4
    cea8:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
					}
					player->active_shots++;
    ceac:	f6 01       	movw	r30, r12
    ceae:	81 89       	ldd	r24, Z+17	; 0x11
    ceb0:	8f 5f       	subi	r24, 0xFF	; 255
    ceb2:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    ceb4:	80 81       	ld	r24, Z
    ceb6:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    ceb8:	b7 01       	movw	r22, r14
    ceba:	c6 01       	movw	r24, r12
    cebc:	0e 94 66 57 	call	0xaecc	; 0xaecc <position_shot>
					shot->active = 1;
    cec0:	81 e0       	ldi	r24, 0x01	; 1
    cec2:	f6 01       	movw	r30, r12
    cec4:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    cec6:	82 8d       	ldd	r24, Z+26	; 0x1a
    cec8:	88 23       	and	r24, r24
    ceca:	11 f0       	breq	.+4      	; 0xced0 <update_player+0x1f8>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    cecc:	8a ea       	ldi	r24, 0xAA	; 170
    cece:	85 a7       	std	Z+45, r24	; 0x2d
				}
			}
		}
	}
	
	if (!game.paused)
    ced0:	80 91 11 0c 	lds	r24, 0x0C11
    ced4:	81 11       	cpse	r24, r1
    ced6:	86 c0       	rjmp	.+268    	; 0xcfe4 <update_player+0x30c>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    ced8:	86 01       	movw	r16, r12
    ceda:	04 5d       	subi	r16, 0xD4	; 212
    cedc:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    cede:	f6 01       	movw	r30, r12
    cee0:	82 ad       	ldd	r24, Z+58	; 0x3a
    cee2:	88 23       	and	r24, r24
    cee4:	09 f4       	brne	.+2      	; 0xcee8 <update_player+0x210>
    cee6:	97 c0       	rjmp	.+302    	; 0xd016 <update_player+0x33e>
			{
				switch (shot->shared.direction)
    cee8:	84 a5       	ldd	r24, Z+44	; 0x2c
    ceea:	81 30       	cpi	r24, 0x01	; 1
    ceec:	11 f1       	breq	.+68     	; 0xcf32 <update_player+0x25a>
    ceee:	98 f0       	brcs	.+38     	; 0xcf16 <update_player+0x23e>
    cef0:	82 30       	cpi	r24, 0x02	; 2
    cef2:	69 f1       	breq	.+90     	; 0xcf4e <update_player+0x276>
    cef4:	83 30       	cpi	r24, 0x03	; 3
    cef6:	09 f0       	breq	.+2      	; 0xcefa <update_player+0x222>
    cef8:	42 c0       	rjmp	.+132    	; 0xcf7e <update_player+0x2a6>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    cefa:	b8 01       	movw	r22, r16
    cefc:	c6 01       	movw	r24, r12
    cefe:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cf02:	9b 01       	movw	r18, r22
    cf04:	ac 01       	movw	r20, r24
    cf06:	f6 01       	movw	r30, r12
    cf08:	67 a5       	ldd	r22, Z+47	; 0x2f
    cf0a:	70 a9       	ldd	r23, Z+48	; 0x30
    cf0c:	81 a9       	ldd	r24, Z+49	; 0x31
    cf0e:	92 a9       	ldd	r25, Z+50	; 0x32
    cf10:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    cf14:	2f c0       	rjmp	.+94     	; 0xcf74 <update_player+0x29c>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    cf16:	b8 01       	movw	r22, r16
    cf18:	c6 01       	movw	r24, r12
    cf1a:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cf1e:	9b 01       	movw	r18, r22
    cf20:	ac 01       	movw	r20, r24
    cf22:	f6 01       	movw	r30, r12
    cf24:	63 a9       	ldd	r22, Z+51	; 0x33
    cf26:	74 a9       	ldd	r23, Z+52	; 0x34
    cf28:	85 a9       	ldd	r24, Z+53	; 0x35
    cf2a:	96 a9       	ldd	r25, Z+54	; 0x36
    cf2c:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    cf30:	1b c0       	rjmp	.+54     	; 0xcf68 <update_player+0x290>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    cf32:	b8 01       	movw	r22, r16
    cf34:	c6 01       	movw	r24, r12
    cf36:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cf3a:	9b 01       	movw	r18, r22
    cf3c:	ac 01       	movw	r20, r24
    cf3e:	f6 01       	movw	r30, r12
    cf40:	67 a5       	ldd	r22, Z+47	; 0x2f
    cf42:	70 a9       	ldd	r23, Z+48	; 0x30
    cf44:	81 a9       	ldd	r24, Z+49	; 0x31
    cf46:	92 a9       	ldd	r25, Z+50	; 0x32
    cf48:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    cf4c:	13 c0       	rjmp	.+38     	; 0xcf74 <update_player+0x29c>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    cf4e:	b8 01       	movw	r22, r16
    cf50:	c6 01       	movw	r24, r12
    cf52:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cf56:	9b 01       	movw	r18, r22
    cf58:	ac 01       	movw	r20, r24
    cf5a:	f6 01       	movw	r30, r12
    cf5c:	63 a9       	ldd	r22, Z+51	; 0x33
    cf5e:	74 a9       	ldd	r23, Z+52	; 0x34
    cf60:	85 a9       	ldd	r24, Z+53	; 0x35
    cf62:	96 a9       	ldd	r25, Z+54	; 0x36
    cf64:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    cf68:	f6 01       	movw	r30, r12
    cf6a:	63 ab       	std	Z+51, r22	; 0x33
    cf6c:	74 ab       	std	Z+52, r23	; 0x34
    cf6e:	85 ab       	std	Z+53, r24	; 0x35
    cf70:	96 ab       	std	Z+54, r25	; 0x36
    cf72:	05 c0       	rjmp	.+10     	; 0xcf7e <update_player+0x2a6>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    cf74:	f6 01       	movw	r30, r12
    cf76:	67 a7       	std	Z+47, r22	; 0x2f
    cf78:	70 ab       	std	Z+48, r23	; 0x30
    cf7a:	81 ab       	std	Z+49, r24	; 0x31
    cf7c:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    cf7e:	f6 01       	movw	r30, r12
    cf80:	f3 ac       	ldd	r15, Z+59	; 0x3b
    cf82:	f8 e0       	ldi	r31, 0x08	; 8
    cf84:	ff 15       	cp	r31, r15
    cf86:	38 f0       	brcs	.+14     	; 0xcf96 <update_player+0x2be>
    cf88:	b8 01       	movw	r22, r16
    cf8a:	c6 01       	movw	r24, r12
    cf8c:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <get_delta>
    cf90:	9b 01       	movw	r18, r22
    cf92:	ac 01       	movw	r20, r24
    cf94:	03 c0       	rjmp	.+6      	; 0xcf9c <update_player+0x2c4>
    cf96:	20 e0       	ldi	r18, 0x00	; 0
    cf98:	30 e0       	ldi	r19, 0x00	; 0
    cf9a:	a9 01       	movw	r20, r18
    cf9c:	6f 2d       	mov	r22, r15
    cf9e:	70 e0       	ldi	r23, 0x00	; 0
    cfa0:	80 e0       	ldi	r24, 0x00	; 0
    cfa2:	90 e0       	ldi	r25, 0x00	; 0
    cfa4:	29 83       	std	Y+1, r18	; 0x01
    cfa6:	3a 83       	std	Y+2, r19	; 0x02
    cfa8:	4b 83       	std	Y+3, r20	; 0x03
    cfaa:	5c 83       	std	Y+4, r21	; 0x04
    cfac:	0e 94 64 73 	call	0xe6c8	; 0xe6c8 <__floatsisf>
    cfb0:	29 81       	ldd	r18, Y+1	; 0x01
    cfb2:	3a 81       	ldd	r19, Y+2	; 0x02
    cfb4:	4b 81       	ldd	r20, Y+3	; 0x03
    cfb6:	5c 81       	ldd	r21, Y+4	; 0x04
    cfb8:	0e 94 61 72 	call	0xe4c2	; 0xe4c2 <__addsf3>
    cfbc:	0e 94 36 73 	call	0xe66c	; 0xe66c <__fixunssfsi>
    cfc0:	f6 01       	movw	r30, r12
    cfc2:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    cfc4:	b8 01       	movw	r22, r16
    cfc6:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    cfc8:	0f 90       	pop	r0
    cfca:	0f 90       	pop	r0
    cfcc:	0f 90       	pop	r0
    cfce:	0f 90       	pop	r0
    cfd0:	df 91       	pop	r29
    cfd2:	cf 91       	pop	r28
    cfd4:	1f 91       	pop	r17
    cfd6:	0f 91       	pop	r16
    cfd8:	ff 90       	pop	r15
    cfda:	ef 90       	pop	r14
    cfdc:	df 90       	pop	r13
    cfde:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    cfe0:	0c 94 ac 5d 	jmp	0xbb58	; 0xbb58 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    cfe4:	f8 01       	movw	r30, r16
    cfe6:	80 81       	ld	r24, Z
    cfe8:	91 81       	ldd	r25, Z+1	; 0x01
    cfea:	91 ff       	sbrs	r25, 1
    cfec:	14 c0       	rjmp	.+40     	; 0xd016 <update_player+0x33e>
		{
			SFX_NAVIGATE;
    cfee:	2f ef       	ldi	r18, 0xFF	; 255
    cff0:	47 e1       	ldi	r20, 0x17	; 23
    cff2:	65 e0       	ldi	r22, 0x05	; 5
    cff4:	84 e0       	ldi	r24, 0x04	; 4
    cff6:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
			exit_game();
		}
	}
}
    cffa:	0f 90       	pop	r0
    cffc:	0f 90       	pop	r0
    cffe:	0f 90       	pop	r0
    d000:	0f 90       	pop	r0
    d002:	df 91       	pop	r29
    d004:	cf 91       	pop	r28
    d006:	1f 91       	pop	r17
    d008:	0f 91       	pop	r16
    d00a:	ff 90       	pop	r15
    d00c:	ef 90       	pop	r14
    d00e:	df 90       	pop	r13
    d010:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d012:	0c 94 61 66 	jmp	0xccc2	; 0xccc2 <exit_game>
		}
	}
}
    d016:	0f 90       	pop	r0
    d018:	0f 90       	pop	r0
    d01a:	0f 90       	pop	r0
    d01c:	0f 90       	pop	r0
    d01e:	df 91       	pop	r29
    d020:	cf 91       	pop	r28
    d022:	1f 91       	pop	r17
    d024:	0f 91       	pop	r16
    d026:	ff 90       	pop	r15
    d028:	ef 90       	pop	r14
    d02a:	df 90       	pop	r13
    d02c:	cf 90       	pop	r12
    d02e:	08 95       	ret

0000d030 <resolve_scoring>:

void resolve_scoring()
{
    d030:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    d032:	c0 91 10 0c 	lds	r28, 0x0C10
    d036:	80 91 49 0c 	lds	r24, 0x0C49
    d03a:	ca 30       	cpi	r28, 0x0A	; 10
    d03c:	90 f5       	brcc	.+100    	; 0xd0a2 <resolve_scoring+0x72>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    d03e:	8a 30       	cpi	r24, 0x0A	; 10
    d040:	78 f0       	brcs	.+30     	; 0xd060 <resolve_scoring+0x30>
    d042:	80 91 bb 0f 	lds	r24, 0x0FBB
    d046:	80 fd       	sbrc	r24, 0
    d048:	0b c0       	rjmp	.+22     	; 0xd060 <resolve_scoring+0x30>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d04a:	81 e0       	ldi	r24, 0x01	; 1
    d04c:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <load_level_tiles>
			SetSpriteVisibility(false);
    d050:	80 e0       	ldi	r24, 0x00	; 0
    d052:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
			print_level_score(&player1, &player2);
    d056:	67 ea       	ldi	r22, 0xA7	; 167
    d058:	7f e0       	ldi	r23, 0x0F	; 15
    d05a:	89 e3       	ldi	r24, 0x39	; 57
    d05c:	9c e0       	ldi	r25, 0x0C	; 12
    d05e:	13 c0       	rjmp	.+38     	; 0xd086 <resolve_scoring+0x56>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    d060:	80 91 b7 0f 	lds	r24, 0x0FB7
    d064:	8a 30       	cpi	r24, 0x0A	; 10
    d066:	08 f4       	brcc	.+2      	; 0xd06a <resolve_scoring+0x3a>
    d068:	a9 c0       	rjmp	.+338    	; 0xd1bc <resolve_scoring+0x18c>
    d06a:	80 91 4d 0c 	lds	r24, 0x0C4D
    d06e:	80 fd       	sbrc	r24, 0
    d070:	a5 c0       	rjmp	.+330    	; 0xd1bc <resolve_scoring+0x18c>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d072:	81 e0       	ldi	r24, 0x01	; 1
    d074:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <load_level_tiles>
			SetSpriteVisibility(false);
    d078:	80 e0       	ldi	r24, 0x00	; 0
    d07a:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
			print_level_score(&player2, &player1);
    d07e:	69 e3       	ldi	r22, 0x39	; 57
    d080:	7c e0       	ldi	r23, 0x0C	; 12
    d082:	87 ea       	ldi	r24, 0xA7	; 167
    d084:	9f e0       	ldi	r25, 0x0F	; 15
    d086:	0e 94 d3 57 	call	0xafa6	; 0xafa6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d08a:	84 e0       	ldi	r24, 0x04	; 4
    d08c:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <LBWaitSeconds>
			player1.level_score = 0;
    d090:	10 92 49 0c 	sts	0x0C49, r1
			player2.level_score = 0;
    d094:	10 92 b7 0f 	sts	0x0FB7, r1
			level_transition(next_level);
    d098:	81 e0       	ldi	r24, 0x01	; 1
    d09a:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    d09c:	cf 91       	pop	r28
			SetSpriteVisibility(false);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    d09e:	0c 94 9b 63 	jmp	0xc736	; 0xc736 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    d0a2:	8a 30       	cpi	r24, 0x0A	; 10
    d0a4:	28 f4       	brcc	.+10     	; 0xd0b0 <resolve_scoring+0x80>
    d0a6:	80 91 b7 0f 	lds	r24, 0x0FB7
    d0aa:	8a 30       	cpi	r24, 0x0A	; 10
    d0ac:	08 f4       	brcc	.+2      	; 0xd0b0 <resolve_scoring+0x80>
    d0ae:	86 c0       	rjmp	.+268    	; 0xd1bc <resolve_scoring+0x18c>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    d0b0:	90 91 48 0c 	lds	r25, 0x0C48
    d0b4:	80 91 b6 0f 	lds	r24, 0x0FB6
    d0b8:	98 17       	cp	r25, r24
    d0ba:	09 f4       	brne	.+2      	; 0xd0be <resolve_scoring+0x8e>
    d0bc:	7f c0       	rjmp	.+254    	; 0xd1bc <resolve_scoring+0x18c>
			
			if (game.boss_fight_status == 0)
    d0be:	20 91 12 0c 	lds	r18, 0x0C12
    d0c2:	21 11       	cpse	r18, r1
    d0c4:	46 c0       	rjmp	.+140    	; 0xd152 <resolve_scoring+0x122>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    d0c6:	c1 e0       	ldi	r28, 0x01	; 1
    d0c8:	c0 93 12 0c 	sts	0x0C12, r28
				if (player1.score > player2.score)
    d0cc:	89 17       	cp	r24, r25
    d0ce:	e8 f4       	brcc	.+58     	; 0xd10a <resolve_scoring+0xda>
				{
					game.boss_fight_player = &player1;
    d0d0:	89 e3       	ldi	r24, 0x39	; 57
    d0d2:	9c e0       	ldi	r25, 0x0C	; 12
    d0d4:	90 93 16 0c 	sts	0x0C16, r25
    d0d8:	80 93 15 0c 	sts	0x0C15, r24
					game.boss_fight_joypad = &p1;
    d0dc:	81 eb       	ldi	r24, 0xB1	; 177
    d0de:	9c e0       	ldi	r25, 0x0C	; 12
    d0e0:	90 93 18 0c 	sts	0x0C18, r25
    d0e4:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_player_hud = 0;
    d0e8:	10 92 13 0c 	sts	0x0C13, r1
					kill_player(&player2, 15);
    d0ec:	6f e0       	ldi	r22, 0x0F	; 15
    d0ee:	87 ea       	ldi	r24, 0xA7	; 167
    d0f0:	9f e0       	ldi	r25, 0x0F	; 15
    d0f2:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <kill_player>
					player_spawn(&player2);
    d0f6:	87 ea       	ldi	r24, 0xA7	; 167
    d0f8:	9f e0       	ldi	r25, 0x0F	; 15
    d0fa:	0e 94 af 56 	call	0xad5e	; 0xad5e <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    d0fe:	80 91 bb 0f 	lds	r24, 0x0FBB
    d102:	c8 27       	eor	r28, r24
    d104:	c0 93 bb 0f 	sts	0x0FBB, r28
    d108:	1d c0       	rjmp	.+58     	; 0xd144 <resolve_scoring+0x114>
				}
				else
				{
					game.boss_fight_player = &player2;
    d10a:	87 ea       	ldi	r24, 0xA7	; 167
    d10c:	9f e0       	ldi	r25, 0x0F	; 15
    d10e:	90 93 16 0c 	sts	0x0C16, r25
    d112:	80 93 15 0c 	sts	0x0C15, r24
					game.boss_fight_joypad = &p2;
    d116:	88 ee       	ldi	r24, 0xE8	; 232
    d118:	9b e0       	ldi	r25, 0x0B	; 11
    d11a:	90 93 18 0c 	sts	0x0C18, r25
    d11e:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_player_hud = 15;
    d122:	8f e0       	ldi	r24, 0x0F	; 15
    d124:	80 93 13 0c 	sts	0x0C13, r24
					kill_player(&player1, 0);
    d128:	60 e0       	ldi	r22, 0x00	; 0
    d12a:	89 e3       	ldi	r24, 0x39	; 57
    d12c:	9c e0       	ldi	r25, 0x0C	; 12
    d12e:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <kill_player>
					player_spawn(&player1);
    d132:	89 e3       	ldi	r24, 0x39	; 57
    d134:	9c e0       	ldi	r25, 0x0C	; 12
    d136:	0e 94 af 56 	call	0xad5e	; 0xad5e <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    d13a:	80 91 4d 0c 	lds	r24, 0x0C4D
    d13e:	c8 27       	eor	r28, r24
    d140:	c0 93 4d 0c 	sts	0x0C4D, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    d144:	85 ea       	ldi	r24, 0xA5	; 165
    d146:	90 e0       	ldi	r25, 0x00	; 0
    d148:	90 93 3a 10 	sts	0x103A, r25
    d14c:	80 93 39 10 	sts	0x1039, r24
				return;
    d150:	35 c0       	rjmp	.+106    	; 0xd1bc <resolve_scoring+0x18c>
			}
			
			// Print level score
			load_level_tiles(true);
    d152:	81 e0       	ldi	r24, 0x01	; 1
    d154:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <load_level_tiles>
			SetSpriteVisibility(false);
    d158:	80 e0       	ldi	r24, 0x00	; 0
    d15a:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
			if (player1.level_score > player2.level_score)
    d15e:	90 91 49 0c 	lds	r25, 0x0C49
    d162:	80 91 b7 0f 	lds	r24, 0x0FB7
    d166:	89 17       	cp	r24, r25
    d168:	28 f4       	brcc	.+10     	; 0xd174 <resolve_scoring+0x144>
				print_level_score(&player1, &player2);
    d16a:	67 ea       	ldi	r22, 0xA7	; 167
    d16c:	7f e0       	ldi	r23, 0x0F	; 15
    d16e:	89 e3       	ldi	r24, 0x39	; 57
    d170:	9c e0       	ldi	r25, 0x0C	; 12
    d172:	04 c0       	rjmp	.+8      	; 0xd17c <resolve_scoring+0x14c>
			else
				print_level_score(&player2, &player1);
    d174:	69 e3       	ldi	r22, 0x39	; 57
    d176:	7c e0       	ldi	r23, 0x0C	; 12
    d178:	87 ea       	ldi	r24, 0xA7	; 167
    d17a:	9f e0       	ldi	r25, 0x0F	; 15
    d17c:	0e 94 d3 57 	call	0xafa6	; 0xafa6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d180:	84 e0       	ldi	r24, 0x04	; 4
    d182:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <LBWaitSeconds>
			player1.level_score = 0;
    d186:	10 92 49 0c 	sts	0x0C49, r1
			player2.level_score = 0;
    d18a:	10 92 b7 0f 	sts	0x0FB7, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    d18e:	90 91 48 0c 	lds	r25, 0x0C48
    d192:	80 91 b6 0f 	lds	r24, 0x0FB6
    d196:	89 17       	cp	r24, r25
    d198:	28 f4       	brcc	.+10     	; 0xd1a4 <resolve_scoring+0x174>
				print_final_score(&player1, &player2);
    d19a:	67 ea       	ldi	r22, 0xA7	; 167
    d19c:	7f e0       	ldi	r23, 0x0F	; 15
    d19e:	89 e3       	ldi	r24, 0x39	; 57
    d1a0:	9c e0       	ldi	r25, 0x0C	; 12
    d1a2:	04 c0       	rjmp	.+8      	; 0xd1ac <resolve_scoring+0x17c>
			else
				print_final_score(&player2, &player1);
    d1a4:	69 e3       	ldi	r22, 0x39	; 57
    d1a6:	7c e0       	ldi	r23, 0x0C	; 12
    d1a8:	87 ea       	ldi	r24, 0xA7	; 167
    d1aa:	9f e0       	ldi	r25, 0x0F	; 15
    d1ac:	0e 94 15 58 	call	0xb02a	; 0xb02a <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    d1b0:	84 e0       	ldi	r24, 0x04	; 4
    d1b2:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <LBWaitSeconds>
			exit_game();
		}
	}
}
    d1b6:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    d1b8:	0c 94 61 66 	jmp	0xccc2	; 0xccc2 <exit_game>
		}
	}
}
    d1bc:	cf 91       	pop	r28
    d1be:	08 95       	ret

0000d1c0 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d1c0:	df 92       	push	r13
    d1c2:	ef 92       	push	r14
    d1c4:	ff 92       	push	r15
    d1c6:	0f 93       	push	r16
    d1c8:	1f 93       	push	r17
    d1ca:	cf 93       	push	r28
    d1cc:	df 93       	push	r29
    d1ce:	8c 01       	movw	r16, r24
    d1d0:	eb 01       	movw	r28, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    d1d2:	80 91 11 0c 	lds	r24, 0x0C11
    d1d6:	88 23       	and	r24, r24
    d1d8:	21 f1       	breq	.+72     	; 0xd222 <update_level+0x62>
	{
		// Render
		SetSpriteVisibility(false);
    d1da:	80 e0       	ldi	r24, 0x00	; 0
    d1dc:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    d1e0:	41 e2       	ldi	r20, 0x21	; 33
    d1e2:	5e e7       	ldi	r21, 0x7E	; 126
    d1e4:	6c e0       	ldi	r22, 0x0C	; 12
    d1e6:	88 e0       	ldi	r24, 0x08	; 8
    d1e8:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
		Print(12, 13, (char*) strPaused);
    d1ec:	44 ed       	ldi	r20, 0xD4	; 212
    d1ee:	51 e0       	ldi	r21, 0x01	; 1
    d1f0:	6d e0       	ldi	r22, 0x0D	; 13
    d1f2:	70 e0       	ldi	r23, 0x00	; 0
    d1f4:	8c e0       	ldi	r24, 0x0C	; 12
    d1f6:	90 e0       	ldi	r25, 0x00	; 0
    d1f8:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
		Print(11, 14, (char*) strExit);
    d1fc:	4b ed       	ldi	r20, 0xDB	; 219
    d1fe:	51 e0       	ldi	r21, 0x01	; 1
    d200:	6e e0       	ldi	r22, 0x0E	; 14
    d202:	70 e0       	ldi	r23, 0x00	; 0
    d204:	8b e0       	ldi	r24, 0x0B	; 11
    d206:	90 e0       	ldi	r25, 0x00	; 0
    d208:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
		
		// Update
		update_player(p1, &player1);
    d20c:	69 e3       	ldi	r22, 0x39	; 57
    d20e:	7c e0       	ldi	r23, 0x0C	; 12
    d210:	c8 01       	movw	r24, r16
    d212:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
		update_player(p2, &player2);
    d216:	67 ea       	ldi	r22, 0xA7	; 167
    d218:	7f e0       	ldi	r23, 0x0F	; 15
    d21a:	ce 01       	movw	r24, r28
    d21c:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
    d220:	e7 c1       	rjmp	.+974    	; 0xd5f0 <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d222:	90 91 12 0c 	lds	r25, 0x0C12
    d226:	91 30       	cpi	r25, 0x01	; 1
    d228:	31 f4       	brne	.+12     	; 0xd236 <update_level+0x76>
	{
		// Render
		SetSpriteVisibility(true);
    d22a:	81 e0       	ldi	r24, 0x01	; 1
    d22c:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		render_boss_fight_scope_load();
    d230:	0e 94 cb 63 	call	0xc796	; 0xc796 <render_boss_fight_scope_load>
    d234:	08 c0       	rjmp	.+16     	; 0xd246 <update_level+0x86>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d236:	92 30       	cpi	r25, 0x02	; 2
    d238:	09 f0       	breq	.+2      	; 0xd23c <update_level+0x7c>
    d23a:	51 c0       	rjmp	.+162    	; 0xd2de <update_level+0x11e>
	{
		// Render
		SetSpriteVisibility(true);
    d23c:	81 e0       	ldi	r24, 0x01	; 1
    d23e:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		render_boss_fight_sub_load();
    d242:	0e 94 da 63 	call	0xc7b4	; 0xc7b4 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d246:	60 e0       	ldi	r22, 0x00	; 0
    d248:	80 91 15 0c 	lds	r24, 0x0C15
    d24c:	90 91 16 0c 	lds	r25, 0x0C16
    d250:	0e 94 9f 59 	call	0xb33e	; 0xb33e <tank_map>
    d254:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d256:	40 e0       	ldi	r20, 0x00	; 0
    d258:	64 e5       	ldi	r22, 0x54	; 84
    d25a:	74 e4       	ldi	r23, 0x44	; 68
    d25c:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d260:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d262:	6c 2f       	mov	r22, r28
    d264:	80 91 15 0c 	lds	r24, 0x0C15
    d268:	90 91 16 0c 	lds	r25, 0x0C16
    d26c:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
    d270:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d272:	40 e0       	ldi	r20, 0x00	; 0
    d274:	6a e5       	ldi	r22, 0x5A	; 90
    d276:	74 e4       	ldi	r23, 0x44	; 68
    d278:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d27c:	6c 2f       	mov	r22, r28
    d27e:	80 91 15 0c 	lds	r24, 0x0C15
    d282:	90 91 16 0c 	lds	r25, 0x0C16
    d286:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d28a:	60 e0       	ldi	r22, 0x00	; 0
    d28c:	80 91 15 0c 	lds	r24, 0x0C15
    d290:	90 91 16 0c 	lds	r25, 0x0C16
    d294:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d298:	6c 2f       	mov	r22, r28
    d29a:	80 91 15 0c 	lds	r24, 0x0C15
    d29e:	90 91 16 0c 	lds	r25, 0x0C16
    d2a2:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_shot(&player2, p2_shot_index);
    d2a6:	6d 2f       	mov	r22, r29
    d2a8:	87 ea       	ldi	r24, 0xA7	; 167
    d2aa:	9f e0       	ldi	r25, 0x0F	; 15
    d2ac:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_tile_explosions(&tile_animations);
    d2b0:	8c e1       	ldi	r24, 0x1C	; 28
    d2b2:	9c e0       	ldi	r25, 0x0C	; 12
    d2b4:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d2b8:	60 91 15 0c 	lds	r22, 0x0C15
    d2bc:	70 91 16 0c 	lds	r23, 0x0C16
    d2c0:	80 91 17 0c 	lds	r24, 0x0C17
    d2c4:	90 91 18 0c 	lds	r25, 0x0C18
    d2c8:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d2cc:	60 91 13 0c 	lds	r22, 0x0C13
    d2d0:	80 91 15 0c 	lds	r24, 0x0C15
    d2d4:	90 91 16 0c 	lds	r25, 0x0C16
    d2d8:	0e 94 d4 60 	call	0xc1a8	; 0xc1a8 <collision_detect_player>
    d2dc:	89 c1       	rjmp	.+786    	; 0xd5f0 <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d2de:	94 30       	cpi	r25, 0x04	; 4
    d2e0:	09 f0       	breq	.+2      	; 0xd2e4 <update_level+0x124>
    d2e2:	97 c0       	rjmp	.+302    	; 0xd412 <update_level+0x252>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d2e4:	80 91 7a 10 	lds	r24, 0x107A
    d2e8:	81 11       	cpse	r24, r1
    d2ea:	07 c0       	rjmp	.+14     	; 0xd2fa <update_level+0x13a>
    d2ec:	80 91 46 10 	lds	r24, 0x1046
    d2f0:	81 11       	cpse	r24, r1
    d2f2:	03 c0       	rjmp	.+6      	; 0xd2fa <update_level+0x13a>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d2f4:	80 e2       	ldi	r24, 0x20	; 32
    d2f6:	80 93 12 0c 	sts	0x0C12, r24
		}
		
		// Render
		SetSpriteVisibility(true);
    d2fa:	81 e0       	ldi	r24, 0x01	; 1
    d2fc:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d300:	60 e0       	ldi	r22, 0x00	; 0
    d302:	80 91 15 0c 	lds	r24, 0x0C15
    d306:	90 91 16 0c 	lds	r25, 0x0C16
    d30a:	0e 94 9f 59 	call	0xb33e	; 0xb33e <tank_map>
    d30e:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d310:	68 2f       	mov	r22, r24
    d312:	80 91 15 0c 	lds	r24, 0x0C15
    d316:	90 91 16 0c 	lds	r25, 0x0C16
    d31a:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
    d31e:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d320:	01 e0       	ldi	r16, 0x01	; 1
    d322:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d324:	12 e0       	ldi	r17, 0x02	; 2
    d326:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d328:	d3 e0       	ldi	r29, 0x03	; 3
    d32a:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d32c:	80 91 7a 10 	lds	r24, 0x107A
    d330:	88 23       	and	r24, r24
    d332:	19 f0       	breq	.+6      	; 0xd33a <update_level+0x17a>
	return (char*) map_sub_turret;
    d334:	6c e0       	ldi	r22, 0x0C	; 12
    d336:	74 e4       	ldi	r23, 0x44	; 68
    d338:	02 c0       	rjmp	.+4      	; 0xd33e <update_level+0x17e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d33a:	6a e5       	ldi	r22, 0x5A	; 90
    d33c:	74 e4       	ldi	r23, 0x44	; 68
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d33e:	40 e0       	ldi	r20, 0x00	; 0
    d340:	8c 2f       	mov	r24, r28
    d342:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d346:	80 91 7a 10 	lds	r24, 0x107A
    d34a:	88 23       	and	r24, r24
    d34c:	19 f0       	breq	.+6      	; 0xd354 <update_level+0x194>
	return (char*) map_sub_shot;
    d34e:	6f e0       	ldi	r22, 0x0F	; 15
    d350:	74 e4       	ldi	r23, 0x44	; 68
    d352:	02 c0       	rjmp	.+4      	; 0xd358 <update_level+0x198>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d354:	6a e5       	ldi	r22, 0x5A	; 90
    d356:	74 e4       	ldi	r23, 0x44	; 68
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d358:	40 e0       	ldi	r20, 0x00	; 0
    d35a:	80 2f       	mov	r24, r16
    d35c:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d360:	80 91 46 10 	lds	r24, 0x1046
    d364:	88 23       	and	r24, r24
    d366:	19 f0       	breq	.+6      	; 0xd36e <update_level+0x1ae>
	return (char*) map_sub_turret;
    d368:	6c e0       	ldi	r22, 0x0C	; 12
    d36a:	74 e4       	ldi	r23, 0x44	; 68
    d36c:	02 c0       	rjmp	.+4      	; 0xd372 <update_level+0x1b2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d36e:	6a e5       	ldi	r22, 0x5A	; 90
    d370:	74 e4       	ldi	r23, 0x44	; 68
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d372:	40 e0       	ldi	r20, 0x00	; 0
    d374:	81 2f       	mov	r24, r17
    d376:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d37a:	80 91 46 10 	lds	r24, 0x1046
    d37e:	88 23       	and	r24, r24
    d380:	19 f0       	breq	.+6      	; 0xd388 <update_level+0x1c8>
	return (char*) map_sub_shot;
    d382:	6f e0       	ldi	r22, 0x0F	; 15
    d384:	74 e4       	ldi	r23, 0x44	; 68
    d386:	02 c0       	rjmp	.+4      	; 0xd38c <update_level+0x1cc>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d388:	6a e5       	ldi	r22, 0x5A	; 90
    d38a:	74 e4       	ldi	r23, 0x44	; 68
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d38c:	40 e0       	ldi	r20, 0x00	; 0
    d38e:	8d 2f       	mov	r24, r29
    d390:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d394:	60 e0       	ldi	r22, 0x00	; 0
    d396:	80 91 15 0c 	lds	r24, 0x0C15
    d39a:	90 91 16 0c 	lds	r25, 0x0C16
    d39e:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d3a2:	6f 2d       	mov	r22, r15
    d3a4:	80 91 15 0c 	lds	r24, 0x0C15
    d3a8:	90 91 16 0c 	lds	r25, 0x0C16
    d3ac:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_tile_explosions(&tile_animations);
    d3b0:	8c e1       	ldi	r24, 0x1C	; 28
    d3b2:	9c e0       	ldi	r25, 0x0C	; 12
    d3b4:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d3b8:	6c 2f       	mov	r22, r28
    d3ba:	8f e6       	ldi	r24, 0x6F	; 111
    d3bc:	90 e1       	ldi	r25, 0x10	; 16
    d3be:	0e 94 1c 64 	call	0xc838	; 0xc838 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d3c2:	60 2f       	mov	r22, r16
    d3c4:	8f e6       	ldi	r24, 0x6F	; 111
    d3c6:	90 e1       	ldi	r25, 0x10	; 16
    d3c8:	0e 94 45 64 	call	0xc88a	; 0xc88a <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d3cc:	61 2f       	mov	r22, r17
    d3ce:	8b e3       	ldi	r24, 0x3B	; 59
    d3d0:	90 e1       	ldi	r25, 0x10	; 16
    d3d2:	0e 94 1c 64 	call	0xc838	; 0xc838 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d3d6:	6d 2f       	mov	r22, r29
    d3d8:	8b e3       	ldi	r24, 0x3B	; 59
    d3da:	90 e1       	ldi	r25, 0x10	; 16
    d3dc:	0e 94 45 64 	call	0xc88a	; 0xc88a <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d3e0:	40 e6       	ldi	r20, 0x60	; 96
    d3e2:	68 e2       	ldi	r22, 0x28	; 40
    d3e4:	8f e6       	ldi	r24, 0x6F	; 111
    d3e6:	90 e1       	ldi	r25, 0x10	; 16
    d3e8:	0e 94 6e 64 	call	0xc8dc	; 0xc8dc <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d3ec:	40 ec       	ldi	r20, 0xC0	; 192
    d3ee:	68 e8       	ldi	r22, 0x88	; 136
    d3f0:	8b e3       	ldi	r24, 0x3B	; 59
    d3f2:	90 e1       	ldi	r25, 0x10	; 16
    d3f4:	0e 94 6e 64 	call	0xc8dc	; 0xc8dc <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d3f8:	6b e7       	ldi	r22, 0x7B	; 123
    d3fa:	70 e1       	ldi	r23, 0x10	; 16
    d3fc:	8f e6       	ldi	r24, 0x6F	; 111
    d3fe:	90 e1       	ldi	r25, 0x10	; 16
    d400:	0e 94 05 65 	call	0xca0a	; 0xca0a <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d404:	67 e4       	ldi	r22, 0x47	; 71
    d406:	70 e1       	ldi	r23, 0x10	; 16
    d408:	8b e3       	ldi	r24, 0x3B	; 59
    d40a:	90 e1       	ldi	r25, 0x10	; 16
    d40c:	0e 94 05 65 	call	0xca0a	; 0xca0a <update_turret_shot>
    d410:	53 cf       	rjmp	.-346    	; 0xd2b8 <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d412:	90 32       	cpi	r25, 0x20	; 32
    d414:	09 f0       	breq	.+2      	; 0xd418 <update_level+0x258>
    d416:	58 c0       	rjmp	.+176    	; 0xd4c8 <update_level+0x308>
	{
		// Render
		SetSpriteVisibility(true);
    d418:	81 e0       	ldi	r24, 0x01	; 1
    d41a:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		render_boss_fight_sub_sinking();
    d41e:	0e 94 07 64 	call	0xc80e	; 0xc80e <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d422:	60 e0       	ldi	r22, 0x00	; 0
    d424:	80 91 15 0c 	lds	r24, 0x0C15
    d428:	90 91 16 0c 	lds	r25, 0x0C16
    d42c:	0e 94 9f 59 	call	0xb33e	; 0xb33e <tank_map>
    d430:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d432:	40 e0       	ldi	r20, 0x00	; 0
    d434:	64 e5       	ldi	r22, 0x54	; 84
    d436:	74 e4       	ldi	r23, 0x44	; 68
    d438:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d43c:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d43e:	6c 2f       	mov	r22, r28
    d440:	80 91 15 0c 	lds	r24, 0x0C15
    d444:	90 91 16 0c 	lds	r25, 0x0C16
    d448:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
    d44c:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d44e:	40 e0       	ldi	r20, 0x00	; 0
    d450:	6a e5       	ldi	r22, 0x5A	; 90
    d452:	74 e4       	ldi	r23, 0x44	; 68
    d454:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d458:	6c 2f       	mov	r22, r28
    d45a:	80 91 15 0c 	lds	r24, 0x0C15
    d45e:	90 91 16 0c 	lds	r25, 0x0C16
    d462:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d466:	60 e0       	ldi	r22, 0x00	; 0
    d468:	80 91 15 0c 	lds	r24, 0x0C15
    d46c:	90 91 16 0c 	lds	r25, 0x0C16
    d470:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d474:	6c 2f       	mov	r22, r28
    d476:	80 91 15 0c 	lds	r24, 0x0C15
    d47a:	90 91 16 0c 	lds	r25, 0x0C16
    d47e:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_shot(&player2, p2_shot_index);
    d482:	6d 2f       	mov	r22, r29
    d484:	87 ea       	ldi	r24, 0xA7	; 167
    d486:	9f e0       	ldi	r25, 0x0F	; 15
    d488:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_tile_explosions(&tile_animations);
    d48c:	8c e1       	ldi	r24, 0x1C	; 28
    d48e:	9c e0       	ldi	r25, 0x0C	; 12
    d490:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d494:	60 91 15 0c 	lds	r22, 0x0C15
    d498:	70 91 16 0c 	lds	r23, 0x0C16
    d49c:	80 91 17 0c 	lds	r24, 0x0C17
    d4a0:	90 91 18 0c 	lds	r25, 0x0C18
    d4a4:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d4a8:	60 91 13 0c 	lds	r22, 0x0C13
    d4ac:	80 91 15 0c 	lds	r24, 0x0C15
    d4b0:	90 91 16 0c 	lds	r25, 0x0C16
    d4b4:	0e 94 d4 60 	call	0xc1a8	; 0xc1a8 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    d4b8:	80 91 12 0c 	lds	r24, 0x0C12
    d4bc:	80 32       	cpi	r24, 0x20	; 32
    d4be:	09 f4       	brne	.+2      	; 0xd4c2 <update_level+0x302>
    d4c0:	97 c0       	rjmp	.+302    	; 0xd5f0 <update_level+0x430>
		{
			resolve_scoring();
    d4c2:	0e 94 18 68 	call	0xd030	; 0xd030 <resolve_scoring>
    d4c6:	94 c0       	rjmp	.+296    	; 0xd5f0 <update_level+0x430>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    d4c8:	90 31       	cpi	r25, 0x10	; 16
    d4ca:	d9 f3       	breq	.-10     	; 0xd4c2 <update_level+0x302>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    d4cc:	91 11       	cpse	r25, r1
    d4ce:	90 c0       	rjmp	.+288    	; 0xd5f0 <update_level+0x430>
	{
		SetSpriteVisibility(true);
    d4d0:	81 e0       	ldi	r24, 0x01	; 1
    d4d2:	0e 94 80 50 	call	0xa100	; 0xa100 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    d4d6:	60 e0       	ldi	r22, 0x00	; 0
    d4d8:	89 e3       	ldi	r24, 0x39	; 57
    d4da:	9c e0       	ldi	r25, 0x0C	; 12
    d4dc:	0e 94 9f 59 	call	0xb33e	; 0xb33e <tank_map>
    d4e0:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d4e2:	68 2f       	mov	r22, r24
    d4e4:	87 ea       	ldi	r24, 0xA7	; 167
    d4e6:	9f e0       	ldi	r25, 0x0F	; 15
    d4e8:	0e 94 9f 59 	call	0xb33e	; 0xb33e <tank_map>
    d4ec:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d4ee:	68 2f       	mov	r22, r24
    d4f0:	89 e3       	ldi	r24, 0x39	; 57
    d4f2:	9c e0       	ldi	r25, 0x0C	; 12
    d4f4:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
    d4f8:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    d4fa:	68 2f       	mov	r22, r24
    d4fc:	87 ea       	ldi	r24, 0xA7	; 167
    d4fe:	9f e0       	ldi	r25, 0x0F	; 15
    d500:	0e 94 08 5a 	call	0xb410	; 0xb410 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    d504:	40 91 02 01 	lds	r20, 0x0102
    d508:	6f e0       	ldi	r22, 0x0F	; 15
    d50a:	89 e3       	ldi	r24, 0x39	; 57
    d50c:	9c e0       	ldi	r25, 0x0C	; 12
    d50e:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <render_banter>
    d512:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    d516:	40 91 01 01 	lds	r20, 0x0101
    d51a:	60 e0       	ldi	r22, 0x00	; 0
    d51c:	87 ea       	ldi	r24, 0xA7	; 167
    d51e:	9f e0       	ldi	r25, 0x0F	; 15
    d520:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <render_banter>
    d524:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    d528:	60 e0       	ldi	r22, 0x00	; 0
    d52a:	89 e3       	ldi	r24, 0x39	; 57
    d52c:	9c e0       	ldi	r25, 0x0C	; 12
    d52e:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <render_player>
		render_player(&player2, p2_index);
    d532:	6d 2d       	mov	r22, r13
    d534:	87 ea       	ldi	r24, 0xA7	; 167
    d536:	9f e0       	ldi	r25, 0x0F	; 15
    d538:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <render_player>
		render_shot(&player1, p1_shot_index);
    d53c:	6e 2d       	mov	r22, r14
    d53e:	89 e3       	ldi	r24, 0x39	; 57
    d540:	9c e0       	ldi	r25, 0x0C	; 12
    d542:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_shot(&player2, p2_shot_index);
    d546:	6f 2d       	mov	r22, r15
    d548:	87 ea       	ldi	r24, 0xA7	; 167
    d54a:	9f e0       	ldi	r25, 0x0F	; 15
    d54c:	0e 94 24 59 	call	0xb248	; 0xb248 <render_shot>
		render_tile_explosions(&tile_animations);
    d550:	8c e1       	ldi	r24, 0x1C	; 28
    d552:	9c e0       	ldi	r25, 0x0C	; 12
    d554:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d558:	80 91 19 0c 	lds	r24, 0x0C19
    d55c:	90 91 1a 0c 	lds	r25, 0x0C1A
    d560:	89 3e       	cpi	r24, 0xE9	; 233
    d562:	93 40       	sbci	r25, 0x03	; 3
    d564:	88 f0       	brcs	.+34     	; 0xd588 <update_level+0x3c8>
    d566:	80 91 39 10 	lds	r24, 0x1039
    d56a:	90 91 3a 10 	lds	r25, 0x103A
    d56e:	18 16       	cp	r1, r24
    d570:	19 06       	cpc	r1, r25
    d572:	54 f4       	brge	.+20     	; 0xd588 <update_level+0x3c8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d574:	8d e2       	ldi	r24, 0x2D	; 45
    d576:	90 e1       	ldi	r25, 0x10	; 16
    d578:	0e 94 85 59 	call	0xb30a	; 0xb30a <render_scope>
    d57c:	88 23       	and	r24, r24
    d57e:	21 f0       	breq	.+8      	; 0xd588 <update_level+0x3c8>
    d580:	10 92 1a 0c 	sts	0x0C1A, r1
    d584:	10 92 19 0c 	sts	0x0C19, r1
		}
		game.scope_counter++;
    d588:	20 91 19 0c 	lds	r18, 0x0C19
    d58c:	30 91 1a 0c 	lds	r19, 0x0C1A
    d590:	2f 5f       	subi	r18, 0xFF	; 255
    d592:	3f 4f       	sbci	r19, 0xFF	; 255
    d594:	30 93 1a 0c 	sts	0x0C1A, r19
    d598:	20 93 19 0c 	sts	0x0C19, r18
		
		// Update
		update_player(p1, &player1);
    d59c:	69 e3       	ldi	r22, 0x39	; 57
    d59e:	7c e0       	ldi	r23, 0x0C	; 12
    d5a0:	c8 01       	movw	r24, r16
    d5a2:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
		update_player(p2, &player2);
    d5a6:	67 ea       	ldi	r22, 0xA7	; 167
    d5a8:	7f e0       	ldi	r23, 0x0F	; 15
    d5aa:	ce 01       	movw	r24, r28
    d5ac:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <update_player>
		resolve_scoring();
    d5b0:	0e 94 18 68 	call	0xd030	; 0xd030 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d5b4:	60 e0       	ldi	r22, 0x00	; 0
    d5b6:	89 e3       	ldi	r24, 0x39	; 57
    d5b8:	9c e0       	ldi	r25, 0x0C	; 12
    d5ba:	0e 94 d4 60 	call	0xc1a8	; 0xc1a8 <collision_detect_player>
    d5be:	88 23       	and	r24, r24
    d5c0:	41 f0       	breq	.+16     	; 0xd5d2 <update_level+0x412>
    d5c2:	2f e0       	ldi	r18, 0x0F	; 15
    d5c4:	40 e0       	ldi	r20, 0x00	; 0
    d5c6:	67 ea       	ldi	r22, 0xA7	; 167
    d5c8:	7f e0       	ldi	r23, 0x0F	; 15
    d5ca:	89 e3       	ldi	r24, 0x39	; 57
    d5cc:	9c e0       	ldi	r25, 0x0C	; 12
    d5ce:	0e 94 f8 5f 	call	0xbff0	; 0xbff0 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d5d2:	6f e0       	ldi	r22, 0x0F	; 15
    d5d4:	87 ea       	ldi	r24, 0xA7	; 167
    d5d6:	9f e0       	ldi	r25, 0x0F	; 15
    d5d8:	0e 94 d4 60 	call	0xc1a8	; 0xc1a8 <collision_detect_player>
    d5dc:	88 23       	and	r24, r24
    d5de:	41 f0       	breq	.+16     	; 0xd5f0 <update_level+0x430>
    d5e0:	20 e0       	ldi	r18, 0x00	; 0
    d5e2:	4f e0       	ldi	r20, 0x0F	; 15
    d5e4:	69 e3       	ldi	r22, 0x39	; 57
    d5e6:	7c e0       	ldi	r23, 0x0C	; 12
    d5e8:	87 ea       	ldi	r24, 0xA7	; 167
    d5ea:	9f e0       	ldi	r25, 0x0F	; 15
    d5ec:	0e 94 f8 5f 	call	0xbff0	; 0xbff0 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d5f0:	80 91 1b 0c 	lds	r24, 0x0C1B
    d5f4:	83 30       	cpi	r24, 0x03	; 3
    d5f6:	31 f5       	brne	.+76     	; 0xd644 <update_level+0x484>
	{
		demo_counter++;
    d5f8:	80 91 35 0b 	lds	r24, 0x0B35
    d5fc:	90 91 36 0b 	lds	r25, 0x0B36
    d600:	01 96       	adiw	r24, 0x01	; 1
    d602:	90 93 36 0b 	sts	0x0B36, r25
    d606:	80 93 35 0b 	sts	0x0B35, r24
		held = ReadJoypad(0);
    d60a:	80 e0       	ldi	r24, 0x00	; 0
    d60c:	0e 94 e6 43 	call	0x87cc	; 0x87cc <ReadJoypad>
		if (held || (demo_counter >= DEMO_LENGTH))
    d610:	89 2b       	or	r24, r25
    d612:	39 f4       	brne	.+14     	; 0xd622 <update_level+0x462>
    d614:	80 91 35 0b 	lds	r24, 0x0B35
    d618:	90 91 36 0b 	lds	r25, 0x0B36
    d61c:	88 30       	cpi	r24, 0x08	; 8
    d61e:	97 40       	sbci	r25, 0x07	; 7
    d620:	88 f0       	brcs	.+34     	; 0xd644 <update_level+0x484>
		{
			demo_counter = 0;
    d622:	10 92 36 0b 	sts	0x0B36, r1
    d626:	10 92 35 0b 	sts	0x0B35, r1
			fade_through();
    d62a:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
			init_game_state();
    d62e:	0e 94 90 56 	call	0xad20	; 0xad20 <init_game_state>
			load_splash();
		}
	}
}
    d632:	df 91       	pop	r29
    d634:	cf 91       	pop	r28
    d636:	1f 91       	pop	r17
    d638:	0f 91       	pop	r16
    d63a:	ff 90       	pop	r15
    d63c:	ef 90       	pop	r14
    d63e:	df 90       	pop	r13
		if (held || (demo_counter >= DEMO_LENGTH))
		{
			demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    d640:	0c 94 8c 65 	jmp	0xcb18	; 0xcb18 <load_splash>
		}
	}
}
    d644:	df 91       	pop	r29
    d646:	cf 91       	pop	r28
    d648:	1f 91       	pop	r17
    d64a:	0f 91       	pop	r16
    d64c:	ff 90       	pop	r15
    d64e:	ef 90       	pop	r14
    d650:	df 90       	pop	r13
    d652:	08 95       	ret

0000d654 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1)
{
    d654:	cf 93       	push	r28
    d656:	df 93       	push	r29
    d658:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    d65a:	88 81       	ld	r24, Y
    d65c:	99 81       	ldd	r25, Y+1	; 0x01
    d65e:	91 ff       	sbrs	r25, 1
    d660:	0e c0       	rjmp	.+28     	; 0xd67e <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    d662:	10 92 31 0b 	sts	0x0B31, r1
    d666:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d66a:	2f ef       	ldi	r18, 0xFF	; 255
    d66c:	47 e1       	ldi	r20, 0x17	; 23
    d66e:	65 e0       	ldi	r22, 0x05	; 5
    d670:	84 e0       	ldi	r24, 0x04	; 4
    d672:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		fade_through();
    d676:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
		load_splash();
    d67a:	0e 94 8c 65 	call	0xcb18	; 0xcb18 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d67e:	8c 81       	ldd	r24, Y+4	; 0x04
    d680:	9d 81       	ldd	r25, Y+5	; 0x05
    d682:	92 ff       	sbrs	r25, 2
    d684:	1f c0       	rjmp	.+62     	; 0xd6c4 <update_tank_rank+0x70>
    d686:	8e 81       	ldd	r24, Y+6	; 0x06
    d688:	8f 3f       	cpi	r24, 0xFF	; 255
    d68a:	e1 f4       	brne	.+56     	; 0xd6c4 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    d68c:	10 92 31 0b 	sts	0x0B31, r1
    d690:	10 92 30 0b 	sts	0x0B30, r1
	    SFX_NAVIGATE;
    d694:	2f ef       	ldi	r18, 0xFF	; 255
    d696:	47 e1       	ldi	r20, 0x17	; 23
    d698:	65 e0       	ldi	r22, 0x05	; 5
    d69a:	84 e0       	ldi	r24, 0x04	; 4
    d69c:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
	    init_scores(&scores);
    d6a0:	88 ec       	ldi	r24, 0xC8	; 200
    d6a2:	9b e0       	ldi	r25, 0x0B	; 11
    d6a4:	0e 94 2a 55 	call	0xaa54	; 0xaa54 <init_scores>
	    init_handles(&handles);
    d6a8:	8f ee       	ldi	r24, 0xEF	; 239
    d6aa:	9b e0       	ldi	r25, 0x0B	; 11
    d6ac:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d6b0:	88 ec       	ldi	r24, 0xC8	; 200
    d6b2:	9b e0       	ldi	r25, 0x0B	; 11
    d6b4:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <EepromWriteBlock>
    d6b8:	8f ee       	ldi	r24, 0xEF	; 239
    d6ba:	9b e0       	ldi	r25, 0x0B	; 11
    d6bc:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d6c0:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    d6c4:	80 91 30 0b 	lds	r24, 0x0B30
    d6c8:	90 91 31 0b 	lds	r25, 0x0B31
    d6cc:	85 38       	cpi	r24, 0x85	; 133
    d6ce:	93 40       	sbci	r25, 0x03	; 3
    d6d0:	70 f0       	brcs	.+28     	; 0xd6ee <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    d6d2:	10 92 31 0b 	sts	0x0B31, r1
    d6d6:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d6da:	2f ef       	ldi	r18, 0xFF	; 255
    d6dc:	47 e1       	ldi	r20, 0x17	; 23
    d6de:	65 e0       	ldi	r22, 0x05	; 5
    d6e0:	84 e0       	ldi	r24, 0x04	; 4
    d6e2:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		fade_through();
    d6e6:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
		load_splash();
    d6ea:	0e 94 8c 65 	call	0xcb18	; 0xcb18 <load_splash>
	}
	tank_rank_counter++;
    d6ee:	80 91 30 0b 	lds	r24, 0x0B30
    d6f2:	90 91 31 0b 	lds	r25, 0x0B31
    d6f6:	01 96       	adiw	r24, 0x01	; 1
    d6f8:	90 93 31 0b 	sts	0x0B31, r25
    d6fc:	80 93 30 0b 	sts	0x0B30, r24
}
    d700:	df 91       	pop	r29
    d702:	cf 91       	pop	r28
    d704:	08 95       	ret

0000d706 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d706:	af 92       	push	r10
    d708:	bf 92       	push	r11
    d70a:	cf 92       	push	r12
    d70c:	df 92       	push	r13
    d70e:	ef 92       	push	r14
    d710:	ff 92       	push	r15
    d712:	0f 93       	push	r16
    d714:	1f 93       	push	r17
    d716:	cf 93       	push	r28
    d718:	df 93       	push	r29
    d71a:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d71c:	fb 01       	movw	r30, r22
    d71e:	00 81       	ld	r16, Z
    d720:	11 81       	ldd	r17, Z+1	; 0x01
    d722:	68 01       	movw	r12, r16
    d724:	f0 e1       	ldi	r31, 0x10	; 16
    d726:	cf 22       	and	r12, r31
    d728:	dd 24       	eor	r13, r13
    d72a:	04 ff       	sbrs	r16, 4
    d72c:	09 c0       	rjmp	.+18     	; 0xd740 <_handle_select_helper+0x3a>
    d72e:	8d 81       	ldd	r24, Y+5	; 0x05
    d730:	81 11       	cpse	r24, r1
    d732:	06 c0       	rjmp	.+12     	; 0xd740 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    d734:	88 81       	ld	r24, Y
    d736:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d738:	87 ff       	sbrs	r24, 7
    d73a:	10 c0       	rjmp	.+32     	; 0xd75c <_handle_select_helper+0x56>
    d73c:	18 82       	st	Y, r1
    d73e:	26 c0       	rjmp	.+76     	; 0xd78c <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d740:	58 01       	movw	r10, r16
    d742:	20 e2       	ldi	r18, 0x20	; 32
    d744:	a2 22       	and	r10, r18
    d746:	bb 24       	eor	r11, r11
    d748:	05 ff       	sbrs	r16, 5
    d74a:	0a c0       	rjmp	.+20     	; 0xd760 <_handle_select_helper+0x5a>
    d74c:	8d 81       	ldd	r24, Y+5	; 0x05
    d74e:	81 11       	cpse	r24, r1
    d750:	07 c0       	rjmp	.+14     	; 0xd760 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    d752:	88 81       	ld	r24, Y
    d754:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d756:	89 30       	cpi	r24, 0x09	; 9
    d758:	0c f0       	brlt	.+2      	; 0xd75c <_handle_select_helper+0x56>
    d75a:	88 e0       	ldi	r24, 0x08	; 8
    d75c:	88 83       	st	Y, r24
    d75e:	16 c0       	rjmp	.+44     	; 0xd78c <_handle_select_helper+0x86>
    d760:	7a 01       	movw	r14, r20
    d762:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    d764:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <select_pressed>
    d768:	88 23       	and	r24, r24
    d76a:	01 f1       	breq	.+64     	; 0xd7ac <_handle_select_helper+0xa6>
    d76c:	9d 81       	ldd	r25, Y+5	; 0x05
    d76e:	91 11       	cpse	r25, r1
    d770:	1d c0       	rjmp	.+58     	; 0xd7ac <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    d772:	81 e0       	ldi	r24, 0x01	; 1
    d774:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d776:	69 91       	ld	r22, Y+
    d778:	83 e0       	ldi	r24, 0x03	; 3
    d77a:	68 02       	muls	r22, r24
    d77c:	b0 01       	movw	r22, r0
    d77e:	11 24       	eor	r1, r1
    d780:	6f 50       	subi	r22, 0x0F	; 15
    d782:	74 4f       	sbci	r23, 0xF4	; 244
    d784:	43 e0       	ldi	r20, 0x03	; 3
    d786:	ce 01       	movw	r24, r28
    d788:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
		SFX_NAVIGATE;
    d78c:	2f ef       	ldi	r18, 0xFF	; 255
    d78e:	47 e1       	ldi	r20, 0x17	; 23
    d790:	65 e0       	ldi	r22, 0x05	; 5
    d792:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    d794:	df 91       	pop	r29
    d796:	cf 91       	pop	r28
    d798:	1f 91       	pop	r17
    d79a:	0f 91       	pop	r16
    d79c:	ff 90       	pop	r15
    d79e:	ef 90       	pop	r14
    d7a0:	df 90       	pop	r13
    d7a2:	cf 90       	pop	r12
    d7a4:	bf 90       	pop	r11
    d7a6:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d7a8:	0c 94 7e 47 	jmp	0x8efc	; 0x8efc <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d7ac:	07 ff       	sbrs	r16, 7
    d7ae:	09 c0       	rjmp	.+18     	; 0xd7c2 <_handle_select_helper+0xbc>
    d7b0:	9d 81       	ldd	r25, Y+5	; 0x05
    d7b2:	91 30       	cpi	r25, 0x01	; 1
    d7b4:	31 f4       	brne	.+12     	; 0xd7c2 <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    d7b6:	8c 81       	ldd	r24, Y+4	; 0x04
    d7b8:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d7ba:	83 30       	cpi	r24, 0x03	; 3
    d7bc:	5c f0       	brlt	.+22     	; 0xd7d4 <_handle_select_helper+0xce>
    d7be:	82 e0       	ldi	r24, 0x02	; 2
    d7c0:	09 c0       	rjmp	.+18     	; 0xd7d4 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d7c2:	06 ff       	sbrs	r16, 6
    d7c4:	0b c0       	rjmp	.+22     	; 0xd7dc <_handle_select_helper+0xd6>
    d7c6:	9d 81       	ldd	r25, Y+5	; 0x05
    d7c8:	91 30       	cpi	r25, 0x01	; 1
    d7ca:	41 f5       	brne	.+80     	; 0xd81c <_handle_select_helper+0x116>
	{
		ps->char_index--;
    d7cc:	8c 81       	ldd	r24, Y+4	; 0x04
    d7ce:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d7d0:	87 fd       	sbrc	r24, 7
    d7d2:	02 c0       	rjmp	.+4      	; 0xd7d8 <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d7d4:	8c 83       	std	Y+4, r24	; 0x04
    d7d6:	da cf       	rjmp	.-76     	; 0xd78c <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    d7d8:	1c 82       	std	Y+4, r1	; 0x04
    d7da:	d8 cf       	rjmp	.-80     	; 0xd78c <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d7dc:	cd 28       	or	r12, r13
    d7de:	69 f0       	breq	.+26     	; 0xd7fa <_handle_select_helper+0xf4>
    d7e0:	8d 81       	ldd	r24, Y+5	; 0x05
    d7e2:	81 30       	cpi	r24, 0x01	; 1
    d7e4:	09 f0       	breq	.+2      	; 0xd7e8 <_handle_select_helper+0xe2>
    d7e6:	44 c0       	rjmp	.+136    	; 0xd870 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    d7e8:	8c 81       	ldd	r24, Y+4	; 0x04
    d7ea:	c8 0f       	add	r28, r24
    d7ec:	d1 1d       	adc	r29, r1
    d7ee:	99 81       	ldd	r25, Y+1	; 0x01
    d7f0:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d7f2:	91 34       	cpi	r25, 0x41	; 65
    d7f4:	70 f4       	brcc	.+28     	; 0xd812 <_handle_select_helper+0x10c>
    d7f6:	81 e4       	ldi	r24, 0x41	; 65
    d7f8:	0f c0       	rjmp	.+30     	; 0xd818 <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d7fa:	ab 28       	or	r10, r11
    d7fc:	89 f0       	breq	.+34     	; 0xd820 <_handle_select_helper+0x11a>
    d7fe:	8d 81       	ldd	r24, Y+5	; 0x05
    d800:	81 30       	cpi	r24, 0x01	; 1
    d802:	b1 f5       	brne	.+108    	; 0xd870 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    d804:	8c 81       	ldd	r24, Y+4	; 0x04
    d806:	c8 0f       	add	r28, r24
    d808:	d1 1d       	adc	r29, r1
    d80a:	99 81       	ldd	r25, Y+1	; 0x01
    d80c:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d80e:	9b 35       	cpi	r25, 0x5B	; 91
    d810:	10 f4       	brcc	.+4      	; 0xd816 <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d812:	99 83       	std	Y+1, r25	; 0x01
    d814:	bb cf       	rjmp	.-138    	; 0xd78c <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d816:	8a e5       	ldi	r24, 0x5A	; 90
    d818:	89 83       	std	Y+1, r24	; 0x01
    d81a:	b8 cf       	rjmp	.-144    	; 0xd78c <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d81c:	ab 28       	or	r10, r11
    d81e:	41 f5       	brne	.+80     	; 0xd870 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    d820:	88 23       	and	r24, r24
    d822:	31 f1       	breq	.+76     	; 0xd870 <_handle_select_helper+0x16a>
    d824:	8d 81       	ldd	r24, Y+5	; 0x05
    d826:	81 30       	cpi	r24, 0x01	; 1
    d828:	19 f5       	brne	.+70     	; 0xd870 <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    d82a:	fe 01       	movw	r30, r28
    d82c:	81 91       	ld	r24, Z+
    d82e:	8f 01       	movw	r16, r30
    d830:	f7 01       	movw	r30, r14
    d832:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d834:	43 e0       	ldi	r20, 0x03	; 3
    d836:	b8 01       	movw	r22, r16
    d838:	c7 01       	movw	r24, r14
    d83a:	0c 96       	adiw	r24, 0x0c	; 12
    d83c:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d840:	88 81       	ld	r24, Y
    d842:	f3 e0       	ldi	r31, 0x03	; 3
    d844:	8f 02       	muls	r24, r31
    d846:	c0 01       	movw	r24, r0
    d848:	11 24       	eor	r1, r1
    d84a:	43 e0       	ldi	r20, 0x03	; 3
    d84c:	b8 01       	movw	r22, r16
    d84e:	8f 50       	subi	r24, 0x0F	; 15
    d850:	94 4f       	sbci	r25, 0xF4	; 244
    d852:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
		SFX_NAVIGATE;
    d856:	2f ef       	ldi	r18, 0xFF	; 255
    d858:	47 e1       	ldi	r20, 0x17	; 23
    d85a:	65 e0       	ldi	r22, 0x05	; 5
    d85c:	84 e0       	ldi	r24, 0x04	; 4
    d85e:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d862:	8f ee       	ldi	r24, 0xEF	; 239
    d864:	9b e0       	ldi	r25, 0x0B	; 11
    d866:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d86a:	82 e0       	ldi	r24, 0x02	; 2
    d86c:	8d 83       	std	Y+5, r24	; 0x05
    d86e:	20 c0       	rjmp	.+64     	; 0xd8b0 <_handle_select_helper+0x1aa>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d870:	11 ff       	sbrs	r17, 1
    d872:	1e c0       	rjmp	.+60     	; 0xd8b0 <_handle_select_helper+0x1aa>
    d874:	8d 81       	ldd	r24, Y+5	; 0x05
    d876:	81 30       	cpi	r24, 0x01	; 1
    d878:	11 f4       	brne	.+4      	; 0xd87e <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    d87a:	1d 82       	std	Y+5, r1	; 0x05
    d87c:	87 cf       	rjmp	.-242    	; 0xd78c <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d87e:	82 30       	cpi	r24, 0x02	; 2
    d880:	19 f4       	brne	.+6      	; 0xd888 <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    d882:	81 e0       	ldi	r24, 0x01	; 1
    d884:	8d 83       	std	Y+5, r24	; 0x05
    d886:	82 cf       	rjmp	.-252    	; 0xd78c <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d888:	2f ef       	ldi	r18, 0xFF	; 255
    d88a:	47 e1       	ldi	r20, 0x17	; 23
    d88c:	65 e0       	ldi	r22, 0x05	; 5
    d88e:	84 e0       	ldi	r24, 0x04	; 4
    d890:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		fade_through();
    d894:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
		load_splash();
	}
}
    d898:	df 91       	pop	r29
    d89a:	cf 91       	pop	r28
    d89c:	1f 91       	pop	r17
    d89e:	0f 91       	pop	r16
    d8a0:	ff 90       	pop	r15
    d8a2:	ef 90       	pop	r14
    d8a4:	df 90       	pop	r13
    d8a6:	cf 90       	pop	r12
    d8a8:	bf 90       	pop	r11
    d8aa:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d8ac:	0c 94 8c 65 	jmp	0xcb18	; 0xcb18 <load_splash>
	}
}
    d8b0:	df 91       	pop	r29
    d8b2:	cf 91       	pop	r28
    d8b4:	1f 91       	pop	r17
    d8b6:	0f 91       	pop	r16
    d8b8:	ff 90       	pop	r15
    d8ba:	ef 90       	pop	r14
    d8bc:	df 90       	pop	r13
    d8be:	cf 90       	pop	r12
    d8c0:	bf 90       	pop	r11
    d8c2:	af 90       	pop	r10
    d8c4:	08 95       	ret

0000d8c6 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d8c6:	af 92       	push	r10
    d8c8:	bf 92       	push	r11
    d8ca:	cf 92       	push	r12
    d8cc:	df 92       	push	r13
    d8ce:	ef 92       	push	r14
    d8d0:	ff 92       	push	r15
    d8d2:	0f 93       	push	r16
    d8d4:	1f 93       	push	r17
    d8d6:	cf 93       	push	r28
    d8d8:	df 93       	push	r29
    d8da:	00 d0       	rcall	.+0      	; 0xd8dc <_handle_select_render_helper+0x16>
    d8dc:	1f 92       	push	r1
    d8de:	cd b7       	in	r28, 0x3d	; 61
    d8e0:	de b7       	in	r29, 0x3e	; 62
    d8e2:	7c 01       	movw	r14, r24
    d8e4:	b4 2e       	mov	r11, r20
    d8e6:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d8e8:	80 e2       	ldi	r24, 0x20	; 32
    d8ea:	89 83       	std	Y+1, r24	; 0x01
    d8ec:	8a 83       	std	Y+2, r24	; 0x02
    d8ee:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d8f0:	f7 01       	movw	r30, r14
    d8f2:	85 81       	ldd	r24, Z+5	; 0x05
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	1d c0       	rjmp	.+58     	; 0xd932 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d8f8:	40 e0       	ldi	r20, 0x00	; 0
    d8fa:	68 e1       	ldi	r22, 0x18	; 24
    d8fc:	74 e4       	ldi	r23, 0x44	; 68
    d8fe:	82 2f       	mov	r24, r18
    d900:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d904:	40 e0       	ldi	r20, 0x00	; 0
    d906:	6a e5       	ldi	r22, 0x5A	; 90
    d908:	74 e4       	ldi	r23, 0x44	; 68
    d90a:	81 e0       	ldi	r24, 0x01	; 1
    d90c:	81 0f       	add	r24, r17
    d90e:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d912:	f7 01       	movw	r30, r14
    d914:	40 81       	ld	r20, Z
    d916:	44 0f       	add	r20, r20
    d918:	44 0f       	add	r20, r20
    d91a:	44 0f       	add	r20, r20
    d91c:	40 5c       	subi	r20, 0xC0	; 192
    d91e:	01 e0       	ldi	r16, 0x01	; 1
    d920:	21 e0       	ldi	r18, 0x01	; 1
    d922:	6b 2d       	mov	r22, r11
    d924:	66 0f       	add	r22, r22
    d926:	66 0f       	add	r22, r22
    d928:	66 0f       	add	r22, r22
    d92a:	81 2f       	mov	r24, r17
    d92c:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
    d930:	6f c0       	rjmp	.+222    	; 0xda10 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d932:	81 30       	cpi	r24, 0x01	; 1
    d934:	09 f0       	breq	.+2      	; 0xd938 <_handle_select_render_helper+0x72>
    d936:	44 c0       	rjmp	.+136    	; 0xd9c0 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d938:	40 e0       	ldi	r20, 0x00	; 0
    d93a:	65 e1       	ldi	r22, 0x15	; 21
    d93c:	74 e4       	ldi	r23, 0x44	; 68
    d93e:	82 2f       	mov	r24, r18
    d940:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d944:	aa 24       	eor	r10, r10
    d946:	a3 94       	inc	r10
    d948:	a1 0e       	add	r10, r17
    d94a:	40 e0       	ldi	r20, 0x00	; 0
    d94c:	62 e1       	ldi	r22, 0x12	; 18
    d94e:	74 e4       	ldi	r23, 0x44	; 68
    d950:	8a 2d       	mov	r24, r10
    d952:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d956:	cb 2c       	mov	r12, r11
    d958:	d1 2c       	mov	r13, r1
    d95a:	f5 e0       	ldi	r31, 0x05	; 5
    d95c:	cf 0e       	add	r12, r31
    d95e:	d1 1c       	adc	r13, r1
    d960:	f7 01       	movw	r30, r14
    d962:	40 81       	ld	r20, Z
    d964:	44 0f       	add	r20, r20
    d966:	44 0f       	add	r20, r20
    d968:	44 0f       	add	r20, r20
    d96a:	48 5c       	subi	r20, 0xC8	; 200
    d96c:	84 81       	ldd	r24, Z+4	; 0x04
    d96e:	b6 01       	movw	r22, r12
    d970:	68 0f       	add	r22, r24
    d972:	71 1d       	adc	r23, r1
    d974:	87 fd       	sbrc	r24, 7
    d976:	7a 95       	dec	r23
    d978:	66 0f       	add	r22, r22
    d97a:	66 0f       	add	r22, r22
    d97c:	66 0f       	add	r22, r22
    d97e:	01 e0       	ldi	r16, 0x01	; 1
    d980:	21 e0       	ldi	r18, 0x01	; 1
    d982:	81 2f       	mov	r24, r17
    d984:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d988:	f7 01       	movw	r30, r14
    d98a:	40 81       	ld	r20, Z
    d98c:	44 0f       	add	r20, r20
    d98e:	44 0f       	add	r20, r20
    d990:	44 0f       	add	r20, r20
    d992:	48 5b       	subi	r20, 0xB8	; 184
    d994:	84 81       	ldd	r24, Z+4	; 0x04
    d996:	c8 0e       	add	r12, r24
    d998:	d1 1c       	adc	r13, r1
    d99a:	87 fd       	sbrc	r24, 7
    d99c:	da 94       	dec	r13
    d99e:	6c 2d       	mov	r22, r12
    d9a0:	66 0f       	add	r22, r22
    d9a2:	66 0f       	add	r22, r22
    d9a4:	66 0f       	add	r22, r22
    d9a6:	21 e0       	ldi	r18, 0x01	; 1
    d9a8:	8a 2d       	mov	r24, r10
    d9aa:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d9ae:	43 e0       	ldi	r20, 0x03	; 3
    d9b0:	b7 01       	movw	r22, r14
    d9b2:	6f 5f       	subi	r22, 0xFF	; 255
    d9b4:	7f 4f       	sbci	r23, 0xFF	; 255
    d9b6:	ce 01       	movw	r24, r28
    d9b8:	01 96       	adiw	r24, 0x01	; 1
    d9ba:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
    d9be:	28 c0       	rjmp	.+80     	; 0xda10 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d9c0:	82 30       	cpi	r24, 0x02	; 2
    d9c2:	31 f5       	brne	.+76     	; 0xda10 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d9c4:	c4 2e       	mov	r12, r20
    d9c6:	d1 2c       	mov	r13, r1
    d9c8:	48 e2       	ldi	r20, 0x28	; 40
    d9ca:	65 e0       	ldi	r22, 0x05	; 5
    d9cc:	70 e0       	ldi	r23, 0x00	; 0
    d9ce:	c6 01       	movw	r24, r12
    d9d0:	06 96       	adiw	r24, 0x06	; 6
    d9d2:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d9d6:	23 e0       	ldi	r18, 0x03	; 3
    d9d8:	a7 01       	movw	r20, r14
    d9da:	4f 5f       	subi	r20, 0xFF	; 255
    d9dc:	5f 4f       	sbci	r21, 0xFF	; 255
    d9de:	65 e0       	ldi	r22, 0x05	; 5
    d9e0:	87 e0       	ldi	r24, 0x07	; 7
    d9e2:	8b 0d       	add	r24, r11
    d9e4:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d9e8:	49 e2       	ldi	r20, 0x29	; 41
    d9ea:	65 e0       	ldi	r22, 0x05	; 5
    d9ec:	70 e0       	ldi	r23, 0x00	; 0
    d9ee:	c6 01       	movw	r24, r12
    d9f0:	0a 96       	adiw	r24, 0x0a	; 10
    d9f2:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
		MapSprite2(idx, map_none, 0);
    d9f6:	40 e0       	ldi	r20, 0x00	; 0
    d9f8:	6a e5       	ldi	r22, 0x5A	; 90
    d9fa:	74 e4       	ldi	r23, 0x44	; 68
    d9fc:	81 2f       	mov	r24, r17
    d9fe:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    da02:	40 e0       	ldi	r20, 0x00	; 0
    da04:	6a e5       	ldi	r22, 0x5A	; 90
    da06:	74 e4       	ldi	r23, 0x44	; 68
    da08:	81 e0       	ldi	r24, 0x01	; 1
    da0a:	81 0f       	add	r24, r17
    da0c:	0e 94 83 51 	call	0xa306	; 0xa306 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    da10:	f7 01       	movw	r30, r14
    da12:	60 81       	ld	r22, Z
    da14:	68 5f       	subi	r22, 0xF8	; 248
    da16:	23 e0       	ldi	r18, 0x03	; 3
    da18:	ae 01       	movw	r20, r28
    da1a:	4f 5f       	subi	r20, 0xFF	; 255
    da1c:	5f 4f       	sbci	r21, 0xFF	; 255
    da1e:	85 e0       	ldi	r24, 0x05	; 5
    da20:	8b 0d       	add	r24, r11
    da22:	0e 94 b5 53 	call	0xa76a	; 0xa76a <LBPrintStr>
}
    da26:	0f 90       	pop	r0
    da28:	0f 90       	pop	r0
    da2a:	0f 90       	pop	r0
    da2c:	df 91       	pop	r29
    da2e:	cf 91       	pop	r28
    da30:	1f 91       	pop	r17
    da32:	0f 91       	pop	r16
    da34:	ff 90       	pop	r15
    da36:	ef 90       	pop	r14
    da38:	df 90       	pop	r13
    da3a:	cf 90       	pop	r12
    da3c:	bf 90       	pop	r11
    da3e:	af 90       	pop	r10
    da40:	08 95       	ret

0000da42 <load_handle_select>:

void load_handle_select()
{
    da42:	8f 92       	push	r8
    da44:	9f 92       	push	r9
    da46:	af 92       	push	r10
    da48:	bf 92       	push	r11
    da4a:	cf 92       	push	r12
    da4c:	df 92       	push	r13
    da4e:	ef 92       	push	r14
    da50:	ff 92       	push	r15
    da52:	0f 93       	push	r16
    da54:	1f 93       	push	r17
    da56:	cf 93       	push	r28
    da58:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    da5a:	82 e0       	ldi	r24, 0x02	; 2
    da5c:	80 93 0f 0c 	sts	0x0C0F, r24
	clear_sprites();
    da60:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    da64:	48 e9       	ldi	r20, 0x98	; 152
    da66:	5d e7       	ldi	r21, 0x7D	; 125
    da68:	64 e0       	ldi	r22, 0x04	; 4
    da6a:	83 e0       	ldi	r24, 0x03	; 3
    da6c:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    da70:	42 e9       	ldi	r20, 0x92	; 146
    da72:	5d e7       	ldi	r21, 0x7D	; 125
    da74:	64 e0       	ldi	r22, 0x04	; 4
    da76:	84 e1       	ldi	r24, 0x14	; 20
    da78:	0e 94 09 52 	call	0xa412	; 0xa412 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    da7c:	45 e1       	ldi	r20, 0x15	; 21
    da7e:	53 e0       	ldi	r21, 0x03	; 3
    da80:	61 e0       	ldi	r22, 0x01	; 1
    da82:	70 e0       	ldi	r23, 0x00	; 0
    da84:	89 e0       	ldi	r24, 0x09	; 9
    da86:	90 e0       	ldi	r25, 0x00	; 0
    da88:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(6, 5, (char*) strPlayer1);
    da8c:	44 e0       	ldi	r20, 0x04	; 4
    da8e:	53 e0       	ldi	r21, 0x03	; 3
    da90:	65 e0       	ldi	r22, 0x05	; 5
    da92:	70 e0       	ldi	r23, 0x00	; 0
    da94:	86 e0       	ldi	r24, 0x06	; 6
    da96:	90 e0       	ldi	r25, 0x00	; 0
    da98:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(23, 5, (char*) strPlayer2);
    da9c:	41 e0       	ldi	r20, 0x01	; 1
    da9e:	53 e0       	ldi	r21, 0x03	; 3
    daa0:	65 e0       	ldi	r22, 0x05	; 5
    daa2:	70 e0       	ldi	r23, 0x00	; 0
    daa4:	87 e1       	ldi	r24, 0x17	; 23
    daa6:	90 e0       	ldi	r25, 0x00	; 0
    daa8:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
    daac:	81 ef       	ldi	r24, 0xF1	; 241
    daae:	e8 2e       	mov	r14, r24
    dab0:	8b e0       	ldi	r24, 0x0B	; 11
    dab2:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    dab4:	c0 e0       	ldi	r28, 0x00	; 0
    dab6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    dab8:	93 e0       	ldi	r25, 0x03	; 3
    daba:	a9 2e       	mov	r10, r25
    dabc:	b1 2c       	mov	r11, r1
    dabe:	67 01       	movw	r12, r14
    dac0:	ce 01       	movw	r24, r28
    dac2:	b5 01       	movw	r22, r10
    dac4:	0e 94 4c 72 	call	0xe498	; 0xe498 <__divmodhi4>
    dac8:	4c 01       	movw	r8, r24
    daca:	8b 01       	movw	r16, r22
    dacc:	08 5f       	subi	r16, 0xF8	; 248
    dace:	1f 4f       	sbci	r17, 0xFF	; 255
    dad0:	f7 01       	movw	r30, r14
    dad2:	41 91       	ld	r20, Z+
    dad4:	7f 01       	movw	r14, r30
    dad6:	b8 01       	movw	r22, r16
    dad8:	03 96       	adiw	r24, 0x03	; 3
    dada:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    dade:	f6 01       	movw	r30, r12
    dae0:	40 81       	ld	r20, Z
    dae2:	b8 01       	movw	r22, r16
    dae4:	c4 01       	movw	r24, r8
    dae6:	44 96       	adiw	r24, 0x14	; 20
    dae8:	0e 94 a4 52 	call	0xa548	; 0xa548 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    daec:	21 96       	adiw	r28, 0x01	; 1
    daee:	cb 31       	cpi	r28, 0x1B	; 27
    daf0:	d1 05       	cpc	r29, r1
    daf2:	29 f7       	brne	.-54     	; 0xdabe <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
    daf4:	40 ef       	ldi	r20, 0xF0	; 240
    daf6:	52 e0       	ldi	r21, 0x02	; 2
    daf8:	65 e1       	ldi	r22, 0x15	; 21
    dafa:	70 e0       	ldi	r23, 0x00	; 0
    dafc:	85 e0       	ldi	r24, 0x05	; 5
    dafe:	90 e0       	ldi	r25, 0x00	; 0
    db00:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    db04:	4e ed       	ldi	r20, 0xDE	; 222
    db06:	52 e0       	ldi	r21, 0x02	; 2
    db08:	66 e1       	ldi	r22, 0x16	; 22
    db0a:	70 e0       	ldi	r23, 0x00	; 0
    db0c:	85 e0       	ldi	r24, 0x05	; 5
    db0e:	90 e0       	ldi	r25, 0x00	; 0
    db10:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(5, 23, (char*) strCancelHandle);
    db14:	43 ed       	ldi	r20, 0xD3	; 211
    db16:	52 e0       	ldi	r21, 0x02	; 2
    db18:	67 e1       	ldi	r22, 0x17	; 23
    db1a:	70 e0       	ldi	r23, 0x00	; 0
    db1c:	85 e0       	ldi	r24, 0x05	; 5
    db1e:	90 e0       	ldi	r25, 0x00	; 0
    db20:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>
	Print(5, 24, (char*) strChangeHandle);
    db24:	4b ea       	ldi	r20, 0xAB	; 171
    db26:	52 e0       	ldi	r21, 0x02	; 2
    db28:	68 e1       	ldi	r22, 0x18	; 24
    db2a:	70 e0       	ldi	r23, 0x00	; 0
    db2c:	85 e0       	ldi	r24, 0x05	; 5
    db2e:	90 e0       	ldi	r25, 0x00	; 0
}
    db30:	df 91       	pop	r29
    db32:	cf 91       	pop	r28
    db34:	1f 91       	pop	r17
    db36:	0f 91       	pop	r16
    db38:	ff 90       	pop	r15
    db3a:	ef 90       	pop	r14
    db3c:	df 90       	pop	r13
    db3e:	cf 90       	pop	r12
    db40:	bf 90       	pop	r11
    db42:	af 90       	pop	r10
    db44:	9f 90       	pop	r9
    db46:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    db48:	0c 94 89 52 	jmp	0xa512	; 0xa512 <Print>

0000db4c <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    db4c:	0f 93       	push	r16
    db4e:	cf 93       	push	r28
    db50:	df 93       	push	r29
    db52:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    db54:	90 91 1b 0c 	lds	r25, 0x0C1B
    db58:	91 30       	cpi	r25, 0x01	; 1
    db5a:	41 f0       	breq	.+16     	; 0xdb6c <update_splash+0x20>
    db5c:	92 30       	cpi	r25, 0x02	; 2
    db5e:	51 f0       	breq	.+20     	; 0xdb74 <update_splash+0x28>
    db60:	91 11       	cpse	r25, r1
    db62:	0f c0       	rjmp	.+30     	; 0xdb82 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    db64:	01 e0       	ldi	r16, 0x01	; 1
    db66:	21 e0       	ldi	r18, 0x01	; 1
    db68:	48 e6       	ldi	r20, 0x68	; 104
    db6a:	07 c0       	rjmp	.+14     	; 0xdb7a <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    db6c:	01 e0       	ldi	r16, 0x01	; 1
    db6e:	21 e0       	ldi	r18, 0x01	; 1
    db70:	40 e7       	ldi	r20, 0x70	; 112
    db72:	03 c0       	rjmp	.+6      	; 0xdb7a <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    db74:	01 e0       	ldi	r16, 0x01	; 1
    db76:	21 e0       	ldi	r18, 0x01	; 1
    db78:	48 e7       	ldi	r20, 0x78	; 120
    db7a:	60 e3       	ldi	r22, 0x30	; 48
    db7c:	80 e0       	ldi	r24, 0x00	; 0
    db7e:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    db82:	40 ef       	ldi	r20, 0xF0	; 240
    db84:	52 e0       	ldi	r21, 0x02	; 2
    db86:	65 e1       	ldi	r22, 0x15	; 21
    db88:	70 e0       	ldi	r23, 0x00	; 0
    db8a:	86 e0       	ldi	r24, 0x06	; 6
    db8c:	90 e0       	ldi	r25, 0x00	; 0
    db8e:	0e 94 89 52 	call	0xa512	; 0xa512 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    db92:	28 81       	ld	r18, Y
    db94:	39 81       	ldd	r19, Y+1	; 0x01
    db96:	21 15       	cp	r18, r1
    db98:	31 05       	cpc	r19, r1
    db9a:	21 f0       	breq	.+8      	; 0xdba4 <update_splash+0x58>
    db9c:	10 92 34 0b 	sts	0x0B34, r1
    dba0:	10 92 33 0b 	sts	0x0B33, r1
	
	if (p1->pressed & BTN_UP)
    dba4:	24 ff       	sbrs	r18, 4
    dba6:	0e c0       	rjmp	.+28     	; 0xdbc4 <update_splash+0x78>
	{
		game.selection--;
    dba8:	80 91 1b 0c 	lds	r24, 0x0C1B
    dbac:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    dbae:	87 ff       	sbrs	r24, 7
    dbb0:	11 c0       	rjmp	.+34     	; 0xdbd4 <update_splash+0x88>
    dbb2:	10 92 1b 0c 	sts	0x0C1B, r1
		SFX_NAVIGATE;
    dbb6:	2f ef       	ldi	r18, 0xFF	; 255
    dbb8:	47 e1       	ldi	r20, 0x17	; 23
    dbba:	65 e0       	ldi	r22, 0x05	; 5
    dbbc:	84 e0       	ldi	r24, 0x04	; 4
    dbbe:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
    dbc2:	91 c0       	rjmp	.+290    	; 0xdce6 <update_splash+0x19a>
	}
	else if (p1->pressed & BTN_DOWN)
    dbc4:	25 ff       	sbrs	r18, 5
    dbc6:	09 c0       	rjmp	.+18     	; 0xdbda <update_splash+0x8e>
	{
		game.selection++;
    dbc8:	80 91 1b 0c 	lds	r24, 0x0C1B
    dbcc:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    dbce:	83 30       	cpi	r24, 0x03	; 3
    dbd0:	0c f0       	brlt	.+2      	; 0xdbd4 <update_splash+0x88>
    dbd2:	82 e0       	ldi	r24, 0x02	; 2
    dbd4:	80 93 1b 0c 	sts	0x0C1B, r24
    dbd8:	ee cf       	rjmp	.-36     	; 0xdbb6 <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    dbda:	ce 01       	movw	r24, r28
    dbdc:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <select_pressed>
    dbe0:	88 23       	and	r24, r24
    dbe2:	a1 f1       	breq	.+104    	; 0xdc4c <update_splash+0x100>
    dbe4:	80 91 1b 0c 	lds	r24, 0x0C1B
    dbe8:	82 30       	cpi	r24, 0x02	; 2
    dbea:	c8 f4       	brcc	.+50     	; 0xdc1e <update_splash+0xd2>
	{
		demo_counter = 0;
    dbec:	10 92 34 0b 	sts	0x0B34, r1
    dbf0:	10 92 33 0b 	sts	0x0B33, r1
		p1s.select_state = SELECTING;
    dbf4:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    dbf8:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    dbfc:	2f ef       	ldi	r18, 0xFF	; 255
    dbfe:	47 e1       	ldi	r20, 0x17	; 23
    dc00:	65 e0       	ldi	r22, 0x05	; 5
    dc02:	84 e0       	ldi	r24, 0x04	; 4
    dc04:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		fade_through();
    dc08:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
		load_eeprom(&handles);
    dc0c:	8f ee       	ldi	r24, 0xEF	; 239
    dc0e:	9b e0       	ldi	r25, 0x0B	; 11
    dc10:	0e 94 cd 56 	call	0xad9a	; 0xad9a <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    dc14:	df 91       	pop	r29
    dc16:	cf 91       	pop	r28
    dc18:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    dc1a:	0c 94 21 6d 	jmp	0xda42	; 0xda42 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    dc1e:	82 30       	cpi	r24, 0x02	; 2
    dc20:	a9 f4       	brne	.+42     	; 0xdc4c <update_splash+0x100>
	{
		demo_counter = 0;
    dc22:	10 92 34 0b 	sts	0x0B34, r1
    dc26:	10 92 33 0b 	sts	0x0B33, r1
		SFX_NAVIGATE;
    dc2a:	2f ef       	ldi	r18, 0xFF	; 255
    dc2c:	47 e1       	ldi	r20, 0x17	; 23
    dc2e:	65 e0       	ldi	r22, 0x05	; 5
    dc30:	84 e0       	ldi	r24, 0x04	; 4
    dc32:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
		fade_through();
    dc36:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
		load_eeprom(&scores);
    dc3a:	88 ec       	ldi	r24, 0xC8	; 200
    dc3c:	9b e0       	ldi	r25, 0x0B	; 11
    dc3e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    dc42:	df 91       	pop	r29
    dc44:	cf 91       	pop	r28
    dc46:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    dc48:	0c 94 c6 65 	jmp	0xcb8c	; 0xcb8c <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    dc4c:	80 91 33 0b 	lds	r24, 0x0B33
    dc50:	90 91 34 0b 	lds	r25, 0x0B34
    dc54:	88 35       	cpi	r24, 0x58	; 88
    dc56:	92 40       	sbci	r25, 0x02	; 2
    dc58:	08 f4       	brcc	.+2      	; 0xdc5c <update_splash+0x110>
    dc5a:	45 c0       	rjmp	.+138    	; 0xdce6 <update_splash+0x19a>
	{
		demo_counter = 0;
    dc5c:	10 92 34 0b 	sts	0x0B34, r1
    dc60:	10 92 33 0b 	sts	0x0B33, r1
		if (demo_choice % 2 == 0)
    dc64:	80 91 32 0b 	lds	r24, 0x0B32
    dc68:	80 fd       	sbrc	r24, 0
    dc6a:	29 c0       	rjmp	.+82     	; 0xdcbe <update_splash+0x172>
		{
			game.selection = CPUVCPU;
    dc6c:	83 e0       	ldi	r24, 0x03	; 3
    dc6e:	80 93 1b 0c 	sts	0x0C1B, r24
			player1.handle_id = 9;
    dc72:	c9 e0       	ldi	r28, 0x09	; 9
    dc74:	c0 93 44 0c 	sts	0x0C44, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    dc78:	43 e0       	ldi	r20, 0x03	; 3
    dc7a:	6c e0       	ldi	r22, 0x0C	; 12
    dc7c:	7c e0       	ldi	r23, 0x0C	; 12
    dc7e:	85 e4       	ldi	r24, 0x45	; 69
    dc80:	9c e0       	ldi	r25, 0x0C	; 12
    dc82:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
			player2.handle_id = 9;
    dc86:	c0 93 b2 0f 	sts	0x0FB2, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    dc8a:	43 e0       	ldi	r20, 0x03	; 3
    dc8c:	6c e0       	ldi	r22, 0x0C	; 12
    dc8e:	7c e0       	ldi	r23, 0x0C	; 12
    dc90:	83 eb       	ldi	r24, 0xB3	; 179
    dc92:	9f e0       	ldi	r25, 0x0F	; 15
    dc94:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
			SFX_NAVIGATE;
    dc98:	2f ef       	ldi	r18, 0xFF	; 255
    dc9a:	47 e1       	ldi	r20, 0x17	; 23
    dc9c:	65 e0       	ldi	r22, 0x05	; 5
    dc9e:	84 e0       	ldi	r24, 0x04	; 4
    dca0:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
			clear_sprites();
    dca4:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <clear_sprites>
			fade_through();
    dca8:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
			level_transition(LBRandom(0, 10));
    dcac:	6a e0       	ldi	r22, 0x0A	; 10
    dcae:	70 e0       	ldi	r23, 0x00	; 0
    dcb0:	80 e0       	ldi	r24, 0x00	; 0
    dcb2:	90 e0       	ldi	r25, 0x00	; 0
    dcb4:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    dcb8:	0e 94 9b 63 	call	0xc736	; 0xc736 <level_transition>
    dcbc:	0e c0       	rjmp	.+28     	; 0xdcda <update_splash+0x18e>
		}
		else
		{
			SFX_NAVIGATE;
    dcbe:	2f ef       	ldi	r18, 0xFF	; 255
    dcc0:	47 e1       	ldi	r20, 0x17	; 23
    dcc2:	65 e0       	ldi	r22, 0x05	; 5
    dcc4:	84 e0       	ldi	r24, 0x04	; 4
    dcc6:	0e 94 7e 47 	call	0x8efc	; 0x8efc <TriggerNote>
			fade_through();
    dcca:	0e 94 df 56 	call	0xadbe	; 0xadbe <fade_through>
			load_eeprom(&scores);
    dcce:	88 ec       	ldi	r24, 0xC8	; 200
    dcd0:	9b e0       	ldi	r25, 0x0B	; 11
    dcd2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <load_eeprom>
			load_tank_rank();
    dcd6:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <load_tank_rank>
		}
		demo_choice++;
    dcda:	80 91 32 0b 	lds	r24, 0x0B32
    dcde:	8f 5f       	subi	r24, 0xFF	; 255
    dce0:	80 93 32 0b 	sts	0x0B32, r24
		return;
    dce4:	09 c0       	rjmp	.+18     	; 0xdcf8 <update_splash+0x1ac>
		
	}
	demo_counter++;
    dce6:	80 91 33 0b 	lds	r24, 0x0B33
    dcea:	90 91 34 0b 	lds	r25, 0x0B34
    dcee:	01 96       	adiw	r24, 0x01	; 1
    dcf0:	90 93 34 0b 	sts	0x0B34, r25
    dcf4:	80 93 33 0b 	sts	0x0B33, r24
}
    dcf8:	df 91       	pop	r29
    dcfa:	cf 91       	pop	r28
    dcfc:	0f 91       	pop	r16
    dcfe:	08 95       	ret

0000dd00 <update_handle_select>:
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    dd00:	0f 93       	push	r16
    dd02:	1f 93       	push	r17
    dd04:	cf 93       	push	r28
    dd06:	df 93       	push	r29
    dd08:	8c 01       	movw	r16, r24
    dd0a:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    dd0c:	26 e0       	ldi	r18, 0x06	; 6
    dd0e:	42 e0       	ldi	r20, 0x02	; 2
    dd10:	bc 01       	movw	r22, r24
    dd12:	8a e2       	ldi	r24, 0x2A	; 42
    dd14:	9b e0       	ldi	r25, 0x0B	; 11
    dd16:	0e 94 63 6c 	call	0xd8c6	; 0xd8c6 <_handle_select_render_helper>
	if (game.selection == PVP)
    dd1a:	80 91 1b 0c 	lds	r24, 0x0C1B
    dd1e:	81 30       	cpi	r24, 0x01	; 1
    dd20:	39 f4       	brne	.+14     	; 0xdd30 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    dd22:	28 e0       	ldi	r18, 0x08	; 8
    dd24:	43 e1       	ldi	r20, 0x13	; 19
    dd26:	be 01       	movw	r22, r28
    dd28:	84 e2       	ldi	r24, 0x24	; 36
    dd2a:	9b e0       	ldi	r25, 0x0B	; 11
    dd2c:	0e 94 63 6c 	call	0xd8c6	; 0xd8c6 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    dd30:	49 e3       	ldi	r20, 0x39	; 57
    dd32:	5c e0       	ldi	r21, 0x0C	; 12
    dd34:	b8 01       	movw	r22, r16
    dd36:	8a e2       	ldi	r24, 0x2A	; 42
    dd38:	9b e0       	ldi	r25, 0x0B	; 11
    dd3a:	0e 94 83 6b 	call	0xd706	; 0xd706 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    dd3e:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    dd42:	80 91 1b 0c 	lds	r24, 0x0C1B
    dd46:	81 30       	cpi	r24, 0x01	; 1
    dd48:	19 f0       	breq	.+6      	; 0xdd50 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dd4a:	12 30       	cpi	r17, 0x02	; 2
    dd4c:	69 f0       	breq	.+26     	; 0xdd68 <update_handle_select+0x68>
    dd4e:	21 c0       	rjmp	.+66     	; 0xdd92 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    dd50:	47 ea       	ldi	r20, 0xA7	; 167
    dd52:	5f e0       	ldi	r21, 0x0F	; 15
    dd54:	be 01       	movw	r22, r28
    dd56:	84 e2       	ldi	r24, 0x24	; 36
    dd58:	9b e0       	ldi	r25, 0x0B	; 11
    dd5a:	0e 94 83 6b 	call	0xd706	; 0xd706 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    dd5e:	80 91 29 0b 	lds	r24, 0x0B29
    dd62:	82 30       	cpi	r24, 0x02	; 2
    dd64:	b1 f4       	brne	.+44     	; 0xdd92 <update_handle_select+0x92>
    dd66:	f1 cf       	rjmp	.-30     	; 0xdd4a <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    dd68:	80 91 1b 0c 	lds	r24, 0x0C1B
    dd6c:	81 11       	cpse	r24, r1
    dd6e:	0a c0       	rjmp	.+20     	; 0xdd84 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    dd70:	89 e0       	ldi	r24, 0x09	; 9
    dd72:	80 93 b2 0f 	sts	0x0FB2, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    dd76:	43 e0       	ldi	r20, 0x03	; 3
    dd78:	6c e0       	ldi	r22, 0x0C	; 12
    dd7a:	7c e0       	ldi	r23, 0x0C	; 12
    dd7c:	83 eb       	ldi	r24, 0xB3	; 179
    dd7e:	9f e0       	ldi	r25, 0x0F	; 15
    dd80:	0e 94 a9 53 	call	0xa752	; 0xa752 <LBCopyChars>
		}
		level_transition(0);
    dd84:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    dd86:	df 91       	pop	r29
    dd88:	cf 91       	pop	r28
    dd8a:	1f 91       	pop	r17
    dd8c:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    dd8e:	0c 94 9b 63 	jmp	0xc736	; 0xc736 <level_transition>
	}
}
    dd92:	df 91       	pop	r29
    dd94:	cf 91       	pop	r28
    dd96:	1f 91       	pop	r17
    dd98:	0f 91       	pop	r16
    dd9a:	08 95       	ret

0000dd9c <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    dd9c:	00 97       	sbiw	r24, 0x00	; 0
    dd9e:	41 f0       	breq	.+16     	; 0xddb0 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    dda0:	81 30       	cpi	r24, 0x01	; 1
    dda2:	91 05       	cpc	r25, r1
    dda4:	41 f0       	breq	.+16     	; 0xddb6 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    dda6:	82 30       	cpi	r24, 0x02	; 2
    dda8:	91 05       	cpc	r25, r1
    ddaa:	41 f0       	breq	.+16     	; 0xddbc <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    ddac:	03 97       	sbiw	r24, 0x03	; 3
    ddae:	49 f0       	breq	.+18     	; 0xddc2 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ddb0:	80 e1       	ldi	r24, 0x10	; 16
    ddb2:	90 e0       	ldi	r25, 0x00	; 0
    ddb4:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    ddb6:	80 e2       	ldi	r24, 0x20	; 32
    ddb8:	90 e0       	ldi	r25, 0x00	; 0
    ddba:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    ddbc:	80 e4       	ldi	r24, 0x40	; 64
    ddbe:	90 e0       	ldi	r25, 0x00	; 0
    ddc0:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    ddc2:	80 e8       	ldi	r24, 0x80	; 128
    ddc4:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    ddc6:	08 95       	ret

0000ddc8 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    ddc8:	8f 92       	push	r8
    ddca:	9f 92       	push	r9
    ddcc:	af 92       	push	r10
    ddce:	bf 92       	push	r11
    ddd0:	cf 92       	push	r12
    ddd2:	df 92       	push	r13
    ddd4:	ef 92       	push	r14
    ddd6:	ff 92       	push	r15
    ddd8:	0f 93       	push	r16
    ddda:	1f 93       	push	r17
    dddc:	cf 93       	push	r28
    ddde:	df 93       	push	r29
    dde0:	f8 2e       	mov	r15, r24
    dde2:	e6 2e       	mov	r14, r22
    dde4:	d4 2e       	mov	r13, r20
    dde6:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    dde8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ddea:	88 23       	and	r24, r24
    ddec:	09 f4       	brne	.+2      	; 0xddf0 <crash_and_turn+0x28>
    ddee:	a8 c0       	rjmp	.+336    	; 0xdf40 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    ddf0:	f8 01       	movw	r30, r16
    ddf2:	c4 80       	ldd	r12, Z+4	; 0x04
    ddf4:	c4 fe       	sbrs	r12, 4
    ddf6:	23 c0       	rjmp	.+70     	; 0xde3e <crash_and_turn+0x76>
    ddf8:	fe e1       	ldi	r31, 0x1E	; 30
    ddfa:	6f 02       	muls	r22, r31
    ddfc:	40 01       	movw	r8, r0
    ddfe:	11 24       	eor	r1, r1
    de00:	af 2c       	mov	r10, r15
    de02:	bb 24       	eor	r11, r11
    de04:	a7 fc       	sbrc	r10, 7
    de06:	b0 94       	com	r11
    de08:	c4 01       	movw	r24, r8
    de0a:	8a 0d       	add	r24, r10
    de0c:	9b 1d       	adc	r25, r11
    de0e:	01 97       	sbiw	r24, 0x01	; 1
    de10:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de14:	81 11       	cpse	r24, r1
    de16:	13 c0       	rjmp	.+38     	; 0xde3e <crash_and_turn+0x76>
    de18:	c4 01       	movw	r24, r8
    de1a:	8a 0d       	add	r24, r10
    de1c:	9b 1d       	adc	r25, r11
    de1e:	4d 96       	adiw	r24, 0x1d	; 29
    de20:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de24:	81 11       	cpse	r24, r1
    de26:	0b c0       	rjmp	.+22     	; 0xde3e <crash_and_turn+0x76>
    de28:	c4 01       	movw	r24, r8
    de2a:	8a 0d       	add	r24, r10
    de2c:	9b 1d       	adc	r25, r11
    de2e:	cb 96       	adiw	r24, 0x3b	; 59
    de30:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de34:	81 11       	cpse	r24, r1
    de36:	03 c0       	rjmp	.+6      	; 0xde3e <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    de38:	80 e4       	ldi	r24, 0x40	; 64
    de3a:	90 e0       	ldi	r25, 0x00	; 0
    de3c:	6f c0       	rjmp	.+222    	; 0xdf1c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    de3e:	c6 fe       	sbrs	r12, 6
    de40:	23 c0       	rjmp	.+70     	; 0xde88 <crash_and_turn+0xc0>
    de42:	8e 2d       	mov	r24, r14
    de44:	99 27       	eor	r25, r25
    de46:	87 fd       	sbrc	r24, 7
    de48:	90 95       	com	r25
    de4a:	02 96       	adiw	r24, 0x02	; 2
    de4c:	2e e1       	ldi	r18, 0x1E	; 30
    de4e:	28 9f       	mul	r18, r24
    de50:	50 01       	movw	r10, r0
    de52:	29 9f       	mul	r18, r25
    de54:	b0 0c       	add	r11, r0
    de56:	11 24       	eor	r1, r1
    de58:	af 0c       	add	r10, r15
    de5a:	b1 1c       	adc	r11, r1
    de5c:	f7 fc       	sbrc	r15, 7
    de5e:	ba 94       	dec	r11
    de60:	c5 01       	movw	r24, r10
    de62:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de66:	81 11       	cpse	r24, r1
    de68:	0f c0       	rjmp	.+30     	; 0xde88 <crash_and_turn+0xc0>
    de6a:	c5 01       	movw	r24, r10
    de6c:	01 96       	adiw	r24, 0x01	; 1
    de6e:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de72:	81 11       	cpse	r24, r1
    de74:	09 c0       	rjmp	.+18     	; 0xde88 <crash_and_turn+0xc0>
    de76:	c5 01       	movw	r24, r10
    de78:	02 96       	adiw	r24, 0x02	; 2
    de7a:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    de7e:	81 11       	cpse	r24, r1
    de80:	03 c0       	rjmp	.+6      	; 0xde88 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    de82:	80 e2       	ldi	r24, 0x20	; 32
    de84:	90 e0       	ldi	r25, 0x00	; 0
    de86:	4a c0       	rjmp	.+148    	; 0xdf1c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    de88:	c5 fe       	sbrs	r12, 5
    de8a:	24 c0       	rjmp	.+72     	; 0xded4 <crash_and_turn+0x10c>
    de8c:	fe 2d       	mov	r31, r14
    de8e:	8e e1       	ldi	r24, 0x1E	; 30
    de90:	f8 02       	muls	r31, r24
    de92:	40 01       	movw	r8, r0
    de94:	11 24       	eor	r1, r1
    de96:	af 2c       	mov	r10, r15
    de98:	bb 24       	eor	r11, r11
    de9a:	a7 fc       	sbrc	r10, 7
    de9c:	b0 94       	com	r11
    de9e:	c4 01       	movw	r24, r8
    dea0:	8a 0d       	add	r24, r10
    dea2:	9b 1d       	adc	r25, r11
    dea4:	02 96       	adiw	r24, 0x02	; 2
    dea6:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    deaa:	81 11       	cpse	r24, r1
    deac:	13 c0       	rjmp	.+38     	; 0xded4 <crash_and_turn+0x10c>
    deae:	c4 01       	movw	r24, r8
    deb0:	8a 0d       	add	r24, r10
    deb2:	9b 1d       	adc	r25, r11
    deb4:	80 96       	adiw	r24, 0x20	; 32
    deb6:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    deba:	81 11       	cpse	r24, r1
    debc:	0b c0       	rjmp	.+22     	; 0xded4 <crash_and_turn+0x10c>
    debe:	c4 01       	movw	r24, r8
    dec0:	8a 0d       	add	r24, r10
    dec2:	9b 1d       	adc	r25, r11
    dec4:	ce 96       	adiw	r24, 0x3e	; 62
    dec6:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    deca:	81 11       	cpse	r24, r1
    decc:	03 c0       	rjmp	.+6      	; 0xded4 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    dece:	80 e8       	ldi	r24, 0x80	; 128
    ded0:	90 e0       	ldi	r25, 0x00	; 0
    ded2:	24 c0       	rjmp	.+72     	; 0xdf1c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    ded4:	c7 fe       	sbrs	r12, 7
    ded6:	29 c0       	rjmp	.+82     	; 0xdf2a <crash_and_turn+0x162>
    ded8:	8e 2d       	mov	r24, r14
    deda:	99 27       	eor	r25, r25
    dedc:	87 fd       	sbrc	r24, 7
    dede:	90 95       	com	r25
    dee0:	01 97       	sbiw	r24, 0x01	; 1
    dee2:	2e e1       	ldi	r18, 0x1E	; 30
    dee4:	28 9f       	mul	r18, r24
    dee6:	50 01       	movw	r10, r0
    dee8:	29 9f       	mul	r18, r25
    deea:	b0 0c       	add	r11, r0
    deec:	11 24       	eor	r1, r1
    deee:	af 0c       	add	r10, r15
    def0:	b1 1c       	adc	r11, r1
    def2:	f7 fc       	sbrc	r15, 7
    def4:	ba 94       	dec	r11
    def6:	c5 01       	movw	r24, r10
    def8:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    defc:	81 11       	cpse	r24, r1
    defe:	15 c0       	rjmp	.+42     	; 0xdf2a <crash_and_turn+0x162>
    df00:	c5 01       	movw	r24, r10
    df02:	01 96       	adiw	r24, 0x01	; 1
    df04:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    df08:	81 11       	cpse	r24, r1
    df0a:	0f c0       	rjmp	.+30     	; 0xdf2a <crash_and_turn+0x162>
    df0c:	c5 01       	movw	r24, r10
    df0e:	02 96       	adiw	r24, 0x02	; 2
    df10:	0e 94 ec 5a 	call	0xb5d8	; 0xb5d8 <solid_tile>
    df14:	81 11       	cpse	r24, r1
    df16:	09 c0       	rjmp	.+18     	; 0xdf2a <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    df18:	80 e1       	ldi	r24, 0x10	; 16
    df1a:	90 e0       	ldi	r25, 0x00	; 0
    df1c:	f8 01       	movw	r30, r16
    df1e:	95 83       	std	Z+5, r25	; 0x05
    df20:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    df22:	ce 01       	movw	r24, r28
    df24:	0e 94 34 5a 	call	0xb468	; 0xb468 <recoil_sprite>
			recoiled = 0;
    df28:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    df2a:	f8 01       	movw	r30, r16
    df2c:	24 81       	ldd	r18, Z+4	; 0x04
    df2e:	35 81       	ldd	r19, Z+5	; 0x05
    df30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    df32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    df34:	82 23       	and	r24, r18
    df36:	93 23       	and	r25, r19
    df38:	89 2b       	or	r24, r25
    df3a:	11 f0       	breq	.+4      	; 0xdf40 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    df3c:	1b 8e       	std	Y+27, r1	; 0x1b
    df3e:	1c c0       	rjmp	.+56     	; 0xdf78 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    df40:	dd 20       	and	r13, r13
    df42:	d1 f0       	breq	.+52     	; 0xdf78 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    df44:	f8 01       	movw	r30, r16
    df46:	84 81       	ldd	r24, Z+4	; 0x04
    df48:	86 ff       	sbrs	r24, 6
    df4a:	03 c0       	rjmp	.+6      	; 0xdf52 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    df4c:	80 e1       	ldi	r24, 0x10	; 16
    df4e:	90 e0       	ldi	r25, 0x00	; 0
    df50:	0f c0       	rjmp	.+30     	; 0xdf70 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    df52:	84 ff       	sbrs	r24, 4
    df54:	03 c0       	rjmp	.+6      	; 0xdf5c <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    df56:	80 e8       	ldi	r24, 0x80	; 128
    df58:	90 e0       	ldi	r25, 0x00	; 0
    df5a:	09 c0       	rjmp	.+18     	; 0xdf6e <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    df5c:	87 ff       	sbrs	r24, 7
    df5e:	03 c0       	rjmp	.+6      	; 0xdf66 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    df60:	80 e2       	ldi	r24, 0x20	; 32
    df62:	90 e0       	ldi	r25, 0x00	; 0
    df64:	04 c0       	rjmp	.+8      	; 0xdf6e <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    df66:	85 ff       	sbrs	r24, 5
    df68:	07 c0       	rjmp	.+14     	; 0xdf78 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    df6a:	80 e4       	ldi	r24, 0x40	; 64
    df6c:	90 e0       	ldi	r25, 0x00	; 0
    df6e:	f8 01       	movw	r30, r16
    df70:	95 83       	std	Z+5, r25	; 0x05
    df72:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    df74:	81 e0       	ldi	r24, 0x01	; 1
    df76:	8b 8f       	std	Y+27, r24	; 0x1b
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    df78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    df7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    df7c:	80 31       	cpi	r24, 0x10	; 16
    df7e:	91 05       	cpc	r25, r1
    df80:	19 f0       	breq	.+6      	; 0xdf88 <crash_and_turn+0x1c0>
    df82:	80 32       	cpi	r24, 0x20	; 32
    df84:	91 05       	cpc	r25, r1
    df86:	19 f4       	brne	.+6      	; 0xdf8e <crash_and_turn+0x1c6>
    df88:	2a a1       	ldd	r18, Y+34	; 0x22
    df8a:	e2 16       	cp	r14, r18
    df8c:	59 f0       	breq	.+22     	; 0xdfa4 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    df8e:	80 34       	cpi	r24, 0x40	; 64
    df90:	91 05       	cpc	r25, r1
    df92:	19 f0       	breq	.+6      	; 0xdf9a <crash_and_turn+0x1d2>
    df94:	80 38       	cpi	r24, 0x80	; 128
    df96:	91 05       	cpc	r25, r1
    df98:	39 f4       	brne	.+14     	; 0xdfa8 <crash_and_turn+0x1e0>
    df9a:	81 e0       	ldi	r24, 0x01	; 1
    df9c:	9a a1       	ldd	r25, Y+34	; 0x22
    df9e:	f9 12       	cpse	r15, r25
    dfa0:	03 c0       	rjmp	.+6      	; 0xdfa8 <crash_and_turn+0x1e0>
    dfa2:	03 c0       	rjmp	.+6      	; 0xdfaa <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    dfa4:	81 e0       	ldi	r24, 0x01	; 1
    dfa6:	01 c0       	rjmp	.+2      	; 0xdfaa <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    dfa8:	80 e0       	ldi	r24, 0x00	; 0
}
    dfaa:	df 91       	pop	r29
    dfac:	cf 91       	pop	r28
    dfae:	1f 91       	pop	r17
    dfb0:	0f 91       	pop	r16
    dfb2:	ff 90       	pop	r15
    dfb4:	ef 90       	pop	r14
    dfb6:	df 90       	pop	r13
    dfb8:	cf 90       	pop	r12
    dfba:	bf 90       	pop	r11
    dfbc:	af 90       	pop	r10
    dfbe:	9f 90       	pop	r9
    dfc0:	8f 90       	pop	r8
    dfc2:	08 95       	ret

0000dfc4 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    dfc4:	48 2f       	mov	r20, r24
    dfc6:	55 27       	eor	r21, r21
    dfc8:	47 fd       	sbrc	r20, 7
    dfca:	50 95       	com	r21
    dfcc:	57 ff       	sbrs	r21, 7
    dfce:	03 c0       	rjmp	.+6      	; 0xdfd6 <get_cpu_goal_direction+0x12>
    dfd0:	51 95       	neg	r21
    dfd2:	41 95       	neg	r20
    dfd4:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    dfd6:	26 2f       	mov	r18, r22
    dfd8:	33 27       	eor	r19, r19
    dfda:	27 fd       	sbrc	r18, 7
    dfdc:	30 95       	com	r19
    dfde:	37 ff       	sbrs	r19, 7
    dfe0:	03 c0       	rjmp	.+6      	; 0xdfe8 <get_cpu_goal_direction+0x24>
    dfe2:	31 95       	neg	r19
    dfe4:	21 95       	neg	r18
    dfe6:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    dfe8:	24 17       	cp	r18, r20
    dfea:	2c f4       	brge	.+10     	; 0xdff6 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    dfec:	18 16       	cp	r1, r24
    dfee:	44 f4       	brge	.+16     	; 0xe000 <get_cpu_goal_direction+0x3c>
    dff0:	80 e8       	ldi	r24, 0x80	; 128
    dff2:	90 e0       	ldi	r25, 0x00	; 0
    dff4:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    dff6:	16 16       	cp	r1, r22
    dff8:	34 f4       	brge	.+12     	; 0xe006 <get_cpu_goal_direction+0x42>
    dffa:	80 e2       	ldi	r24, 0x20	; 32
    dffc:	90 e0       	ldi	r25, 0x00	; 0
    dffe:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    e000:	80 e4       	ldi	r24, 0x40	; 64
    e002:	90 e0       	ldi	r25, 0x00	; 0
    e004:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    e006:	80 e1       	ldi	r24, 0x10	; 16
    e008:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    e00a:	08 95       	ret

0000e00c <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    e00c:	2f 92       	push	r2
    e00e:	3f 92       	push	r3
    e010:	4f 92       	push	r4
    e012:	5f 92       	push	r5
    e014:	6f 92       	push	r6
    e016:	7f 92       	push	r7
    e018:	8f 92       	push	r8
    e01a:	9f 92       	push	r9
    e01c:	af 92       	push	r10
    e01e:	bf 92       	push	r11
    e020:	cf 92       	push	r12
    e022:	df 92       	push	r13
    e024:	ef 92       	push	r14
    e026:	ff 92       	push	r15
    e028:	0f 93       	push	r16
    e02a:	1f 93       	push	r17
    e02c:	cf 93       	push	r28
    e02e:	df 93       	push	r29
    e030:	00 d0       	rcall	.+0      	; 0xe032 <get_cpu_joypad_state+0x26>
    e032:	00 d0       	rcall	.+0      	; 0xe034 <get_cpu_joypad_state+0x28>
    e034:	cd b7       	in	r28, 0x3d	; 61
    e036:	de b7       	in	r29, 0x3e	; 62
    e038:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e03a:	db 01       	movw	r26, r22
    e03c:	13 96       	adiw	r26, 0x03	; 3
    e03e:	4d 90       	ld	r4, X+
    e040:	5d 90       	ld	r5, X+
    e042:	6d 90       	ld	r6, X+
    e044:	7c 90       	ld	r7, X
    e046:	16 97       	sbiw	r26, 0x06	; 6
	goal_y = other_player->shared.y / 8 - 3;
    e048:	17 96       	adiw	r26, 0x07	; 7
    e04a:	8d 90       	ld	r8, X+
    e04c:	9d 90       	ld	r9, X+
    e04e:	ad 90       	ld	r10, X+
    e050:	bc 90       	ld	r11, X
    e052:	1a 97       	sbiw	r26, 0x0a	; 10
	player_x = player->shared.x / 8;
    e054:	fc 01       	movw	r30, r24
    e056:	c3 80       	ldd	r12, Z+3	; 0x03
    e058:	d4 80       	ldd	r13, Z+4	; 0x04
    e05a:	e5 80       	ldd	r14, Z+5	; 0x05
    e05c:	f6 80       	ldd	r15, Z+6	; 0x06
	player_y =  player->shared.y / 8 - 3;
    e05e:	87 81       	ldd	r24, Z+7	; 0x07
    e060:	90 85       	ldd	r25, Z+8	; 0x08
    e062:	a1 85       	ldd	r26, Z+9	; 0x09
    e064:	b2 85       	ldd	r27, Z+10	; 0x0a
    e066:	89 83       	std	Y+1, r24	; 0x01
    e068:	9a 83       	std	Y+2, r25	; 0x02
    e06a:	ab 83       	std	Y+3, r26	; 0x03
    e06c:	bc 83       	std	Y+4, r27	; 0x04
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    e06e:	87 89       	ldd	r24, Z+23	; 0x17
    e070:	81 11       	cpse	r24, r1
    e072:	06 c0       	rjmp	.+12     	; 0xe080 <get_cpu_joypad_state+0x74>
	{
		p->held = 0;
    e074:	da 01       	movw	r26, r20
    e076:	15 96       	adiw	r26, 0x05	; 5
    e078:	1c 92       	st	X, r1
    e07a:	1e 92       	st	-X, r1
    e07c:	14 97       	sbiw	r26, 0x04	; 4
		return;
    e07e:	45 c1       	rjmp	.+650    	; 0xe30a <get_cpu_joypad_state+0x2fe>
    e080:	8a 01       	movw	r16, r20
    e082:	19 01       	movw	r2, r18
	}
	
	// Shot
	if (shoot_pressed(p))
    e084:	ca 01       	movw	r24, r20
    e086:	0e 94 6f 58 	call	0xb0de	; 0xb0de <shoot_pressed>
    e08a:	88 23       	and	r24, r24
    e08c:	19 f0       	breq	.+6      	; 0xe094 <get_cpu_joypad_state+0x88>
	{
		p->pressed = 0;
    e08e:	f8 01       	movw	r30, r16
    e090:	11 82       	std	Z+1, r1	; 0x01
    e092:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    e094:	20 91 04 01 	lds	r18, 0x0104
    e098:	30 91 05 01 	lds	r19, 0x0105
    e09c:	c9 01       	movw	r24, r18
    e09e:	6a e0       	ldi	r22, 0x0A	; 10
    e0a0:	70 e0       	ldi	r23, 0x00	; 0
    e0a2:	0e 94 38 72 	call	0xe470	; 0xe470 <__udivmodhi4>
    e0a6:	89 2b       	or	r24, r25
    e0a8:	51 f4       	brne	.+20     	; 0xe0be <get_cpu_joypad_state+0xb2>
    e0aa:	d1 01       	movw	r26, r2
    e0ac:	57 96       	adiw	r26, 0x17	; 23
    e0ae:	8c 91       	ld	r24, X
    e0b0:	83 33       	cpi	r24, 0x33	; 51
    e0b2:	28 f0       	brcs	.+10     	; 0xe0be <get_cpu_joypad_state+0xb2>
	{
		p->pressed = BTN_B;
    e0b4:	81 e0       	ldi	r24, 0x01	; 1
    e0b6:	90 e0       	ldi	r25, 0x00	; 0
    e0b8:	f8 01       	movw	r30, r16
    e0ba:	91 83       	std	Z+1, r25	; 0x01
    e0bc:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    e0be:	c9 01       	movw	r24, r18
    e0c0:	64 eb       	ldi	r22, 0xB4	; 180
    e0c2:	70 e0       	ldi	r23, 0x00	; 0
    e0c4:	0e 94 38 72 	call	0xe470	; 0xe470 <__udivmodhi4>
    e0c8:	89 2b       	or	r24, r25
    e0ca:	59 f0       	breq	.+22     	; 0xe0e2 <get_cpu_joypad_state+0xd6>
    e0cc:	d1 01       	movw	r26, r2
    e0ce:	57 96       	adiw	r26, 0x17	; 23
    e0d0:	8c 91       	ld	r24, X
    e0d2:	57 97       	sbiw	r26, 0x17	; 23
    e0d4:	8a 30       	cpi	r24, 0x0A	; 10
    e0d6:	29 f0       	breq	.+10     	; 0xe0e2 <get_cpu_joypad_state+0xd6>
    e0d8:	93 96       	adiw	r26, 0x23	; 35
    e0da:	8c 91       	ld	r24, X
    e0dc:	88 23       	and	r24, r24
    e0de:	09 f4       	brne	.+2      	; 0xe0e2 <get_cpu_joypad_state+0xd6>
    e0e0:	78 c0       	rjmp	.+240    	; 0xe1d2 <get_cpu_joypad_state+0x1c6>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e0e2:	20 e0       	ldi	r18, 0x00	; 0
    e0e4:	30 e0       	ldi	r19, 0x00	; 0
    e0e6:	40 e0       	ldi	r20, 0x00	; 0
    e0e8:	5e e3       	ldi	r21, 0x3E	; 62
    e0ea:	c3 01       	movw	r24, r6
    e0ec:	b2 01       	movw	r22, r4
    e0ee:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e0f2:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
    e0f6:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    e0f8:	20 e0       	ldi	r18, 0x00	; 0
    e0fa:	30 e0       	ldi	r19, 0x00	; 0
    e0fc:	40 e0       	ldi	r20, 0x00	; 0
    e0fe:	5e e3       	ldi	r21, 0x3E	; 62
    e100:	c5 01       	movw	r24, r10
    e102:	b4 01       	movw	r22, r8
    e104:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e108:	20 e0       	ldi	r18, 0x00	; 0
    e10a:	30 e0       	ldi	r19, 0x00	; 0
    e10c:	40 e4       	ldi	r20, 0x40	; 64
    e10e:	50 e4       	ldi	r21, 0x40	; 64
    e110:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    e114:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
    e118:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    e11a:	20 e0       	ldi	r18, 0x00	; 0
    e11c:	30 e0       	ldi	r19, 0x00	; 0
    e11e:	40 e0       	ldi	r20, 0x00	; 0
    e120:	5e e3       	ldi	r21, 0x3E	; 62
    e122:	c7 01       	movw	r24, r14
    e124:	b6 01       	movw	r22, r12
    e126:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e12a:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    e12e:	f7 2c       	mov	r15, r7
    e130:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    e132:	20 e0       	ldi	r18, 0x00	; 0
    e134:	30 e0       	ldi	r19, 0x00	; 0
    e136:	40 e0       	ldi	r20, 0x00	; 0
    e138:	5e e3       	ldi	r21, 0x3E	; 62
    e13a:	69 81       	ldd	r22, Y+1	; 0x01
    e13c:	7a 81       	ldd	r23, Y+2	; 0x02
    e13e:	8b 81       	ldd	r24, Y+3	; 0x03
    e140:	9c 81       	ldd	r25, Y+4	; 0x04
    e142:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e146:	20 e0       	ldi	r18, 0x00	; 0
    e148:	30 e0       	ldi	r19, 0x00	; 0
    e14a:	40 e4       	ldi	r20, 0x40	; 64
    e14c:	50 e4       	ldi	r21, 0x40	; 64
    e14e:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    e152:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    e156:	bb 2d       	mov	r27, r11
    e158:	b6 1b       	sub	r27, r22
    e15a:	6b 2f       	mov	r22, r27
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    e15c:	f1 01       	movw	r30, r2
    e15e:	13 a2       	std	Z+35, r1	; 0x23
		player->feeling_my_way = 0;
    e160:	13 8e       	std	Z+27, r1	; 0x1b
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    e162:	82 e0       	ldi	r24, 0x02	; 2
    e164:	8f 0d       	add	r24, r15
    e166:	85 30       	cpi	r24, 0x05	; 5
    e168:	d0 f4       	brcc	.+52     	; 0xe19e <get_cpu_joypad_state+0x192>
    e16a:	be 3f       	cpi	r27, 0xFE	; 254
    e16c:	c4 f0       	brlt	.+48     	; 0xe19e <get_cpu_joypad_state+0x192>
    e16e:	b3 30       	cpi	r27, 0x03	; 3
    e170:	b4 f4       	brge	.+44     	; 0xe19e <get_cpu_joypad_state+0x192>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    e172:	64 e0       	ldi	r22, 0x04	; 4
    e174:	70 e0       	ldi	r23, 0x00	; 0
    e176:	80 e0       	ldi	r24, 0x00	; 0
    e178:	90 e0       	ldi	r25, 0x00	; 0
    e17a:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    e17e:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <button_map>
    e182:	d1 01       	movw	r26, r2
    e184:	5d 96       	adiw	r26, 0x1d	; 29
    e186:	9c 93       	st	X, r25
    e188:	8e 93       	st	-X, r24
    e18a:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = LBRandom(5, 18);
    e18c:	62 e1       	ldi	r22, 0x12	; 18
    e18e:	70 e0       	ldi	r23, 0x00	; 0
    e190:	85 e0       	ldi	r24, 0x05	; 5
    e192:	90 e0       	ldi	r25, 0x00	; 0
    e194:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    e198:	f1 01       	movw	r30, r2
    e19a:	82 a3       	std	Z+34, r24	; 0x22
    e19c:	12 c0       	rjmp	.+36     	; 0xe1c2 <get_cpu_joypad_state+0x1b6>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    e19e:	8f 2d       	mov	r24, r15
    e1a0:	0e 94 e2 6f 	call	0xdfc4	; 0xdfc4 <get_cpu_goal_direction>
    e1a4:	d1 01       	movw	r26, r2
    e1a6:	5d 96       	adiw	r26, 0x1d	; 29
    e1a8:	9c 93       	st	X, r25
    e1aa:	8e 93       	st	-X, r24
    e1ac:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e1ae:	80 31       	cpi	r24, 0x10	; 16
    e1b0:	91 05       	cpc	r25, r1
    e1b2:	29 f0       	breq	.+10     	; 0xe1be <get_cpu_joypad_state+0x1b2>
    e1b4:	80 97       	sbiw	r24, 0x20	; 32
    e1b6:	19 f0       	breq	.+6      	; 0xe1be <get_cpu_joypad_state+0x1b2>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    e1b8:	92 96       	adiw	r26, 0x22	; 34
    e1ba:	7c 92       	st	X, r7
    e1bc:	02 c0       	rjmp	.+4      	; 0xe1c2 <get_cpu_joypad_state+0x1b6>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e1be:	f1 01       	movw	r30, r2
    e1c0:	b2 a2       	std	Z+34, r11	; 0x22
		}
		p->held = player->goal_direction;
    e1c2:	d1 01       	movw	r26, r2
    e1c4:	5c 96       	adiw	r26, 0x1c	; 28
    e1c6:	8d 91       	ld	r24, X+
    e1c8:	9c 91       	ld	r25, X
    e1ca:	5d 97       	sbiw	r26, 0x1d	; 29
    e1cc:	f8 01       	movw	r30, r16
    e1ce:	95 83       	std	Z+5, r25	; 0x05
    e1d0:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    e1d2:	d1 01       	movw	r26, r2
    e1d4:	13 96       	adiw	r26, 0x03	; 3
    e1d6:	cd 90       	ld	r12, X+
    e1d8:	dd 90       	ld	r13, X+
    e1da:	ed 90       	ld	r14, X+
    e1dc:	fc 90       	ld	r15, X
    e1de:	16 97       	sbiw	r26, 0x06	; 6
    e1e0:	94 96       	adiw	r26, 0x24	; 36
    e1e2:	2d 91       	ld	r18, X+
    e1e4:	3d 91       	ld	r19, X+
    e1e6:	4d 91       	ld	r20, X+
    e1e8:	5c 91       	ld	r21, X
    e1ea:	97 97       	sbiw	r26, 0x27	; 39
    e1ec:	c7 01       	movw	r24, r14
    e1ee:	b6 01       	movw	r22, r12
    e1f0:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    e1f4:	88 23       	and	r24, r24
    e1f6:	21 f0       	breq	.+8      	; 0xe200 <get_cpu_joypad_state+0x1f4>
		player->deadlock_count_x = 0;
    e1f8:	f1 01       	movw	r30, r2
    e1fa:	17 8e       	std	Z+31, r1	; 0x1f
    e1fc:	16 8e       	std	Z+30, r1	; 0x1e
    e1fe:	0a c0       	rjmp	.+20     	; 0xe214 <get_cpu_joypad_state+0x208>
	else 
		player->deadlock_count_x++;
    e200:	d1 01       	movw	r26, r2
    e202:	5e 96       	adiw	r26, 0x1e	; 30
    e204:	8d 91       	ld	r24, X+
    e206:	9c 91       	ld	r25, X
    e208:	5f 97       	sbiw	r26, 0x1f	; 31
    e20a:	01 96       	adiw	r24, 0x01	; 1
    e20c:	5f 96       	adiw	r26, 0x1f	; 31
    e20e:	9c 93       	st	X, r25
    e210:	8e 93       	st	-X, r24
    e212:	5e 97       	sbiw	r26, 0x1e	; 30
	if (player->shared.y != player->old_y)
    e214:	f1 01       	movw	r30, r2
    e216:	87 80       	ldd	r8, Z+7	; 0x07
    e218:	90 84       	ldd	r9, Z+8	; 0x08
    e21a:	a1 84       	ldd	r10, Z+9	; 0x09
    e21c:	b2 84       	ldd	r11, Z+10	; 0x0a
    e21e:	20 a5       	ldd	r18, Z+40	; 0x28
    e220:	31 a5       	ldd	r19, Z+41	; 0x29
    e222:	42 a5       	ldd	r20, Z+42	; 0x2a
    e224:	53 a5       	ldd	r21, Z+43	; 0x2b
    e226:	c5 01       	movw	r24, r10
    e228:	b4 01       	movw	r22, r8
    e22a:	0e 94 c5 72 	call	0xe58a	; 0xe58a <__cmpsf2>
    e22e:	88 23       	and	r24, r24
    e230:	31 f0       	breq	.+12     	; 0xe23e <get_cpu_joypad_state+0x232>
		player->deadlock_count_y = 0;
    e232:	d1 01       	movw	r26, r2
    e234:	91 96       	adiw	r26, 0x21	; 33
    e236:	1c 92       	st	X, r1
    e238:	1e 92       	st	-X, r1
    e23a:	90 97       	sbiw	r26, 0x20	; 32
    e23c:	06 c0       	rjmp	.+12     	; 0xe24a <get_cpu_joypad_state+0x23e>
	else
		player->deadlock_count_y++;
    e23e:	f1 01       	movw	r30, r2
    e240:	80 a1       	ldd	r24, Z+32	; 0x20
    e242:	91 a1       	ldd	r25, Z+33	; 0x21
    e244:	01 96       	adiw	r24, 0x01	; 1
    e246:	91 a3       	std	Z+33, r25	; 0x21
    e248:	80 a3       	std	Z+32, r24	; 0x20
	player->old_x = player->shared.x;
    e24a:	d1 01       	movw	r26, r2
    e24c:	94 96       	adiw	r26, 0x24	; 36
    e24e:	cd 92       	st	X+, r12
    e250:	dd 92       	st	X+, r13
    e252:	ed 92       	st	X+, r14
    e254:	fc 92       	st	X, r15
    e256:	97 97       	sbiw	r26, 0x27	; 39
	player->old_y = player->shared.y;
    e258:	f1 01       	movw	r30, r2
    e25a:	80 a6       	std	Z+40, r8	; 0x28
    e25c:	91 a6       	std	Z+41, r9	; 0x29
    e25e:	a2 a6       	std	Z+42, r10	; 0x2a
    e260:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    e262:	86 8d       	ldd	r24, Z+30	; 0x1e
    e264:	97 8d       	ldd	r25, Z+31	; 0x1f
    e266:	80 34       	cpi	r24, 0x40	; 64
    e268:	91 40       	sbci	r25, 0x01	; 1
    e26a:	88 f0       	brcs	.+34     	; 0xe28e <get_cpu_joypad_state+0x282>
	{
		p->held = button_map(LBRandom(2, 4));
    e26c:	64 e0       	ldi	r22, 0x04	; 4
    e26e:	70 e0       	ldi	r23, 0x00	; 0
    e270:	82 e0       	ldi	r24, 0x02	; 2
    e272:	90 e0       	ldi	r25, 0x00	; 0
    e274:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    e278:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <button_map>
    e27c:	d8 01       	movw	r26, r16
    e27e:	15 96       	adiw	r26, 0x05	; 5
    e280:	9c 93       	st	X, r25
    e282:	8e 93       	st	-X, r24
    e284:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    e286:	f1 01       	movw	r30, r2
    e288:	17 8e       	std	Z+31, r1	; 0x1f
    e28a:	16 8e       	std	Z+30, r1	; 0x1e
    e28c:	3e c0       	rjmp	.+124    	; 0xe30a <get_cpu_joypad_state+0x2fe>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    e28e:	d1 01       	movw	r26, r2
    e290:	90 96       	adiw	r26, 0x20	; 32
    e292:	8d 91       	ld	r24, X+
    e294:	9c 91       	ld	r25, X
    e296:	91 97       	sbiw	r26, 0x21	; 33
    e298:	80 34       	cpi	r24, 0x40	; 64
    e29a:	91 40       	sbci	r25, 0x01	; 1
    e29c:	88 f0       	brcs	.+34     	; 0xe2c0 <get_cpu_joypad_state+0x2b4>
	{
		p->held = button_map(LBRandom(0, 2));
    e29e:	62 e0       	ldi	r22, 0x02	; 2
    e2a0:	70 e0       	ldi	r23, 0x00	; 0
    e2a2:	80 e0       	ldi	r24, 0x00	; 0
    e2a4:	90 e0       	ldi	r25, 0x00	; 0
    e2a6:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <LBRandom>
    e2aa:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <button_map>
    e2ae:	f8 01       	movw	r30, r16
    e2b0:	95 83       	std	Z+5, r25	; 0x05
    e2b2:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    e2b4:	d1 01       	movw	r26, r2
    e2b6:	91 96       	adiw	r26, 0x21	; 33
    e2b8:	1c 92       	st	X, r1
    e2ba:	1e 92       	st	-X, r1
    e2bc:	90 97       	sbiw	r26, 0x20	; 32
    e2be:	25 c0       	rjmp	.+74     	; 0xe30a <get_cpu_joypad_state+0x2fe>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    e2c0:	20 e0       	ldi	r18, 0x00	; 0
    e2c2:	30 e0       	ldi	r19, 0x00	; 0
    e2c4:	40 e0       	ldi	r20, 0x00	; 0
    e2c6:	5e e3       	ldi	r21, 0x3E	; 62
    e2c8:	c5 01       	movw	r24, r10
    e2ca:	b4 01       	movw	r22, r8
    e2cc:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e2d0:	20 e0       	ldi	r18, 0x00	; 0
    e2d2:	30 e0       	ldi	r19, 0x00	; 0
    e2d4:	40 e4       	ldi	r20, 0x40	; 64
    e2d6:	50 e4       	ldi	r21, 0x40	; 64
    e2d8:	0e 94 60 72 	call	0xe4c0	; 0xe4c0 <__subsf3>
    e2dc:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
    e2e0:	b6 2e       	mov	r11, r22
    e2e2:	20 e0       	ldi	r18, 0x00	; 0
    e2e4:	30 e0       	ldi	r19, 0x00	; 0
    e2e6:	40 e0       	ldi	r20, 0x00	; 0
    e2e8:	5e e3       	ldi	r21, 0x3E	; 62
    e2ea:	c7 01       	movw	r24, r14
    e2ec:	b6 01       	movw	r22, r12
    e2ee:	0e 94 18 74 	call	0xe830	; 0xe830 <__mulsf3>
    e2f2:	0e 94 31 73 	call	0xe662	; 0xe662 <__fixsfsi>
    e2f6:	86 2f       	mov	r24, r22
    e2f8:	91 01       	movw	r18, r2
    e2fa:	f1 01       	movw	r30, r2
    e2fc:	42 81       	ldd	r20, Z+2	; 0x02
    e2fe:	6b 2d       	mov	r22, r11
    e300:	0e 94 e4 6e 	call	0xddc8	; 0xddc8 <crash_and_turn>
    e304:	d1 01       	movw	r26, r2
    e306:	93 96       	adiw	r26, 0x23	; 35
    e308:	8c 93       	st	X, r24
}
    e30a:	0f 90       	pop	r0
    e30c:	0f 90       	pop	r0
    e30e:	0f 90       	pop	r0
    e310:	0f 90       	pop	r0
    e312:	df 91       	pop	r29
    e314:	cf 91       	pop	r28
    e316:	1f 91       	pop	r17
    e318:	0f 91       	pop	r16
    e31a:	ff 90       	pop	r15
    e31c:	ef 90       	pop	r14
    e31e:	df 90       	pop	r13
    e320:	cf 90       	pop	r12
    e322:	bf 90       	pop	r11
    e324:	af 90       	pop	r10
    e326:	9f 90       	pop	r9
    e328:	8f 90       	pop	r8
    e32a:	7f 90       	pop	r7
    e32c:	6f 90       	pop	r6
    e32e:	5f 90       	pop	r5
    e330:	4f 90       	pop	r4
    e332:	3f 90       	pop	r3
    e334:	2f 90       	pop	r2
    e336:	08 95       	ret

0000e338 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    e338:	8f e5       	ldi	r24, 0x5F	; 95
    e33a:	93 e0       	ldi	r25, 0x03	; 3
    e33c:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <InitMusicPlayer>
	SetMasterVolume(0xff);
    e340:	8f ef       	ldi	r24, 0xFF	; 255
    e342:	0e 94 dd 49 	call	0x93ba	; 0x93ba <SetMasterVolume>
	SetTileTable(tiles_data);
    e346:	8d e5       	ldi	r24, 0x5D	; 93
    e348:	94 e4       	ldi	r25, 0x44	; 68
    e34a:	0e 94 d7 43 	call	0x87ae	; 0x87ae <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e34e:	8c ec       	ldi	r24, 0xCC	; 204
    e350:	9a e3       	ldi	r25, 0x3A	; 58
    e352:	0e 94 b3 43 	call	0x8766	; 0x8766 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e356:	8b e9       	ldi	r24, 0x9B	; 155
    e358:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e35c:	60 e0       	ldi	r22, 0x00	; 0
    e35e:	83 e0       	ldi	r24, 0x03	; 3
    e360:	0e 94 cc 52 	call	0xa598	; 0xa598 <FadeIn>
	ClearVram();
    e364:	0e 94 b8 43 	call	0x8770	; 0x8770 <ClearVram>
	init_scores(&scores);
    e368:	88 ec       	ldi	r24, 0xC8	; 200
    e36a:	9b e0       	ldi	r25, 0x0B	; 11
    e36c:	0e 94 2a 55 	call	0xaa54	; 0xaa54 <init_scores>
	init_handles(&handles);
    e370:	8f ee       	ldi	r24, 0xEF	; 239
    e372:	9b e0       	ldi	r25, 0x0B	; 11
    e374:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <init_handles>
	init_game_state();
    e378:	0e 94 90 56 	call	0xad20	; 0xad20 <init_game_state>
	load_splash();
    e37c:	0e 94 8c 65 	call	0xcb18	; 0xcb18 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    e380:	81 e0       	ldi	r24, 0x01	; 1
    e382:	90 e0       	ldi	r25, 0x00	; 0
    e384:	0e 94 a7 52 	call	0xa54e	; 0xa54e <WaitVsync>
		switch (game.current_screen)
    e388:	80 91 0f 0c 	lds	r24, 0x0C0F
    e38c:	81 30       	cpi	r24, 0x01	; 1
    e38e:	91 f0       	breq	.+36     	; 0xe3b4 <main+0x7c>
    e390:	28 f0       	brcs	.+10     	; 0xe39c <main+0x64>
    e392:	82 30       	cpi	r24, 0x02	; 2
    e394:	c9 f0       	breq	.+50     	; 0xe3c8 <main+0x90>
    e396:	83 30       	cpi	r24, 0x03	; 3
    e398:	41 f1       	breq	.+80     	; 0xe3ea <main+0xb2>
    e39a:	54 c0       	rjmp	.+168    	; 0xe444 <main+0x10c>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    e39c:	60 e0       	ldi	r22, 0x00	; 0
    e39e:	81 eb       	ldi	r24, 0xB1	; 177
    e3a0:	9c e0       	ldi	r25, 0x0C	; 12
    e3a2:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
				update_splash(&p1, &p2);
    e3a6:	68 ee       	ldi	r22, 0xE8	; 232
    e3a8:	7b e0       	ldi	r23, 0x0B	; 11
    e3aa:	81 eb       	ldi	r24, 0xB1	; 177
    e3ac:	9c e0       	ldi	r25, 0x0C	; 12
    e3ae:	0e 94 a6 6d 	call	0xdb4c	; 0xdb4c <update_splash>
				break;
    e3b2:	48 c0       	rjmp	.+144    	; 0xe444 <main+0x10c>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e3b4:	60 e0       	ldi	r22, 0x00	; 0
    e3b6:	81 eb       	ldi	r24, 0xB1	; 177
    e3b8:	9c e0       	ldi	r25, 0x0C	; 12
    e3ba:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
				update_tank_rank(&p1);
    e3be:	81 eb       	ldi	r24, 0xB1	; 177
    e3c0:	9c e0       	ldi	r25, 0x0C	; 12
    e3c2:	0e 94 2a 6b 	call	0xd654	; 0xd654 <update_tank_rank>
				break;
    e3c6:	3e c0       	rjmp	.+124    	; 0xe444 <main+0x10c>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    e3c8:	60 e0       	ldi	r22, 0x00	; 0
    e3ca:	81 eb       	ldi	r24, 0xB1	; 177
    e3cc:	9c e0       	ldi	r25, 0x0C	; 12
    e3ce:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    e3d2:	61 e0       	ldi	r22, 0x01	; 1
    e3d4:	88 ee       	ldi	r24, 0xE8	; 232
    e3d6:	9b e0       	ldi	r25, 0x0B	; 11
    e3d8:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    e3dc:	68 ee       	ldi	r22, 0xE8	; 232
    e3de:	7b e0       	ldi	r23, 0x0B	; 11
    e3e0:	81 eb       	ldi	r24, 0xB1	; 177
    e3e2:	9c e0       	ldi	r25, 0x0C	; 12
    e3e4:	0e 94 80 6e 	call	0xdd00	; 0xdd00 <update_handle_select>
				break;
    e3e8:	2d c0       	rjmp	.+90     	; 0xe444 <main+0x10c>
			case LEVEL:
				if (game.selection == PVCPU)
    e3ea:	80 91 1b 0c 	lds	r24, 0x0C1B
    e3ee:	81 11       	cpse	r24, r1
    e3f0:	06 c0       	rjmp	.+12     	; 0xe3fe <main+0xc6>
				{
					LBGetJoyPadState(&p1, 0);
    e3f2:	60 e0       	ldi	r22, 0x00	; 0
    e3f4:	81 eb       	ldi	r24, 0xB1	; 177
    e3f6:	9c e0       	ldi	r25, 0x0C	; 12
    e3f8:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
    e3fc:	0a c0       	rjmp	.+20     	; 0xe412 <main+0xda>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e3fe:	83 30       	cpi	r24, 0x03	; 3
    e400:	89 f4       	brne	.+34     	; 0xe424 <main+0xec>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e402:	41 eb       	ldi	r20, 0xB1	; 177
    e404:	5c e0       	ldi	r21, 0x0C	; 12
    e406:	67 ea       	ldi	r22, 0xA7	; 167
    e408:	7f e0       	ldi	r23, 0x0F	; 15
    e40a:	89 e3       	ldi	r24, 0x39	; 57
    e40c:	9c e0       	ldi	r25, 0x0C	; 12
    e40e:	0e 94 06 70 	call	0xe00c	; 0xe00c <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e412:	48 ee       	ldi	r20, 0xE8	; 232
    e414:	5b e0       	ldi	r21, 0x0B	; 11
    e416:	69 e3       	ldi	r22, 0x39	; 57
    e418:	7c e0       	ldi	r23, 0x0C	; 12
    e41a:	87 ea       	ldi	r24, 0xA7	; 167
    e41c:	9f e0       	ldi	r25, 0x0F	; 15
    e41e:	0e 94 06 70 	call	0xe00c	; 0xe00c <get_cpu_joypad_state>
    e422:	0a c0       	rjmp	.+20     	; 0xe438 <main+0x100>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e424:	60 e0       	ldi	r22, 0x00	; 0
    e426:	81 eb       	ldi	r24, 0xB1	; 177
    e428:	9c e0       	ldi	r25, 0x0C	; 12
    e42a:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e42e:	61 e0       	ldi	r22, 0x01	; 1
    e430:	88 ee       	ldi	r24, 0xE8	; 232
    e432:	9b e0       	ldi	r25, 0x0B	; 11
    e434:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e438:	68 ee       	ldi	r22, 0xE8	; 232
    e43a:	7b e0       	ldi	r23, 0x0B	; 11
    e43c:	81 eb       	ldi	r24, 0xB1	; 177
    e43e:	9c e0       	ldi	r25, 0x0C	; 12
    e440:	0e 94 e0 68 	call	0xd1c0	; 0xd1c0 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e444:	80 91 04 01 	lds	r24, 0x0104
    e448:	90 91 05 01 	lds	r25, 0x0105
    e44c:	01 96       	adiw	r24, 0x01	; 1
    e44e:	90 93 05 01 	sts	0x0105, r25
    e452:	80 93 04 01 	sts	0x0104, r24
	}
    e456:	94 cf       	rjmp	.-216    	; 0xe380 <main+0x48>

0000e458 <__udivmodqi4>:
    e458:	99 1b       	sub	r25, r25
    e45a:	79 e0       	ldi	r23, 0x09	; 9
    e45c:	04 c0       	rjmp	.+8      	; 0xe466 <__udivmodqi4_ep>

0000e45e <__udivmodqi4_loop>:
    e45e:	99 1f       	adc	r25, r25
    e460:	96 17       	cp	r25, r22
    e462:	08 f0       	brcs	.+2      	; 0xe466 <__udivmodqi4_ep>
    e464:	96 1b       	sub	r25, r22

0000e466 <__udivmodqi4_ep>:
    e466:	88 1f       	adc	r24, r24
    e468:	7a 95       	dec	r23
    e46a:	c9 f7       	brne	.-14     	; 0xe45e <__udivmodqi4_loop>
    e46c:	80 95       	com	r24
    e46e:	08 95       	ret

0000e470 <__udivmodhi4>:
    e470:	aa 1b       	sub	r26, r26
    e472:	bb 1b       	sub	r27, r27
    e474:	51 e1       	ldi	r21, 0x11	; 17
    e476:	07 c0       	rjmp	.+14     	; 0xe486 <__udivmodhi4_ep>

0000e478 <__udivmodhi4_loop>:
    e478:	aa 1f       	adc	r26, r26
    e47a:	bb 1f       	adc	r27, r27
    e47c:	a6 17       	cp	r26, r22
    e47e:	b7 07       	cpc	r27, r23
    e480:	10 f0       	brcs	.+4      	; 0xe486 <__udivmodhi4_ep>
    e482:	a6 1b       	sub	r26, r22
    e484:	b7 0b       	sbc	r27, r23

0000e486 <__udivmodhi4_ep>:
    e486:	88 1f       	adc	r24, r24
    e488:	99 1f       	adc	r25, r25
    e48a:	5a 95       	dec	r21
    e48c:	a9 f7       	brne	.-22     	; 0xe478 <__udivmodhi4_loop>
    e48e:	80 95       	com	r24
    e490:	90 95       	com	r25
    e492:	bc 01       	movw	r22, r24
    e494:	cd 01       	movw	r24, r26
    e496:	08 95       	ret

0000e498 <__divmodhi4>:
    e498:	97 fb       	bst	r25, 7
    e49a:	07 2e       	mov	r0, r23
    e49c:	16 f4       	brtc	.+4      	; 0xe4a2 <__divmodhi4+0xa>
    e49e:	00 94       	com	r0
    e4a0:	07 d0       	rcall	.+14     	; 0xe4b0 <__divmodhi4_neg1>
    e4a2:	77 fd       	sbrc	r23, 7
    e4a4:	09 d0       	rcall	.+18     	; 0xe4b8 <__divmodhi4_neg2>
    e4a6:	0e 94 38 72 	call	0xe470	; 0xe470 <__udivmodhi4>
    e4aa:	07 fc       	sbrc	r0, 7
    e4ac:	05 d0       	rcall	.+10     	; 0xe4b8 <__divmodhi4_neg2>
    e4ae:	3e f4       	brtc	.+14     	; 0xe4be <__divmodhi4_exit>

0000e4b0 <__divmodhi4_neg1>:
    e4b0:	90 95       	com	r25
    e4b2:	81 95       	neg	r24
    e4b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4b6:	08 95       	ret

0000e4b8 <__divmodhi4_neg2>:
    e4b8:	70 95       	com	r23
    e4ba:	61 95       	neg	r22
    e4bc:	7f 4f       	sbci	r23, 0xFF	; 255

0000e4be <__divmodhi4_exit>:
    e4be:	08 95       	ret

0000e4c0 <__subsf3>:
    e4c0:	50 58       	subi	r21, 0x80	; 128

0000e4c2 <__addsf3>:
    e4c2:	bb 27       	eor	r27, r27
    e4c4:	aa 27       	eor	r26, r26
    e4c6:	0e d0       	rcall	.+28     	; 0xe4e4 <__addsf3x>
    e4c8:	75 c1       	rjmp	.+746    	; 0xe7b4 <__fp_round>
    e4ca:	66 d1       	rcall	.+716    	; 0xe798 <__fp_pscA>
    e4cc:	30 f0       	brcs	.+12     	; 0xe4da <__addsf3+0x18>
    e4ce:	6b d1       	rcall	.+726    	; 0xe7a6 <__fp_pscB>
    e4d0:	20 f0       	brcs	.+8      	; 0xe4da <__addsf3+0x18>
    e4d2:	31 f4       	brne	.+12     	; 0xe4e0 <__addsf3+0x1e>
    e4d4:	9f 3f       	cpi	r25, 0xFF	; 255
    e4d6:	11 f4       	brne	.+4      	; 0xe4dc <__addsf3+0x1a>
    e4d8:	1e f4       	brtc	.+6      	; 0xe4e0 <__addsf3+0x1e>
    e4da:	5b c1       	rjmp	.+694    	; 0xe792 <__fp_nan>
    e4dc:	0e f4       	brtc	.+2      	; 0xe4e0 <__addsf3+0x1e>
    e4de:	e0 95       	com	r30
    e4e0:	e7 fb       	bst	r30, 7
    e4e2:	51 c1       	rjmp	.+674    	; 0xe786 <__fp_inf>

0000e4e4 <__addsf3x>:
    e4e4:	e9 2f       	mov	r30, r25
    e4e6:	77 d1       	rcall	.+750    	; 0xe7d6 <__fp_split3>
    e4e8:	80 f3       	brcs	.-32     	; 0xe4ca <__addsf3+0x8>
    e4ea:	ba 17       	cp	r27, r26
    e4ec:	62 07       	cpc	r22, r18
    e4ee:	73 07       	cpc	r23, r19
    e4f0:	84 07       	cpc	r24, r20
    e4f2:	95 07       	cpc	r25, r21
    e4f4:	18 f0       	brcs	.+6      	; 0xe4fc <__addsf3x+0x18>
    e4f6:	71 f4       	brne	.+28     	; 0xe514 <__addsf3x+0x30>
    e4f8:	9e f5       	brtc	.+102    	; 0xe560 <__addsf3x+0x7c>
    e4fa:	8f c1       	rjmp	.+798    	; 0xe81a <__fp_zero>
    e4fc:	0e f4       	brtc	.+2      	; 0xe500 <__addsf3x+0x1c>
    e4fe:	e0 95       	com	r30
    e500:	0b 2e       	mov	r0, r27
    e502:	ba 2f       	mov	r27, r26
    e504:	a0 2d       	mov	r26, r0
    e506:	0b 01       	movw	r0, r22
    e508:	b9 01       	movw	r22, r18
    e50a:	90 01       	movw	r18, r0
    e50c:	0c 01       	movw	r0, r24
    e50e:	ca 01       	movw	r24, r20
    e510:	a0 01       	movw	r20, r0
    e512:	11 24       	eor	r1, r1
    e514:	ff 27       	eor	r31, r31
    e516:	59 1b       	sub	r21, r25
    e518:	99 f0       	breq	.+38     	; 0xe540 <__addsf3x+0x5c>
    e51a:	59 3f       	cpi	r21, 0xF9	; 249
    e51c:	50 f4       	brcc	.+20     	; 0xe532 <__addsf3x+0x4e>
    e51e:	50 3e       	cpi	r21, 0xE0	; 224
    e520:	68 f1       	brcs	.+90     	; 0xe57c <__addsf3x+0x98>
    e522:	1a 16       	cp	r1, r26
    e524:	f0 40       	sbci	r31, 0x00	; 0
    e526:	a2 2f       	mov	r26, r18
    e528:	23 2f       	mov	r18, r19
    e52a:	34 2f       	mov	r19, r20
    e52c:	44 27       	eor	r20, r20
    e52e:	58 5f       	subi	r21, 0xF8	; 248
    e530:	f3 cf       	rjmp	.-26     	; 0xe518 <__addsf3x+0x34>
    e532:	46 95       	lsr	r20
    e534:	37 95       	ror	r19
    e536:	27 95       	ror	r18
    e538:	a7 95       	ror	r26
    e53a:	f0 40       	sbci	r31, 0x00	; 0
    e53c:	53 95       	inc	r21
    e53e:	c9 f7       	brne	.-14     	; 0xe532 <__addsf3x+0x4e>
    e540:	7e f4       	brtc	.+30     	; 0xe560 <__addsf3x+0x7c>
    e542:	1f 16       	cp	r1, r31
    e544:	ba 0b       	sbc	r27, r26
    e546:	62 0b       	sbc	r22, r18
    e548:	73 0b       	sbc	r23, r19
    e54a:	84 0b       	sbc	r24, r20
    e54c:	ba f0       	brmi	.+46     	; 0xe57c <__addsf3x+0x98>
    e54e:	91 50       	subi	r25, 0x01	; 1
    e550:	a1 f0       	breq	.+40     	; 0xe57a <__addsf3x+0x96>
    e552:	ff 0f       	add	r31, r31
    e554:	bb 1f       	adc	r27, r27
    e556:	66 1f       	adc	r22, r22
    e558:	77 1f       	adc	r23, r23
    e55a:	88 1f       	adc	r24, r24
    e55c:	c2 f7       	brpl	.-16     	; 0xe54e <__addsf3x+0x6a>
    e55e:	0e c0       	rjmp	.+28     	; 0xe57c <__addsf3x+0x98>
    e560:	ba 0f       	add	r27, r26
    e562:	62 1f       	adc	r22, r18
    e564:	73 1f       	adc	r23, r19
    e566:	84 1f       	adc	r24, r20
    e568:	48 f4       	brcc	.+18     	; 0xe57c <__addsf3x+0x98>
    e56a:	87 95       	ror	r24
    e56c:	77 95       	ror	r23
    e56e:	67 95       	ror	r22
    e570:	b7 95       	ror	r27
    e572:	f7 95       	ror	r31
    e574:	9e 3f       	cpi	r25, 0xFE	; 254
    e576:	08 f0       	brcs	.+2      	; 0xe57a <__addsf3x+0x96>
    e578:	b3 cf       	rjmp	.-154    	; 0xe4e0 <__addsf3+0x1e>
    e57a:	93 95       	inc	r25
    e57c:	88 0f       	add	r24, r24
    e57e:	08 f0       	brcs	.+2      	; 0xe582 <__addsf3x+0x9e>
    e580:	99 27       	eor	r25, r25
    e582:	ee 0f       	add	r30, r30
    e584:	97 95       	ror	r25
    e586:	87 95       	ror	r24
    e588:	08 95       	ret

0000e58a <__cmpsf2>:
    e58a:	d9 d0       	rcall	.+434    	; 0xe73e <__fp_cmp>
    e58c:	08 f4       	brcc	.+2      	; 0xe590 <__cmpsf2+0x6>
    e58e:	81 e0       	ldi	r24, 0x01	; 1
    e590:	08 95       	ret

0000e592 <__divsf3>:
    e592:	0c d0       	rcall	.+24     	; 0xe5ac <__divsf3x>
    e594:	0f c1       	rjmp	.+542    	; 0xe7b4 <__fp_round>
    e596:	07 d1       	rcall	.+526    	; 0xe7a6 <__fp_pscB>
    e598:	40 f0       	brcs	.+16     	; 0xe5aa <__divsf3+0x18>
    e59a:	fe d0       	rcall	.+508    	; 0xe798 <__fp_pscA>
    e59c:	30 f0       	brcs	.+12     	; 0xe5aa <__divsf3+0x18>
    e59e:	21 f4       	brne	.+8      	; 0xe5a8 <__divsf3+0x16>
    e5a0:	5f 3f       	cpi	r21, 0xFF	; 255
    e5a2:	19 f0       	breq	.+6      	; 0xe5aa <__divsf3+0x18>
    e5a4:	f0 c0       	rjmp	.+480    	; 0xe786 <__fp_inf>
    e5a6:	51 11       	cpse	r21, r1
    e5a8:	39 c1       	rjmp	.+626    	; 0xe81c <__fp_szero>
    e5aa:	f3 c0       	rjmp	.+486    	; 0xe792 <__fp_nan>

0000e5ac <__divsf3x>:
    e5ac:	14 d1       	rcall	.+552    	; 0xe7d6 <__fp_split3>
    e5ae:	98 f3       	brcs	.-26     	; 0xe596 <__divsf3+0x4>

0000e5b0 <__divsf3_pse>:
    e5b0:	99 23       	and	r25, r25
    e5b2:	c9 f3       	breq	.-14     	; 0xe5a6 <__divsf3+0x14>
    e5b4:	55 23       	and	r21, r21
    e5b6:	b1 f3       	breq	.-20     	; 0xe5a4 <__divsf3+0x12>
    e5b8:	95 1b       	sub	r25, r21
    e5ba:	55 0b       	sbc	r21, r21
    e5bc:	bb 27       	eor	r27, r27
    e5be:	aa 27       	eor	r26, r26
    e5c0:	62 17       	cp	r22, r18
    e5c2:	73 07       	cpc	r23, r19
    e5c4:	84 07       	cpc	r24, r20
    e5c6:	38 f0       	brcs	.+14     	; 0xe5d6 <__divsf3_pse+0x26>
    e5c8:	9f 5f       	subi	r25, 0xFF	; 255
    e5ca:	5f 4f       	sbci	r21, 0xFF	; 255
    e5cc:	22 0f       	add	r18, r18
    e5ce:	33 1f       	adc	r19, r19
    e5d0:	44 1f       	adc	r20, r20
    e5d2:	aa 1f       	adc	r26, r26
    e5d4:	a9 f3       	breq	.-22     	; 0xe5c0 <__divsf3_pse+0x10>
    e5d6:	33 d0       	rcall	.+102    	; 0xe63e <__divsf3_pse+0x8e>
    e5d8:	0e 2e       	mov	r0, r30
    e5da:	3a f0       	brmi	.+14     	; 0xe5ea <__divsf3_pse+0x3a>
    e5dc:	e0 e8       	ldi	r30, 0x80	; 128
    e5de:	30 d0       	rcall	.+96     	; 0xe640 <__divsf3_pse+0x90>
    e5e0:	91 50       	subi	r25, 0x01	; 1
    e5e2:	50 40       	sbci	r21, 0x00	; 0
    e5e4:	e6 95       	lsr	r30
    e5e6:	00 1c       	adc	r0, r0
    e5e8:	ca f7       	brpl	.-14     	; 0xe5dc <__divsf3_pse+0x2c>
    e5ea:	29 d0       	rcall	.+82     	; 0xe63e <__divsf3_pse+0x8e>
    e5ec:	fe 2f       	mov	r31, r30
    e5ee:	27 d0       	rcall	.+78     	; 0xe63e <__divsf3_pse+0x8e>
    e5f0:	66 0f       	add	r22, r22
    e5f2:	77 1f       	adc	r23, r23
    e5f4:	88 1f       	adc	r24, r24
    e5f6:	bb 1f       	adc	r27, r27
    e5f8:	26 17       	cp	r18, r22
    e5fa:	37 07       	cpc	r19, r23
    e5fc:	48 07       	cpc	r20, r24
    e5fe:	ab 07       	cpc	r26, r27
    e600:	b0 e8       	ldi	r27, 0x80	; 128
    e602:	09 f0       	breq	.+2      	; 0xe606 <__divsf3_pse+0x56>
    e604:	bb 0b       	sbc	r27, r27
    e606:	80 2d       	mov	r24, r0
    e608:	bf 01       	movw	r22, r30
    e60a:	ff 27       	eor	r31, r31
    e60c:	93 58       	subi	r25, 0x83	; 131
    e60e:	5f 4f       	sbci	r21, 0xFF	; 255
    e610:	2a f0       	brmi	.+10     	; 0xe61c <__divsf3_pse+0x6c>
    e612:	9e 3f       	cpi	r25, 0xFE	; 254
    e614:	51 05       	cpc	r21, r1
    e616:	68 f0       	brcs	.+26     	; 0xe632 <__divsf3_pse+0x82>
    e618:	b6 c0       	rjmp	.+364    	; 0xe786 <__fp_inf>
    e61a:	00 c1       	rjmp	.+512    	; 0xe81c <__fp_szero>
    e61c:	5f 3f       	cpi	r21, 0xFF	; 255
    e61e:	ec f3       	brlt	.-6      	; 0xe61a <__divsf3_pse+0x6a>
    e620:	98 3e       	cpi	r25, 0xE8	; 232
    e622:	dc f3       	brlt	.-10     	; 0xe61a <__divsf3_pse+0x6a>
    e624:	86 95       	lsr	r24
    e626:	77 95       	ror	r23
    e628:	67 95       	ror	r22
    e62a:	b7 95       	ror	r27
    e62c:	f7 95       	ror	r31
    e62e:	9f 5f       	subi	r25, 0xFF	; 255
    e630:	c9 f7       	brne	.-14     	; 0xe624 <__divsf3_pse+0x74>
    e632:	88 0f       	add	r24, r24
    e634:	91 1d       	adc	r25, r1
    e636:	96 95       	lsr	r25
    e638:	87 95       	ror	r24
    e63a:	97 f9       	bld	r25, 7
    e63c:	08 95       	ret
    e63e:	e1 e0       	ldi	r30, 0x01	; 1
    e640:	66 0f       	add	r22, r22
    e642:	77 1f       	adc	r23, r23
    e644:	88 1f       	adc	r24, r24
    e646:	bb 1f       	adc	r27, r27
    e648:	62 17       	cp	r22, r18
    e64a:	73 07       	cpc	r23, r19
    e64c:	84 07       	cpc	r24, r20
    e64e:	ba 07       	cpc	r27, r26
    e650:	20 f0       	brcs	.+8      	; 0xe65a <__divsf3_pse+0xaa>
    e652:	62 1b       	sub	r22, r18
    e654:	73 0b       	sbc	r23, r19
    e656:	84 0b       	sbc	r24, r20
    e658:	ba 0b       	sbc	r27, r26
    e65a:	ee 1f       	adc	r30, r30
    e65c:	88 f7       	brcc	.-30     	; 0xe640 <__divsf3_pse+0x90>
    e65e:	e0 95       	com	r30
    e660:	08 95       	ret

0000e662 <__fixsfsi>:
    e662:	04 d0       	rcall	.+8      	; 0xe66c <__fixunssfsi>
    e664:	68 94       	set
    e666:	b1 11       	cpse	r27, r1
    e668:	d9 c0       	rjmp	.+434    	; 0xe81c <__fp_szero>
    e66a:	08 95       	ret

0000e66c <__fixunssfsi>:
    e66c:	bc d0       	rcall	.+376    	; 0xe7e6 <__fp_splitA>
    e66e:	88 f0       	brcs	.+34     	; 0xe692 <__fixunssfsi+0x26>
    e670:	9f 57       	subi	r25, 0x7F	; 127
    e672:	90 f0       	brcs	.+36     	; 0xe698 <__fixunssfsi+0x2c>
    e674:	b9 2f       	mov	r27, r25
    e676:	99 27       	eor	r25, r25
    e678:	b7 51       	subi	r27, 0x17	; 23
    e67a:	a0 f0       	brcs	.+40     	; 0xe6a4 <__fixunssfsi+0x38>
    e67c:	d1 f0       	breq	.+52     	; 0xe6b2 <__fixunssfsi+0x46>
    e67e:	66 0f       	add	r22, r22
    e680:	77 1f       	adc	r23, r23
    e682:	88 1f       	adc	r24, r24
    e684:	99 1f       	adc	r25, r25
    e686:	1a f0       	brmi	.+6      	; 0xe68e <__fixunssfsi+0x22>
    e688:	ba 95       	dec	r27
    e68a:	c9 f7       	brne	.-14     	; 0xe67e <__fixunssfsi+0x12>
    e68c:	12 c0       	rjmp	.+36     	; 0xe6b2 <__fixunssfsi+0x46>
    e68e:	b1 30       	cpi	r27, 0x01	; 1
    e690:	81 f0       	breq	.+32     	; 0xe6b2 <__fixunssfsi+0x46>
    e692:	c3 d0       	rcall	.+390    	; 0xe81a <__fp_zero>
    e694:	b1 e0       	ldi	r27, 0x01	; 1
    e696:	08 95       	ret
    e698:	c0 c0       	rjmp	.+384    	; 0xe81a <__fp_zero>
    e69a:	67 2f       	mov	r22, r23
    e69c:	78 2f       	mov	r23, r24
    e69e:	88 27       	eor	r24, r24
    e6a0:	b8 5f       	subi	r27, 0xF8	; 248
    e6a2:	39 f0       	breq	.+14     	; 0xe6b2 <__fixunssfsi+0x46>
    e6a4:	b9 3f       	cpi	r27, 0xF9	; 249
    e6a6:	cc f3       	brlt	.-14     	; 0xe69a <__fixunssfsi+0x2e>
    e6a8:	86 95       	lsr	r24
    e6aa:	77 95       	ror	r23
    e6ac:	67 95       	ror	r22
    e6ae:	b3 95       	inc	r27
    e6b0:	d9 f7       	brne	.-10     	; 0xe6a8 <__fixunssfsi+0x3c>
    e6b2:	3e f4       	brtc	.+14     	; 0xe6c2 <__fixunssfsi+0x56>
    e6b4:	90 95       	com	r25
    e6b6:	80 95       	com	r24
    e6b8:	70 95       	com	r23
    e6ba:	61 95       	neg	r22
    e6bc:	7f 4f       	sbci	r23, 0xFF	; 255
    e6be:	8f 4f       	sbci	r24, 0xFF	; 255
    e6c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e6c2:	08 95       	ret

0000e6c4 <__floatunsisf>:
    e6c4:	e8 94       	clt
    e6c6:	09 c0       	rjmp	.+18     	; 0xe6da <__floatsisf+0x12>

0000e6c8 <__floatsisf>:
    e6c8:	97 fb       	bst	r25, 7
    e6ca:	3e f4       	brtc	.+14     	; 0xe6da <__floatsisf+0x12>
    e6cc:	90 95       	com	r25
    e6ce:	80 95       	com	r24
    e6d0:	70 95       	com	r23
    e6d2:	61 95       	neg	r22
    e6d4:	7f 4f       	sbci	r23, 0xFF	; 255
    e6d6:	8f 4f       	sbci	r24, 0xFF	; 255
    e6d8:	9f 4f       	sbci	r25, 0xFF	; 255
    e6da:	99 23       	and	r25, r25
    e6dc:	a9 f0       	breq	.+42     	; 0xe708 <__floatsisf+0x40>
    e6de:	f9 2f       	mov	r31, r25
    e6e0:	96 e9       	ldi	r25, 0x96	; 150
    e6e2:	bb 27       	eor	r27, r27
    e6e4:	93 95       	inc	r25
    e6e6:	f6 95       	lsr	r31
    e6e8:	87 95       	ror	r24
    e6ea:	77 95       	ror	r23
    e6ec:	67 95       	ror	r22
    e6ee:	b7 95       	ror	r27
    e6f0:	f1 11       	cpse	r31, r1
    e6f2:	f8 cf       	rjmp	.-16     	; 0xe6e4 <__floatsisf+0x1c>
    e6f4:	fa f4       	brpl	.+62     	; 0xe734 <__floatsisf+0x6c>
    e6f6:	bb 0f       	add	r27, r27
    e6f8:	11 f4       	brne	.+4      	; 0xe6fe <__floatsisf+0x36>
    e6fa:	60 ff       	sbrs	r22, 0
    e6fc:	1b c0       	rjmp	.+54     	; 0xe734 <__floatsisf+0x6c>
    e6fe:	6f 5f       	subi	r22, 0xFF	; 255
    e700:	7f 4f       	sbci	r23, 0xFF	; 255
    e702:	8f 4f       	sbci	r24, 0xFF	; 255
    e704:	9f 4f       	sbci	r25, 0xFF	; 255
    e706:	16 c0       	rjmp	.+44     	; 0xe734 <__floatsisf+0x6c>
    e708:	88 23       	and	r24, r24
    e70a:	11 f0       	breq	.+4      	; 0xe710 <__floatsisf+0x48>
    e70c:	96 e9       	ldi	r25, 0x96	; 150
    e70e:	11 c0       	rjmp	.+34     	; 0xe732 <__floatsisf+0x6a>
    e710:	77 23       	and	r23, r23
    e712:	21 f0       	breq	.+8      	; 0xe71c <__floatsisf+0x54>
    e714:	9e e8       	ldi	r25, 0x8E	; 142
    e716:	87 2f       	mov	r24, r23
    e718:	76 2f       	mov	r23, r22
    e71a:	05 c0       	rjmp	.+10     	; 0xe726 <__floatsisf+0x5e>
    e71c:	66 23       	and	r22, r22
    e71e:	71 f0       	breq	.+28     	; 0xe73c <__floatsisf+0x74>
    e720:	96 e8       	ldi	r25, 0x86	; 134
    e722:	86 2f       	mov	r24, r22
    e724:	70 e0       	ldi	r23, 0x00	; 0
    e726:	60 e0       	ldi	r22, 0x00	; 0
    e728:	2a f0       	brmi	.+10     	; 0xe734 <__floatsisf+0x6c>
    e72a:	9a 95       	dec	r25
    e72c:	66 0f       	add	r22, r22
    e72e:	77 1f       	adc	r23, r23
    e730:	88 1f       	adc	r24, r24
    e732:	da f7       	brpl	.-10     	; 0xe72a <__floatsisf+0x62>
    e734:	88 0f       	add	r24, r24
    e736:	96 95       	lsr	r25
    e738:	87 95       	ror	r24
    e73a:	97 f9       	bld	r25, 7
    e73c:	08 95       	ret

0000e73e <__fp_cmp>:
    e73e:	99 0f       	add	r25, r25
    e740:	00 08       	sbc	r0, r0
    e742:	55 0f       	add	r21, r21
    e744:	aa 0b       	sbc	r26, r26
    e746:	e0 e8       	ldi	r30, 0x80	; 128
    e748:	fe ef       	ldi	r31, 0xFE	; 254
    e74a:	16 16       	cp	r1, r22
    e74c:	17 06       	cpc	r1, r23
    e74e:	e8 07       	cpc	r30, r24
    e750:	f9 07       	cpc	r31, r25
    e752:	c0 f0       	brcs	.+48     	; 0xe784 <__fp_cmp+0x46>
    e754:	12 16       	cp	r1, r18
    e756:	13 06       	cpc	r1, r19
    e758:	e4 07       	cpc	r30, r20
    e75a:	f5 07       	cpc	r31, r21
    e75c:	98 f0       	brcs	.+38     	; 0xe784 <__fp_cmp+0x46>
    e75e:	62 1b       	sub	r22, r18
    e760:	73 0b       	sbc	r23, r19
    e762:	84 0b       	sbc	r24, r20
    e764:	95 0b       	sbc	r25, r21
    e766:	39 f4       	brne	.+14     	; 0xe776 <__fp_cmp+0x38>
    e768:	0a 26       	eor	r0, r26
    e76a:	61 f0       	breq	.+24     	; 0xe784 <__fp_cmp+0x46>
    e76c:	23 2b       	or	r18, r19
    e76e:	24 2b       	or	r18, r20
    e770:	25 2b       	or	r18, r21
    e772:	21 f4       	brne	.+8      	; 0xe77c <__fp_cmp+0x3e>
    e774:	08 95       	ret
    e776:	0a 26       	eor	r0, r26
    e778:	09 f4       	brne	.+2      	; 0xe77c <__fp_cmp+0x3e>
    e77a:	a1 40       	sbci	r26, 0x01	; 1
    e77c:	a6 95       	lsr	r26
    e77e:	8f ef       	ldi	r24, 0xFF	; 255
    e780:	81 1d       	adc	r24, r1
    e782:	81 1d       	adc	r24, r1
    e784:	08 95       	ret

0000e786 <__fp_inf>:
    e786:	97 f9       	bld	r25, 7
    e788:	9f 67       	ori	r25, 0x7F	; 127
    e78a:	80 e8       	ldi	r24, 0x80	; 128
    e78c:	70 e0       	ldi	r23, 0x00	; 0
    e78e:	60 e0       	ldi	r22, 0x00	; 0
    e790:	08 95       	ret

0000e792 <__fp_nan>:
    e792:	9f ef       	ldi	r25, 0xFF	; 255
    e794:	80 ec       	ldi	r24, 0xC0	; 192
    e796:	08 95       	ret

0000e798 <__fp_pscA>:
    e798:	00 24       	eor	r0, r0
    e79a:	0a 94       	dec	r0
    e79c:	16 16       	cp	r1, r22
    e79e:	17 06       	cpc	r1, r23
    e7a0:	18 06       	cpc	r1, r24
    e7a2:	09 06       	cpc	r0, r25
    e7a4:	08 95       	ret

0000e7a6 <__fp_pscB>:
    e7a6:	00 24       	eor	r0, r0
    e7a8:	0a 94       	dec	r0
    e7aa:	12 16       	cp	r1, r18
    e7ac:	13 06       	cpc	r1, r19
    e7ae:	14 06       	cpc	r1, r20
    e7b0:	05 06       	cpc	r0, r21
    e7b2:	08 95       	ret

0000e7b4 <__fp_round>:
    e7b4:	09 2e       	mov	r0, r25
    e7b6:	03 94       	inc	r0
    e7b8:	00 0c       	add	r0, r0
    e7ba:	11 f4       	brne	.+4      	; 0xe7c0 <__fp_round+0xc>
    e7bc:	88 23       	and	r24, r24
    e7be:	52 f0       	brmi	.+20     	; 0xe7d4 <__fp_round+0x20>
    e7c0:	bb 0f       	add	r27, r27
    e7c2:	40 f4       	brcc	.+16     	; 0xe7d4 <__fp_round+0x20>
    e7c4:	bf 2b       	or	r27, r31
    e7c6:	11 f4       	brne	.+4      	; 0xe7cc <__fp_round+0x18>
    e7c8:	60 ff       	sbrs	r22, 0
    e7ca:	04 c0       	rjmp	.+8      	; 0xe7d4 <__fp_round+0x20>
    e7cc:	6f 5f       	subi	r22, 0xFF	; 255
    e7ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e7d0:	8f 4f       	sbci	r24, 0xFF	; 255
    e7d2:	9f 4f       	sbci	r25, 0xFF	; 255
    e7d4:	08 95       	ret

0000e7d6 <__fp_split3>:
    e7d6:	57 fd       	sbrc	r21, 7
    e7d8:	90 58       	subi	r25, 0x80	; 128
    e7da:	44 0f       	add	r20, r20
    e7dc:	55 1f       	adc	r21, r21
    e7de:	59 f0       	breq	.+22     	; 0xe7f6 <__fp_splitA+0x10>
    e7e0:	5f 3f       	cpi	r21, 0xFF	; 255
    e7e2:	71 f0       	breq	.+28     	; 0xe800 <__fp_splitA+0x1a>
    e7e4:	47 95       	ror	r20

0000e7e6 <__fp_splitA>:
    e7e6:	88 0f       	add	r24, r24
    e7e8:	97 fb       	bst	r25, 7
    e7ea:	99 1f       	adc	r25, r25
    e7ec:	61 f0       	breq	.+24     	; 0xe806 <__fp_splitA+0x20>
    e7ee:	9f 3f       	cpi	r25, 0xFF	; 255
    e7f0:	79 f0       	breq	.+30     	; 0xe810 <__fp_splitA+0x2a>
    e7f2:	87 95       	ror	r24
    e7f4:	08 95       	ret
    e7f6:	12 16       	cp	r1, r18
    e7f8:	13 06       	cpc	r1, r19
    e7fa:	14 06       	cpc	r1, r20
    e7fc:	55 1f       	adc	r21, r21
    e7fe:	f2 cf       	rjmp	.-28     	; 0xe7e4 <__fp_split3+0xe>
    e800:	46 95       	lsr	r20
    e802:	f1 df       	rcall	.-30     	; 0xe7e6 <__fp_splitA>
    e804:	08 c0       	rjmp	.+16     	; 0xe816 <__fp_splitA+0x30>
    e806:	16 16       	cp	r1, r22
    e808:	17 06       	cpc	r1, r23
    e80a:	18 06       	cpc	r1, r24
    e80c:	99 1f       	adc	r25, r25
    e80e:	f1 cf       	rjmp	.-30     	; 0xe7f2 <__fp_splitA+0xc>
    e810:	86 95       	lsr	r24
    e812:	71 05       	cpc	r23, r1
    e814:	61 05       	cpc	r22, r1
    e816:	08 94       	sec
    e818:	08 95       	ret

0000e81a <__fp_zero>:
    e81a:	e8 94       	clt

0000e81c <__fp_szero>:
    e81c:	bb 27       	eor	r27, r27
    e81e:	66 27       	eor	r22, r22
    e820:	77 27       	eor	r23, r23
    e822:	cb 01       	movw	r24, r22
    e824:	97 f9       	bld	r25, 7
    e826:	08 95       	ret

0000e828 <__gesf2>:
    e828:	8a df       	rcall	.-236    	; 0xe73e <__fp_cmp>
    e82a:	08 f4       	brcc	.+2      	; 0xe82e <__gesf2+0x6>
    e82c:	8f ef       	ldi	r24, 0xFF	; 255
    e82e:	08 95       	ret

0000e830 <__mulsf3>:
    e830:	0b d0       	rcall	.+22     	; 0xe848 <__mulsf3x>
    e832:	c0 cf       	rjmp	.-128    	; 0xe7b4 <__fp_round>
    e834:	b1 df       	rcall	.-158    	; 0xe798 <__fp_pscA>
    e836:	28 f0       	brcs	.+10     	; 0xe842 <__mulsf3+0x12>
    e838:	b6 df       	rcall	.-148    	; 0xe7a6 <__fp_pscB>
    e83a:	18 f0       	brcs	.+6      	; 0xe842 <__mulsf3+0x12>
    e83c:	95 23       	and	r25, r21
    e83e:	09 f0       	breq	.+2      	; 0xe842 <__mulsf3+0x12>
    e840:	a2 cf       	rjmp	.-188    	; 0xe786 <__fp_inf>
    e842:	a7 cf       	rjmp	.-178    	; 0xe792 <__fp_nan>
    e844:	11 24       	eor	r1, r1
    e846:	ea cf       	rjmp	.-44     	; 0xe81c <__fp_szero>

0000e848 <__mulsf3x>:
    e848:	c6 df       	rcall	.-116    	; 0xe7d6 <__fp_split3>
    e84a:	a0 f3       	brcs	.-24     	; 0xe834 <__mulsf3+0x4>

0000e84c <__mulsf3_pse>:
    e84c:	95 9f       	mul	r25, r21
    e84e:	d1 f3       	breq	.-12     	; 0xe844 <__mulsf3+0x14>
    e850:	95 0f       	add	r25, r21
    e852:	50 e0       	ldi	r21, 0x00	; 0
    e854:	55 1f       	adc	r21, r21
    e856:	62 9f       	mul	r22, r18
    e858:	f0 01       	movw	r30, r0
    e85a:	72 9f       	mul	r23, r18
    e85c:	bb 27       	eor	r27, r27
    e85e:	f0 0d       	add	r31, r0
    e860:	b1 1d       	adc	r27, r1
    e862:	63 9f       	mul	r22, r19
    e864:	aa 27       	eor	r26, r26
    e866:	f0 0d       	add	r31, r0
    e868:	b1 1d       	adc	r27, r1
    e86a:	aa 1f       	adc	r26, r26
    e86c:	64 9f       	mul	r22, r20
    e86e:	66 27       	eor	r22, r22
    e870:	b0 0d       	add	r27, r0
    e872:	a1 1d       	adc	r26, r1
    e874:	66 1f       	adc	r22, r22
    e876:	82 9f       	mul	r24, r18
    e878:	22 27       	eor	r18, r18
    e87a:	b0 0d       	add	r27, r0
    e87c:	a1 1d       	adc	r26, r1
    e87e:	62 1f       	adc	r22, r18
    e880:	73 9f       	mul	r23, r19
    e882:	b0 0d       	add	r27, r0
    e884:	a1 1d       	adc	r26, r1
    e886:	62 1f       	adc	r22, r18
    e888:	83 9f       	mul	r24, r19
    e88a:	a0 0d       	add	r26, r0
    e88c:	61 1d       	adc	r22, r1
    e88e:	22 1f       	adc	r18, r18
    e890:	74 9f       	mul	r23, r20
    e892:	33 27       	eor	r19, r19
    e894:	a0 0d       	add	r26, r0
    e896:	61 1d       	adc	r22, r1
    e898:	23 1f       	adc	r18, r19
    e89a:	84 9f       	mul	r24, r20
    e89c:	60 0d       	add	r22, r0
    e89e:	21 1d       	adc	r18, r1
    e8a0:	82 2f       	mov	r24, r18
    e8a2:	76 2f       	mov	r23, r22
    e8a4:	6a 2f       	mov	r22, r26
    e8a6:	11 24       	eor	r1, r1
    e8a8:	9f 57       	subi	r25, 0x7F	; 127
    e8aa:	50 40       	sbci	r21, 0x00	; 0
    e8ac:	8a f0       	brmi	.+34     	; 0xe8d0 <__mulsf3_pse+0x84>
    e8ae:	e1 f0       	breq	.+56     	; 0xe8e8 <__mulsf3_pse+0x9c>
    e8b0:	88 23       	and	r24, r24
    e8b2:	4a f0       	brmi	.+18     	; 0xe8c6 <__mulsf3_pse+0x7a>
    e8b4:	ee 0f       	add	r30, r30
    e8b6:	ff 1f       	adc	r31, r31
    e8b8:	bb 1f       	adc	r27, r27
    e8ba:	66 1f       	adc	r22, r22
    e8bc:	77 1f       	adc	r23, r23
    e8be:	88 1f       	adc	r24, r24
    e8c0:	91 50       	subi	r25, 0x01	; 1
    e8c2:	50 40       	sbci	r21, 0x00	; 0
    e8c4:	a9 f7       	brne	.-22     	; 0xe8b0 <__mulsf3_pse+0x64>
    e8c6:	9e 3f       	cpi	r25, 0xFE	; 254
    e8c8:	51 05       	cpc	r21, r1
    e8ca:	70 f0       	brcs	.+28     	; 0xe8e8 <__mulsf3_pse+0x9c>
    e8cc:	5c cf       	rjmp	.-328    	; 0xe786 <__fp_inf>
    e8ce:	a6 cf       	rjmp	.-180    	; 0xe81c <__fp_szero>
    e8d0:	5f 3f       	cpi	r21, 0xFF	; 255
    e8d2:	ec f3       	brlt	.-6      	; 0xe8ce <__mulsf3_pse+0x82>
    e8d4:	98 3e       	cpi	r25, 0xE8	; 232
    e8d6:	dc f3       	brlt	.-10     	; 0xe8ce <__mulsf3_pse+0x82>
    e8d8:	86 95       	lsr	r24
    e8da:	77 95       	ror	r23
    e8dc:	67 95       	ror	r22
    e8de:	b7 95       	ror	r27
    e8e0:	f7 95       	ror	r31
    e8e2:	e7 95       	ror	r30
    e8e4:	9f 5f       	subi	r25, 0xFF	; 255
    e8e6:	c1 f7       	brne	.-16     	; 0xe8d8 <__mulsf3_pse+0x8c>
    e8e8:	fe 2b       	or	r31, r30
    e8ea:	88 0f       	add	r24, r24
    e8ec:	91 1d       	adc	r25, r1
    e8ee:	96 95       	lsr	r25
    e8f0:	87 95       	ror	r24
    e8f2:	97 f9       	bld	r25, 7
    e8f4:	08 95       	ret

0000e8f6 <memcpy_P>:
    e8f6:	fb 01       	movw	r30, r22
    e8f8:	dc 01       	movw	r26, r24
    e8fa:	02 c0       	rjmp	.+4      	; 0xe900 <memcpy_P+0xa>
    e8fc:	05 90       	lpm	r0, Z+
    e8fe:	0d 92       	st	X+, r0
    e900:	41 50       	subi	r20, 0x01	; 1
    e902:	50 40       	sbci	r21, 0x00	; 0
    e904:	d8 f7       	brcc	.-10     	; 0xe8fc <memcpy_P+0x6>
    e906:	08 95       	ret

0000e908 <_exit>:
    e908:	f8 94       	cli

0000e90a <__stop_program>:
    e90a:	ff cf       	rjmp	.-2      	; 0xe90a <__stop_program>
