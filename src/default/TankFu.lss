
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000efdc  0000f0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000efdc  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f9c  00800106  00800106  0000f0e6  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000f0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000f660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f8b6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000680  00000000  00000000  0000f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009f4a  00000000  00000000  0000ff48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001557  00000000  00000000  00019e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000227f  00000000  00000000  0001b3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001584  00000000  00000000  0001d668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ddb  00000000  00000000  0001ebec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000090be  00000000  00000000  000209c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  00029a88  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 43 	jmp	0x86a6	; 0x86a6 <__ctors_end>
       4:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
       8:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
       c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      10:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      14:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      18:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      1c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      20:	0c 94 bf 47 	jmp	0x8f7e	; 0x8f7e <__vector_8>
      24:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      28:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      2c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      30:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      34:	0c 94 96 45 	jmp	0x8b2c	; 0x8b2c <__vector_13>
      38:	0c 94 d6 45 	jmp	0x8bac	; 0x8bac <__vector_14>
      3c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      40:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      44:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      48:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      4c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      50:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      54:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      58:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      5c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      60:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      64:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      68:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>
      6c:	0c 94 c0 43 	jmp	0x8780	; 0x8780 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	21 49 24 49 7f 49 83 49 8b 49 2c 49 31 49 36 49     !I$I.I.I.I,I1I6I
      ce:	93 49 39 49 3c 49 3f 49 7c 49                       .I9I<I?I|I

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <map_uzeboxlogo2>:
      e4:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f5 <map_uzeboxlogo>:
      f5:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     105:	00 0e 0f 10 11 12                                   ......

0000010b <logo_tileset>:
	...
     167:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     177:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     187:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     197:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1a7:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1b7:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1c7:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1d7:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1e7:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1f7:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     207:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     217:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     227:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     237:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     24f:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     25f:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     26f:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     27f:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     28f:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     29f:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2af:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2bf:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2cf:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2df:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2ef:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     2ff:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     30f:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     31f:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     32f:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     33f:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     34f:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     35f:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38b:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39b:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3ab:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bb:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cb:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3db:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3eb:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3fb:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40b:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41b:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42b:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43b:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44b:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45b:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     493:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a3:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b3:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c3:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d3:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e3:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f3:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     503:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     513:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     523:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     533:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     543:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     553:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     563:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     573:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     583:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     593:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a3:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b3:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c3:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5e7:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5f7:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     607:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     617:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     627:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     637:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     647:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     657:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     667:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     677:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     687:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     697:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6a7:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6b7:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6cf:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6df:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6ef:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     6ff:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     70f:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     71f:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     72f:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     73f:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     74f:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     75f:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     76f:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     77f:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     78f:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     79f:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7af:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7bf:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7cf:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7df:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80b:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81b:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82b:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83b:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84b:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85b:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86b:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87b:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88b:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89b:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8ab:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bb:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cb:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8db:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090b <logoInitPatches>:
     90b:	00 00 00 14 09 00 00 00 00                          .........

00000914 <initPatch>:
     914:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     924:	0a 1e 32 05 00 00 ff                                ..2....

0000092b <default_scores>:
     92b:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     93b:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000949 <default_handles>:
     949:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     959:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000967 <strLevels>:
     967:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     977:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     987:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     997:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     9a7:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     9b7:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     9c7:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     9d7:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     9e7:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     9f7:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     a07:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

00000a17 <strPaused>:
     a17:	50 41 55 53 45 44 00                                PAUSED.

00000a1e <strExit>:
     a1e:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

00000a27 <strTotal>:
     a27:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000a2e <strScore>:
     a2e:	53 43 4f 52 45 3a 00                                SCORE:.

00000a35 <strBanterClear>:
     a35:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000a44 <banter_map>:
     a44:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     a54:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     a64:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     a74:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     a84:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     a94:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     aa4:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     ab4:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     ac4:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     ad4:	20 20 20 20 20 00                                        .

00000ada <strFinalScore>:
     ada:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000ae6 <strBy>:
     ae6:	42 59 00                                            BY.

00000ae9 <strOwns>:
     ae9:	4f 57 4e 53 00                                      OWNS.

00000aee <strChangeHandle>:
     aee:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000afd <strReset>:
     afd:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     b0d:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000b16 <strCancelHandle>:
     b16:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000b21 <strConfirmHandle>:
     b21:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     b31:	54 00                                               T.

00000b33 <strSelectHandle>:
     b33:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000b44 <strPlayer2>:
     b44:	50 32 00                                            P2.

00000b47 <strPlayer1>:
     b47:	50 31 00                                            P1.

00000b4a <strVertSep>:
     b4a:	3b 00                                               ;.

00000b4c <strUnderline>:
     b4c:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000b58 <strHandlesTitle>:
     b58:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000b64 <strHighscores>:
     b64:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000b6e <str2Player>:
     b6e:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000b7f <str1Player>:
     b7f:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000b8d <strCopyright>:
     b8d:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     b9d:	4f 4f 4b 53 00                                      OOKS.

00000ba2 <my_patches>:
     ba2:	02 84 1b 00 00 4f 07 50 07 02 9f 14 00 00 e3 06     .....O.P........
     bb2:	e4 06 02 58 12 00 00 45 02 46 02 02 a7 10 00 00     ...X...E.F......
     bc2:	af 01 b0 01 02 87 0e 00 00 1e 02 1f 02 02 15 0d     ................
     bd2:	00 00 70 01 71 01 02 58 12 00 00 45 02 46 02 02     ..p.q..X...E.F..
     be2:	9f 14 00 00 e3 06 e4 06 00 00 00 f3 0b 00 00 00     ................
	...

00000bf3 <ad_alarm>:
     bf3:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     c03:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c13:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c23:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     c33:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     c43:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     c53:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     c63:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c73:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c83:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     c93:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ca3:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     cb3:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     cc3:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     cd3:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ce3:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     cf3:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     d03:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     d13:	00 ff                                               ..

00000d15 <ad_navigate>:
     d15:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     d25:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     d35:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     d45:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     d55:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     d65:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     d75:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     d85:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     d95:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     da5:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     db5:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     dc5:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     dd5:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     de5:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     df5:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     e05:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     e15:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     e25:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     e35:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     e45:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     e55:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     e65:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     e75:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000e87 <ad_metal>:
     e87:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     e97:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     ea7:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     eb7:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     ec7:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     ed7:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     ee7:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     ef7:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     f07:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     f17:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     f27:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     f37:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     f47:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     f57:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     f67:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     f77:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     f87:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     f97:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     fa7:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     fb7:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     fc7:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     fd7:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     fe7:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     ff7:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    1007:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    1017:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    1027:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    1037:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    1047:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    1057:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    1067:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    1077:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    1087:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    1097:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000010a7 <ad_item>:
    10a7:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    10b7:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    10c7:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    10d7:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    10e7:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    10f7:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    1107:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    1117:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    1127:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    1137:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    1147:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    1157:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    1167:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    1177:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    1187:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    1197:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    11a7:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    11b7:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    11c7:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    11d7:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    11e7:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    11f7:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    1207:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    1217:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    1227:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    1237:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    1247:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00001258 <ad_cannonball>:
    1258:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    1268:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    1278:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    1288:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    1298:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    12a8:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    12b8:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    12c8:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    12d8:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    12e8:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    12f8:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    1308:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    1318:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    1328:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    1338:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    1348:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    1358:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    1368:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    1378:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    1388:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    1398:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    13a8:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    13b8:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    13c8:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    13d8:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    13e8:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    13f8:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    1408:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    1418:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    1428:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    1438:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    1448:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    1458:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    1468:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    1478:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    1488:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1498:	ff ff ff ff ff 00 00                                .......

0000149f <ad_brick_explode>:
    149f:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    14af:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    14bf:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    14cf:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    14df:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    14ef:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    14ff:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    150f:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    151f:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    152f:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    153f:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    154f:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    155f:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    156f:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    157f:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    158f:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    159f:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    15af:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    15bf:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    15cf:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    15df:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    15ef:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    15ff:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    160f:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    161f:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    162f:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    163f:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    164f:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    165f:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    166f:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    167f:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    168f:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    169f:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    16af:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    16bf:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    16cf:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    16df:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    16ef:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    16ff:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    170f:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    171f:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    172f:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    173f:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    174f:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    175f:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    176f:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    177f:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    178f:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    179f:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    17af:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    17bf:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    17cf:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    17df:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    17ef:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    17ff:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    180f:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    181f:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    182f:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    183f:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    184f:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    185f:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    186f:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    187f:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    188f:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    189f:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    18af:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    18bf:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    18cf:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    18df:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    18ef:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    18ff:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    190f:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    191f:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    192f:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    193f:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    194f:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    195f:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    196f:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    197f:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    198f:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    199f:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    19af:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    19bf:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    19cf:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    19df:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    19ef:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    19ff:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1a0f:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1a1f:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1a2f:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1a3f:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1a4f:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1a5f:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1a6f:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1a7f:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1a8f:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    1a9f:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1aaf:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1abf:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1acf:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1adf:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1aef:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1aff:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1b0f:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1b1f:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1b2f:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1b3f:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1b4f:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1b5f:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1b6f:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1b7f:	04 04 02 01 00                                      .....

00001b84 <ad_banter>:
    1b84:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1b94:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1ba4:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1bb4:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1bc4:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1bd4:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1be4:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    1bf4:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1c04:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1c14:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1c24:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1c34:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1c44:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1c54:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1c64:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1c74:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1c84:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1c94:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1ca4:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1cb4:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1cc4:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1cd4:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1ce4:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    1cf4:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1d04:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1d14:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1d24:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1d34:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1d44:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1d54:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1d64:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1d74:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1d84:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1d94:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1da4:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1db4:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1dc4:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1dd4:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1de4:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    1df4:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1e04:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1e14:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1e24:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1e34:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1e44:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1e54:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1e64:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1e74:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1e84:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1e94:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1ea4:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1eb4:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1ec4:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1ed4:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1ee4:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    1ef4:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1f04:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1f14:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1f24:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1f34:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1f44:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1f54:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1f64:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1f74:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1f84:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1f94:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1fa4:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1fb4:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1fc4:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1fd4:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1fe4:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    1ff4:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    2004:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    2014:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    2024:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    2034:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    2044:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    2054:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    2064:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    2074:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    2084:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    2094:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    20a4:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    20b4:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    20c4:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    20d4:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    20e4:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    20f4:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    2104:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    2114:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    2124:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    2134:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    2144:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    2154:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    2164:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    2174:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    2184:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    2194:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    21a4:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    21b4:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    21c4:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    21d4:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    21e4:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    21f4:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    2204:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    2214:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    2224:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    2234:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    2244:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    2254:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    2264:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    2274:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    2284:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    2294:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    22a4:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    22b4:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    22c4:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000022d5 <level_data>:
    22d5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    22e5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    230d:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    2325:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    2335:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2345:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    2361:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    2371:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2381:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    239d:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    23bd:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    23cd:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    23dd:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    23ed:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    23fd:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    240d:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    241d:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    242d:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    243d:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    244d:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    245d:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    246d:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    247d:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    248d:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    24a5:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    24b5:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    24d1:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    24e9:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    2505:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    2515:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2525:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    2541:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    2551:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2561:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    2581:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    25a1:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25b1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25c1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25d1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25e1:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    25fd:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    2619:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    2629:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    2639:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    2649:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    2659:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    2669:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    2679:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    2689:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    2699:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    26a9:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    26b9:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    26c9:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    26d9:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    26e9:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    26f9:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    2709:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    2719:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    2729:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2739:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    2749:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    2759:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    2769:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    2779:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    2789:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    2799:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    27a9:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    27b9:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    27c9:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    27d9:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    27e9:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    27f9:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    2809:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    2819:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    2829:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    2839:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    2849:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    2859:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2871:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    288d:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    289d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28ad:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28bd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28cd:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    28e9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2909:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2925:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2945:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2961:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2981:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    2999:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    29b5:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    29c5:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    29d5:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    29e5:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    29f5:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    2a05:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    2a15:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2a25:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2a35:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2a45:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2a55:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2a65:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2a75:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2a85:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2a95:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2aa5:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2ab5:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ac5:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2ae1:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2b05:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b25:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b41:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b61:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b7d:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b8d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b9d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bad:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bbd:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    2bcd:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    2bdd:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    2bed:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    2bfd:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    2c0d:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    2c1d:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    2c2d:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    2c3d:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    2c4d:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    2c5d:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    2c6d:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    2c7d:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    2c8d:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    2c9d:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    2cad:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cc9:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    2ce1:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    2cf1:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2d01:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2d11:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    2d29:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2d39:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2d49:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2d59:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2d69:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2d79:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2d91:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    2da1:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    2db1:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2dc9:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2dd9:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2de9:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    2df9:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    2e09:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    2e19:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    2e29:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2e41:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2e51:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e69:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2e79:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e89:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e99:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ea9:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ec5:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    2ee1:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2f01:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2f11:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f21:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    2f3d:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    2f5d:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2f79:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2f99:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2fa9:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2fb9:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2fc9:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2fe1:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    2ff1:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    3001:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    3011:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    3021:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3031:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    304d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    305d:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    306d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    307d:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    309d:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    30b9:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    30d9:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    30f1:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    3101:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    311d:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    3139:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    3159:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3169:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3179:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3189:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3199:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    31a9:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    31c1:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    31d1:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    31e1:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    31f1:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    3201:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    3211:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    3221:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    3231:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3241:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    3269:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    3279:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    3289:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    3299:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    32b1:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    32c1:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    32d1:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    32e1:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    32f1:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    3301:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    3311:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    3329:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    3339:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    3349:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    3359:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    3369:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    3379:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    3389:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    3399:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    33a9:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    33b9:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    33c9:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    33d9:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33e9:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    33f9:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    3409:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    3425:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3449:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3459:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3469:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3479:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3489:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    3499:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    34b1:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    34c1:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    34d1:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    34e1:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    34f1:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    3501:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    3511:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    3521:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3531:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    3541:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    3551:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3575:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3591:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    35a1:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    35b1:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    35c1:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    35d1:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    35e1:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    35f1:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    3601:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    3619:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    3629:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3645:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3665:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    3675:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    3685:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    3695:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    36a5:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    36b5:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    36c5:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    36d5:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    36e5:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    36f5:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    3705:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    3715:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    3725:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    3735:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3745:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3755:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3765:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3775:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3791:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37ad:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37cd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37e9:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    37f9:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    3809:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3825:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    383d:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    384d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    385d:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    386d:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    387d:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    388d:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    389d:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    38ad:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    38bd:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    38cd:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    38dd:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    38ed:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    3905:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    3915:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3925:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3935:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3945:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3955:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3971:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    398d:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    399d:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    39ad:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39c9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39e9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a05:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a25:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a35:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a45:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a55:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    3a7d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a9d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ab9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ad9:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3ae9:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3af9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b15:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3b31:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3b49:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3b59:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3b69:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3b79:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3b89:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3b99:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3ba9:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3bb9:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3bc9:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3bd9:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3be9:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    3bf9:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    3c09:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3c21:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3c41:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c5d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c7d:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3c8d:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3c9d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cb9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cd5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cf5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d11:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d21:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d31:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d41:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d51:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3d61:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3d79:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3d89:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3d99:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3da9:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    3db9:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3dc9:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    3dd9:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3df1:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3e01:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3e11:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    3e21:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3e31:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3e41:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e5d:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    3e6d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    3e7d:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3e8d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3e9d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    3ead:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3ebd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3ecd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    3edd:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    3eed:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3f11:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3f21:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3f31:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    3f41:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3f59:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3f69:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3f79:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    3f89:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    3f99:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    3fa9:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3fb9:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3fd1:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3fe1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3ff1:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    4001:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4011:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4021:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4031:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    4041:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4051:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    4061:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4071:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    4081:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4091:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    40a1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40b1:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    40c1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40d1:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    40e1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40f1:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    4101:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    4111:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    4121:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    4131:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4141:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    4151:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4161:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    4171:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4181:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    4191:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    41a1:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    41c1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    41e1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    41fd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    421d:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    4235:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    4259:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4275:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4295:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42b1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    42c1:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42d1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42ed:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    42fd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    430d:	02 02                                               ..

0000430f <sprites_data>:
    430f:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    431f:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    432f:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    433f:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    434f:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    435f:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    436f:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    437f:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    438f:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    439f:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    43af:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    43bf:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    43cf:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    43df:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    43ef:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    43ff:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    440f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    441f:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    442f:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    443f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    444f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    445f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    446f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    447f:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    448f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    449f:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    44af:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    44bf:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    44cf:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    44df:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    44ef:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    44ff:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    450f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    451f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    452f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    453f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    454f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    455f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    456f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    457f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    458f:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    459f:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    45af:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    45bf:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    45cf:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    45df:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    45ef:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    45ff:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    460f:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    461f:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    462f:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    463f:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    464f:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    465f:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    466f:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    467f:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    468f:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    469f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    46af:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    46bf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46cf:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    46df:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    46ef:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    46ff:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    470f:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    471f:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    472f:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    473f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    474f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    475f:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    476f:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    477f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    478f:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    479f:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    47af:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    47bf:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    47cf:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    47df:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    47ef:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    47ff:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    480f:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    481f:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    482f:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    483f:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    484f:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    485f:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    486f:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    487f:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    488f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    489f:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    48af:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    48bf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48cf:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    48df:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    48ef:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    48ff:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    490f:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    491f:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    492f:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    493f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    494f:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    495f:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    496f:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    497f:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    498f:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    499f:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    49af:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    49bf:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    49cf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    49df:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    49ef:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    49ff:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4a0f:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4a1f:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4a2f:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4a3f:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4a4f:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4a5f:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4a6f:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4a7f:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4a8f:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4a9f:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4aaf:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    4abf:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4acf:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4adf:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4aef:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4aff:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4b0f:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4b1f:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4b2f:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4b3f:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4b4f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b5f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b6f:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    4b7f:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    4b8f:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    4b9f:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    4baf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4bbf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4bcf:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    4bdf:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    4bef:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    4bff:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4c0f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c1f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c2f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c3f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004c4f <map_sub_turret>:
    4c4f:	01 01 23                                            ..#

00004c52 <map_sub_shot>:
    4c52:	01 01 1b                                            ...

00004c55 <map_up_arrow>:
    4c55:	01 01 22                                            .."

00004c58 <map_down_arrow>:
    4c58:	01 01 21                                            ..!

00004c5b <map_right_arrow>:
    4c5b:	01 01 20                                            .. 

00004c5e <map_rocket_right_1>:
    4c5e:	01 01 1a                                            ...

00004c61 <map_rocket_right_0>:
    4c61:	01 01 19                                            ...

00004c64 <map_rocket_up_1>:
    4c64:	01 01 18                                            ...

00004c67 <map_rocket_up_0>:
    4c67:	01 01 17                                            ...

00004c6a <map_ball>:
    4c6a:	01 01 16                                            ...

00004c6d <map_explosion_2>:
    4c6d:	02 02 08 09 09 08                                   ......

00004c73 <map_explosion_1>:
    4c73:	02 02 06 07 10 11                                   ......

00004c79 <map_explosion_0>:
    4c79:	02 02 04 05 0e 0f                                   ......

00004c7f <map_tank2_right_0>:
    4c7f:	02 02 14 15 1e 1f                                   ......

00004c85 <map_tank2_up_0>:
    4c85:	02 02 12 13 1c 1d                                   ......

00004c8b <map_tank1_right_0>:
    4c8b:	02 02 02 03 0c 0d                                   ......

00004c91 <map_tank1_up_0>:
    4c91:	02 02 00 01 0a 0b                                   ......

00004c97 <map_tank_blank>:
    4c97:	02 02 24 24 24 24                                   ..$$$$

00004c9d <map_none>:
    4c9d:	01 01 24                                            ..$

00004ca0 <tiles_data>:
	...
    4ce0:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4cf0:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4d00:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4d10:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4d20:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    4d30:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    4d40:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4d50:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4d60:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    4d70:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    4d80:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    4d90:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4da0:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    4db0:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    4dc0:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4dd0:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    4de0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4df0:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4e00:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4e10:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4e28:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4e38:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4e48:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4e60:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4e70:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4e80:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4e90:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4ea8:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4ec8:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4ee0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4ef0:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4f00:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4f10:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4f20:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4f30:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4f40:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4f50:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4f60:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4f70:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4f80:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4f90:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4fa0:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4fb0:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4fc0:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4fd0:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4fe0:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4ff0:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    5000:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    5010:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    5020:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    5030:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    5040:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    5050:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    5060:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    5070:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    5080:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    5090:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    50a0:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    50b0:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    50c0:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    50d0:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    50e0:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    50f0:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    5100:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    5110:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    5120:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    5130:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    5140:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    5150:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    5160:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    5170:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5180:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5190:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    51a0:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    51b0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    51c0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    51d0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    5200:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    5210:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5220:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    5230:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5240:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5250:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5260:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    5270:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    5280:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    5290:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    52a0:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    52b0:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    52c0:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    52d0:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    52e0:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    52f0:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    5300:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    5310:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    5320:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5330:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5340:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5350:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5360:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5370:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    53a0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    53b0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    53c0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    53d0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    53e0:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    53f0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5400:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5410:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5420:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    5460:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    5470:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    5480:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    5490:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    54a0:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    54b0:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    54c0:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    54d0:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    5510:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    5548:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    5558:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    5568:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    5578:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    5588:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    5598:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    55a8:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    55b8:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    55c8:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    55d8:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    55e8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55f8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5608:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5618:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5628:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5638:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5648:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5658:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    5668:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    5678:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    5688:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    5698:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    56a8:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    56b8:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    56c8:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    56d8:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    56e8:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5720:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5730:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5740:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    5764:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    5774:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    5784:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    5794:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    57a4:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    57b4:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    57c4:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    57d4:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    57e4:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    57f4:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5804:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5814:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5824:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5834:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5844:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5854:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5864:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    5874:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5884:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5894:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    58a4:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    58b4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    58c4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    58d4:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    58e4:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    58f4:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    5904:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    5914:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    5924:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    5934:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5944:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5954:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5964:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5974:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5984:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5994:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    59a4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59b4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    59c4:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    59d4:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    59e4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59f4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5a04:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    5a14:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5a24:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5a34:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5a44:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a54:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5a64:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5a74:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5a84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a94:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5aa4:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    5ab4:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ac4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ad4:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5ae4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5af4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b04:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b14:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    5b24:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5b34:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b44:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5b54:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5b64:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5b94:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    5ba4:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5bb4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bc4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5bd4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5be4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5bf4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c04:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    5c14:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    5c24:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5c34:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5c44:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c54:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5c64:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5c74:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5c84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c94:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    5ca4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5cb4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    5cc4:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    5cd4:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    5ce4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5cf4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5d04:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5d14:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5d24:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5d34:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5d44:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5d54:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5d64:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5d74:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5d84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5d94:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5da4:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5db4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5dc4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5dd4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    5de4:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5df4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e04:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5e14:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5e24:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e34:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e44:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5e54:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5e64:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e84:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5e94:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5ea4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5eb4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ec4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ed4:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5ee4:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5ef4:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5f04:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f14:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f24:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f34:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5f44:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f54:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f64:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5f74:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5f84:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f94:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5fa4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5fb4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5fc4:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5fd4:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5fe4:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ff4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6004:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6014:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    6024:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    6034:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    6044:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    6054:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    6064:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    6074:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    6084:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    6094:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    60a4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    60b4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    60c4:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    60d4:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    60e4:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    60f4:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    6104:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6114:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    6124:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    6134:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6144:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6154:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    6164:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    6174:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    6184:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6194:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    61a4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61b4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61c4:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    61d4:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    61e4:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61f4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6204:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6214:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    6224:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6234:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6244:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    6254:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    6264:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6274:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6284:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6294:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    62a4:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    62b4:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    62c4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62d4:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    62e4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    62f4:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    6304:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    6314:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    6324:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    6334:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    6344:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6354:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    6364:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6374:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    6384:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    6394:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    63a4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63b4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    63c4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    63d4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    63e4:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    63f4:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6404:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6414:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    6424:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6434:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6444:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6454:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6464:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6474:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6484:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6494:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    64a4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    64b4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64c4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    64d4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    64e4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    64f4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    6504:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    6514:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6524:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6534:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6544:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6554:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6564:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6574:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6584:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6594:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    65a4:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    65b4:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    65c4:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    65d4:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    65e4:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    65f4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6604:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6614:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    6624:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    6634:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    6644:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    6654:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    6664:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    6674:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    6684:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    6694:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    66a4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    66b4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    66c4:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    66d4:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    66e4:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    66f4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6704:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6714:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    6724:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6734:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6744:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    6754:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    6764:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6774:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6784:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6794:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    67a4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    67b4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    67c4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    67d4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    67e4:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    67f4:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6804:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6814:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6824:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6834:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6844:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6854:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6864:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6874:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6884:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    6894:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    68a4:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    68b4:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    68c4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    68d4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    68e4:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    68f4:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6904:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6914:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    6924:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6934:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6944:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6954:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6964:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    6974:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    6984:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    6994:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    69a4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    69b4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    69c4:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    69d4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    69e4:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    69f4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6a04:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a14:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6a24:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6a34:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6a44:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6a54:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6a64:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    6a74:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6a84:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6a94:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6aa4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6ab4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6ac4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6ad4:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    6ae4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6af4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b04:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b14:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6b24:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6b34:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b44:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b54:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6b64:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6b74:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b94:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6ba4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6bb4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6bc4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6bd4:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    6be4:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    6bf4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6c04:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6c14:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6c24:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6c34:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6c44:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6c54:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6c64:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    6c74:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6c84:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6c94:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    6ca4:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6cb4:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6cc4:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6cd4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    6ce4:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    6cf4:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    6d04:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d14:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6d24:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6d34:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6d44:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d54:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6d64:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6d74:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6d84:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d94:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6da4:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6db4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6dc4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6dd4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    6de4:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6df4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6e04:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e14:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6e24:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6e34:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6e44:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e54:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6e64:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6e74:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6e84:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6e94:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6ea4:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    6eb4:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6ec4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ed4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6ee4:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    6ef4:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f04:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f14:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6f24:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6f34:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f44:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f54:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6f64:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6f74:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f84:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f94:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fa4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fb4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fc4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fd4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6fe4:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6ff4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7004:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7014:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    7024:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    7034:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    7044:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7054:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    7064:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    7074:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    7084:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    7094:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    70a4:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70b4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70c4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70d4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    70e4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    70f4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    7104:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    7114:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    7124:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    7134:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    7144:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7154:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7164:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7174:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    7184:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7194:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    71a4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71b4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71c4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71d4:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    71e4:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    71f4:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    7204:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7214:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7224:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7234:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    7244:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    7254:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7264:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7274:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7284:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    7294:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    72a4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72b4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72c4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    72d4:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    72e4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72f4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7304:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    7314:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7324:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7334:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7344:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    7354:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    73a8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    73b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    73d0:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    73e8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    73f8:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7428:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    7438:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7448:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    7460:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    7470:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    7480:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7490:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    74a8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    74b8:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    74c8:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    74e0:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    74f0:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    7500:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    7510:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    7528:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7538:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    756c:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    757c:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    758c:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    75a8:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    75b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    75c8:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    75e8:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    75f8:	df df df df df df df df 00 00 df df df df 00 00     ................
    7608:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    7628:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7638:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7648:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7688:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7698:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    76b8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7708:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    772c:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    773c:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    774c:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    7768:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7778:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    7788:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    77a8:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    77b8:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    77c8:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    77e8:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    77f8:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7808:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    7828:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    7838:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    7848:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    786c:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    787c:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    788c:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    78a8:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    78b8:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    78c8:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    78e8:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    78f8:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    7908:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7928:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    7938:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7948:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    7968:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7978:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7988:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    79a8:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    79b8:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    79c8:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    79f0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7a08:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7a20:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a30:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a40:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a50:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a60:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    7a70:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7a80:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7a90:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7ab0:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7ac8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7ae0:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    7af0:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7b00:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7b10:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7b28:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7b38:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7b50:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7b68:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7b78:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    7b88:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    7ba8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    7bb8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7bc8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7be8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7bf8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c08:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7c28:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c38:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7c48:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7c68:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    7c78:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7c88:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7ca8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7cb8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7cc8:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7ce8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7cf8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7d08:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7d28:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7d38:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7d48:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7d68:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7d78:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7d88:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7da8:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7db8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7dc8:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7dec:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7dfc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    7e0c:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7e28:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7e38:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7e48:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7e68:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e78:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e88:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7ea8:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7eb8:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7ec8:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7ee8:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7ef8:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7f08:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7f28:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7f38:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7f48:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7f68:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7f78:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7f88:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7fa8:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7fb8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7fc8:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7fe8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7ff8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    8008:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    8028:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    8038:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    8048:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    8068:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    8078:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8088:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    80a8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80b8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80c8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    80e8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80f8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8108:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8128:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    8138:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    8148:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    8168:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8178:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    8188:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    81a8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    81b8:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    81c8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    81e8:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    81f8:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    8208:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    8228:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    8238:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8248:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    8268:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    8278:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    8288:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    82a8:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    82b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    82c8:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    82ec:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    82fc:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    8350:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00008360 <map_sub_emerging>:
    8360:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8370:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    8380:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8390:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    83a0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    83b0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    83c0:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    83d0:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    83e0:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    83f0:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    8400:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    8410:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    8420:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8430:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    8440:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8450:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8460:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8470:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8480:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8490:	0d 0d 0d 0d 0d 0d                                   ......

00008496 <map_sub>:
    8496:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84a6:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    84b6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84c6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84d6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84e6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    84f6:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    8506:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    8516:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    8526:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    8536:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    8546:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    8556:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8566:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    8576:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8586:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8596:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85a6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85b6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85c6:	0d 0d 0d 0d 0d 0d                                   ......

000085cc <map_scope_2>:
    85cc:	01 01 12                                            ...

000085cf <map_scope_1>:
    85cf:	01 01 11                                            ...

000085d2 <map_scope_0>:
    85d2:	01 01 10                                            ...

000085d5 <map_blue_tank>:
    85d5:	02 02 2b 2c 31 32                                   ..+,12

000085db <map_green_tank>:
    85db:	02 02 18 19 23 24                                   ....#$

000085e1 <map_fence>:
    85e1:	01 01 0f                                            ...

000085e4 <map_turf>:
    85e4:	01 01 0e                                            ...

000085e7 <map_water>:
    85e7:	01 01 0d                                            ...

000085ea <map_metal_bl>:
    85ea:	01 01 0c                                            ...

000085ed <map_metal_tr>:
    85ed:	01 01 0b                                            ...

000085f0 <map_metal_br>:
    85f0:	01 01 0a                                            ...

000085f3 <map_metal_tl>:
    85f3:	01 01 09                                            ...

000085f6 <map_tile_exp_2>:
    85f6:	01 01 08                                            ...

000085f9 <map_tile_exp_1>:
    85f9:	01 01 07                                            ...

000085fc <map_tile_exp_0>:
    85fc:	01 01 06                                            ...

000085ff <map_rocket_itm>:
    85ff:	01 01 04                                            ...

00008602 <map_explode_itm>:
    8602:	01 01 03                                            ...

00008605 <map_speed_itm>:
    8605:	01 01 02                                            ...

00008608 <map_metal>:
    8608:	01 01 05                                            ...

0000860b <map_brick>:
    860b:	01 01 01                                            ...

0000860e <map_splash>:
    860e:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    861e:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    862e:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    863e:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    864e:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    865e:	1a 00 00 1a 2f 30                                   ..../0

00008664 <map_pause>:
    8664:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    8674:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    8684:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    8694:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000086a2 <map_tile_none>:
    86a2:	01 01 00 00                                         ....

000086a6 <__ctors_end>:
    86a6:	11 24       	eor	r1, r1
    86a8:	1f be       	out	0x3f, r1	; 63
    86aa:	cf ef       	ldi	r28, 0xFF	; 255
    86ac:	d0 e1       	ldi	r29, 0x10	; 16
    86ae:	de bf       	out	0x3e, r29	; 62
    86b0:	cd bf       	out	0x3d, r28	; 61

000086b2 <__do_copy_data>:
    86b2:	11 e0       	ldi	r17, 0x01	; 1
    86b4:	a0 e0       	ldi	r26, 0x00	; 0
    86b6:	b1 e0       	ldi	r27, 0x01	; 1
    86b8:	ec ed       	ldi	r30, 0xDC	; 220
    86ba:	ff ee       	ldi	r31, 0xEF	; 239
    86bc:	02 c0       	rjmp	.+4      	; 0x86c2 <__do_copy_data+0x10>
    86be:	05 90       	lpm	r0, Z+
    86c0:	0d 92       	st	X+, r0
    86c2:	a6 30       	cpi	r26, 0x06	; 6
    86c4:	b1 07       	cpc	r27, r17
    86c6:	d9 f7       	brne	.-10     	; 0x86be <__do_copy_data+0xc>

000086c8 <__do_clear_bss>:
    86c8:	10 e1       	ldi	r17, 0x10	; 16
    86ca:	a6 e0       	ldi	r26, 0x06	; 6
    86cc:	b1 e0       	ldi	r27, 0x01	; 1
    86ce:	01 c0       	rjmp	.+2      	; 0x86d2 <.do_clear_bss_start>

000086d0 <.do_clear_bss_loop>:
    86d0:	1d 92       	st	X+, r1

000086d2 <.do_clear_bss_start>:
    86d2:	a2 3a       	cpi	r26, 0xA2	; 162
    86d4:	b1 07       	cpc	r27, r17
    86d6:	e1 f7       	brne	.-8      	; 0x86d0 <.do_clear_bss_loop>

000086d8 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    86d8:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <wdt_randomize>
#endif

    MCUSR = 0;
    86dc:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    86de:	88 e1       	ldi	r24, 0x18	; 24
    86e0:	0f b6       	in	r0, 0x3f	; 63
    86e2:	f8 94       	cli
    86e4:	80 93 60 00 	sts	0x0060, r24
    86e8:	10 92 60 00 	sts	0x0060, r1
    86ec:	0f be       	out	0x3f, r0	; 63

000086ee <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    86ee:	0e 94 54 48 	call	0x90a8	; 0x90a8 <isEepromFormatted>
    86f2:	81 11       	cpse	r24, r1
    86f4:	02 c0       	rjmp	.+4      	; 0x86fa <Initialize+0xc>
    86f6:	0e 94 32 48 	call	0x9064	; 0x9064 <FormatEeprom>

	cli();
    86fa:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    86fc:	81 e0       	ldi	r24, 0x01	; 1
    86fe:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    8702:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    8706:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    870a:	10 92 02 0b 	sts	0x0B02, r1
    870e:	10 92 08 0b 	sts	0x0B08, r1
    8712:	10 92 0e 0b 	sts	0x0B0E, r1
    8716:	10 92 14 0b 	sts	0x0B14, r1
    871a:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    871e:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    8722:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8726:	92 e1       	ldi	r25, 0x12	; 18
    8728:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    872c:	90 ee       	ldi	r25, 0xE0	; 224
    872e:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    8732:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    8736:	94 e1       	ldi	r25, 0x14	; 20
    8738:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    873c:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    8740:	10 92 f4 0a 	sts	0x0AF4, r1
    8744:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    8748:	10 92 f8 0a 	sts	0x0AF8, r1
    874c:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    8750:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    8754:	0e 94 df 54 	call	0xa9be	; 0xa9be <InitializeVideoMode>
    8758:	80 e7       	ldi	r24, 0x70	; 112
    875a:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    875c:	fc 01       	movw	r30, r24
    875e:	25 91       	lpm	r18, Z+
    8760:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    8762:	f9 01       	movw	r30, r18
    8764:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    8766:	30 83       	st	Z, r19
    8768:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    876a:	20 e0       	ldi	r18, 0x00	; 0
    876c:	8e 39       	cpi	r24, 0x9E	; 158
    876e:	92 07       	cpc	r25, r18
    8770:	a9 f7       	brne	.-22     	; 0x875c <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    8772:	78 94       	sei
	
	DisplayLogo();
    8774:	0e 94 9e 55 	call	0xab3c	; 0xab3c <DisplayLogo>
    8778:	0e 94 04 75 	call	0xea08	; 0xea08 <main>
    877c:	0c 94 ec 77 	jmp	0xefd8	; 0xefd8 <_exit>

00008780 <__bad_interrupt>:
    8780:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008784 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    8784:	0c e0       	ldi	r16, 0x0C	; 12
    8786:	0a 95       	dec	r16
    8788:	f1 f7       	brne	.-4      	; 0x8786 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    878a:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    878c:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    878e:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8790:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    8792:	20 91 c1 0b 	lds	r18, 0x0BC1


		clr r16
    8796:	00 27       	eor	r16, r16

00008798 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    8798:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    879a:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    879c:	ac 0f       	add	r26, r28
		adc XH,YH
    879e:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    87a0:	1c 91       	ld	r17, X
		std Z+2,r17
    87a2:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    87a4:	02 17       	cp	r16, r18
		brsh noov
    87a6:	08 f4       	brcc	.+2      	; 0x87aa <noov>
		mov r17,r16
    87a8:	10 2f       	mov	r17, r16

000087aa <noov>:
	noov:
		st X,r17
    87aa:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    87ac:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    87ae:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    87b0:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    87b2:	90 f3       	brcs	.-28     	; 0x8798 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    87b4:	05 e2       	ldi	r16, 0x25	; 37

000087b6 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    87b6:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    87b8:	1a 95       	dec	r17
		brne .-4
    87ba:	f1 f7       	brne	.-4      	; 0x87b8 <wait_loop+0x2>

		dec r16
    87bc:	0a 95       	dec	r16
		brne wait_loop
    87be:	d9 f7       	brne	.-10     	; 0x87b6 <wait_loop>

		lds r2,overlay_tile_table
    87c0:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    87c4:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    87c8:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    87cc:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    87d0:	68 01       	movw	r12, r16
		movw r6,r16
    87d2:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    87d4:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    87d6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    87d8:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    87da:	4e 01       	movw	r8, r28
		clr r0
    87dc:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    87de:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    87e2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    87e4:	09 f0       	breq	.+2      	; 0x87e8 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    87e6:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    87e8:	09 f0       	breq	.+2      	; 0x87ec <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    87ea:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    87ec:	09 f0       	breq	.+2      	; 0x87f0 <wait_loop+0x3a>
		mov r24,r19
    87ee:	83 2f       	mov	r24, r19

		breq .+2
    87f0:	09 f0       	breq	.+2      	; 0x87f4 <wait_loop+0x3e>
		movw r12,r2
    87f2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    87f4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    87f6:	a0 2e       	mov	r10, r16
		clr r22
    87f8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    87fa:	78 e0       	ldi	r23, 0x08	; 8

000087fc <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    87fc:	7d d2       	rcall	.+1274   	; 0x8cf8 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    87fe:	3c e0       	ldi	r19, 0x0C	; 12
    8800:	3a 95       	dec	r19
    8802:	f1 f7       	brne	.-4      	; 0x8800 <next_tile_line+0x4>
    8804:	00 00       	nop
    8806:	00 00       	nop

		;***draw line***
		call render_tile_line
    8808:	0e 94 35 44 	call	0x886a	; 0x886a <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    880c:	3f e0       	ldi	r19, 0x0F	; 15
    880e:	3a 95       	dec	r19
    8810:	f1 f7       	brne	.-4      	; 0x880e <next_tile_line+0x12>
    8812:	00 00       	nop
    8814:	00 00       	nop

		dec r10
    8816:	aa 94       	dec	r10
		breq frame_end
    8818:	a9 f0       	breq	.+42     	; 0x8844 <frame_end>
	
		inc r22
    881a:	63 95       	inc	r22
		lpm ;3 nop
    881c:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    881e:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8820:	31 f0       	breq	.+12     	; 0x882e <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    8822:	33 e0       	ldi	r19, 0x03	; 3
    8824:	3a 95       	dec	r19
    8826:	f1 f7       	brne	.-4      	; 0x8824 <next_tile_line+0x28>
    8828:	00 00       	nop
    882a:	00 00       	nop
		
		rjmp next_tile_line	
    882c:	e7 cf       	rjmp	.-50     	; 0x87fc <next_tile_line>

0000882e <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    882e:	66 27       	eor	r22, r22

		clr r0
    8830:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8832:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    8834:	c3 0f       	add	r28, r19
		adc YH,r0
    8836:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    8838:	8a 95       	dec	r24
		brne .+2
    883a:	09 f4       	brne	.+2      	; 0x883e <next_tile_row+0x10>
		movw YL,r8	;main vram
    883c:	e4 01       	movw	r28, r8
		brne .+2
    883e:	09 f4       	brne	.+2      	; 0x8842 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8840:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    8842:	dc cf       	rjmp	.-72     	; 0x87fc <next_tile_line>

00008844 <frame_end>:

	frame_end:

		WAIT r19,18
    8844:	36 e0       	ldi	r19, 0x06	; 6
    8846:	3a 95       	dec	r19
    8848:	f1 f7       	brne	.-4      	; 0x8846 <frame_end+0x2>

		rcall hsync_pulse ;145
    884a:	56 d2       	rcall	.+1196   	; 0x8cf8 <hsync_pulse>
	
		clr r1
    884c:	11 24       	eor	r1, r1
		call RestoreBackground
    884e:	0e 94 80 53 	call	0xa700	; 0xa700 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    8852:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    8856:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    8858:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    885a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    885c:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8860:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8862:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    8866:	11 24       	eor	r1, r1


		ret
    8868:	08 95       	ret

0000886a <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    886a:	de 01       	movw	r26, r28

		mul r22,r23
    886c:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    886e:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8870:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8872:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    8874:	00 0d       	add	r16, r0
		adc r17,r1
    8876:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8878:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    887a:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    887c:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    887e:	00 0d       	add	r16, r0
		adc r17,r1
    8880:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    8882:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8884:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    8886:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    8888:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    888a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    888c:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    888e:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    8890:	08 f4       	brcc	.+2      	; 0x8894 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    8892:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    8894:	04 0e       	add	r0, r20
	    adc r1,r21
    8896:	15 1e       	adc	r1, r21

		movw ZL,r0
    8898:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    889a:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    889c:	f0 f0       	brcs	.+60     	; 0x88da <ramloop>

0000889e <romloop>:
	

	romloop:
	    lpm r16,Z+
    889e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    88a0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    88a2:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    88a4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    88a6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    88a8:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    88aa:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    88ac:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    88ae:	28 31       	cpi	r18, 0x18	; 24
		nop
    88b0:	00 00       	nop

	    lpm r16,Z+
    88b2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    88b4:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    88b6:	08 f4       	brcc	.+2      	; 0x88ba <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    88b8:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    88ba:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    88bc:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    88be:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    88c0:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    88c2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    88c4:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    88c6:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    88c8:	1a 95       	dec	r17
   
	    lpm r16,Z+
    88ca:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    88cc:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    88ce:	05 91       	lpm	r16, Z+

		breq end	
    88d0:	31 f1       	breq	.+76     	; 0x891e <end>
	    movw ZL,r0   	;copy next tile adress
    88d2:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    88d4:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    88d6:	18 f7       	brcc	.-58     	; 0x889e <romloop>
	
		rjmp .
    88d8:	00 c0       	rjmp	.+0      	; 0x88da <ramloop>

000088da <ramloop>:

	ramloop:

	    ld r16,Z+
    88da:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    88dc:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    88de:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    88e0:	01 91       	ld	r16, Z+
		nop   
    88e2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    88e4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    88e6:	23 9f       	mul	r18, r19


	    ld r16,Z+
    88e8:	01 91       	ld	r16, Z+
		nop
    88ea:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    88ec:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    88ee:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    88f0:	00 c0       	rjmp	.+0      	; 0x88f2 <ramloop+0x18>

	    ld r16,Z+
    88f2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    88f4:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    88f6:	08 f0       	brcs	.+2      	; 0x88fa <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    88f8:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    88fa:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    88fc:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    88fe:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    8900:	15 1e       	adc	r1, r21
		rjmp .
    8902:	00 c0       	rjmp	.+0      	; 0x8904 <ramloop+0x2a>
    
		ld r16,Z+		
    8904:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8906:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8908:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    890a:	00 c0       	rjmp	.+0      	; 0x890c <ramloop+0x32>

	    ld r16,Z+	
    890c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    890e:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8910:	01 91       	ld	r16, Z+

	    dec r17
    8912:	1a 95       	dec	r17
	    breq end
    8914:	21 f0       	breq	.+8      	; 0x891e <end>
	
		movw ZL,r0
    8916:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8918:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    891a:	08 f6       	brcc	.-126    	; 0x889e <romloop>
		rjmp ramloop
    891c:	de cf       	rjmp	.-68     	; 0x88da <ramloop>

0000891e <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    891e:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8920:	00 27       	eor	r16, r16
		lpm	
    8922:	c8 95       	lpm
		nop
    8924:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8926:	08 b9       	out	0x08, r16	; 8

		ret
    8928:	08 95       	ret

0000892a <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    892a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    892c:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    8930:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    8934:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    8936:	82 9f       	mul	r24, r18
	add ZL,r0
    8938:	e0 0d       	add	r30, r0
	adc ZH,r1
    893a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    893c:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    893e:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8940:	62 9f       	mul	r22, r18
	add XL,r0
    8942:	a0 0d       	add	r26, r0
	adc XH,r1
    8944:	b1 1d       	adc	r27, r1

	clr r0
    8946:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8948:	05 90       	lpm	r0, Z+
    894a:	0d 92       	st	X+, r0
    894c:	05 90       	lpm	r0, Z+
    894e:	0d 92       	st	X+, r0
    8950:	05 90       	lpm	r0, Z+
    8952:	0d 92       	st	X+, r0
    8954:	05 90       	lpm	r0, Z+
    8956:	0d 92       	st	X+, r0
    8958:	05 90       	lpm	r0, Z+
    895a:	0d 92       	st	X+, r0
    895c:	05 90       	lpm	r0, Z+
    895e:	0d 92       	st	X+, r0
    8960:	05 90       	lpm	r0, Z+
    8962:	0d 92       	st	X+, r0
    8964:	05 90       	lpm	r0, Z+
    8966:	0d 92       	st	X+, r0
    8968:	05 90       	lpm	r0, Z+
    896a:	0d 92       	st	X+, r0
    896c:	05 90       	lpm	r0, Z+
    896e:	0d 92       	st	X+, r0
    8970:	05 90       	lpm	r0, Z+
    8972:	0d 92       	st	X+, r0
    8974:	05 90       	lpm	r0, Z+
    8976:	0d 92       	st	X+, r0
    8978:	05 90       	lpm	r0, Z+
    897a:	0d 92       	st	X+, r0
    897c:	05 90       	lpm	r0, Z+
    897e:	0d 92       	st	X+, r0
    8980:	05 90       	lpm	r0, Z+
    8982:	0d 92       	st	X+, r0
    8984:	05 90       	lpm	r0, Z+
    8986:	0d 92       	st	X+, r0
    8988:	05 90       	lpm	r0, Z+
    898a:	0d 92       	st	X+, r0
    898c:	05 90       	lpm	r0, Z+
    898e:	0d 92       	st	X+, r0
    8990:	05 90       	lpm	r0, Z+
    8992:	0d 92       	st	X+, r0
    8994:	05 90       	lpm	r0, Z+
    8996:	0d 92       	st	X+, r0
    8998:	05 90       	lpm	r0, Z+
    899a:	0d 92       	st	X+, r0
    899c:	05 90       	lpm	r0, Z+
    899e:	0d 92       	st	X+, r0
    89a0:	05 90       	lpm	r0, Z+
    89a2:	0d 92       	st	X+, r0
    89a4:	05 90       	lpm	r0, Z+
    89a6:	0d 92       	st	X+, r0
    89a8:	05 90       	lpm	r0, Z+
    89aa:	0d 92       	st	X+, r0
    89ac:	05 90       	lpm	r0, Z+
    89ae:	0d 92       	st	X+, r0
    89b0:	05 90       	lpm	r0, Z+
    89b2:	0d 92       	st	X+, r0
    89b4:	05 90       	lpm	r0, Z+
    89b6:	0d 92       	st	X+, r0
    89b8:	05 90       	lpm	r0, Z+
    89ba:	0d 92       	st	X+, r0
    89bc:	05 90       	lpm	r0, Z+
    89be:	0d 92       	st	X+, r0
    89c0:	05 90       	lpm	r0, Z+
    89c2:	0d 92       	st	X+, r0
    89c4:	05 90       	lpm	r0, Z+
    89c6:	0d 92       	st	X+, r0
    89c8:	05 90       	lpm	r0, Z+
    89ca:	0d 92       	st	X+, r0
    89cc:	05 90       	lpm	r0, Z+
    89ce:	0d 92       	st	X+, r0
    89d0:	05 90       	lpm	r0, Z+
    89d2:	0d 92       	st	X+, r0
    89d4:	05 90       	lpm	r0, Z+
    89d6:	0d 92       	st	X+, r0
    89d8:	05 90       	lpm	r0, Z+
    89da:	0d 92       	st	X+, r0
    89dc:	05 90       	lpm	r0, Z+
    89de:	0d 92       	st	X+, r0
    89e0:	05 90       	lpm	r0, Z+
    89e2:	0d 92       	st	X+, r0
    89e4:	05 90       	lpm	r0, Z+
    89e6:	0d 92       	st	X+, r0
    89e8:	05 90       	lpm	r0, Z+
    89ea:	0d 92       	st	X+, r0
    89ec:	05 90       	lpm	r0, Z+
    89ee:	0d 92       	st	X+, r0
    89f0:	05 90       	lpm	r0, Z+
    89f2:	0d 92       	st	X+, r0
    89f4:	05 90       	lpm	r0, Z+
    89f6:	0d 92       	st	X+, r0
    89f8:	05 90       	lpm	r0, Z+
    89fa:	0d 92       	st	X+, r0
    89fc:	05 90       	lpm	r0, Z+
    89fe:	0d 92       	st	X+, r0
    8a00:	05 90       	lpm	r0, Z+
    8a02:	0d 92       	st	X+, r0
    8a04:	05 90       	lpm	r0, Z+
    8a06:	0d 92       	st	X+, r0
    8a08:	05 90       	lpm	r0, Z+
    8a0a:	0d 92       	st	X+, r0
    8a0c:	05 90       	lpm	r0, Z+
    8a0e:	0d 92       	st	X+, r0
    8a10:	05 90       	lpm	r0, Z+
    8a12:	0d 92       	st	X+, r0
    8a14:	05 90       	lpm	r0, Z+
    8a16:	0d 92       	st	X+, r0
    8a18:	05 90       	lpm	r0, Z+
    8a1a:	0d 92       	st	X+, r0
    8a1c:	05 90       	lpm	r0, Z+
    8a1e:	0d 92       	st	X+, r0
    8a20:	05 90       	lpm	r0, Z+
    8a22:	0d 92       	st	X+, r0
    8a24:	05 90       	lpm	r0, Z+
    8a26:	0d 92       	st	X+, r0
    8a28:	05 90       	lpm	r0, Z+
    8a2a:	0d 92       	st	X+, r0
    8a2c:	05 90       	lpm	r0, Z+
    8a2e:	0d 92       	st	X+, r0
    8a30:	05 90       	lpm	r0, Z+
    8a32:	0d 92       	st	X+, r0
    8a34:	05 90       	lpm	r0, Z+
    8a36:	0d 92       	st	X+, r0
    8a38:	05 90       	lpm	r0, Z+
    8a3a:	0d 92       	st	X+, r0
    8a3c:	05 90       	lpm	r0, Z+
    8a3e:	0d 92       	st	X+, r0
    8a40:	05 90       	lpm	r0, Z+
    8a42:	0d 92       	st	X+, r0
    8a44:	05 90       	lpm	r0, Z+
    8a46:	0d 92       	st	X+, r0


	clr r1
    8a48:	11 24       	eor	r1, r1
	ret
    8a4a:	08 95       	ret

00008a4c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8a4c:	0f 93       	push	r16
	push r17
    8a4e:	1f 93       	push	r17
	push YL
    8a50:	cf 93       	push	r28
	push YH
    8a52:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    8a54:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    8a56:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    8a58:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    8a5a:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8a5c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8a5e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8a60:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    8a62:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    8a64:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    8a66:	8e 9f       	mul	r24, r30
	movw r26,r0
    8a68:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    8a6a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    8a6c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    8a6e:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    8a70:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    8a72:	00 24       	eor	r0, r0
	add YL,r1
    8a74:	c1 0d       	add	r28, r1
	adc YH,r0		
    8a76:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    8a78:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    8a7a:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    8a7c:	ea 0f       	add	r30, r26
	adc ZH,r27
    8a7e:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    8a80:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8a82:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    8a84:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    8a86:	69 9f       	mul	r22, r25
	add XL,r0
    8a88:	a0 0d       	add	r26, r0
	adc XH,r1
    8a8a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    8a8c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    8a8e:	dd 27       	eor	r29, r29

	cpi r20,0	
    8a90:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    8a92:	51 f4       	brne	.+20     	; 0x8aa8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    8a94:	a2 0f       	add	r26, r18
	adc XH,r1
    8a96:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    8a98:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    8a9a:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    8a9c:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    8a9e:	11 c0       	rjmp	.+34     	; 0x8ac2 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    8aa0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    8aa2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    8aa4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    8aa6:	0d c0       	rjmp	.+26     	; 0x8ac2 <x_check_end>

00008aa8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    8aa8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    8aaa:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    8aac:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    8aae:	04 c0       	rjmp	.+8      	; 0x8ab8 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    8ab0:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    8ab2:	e8 0f       	add	r30, r24
	adc ZH,r1	
    8ab4:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    8ab6:	05 c0       	rjmp	.+10     	; 0x8ac2 <x_check_end>

00008ab8 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    8ab8:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    8aba:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    8abc:	e2 0f       	add	r30, r18
	adc ZH,r1
    8abe:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    8ac0:	31 97       	sbiw	r30, 0x01	; 1

00008ac2 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    8ac2:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    8ac4:	41 f4       	brne	.+16     	; 0x8ad6 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    8ac6:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    8ac8:	93 9f       	mul	r25, r19
	add XL,r0
    8aca:	a0 0d       	add	r26, r0
	adc XH,r1
    8acc:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    8ace:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    8ad0:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    8ad2:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    8ad4:	0a c0       	rjmp	.+20     	; 0x8aea <y_check_end>

00008ad6 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    8ad6:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    8ad8:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    8ada:	63 2f       	mov	r22, r19
	dec r22
    8adc:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    8ade:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    8ae0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8ae2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    8ae4:	56 9f       	mul	r21, r22
	add ZL,r0
    8ae6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    8ae8:	f1 1d       	adc	r31, r1

00008aea <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    8aea:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    8aec:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    8aee:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    8af0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    8af2:	00 ff       	sbrs	r16, 0
	clr r23
    8af4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    8af6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    8af8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    8afa:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    8afc:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    8afe:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8b00:	59 1b       	sub	r21, r25

00008b02 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    8b02:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8b04:	48 1b       	sub	r20, r24

00008b06 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    8b06:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    8b08:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    8b0a:	2c 93       	st	X, r18
	adiw XL,1
    8b0c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8b0e:	e6 0f       	add	r30, r22
	adc ZH,r23
    8b10:	f7 1f       	adc	r31, r23
	dec r20
    8b12:	4a 95       	dec	r20
	brne x_loop
    8b14:	c1 f7       	brne	.-16     	; 0x8b06 <x_loop>

	add ZL,YL		;src+=srcXdiff
    8b16:	ec 0f       	add	r30, r28
	adc ZH,YH
    8b18:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    8b1a:	a8 0f       	add	r26, r24
	adc XH,r1
    8b1c:	b1 1d       	adc	r27, r1
	dec r21
    8b1e:	5a 95       	dec	r21
	brne y_loop
    8b20:	81 f7       	brne	.-32     	; 0x8b02 <y_loop>


	pop YH
    8b22:	df 91       	pop	r29
	pop YL
    8b24:	cf 91       	pop	r28
	pop r17
    8b26:	1f 91       	pop	r17
	pop r16
    8b28:	0f 91       	pop	r16
	ret
    8b2a:	08 95       	ret

00008b2c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8b2c:	0f 92       	push	r0
	push r1
    8b2e:	1f 92       	push	r1
	push ZL;2
    8b30:	ef 93       	push	r30
	push ZH;2
    8b32:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8b34:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8b36:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8b38:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    8b3c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    8b3e:	f1 e0       	ldi	r31, 0x01	; 1

00008b40 <latency_loop>:
latency_loop:
	cp ZL,ZH
    8b40:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8b42:	00 f0       	brcs	.+0      	; 0x8b44 <latency_loop+0x4>
	inc ZH
    8b44:	f3 95       	inc	r31
	cpi ZH,10
    8b46:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    8b48:	d8 f3       	brcs	.-10     	; 0x8b40 <latency_loop>
	jmp .
    8b4a:	0c 94 a7 45 	jmp	0x8b4e	; 0x8b4e <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    8b4e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8b52:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8b54:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    8b58:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    8b5c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8b5e:	57 c0       	rjmp	.+174    	; 0x8c0e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8b60:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8b62:	98 f0       	brcs	.+38     	; 0x8b8a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8b64:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8b66:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8b6a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8b6c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8b70:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8b72:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8b74:	26 f4       	brtc	.+8      	; 0x8b7e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8b76:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8b78:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <update_sound>
	rjmp sync_end
    8b7c:	b6 c0       	rjmp	.+364    	; 0x8cea <sync_end>

00008b7e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8b7e:	e5 e1       	ldi	r30, 0x15	; 21
    8b80:	ea 95       	dec	r30
    8b82:	f1 f7       	brne	.-4      	; 0x8b80 <sync_pre_eq_no_sound_update+0x2>
    8b84:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8b86:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8b88:	b0 c0       	rjmp	.+352    	; 0x8cea <sync_end>

00008b8a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8b8a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8b8c:	38 f1       	brcs	.+78     	; 0x8bdc <sync_post_eq>

	rjmp .
    8b8e:	00 c0       	rjmp	.+0      	; 0x8b90 <sync_eq+0x6>
	rjmp .
    8b90:	00 c0       	rjmp	.+0      	; 0x8b92 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8b92:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8b94:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8b96:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8b98:	16 f4       	brtc	.+4      	; 0x8b9e <sync_eq_skip>
	
	call update_sound
    8b9a:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <update_sound>

00008b9e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8b9e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8ba0:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8ba4:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8ba6:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    8baa:	9f c0       	rjmp	.+318    	; 0x8cea <sync_end>

00008bac <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    8bac:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8bae:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8bb0:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8bb2:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    8bb6:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    8bb8:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    8bba:	00 f0       	brcs	.+0      	; 0x8bbc <__vector_14+0x10>

	cpi ZL,2
    8bbc:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    8bbe:	00 f0       	brcs	.+0      	; 0x8bc0 <__vector_14+0x14>

	cpi ZL,3
    8bc0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8bc2:	00 f0       	brcs	.+0      	; 0x8bc4 <__vector_14+0x18>

	cpi ZL,4
    8bc4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    8bc6:	00 f0       	brcs	.+0      	; 0x8bc8 <__vector_14+0x1c>

	cpi ZL,5
    8bc8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8bca:	00 f0       	brcs	.+0      	; 0x8bcc <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8bcc:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8bce:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8bd0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    8bd4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    8bd6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    8bd8:	ef 91       	pop	r30
	reti
    8bda:	18 95       	reti

00008bdc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8bdc:	00 c0       	rjmp	.+0      	; 0x8bde <sync_post_eq+0x2>

	bst ZL,0
    8bde:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8be0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8be2:	26 f4       	brtc	.+8      	; 0x8bec <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8be4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8be6:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <update_sound>
	rjmp sync_pre_eq_cont
    8bea:	05 c0       	rjmp	.+10     	; 0x8bf6 <sync_pre_eq_cont>

00008bec <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8bec:	e5 e1       	ldi	r30, 0x15	; 21
    8bee:	ea 95       	dec	r30
    8bf0:	f1 f7       	brne	.-4      	; 0x8bee <sync_post_eq_no_sound_update+0x2>
    8bf2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8bf4:	28 9a       	sbi	0x05, 0	; 5

00008bf6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8bf6:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8bfa:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8bfc:	09 f0       	breq	.+2      	; 0x8c00 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8bfe:	75 c0       	rjmp	.+234    	; 0x8cea <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8c00:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8c02:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    8c06:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8c08:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    8c0c:	6e c0       	rjmp	.+220    	; 0x8cea <sync_end>

00008c0e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8c0e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8c10:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8c14:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8c16:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8c1a:	00 c0       	rjmp	.+0      	; 0x8c1c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8c1c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8c1e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8c20:	00 c0       	rjmp	.+0      	; 0x8c22 <sync_hsync+0x14>
	call update_sound
    8c22:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8c26:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8c28:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8c2c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8c2e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    8c32:	ef 17       	cp	r30, r31
	brsh no_render
    8c34:	d0 f4       	brcc	.+52     	; 0x8c6a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8c36:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8c38:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8c3c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8c3e:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    8c42:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8c44:	ef 17       	cp	r30, r31
	brlo no_render
    8c46:	88 f0       	brcs	.+34     	; 0x8c6a <no_render>

	;push r1-r29
	ldi ZL,29
    8c48:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8c4a:	ff 27       	eor	r31, r31

00008c4c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8c4c:	00 80       	ld	r0, Z
	push r0
    8c4e:	0f 92       	push	r0
	dec ZL
    8c50:	ea 95       	dec	r30
	brne push_loop	
    8c52:	e1 f7       	brne	.-8      	; 0x8c4c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8c54:	06 e0       	ldi	r16, 0x06	; 6
    8c56:	0a 95       	dec	r16
    8c58:	f1 f7       	brne	.-4      	; 0x8c56 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8c5a:	0e 94 c2 43 	call	0x8784	; 0x8784 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8c5e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8c60:	ff 27       	eor	r31, r31

00008c62 <pop_loop>:
pop_loop:
	pop r0
    8c62:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8c64:	01 92       	st	Z+, r0
	cpi ZL,30
    8c66:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8c68:	e0 f3       	brcs	.-8      	; 0x8c62 <pop_loop>

00008c6a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8c6a:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8c6e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8c70:	09 f0       	breq	.+2      	; 0x8c74 <no_render+0xa>
	rjmp sync_end
    8c72:	3b c0       	rjmp	.+118    	; 0x8cea <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8c74:	2f 93       	push	r18
	push r19
    8c76:	3f 93       	push	r19
	push r20
    8c78:	4f 93       	push	r20
	push r21
    8c7a:	5f 93       	push	r21
	push r22
    8c7c:	6f 93       	push	r22
	push r23
    8c7e:	7f 93       	push	r23
	push r24
    8c80:	8f 93       	push	r24
	push r25
    8c82:	9f 93       	push	r25
	push r26
    8c84:	af 93       	push	r26
	push r27
    8c86:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8c88:	78 94       	sei
	clr r1
    8c8a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8c8c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8c8e:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8c92:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    8c94:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    8c98:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    8c9c:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    8ca0:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    8ca4:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8ca8:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    8cac:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    8cb0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8cb2:	f1 05       	cpc	r31, r1
	breq .+2 
    8cb4:	09 f0       	breq	.+2      	; 0x8cb8 <no_render+0x4e>
	icall
    8cb6:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8cb8:	0e 94 22 48 	call	0x9044	; 0x9044 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8cbc:	0e 94 20 56 	call	0xac40	; 0xac40 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    8cc0:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <process_music>
	clr r1
    8cc4:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8cc6:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    8cca:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    8cce:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8cd0:	f1 05       	cpc	r31, r1
	breq .+2 
    8cd2:	09 f0       	breq	.+2      	; 0x8cd6 <no_render+0x6c>
	icall
    8cd4:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8cd6:	bf 91       	pop	r27
	pop r26
    8cd8:	af 91       	pop	r26
	pop r25
    8cda:	9f 91       	pop	r25
	pop r24
    8cdc:	8f 91       	pop	r24
	pop r23
    8cde:	7f 91       	pop	r23
	pop r22
    8ce0:	6f 91       	pop	r22
	pop r21
    8ce2:	5f 91       	pop	r21
	pop r20
    8ce4:	4f 91       	pop	r20
	pop r19
    8ce6:	3f 91       	pop	r19
	pop r18
    8ce8:	2f 91       	pop	r18

00008cea <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8cea:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8cec:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8cee:	ff 91       	pop	r31
	pop ZL
    8cf0:	ef 91       	pop	r30
	pop r1
    8cf2:	1f 90       	pop	r1
	pop r0
    8cf4:	0f 90       	pop	r0
	reti
    8cf6:	18 95       	reti

00008cf8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8cf8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8cfa:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8cfc:	00 c0       	rjmp	.+0      	; 0x8cfe <hsync_pulse+0x6>
	call update_sound
    8cfe:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <update_sound>

	lds ZL,sync_pulse
    8d02:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8d06:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8d08:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    8d0c:	08 95       	ret

00008d0e <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8d0e:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8d12:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8d14:	0e 94 17 4b 	call	0x962e	; 0x962e <ProcessMusic>
#endif

	ret
    8d18:	08 95       	ret

00008d1a <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8d1a:	0f 93       	push	r16
	push r17
    8d1c:	1f 93       	push	r17
	push r18
    8d1e:	2f 93       	push	r18
	push r28
    8d20:	cf 93       	push	r28
	push r29
    8d22:	df 93       	push	r29

	mov r18,ZL
    8d24:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8d26:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8d2a:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8d2e:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8d30:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8d34:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8d38:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8d3c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8d3e:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8d40:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8d44:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8d48:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8d4c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8d4e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8d50:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8d52:	d0 2d       	mov	r29, r0
	nop
    8d54:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8d56:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8d5a:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8d5e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8d60:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8d64:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8d68:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8d6c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8d6e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8d70:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8d74:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8d78:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8d7c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8d7e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8d80:	20 ff       	sbrs	r18, 0
	rjmp .
    8d82:	00 c0       	rjmp	.+0      	; 0x8d84 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8d84:	01 03       	mulsu	r16, r17
	clr r0
    8d86:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8d88:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8d8a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8d8c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8d8e:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8d92:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8d96:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8d98:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8d9c:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8da0:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8da4:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8da6:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8da8:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    8dac:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    8db0:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    8db4:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8db6:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8db8:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8dba:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8dbc:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    8dc0:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    8dc4:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    8dc8:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8dca:	92 f4       	brpl	.+36     	; 0x8df0 <ch4_no_shift>

	lds ZH,tr4_params
    8dcc:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    8dd0:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8dd2:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8dd4:	00 2e       	mov	r0, r16
	lsr r0
    8dd6:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8dd8:	00 26       	eor	r0, r16
	bst r0,0
    8dda:	00 fa       	bst	r0, 0
	lsr r17
    8ddc:	16 95       	lsr	r17
	ror r16
    8dde:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8de0:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8de2:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8de4:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8de6:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8dea:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    8dee:	03 c0       	rjmp	.+6      	; 0x8df6 <ch4_end>

00008df0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8df0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8df2:	1a 95       	dec	r17
	brne .-4
    8df4:	f1 f7       	brne	.-4      	; 0x8df2 <ch4_no_shift+0x2>

00008df6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8df6:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8dfa:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8dfc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8dfe:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8e00:	21 ff       	sbrs	r18, 1
	rjmp .
    8e02:	00 c0       	rjmp	.+0      	; 0x8e04 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8e04:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8e06:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8e08:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    8e0c:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8e0e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8e10:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8e12:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8e14:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8e18:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    8e1c:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8e1e:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    8e22:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    8e26:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8e2a:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8e2c:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    8e30:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8e32:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8e34:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8e36:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8e3a:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    8e3e:	00 19       	sub	r16, r0
	sbc r17,r1
    8e40:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    8e42:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    8e46:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8e4a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8e4c:	f1 05       	cpc	r31, r1
	brlo .+2
    8e4e:	08 f0       	brcs	.+2      	; 0x8e52 <ch4_end+0x5c>
	movw ZL,r16
    8e50:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    8e52:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    8e56:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8e5a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8e5c:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    8e60:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    8e62:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8e64:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8e66:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8e68:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8e6a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8e6c:	d0 05       	cpc	r29, r0
	brlt .+2
    8e6e:	0c f0       	brlt	.+2      	; 0x8e72 <ch4_end+0x7c>
	ldi r28,127
    8e70:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8e72:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8e74:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8e76:	d0 05       	cpc	r29, r0
	brge .+2
    8e78:	0c f4       	brge	.+2      	; 0x8e7c <ch4_end+0x86>
	ldi r28,-128
    8e7a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8e7c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8e7e:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    8e82:	df 91       	pop	r29
	pop r28
    8e84:	cf 91       	pop	r28
	pop r18
    8e86:	2f 91       	pop	r18
	pop r17
    8e88:	1f 91       	pop	r17
	pop r16
    8e8a:	0f 91       	pop	r16
	
	ret
    8e8c:	08 95       	ret

00008e8e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8e8e:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    8e92:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    8e96:	08 95       	ret

00008e98 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8e98:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8e9a:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8e9c:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8e9e:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8ea0:	68 e1       	ldi	r22, 0x18	; 24

00008ea2 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8ea2:	6d 93       	st	X+, r22
	sbiw r30,1
    8ea4:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8ea6:	e9 f7       	brne	.-6      	; 0x8ea2 <fill_vram_loop>

	clr r1
    8ea8:	11 24       	eor	r1, r1

	ret
    8eaa:	08 95       	ret

00008eac <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8eac:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    8eb0:	45 0f       	add	r20, r21
	rjmp SetTile	
    8eb2:	00 c0       	rjmp	.+0      	; 0x8eb4 <SetTile>

00008eb4 <SetTile>:

	ret

#else

	clr r25
    8eb4:	99 27       	eor	r25, r25
	clr r23	
    8eb6:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8eb8:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8eba:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8ebc:	08 0e       	add	r0, r24
	adc r1,r25
    8ebe:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8ec0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8ec2:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8ec4:	a0 0d       	add	r26, r0
	adc XH,r1
    8ec6:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8ec8:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    8eca:	4c 93       	st	X, r20

	clr r1
    8ecc:	11 24       	eor	r1, r1

	ret
    8ece:	08 95       	ret

00008ed0 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    8ed0:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    8ed4:	08 95       	ret

00008ed6 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8ed6:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    8eda:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    8ede:	08 95       	ret

00008ee0 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8ee0:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    8ee4:	81 70       	andi	r24, 0x01	; 1
	ret
    8ee6:	08 95       	ret

00008ee8 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8ee8:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    8eec:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8eee:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    8ef2:	08 95       	ret

00008ef4 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8ef4:	88 23       	and	r24, r24
	brne rj_p2
    8ef6:	29 f4       	brne	.+10     	; 0x8f02 <rj_p2>
		
	lds r24,joypad1_status_lo
    8ef8:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    8efc:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    8f00:	08 95       	ret

00008f02 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8f02:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    8f06:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    8f0a:	08 95       	ret

00008f0c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8f0c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8f0e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8f10:	f1 f7       	brne	.-4      	; 0x8f0e <WaitUs+0x2>
	nop
    8f12:	00 00       	nop
	sbiw r24,1
    8f14:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8f16:	d1 f7       	brne	.-12     	; 0x8f0c <WaitUs>

	ret
    8f18:	08 95       	ret

00008f1a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8f1a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8f1c:	fe cf       	rjmp	.-4      	; 0x8f1a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8f1e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8f20:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8f22:	60 bd       	out	0x20, r22	; 32
   cli
    8f24:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8f26:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8f28:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8f2a:	78 94       	sei
   ret
    8f2c:	08 95       	ret

00008f2e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8f2e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8f30:	fe cf       	rjmp	.-4      	; 0x8f2e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8f32:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8f34:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8f36:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8f38:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8f3a:	80 b5       	in	r24, 0x20	; 32
   sei
    8f3c:	78 94       	sei
   ret
    8f3e:	08 95       	ret

00008f40 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8f40:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8f42:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8f46:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8f4a:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8f4c:	80 93 81 00 	sts	0x0081, r24

		cli
    8f50:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8f52:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8f54:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8f58:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8f5a:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8f5e:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8f60:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8f64:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8f68:	78 94       	sei

00008f6a <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8f6a:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    8f6e:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8f70:	e0 f3       	brcs	.-8      	; 0x8f6a <wait>

		ret
    8f72:	08 95       	ret

00008f74 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    8f74:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    8f78:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    8f7c:	08 95       	ret

00008f7e <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8f7e:	0f 93       	push	r16
		push r17
    8f80:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    8f82:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8f84:	0f 93       	push	r16

		lds r16,sync_pulse
    8f86:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    8f8a:	03 95       	inc	r16
		sts sync_pulse,r16
    8f8c:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8f90:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8f92:	08 c0       	rjmp	.+16     	; 0x8fa4 <__vector_8+0x26>
		lds r17,random_value
    8f94:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8f98:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8f9c:	10 27       	eor	r17, r16
		sts random_value,r17
    8f9e:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    8fa2:	07 c0       	rjmp	.+14     	; 0x8fb2 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8fa4:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8fa8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8fac:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8fae:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8fb2:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8fb4:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8fb8:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8fba:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8fbc:	1f 91       	pop	r17
		pop r16
    8fbe:	0f 91       	pop	r16
		reti
    8fc0:	18 95       	reti

00008fc2 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8fc2:	98 e0       	ldi	r25, 0x08	; 8
    8fc4:	88 e1       	ldi	r24, 0x18	; 24
    8fc6:	0f b6       	in	r0, 0x3f	; 63
    8fc8:	f8 94       	cli
    8fca:	a8 95       	wdr
    8fcc:	80 93 60 00 	sts	0x0060, r24
    8fd0:	0f be       	out	0x3f, r0	; 63
    8fd2:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8fd6:	ff cf       	rjmp	.-2      	; 0x8fd6 <SoftReset+0x14>

00008fd8 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8fd8:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8fda:	c8 95       	lpm
    8fdc:	c8 95       	lpm
		Wait200ns();
    8fde:	c8 95       	lpm
    8fe0:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8fe2:	12 98       	cbi	0x02, 2	; 2
    8fe4:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8fe6:	80 e0       	ldi	r24, 0x00	; 0
    8fe8:	90 e0       	ldi	r25, 0x00	; 0
    8fea:	20 e0       	ldi	r18, 0x00	; 0
    8fec:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8fee:	36 95       	lsr	r19
    8ff0:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8ff2:	96 95       	lsr	r25
    8ff4:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8ff6:	c8 95       	lpm
    8ff8:	c8 95       	lpm
			Wait200ns();
    8ffa:	c8 95       	lpm
    8ffc:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8ffe:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    9000:	00 9b       	sbis	0x00, 0	; 0
    9002:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    9004:	01 9b       	sbis	0x00, 1	; 0
    9006:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    9008:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    900a:	c8 95       	lpm
    900c:	c8 95       	lpm
			Wait200ns();
    900e:	c8 95       	lpm
    9010:	c8 95       	lpm
    9012:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    9014:	61 f7       	brne	.-40     	; 0x8fee <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    9016:	30 93 f2 0a 	sts	0x0AF2, r19
    901a:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    901e:	90 93 f6 0a 	sts	0x0AF6, r25
    9022:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    9026:	80 91 f1 0a 	lds	r24, 0x0AF1
    902a:	90 91 f2 0a 	lds	r25, 0x0AF2
    902e:	0f 97       	sbiw	r24, 0x0f	; 15
    9030:	31 f0       	breq	.+12     	; 0x903e <ReadButtons+0x66>
    9032:	80 91 f5 0a 	lds	r24, 0x0AF5
    9036:	90 91 f6 0a 	lds	r25, 0x0AF6
    903a:	0f 97       	sbiw	r24, 0x0f	; 15
    903c:	11 f4       	brne	.+4      	; 0x9042 <ReadButtons+0x6a>
		SoftReset();
    903e:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <SoftReset>
    9042:	08 95       	ret

00009044 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    9044:	10 92 40 0b 	sts	0x0B40, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    9048:	00 99       	sbic	0x00, 0	; 0
    904a:	03 c0       	rjmp	.+6      	; 0x9052 <ReadControllers+0xe>
    904c:	81 e0       	ldi	r24, 0x01	; 1
    904e:	80 93 40 0b 	sts	0x0B40, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    9052:	01 99       	sbic	0x00, 1	; 0
    9054:	05 c0       	rjmp	.+10     	; 0x9060 <ReadControllers+0x1c>
    9056:	80 91 40 0b 	lds	r24, 0x0B40
    905a:	82 60       	ori	r24, 0x02	; 2
    905c:	80 93 40 0b 	sts	0x0B40, r24
			
	//read the standard buttons
	ReadButtons();
    9060:	0c 94 ec 47 	jmp	0x8fd8	; 0x8fd8 <ReadButtons>

00009064 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    9064:	cf 93       	push	r28
    9066:	df 93       	push	r29
    9068:	c0 e0       	ldi	r28, 0x00	; 0
    906a:	d0 e0       	ldi	r29, 0x00	; 0
    906c:	fe 01       	movw	r30, r28
    906e:	e2 56       	subi	r30, 0x62	; 98
    9070:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    9072:	64 91       	lpm	r22, Z
    9074:	ce 01       	movw	r24, r28
    9076:	0e 94 8d 47 	call	0x8f1a	; 0x8f1a <WriteEeprom>
    907a:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    907c:	c0 32       	cpi	r28, 0x20	; 32
    907e:	d1 05       	cpc	r29, r1
    9080:	a9 f7       	brne	.-22     	; 0x906c <FormatEeprom+0x8>
    9082:	c0 e2       	ldi	r28, 0x20	; 32
    9084:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    9086:	6f ef       	ldi	r22, 0xFF	; 255
    9088:	ce 01       	movw	r24, r28
    908a:	0e 94 8d 47 	call	0x8f1a	; 0x8f1a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    908e:	6f ef       	ldi	r22, 0xFF	; 255
    9090:	ce 01       	movw	r24, r28
    9092:	01 96       	adiw	r24, 0x01	; 1
    9094:	0e 94 8d 47 	call	0x8f1a	; 0x8f1a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    9098:	a0 96       	adiw	r28, 0x20	; 32
    909a:	c1 15       	cp	r28, r1
    909c:	88 e0       	ldi	r24, 0x08	; 8
    909e:	d8 07       	cpc	r29, r24
    90a0:	91 f7       	brne	.-28     	; 0x9086 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    90a2:	df 91       	pop	r29
    90a4:	cf 91       	pop	r28
    90a6:	08 95       	ret

000090a8 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    90a8:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    90aa:	80 e0       	ldi	r24, 0x00	; 0
    90ac:	90 e0       	ldi	r25, 0x00	; 0
    90ae:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    90b2:	c8 2f       	mov	r28, r24
    90b4:	81 e0       	ldi	r24, 0x01	; 1
    90b6:	90 e0       	ldi	r25, 0x00	; 0
    90b8:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    90bc:	28 2f       	mov	r18, r24
    90be:	30 e0       	ldi	r19, 0x00	; 0
    90c0:	32 2f       	mov	r19, r18
    90c2:	22 27       	eor	r18, r18
    90c4:	2c 0f       	add	r18, r28
    90c6:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    90c8:	81 e0       	ldi	r24, 0x01	; 1
    90ca:	2a 35       	cpi	r18, 0x5A	; 90
    90cc:	35 45       	sbci	r19, 0x55	; 85
    90ce:	09 f0       	breq	.+2      	; 0x90d2 <isEepromFormatted+0x2a>
    90d0:	80 e0       	ldi	r24, 0x00	; 0
}
    90d2:	cf 91       	pop	r28
    90d4:	08 95       	ret

000090d6 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    90d6:	cf 92       	push	r12
    90d8:	df 92       	push	r13
    90da:	ef 92       	push	r14
    90dc:	ff 92       	push	r15
    90de:	0f 93       	push	r16
    90e0:	1f 93       	push	r17
    90e2:	cf 93       	push	r28
    90e4:	df 93       	push	r29
    90e6:	1f 92       	push	r1
    90e8:	cd b7       	in	r28, 0x3d	; 61
    90ea:	de b7       	in	r29, 0x3e	; 62
    90ec:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    90ee:	0e 94 54 48 	call	0x90a8	; 0x90a8 <isEepromFormatted>
    90f2:	88 23       	and	r24, r24
    90f4:	09 f4       	brne	.+2      	; 0x90f8 <EepromWriteBlock+0x22>
    90f6:	4d c0       	rjmp	.+154    	; 0x9192 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    90f8:	f6 01       	movw	r30, r12
    90fa:	80 81       	ld	r24, Z
    90fc:	91 81       	ldd	r25, Z+1	; 0x01
    90fe:	8f 3f       	cpi	r24, 0xFF	; 255
    9100:	ff ef       	ldi	r31, 0xFF	; 255
    9102:	9f 07       	cpc	r25, r31
    9104:	09 f4       	brne	.+2      	; 0x9108 <EepromWriteBlock+0x32>
    9106:	47 c0       	rjmp	.+142    	; 0x9196 <EepromWriteBlock+0xc0>
    9108:	8a 35       	cpi	r24, 0x5A	; 90
    910a:	95 45       	sbci	r25, 0x55	; 85
    910c:	09 f4       	brne	.+2      	; 0x9110 <EepromWriteBlock+0x3a>
    910e:	43 c0       	rjmp	.+134    	; 0x9196 <EepromWriteBlock+0xc0>
    9110:	00 e2       	ldi	r16, 0x20	; 32
    9112:	10 e0       	ldi	r17, 0x00	; 0
    9114:	f1 2c       	mov	r15, r1
    9116:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    9118:	c8 01       	movw	r24, r16
    911a:	49 83       	std	Y+1, r20	; 0x01
    911c:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    9120:	e8 2e       	mov	r14, r24
    9122:	c8 01       	movw	r24, r16
    9124:	01 96       	adiw	r24, 0x01	; 1
    9126:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    912a:	28 2f       	mov	r18, r24
    912c:	30 e0       	ldi	r19, 0x00	; 0
    912e:	32 2f       	mov	r19, r18
    9130:	22 27       	eor	r18, r18
    9132:	c9 01       	movw	r24, r18
    9134:	8e 0d       	add	r24, r14
    9136:	91 1d       	adc	r25, r1
		if(id==block->id){
    9138:	f6 01       	movw	r30, r12
    913a:	20 81       	ld	r18, Z
    913c:	31 81       	ldd	r19, Z+1	; 0x01
    913e:	49 81       	ldd	r20, Y+1	; 0x01
    9140:	82 17       	cp	r24, r18
    9142:	93 07       	cpc	r25, r19
    9144:	19 f4       	brne	.+6      	; 0x914c <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    9146:	ff 20       	and	r15, r15
    9148:	89 f0       	breq	.+34     	; 0x916c <EepromWriteBlock+0x96>
    914a:	0c c0       	rjmp	.+24     	; 0x9164 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    914c:	01 96       	adiw	r24, 0x01	; 1
    914e:	19 f4       	brne	.+6      	; 0x9156 <EepromWriteBlock+0x80>
    9150:	f1 10       	cpse	r15, r1
    9152:	01 c0       	rjmp	.+2      	; 0x9156 <EepromWriteBlock+0x80>
    9154:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    9156:	4f 5f       	subi	r20, 0xFF	; 255
    9158:	00 5e       	subi	r16, 0xE0	; 224
    915a:	1f 4f       	sbci	r17, 0xFF	; 255
    915c:	40 34       	cpi	r20, 0x40	; 64
    915e:	e1 f6       	brne	.-72     	; 0x9118 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    9160:	ff 20       	and	r15, r15
    9162:	d9 f0       	breq	.+54     	; 0x919a <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    9164:	20 e2       	ldi	r18, 0x20	; 32
    9166:	f2 9e       	mul	r15, r18
    9168:	80 01       	movw	r16, r0
    916a:	11 24       	eor	r1, r1
    916c:	76 01       	movw	r14, r12
    916e:	80 e2       	ldi	r24, 0x20	; 32
    9170:	e8 0e       	add	r14, r24
    9172:	f1 1c       	adc	r15, r1
    9174:	0c 19       	sub	r16, r12
    9176:	1d 09       	sbc	r17, r13
    9178:	c6 01       	movw	r24, r12
    917a:	80 0f       	add	r24, r16
    917c:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    917e:	f6 01       	movw	r30, r12
    9180:	61 91       	ld	r22, Z+
    9182:	6f 01       	movw	r12, r30
    9184:	0e 94 8d 47 	call	0x8f1a	; 0x8f1a <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    9188:	ce 14       	cp	r12, r14
    918a:	df 04       	cpc	r13, r15
    918c:	a9 f7       	brne	.-22     	; 0x9178 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    918e:	80 e0       	ldi	r24, 0x00	; 0
    9190:	05 c0       	rjmp	.+10     	; 0x919c <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    9192:	84 e0       	ldi	r24, 0x04	; 4
    9194:	03 c0       	rjmp	.+6      	; 0x919c <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    9196:	81 e0       	ldi	r24, 0x01	; 1
    9198:	01 c0       	rjmp	.+2      	; 0x919c <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    919a:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    919c:	0f 90       	pop	r0
    919e:	df 91       	pop	r29
    91a0:	cf 91       	pop	r28
    91a2:	1f 91       	pop	r17
    91a4:	0f 91       	pop	r16
    91a6:	ff 90       	pop	r15
    91a8:	ef 90       	pop	r14
    91aa:	df 90       	pop	r13
    91ac:	cf 90       	pop	r12
    91ae:	08 95       	ret

000091b0 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    91b0:	df 92       	push	r13
    91b2:	ef 92       	push	r14
    91b4:	ff 92       	push	r15
    91b6:	0f 93       	push	r16
    91b8:	1f 93       	push	r17
    91ba:	cf 93       	push	r28
    91bc:	df 93       	push	r29
    91be:	7c 01       	movw	r14, r24
    91c0:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    91c2:	0e 94 54 48 	call	0x90a8	; 0x90a8 <isEepromFormatted>
    91c6:	88 23       	and	r24, r24
    91c8:	89 f1       	breq	.+98     	; 0x922c <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    91ca:	8f ef       	ldi	r24, 0xFF	; 255
    91cc:	e8 16       	cp	r14, r24
    91ce:	f8 06       	cpc	r15, r24
    91d0:	79 f1       	breq	.+94     	; 0x9230 <EepromReadBlock+0x80>
    91d2:	00 e0       	ldi	r16, 0x00	; 0
    91d4:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    91d6:	c8 01       	movw	r24, r16
    91d8:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    91dc:	d8 2e       	mov	r13, r24
    91de:	c8 01       	movw	r24, r16
    91e0:	01 96       	adiw	r24, 0x01	; 1
    91e2:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    91e6:	28 2f       	mov	r18, r24
    91e8:	30 e0       	ldi	r19, 0x00	; 0
    91ea:	32 2f       	mov	r19, r18
    91ec:	22 27       	eor	r18, r18
    91ee:	2d 0d       	add	r18, r13
    91f0:	31 1d       	adc	r19, r1
		if(id==blockId){
    91f2:	2e 15       	cp	r18, r14
    91f4:	3f 05       	cpc	r19, r15
    91f6:	39 f4       	brne	.+14     	; 0x9206 <EepromReadBlock+0x56>
    91f8:	7e 01       	movw	r14, r28
    91fa:	80 e2       	ldi	r24, 0x20	; 32
    91fc:	e8 0e       	add	r14, r24
    91fe:	f1 1c       	adc	r15, r1
    9200:	0c 1b       	sub	r16, r28
    9202:	1d 0b       	sbc	r17, r29
    9204:	08 c0       	rjmp	.+16     	; 0x9216 <EepromReadBlock+0x66>
    9206:	00 5e       	subi	r16, 0xE0	; 224
    9208:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    920a:	01 15       	cp	r16, r1
    920c:	84 e0       	ldi	r24, 0x04	; 4
    920e:	18 07       	cpc	r17, r24
    9210:	11 f7       	brne	.-60     	; 0x91d6 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    9212:	83 e0       	ldi	r24, 0x03	; 3
    9214:	0e c0       	rjmp	.+28     	; 0x9232 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    9216:	ce 01       	movw	r24, r28
    9218:	80 0f       	add	r24, r16
    921a:	91 1f       	adc	r25, r17
    921c:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <ReadEeprom>
    9220:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    9222:	ce 15       	cp	r28, r14
    9224:	df 05       	cpc	r29, r15
    9226:	b9 f7       	brne	.-18     	; 0x9216 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    9228:	80 e0       	ldi	r24, 0x00	; 0
    922a:	03 c0       	rjmp	.+6      	; 0x9232 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    922c:	84 e0       	ldi	r24, 0x04	; 4
    922e:	01 c0       	rjmp	.+2      	; 0x9232 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    9230:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    9232:	df 91       	pop	r29
    9234:	cf 91       	pop	r28
    9236:	1f 91       	pop	r17
    9238:	0f 91       	pop	r16
    923a:	ff 90       	pop	r15
    923c:	ef 90       	pop	r14
    923e:	df 90       	pop	r13
    9240:	08 95       	ret

00009242 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    9242:	fc 01       	movw	r30, r24
    9244:	45 87       	std	Z+13, r20	; 0x0d
    9246:	08 95       	ret

00009248 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    9248:	e2 e0       	ldi	r30, 0x02	; 2
    924a:	fb e0       	ldi	r31, 0x0B	; 11
    924c:	81 e0       	ldi	r24, 0x01	; 1
    924e:	91 e0       	ldi	r25, 0x01	; 1
    9250:	95 8b       	std	Z+21, r25	; 0x15
    9252:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    9254:	43 8b       	std	Z+19, r20	; 0x13
    9256:	08 95       	ret

00009258 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    9258:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    925a:	90 81       	ld	r25, Z
    925c:	9f 75       	andi	r25, 0x5F	; 95
    925e:	90 83       	st	Z, r25
    9260:	08 95       	ret

00009262 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    9262:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    9264:	90 81       	ld	r25, Z
    9266:	90 64       	ori	r25, 0x40	; 64
    9268:	90 83       	st	Z, r25
    926a:	08 95       	ret

0000926c <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    926c:	fc 01       	movw	r30, r24
    926e:	44 87       	std	Z+12, r20	; 0x0c
    9270:	08 95       	ret

00009272 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    9272:	fc 01       	movw	r30, r24
    9274:	47 83       	std	Z+7, r20	; 0x07
    9276:	08 95       	ret

00009278 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    9278:	fc 01       	movw	r30, r24
    927a:	40 87       	std	Z+8, r20	; 0x08
    927c:	08 95       	ret

0000927e <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    927e:	1f 93       	push	r17
    9280:	cf 93       	push	r28
    9282:	df 93       	push	r29
    9284:	ec 01       	movw	r28, r24
    9286:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    9288:	29 81       	ldd	r18, Y+1	; 0x01
    928a:	30 e0       	ldi	r19, 0x00	; 0
    928c:	f9 01       	movw	r30, r18
    928e:	ee 0f       	add	r30, r30
    9290:	ff 1f       	adc	r31, r31
    9292:	e8 5f       	subi	r30, 0xF8	; 248
    9294:	f4 46       	sbci	r31, 0x64	; 100
    9296:	65 91       	lpm	r22, Z+
    9298:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    929a:	f9 01       	movw	r30, r18
    929c:	e4 0f       	add	r30, r20
    929e:	f1 1d       	adc	r31, r1
    92a0:	47 fd       	sbrc	r20, 7
    92a2:	fa 95       	dec	r31
    92a4:	ee 0f       	add	r30, r30
    92a6:	ff 1f       	adc	r31, r31
    92a8:	e8 5f       	subi	r30, 0xF8	; 248
    92aa:	f4 46       	sbci	r31, 0x64	; 100
    92ac:	85 91       	lpm	r24, Z+
    92ae:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    92b0:	86 1b       	sub	r24, r22
    92b2:	97 0b       	sbc	r25, r23
    92b4:	60 91 48 0b 	lds	r22, 0x0B48
    92b8:	70 e0       	ldi	r23, 0x00	; 0
    92ba:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
	if(delta==0)delta++;
    92be:	61 15       	cp	r22, r1
    92c0:	71 05       	cpc	r23, r1
    92c2:	11 f4       	brne	.+4      	; 0x92c8 <PatchCommand11+0x4a>
    92c4:	61 e0       	ldi	r22, 0x01	; 1
    92c6:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    92c8:	86 e0       	ldi	r24, 0x06	; 6
    92ca:	18 9f       	mul	r17, r24
    92cc:	f0 01       	movw	r30, r0
    92ce:	11 24       	eor	r1, r1
    92d0:	ee 5f       	subi	r30, 0xFE	; 254
    92d2:	f4 4f       	sbci	r31, 0xF4	; 244
    92d4:	81 81       	ldd	r24, Z+1	; 0x01
    92d6:	92 81       	ldd	r25, Z+2	; 0x02
    92d8:	86 0f       	add	r24, r22
    92da:	97 1f       	adc	r25, r23
    92dc:	92 83       	std	Z+2, r25	; 0x02
    92de:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    92e0:	7b 83       	std	Y+3, r23	; 0x03
    92e2:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    92e4:	88 81       	ld	r24, Y
    92e6:	88 60       	ori	r24, 0x08	; 8
    92e8:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    92ea:	89 81       	ldd	r24, Y+1	; 0x01
    92ec:	48 0f       	add	r20, r24
    92ee:	4c 83       	std	Y+4, r20	; 0x04
}
    92f0:	df 91       	pop	r29
    92f2:	cf 91       	pop	r28
    92f4:	1f 91       	pop	r17
    92f6:	08 95       	ret

000092f8 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    92f8:	40 93 48 0b 	sts	0x0B48, r20
    92fc:	08 95       	ret

000092fe <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    92fe:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    9300:	64 2f       	mov	r22, r20
    9302:	0c 94 58 4d 	jmp	0x9ab0	; 0x9ab0 <SetMixerWave>

00009306 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    9306:	fc 01       	movw	r30, r24
    9308:	86 2f       	mov	r24, r22
	track->note+=param;
    930a:	91 81       	ldd	r25, Z+1	; 0x01
    930c:	64 2f       	mov	r22, r20
    930e:	69 0f       	add	r22, r25
    9310:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9312:	0c 94 41 4d 	jmp	0x9a82	; 0x9a82 <SetMixerNote>

00009316 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    9316:	fc 01       	movw	r30, r24
    9318:	86 2f       	mov	r24, r22
	track->note-=param;
    931a:	91 81       	ldd	r25, Z+1	; 0x01
    931c:	69 2f       	mov	r22, r25
    931e:	64 1b       	sub	r22, r20
    9320:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9322:	0c 94 41 4d 	jmp	0x9a82	; 0x9a82 <SetMixerNote>

00009326 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    9326:	0f 93       	push	r16
    9328:	1f 93       	push	r17
    932a:	cf 93       	push	r28
    932c:	df 93       	push	r29
    932e:	1f 92       	push	r1
    9330:	cd b7       	in	r28, 0x3d	; 61
    9332:	de b7       	in	r29, 0x3e	; 62
    9334:	8c 01       	movw	r16, r24
    9336:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    9338:	64 2f       	mov	r22, r20
    933a:	49 83       	std	Y+1, r20	; 0x01
    933c:	0e 94 41 4d 	call	0x9a82	; 0x9a82 <SetMixerNote>
	track->note=param;
    9340:	49 81       	ldd	r20, Y+1	; 0x01
    9342:	f8 01       	movw	r30, r16
    9344:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9346:	80 81       	ld	r24, Z
    9348:	87 7f       	andi	r24, 0xF7	; 247
    934a:	80 83       	st	Z, r24
}
    934c:	0f 90       	pop	r0
    934e:	df 91       	pop	r29
    9350:	cf 91       	pop	r28
    9352:	1f 91       	pop	r17
    9354:	0f 91       	pop	r16
    9356:	08 95       	ret

00009358 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    9358:	90 93 b4 0b 	sts	0x0BB4, r25
    935c:	80 93 b3 0b 	sts	0x0BB3, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9360:	8f e6       	ldi	r24, 0x6F	; 111
    9362:	80 93 b6 0b 	sts	0x0BB6, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    9366:	10 92 00 0b 	sts	0x0B00, r1
    936a:	e1 e5       	ldi	r30, 0x51	; 81
    936c:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    936e:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9370:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    9372:	28 e1       	ldi	r18, 0x18	; 24
    9374:	df 01       	movw	r26, r30
    9376:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9378:	8c 93       	st	X, r24
    937a:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    937c:	1c 92       	st	X, r1
    937e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9380:	9c 93       	st	X, r25
    9382:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    9384:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    9386:	10 82       	st	Z, r1
    9388:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    938a:	2c 93       	st	X, r18
    938c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    938e:	8c 93       	st	X, r24
    9390:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9392:	3b e0       	ldi	r19, 0x0B	; 11
    9394:	ef 3b       	cpi	r30, 0xBF	; 191
    9396:	f3 07       	cpc	r31, r19
    9398:	69 f7       	brne	.-38     	; 0x9374 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    939a:	08 95       	ret

0000939c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    939c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    939e:	ed 91       	ld	r30, X+
    93a0:	fc 91       	ld	r31, X
    93a2:	11 97       	sbiw	r26, 0x01	; 1
    93a4:	9f 01       	movw	r18, r30
    93a6:	2f 5f       	subi	r18, 0xFF	; 255
    93a8:	3f 4f       	sbci	r19, 0xFF	; 255
    93aa:	11 96       	adiw	r26, 0x01	; 1
    93ac:	3c 93       	st	X, r19
    93ae:	2e 93       	st	-X, r18
    93b0:	e4 91       	lpm	r30, Z
    93b2:	e7 fd       	sbrc	r30, 7
    93b4:	03 c0       	rjmp	.+6      	; 0x93bc <ReadVarLen+0x20>
    93b6:	8e 2f       	mov	r24, r30
    93b8:	90 e0       	ldi	r25, 0x00	; 0
    93ba:	08 95       	ret
    {
       value &= 0x7F;
    93bc:	ef 77       	andi	r30, 0x7F	; 127
    93be:	8e 2f       	mov	r24, r30
    93c0:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    93c2:	96 95       	lsr	r25
    93c4:	98 2f       	mov	r25, r24
    93c6:	88 27       	eor	r24, r24
    93c8:	97 95       	ror	r25
    93ca:	87 95       	ror	r24
    93cc:	2f 5f       	subi	r18, 0xFF	; 255
    93ce:	3f 4f       	sbci	r19, 0xFF	; 255
    93d0:	f9 01       	movw	r30, r18
    93d2:	31 97       	sbiw	r30, 0x01	; 1
    93d4:	e4 91       	lpm	r30, Z
    93d6:	4e 2f       	mov	r20, r30
    93d8:	4f 77       	andi	r20, 0x7F	; 127
    93da:	84 0f       	add	r24, r20
    93dc:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    93de:	e7 fd       	sbrc	r30, 7
    93e0:	f0 cf       	rjmp	.-32     	; 0x93c2 <ReadVarLen+0x26>
    93e2:	2d 93       	st	X+, r18
    93e4:	3c 93       	st	X, r19
    }


    return value;
}
    93e6:	08 95       	ret

000093e8 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    93e8:	cf 92       	push	r12
    93ea:	df 92       	push	r13
    93ec:	ff 92       	push	r15
    93ee:	0f 93       	push	r16
    93f0:	1f 93       	push	r17
    93f2:	cf 93       	push	r28
    93f4:	df 93       	push	r29
    93f6:	1f 92       	push	r1
    93f8:	cd b7       	in	r28, 0x3d	; 61
    93fa:	de b7       	in	r29, 0x3e	; 62
    93fc:	18 2f       	mov	r17, r24
    93fe:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9400:	c8 2e       	mov	r12, r24
    9402:	d1 2c       	mov	r13, r1
    9404:	36 e1       	ldi	r19, 0x16	; 22
    9406:	83 9f       	mul	r24, r19
    9408:	f0 01       	movw	r30, r0
    940a:	11 24       	eor	r1, r1
    940c:	ed 5b       	subi	r30, 0xBD	; 189
    940e:	f4 4f       	sbci	r31, 0xF4	; 244
    9410:	80 81       	ld	r24, Z
    9412:	f8 2e       	mov	r15, r24
    9414:	ff 1c       	adc	r15, r15
    9416:	ff 24       	eor	r15, r15
    9418:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    941a:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    941c:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    941e:	9f ef       	ldi	r25, 0xFF	; 255
    9420:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    9422:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    9424:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9426:	87 7b       	andi	r24, 0xB7	; 183
    9428:	80 62       	ori	r24, 0x20	; 32
    942a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    942c:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    942e:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    9430:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    9432:	13 30       	cpi	r17, 0x03	; 3
    9434:	69 f4       	brne	.+26     	; 0x9450 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    9436:	f1 10       	cpse	r15, r1
    9438:	01 c0       	rjmp	.+2      	; 0x943c <TriggerCommon+0x54>
    943a:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    943c:	81 e0       	ldi	r24, 0x01	; 1
    943e:	91 e0       	ldi	r25, 0x01	; 1
    9440:	90 93 17 0b 	sts	0x0B17, r25
    9444:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    9448:	81 e0       	ldi	r24, 0x01	; 1
    944a:	80 93 15 0b 	sts	0x0B15, r24
    944e:	3c c0       	rjmp	.+120    	; 0x94c8 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    9450:	14 30       	cpi	r17, 0x04	; 4
    9452:	09 f0       	breq	.+2      	; 0x9456 <TriggerCommon+0x6e>
    9454:	2f c0       	rjmp	.+94     	; 0x94b4 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    9456:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    945a:	80 91 b3 0b 	lds	r24, 0x0BB3
    945e:	90 91 b4 0b 	lds	r25, 0x0BB4
    9462:	e9 e0       	ldi	r30, 0x09	; 9
    9464:	6e 9f       	mul	r22, r30
    9466:	80 0d       	add	r24, r0
    9468:	91 1d       	adc	r25, r1
    946a:	11 24       	eor	r1, r1
    946c:	fc 01       	movw	r30, r24
    946e:	31 96       	adiw	r30, 0x01	; 1
    9470:	65 91       	lpm	r22, Z+
    9472:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    9474:	70 93 1f 0b 	sts	0x0B1F, r23
    9478:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    947c:	ac 01       	movw	r20, r24
    947e:	49 5f       	subi	r20, 0xF9	; 249
    9480:	5f 4f       	sbci	r21, 0xFF	; 255
    9482:	fa 01       	movw	r30, r20
    9484:	a5 91       	lpm	r26, Z+
    9486:	b4 91       	lpm	r27, Z
    9488:	05 96       	adiw	r24, 0x05	; 5
    948a:	fc 01       	movw	r30, r24
    948c:	85 91       	lpm	r24, Z+
    948e:	94 91       	lpm	r25, Z
    9490:	a8 1b       	sub	r26, r24
    9492:	b9 0b       	sbc	r27, r25
    9494:	b0 93 21 0b 	sts	0x0B21, r27
    9498:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    949c:	fa 01       	movw	r30, r20
    949e:	85 91       	lpm	r24, Z+
    94a0:	94 91       	lpm	r25, Z
    94a2:	68 0f       	add	r22, r24
    94a4:	79 1f       	adc	r23, r25
    94a6:	70 93 23 0b 	sts	0x0B23, r23
    94aa:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    94ae:	62 2f       	mov	r22, r18
    94b0:	84 e0       	ldi	r24, 0x04	; 4
    94b2:	08 c0       	rjmp	.+16     	; 0x94c4 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    94b4:	60 e0       	ldi	r22, 0x00	; 0
    94b6:	81 2f       	mov	r24, r17
    94b8:	29 83       	std	Y+1, r18	; 0x01
    94ba:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <SetMixerWave>
			SetMixerNote(channel,note);
    94be:	29 81       	ldd	r18, Y+1	; 0x01
    94c0:	62 2f       	mov	r22, r18
    94c2:	81 2f       	mov	r24, r17
    94c4:	0e 94 41 4d 	call	0x9a82	; 0x9a82 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    94c8:	86 e1       	ldi	r24, 0x16	; 22
    94ca:	8c 9d       	mul	r24, r12
    94cc:	f0 01       	movw	r30, r0
    94ce:	8d 9d       	mul	r24, r13
    94d0:	f0 0d       	add	r31, r0
    94d2:	11 24       	eor	r1, r1
    94d4:	ed 5b       	subi	r30, 0xBD	; 189
    94d6:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    94d8:	ff 20       	and	r15, r15
    94da:	11 f0       	breq	.+4      	; 0x94e0 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    94dc:	07 87       	std	Z+15, r16	; 0x0f
    94de:	01 c0       	rjmp	.+2      	; 0x94e2 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    94e0:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    94e2:	e0 91 b3 0b 	lds	r30, 0x0BB3
    94e6:	f0 91 b4 0b 	lds	r31, 0x0BB4
    94ea:	39 e0       	ldi	r19, 0x09	; 9
    94ec:	03 9f       	mul	r16, r19
    94ee:	e0 0d       	add	r30, r0
    94f0:	f1 1d       	adc	r31, r1
    94f2:	11 24       	eor	r1, r1
    94f4:	33 96       	adiw	r30, 0x03	; 3
    94f6:	85 91       	lpm	r24, Z+
    94f8:	94 91       	lpm	r25, Z
	if(pos==NULL){
    94fa:	00 97       	sbiw	r24, 0x00	; 0
    94fc:	59 f4       	brne	.+22     	; 0x9514 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    94fe:	86 e1       	ldi	r24, 0x16	; 22
    9500:	8c 9d       	mul	r24, r12
    9502:	f0 01       	movw	r30, r0
    9504:	8d 9d       	mul	r24, r13
    9506:	f0 0d       	add	r31, r0
    9508:	11 24       	eor	r1, r1
    950a:	ed 5b       	subi	r30, 0xBD	; 189
    950c:	f4 4f       	sbci	r31, 0xF4	; 244
    950e:	15 8a       	std	Z+21, r1	; 0x15
    9510:	14 8a       	std	Z+20, r1	; 0x14
    9512:	0e c0       	rjmp	.+28     	; 0x9530 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    9514:	fc 01       	movw	r30, r24
    9516:	24 91       	lpm	r18, Z
    9518:	36 e1       	ldi	r19, 0x16	; 22
    951a:	3c 9d       	mul	r19, r12
    951c:	f0 01       	movw	r30, r0
    951e:	3d 9d       	mul	r19, r13
    9520:	f0 0d       	add	r31, r0
    9522:	11 24       	eor	r1, r1
    9524:	ed 5b       	subi	r30, 0xBD	; 189
    9526:	f4 4f       	sbci	r31, 0xF4	; 244
    9528:	21 8b       	std	Z+17, r18	; 0x11
    952a:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    952c:	95 8b       	std	Z+21, r25	; 0x15
    952e:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    9530:	0f 90       	pop	r0
    9532:	df 91       	pop	r29
    9534:	cf 91       	pop	r28
    9536:	1f 91       	pop	r17
    9538:	0f 91       	pop	r16
    953a:	ff 90       	pop	r15
    953c:	df 90       	pop	r13
    953e:	cf 90       	pop	r12
    9540:	08 95       	ret

00009542 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9542:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    9544:	e0 91 b3 0b 	lds	r30, 0x0BB3
    9548:	f0 91 b4 0b 	lds	r31, 0x0BB4
    954c:	29 e0       	ldi	r18, 0x09	; 9
    954e:	82 9f       	mul	r24, r18
    9550:	e0 0d       	add	r30, r0
    9552:	f1 1d       	adc	r31, r1
    9554:	11 24       	eor	r1, r1
    9556:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    9558:	e1 30       	cpi	r30, 0x01	; 1
    955a:	e9 f0       	breq	.+58     	; 0x9596 <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    955c:	e2 30       	cpi	r30, 0x02	; 2
    955e:	e9 f0       	breq	.+58     	; 0x959a <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9560:	20 91 59 0b 	lds	r18, 0x0B59
    9564:	27 ff       	sbrs	r18, 7
    9566:	1d c0       	rjmp	.+58     	; 0x95a2 <TriggerFx+0x60>
    9568:	20 91 68 0b 	lds	r18, 0x0B68
    956c:	28 13       	cpse	r18, r24
    956e:	02 c0       	rjmp	.+4      	; 0x9574 <TriggerFx+0x32>
    9570:	41 11       	cpse	r20, r1
    9572:	17 c0       	rjmp	.+46     	; 0x95a2 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    9574:	20 91 6f 0b 	lds	r18, 0x0B6F
    9578:	27 ff       	sbrs	r18, 7
    957a:	11 c0       	rjmp	.+34     	; 0x959e <TriggerFx+0x5c>
    957c:	20 91 7e 0b 	lds	r18, 0x0B7E
    9580:	29 13       	cpse	r18, r25
    9582:	02 c0       	rjmp	.+4      	; 0x9588 <TriggerFx+0x46>
    9584:	41 11       	cpse	r20, r1
    9586:	0b c0       	rjmp	.+22     	; 0x959e <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    9588:	20 91 6c 0b 	lds	r18, 0x0B6C
    958c:	80 91 82 0b 	lds	r24, 0x0B82
    9590:	82 17       	cp	r24, r18
    9592:	28 f4       	brcc	.+10     	; 0x959e <TriggerFx+0x5c>
    9594:	06 c0       	rjmp	.+12     	; 0x95a2 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    9596:	83 e0       	ldi	r24, 0x03	; 3
    9598:	05 c0       	rjmp	.+10     	; 0x95a4 <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    959a:	84 e0       	ldi	r24, 0x04	; 4
    959c:	03 c0       	rjmp	.+6      	; 0x95a4 <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    959e:	82 e0       	ldi	r24, 0x02	; 2
    95a0:	01 c0       	rjmp	.+2      	; 0x95a4 <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    95a2:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    95a4:	26 e1       	ldi	r18, 0x16	; 22
    95a6:	82 9f       	mul	r24, r18
    95a8:	f0 01       	movw	r30, r0
    95aa:	11 24       	eor	r1, r1
    95ac:	ed 5b       	subi	r30, 0xBD	; 189
    95ae:	f4 4f       	sbci	r31, 0xF4	; 244
    95b0:	20 81       	ld	r18, Z
    95b2:	20 68       	ori	r18, 0x80	; 128
    95b4:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    95b6:	20 e5       	ldi	r18, 0x50	; 80
    95b8:	46 2f       	mov	r20, r22
    95ba:	69 2f       	mov	r22, r25
    95bc:	0c 94 f4 49 	jmp	0x93e8	; 0x93e8 <TriggerCommon>

000095c0 <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    95c0:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    95c2:	a8 2f       	mov	r26, r24
    95c4:	b0 e0       	ldi	r27, 0x00	; 0
    95c6:	96 e1       	ldi	r25, 0x16	; 22
    95c8:	89 9f       	mul	r24, r25
    95ca:	f0 01       	movw	r30, r0
    95cc:	11 24       	eor	r1, r1
    95ce:	ed 5b       	subi	r30, 0xBD	; 189
    95d0:	f4 4f       	sbci	r31, 0xF4	; 244
    95d2:	90 81       	ld	r25, Z
    95d4:	95 ff       	sbrs	r25, 5
    95d6:	02 c0       	rjmp	.+4      	; 0x95dc <TriggerNote+0x1c>
    95d8:	97 fd       	sbrc	r25, 7
    95da:	28 c0       	rjmp	.+80     	; 0x962c <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    95dc:	31 11       	cpse	r19, r1
    95de:	18 c0       	rjmp	.+48     	; 0x9610 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    95e0:	86 e1       	ldi	r24, 0x16	; 22
    95e2:	8a 9f       	mul	r24, r26
    95e4:	f0 01       	movw	r30, r0
    95e6:	8b 9f       	mul	r24, r27
    95e8:	f0 0d       	add	r31, r0
    95ea:	11 24       	eor	r1, r1
    95ec:	ed 5b       	subi	r30, 0xBD	; 189
    95ee:	f4 4f       	sbci	r31, 0xF4	; 244
    95f0:	85 85       	ldd	r24, Z+13	; 0x0d
    95f2:	81 11       	cpse	r24, r1
    95f4:	02 c0       	rjmp	.+4      	; 0x95fa <TriggerNote+0x3a>
    95f6:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    95f8:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    95fa:	86 e1       	ldi	r24, 0x16	; 22
    95fc:	8a 9f       	mul	r24, r26
    95fe:	f0 01       	movw	r30, r0
    9600:	8b 9f       	mul	r24, r27
    9602:	f0 0d       	add	r31, r0
    9604:	11 24       	eor	r1, r1
    9606:	ed 5b       	subi	r30, 0xBD	; 189
    9608:	f4 4f       	sbci	r31, 0xF4	; 244
    960a:	9f 7b       	andi	r25, 0xBF	; 191
    960c:	90 83       	st	Z, r25
    960e:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9610:	26 e1       	ldi	r18, 0x16	; 22
    9612:	2a 9f       	mul	r18, r26
    9614:	f0 01       	movw	r30, r0
    9616:	2b 9f       	mul	r18, r27
    9618:	f0 0d       	add	r31, r0
    961a:	11 24       	eor	r1, r1
    961c:	ed 5b       	subi	r30, 0xBD	; 189
    961e:	f4 4f       	sbci	r31, 0xF4	; 244
    9620:	9f 77       	andi	r25, 0x7F	; 127
    9622:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    9624:	24 2f       	mov	r18, r20
    9626:	43 2f       	mov	r20, r19
    9628:	0c 94 f4 49 	jmp	0x93e8	; 0x93e8 <TriggerCommon>
    962c:	08 95       	ret

0000962e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    962e:	5f 92       	push	r5
    9630:	6f 92       	push	r6
    9632:	7f 92       	push	r7
    9634:	8f 92       	push	r8
    9636:	9f 92       	push	r9
    9638:	af 92       	push	r10
    963a:	bf 92       	push	r11
    963c:	cf 92       	push	r12
    963e:	df 92       	push	r13
    9640:	ef 92       	push	r14
    9642:	ff 92       	push	r15
    9644:	0f 93       	push	r16
    9646:	1f 93       	push	r17
    9648:	cf 93       	push	r28
    964a:	df 93       	push	r29
    964c:	c3 e4       	ldi	r28, 0x43	; 67
    964e:	db e0       	ldi	r29, 0x0B	; 11
    9650:	82 e0       	ldi	r24, 0x02	; 2
    9652:	e8 2e       	mov	r14, r24
    9654:	8b e0       	ldi	r24, 0x0B	; 11
    9656:	f8 2e       	mov	r15, r24
    9658:	d7 01       	movw	r26, r14
    965a:	9e 01       	movw	r18, r28
    965c:	40 e0       	ldi	r20, 0x00	; 0
    965e:	50 e0       	ldi	r21, 0x00	; 0
    9660:	ca 01       	movw	r24, r20
    9662:	8d 5b       	subi	r24, 0xBD	; 189
    9664:	94 4f       	sbci	r25, 0xF4	; 244
    9666:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9668:	fc 01       	movw	r30, r24
    966a:	85 85       	ldd	r24, Z+13	; 0x0d
    966c:	88 23       	and	r24, r24
    966e:	91 f0       	breq	.+36     	; 0x9694 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    9670:	64 85       	ldd	r22, Z+12	; 0x0c
    9672:	99 27       	eor	r25, r25
    9674:	87 fd       	sbrc	r24, 7
    9676:	90 95       	com	r25
    9678:	86 0f       	add	r24, r22
    967a:	91 1d       	adc	r25, r1
    967c:	8f 3f       	cpi	r24, 0xFF	; 255
    967e:	91 05       	cpc	r25, r1
    9680:	19 f0       	breq	.+6      	; 0x9688 <ProcessMusic+0x5a>
    9682:	14 f0       	brlt	.+4      	; 0x9688 <ProcessMusic+0x5a>
    9684:	8f ef       	ldi	r24, 0xFF	; 255
    9686:	90 e0       	ldi	r25, 0x00	; 0
    9688:	97 ff       	sbrs	r25, 7
    968a:	02 c0       	rjmp	.+4      	; 0x9690 <ProcessMusic+0x62>
    968c:	80 e0       	ldi	r24, 0x00	; 0
    968e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9690:	f6 01       	movw	r30, r12
    9692:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    9694:	f9 01       	movw	r30, r18
    9696:	10 81       	ld	r17, Z
    9698:	13 ff       	sbrs	r17, 3
    969a:	29 c0       	rjmp	.+82     	; 0x96ee <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    969c:	62 81       	ldd	r22, Z+2	; 0x02
    969e:	73 81       	ldd	r23, Z+3	; 0x03
    96a0:	11 96       	adiw	r26, 0x01	; 1
    96a2:	8d 91       	ld	r24, X+
    96a4:	9c 91       	ld	r25, X
    96a6:	12 97       	sbiw	r26, 0x02	; 2
    96a8:	86 0f       	add	r24, r22
    96aa:	97 1f       	adc	r25, r23
    96ac:	12 96       	adiw	r26, 0x02	; 2
    96ae:	9c 93       	st	X, r25
    96b0:	8e 93       	st	-X, r24
    96b2:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    96b4:	f6 01       	movw	r30, r12
    96b6:	04 81       	ldd	r16, Z+4	; 0x04
    96b8:	e0 2f       	mov	r30, r16
    96ba:	f0 e0       	ldi	r31, 0x00	; 0
    96bc:	ee 0f       	add	r30, r30
    96be:	ff 1f       	adc	r31, r31
    96c0:	e8 5f       	subi	r30, 0xF8	; 248
    96c2:	f4 46       	sbci	r31, 0x64	; 100
    96c4:	c5 90       	lpm	r12, Z+
    96c6:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    96c8:	16 16       	cp	r1, r22
    96ca:	17 06       	cpc	r1, r23
    96cc:	24 f4       	brge	.+8      	; 0x96d6 <ProcessMusic+0xa8>
    96ce:	8c 15       	cp	r24, r12
    96d0:	9d 05       	cpc	r25, r13
    96d2:	30 f4       	brcc	.+12     	; 0x96e0 <ProcessMusic+0xb2>
    96d4:	0c c0       	rjmp	.+24     	; 0x96ee <ProcessMusic+0xc0>
    96d6:	67 2b       	or	r22, r23
    96d8:	51 f0       	breq	.+20     	; 0x96ee <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    96da:	c8 16       	cp	r12, r24
    96dc:	d9 06       	cpc	r13, r25
    96de:	38 f0       	brcs	.+14     	; 0x96ee <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    96e0:	12 96       	adiw	r26, 0x02	; 2
    96e2:	dc 92       	st	X, r13
    96e4:	ce 92       	st	-X, r12
    96e6:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    96e8:	17 7f       	andi	r17, 0xF7	; 247
    96ea:	f9 01       	movw	r30, r18
    96ec:	10 83       	st	Z, r17
    96ee:	4a 5e       	subi	r20, 0xEA	; 234
    96f0:	5f 4f       	sbci	r21, 0xFF	; 255
    96f2:	2a 5e       	subi	r18, 0xEA	; 234
    96f4:	3f 4f       	sbci	r19, 0xFF	; 255
    96f6:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    96f8:	4e 36       	cpi	r20, 0x6E	; 110
    96fa:	51 05       	cpc	r21, r1
    96fc:	09 f0       	breq	.+2      	; 0x9700 <ProcessMusic+0xd2>
    96fe:	b0 cf       	rjmp	.-160    	; 0x9660 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    9700:	80 91 00 0b 	lds	r24, 0x0B00
    9704:	88 23       	and	r24, r24
    9706:	09 f4       	brne	.+2      	; 0x970a <ProcessMusic+0xdc>
    9708:	cb c0       	rjmp	.+406    	; 0x98a0 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    970a:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    970c:	80 91 b1 0b 	lds	r24, 0x0BB1
    9710:	90 91 b2 0b 	lds	r25, 0x0BB2
    9714:	20 91 b7 0b 	lds	r18, 0x0BB7
    9718:	30 91 b8 0b 	lds	r19, 0x0BB8
    971c:	82 17       	cp	r24, r18
    971e:	93 07       	cpc	r25, r19
    9720:	09 f0       	breq	.+2      	; 0x9724 <ProcessMusic+0xf6>
    9722:	b9 c0       	rjmp	.+370    	; 0x9896 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    9724:	20 91 ba 0b 	lds	r18, 0x0BBA
    9728:	30 91 bb 0b 	lds	r19, 0x0BBB
    972c:	b9 01       	movw	r22, r18
    972e:	6f 5f       	subi	r22, 0xFF	; 255
    9730:	7f 4f       	sbci	r23, 0xFF	; 255
    9732:	70 93 bb 0b 	sts	0x0BBB, r23
    9736:	60 93 ba 0b 	sts	0x0BBA, r22
    973a:	f9 01       	movw	r30, r18
    973c:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    973e:	4f 3f       	cpi	r20, 0xFF	; 255
    9740:	79 f5       	brne	.+94     	; 0x97a0 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    9742:	a9 01       	movw	r20, r18
    9744:	4e 5f       	subi	r20, 0xFE	; 254
    9746:	5f 4f       	sbci	r21, 0xFF	; 255
    9748:	50 93 bb 0b 	sts	0x0BBB, r21
    974c:	40 93 ba 0b 	sts	0x0BBA, r20
    9750:	fb 01       	movw	r30, r22
    9752:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    9754:	6f 32       	cpi	r22, 0x2F	; 47
    9756:	19 f4       	brne	.+6      	; 0x975e <ProcessMusic+0x130>
						playSong=false;
    9758:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    975c:	9c c0       	rjmp	.+312    	; 0x9896 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    975e:	66 30       	cpi	r22, 0x06	; 6
    9760:	09 f0       	breq	.+2      	; 0x9764 <ProcessMusic+0x136>
    9762:	8c c0       	rjmp	.+280    	; 0x987c <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    9764:	fa 01       	movw	r30, r20
    9766:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    9768:	c9 01       	movw	r24, r18
    976a:	04 96       	adiw	r24, 0x04	; 4
    976c:	90 93 bb 0b 	sts	0x0BBB, r25
    9770:	80 93 ba 0b 	sts	0x0BBA, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    9774:	f9 01       	movw	r30, r18
    9776:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9778:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    977a:	e3 35       	cpi	r30, 0x53	; 83
    977c:	29 f4       	brne	.+10     	; 0x9788 <ProcessMusic+0x15a>
							loopStart=songPos;
    977e:	90 93 bd 0b 	sts	0x0BBD, r25
    9782:	80 93 bc 0b 	sts	0x0BBC, r24
    9786:	7a c0       	rjmp	.+244    	; 0x987c <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    9788:	e5 34       	cpi	r30, 0x45	; 69
    978a:	09 f0       	breq	.+2      	; 0x978e <ProcessMusic+0x160>
    978c:	77 c0       	rjmp	.+238    	; 0x987c <ProcessMusic+0x24e>
							songPos=loopStart;
    978e:	80 91 bc 0b 	lds	r24, 0x0BBC
    9792:	90 91 bd 0b 	lds	r25, 0x0BBD
    9796:	90 93 bb 0b 	sts	0x0BBB, r25
    979a:	80 93 ba 0b 	sts	0x0BBA, r24
    979e:	6e c0       	rjmp	.+220    	; 0x987c <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    97a0:	47 fd       	sbrc	r20, 7
    97a2:	40 93 b5 0b 	sts	0x0BB5, r20
					channel=lastStatus&0x0f;
    97a6:	90 91 b5 0b 	lds	r25, 0x0BB5
    97aa:	89 2f       	mov	r24, r25
    97ac:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    97ae:	47 ff       	sbrs	r20, 7
    97b0:	08 c0       	rjmp	.+16     	; 0x97c2 <ProcessMusic+0x194>
    97b2:	2e 5f       	subi	r18, 0xFE	; 254
    97b4:	3f 4f       	sbci	r19, 0xFF	; 255
    97b6:	30 93 bb 0b 	sts	0x0BBB, r19
    97ba:	20 93 ba 0b 	sts	0x0BBA, r18
    97be:	fb 01       	movw	r30, r22
    97c0:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    97c2:	90 7f       	andi	r25, 0xF0	; 240
    97c4:	90 3b       	cpi	r25, 0xB0	; 176
    97c6:	e1 f0       	breq	.+56     	; 0x9800 <ProcessMusic+0x1d2>
    97c8:	90 3c       	cpi	r25, 0xC0	; 192
    97ca:	09 f4       	brne	.+2      	; 0x97ce <ProcessMusic+0x1a0>
    97cc:	51 c0       	rjmp	.+162    	; 0x9870 <ProcessMusic+0x242>
    97ce:	90 39       	cpi	r25, 0x90	; 144
    97d0:	09 f0       	breq	.+2      	; 0x97d4 <ProcessMusic+0x1a6>
    97d2:	54 c0       	rjmp	.+168    	; 0x987c <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    97d4:	e0 91 ba 0b 	lds	r30, 0x0BBA
    97d8:	f0 91 bb 0b 	lds	r31, 0x0BBB
    97dc:	9f 01       	movw	r18, r30
    97de:	2f 5f       	subi	r18, 0xFF	; 255
    97e0:	3f 4f       	sbci	r19, 0xFF	; 255
    97e2:	30 93 bb 0b 	sts	0x0BBB, r19
    97e6:	20 93 ba 0b 	sts	0x0BBA, r18
    97ea:	24 91       	lpm	r18, Z
    97ec:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    97ee:	18 9f       	mul	r17, r24
    97f0:	f0 01       	movw	r30, r0
    97f2:	11 24       	eor	r1, r1
    97f4:	ed 5b       	subi	r30, 0xBD	; 189
    97f6:	f4 4f       	sbci	r31, 0xF4	; 244
    97f8:	66 85       	ldd	r22, Z+14	; 0x0e
    97fa:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
    97fe:	3e c0       	rjmp	.+124    	; 0x987c <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    9800:	e0 91 ba 0b 	lds	r30, 0x0BBA
    9804:	f0 91 bb 0b 	lds	r31, 0x0BBB
    9808:	9f 01       	movw	r18, r30
    980a:	2f 5f       	subi	r18, 0xFF	; 255
    980c:	3f 4f       	sbci	r19, 0xFF	; 255
    980e:	30 93 bb 0b 	sts	0x0BBB, r19
    9812:	20 93 ba 0b 	sts	0x0BBA, r18
    9816:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    9818:	47 30       	cpi	r20, 0x07	; 7
    981a:	49 f4       	brne	.+18     	; 0x982e <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    981c:	18 9f       	mul	r17, r24
    981e:	d0 01       	movw	r26, r0
    9820:	11 24       	eor	r1, r1
    9822:	ad 5b       	subi	r26, 0xBD	; 189
    9824:	b4 4f       	sbci	r27, 0xF4	; 244
    9826:	ee 0f       	add	r30, r30
    9828:	1a 96       	adiw	r26, 0x0a	; 10
    982a:	ec 93       	st	X, r30
    982c:	27 c0       	rjmp	.+78     	; 0x987c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    982e:	4b 30       	cpi	r20, 0x0B	; 11
    9830:	49 f4       	brne	.+18     	; 0x9844 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    9832:	18 9f       	mul	r17, r24
    9834:	d0 01       	movw	r26, r0
    9836:	11 24       	eor	r1, r1
    9838:	ad 5b       	subi	r26, 0xBD	; 189
    983a:	b4 4f       	sbci	r27, 0xF4	; 244
    983c:	ee 0f       	add	r30, r30
    983e:	19 96       	adiw	r26, 0x09	; 9
    9840:	ec 93       	st	X, r30
    9842:	1c c0       	rjmp	.+56     	; 0x987c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    9844:	4c 35       	cpi	r20, 0x5C	; 92
    9846:	49 f4       	brne	.+18     	; 0x985a <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    9848:	18 9f       	mul	r17, r24
    984a:	d0 01       	movw	r26, r0
    984c:	11 24       	eor	r1, r1
    984e:	ad 5b       	subi	r26, 0xBD	; 189
    9850:	b4 4f       	sbci	r27, 0xF4	; 244
    9852:	ee 0f       	add	r30, r30
    9854:	17 96       	adiw	r26, 0x07	; 7
    9856:	ec 93       	st	X, r30
    9858:	11 c0       	rjmp	.+34     	; 0x987c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    985a:	44 36       	cpi	r20, 0x64	; 100
    985c:	79 f4       	brne	.+30     	; 0x987c <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    985e:	18 9f       	mul	r17, r24
    9860:	d0 01       	movw	r26, r0
    9862:	11 24       	eor	r1, r1
    9864:	ad 5b       	subi	r26, 0xBD	; 189
    9866:	b4 4f       	sbci	r27, 0xF4	; 244
    9868:	ee 0f       	add	r30, r30
    986a:	18 96       	adiw	r26, 0x08	; 8
    986c:	ec 93       	st	X, r30
    986e:	06 c0       	rjmp	.+12     	; 0x987c <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9870:	18 9f       	mul	r17, r24
    9872:	f0 01       	movw	r30, r0
    9874:	11 24       	eor	r1, r1
    9876:	ed 5b       	subi	r30, 0xBD	; 189
    9878:	f4 4f       	sbci	r31, 0xF4	; 244
    987a:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    987c:	8a eb       	ldi	r24, 0xBA	; 186
    987e:	9b e0       	ldi	r25, 0x0B	; 11
    9880:	0e 94 ce 49 	call	0x939c	; 0x939c <ReadVarLen>
    9884:	90 93 b8 0b 	sts	0x0BB8, r25
    9888:	80 93 b7 0b 	sts	0x0BB7, r24
				currDeltaTime=0;
    988c:	10 92 b2 0b 	sts	0x0BB2, r1
    9890:	10 92 b1 0b 	sts	0x0BB1, r1
    9894:	3b cf       	rjmp	.-394    	; 0x970c <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9896:	01 96       	adiw	r24, 0x01	; 1
    9898:	90 93 b2 0b 	sts	0x0BB2, r25
    989c:	80 93 b1 0b 	sts	0x0BB1, r24
    98a0:	99 e4       	ldi	r25, 0x49	; 73
    98a2:	a9 2e       	mov	r10, r25
    98a4:	9b e0       	ldi	r25, 0x0B	; 11
    98a6:	b9 2e       	mov	r11, r25
    98a8:	05 e5       	ldi	r16, 0x55	; 85
    98aa:	1b e0       	ldi	r17, 0x0B	; 11
    98ac:	24 e5       	ldi	r18, 0x54	; 84
    98ae:	c2 2e       	mov	r12, r18
    98b0:	2b e0       	ldi	r18, 0x0B	; 11
    98b2:	d2 2e       	mov	r13, r18
    98b4:	36 e5       	ldi	r19, 0x56	; 86
    98b6:	83 2e       	mov	r8, r19
    98b8:	3b e0       	ldi	r19, 0x0B	; 11
    98ba:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    98bc:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    98be:	66 24       	eor	r6, r6
    98c0:	6a 94       	dec	r6
    98c2:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    98c4:	88 81       	ld	r24, Y
    98c6:	86 fd       	sbrc	r24, 6
    98c8:	43 c0       	rjmp	.+134    	; 0x9950 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    98ca:	8c 89       	ldd	r24, Y+20	; 0x14
    98cc:	9d 89       	ldd	r25, Y+21	; 0x15
    98ce:	89 2b       	or	r24, r25
    98d0:	09 f4       	brne	.+2      	; 0x98d4 <ProcessMusic+0x2a6>
    98d2:	3a c0       	rjmp	.+116    	; 0x9948 <ProcessMusic+0x31a>
    98d4:	d8 01       	movw	r26, r16
    98d6:	9c 91       	ld	r25, X
    98d8:	f6 01       	movw	r30, r12
    98da:	80 81       	ld	r24, Z
    98dc:	98 17       	cp	r25, r24
    98de:	08 f4       	brcc	.+2      	; 0x98e2 <ProcessMusic+0x2b4>
    98e0:	33 c0       	rjmp	.+102    	; 0x9948 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    98e2:	d8 01       	movw	r26, r16
    98e4:	9c 91       	ld	r25, X
    98e6:	f6 01       	movw	r30, r12
    98e8:	80 81       	ld	r24, Z
    98ea:	98 13       	cpse	r25, r24
    98ec:	2d c0       	rjmp	.+90     	; 0x9948 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    98ee:	ec 89       	ldd	r30, Y+20	; 0x14
    98f0:	fd 89       	ldd	r31, Y+21	; 0x15
    98f2:	af 01       	movw	r20, r30
    98f4:	4f 5f       	subi	r20, 0xFF	; 255
    98f6:	5f 4f       	sbci	r21, 0xFF	; 255
    98f8:	5d 8b       	std	Y+21, r21	; 0x15
    98fa:	4c 8b       	std	Y+20, r20	; 0x14
    98fc:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    98fe:	8f 3f       	cpi	r24, 0xFF	; 255
    9900:	31 f4       	brne	.+12     	; 0x990e <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9902:	88 81       	ld	r24, Y
    9904:	8f 77       	andi	r24, 0x7F	; 127
    9906:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    9908:	1d 8a       	std	Y+21, r1	; 0x15
    990a:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    990c:	1d c0       	rjmp	.+58     	; 0x9948 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    990e:	32 96       	adiw	r30, 0x02	; 2
    9910:	fd 8b       	std	Y+21, r31	; 0x15
    9912:	ec 8b       	std	Y+20, r30	; 0x14
    9914:	fa 01       	movw	r30, r20
    9916:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    9918:	e8 2f       	mov	r30, r24
    991a:	f0 e0       	ldi	r31, 0x00	; 0
    991c:	ee 0f       	add	r30, r30
    991e:	ff 1f       	adc	r31, r31
    9920:	e2 54       	subi	r30, 0x42	; 66
    9922:	ff 4f       	sbci	r31, 0xFF	; 255
    9924:	25 91       	lpm	r18, Z+
    9926:	34 91       	lpm	r19, Z
    9928:	65 2d       	mov	r22, r5
    992a:	ce 01       	movw	r24, r28
    992c:	f9 01       	movw	r30, r18
    992e:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9930:	ec 89       	ldd	r30, Y+20	; 0x14
    9932:	fd 89       	ldd	r31, Y+21	; 0x15
    9934:	cf 01       	movw	r24, r30
    9936:	01 96       	adiw	r24, 0x01	; 1
    9938:	9d 8b       	std	Y+21, r25	; 0x15
    993a:	8c 8b       	std	Y+20, r24	; 0x14
    993c:	e4 91       	lpm	r30, Z
    993e:	d6 01       	movw	r26, r12
    9940:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    9942:	f8 01       	movw	r30, r16
    9944:	10 82       	st	Z, r1
    9946:	cd cf       	rjmp	.-102    	; 0x98e2 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    9948:	d8 01       	movw	r26, r16
    994a:	8c 91       	ld	r24, X
    994c:	8f 5f       	subi	r24, 0xFF	; 255
    994e:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9950:	98 81       	ld	r25, Y
    9952:	95 ff       	sbrs	r25, 5
    9954:	6c c0       	rjmp	.+216    	; 0x9a2e <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    9956:	f4 01       	movw	r30, r8
    9958:	80 81       	ld	r24, Z
    995a:	8f 3f       	cpi	r24, 0xFF	; 255
    995c:	11 f0       	breq	.+4      	; 0x9962 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    995e:	8f 5f       	subi	r24, 0xFF	; 255
    9960:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    9962:	97 fd       	sbrc	r25, 7
    9964:	04 c0       	rjmp	.+8      	; 0x996e <ProcessMusic+0x340>
    9966:	f8 01       	movw	r30, r16
    9968:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    996a:	90 81       	ld	r25, Z
    996c:	01 c0       	rjmp	.+2      	; 0x9970 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    996e:	9f ef       	ldi	r25, 0xFF	; 255
    9970:	f8 01       	movw	r30, r16
    9972:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    9974:	80 81       	ld	r24, Z
    9976:	88 23       	and	r24, r24
    9978:	09 f4       	brne	.+2      	; 0x997c <ProcessMusic+0x34e>
    997a:	4e c0       	rjmp	.+156    	; 0x9a18 <ProcessMusic+0x3ea>
    997c:	31 96       	adiw	r30, 0x01	; 1
    997e:	50 81       	ld	r21, Z
    9980:	55 23       	and	r21, r21
    9982:	09 f4       	brne	.+2      	; 0x9986 <ProcessMusic+0x358>
    9984:	49 c0       	rjmp	.+146    	; 0x9a18 <ProcessMusic+0x3ea>
    9986:	99 23       	and	r25, r25
    9988:	09 f4       	brne	.+2      	; 0x998c <ProcessMusic+0x35e>
    998a:	46 c0       	rjmp	.+140    	; 0x9a18 <ProcessMusic+0x3ea>
    998c:	40 91 b6 0b 	lds	r20, 0x0BB6
    9990:	44 23       	and	r20, r20
    9992:	09 f4       	brne	.+2      	; 0x9996 <ProcessMusic+0x368>
    9994:	41 c0       	rjmp	.+130    	; 0x9a18 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    9996:	89 9f       	mul	r24, r25
    9998:	c0 01       	movw	r24, r0
    999a:	11 24       	eor	r1, r1
    999c:	93 95       	inc	r25
				uVol>>=8;
    999e:	89 2f       	mov	r24, r25
    99a0:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    99a2:	58 9f       	mul	r21, r24
    99a4:	90 01       	movw	r18, r0
    99a6:	59 9f       	mul	r21, r25
    99a8:	30 0d       	add	r19, r0
    99aa:	11 24       	eor	r1, r1
    99ac:	c9 01       	movw	r24, r18
    99ae:	93 95       	inc	r25
				uVol>>=8;
    99b0:	89 2f       	mov	r24, r25
    99b2:	99 27       	eor	r25, r25
    99b4:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    99b6:	50 81       	ld	r21, Z
    99b8:	58 9f       	mul	r21, r24
    99ba:	90 01       	movw	r18, r0
    99bc:	59 9f       	mul	r21, r25
    99be:	30 0d       	add	r19, r0
    99c0:	11 24       	eor	r1, r1
    99c2:	33 95       	inc	r19
				uVol>>=8;
    99c4:	23 2f       	mov	r18, r19
    99c6:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    99c8:	42 9f       	mul	r20, r18
    99ca:	c0 01       	movw	r24, r0
    99cc:	43 9f       	mul	r20, r19
    99ce:	90 0d       	add	r25, r0
    99d0:	11 24       	eor	r1, r1
    99d2:	93 95       	inc	r25
				uVol>>=8;
    99d4:	89 2f       	mov	r24, r25
    99d6:	99 27       	eor	r25, r25
    99d8:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    99da:	20 81       	ld	r18, Z
    99dc:	22 23       	and	r18, r18
    99de:	f1 f0       	breq	.+60     	; 0x9a1c <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    99e0:	d5 01       	movw	r26, r10
    99e2:	ec 91       	ld	r30, X
    99e4:	f0 e0       	ldi	r31, 0x00	; 0
    99e6:	e0 50       	subi	r30, 0x00	; 0
    99e8:	f3 46       	sbci	r31, 0x63	; 99
    99ea:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    99ec:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    99ee:	2e 9f       	mul	r18, r30
    99f0:	f0 01       	movw	r30, r0
    99f2:	11 24       	eor	r1, r1
    99f4:	f3 95       	inc	r31
					tVol>>=8;
    99f6:	ef 2f       	mov	r30, r31
    99f8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    99fa:	a3 01       	movw	r20, r6
    99fc:	4e 1b       	sub	r20, r30
    99fe:	5f 0b       	sbc	r21, r31
    9a00:	48 9f       	mul	r20, r24
    9a02:	90 01       	movw	r18, r0
    9a04:	49 9f       	mul	r20, r25
    9a06:	30 0d       	add	r19, r0
    9a08:	58 9f       	mul	r21, r24
    9a0a:	30 0d       	add	r19, r0
    9a0c:	11 24       	eor	r1, r1
    9a0e:	c9 01       	movw	r24, r18
    9a10:	93 95       	inc	r25
					uVol>>=8;
    9a12:	89 2f       	mov	r24, r25
    9a14:	99 27       	eor	r25, r25
    9a16:	02 c0       	rjmp	.+4      	; 0x9a1c <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    9a18:	80 e0       	ldi	r24, 0x00	; 0
    9a1a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9a1c:	f5 01       	movw	r30, r10
    9a1e:	30 81       	ld	r19, Z
    9a20:	f8 01       	movw	r30, r16
    9a22:	3a 97       	sbiw	r30, 0x0a	; 10
    9a24:	20 81       	ld	r18, Z
    9a26:	23 0f       	add	r18, r19
    9a28:	d5 01       	movw	r26, r10
    9a2a:	2c 93       	st	X, r18
    9a2c:	02 c0       	rjmp	.+4      	; 0x9a32 <ProcessMusic+0x404>

		}else{
			uVol=0;
    9a2e:	80 e0       	ldi	r24, 0x00	; 0
    9a30:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9a32:	f7 01       	movw	r30, r14
    9a34:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9a36:	53 94       	inc	r5
    9a38:	66 96       	adiw	r28, 0x16	; 22
    9a3a:	f6 e0       	ldi	r31, 0x06	; 6
    9a3c:	ef 0e       	add	r14, r31
    9a3e:	f1 1c       	adc	r15, r1
    9a40:	86 e1       	ldi	r24, 0x16	; 22
    9a42:	a8 0e       	add	r10, r24
    9a44:	b1 1c       	adc	r11, r1
    9a46:	0a 5e       	subi	r16, 0xEA	; 234
    9a48:	1f 4f       	sbci	r17, 0xFF	; 255
    9a4a:	96 e1       	ldi	r25, 0x16	; 22
    9a4c:	c9 0e       	add	r12, r25
    9a4e:	d1 1c       	adc	r13, r1
    9a50:	a6 e1       	ldi	r26, 0x16	; 22
    9a52:	8a 0e       	add	r8, r26
    9a54:	91 1c       	adc	r9, r1
    9a56:	b5 e0       	ldi	r27, 0x05	; 5
    9a58:	5b 12       	cpse	r5, r27
    9a5a:	34 cf       	rjmp	.-408    	; 0x98c4 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9a5c:	df 91       	pop	r29
    9a5e:	cf 91       	pop	r28
    9a60:	1f 91       	pop	r17
    9a62:	0f 91       	pop	r16
    9a64:	ff 90       	pop	r15
    9a66:	ef 90       	pop	r14
    9a68:	df 90       	pop	r13
    9a6a:	cf 90       	pop	r12
    9a6c:	bf 90       	pop	r11
    9a6e:	af 90       	pop	r10
    9a70:	9f 90       	pop	r9
    9a72:	8f 90       	pop	r8
    9a74:	7f 90       	pop	r7
    9a76:	6f 90       	pop	r6
    9a78:	5f 90       	pop	r5
    9a7a:	08 95       	ret

00009a7c <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9a7c:	80 93 b6 0b 	sts	0x0BB6, r24
    9a80:	08 95       	ret

00009a82 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9a82:	99 27       	eor	r25, r25
	clr r23
    9a84:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9a86:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    9a88:	09 f4       	brne	.+2      	; 0x9a8c <set_note_waves>
		ret
    9a8a:	08 95       	ret

00009a8c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    9a8c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9a8e:	fb e9       	ldi	r31, 0x9B	; 155
	lsl r22
    9a90:	66 0f       	add	r22, r22
	rol r23
    9a92:	77 1f       	adc	r23, r23
	add ZL,r22
    9a94:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9a96:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    9a98:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    9a9a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    9a9c:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9a9e:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9aa0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9aa2:	28 9f       	mul	r18, r24
	add ZL,r0
    9aa4:	e0 0d       	add	r30, r0
	adc ZH,r1
    9aa6:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    9aa8:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    9aaa:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    9aac:	11 24       	eor	r1, r1
	

	ret
    9aae:	08 95       	ret

00009ab0 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9ab0:	99 27       	eor	r25, r25
	clr r23
    9ab2:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9ab4:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9ab6:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9ab8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    9aba:	28 9f       	mul	r18, r24
	add ZL,r0
    9abc:	e0 0d       	add	r30, r0
	adc ZH,r1
    9abe:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    9ac0:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9ac2:	31 f4       	brne	.+12     	; 0x9ad0 <smw1>
	lds r22,tr4_params
    9ac4:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    9ac8:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    9aca:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    9ace:	0b c0       	rjmp	.+22     	; 0x9ae6 <esmw>

00009ad0 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9ad0:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9ad2:	31 f4       	brne	.+12     	; 0x9ae0 <smw2>
	lds r22,tr4_params
    9ad4:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    9ad8:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9ada:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    9ade:	03 c0       	rjmp	.+6      	; 0x9ae6 <esmw>

00009ae0 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9ae0:	7d e9       	ldi	r23, 0x9D	; 157
	add r23,r22
    9ae2:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9ae4:	75 83       	std	Z+5, r23	; 0x05

00009ae6 <esmw>:

esmw:
	clr r1	
    9ae6:	11 24       	eor	r1, r1
	ret
    9ae8:	08 95       	ret
	...

00009b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9b02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9b06:	08 95       	ret

00009b08 <steptable>:
    9b08:	22 00       	.word	0x0022	; ????
    9b0a:	24 00       	.word	0x0024	; ????
    9b0c:	26 00       	.word	0x0026	; ????
    9b0e:	28 00       	.word	0x0028	; ????
    9b10:	2b 00       	.word	0x002b	; ????
    9b12:	2d 00       	.word	0x002d	; ????
    9b14:	30 00       	.word	0x0030	; ????
    9b16:	33 00       	.word	0x0033	; ????
    9b18:	36 00       	.word	0x0036	; ????
    9b1a:	39 00       	.word	0x0039	; ????
    9b1c:	3d 00       	.word	0x003d	; ????
    9b1e:	40 00       	.word	0x0040	; ????
    9b20:	44 00       	.word	0x0044	; ????
    9b22:	48 00       	.word	0x0048	; ????
    9b24:	4c 00       	.word	0x004c	; ????
    9b26:	51 00       	.word	0x0051	; ????
    9b28:	56 00       	.word	0x0056	; ????
    9b2a:	5b 00       	.word	0x005b	; ????
    9b2c:	60 00       	.word	0x0060	; ????
    9b2e:	66 00       	.word	0x0066	; ????
    9b30:	6c 00       	.word	0x006c	; ????
    9b32:	73 00       	.word	0x0073	; ????
    9b34:	79 00       	.word	0x0079	; ????
    9b36:	81 00       	.word	0x0081	; ????
    9b38:	88 00       	.word	0x0088	; ????
    9b3a:	90 00       	.word	0x0090	; ????
    9b3c:	99 00       	.word	0x0099	; ????
    9b3e:	a2 00       	.word	0x00a2	; ????
    9b40:	ac 00       	.word	0x00ac	; ????
    9b42:	b6 00       	.word	0x00b6	; ????
    9b44:	c1 00       	.word	0x00c1	; ????
    9b46:	cc 00       	.word	0x00cc	; ????
    9b48:	d8 00       	.word	0x00d8	; ????
    9b4a:	e5 00       	.word	0x00e5	; ????
    9b4c:	f3 00       	.word	0x00f3	; ????
    9b4e:	01 01       	movw	r0, r2
    9b50:	10 01       	movw	r2, r0
    9b52:	21 01       	movw	r4, r2
    9b54:	32 01       	movw	r6, r4
    9b56:	44 01       	movw	r8, r8
    9b58:	57 01       	movw	r10, r14
    9b5a:	6c 01       	movw	r12, r24
    9b5c:	81 01       	movw	r16, r2
    9b5e:	98 01       	movw	r18, r16
    9b60:	b0 01       	movw	r22, r0
    9b62:	ca 01       	movw	r24, r20
    9b64:	e5 01       	movw	r28, r10
    9b66:	02 02       	muls	r16, r18
    9b68:	21 02       	muls	r18, r17
    9b6a:	41 02       	muls	r20, r17
    9b6c:	64 02       	muls	r22, r20
    9b6e:	88 02       	muls	r24, r24
    9b70:	ae 02       	muls	r26, r30
    9b72:	d7 02       	muls	r29, r23
    9b74:	03 03       	mulsu	r16, r19
    9b76:	30 03       	mulsu	r19, r16
    9b78:	61 03       	mulsu	r22, r17
    9b7a:	94 03       	fmuls	r17, r20
    9b7c:	cb 03       	fmulsu	r20, r19
    9b7e:	05 04       	cpc	r0, r5
    9b80:	42 04       	cpc	r4, r2
    9b82:	83 04       	cpc	r8, r3
    9b84:	c7 04       	cpc	r12, r7
    9b86:	10 05       	cpc	r17, r0
    9b88:	5d 05       	cpc	r21, r13
    9b8a:	af 05       	cpc	r26, r15
    9b8c:	05 06       	cpc	r0, r21
    9b8e:	61 06       	cpc	r6, r17
    9b90:	c2 06       	cpc	r12, r18
    9b92:	29 07       	cpc	r18, r25
    9b94:	96 07       	cpc	r25, r22
    9b96:	09 08       	sbc	r0, r9
    9b98:	83 08       	sbc	r8, r3
    9b9a:	05 09       	sbc	r16, r5
    9b9c:	8e 09       	sbc	r24, r14
    9b9e:	20 0a       	sbc	r2, r16
    9ba0:	ba 0a       	sbc	r11, r26
    9ba2:	5d 0b       	sbc	r21, r29
    9ba4:	0a 0c       	add	r0, r10
    9ba6:	c1 0c       	add	r12, r1
    9ba8:	84 0d       	add	r24, r4
    9baa:	51 0e       	add	r5, r17
    9bac:	2b 0f       	add	r18, r27
    9bae:	12 10       	cpse	r1, r2
    9bb0:	07 11       	cpse	r16, r7
    9bb2:	0a 12       	cpse	r0, r26
    9bb4:	1d 13       	cpse	r17, r29
    9bb6:	40 14       	cp	r4, r0
    9bb8:	74 15       	cp	r23, r4
    9bba:	ba 16       	cp	r11, r26
    9bbc:	14 18       	sub	r1, r4
    9bbe:	83 19       	sub	r24, r3
    9bc0:	07 1b       	sub	r16, r23
    9bc2:	a3 1c       	adc	r10, r3
    9bc4:	57 1e       	adc	r5, r23
    9bc6:	24 20       	and	r2, r4
    9bc8:	0e 22       	and	r0, r30
    9bca:	14 24       	eor	r1, r4
    9bcc:	39 26       	eor	r3, r25
    9bce:	7f 28       	or	r7, r15
    9bd0:	e8 2a       	or	r14, r24
    9bd2:	75 2d       	mov	r23, r5
    9bd4:	29 30       	cpi	r18, 0x09	; 9
    9bd6:	06 33       	cpi	r16, 0x36	; 54
    9bd8:	0f 36       	cpi	r16, 0x6F	; 111
    9bda:	45 39       	cpi	r20, 0x95	; 149
    9bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    9bde:	49 40       	sbci	r20, 0x09	; 9
    9be0:	1b 44       	sbci	r17, 0x4B	; 75
    9be2:	28 48       	sbci	r18, 0x88	; 136
    9be4:	73 4c       	sbci	r23, 0xC3	; 195
    9be6:	fe 50       	subi	r31, 0x0E	; 14
    9be8:	cf 55       	subi	r28, 0x5F	; 95
    9bea:	ea 5a       	subi	r30, 0xAA	; 170
    9bec:	51 60       	ori	r21, 0x01	; 1
    9bee:	0c 66       	ori	r16, 0x6C	; 108
    9bf0:	1d 6c       	ori	r17, 0xCD	; 205
    9bf2:	8b 72       	andi	r24, 0x2B	; 43
    9bf4:	5a 79       	andi	r21, 0x9A	; 154
    9bf6:	92 80       	ldd	r9, Z+2	; 0x02
    9bf8:	37 88       	ldd	r3, Z+23	; 0x17
    9bfa:	50 90 e5 98 	lds	r5, 0x98E5
    9bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    9c00:	9f ab       	std	Y+55, r25	; 0x37
    9c02:	d3 b5       	in	r29, 0x23	; 35
    9c04:	a3 c0       	rjmp	.+326    	; 0x9d4c <waves+0x4c>
	...

00009d00 <waves>:
    9d00:	00 03       	mulsu	r16, r16
    9d02:	06 09       	sbc	r16, r6
    9d04:	0c 10       	cpse	r0, r12
    9d06:	13 16       	cp	r1, r19
    9d08:	19 1c       	adc	r1, r9
    9d0a:	1f 22       	and	r1, r31
    9d0c:	25 28       	or	r2, r5
    9d0e:	2b 2e       	mov	r2, r27
    9d10:	31 33       	cpi	r19, 0x31	; 49
    9d12:	36 39       	cpi	r19, 0x96	; 150
    9d14:	3c 3f       	cpi	r19, 0xFC	; 252
    9d16:	41 44       	sbci	r20, 0x41	; 65
    9d18:	47 49       	sbci	r20, 0x97	; 151
    9d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9d1c:	51 53       	subi	r21, 0x31	; 49
    9d1e:	55 58       	subi	r21, 0x85	; 133
    9d20:	5a 5c       	subi	r21, 0xCA	; 202
    9d22:	5e 60       	ori	r21, 0x0E	; 14
    9d24:	62 64       	ori	r22, 0x42	; 66
    9d26:	66 68       	ori	r22, 0x86	; 134
    9d28:	6a 6b       	ori	r22, 0xBA	; 186
    9d2a:	6d 6f       	ori	r22, 0xFD	; 253
    9d2c:	70 71       	andi	r23, 0x10	; 16
    9d2e:	73 74       	andi	r23, 0x43	; 67
    9d30:	75 76       	andi	r23, 0x65	; 101
    9d32:	78 79       	andi	r23, 0x98	; 152
    9d34:	7a 7a       	andi	r23, 0xAA	; 170
    9d36:	7b 7c       	andi	r23, 0xCB	; 203
    9d38:	7d 7d       	andi	r23, 0xDD	; 221
    9d3a:	7e 7e       	andi	r23, 0xEE	; 238
    9d3c:	7e 7f       	andi	r23, 0xFE	; 254
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7e 7e       	andi	r23, 0xEE	; 238
    9d46:	7e 7d       	andi	r23, 0xDE	; 222
    9d48:	7d 7c       	andi	r23, 0xCD	; 205
    9d4a:	7b 7a       	andi	r23, 0xAB	; 171
    9d4c:	7a 79       	andi	r23, 0x9A	; 154
    9d4e:	78 76       	andi	r23, 0x68	; 104
    9d50:	75 74       	andi	r23, 0x45	; 69
    9d52:	73 71       	andi	r23, 0x13	; 19
    9d54:	70 6f       	ori	r23, 0xF0	; 240
    9d56:	6d 6b       	ori	r22, 0xBD	; 189
    9d58:	6a 68       	ori	r22, 0x8A	; 138
    9d5a:	66 64       	ori	r22, 0x46	; 70
    9d5c:	62 60       	ori	r22, 0x02	; 2
    9d5e:	5e 5c       	subi	r21, 0xCE	; 206
    9d60:	5a 58       	subi	r21, 0x8A	; 138
    9d62:	55 53       	subi	r21, 0x35	; 53
    9d64:	51 4e       	sbci	r21, 0xE1	; 225
    9d66:	4c 49       	sbci	r20, 0x9C	; 156
    9d68:	47 44       	sbci	r20, 0x47	; 71
    9d6a:	41 3f       	cpi	r20, 0xF1	; 241
    9d6c:	3c 39       	cpi	r19, 0x9C	; 156
    9d6e:	36 33       	cpi	r19, 0x36	; 54
    9d70:	31 2e       	mov	r3, r17
    9d72:	2b 28       	or	r2, r11
    9d74:	25 22       	and	r2, r21
    9d76:	1f 1c       	adc	r1, r15
    9d78:	19 16       	cp	r1, r25
    9d7a:	13 10       	cpse	r1, r3
    9d7c:	0c 09       	sbc	r16, r12
    9d7e:	06 03       	mulsu	r16, r22
    9d80:	00 fd       	sbrc	r16, 0
    9d82:	fa f7       	brpl	.-2      	; 0x9d82 <waves+0x82>
    9d84:	f4 f0       	brlt	.+60     	; 0x9dc2 <waves+0xc2>
    9d86:	ed ea       	ldi	r30, 0xAD	; 173
    9d88:	e7 e4       	ldi	r30, 0x47	; 71
    9d8a:	e1 de       	rcall	.-574    	; 0x9b4e <steptable+0x46>
    9d8c:	db d8       	rcall	.-3658   	; 0x8f44 <wdt_randomize+0x4>
    9d8e:	d5 d2       	rcall	.+1450   	; 0xa33a <waves+0x63a>
    9d90:	cf cd       	rjmp	.-1122   	; 0x9930 <ProcessMusic+0x302>
    9d92:	ca c7       	rjmp	.+3988   	; 0xad28 <LBGetJoyPadState+0x3e>
    9d94:	c4 c1       	rjmp	.+904    	; 0xa11e <waves+0x41e>
    9d96:	bf bc       	out	0x2f, r11	; 47
    9d98:	b9 b7       	in	r27, 0x39	; 57
    9d9a:	b4 b2       	in	r11, 0x14	; 20
    9d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9da4:	9e 9c       	mul	r9, r14
    9da6:	9a 98       	cbi	0x13, 2	; 19
    9da8:	96 95       	lsr	r25
    9daa:	93 91       	.word	0x9193	; ????
    9dac:	90 8f       	std	Z+24, r25	; 0x18
    9dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9db0:	8b 8a       	std	Y+19, r8	; 0x13
    9db2:	88 87       	std	Y+8, r24	; 0x08
    9db4:	86 86       	std	Z+14, r8	; 0x0e
    9db6:	85 84       	ldd	r8, Z+13	; 0x0d
    9db8:	83 83       	std	Z+3, r24	; 0x03
    9dba:	82 82       	std	Z+2, r8	; 0x02
    9dbc:	82 81       	ldd	r24, Z+2	; 0x02
    9dbe:	81 81       	ldd	r24, Z+1	; 0x01
    9dc0:	81 81       	ldd	r24, Z+1	; 0x01
    9dc2:	81 81       	ldd	r24, Z+1	; 0x01
    9dc4:	82 82       	std	Z+2, r8	; 0x02
    9dc6:	82 83       	std	Z+2, r24	; 0x02
    9dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    9dca:	85 86       	std	Z+13, r8	; 0x0d
    9dcc:	86 87       	std	Z+14, r24	; 0x0e
    9dce:	88 8a       	std	Y+16, r8	; 0x10
    9dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9dd4:	90 91 93 95 	lds	r25, 0x9593
    9dd8:	96 98       	cbi	0x12, 6	; 18
    9dda:	9a 9c       	mul	r9, r10
    9ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    9dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9de4:	af b2       	in	r10, 0x1f	; 31
    9de6:	b4 b7       	in	r27, 0x34	; 52
    9de8:	b9 bc       	out	0x29, r11	; 41
    9dea:	bf c1       	rjmp	.+894    	; 0xa16a <waves+0x46a>
    9dec:	c4 c7       	rjmp	.+3976   	; 0xad76 <LBGetJoyPadState+0x8c>
    9dee:	ca cd       	rjmp	.-1132   	; 0x9984 <ProcessMusic+0x356>
    9df0:	cf d2       	rcall	.+1438   	; 0xa390 <waves+0x690>
    9df2:	d5 d8       	rcall	.-3670   	; 0x8f9e <__vector_8+0x20>
    9df4:	db de       	rcall	.-586    	; 0x9bac <steptable+0xa4>
    9df6:	e1 e4       	ldi	r30, 0x41	; 65
    9df8:	e7 ea       	ldi	r30, 0xA7	; 167
    9dfa:	ed f0       	brhs	.+58     	; 0x9e36 <waves+0x136>
    9dfc:	f4 f7       	brge	.-4      	; 0x9dfa <waves+0xfa>
    9dfe:	fa fd       	.word	0xfdfa	; ????
    9e00:	80 81       	ld	r24, Z
    9e02:	82 83       	std	Z+2, r24	; 0x02
    9e04:	84 85       	ldd	r24, Z+12	; 0x0c
    9e06:	86 87       	std	Z+14, r24	; 0x0e
    9e08:	88 89       	ldd	r24, Y+16	; 0x10
    9e0a:	8a 8b       	std	Y+18, r24	; 0x12
    9e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    9e10:	90 91 92 93 	lds	r25, 0x9392
    9e14:	94 95       	.word	0x9594	; ????
    9e16:	96 97       	sbiw	r26, 0x26	; 38
    9e18:	98 99       	sbic	0x13, 0	; 19
    9e1a:	9a 9b       	sbis	0x13, 2	; 19
    9e1c:	9c 9d       	mul	r25, r12
    9e1e:	9e 9f       	mul	r25, r30
    9e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    9e22:	a2 a3       	std	Z+34, r26	; 0x22
    9e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9e26:	a6 a7       	std	Z+46, r26	; 0x2e
    9e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    9e2a:	aa ab       	std	Y+50, r26	; 0x32
    9e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    9e2e:	ae af       	std	Y+62, r26	; 0x3e
    9e30:	b0 b1       	in	r27, 0x00	; 0
    9e32:	b2 b3       	in	r27, 0x12	; 18
    9e34:	b4 b5       	in	r27, 0x24	; 36
    9e36:	b6 b7       	in	r27, 0x36	; 54
    9e38:	b8 b9       	out	0x08, r27	; 8
    9e3a:	ba bb       	out	0x1a, r27	; 26
    9e3c:	bc bd       	out	0x2c, r27	; 44
    9e3e:	be bf       	out	0x3e, r27	; 62
    9e40:	c0 c1       	rjmp	.+896    	; 0xa1c2 <waves+0x4c2>
    9e42:	c2 c3       	rjmp	.+1924   	; 0xa5c8 <waves+0x8c8>
    9e44:	c4 c5       	rjmp	.+2952   	; 0xa9ce <InitializeVideoMode+0x10>
    9e46:	c6 c7       	rjmp	.+3980   	; 0xadd4 <LBPrintStr+0x3c>
    9e48:	c8 c9       	rjmp	.-3184   	; 0x91da <EepromReadBlock+0x2a>
    9e4a:	ca cb       	rjmp	.-2156   	; 0x95e0 <TriggerNote+0x20>
    9e4c:	cc cd       	rjmp	.-1128   	; 0x99e6 <ProcessMusic+0x3b8>
    9e4e:	ce cf       	rjmp	.-100    	; 0x9dec <waves+0xec>
    9e50:	d0 d1       	rcall	.+928    	; 0xa1f2 <waves+0x4f2>
    9e52:	d2 d3       	rcall	.+1956   	; 0xa5f8 <waves+0x8f8>
    9e54:	d4 d5       	rcall	.+2984   	; 0xa9fe <DrawMap2+0x2c>
    9e56:	d6 d7       	rcall	.+4012   	; 0xae04 <LBCollides+0xa>
    9e58:	d8 d9       	rcall	.-3152   	; 0x920a <EepromReadBlock+0x5a>
    9e5a:	da db       	rcall	.-2124   	; 0x9610 <TriggerNote+0x50>
    9e5c:	dc dd       	rcall	.-1096   	; 0x9a16 <ProcessMusic+0x3e8>
    9e5e:	de df       	rcall	.-68     	; 0x9e1c <waves+0x11c>
    9e60:	e0 e1       	ldi	r30, 0x10	; 16
    9e62:	e2 e3       	ldi	r30, 0x32	; 50
    9e64:	e4 e5       	ldi	r30, 0x54	; 84
    9e66:	e6 e7       	ldi	r30, 0x76	; 118
    9e68:	e8 e9       	ldi	r30, 0x98	; 152
    9e6a:	ea eb       	ldi	r30, 0xBA	; 186
    9e6c:	ec ed       	ldi	r30, 0xDC	; 220
    9e6e:	ee ef       	ldi	r30, 0xFE	; 254
    9e70:	f0 f1       	brcs	.+124    	; 0x9eee <waves+0x1ee>
    9e72:	f2 f3       	brmi	.-4      	; 0x9e70 <waves+0x170>
    9e74:	f4 f5       	brge	.+124    	; 0x9ef2 <waves+0x1f2>
    9e76:	f6 f7       	brtc	.-4      	; 0x9e74 <waves+0x174>
    9e78:	f8 f9       	.word	0xf9f8	; ????
    9e7a:	fa fb       	.word	0xfbfa	; ????
    9e7c:	fc fd       	.word	0xfdfc	; ????
    9e7e:	fe ff       	.word	0xfffe	; ????
    9e80:	00 01       	movw	r0, r0
    9e82:	02 03       	mulsu	r16, r18
    9e84:	04 05       	cpc	r16, r4
    9e86:	06 07       	cpc	r16, r22
    9e88:	08 09       	sbc	r16, r8
    9e8a:	0a 0b       	sbc	r16, r26
    9e8c:	0c 0d       	add	r16, r12
    9e8e:	0e 0f       	add	r16, r30
    9e90:	10 11       	cpse	r17, r0
    9e92:	12 13       	cpse	r17, r18
    9e94:	14 15       	cp	r17, r4
    9e96:	16 17       	cp	r17, r22
    9e98:	18 19       	sub	r17, r8
    9e9a:	1a 1b       	sub	r17, r26
    9e9c:	1c 1d       	adc	r17, r12
    9e9e:	1e 1f       	adc	r17, r30
    9ea0:	20 21       	and	r18, r0
    9ea2:	22 23       	and	r18, r18
    9ea4:	24 25       	eor	r18, r4
    9ea6:	26 27       	eor	r18, r22
    9ea8:	28 29       	or	r18, r8
    9eaa:	2a 2b       	or	r18, r26
    9eac:	2c 2d       	mov	r18, r12
    9eae:	2e 2f       	mov	r18, r30
    9eb0:	30 31       	cpi	r19, 0x10	; 16
    9eb2:	32 33       	cpi	r19, 0x32	; 50
    9eb4:	34 35       	cpi	r19, 0x54	; 84
    9eb6:	36 37       	cpi	r19, 0x76	; 118
    9eb8:	38 39       	cpi	r19, 0x98	; 152
    9eba:	3a 3b       	cpi	r19, 0xBA	; 186
    9ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    9ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    9ec0:	40 41       	sbci	r20, 0x10	; 16
    9ec2:	42 43       	sbci	r20, 0x32	; 50
    9ec4:	44 45       	sbci	r20, 0x54	; 84
    9ec6:	46 47       	sbci	r20, 0x76	; 118
    9ec8:	48 49       	sbci	r20, 0x98	; 152
    9eca:	4a 4b       	sbci	r20, 0xBA	; 186
    9ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    9ece:	4e 4f       	sbci	r20, 0xFE	; 254
    9ed0:	50 51       	subi	r21, 0x10	; 16
    9ed2:	52 53       	subi	r21, 0x32	; 50
    9ed4:	54 55       	subi	r21, 0x54	; 84
    9ed6:	56 57       	subi	r21, 0x76	; 118
    9ed8:	58 59       	subi	r21, 0x98	; 152
    9eda:	5a 5b       	subi	r21, 0xBA	; 186
    9edc:	5c 5d       	subi	r21, 0xDC	; 220
    9ede:	5e 5f       	subi	r21, 0xFE	; 254
    9ee0:	60 61       	ori	r22, 0x10	; 16
    9ee2:	62 63       	ori	r22, 0x32	; 50
    9ee4:	64 65       	ori	r22, 0x54	; 84
    9ee6:	66 67       	ori	r22, 0x76	; 118
    9ee8:	68 69       	ori	r22, 0x98	; 152
    9eea:	6a 6b       	ori	r22, 0xBA	; 186
    9eec:	6c 6d       	ori	r22, 0xDC	; 220
    9eee:	6e 6f       	ori	r22, 0xFE	; 254
    9ef0:	70 71       	andi	r23, 0x10	; 16
    9ef2:	72 73       	andi	r23, 0x32	; 50
    9ef4:	74 75       	andi	r23, 0x54	; 84
    9ef6:	76 77       	andi	r23, 0x76	; 118
    9ef8:	78 79       	andi	r23, 0x98	; 152
    9efa:	7a 7b       	andi	r23, 0xBA	; 186
    9efc:	7c 7d       	andi	r23, 0xDC	; 220
    9efe:	7e 7f       	andi	r23, 0xFE	; 254
    9f00:	00 02       	muls	r16, r16
    9f02:	04 06       	cpc	r0, r20
    9f04:	08 0a       	sbc	r0, r24
    9f06:	0c 0e       	add	r0, r28
    9f08:	10 12       	cpse	r1, r16
    9f0a:	14 16       	cp	r1, r20
    9f0c:	18 1a       	sub	r1, r24
    9f0e:	1c 1e       	adc	r1, r28
    9f10:	20 22       	and	r2, r16
    9f12:	24 26       	eor	r2, r20
    9f14:	28 2a       	or	r2, r24
    9f16:	2c 2e       	mov	r2, r28
    9f18:	30 32       	cpi	r19, 0x20	; 32
    9f1a:	34 36       	cpi	r19, 0x64	; 100
    9f1c:	38 3a       	cpi	r19, 0xA8	; 168
    9f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    9f20:	40 42       	sbci	r20, 0x20	; 32
    9f22:	44 46       	sbci	r20, 0x64	; 100
    9f24:	48 4a       	sbci	r20, 0xA8	; 168
    9f26:	4c 4e       	sbci	r20, 0xEC	; 236
    9f28:	50 52       	subi	r21, 0x20	; 32
    9f2a:	54 56       	subi	r21, 0x64	; 100
    9f2c:	58 5a       	subi	r21, 0xA8	; 168
    9f2e:	5c 5e       	subi	r21, 0xEC	; 236
    9f30:	60 62       	ori	r22, 0x20	; 32
    9f32:	64 66       	ori	r22, 0x64	; 100
    9f34:	68 6a       	ori	r22, 0xA8	; 168
    9f36:	6c 6e       	ori	r22, 0xEC	; 236
    9f38:	70 72       	andi	r23, 0x20	; 32
    9f3a:	74 76       	andi	r23, 0x64	; 100
    9f3c:	78 7a       	andi	r23, 0xA8	; 168
    9f3e:	7c 7e       	andi	r23, 0xEC	; 236
    9f40:	7f 7d       	andi	r23, 0xDF	; 223
    9f42:	7b 79       	andi	r23, 0x9B	; 155
    9f44:	77 75       	andi	r23, 0x57	; 87
    9f46:	73 71       	andi	r23, 0x13	; 19
    9f48:	6f 6d       	ori	r22, 0xDF	; 223
    9f4a:	6b 69       	ori	r22, 0x9B	; 155
    9f4c:	67 65       	ori	r22, 0x57	; 87
    9f4e:	63 61       	ori	r22, 0x13	; 19
    9f50:	5f 5d       	subi	r21, 0xDF	; 223
    9f52:	5b 59       	subi	r21, 0x9B	; 155
    9f54:	57 55       	subi	r21, 0x57	; 87
    9f56:	53 51       	subi	r21, 0x13	; 19
    9f58:	4f 4d       	sbci	r20, 0xDF	; 223
    9f5a:	4b 49       	sbci	r20, 0x9B	; 155
    9f5c:	47 45       	sbci	r20, 0x57	; 87
    9f5e:	43 41       	sbci	r20, 0x13	; 19
    9f60:	3f 3d       	cpi	r19, 0xDF	; 223
    9f62:	3b 39       	cpi	r19, 0x9B	; 155
    9f64:	37 35       	cpi	r19, 0x57	; 87
    9f66:	33 31       	cpi	r19, 0x13	; 19
    9f68:	2f 2d       	mov	r18, r15
    9f6a:	2b 29       	or	r18, r11
    9f6c:	27 25       	eor	r18, r7
    9f6e:	23 21       	and	r18, r3
    9f70:	1f 1d       	adc	r17, r15
    9f72:	1b 19       	sub	r17, r11
    9f74:	17 15       	cp	r17, r7
    9f76:	13 11       	cpse	r17, r3
    9f78:	0f 0d       	add	r16, r15
    9f7a:	0b 09       	sbc	r16, r11
    9f7c:	07 05       	cpc	r16, r7
    9f7e:	03 01       	movw	r0, r6
    9f80:	ff fd       	.word	0xfdff	; ????
    9f82:	fb f9       	.word	0xf9fb	; ????
    9f84:	f7 f5       	brid	.+124    	; 0xa002 <waves+0x302>
    9f86:	f3 f1       	brvs	.+124    	; 0xa004 <waves+0x304>
    9f88:	ef ed       	ldi	r30, 0xDF	; 223
    9f8a:	eb e9       	ldi	r30, 0x9B	; 155
    9f8c:	e7 e5       	ldi	r30, 0x57	; 87
    9f8e:	e3 e1       	ldi	r30, 0x13	; 19
    9f90:	df dd       	rcall	.-1090   	; 0x9b50 <steptable+0x48>
    9f92:	db d9       	rcall	.-3146   	; 0x934a <PatchCommand08+0x24>
    9f94:	d7 d5       	rcall	.+2990   	; 0xab44 <DisplayLogo+0x8>
    9f96:	d3 d1       	rcall	.+934    	; 0xa33e <waves+0x63e>
    9f98:	cf cd       	rjmp	.-1122   	; 0x9b38 <steptable+0x30>
    9f9a:	cb c9       	rjmp	.-3178   	; 0x9332 <PatchCommand08+0xc>
    9f9c:	c7 c5       	rjmp	.+2958   	; 0xab2c <WaitVsync+0x1e>
    9f9e:	c3 c1       	rjmp	.+902    	; 0xa326 <waves+0x626>
    9fa0:	bf bd       	out	0x2f, r27	; 47
    9fa2:	bb b9       	out	0x0b, r27	; 11
    9fa4:	b7 b5       	in	r27, 0x27	; 39
    9fa6:	b3 b1       	in	r27, 0x03	; 3
    9fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    9faa:	ab a9       	ldd	r26, Y+51	; 0x33
    9fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    9fb0:	9f 9d       	mul	r25, r15
    9fb2:	9b 99       	sbic	0x13, 3	; 19
    9fb4:	97 95       	ror	r25
    9fb6:	93 91       	.word	0x9193	; ????
    9fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9fba:	8b 89       	ldd	r24, Y+19	; 0x13
    9fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    9fbe:	83 81       	ldd	r24, Z+3	; 0x03
    9fc0:	80 82       	st	Z, r8
    9fc2:	84 86       	std	Z+12, r8	; 0x0c
    9fc4:	88 8a       	std	Y+16, r8	; 0x10
    9fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    9fc8:	90 92 94 96 	sts	0x9694, r9
    9fcc:	98 9a       	sbi	0x13, 0	; 19
    9fce:	9c 9e       	mul	r9, r28
    9fd0:	a0 a2       	std	Z+32, r10	; 0x20
    9fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    9fd4:	a8 aa       	std	Y+48, r10	; 0x30
    9fd6:	ac ae       	std	Y+60, r10	; 0x3c
    9fd8:	b0 b2       	in	r11, 0x10	; 16
    9fda:	b4 b6       	in	r11, 0x34	; 52
    9fdc:	b8 ba       	out	0x18, r11	; 24
    9fde:	bc be       	out	0x3c, r11	; 60
    9fe0:	c0 c2       	rjmp	.+1408   	; 0xa562 <waves+0x862>
    9fe2:	c4 c6       	rjmp	.+3464   	; 0xad6c <LBGetJoyPadState+0x82>
    9fe4:	c8 ca       	rjmp	.-2672   	; 0x9576 <TriggerFx+0x34>
    9fe6:	cc ce       	rjmp	.-616    	; 0x9d80 <waves+0x80>
    9fe8:	d0 d2       	rcall	.+1440   	; 0xa58a <waves+0x88a>
    9fea:	d4 d6       	rcall	.+3496   	; 0xad94 <LBCopyChars+0x14>
    9fec:	d8 da       	rcall	.-2640   	; 0x959e <TriggerFx+0x5c>
    9fee:	dc de       	rcall	.-584    	; 0x9da8 <waves+0xa8>
    9ff0:	e0 e2       	ldi	r30, 0x20	; 32
    9ff2:	e4 e6       	ldi	r30, 0x64	; 100
    9ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    9ff6:	ec ee       	ldi	r30, 0xEC	; 236
    9ff8:	f0 f2       	brcs	.-68     	; 0x9fb6 <waves+0x2b6>
    9ffa:	f4 f6       	brge	.-68     	; 0x9fb8 <waves+0x2b8>
    9ffc:	f8 fa       	.word	0xfaf8	; ????
    9ffe:	fc fe       	.word	0xfefc	; ????
    a000:	7f 7f       	andi	r23, 0xFF	; 255
    a002:	7f 7f       	andi	r23, 0xFF	; 255
    a004:	7f 7f       	andi	r23, 0xFF	; 255
    a006:	7f 7f       	andi	r23, 0xFF	; 255
    a008:	7f 7f       	andi	r23, 0xFF	; 255
    a00a:	7f 7f       	andi	r23, 0xFF	; 255
    a00c:	7f 7f       	andi	r23, 0xFF	; 255
    a00e:	7f 7f       	andi	r23, 0xFF	; 255
    a010:	7f 7f       	andi	r23, 0xFF	; 255
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	80 80       	ld	r8, Z
    a042:	80 80       	ld	r8, Z
    a044:	80 80       	ld	r8, Z
    a046:	80 80       	ld	r8, Z
    a048:	80 80       	ld	r8, Z
    a04a:	80 80       	ld	r8, Z
    a04c:	80 80       	ld	r8, Z
    a04e:	80 80       	ld	r8, Z
    a050:	80 80       	ld	r8, Z
    a052:	80 80       	ld	r8, Z
    a054:	80 80       	ld	r8, Z
    a056:	80 80       	ld	r8, Z
    a058:	80 80       	ld	r8, Z
    a05a:	80 80       	ld	r8, Z
    a05c:	80 80       	ld	r8, Z
    a05e:	80 80       	ld	r8, Z
    a060:	80 80       	ld	r8, Z
    a062:	80 80       	ld	r8, Z
    a064:	80 80       	ld	r8, Z
    a066:	80 80       	ld	r8, Z
    a068:	80 80       	ld	r8, Z
    a06a:	80 80       	ld	r8, Z
    a06c:	80 80       	ld	r8, Z
    a06e:	80 80       	ld	r8, Z
    a070:	80 80       	ld	r8, Z
    a072:	80 80       	ld	r8, Z
    a074:	80 80       	ld	r8, Z
    a076:	80 80       	ld	r8, Z
    a078:	80 80       	ld	r8, Z
    a07a:	80 80       	ld	r8, Z
    a07c:	80 80       	ld	r8, Z
    a07e:	80 80       	ld	r8, Z
    a080:	80 80       	ld	r8, Z
    a082:	80 80       	ld	r8, Z
    a084:	80 80       	ld	r8, Z
    a086:	80 80       	ld	r8, Z
    a088:	80 80       	ld	r8, Z
    a08a:	80 80       	ld	r8, Z
    a08c:	80 80       	ld	r8, Z
    a08e:	80 80       	ld	r8, Z
    a090:	80 80       	ld	r8, Z
    a092:	80 80       	ld	r8, Z
    a094:	80 80       	ld	r8, Z
    a096:	80 80       	ld	r8, Z
    a098:	80 80       	ld	r8, Z
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 80       	ld	r8, Z
    a0f6:	80 80       	ld	r8, Z
    a0f8:	80 80       	ld	r8, Z
    a0fa:	80 80       	ld	r8, Z
    a0fc:	80 80       	ld	r8, Z
    a0fe:	80 80       	ld	r8, Z
    a100:	7f 7f       	andi	r23, 0xFF	; 255
    a102:	7f 7f       	andi	r23, 0xFF	; 255
    a104:	7f 7f       	andi	r23, 0xFF	; 255
    a106:	7f 7f       	andi	r23, 0xFF	; 255
    a108:	7f 7f       	andi	r23, 0xFF	; 255
    a10a:	7f 7f       	andi	r23, 0xFF	; 255
    a10c:	7f 7f       	andi	r23, 0xFF	; 255
    a10e:	7f 7f       	andi	r23, 0xFF	; 255
    a110:	7f 7f       	andi	r23, 0xFF	; 255
    a112:	7f 7f       	andi	r23, 0xFF	; 255
    a114:	7f 7f       	andi	r23, 0xFF	; 255
    a116:	7f 7f       	andi	r23, 0xFF	; 255
    a118:	7f 7f       	andi	r23, 0xFF	; 255
    a11a:	7f 7f       	andi	r23, 0xFF	; 255
    a11c:	7f 7f       	andi	r23, 0xFF	; 255
    a11e:	7f 7f       	andi	r23, 0xFF	; 255
    a120:	7f 7f       	andi	r23, 0xFF	; 255
    a122:	7f 7f       	andi	r23, 0xFF	; 255
    a124:	7f 7f       	andi	r23, 0xFF	; 255
    a126:	7f 7f       	andi	r23, 0xFF	; 255
    a128:	7f 7f       	andi	r23, 0xFF	; 255
    a12a:	7f 7f       	andi	r23, 0xFF	; 255
    a12c:	7f 7f       	andi	r23, 0xFF	; 255
    a12e:	7f 7f       	andi	r23, 0xFF	; 255
    a130:	7f 7f       	andi	r23, 0xFF	; 255
    a132:	7f 7f       	andi	r23, 0xFF	; 255
    a134:	7f 7f       	andi	r23, 0xFF	; 255
    a136:	7f 7f       	andi	r23, 0xFF	; 255
    a138:	7f 7f       	andi	r23, 0xFF	; 255
    a13a:	7f 7f       	andi	r23, 0xFF	; 255
    a13c:	7f 7f       	andi	r23, 0xFF	; 255
    a13e:	7f 7f       	andi	r23, 0xFF	; 255
    a140:	7f 7f       	andi	r23, 0xFF	; 255
    a142:	7f 7f       	andi	r23, 0xFF	; 255
    a144:	7f 7f       	andi	r23, 0xFF	; 255
    a146:	7f 7f       	andi	r23, 0xFF	; 255
    a148:	7f 7f       	andi	r23, 0xFF	; 255
    a14a:	7f 7f       	andi	r23, 0xFF	; 255
    a14c:	7f 7f       	andi	r23, 0xFF	; 255
    a14e:	7f 7f       	andi	r23, 0xFF	; 255
    a150:	7f 7f       	andi	r23, 0xFF	; 255
    a152:	7f 7f       	andi	r23, 0xFF	; 255
    a154:	7f 7f       	andi	r23, 0xFF	; 255
    a156:	7f 7f       	andi	r23, 0xFF	; 255
    a158:	7f 7f       	andi	r23, 0xFF	; 255
    a15a:	7f 7f       	andi	r23, 0xFF	; 255
    a15c:	7f 7f       	andi	r23, 0xFF	; 255
    a15e:	7f 7f       	andi	r23, 0xFF	; 255
    a160:	7f 7f       	andi	r23, 0xFF	; 255
    a162:	7f 7f       	andi	r23, 0xFF	; 255
    a164:	7f 7f       	andi	r23, 0xFF	; 255
    a166:	7f 7f       	andi	r23, 0xFF	; 255
    a168:	7f 7f       	andi	r23, 0xFF	; 255
    a16a:	7f 7f       	andi	r23, 0xFF	; 255
    a16c:	7f 7f       	andi	r23, 0xFF	; 255
    a16e:	7f 7f       	andi	r23, 0xFF	; 255
    a170:	7f 7f       	andi	r23, 0xFF	; 255
    a172:	7f 7f       	andi	r23, 0xFF	; 255
    a174:	7f 7f       	andi	r23, 0xFF	; 255
    a176:	7f 7f       	andi	r23, 0xFF	; 255
    a178:	7f 7f       	andi	r23, 0xFF	; 255
    a17a:	7f 7f       	andi	r23, 0xFF	; 255
    a17c:	7f 7f       	andi	r23, 0xFF	; 255
    a17e:	7f 7f       	andi	r23, 0xFF	; 255
    a180:	80 80       	ld	r8, Z
    a182:	80 80       	ld	r8, Z
    a184:	80 80       	ld	r8, Z
    a186:	80 80       	ld	r8, Z
    a188:	80 80       	ld	r8, Z
    a18a:	80 80       	ld	r8, Z
    a18c:	80 80       	ld	r8, Z
    a18e:	80 80       	ld	r8, Z
    a190:	80 80       	ld	r8, Z
    a192:	80 80       	ld	r8, Z
    a194:	80 80       	ld	r8, Z
    a196:	80 80       	ld	r8, Z
    a198:	80 80       	ld	r8, Z
    a19a:	80 80       	ld	r8, Z
    a19c:	80 80       	ld	r8, Z
    a19e:	80 80       	ld	r8, Z
    a1a0:	80 80       	ld	r8, Z
    a1a2:	80 80       	ld	r8, Z
    a1a4:	80 80       	ld	r8, Z
    a1a6:	80 80       	ld	r8, Z
    a1a8:	80 80       	ld	r8, Z
    a1aa:	80 80       	ld	r8, Z
    a1ac:	80 80       	ld	r8, Z
    a1ae:	80 80       	ld	r8, Z
    a1b0:	80 80       	ld	r8, Z
    a1b2:	80 80       	ld	r8, Z
    a1b4:	80 80       	ld	r8, Z
    a1b6:	80 80       	ld	r8, Z
    a1b8:	80 80       	ld	r8, Z
    a1ba:	80 80       	ld	r8, Z
    a1bc:	80 80       	ld	r8, Z
    a1be:	80 80       	ld	r8, Z
    a1c0:	80 80       	ld	r8, Z
    a1c2:	80 80       	ld	r8, Z
    a1c4:	80 80       	ld	r8, Z
    a1c6:	80 80       	ld	r8, Z
    a1c8:	80 80       	ld	r8, Z
    a1ca:	80 80       	ld	r8, Z
    a1cc:	80 80       	ld	r8, Z
    a1ce:	80 80       	ld	r8, Z
    a1d0:	80 80       	ld	r8, Z
    a1d2:	80 80       	ld	r8, Z
    a1d4:	80 80       	ld	r8, Z
    a1d6:	80 80       	ld	r8, Z
    a1d8:	80 80       	ld	r8, Z
    a1da:	80 80       	ld	r8, Z
    a1dc:	80 80       	ld	r8, Z
    a1de:	80 80       	ld	r8, Z
    a1e0:	80 80       	ld	r8, Z
    a1e2:	80 80       	ld	r8, Z
    a1e4:	80 80       	ld	r8, Z
    a1e6:	80 80       	ld	r8, Z
    a1e8:	80 80       	ld	r8, Z
    a1ea:	80 80       	ld	r8, Z
    a1ec:	80 80       	ld	r8, Z
    a1ee:	80 80       	ld	r8, Z
    a1f0:	80 80       	ld	r8, Z
    a1f2:	80 80       	ld	r8, Z
    a1f4:	80 80       	ld	r8, Z
    a1f6:	80 80       	ld	r8, Z
    a1f8:	80 80       	ld	r8, Z
    a1fa:	80 80       	ld	r8, Z
    a1fc:	80 80       	ld	r8, Z
    a1fe:	80 80       	ld	r8, Z
    a200:	7f 7f       	andi	r23, 0xFF	; 255
    a202:	7f 7f       	andi	r23, 0xFF	; 255
    a204:	7f 7f       	andi	r23, 0xFF	; 255
    a206:	7f 7f       	andi	r23, 0xFF	; 255
    a208:	7f 7f       	andi	r23, 0xFF	; 255
    a20a:	7f 7f       	andi	r23, 0xFF	; 255
    a20c:	7f 7f       	andi	r23, 0xFF	; 255
    a20e:	7f 7f       	andi	r23, 0xFF	; 255
    a210:	7f 7f       	andi	r23, 0xFF	; 255
    a212:	7f 7f       	andi	r23, 0xFF	; 255
    a214:	7f 7f       	andi	r23, 0xFF	; 255
    a216:	7f 7f       	andi	r23, 0xFF	; 255
    a218:	7f 7f       	andi	r23, 0xFF	; 255
    a21a:	7f 7f       	andi	r23, 0xFF	; 255
    a21c:	7f 7f       	andi	r23, 0xFF	; 255
    a21e:	7f 7f       	andi	r23, 0xFF	; 255
    a220:	7f 7f       	andi	r23, 0xFF	; 255
    a222:	7f 7f       	andi	r23, 0xFF	; 255
    a224:	7f 7f       	andi	r23, 0xFF	; 255
    a226:	7f 7f       	andi	r23, 0xFF	; 255
    a228:	7f 7f       	andi	r23, 0xFF	; 255
    a22a:	7f 7f       	andi	r23, 0xFF	; 255
    a22c:	7f 7f       	andi	r23, 0xFF	; 255
    a22e:	7f 7f       	andi	r23, 0xFF	; 255
    a230:	7f 7f       	andi	r23, 0xFF	; 255
    a232:	7f 7f       	andi	r23, 0xFF	; 255
    a234:	7f 7f       	andi	r23, 0xFF	; 255
    a236:	7f 7f       	andi	r23, 0xFF	; 255
    a238:	7f 7f       	andi	r23, 0xFF	; 255
    a23a:	7f 7f       	andi	r23, 0xFF	; 255
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	7f 7f       	andi	r23, 0xFF	; 255
    a242:	7f 7f       	andi	r23, 0xFF	; 255
    a244:	7f 7f       	andi	r23, 0xFF	; 255
    a246:	7f 7f       	andi	r23, 0xFF	; 255
    a248:	7f 7f       	andi	r23, 0xFF	; 255
    a24a:	7f 7f       	andi	r23, 0xFF	; 255
    a24c:	7f 7f       	andi	r23, 0xFF	; 255
    a24e:	7f 7f       	andi	r23, 0xFF	; 255
    a250:	7f 7f       	andi	r23, 0xFF	; 255
    a252:	7f 7f       	andi	r23, 0xFF	; 255
    a254:	7f 7f       	andi	r23, 0xFF	; 255
    a256:	7f 7f       	andi	r23, 0xFF	; 255
    a258:	7f 7f       	andi	r23, 0xFF	; 255
    a25a:	7f 7f       	andi	r23, 0xFF	; 255
    a25c:	7f 7f       	andi	r23, 0xFF	; 255
    a25e:	7f 7f       	andi	r23, 0xFF	; 255
    a260:	7f 7f       	andi	r23, 0xFF	; 255
    a262:	7f 7f       	andi	r23, 0xFF	; 255
    a264:	7f 7f       	andi	r23, 0xFF	; 255
    a266:	7f 7f       	andi	r23, 0xFF	; 255
    a268:	7f 7f       	andi	r23, 0xFF	; 255
    a26a:	7f 7f       	andi	r23, 0xFF	; 255
    a26c:	7f 7f       	andi	r23, 0xFF	; 255
    a26e:	7f 7f       	andi	r23, 0xFF	; 255
    a270:	7f 7f       	andi	r23, 0xFF	; 255
    a272:	7f 7f       	andi	r23, 0xFF	; 255
    a274:	7f 7f       	andi	r23, 0xFF	; 255
    a276:	7f 7f       	andi	r23, 0xFF	; 255
    a278:	7f 7f       	andi	r23, 0xFF	; 255
    a27a:	7f 7f       	andi	r23, 0xFF	; 255
    a27c:	7f 7f       	andi	r23, 0xFF	; 255
    a27e:	7f 7f       	andi	r23, 0xFF	; 255
    a280:	7f 7f       	andi	r23, 0xFF	; 255
    a282:	7f 7f       	andi	r23, 0xFF	; 255
    a284:	7f 7f       	andi	r23, 0xFF	; 255
    a286:	7f 7f       	andi	r23, 0xFF	; 255
    a288:	7f 7f       	andi	r23, 0xFF	; 255
    a28a:	7f 7f       	andi	r23, 0xFF	; 255
    a28c:	7f 7f       	andi	r23, 0xFF	; 255
    a28e:	7f 7f       	andi	r23, 0xFF	; 255
    a290:	7f 7f       	andi	r23, 0xFF	; 255
    a292:	7f 7f       	andi	r23, 0xFF	; 255
    a294:	7f 7f       	andi	r23, 0xFF	; 255
    a296:	7f 7f       	andi	r23, 0xFF	; 255
    a298:	7f 7f       	andi	r23, 0xFF	; 255
    a29a:	7f 7f       	andi	r23, 0xFF	; 255
    a29c:	7f 7f       	andi	r23, 0xFF	; 255
    a29e:	7f 7f       	andi	r23, 0xFF	; 255
    a2a0:	7f 7f       	andi	r23, 0xFF	; 255
    a2a2:	7f 7f       	andi	r23, 0xFF	; 255
    a2a4:	7f 7f       	andi	r23, 0xFF	; 255
    a2a6:	7f 7f       	andi	r23, 0xFF	; 255
    a2a8:	7f 7f       	andi	r23, 0xFF	; 255
    a2aa:	7f 7f       	andi	r23, 0xFF	; 255
    a2ac:	7f 7f       	andi	r23, 0xFF	; 255
    a2ae:	7f 7f       	andi	r23, 0xFF	; 255
    a2b0:	7f 7f       	andi	r23, 0xFF	; 255
    a2b2:	7f 7f       	andi	r23, 0xFF	; 255
    a2b4:	7f 7f       	andi	r23, 0xFF	; 255
    a2b6:	7f 7f       	andi	r23, 0xFF	; 255
    a2b8:	7f 7f       	andi	r23, 0xFF	; 255
    a2ba:	7f 7f       	andi	r23, 0xFF	; 255
    a2bc:	7f 7f       	andi	r23, 0xFF	; 255
    a2be:	7f 7f       	andi	r23, 0xFF	; 255
    a2c0:	80 80       	ld	r8, Z
    a2c2:	80 80       	ld	r8, Z
    a2c4:	80 80       	ld	r8, Z
    a2c6:	80 80       	ld	r8, Z
    a2c8:	80 80       	ld	r8, Z
    a2ca:	80 80       	ld	r8, Z
    a2cc:	80 80       	ld	r8, Z
    a2ce:	80 80       	ld	r8, Z
    a2d0:	80 80       	ld	r8, Z
    a2d2:	80 80       	ld	r8, Z
    a2d4:	80 80       	ld	r8, Z
    a2d6:	80 80       	ld	r8, Z
    a2d8:	80 80       	ld	r8, Z
    a2da:	80 80       	ld	r8, Z
    a2dc:	80 80       	ld	r8, Z
    a2de:	80 80       	ld	r8, Z
    a2e0:	80 80       	ld	r8, Z
    a2e2:	80 80       	ld	r8, Z
    a2e4:	80 80       	ld	r8, Z
    a2e6:	80 80       	ld	r8, Z
    a2e8:	80 80       	ld	r8, Z
    a2ea:	80 80       	ld	r8, Z
    a2ec:	80 80       	ld	r8, Z
    a2ee:	80 80       	ld	r8, Z
    a2f0:	80 80       	ld	r8, Z
    a2f2:	80 80       	ld	r8, Z
    a2f4:	80 80       	ld	r8, Z
    a2f6:	80 80       	ld	r8, Z
    a2f8:	80 80       	ld	r8, Z
    a2fa:	80 80       	ld	r8, Z
    a2fc:	80 80       	ld	r8, Z
    a2fe:	80 80       	ld	r8, Z
    a300:	03 09       	sbc	r16, r3
    a302:	13 1e       	adc	r1, r19
    a304:	28 31       	cpi	r18, 0x18	; 24
    a306:	3a 40       	sbci	r19, 0x0A	; 10
    a308:	46 4c       	sbci	r20, 0xC6	; 198
    a30a:	50 54       	subi	r21, 0x40	; 64
    a30c:	58 5b       	subi	r21, 0xB8	; 184
    a30e:	5e 61       	ori	r21, 0x1E	; 30
    a310:	63 65       	ori	r22, 0x53	; 83
    a312:	67 69       	ori	r22, 0x97	; 151
    a314:	6b 6c       	ori	r22, 0xCB	; 203
    a316:	6e 6f       	ori	r22, 0xFE	; 254
    a318:	70 71       	andi	r23, 0x10	; 16
    a31a:	72 73       	andi	r23, 0x32	; 50
    a31c:	74 75       	andi	r23, 0x54	; 84
    a31e:	76 77       	andi	r23, 0x76	; 118
    a320:	77 78       	andi	r23, 0x87	; 135
    a322:	79 79       	andi	r23, 0x99	; 153
    a324:	7a 7a       	andi	r23, 0xAA	; 170
    a326:	7b 7b       	andi	r23, 0xBB	; 187
    a328:	7c 7c       	andi	r23, 0xCC	; 204
    a32a:	7c 7d       	andi	r23, 0xDC	; 220
    a32c:	7d 7d       	andi	r23, 0xDD	; 221
    a32e:	7e 7e       	andi	r23, 0xEE	; 238
    a330:	7e 7e       	andi	r23, 0xEE	; 238
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7e       	andi	r23, 0xEF	; 239
    a34e:	7e 7e       	andi	r23, 0xEE	; 238
    a350:	7e 7d       	andi	r23, 0xDE	; 222
    a352:	7d 7d       	andi	r23, 0xDD	; 221
    a354:	7c 7c       	andi	r23, 0xCC	; 204
    a356:	7c 7b       	andi	r23, 0xBC	; 188
    a358:	7b 7a       	andi	r23, 0xAB	; 171
    a35a:	7a 79       	andi	r23, 0x9A	; 154
    a35c:	79 78       	andi	r23, 0x89	; 137
    a35e:	77 77       	andi	r23, 0x77	; 119
    a360:	76 75       	andi	r23, 0x56	; 86
    a362:	74 73       	andi	r23, 0x34	; 52
    a364:	72 71       	andi	r23, 0x12	; 18
    a366:	70 6f       	ori	r23, 0xF0	; 240
    a368:	6e 6c       	ori	r22, 0xCE	; 206
    a36a:	6b 69       	ori	r22, 0x9B	; 155
    a36c:	67 65       	ori	r22, 0x57	; 87
    a36e:	63 61       	ori	r22, 0x13	; 19
    a370:	5e 5b       	subi	r21, 0xBE	; 190
    a372:	58 54       	subi	r21, 0x48	; 72
    a374:	50 4c       	sbci	r21, 0xC0	; 192
    a376:	46 40       	sbci	r20, 0x06	; 6
    a378:	3a 31       	cpi	r19, 0x1A	; 26
    a37a:	28 1e       	adc	r2, r24
    a37c:	13 09       	sbc	r17, r3
    a37e:	03 00       	.word	0x0003	; ????
    a380:	c6 cc       	rjmp	.-1652   	; 0x9d0e <waves+0xe>
    a382:	d5 db       	rcall	.-2134   	; 0x9b2e <steptable+0x26>
    a384:	df e3       	ldi	r29, 0x3F	; 63
    a386:	e5 e7       	ldi	r30, 0x75	; 117
    a388:	e9 ea       	ldi	r30, 0xA9	; 169
    a38a:	eb ec       	ldi	r30, 0xCB	; 203
    a38c:	ed ee       	ldi	r30, 0xED	; 237
    a38e:	ef ef       	ldi	r30, 0xFF	; 255
    a390:	f0 f0       	brcs	.+60     	; 0xa3ce <waves+0x6ce>
    a392:	f0 f1       	brcs	.+124    	; 0xa410 <waves+0x710>
    a394:	f1 f1       	breq	.+124    	; 0xa412 <waves+0x712>
    a396:	f1 f2       	breq	.-68     	; 0xa354 <waves+0x654>
    a398:	f2 f2       	brmi	.-68     	; 0xa356 <waves+0x656>
    a39a:	f2 f2       	brmi	.-68     	; 0xa358 <waves+0x658>
    a39c:	f2 f2       	brmi	.-68     	; 0xa35a <waves+0x65a>
    a39e:	f2 f3       	brmi	.-4      	; 0xa39c <waves+0x69c>
    a3a0:	f3 f3       	brvs	.-4      	; 0xa39e <waves+0x69e>
    a3a2:	f3 f3       	brvs	.-4      	; 0xa3a0 <waves+0x6a0>
    a3a4:	f3 f3       	brvs	.-4      	; 0xa3a2 <waves+0x6a2>
    a3a6:	f3 f3       	brvs	.-4      	; 0xa3a4 <waves+0x6a4>
    a3a8:	f3 f3       	brvs	.-4      	; 0xa3a6 <waves+0x6a6>
    a3aa:	f3 f3       	brvs	.-4      	; 0xa3a8 <waves+0x6a8>
    a3ac:	f3 f3       	brvs	.-4      	; 0xa3aa <waves+0x6aa>
    a3ae:	f3 f3       	brvs	.-4      	; 0xa3ac <waves+0x6ac>
    a3b0:	f3 f3       	brvs	.-4      	; 0xa3ae <waves+0x6ae>
    a3b2:	f3 f3       	brvs	.-4      	; 0xa3b0 <waves+0x6b0>
    a3b4:	f3 f3       	brvs	.-4      	; 0xa3b2 <waves+0x6b2>
    a3b6:	f3 f3       	brvs	.-4      	; 0xa3b4 <waves+0x6b4>
    a3b8:	f3 f3       	brvs	.-4      	; 0xa3b6 <waves+0x6b6>
    a3ba:	f3 f3       	brvs	.-4      	; 0xa3b8 <waves+0x6b8>
    a3bc:	f3 f3       	brvs	.-4      	; 0xa3ba <waves+0x6ba>
    a3be:	f3 f3       	brvs	.-4      	; 0xa3bc <waves+0x6bc>
    a3c0:	f3 f3       	brvs	.-4      	; 0xa3be <waves+0x6be>
    a3c2:	f3 f3       	brvs	.-4      	; 0xa3c0 <waves+0x6c0>
    a3c4:	f3 f3       	brvs	.-4      	; 0xa3c2 <waves+0x6c2>
    a3c6:	f3 f3       	brvs	.-4      	; 0xa3c4 <waves+0x6c4>
    a3c8:	f3 f3       	brvs	.-4      	; 0xa3c6 <waves+0x6c6>
    a3ca:	f3 f3       	brvs	.-4      	; 0xa3c8 <waves+0x6c8>
    a3cc:	f3 f3       	brvs	.-4      	; 0xa3ca <waves+0x6ca>
    a3ce:	f3 f3       	brvs	.-4      	; 0xa3cc <waves+0x6cc>
    a3d0:	f3 f3       	brvs	.-4      	; 0xa3ce <waves+0x6ce>
    a3d2:	f3 f3       	brvs	.-4      	; 0xa3d0 <waves+0x6d0>
    a3d4:	f3 f3       	brvs	.-4      	; 0xa3d2 <waves+0x6d2>
    a3d6:	f3 f3       	brvs	.-4      	; 0xa3d4 <waves+0x6d4>
    a3d8:	f3 f3       	brvs	.-4      	; 0xa3d6 <waves+0x6d6>
    a3da:	f3 f3       	brvs	.-4      	; 0xa3d8 <waves+0x6d8>
    a3dc:	f3 f3       	brvs	.-4      	; 0xa3da <waves+0x6da>
    a3de:	f3 f3       	brvs	.-4      	; 0xa3dc <waves+0x6dc>
    a3e0:	f2 f2       	brmi	.-68     	; 0xa39e <waves+0x69e>
    a3e2:	f2 f2       	brmi	.-68     	; 0xa3a0 <waves+0x6a0>
    a3e4:	f2 f2       	brmi	.-68     	; 0xa3a2 <waves+0x6a2>
    a3e6:	f2 f2       	brmi	.-68     	; 0xa3a4 <waves+0x6a4>
    a3e8:	f1 f1       	breq	.+124    	; 0xa466 <waves+0x766>
    a3ea:	f1 f1       	breq	.+124    	; 0xa468 <waves+0x768>
    a3ec:	f0 f0       	brcs	.+60     	; 0xa42a <waves+0x72a>
    a3ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a3f0:	ef ee       	ldi	r30, 0xEF	; 239
    a3f2:	ed ec       	ldi	r30, 0xCD	; 205
    a3f4:	eb ea       	ldi	r30, 0xAB	; 171
    a3f6:	e9 e7       	ldi	r30, 0x79	; 121
    a3f8:	e5 e3       	ldi	r30, 0x35	; 53
    a3fa:	df db       	rcall	.-2114   	; 0x9bba <steptable+0xb2>
    a3fc:	d5 cc       	rjmp	.-1622   	; 0x9da8 <waves+0xa8>
    a3fe:	c6 00       	.word	0x00c6	; ????
    a400:	00 28       	or	r0, r0
    a402:	3d 42       	sbci	r19, 0x2D	; 45
    a404:	30 2d       	mov	r19, r0
    a406:	2c 2b       	or	r18, r28
    a408:	2c 2d       	mov	r18, r12
    a40a:	2e 2f       	mov	r18, r30
    a40c:	30 32       	cpi	r19, 0x20	; 32
    a40e:	33 35       	cpi	r19, 0x53	; 83
    a410:	37 39       	cpi	r19, 0x97	; 151
    a412:	3b 3d       	cpi	r19, 0xDB	; 219
    a414:	3f 41       	sbci	r19, 0x1F	; 31
    a416:	43 45       	sbci	r20, 0x53	; 83
    a418:	48 4a       	sbci	r20, 0xA8	; 168
    a41a:	4c 4e       	sbci	r20, 0xEC	; 236
    a41c:	50 53       	subi	r21, 0x30	; 48
    a41e:	55 57       	subi	r21, 0x75	; 117
    a420:	59 5b       	subi	r21, 0xB9	; 185
    a422:	5d 5f       	subi	r21, 0xFD	; 253
    a424:	61 63       	ori	r22, 0x31	; 49
    a426:	65 67       	ori	r22, 0x75	; 117
    a428:	69 6b       	ori	r22, 0xB9	; 185
    a42a:	6c 6e       	ori	r22, 0xEC	; 236
    a42c:	70 71       	andi	r23, 0x10	; 16
    a42e:	73 74       	andi	r23, 0x43	; 67
    a430:	75 77       	andi	r23, 0x75	; 117
    a432:	78 79       	andi	r23, 0x98	; 152
    a434:	7a 7b       	andi	r23, 0xBA	; 186
    a436:	7c 7d       	andi	r23, 0xDC	; 220
    a438:	7d 7e       	andi	r23, 0xED	; 237
    a43a:	7e 7f       	andi	r23, 0xFE	; 254
    a43c:	7f 7f       	andi	r23, 0xFF	; 255
    a43e:	7f 7f       	andi	r23, 0xFF	; 255
    a440:	7f 7f       	andi	r23, 0xFF	; 255
    a442:	7f 7f       	andi	r23, 0xFF	; 255
    a444:	7f 7f       	andi	r23, 0xFF	; 255
    a446:	7e 7e       	andi	r23, 0xEE	; 238
    a448:	7d 7d       	andi	r23, 0xDD	; 221
    a44a:	7c 7b       	andi	r23, 0xBC	; 188
    a44c:	7a 79       	andi	r23, 0x9A	; 154
    a44e:	78 77       	andi	r23, 0x78	; 120
    a450:	75 74       	andi	r23, 0x45	; 69
    a452:	73 71       	andi	r23, 0x13	; 19
    a454:	70 6e       	ori	r23, 0xE0	; 224
    a456:	6c 6b       	ori	r22, 0xBC	; 188
    a458:	69 67       	ori	r22, 0x79	; 121
    a45a:	65 63       	ori	r22, 0x35	; 53
    a45c:	61 5f       	subi	r22, 0xF1	; 241
    a45e:	5d 5b       	subi	r21, 0xBD	; 189
    a460:	59 57       	subi	r21, 0x79	; 121
    a462:	55 53       	subi	r21, 0x35	; 53
    a464:	50 4e       	sbci	r21, 0xE0	; 224
    a466:	4c 4a       	sbci	r20, 0xAC	; 172
    a468:	48 45       	sbci	r20, 0x58	; 88
    a46a:	43 41       	sbci	r20, 0x13	; 19
    a46c:	3f 3d       	cpi	r19, 0xDF	; 223
    a46e:	3b 39       	cpi	r19, 0x9B	; 155
    a470:	37 35       	cpi	r19, 0x57	; 87
    a472:	33 32       	cpi	r19, 0x23	; 35
    a474:	30 2f       	mov	r19, r16
    a476:	2e 2d       	mov	r18, r14
    a478:	2c 2b       	or	r18, r28
    a47a:	2c 2d       	mov	r18, r12
    a47c:	30 42       	sbci	r19, 0x20	; 32
    a47e:	3d 28       	or	r3, r13
    a480:	00 e9       	ldi	r16, 0x90	; 144
    a482:	e5 fe       	sbrs	r14, 5
    a484:	d4 d7       	rcall	.+4008   	; 0xb42e <save_score+0x12>
    a486:	d7 d7       	rcall	.+4014   	; 0xb436 <save_score+0x1a>
    a488:	d6 d4       	rcall	.+2476   	; 0xae36 <LBCollides+0x3c>
    a48a:	d2 d0       	rcall	.+420    	; 0xa630 <waves+0x930>
    a48c:	ce cc       	rjmp	.-1636   	; 0x9e2a <waves+0x12a>
    a48e:	ca c8       	rjmp	.-3692   	; 0x9624 <TriggerNote+0x64>
    a490:	c6 c3       	rjmp	.+1932   	; 0xac1e <ProcessFading+0x28>
    a492:	c1 bf       	out	0x31, r28	; 49
    a494:	bd ba       	out	0x1d, r11	; 29
    a496:	b8 b6       	in	r11, 0x38	; 56
    a498:	b4 b1       	in	r27, 0x04	; 4
    a49a:	af ad       	ldd	r26, Y+63	; 0x3f
    a49c:	ab a9       	ldd	r26, Y+51	; 0x33
    a49e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a4a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    a4a2:	9f 9e       	mul	r9, r31
    a4a4:	9c 9a       	sbi	0x13, 4	; 19
    a4a6:	99 97       	sbiw	r26, 0x29	; 41
    a4a8:	95 94       	asr	r9
    a4aa:	93 91       	.word	0x9193	; ????
    a4ac:	90 8f       	std	Z+24, r25	; 0x18
    a4ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a4b0:	8b 8a       	std	Y+19, r8	; 0x13
    a4b2:	89 88       	ldd	r8, Y+17	; 0x11
    a4b4:	88 87       	std	Y+8, r24	; 0x08
    a4b6:	86 85       	ldd	r24, Z+14	; 0x0e
    a4b8:	85 84       	ldd	r8, Z+13	; 0x0d
    a4ba:	84 84       	ldd	r8, Z+12	; 0x0c
    a4bc:	83 83       	std	Z+3, r24	; 0x03
    a4be:	83 83       	std	Z+3, r24	; 0x03
    a4c0:	83 83       	std	Z+3, r24	; 0x03
    a4c2:	83 83       	std	Z+3, r24	; 0x03
    a4c4:	83 84       	ldd	r8, Z+11	; 0x0b
    a4c6:	84 84       	ldd	r8, Z+12	; 0x0c
    a4c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a4ca:	86 87       	std	Z+14, r24	; 0x0e
    a4cc:	88 88       	ldd	r8, Y+16	; 0x10
    a4ce:	89 8a       	std	Y+17, r8	; 0x11
    a4d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a4d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a4d4:	90 91 93 94 	lds	r25, 0x9493
    a4d8:	95 97       	sbiw	r26, 0x25	; 37
    a4da:	99 9a       	sbi	0x13, 1	; 19
    a4dc:	9c 9e       	mul	r9, r28
    a4de:	9f a1       	ldd	r25, Y+39	; 0x27
    a4e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a4e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    a4e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    a4e6:	af b1       	in	r26, 0x0f	; 15
    a4e8:	b4 b6       	in	r11, 0x34	; 52
    a4ea:	b8 ba       	out	0x18, r11	; 24
    a4ec:	bd bf       	out	0x3d, r27	; 61
    a4ee:	c1 c3       	rjmp	.+1922   	; 0xac72 <LBGetNextFrame+0x2a>
    a4f0:	c6 c8       	rjmp	.-3700   	; 0x967e <ProcessMusic+0x50>
    a4f2:	ca cc       	rjmp	.-1644   	; 0x9e88 <waves+0x188>
    a4f4:	ce d0       	rcall	.+412    	; 0xa692 <waves+0x992>
    a4f6:	d2 d4       	rcall	.+2468   	; 0xae9c <LBLineIntersect+0x4e>
    a4f8:	d6 d7       	rcall	.+4012   	; 0xb4a6 <save_score+0x8a>
    a4fa:	d7 d7       	rcall	.+4014   	; 0xb4aa <save_score+0x8e>
    a4fc:	d4 fe       	sbrs	r13, 4
    a4fe:	e5 e9       	ldi	r30, 0x95	; 149
    a500:	f9 f8       	.word	0xf8f9	; ????
    a502:	f9 f5       	brne	.+126    	; 0xa582 <waves+0x882>
    a504:	eb e1       	ldi	r30, 0x1B	; 27
    a506:	dd de       	rcall	.-582    	; 0xa2c2 <waves+0x5c2>
    a508:	e0 e2       	ldi	r30, 0x20	; 32
    a50a:	e4 e5       	ldi	r30, 0x54	; 84
    a50c:	e6 e5       	ldi	r30, 0x56	; 86
    a50e:	e4 e2       	ldi	r30, 0x24	; 36
    a510:	de d9       	rcall	.-3140   	; 0x98ce <ProcessMusic+0x2a0>
    a512:	d2 ca       	rjmp	.-2652   	; 0x9ab8 <SetMixerWave+0x8>
    a514:	c1 b7       	in	r28, 0x31	; 49
    a516:	ac a2       	std	Y+36, r10	; 0x24
    a518:	99 91       	ld	r25, Y+
    a51a:	8a 86       	std	Y+10, r8	; 0x0a
    a51c:	83 81       	ldd	r24, Z+3	; 0x03
    a51e:	80 80       	ld	r8, Z
    a520:	81 82       	std	Z+1, r8	; 0x01
    a522:	83 85       	ldd	r24, Z+11	; 0x0b
    a524:	86 88       	ldd	r8, Z+22	; 0x16
    a526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a528:	8d 8f       	std	Y+29, r24	; 0x1d
    a52a:	90 92 93 95 	sts	0x9593, r9
    a52e:	96 97       	sbiw	r26, 0x26	; 38
    a530:	98 99       	sbic	0x13, 0	; 19
    a532:	9a 9b       	sbis	0x13, 2	; 19
    a534:	9b 9c       	mul	r9, r11
    a536:	9d 9d       	mul	r25, r13
    a538:	9d 9e       	mul	r9, r29
    a53a:	9e 9e       	mul	r9, r30
    a53c:	9f 9f       	mul	r25, r31
    a53e:	9f 9f       	mul	r25, r31
    a540:	9f 9f       	mul	r25, r31
    a542:	9f 9e       	mul	r9, r31
    a544:	9e 9e       	mul	r9, r30
    a546:	9d 9d       	mul	r25, r13
    a548:	9d 9c       	mul	r9, r13
    a54a:	9b 9b       	sbis	0x13, 3	; 19
    a54c:	9a 99       	sbic	0x13, 2	; 19
    a54e:	98 97       	sbiw	r26, 0x28	; 40
    a550:	96 95       	lsr	r25
    a552:	93 92       	.word	0x9293	; ????
    a554:	90 8f       	std	Z+24, r25	; 0x18
    a556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a558:	8a 88       	ldd	r8, Y+18	; 0x12
    a55a:	86 85       	ldd	r24, Z+14	; 0x0e
    a55c:	83 82       	std	Z+3, r8	; 0x03
    a55e:	81 80       	ldd	r8, Z+1	; 0x01
    a560:	80 81       	ld	r24, Z
    a562:	83 86       	std	Z+11, r8	; 0x0b
    a564:	8a 91       	ld	r24, -Y
    a566:	99 a2       	std	Y+33, r9	; 0x21
    a568:	ac b7       	in	r26, 0x3c	; 60
    a56a:	c1 ca       	rjmp	.-2686   	; 0x9aee <esmw+0x8>
    a56c:	d2 d9       	rcall	.-3164   	; 0x9912 <ProcessMusic+0x2e4>
    a56e:	de e2       	ldi	r29, 0x2E	; 46
    a570:	e4 e5       	ldi	r30, 0x54	; 84
    a572:	e6 e5       	ldi	r30, 0x56	; 86
    a574:	e4 e2       	ldi	r30, 0x24	; 36
    a576:	e0 de       	rcall	.-576    	; 0xa338 <waves+0x638>
    a578:	dd e1       	ldi	r29, 0x1D	; 29
    a57a:	eb f5       	brvc	.+122    	; 0xa5f6 <waves+0x8f6>
    a57c:	f9 f8       	.word	0xf8f9	; ????
    a57e:	f9 00       	.word	0x00f9	; ????
    a580:	07 08       	sbc	r0, r7
    a582:	07 0b       	sbc	r16, r23
    a584:	15 1f       	adc	r17, r21
    a586:	23 22       	and	r2, r19
    a588:	20 1e       	adc	r2, r16
    a58a:	1c 1b       	sub	r17, r28
    a58c:	1a 1b       	sub	r17, r26
    a58e:	1c 1e       	adc	r1, r28
    a590:	22 27       	eor	r18, r18
    a592:	2e 36       	cpi	r18, 0x6E	; 110
    a594:	3f 49       	sbci	r19, 0x9F	; 159
    a596:	54 5e       	subi	r21, 0xE4	; 228
    a598:	67 6f       	ori	r22, 0xF7	; 247
    a59a:	76 7a       	andi	r23, 0xA6	; 166
    a59c:	7e 7f       	andi	r23, 0xFE	; 254
    a59e:	7f 7f       	andi	r23, 0xFF	; 255
    a5a0:	7f 7e       	andi	r23, 0xEF	; 239
    a5a2:	7d 7b       	andi	r23, 0xBD	; 189
    a5a4:	7a 78       	andi	r23, 0x8A	; 138
    a5a6:	76 74       	andi	r23, 0x46	; 70
    a5a8:	73 71       	andi	r23, 0x13	; 19
    a5aa:	70 6e       	ori	r23, 0xE0	; 224
    a5ac:	6d 6b       	ori	r22, 0xBD	; 189
    a5ae:	6a 69       	ori	r22, 0x9A	; 154
    a5b0:	68 67       	ori	r22, 0x78	; 120
    a5b2:	66 65       	ori	r22, 0x56	; 86
    a5b4:	65 64       	ori	r22, 0x45	; 69
    a5b6:	64 63       	ori	r22, 0x34	; 52
    a5b8:	63 62       	ori	r22, 0x23	; 35
    a5ba:	62 62       	ori	r22, 0x22	; 34
    a5bc:	61 61       	ori	r22, 0x11	; 17
    a5be:	61 61       	ori	r22, 0x11	; 17
    a5c0:	61 61       	ori	r22, 0x11	; 17
    a5c2:	61 62       	ori	r22, 0x21	; 33
    a5c4:	62 62       	ori	r22, 0x22	; 34
    a5c6:	63 63       	ori	r22, 0x33	; 51
    a5c8:	63 64       	ori	r22, 0x43	; 67
    a5ca:	65 65       	ori	r22, 0x55	; 85
    a5cc:	66 67       	ori	r22, 0x76	; 118
    a5ce:	68 69       	ori	r22, 0x98	; 152
    a5d0:	6a 6b       	ori	r22, 0xBA	; 186
    a5d2:	6d 6e       	ori	r22, 0xED	; 237
    a5d4:	70 71       	andi	r23, 0x10	; 16
    a5d6:	73 74       	andi	r23, 0x43	; 67
    a5d8:	76 78       	andi	r23, 0x86	; 134
    a5da:	7a 7b       	andi	r23, 0xBA	; 186
    a5dc:	7d 7e       	andi	r23, 0xED	; 237
    a5de:	7f 7f       	andi	r23, 0xFF	; 255
    a5e0:	7f 7f       	andi	r23, 0xFF	; 255
    a5e2:	7e 7a       	andi	r23, 0xAE	; 174
    a5e4:	76 6f       	ori	r23, 0xF6	; 246
    a5e6:	67 5e       	subi	r22, 0xE7	; 231
    a5e8:	54 49       	sbci	r21, 0x94	; 148
    a5ea:	3f 36       	cpi	r19, 0x6F	; 111
    a5ec:	2e 27       	eor	r18, r30
    a5ee:	22 1e       	adc	r2, r18
    a5f0:	1c 1b       	sub	r17, r28
    a5f2:	1a 1b       	sub	r17, r26
    a5f4:	1c 1e       	adc	r1, r28
    a5f6:	20 22       	and	r2, r16
    a5f8:	23 1f       	adc	r18, r19
    a5fa:	15 0b       	sbc	r17, r21
    a5fc:	07 08       	sbc	r0, r7
    a5fe:	07 00       	.word	0x0007	; ????
    a600:	1f 31       	cpi	r17, 0x1F	; 31
    a602:	3d 44       	sbci	r19, 0x4D	; 77
    a604:	4e 53       	subi	r20, 0x3E	; 62
    a606:	54 56       	subi	r21, 0x64	; 100
    a608:	5a 5f       	subi	r21, 0xFA	; 250
    a60a:	64 69       	ori	r22, 0x94	; 148
    a60c:	6e 74       	andi	r22, 0x4E	; 78
    a60e:	76 79       	andi	r23, 0x96	; 150
    a610:	7c 7f       	andi	r23, 0xFC	; 252
    a612:	7f 7f       	andi	r23, 0xFF	; 255
    a614:	7f 7f       	andi	r23, 0xFF	; 255
    a616:	7f 7f       	andi	r23, 0xFF	; 255
    a618:	7f 7f       	andi	r23, 0xFF	; 255
    a61a:	7f 7f       	andi	r23, 0xFF	; 255
    a61c:	7f 7f       	andi	r23, 0xFF	; 255
    a61e:	7f 7f       	andi	r23, 0xFF	; 255
    a620:	7f 7f       	andi	r23, 0xFF	; 255
    a622:	7f 7f       	andi	r23, 0xFF	; 255
    a624:	7f 7f       	andi	r23, 0xFF	; 255
    a626:	7f 7f       	andi	r23, 0xFF	; 255
    a628:	7f 7f       	andi	r23, 0xFF	; 255
    a62a:	7f 7f       	andi	r23, 0xFF	; 255
    a62c:	7f 7f       	andi	r23, 0xFF	; 255
    a62e:	7f 7f       	andi	r23, 0xFF	; 255
    a630:	7f 7f       	andi	r23, 0xFF	; 255
    a632:	7f 7f       	andi	r23, 0xFF	; 255
    a634:	7f 7f       	andi	r23, 0xFF	; 255
    a636:	7f 7f       	andi	r23, 0xFF	; 255
    a638:	7f 7f       	andi	r23, 0xFF	; 255
    a63a:	7f 7f       	andi	r23, 0xFF	; 255
    a63c:	7f 7f       	andi	r23, 0xFF	; 255
    a63e:	7f 7f       	andi	r23, 0xFF	; 255
    a640:	7f 7f       	andi	r23, 0xFF	; 255
    a642:	7f 7f       	andi	r23, 0xFF	; 255
    a644:	7f 7f       	andi	r23, 0xFF	; 255
    a646:	7f 7f       	andi	r23, 0xFF	; 255
    a648:	7f 7f       	andi	r23, 0xFF	; 255
    a64a:	7f 7f       	andi	r23, 0xFF	; 255
    a64c:	7f 7f       	andi	r23, 0xFF	; 255
    a64e:	7f 7f       	andi	r23, 0xFF	; 255
    a650:	7f 7f       	andi	r23, 0xFF	; 255
    a652:	7f 7f       	andi	r23, 0xFF	; 255
    a654:	7f 7f       	andi	r23, 0xFF	; 255
    a656:	7f 7f       	andi	r23, 0xFF	; 255
    a658:	7f 7f       	andi	r23, 0xFF	; 255
    a65a:	7f 7f       	andi	r23, 0xFF	; 255
    a65c:	7f 7f       	andi	r23, 0xFF	; 255
    a65e:	7f 7f       	andi	r23, 0xFF	; 255
    a660:	7f 7f       	andi	r23, 0xFF	; 255
    a662:	7f 7f       	andi	r23, 0xFF	; 255
    a664:	7f 7f       	andi	r23, 0xFF	; 255
    a666:	7f 7f       	andi	r23, 0xFF	; 255
    a668:	7f 7f       	andi	r23, 0xFF	; 255
    a66a:	7f 7f       	andi	r23, 0xFF	; 255
    a66c:	7f 7f       	andi	r23, 0xFF	; 255
    a66e:	7f 7f       	andi	r23, 0xFF	; 255
    a670:	7f 7f       	andi	r23, 0xFF	; 255
    a672:	7f 7f       	andi	r23, 0xFF	; 255
    a674:	7f 7f       	andi	r23, 0xFF	; 255
    a676:	7f 7f       	andi	r23, 0xFF	; 255
    a678:	7f 7f       	andi	r23, 0xFF	; 255
    a67a:	7f 7c       	andi	r23, 0xCF	; 207
    a67c:	78 71       	andi	r23, 0x18	; 24
    a67e:	68 4c       	sbci	r22, 0xC8	; 200
    a680:	2c 1c       	adc	r2, r12
    a682:	12 0c       	add	r1, r2
    a684:	0a 0b       	sbc	r16, r26
    a686:	0a 05       	cpc	r16, r10
    a688:	fd f3       	brhs	.-2      	; 0xa688 <waves+0x988>
    a68a:	e9 df       	rcall	.-46     	; 0xa65e <waves+0x95e>
    a68c:	d4 ca       	rjmp	.-2648   	; 0x9c36 <steptable+0x12e>
    a68e:	c0 b7       	in	r28, 0x30	; 48
    a690:	ae a6       	std	Y+46, r10	; 0x2e
    a692:	9e 97       	sbiw	r26, 0x2e	; 46
    a694:	91 8b       	std	Z+17, r25	; 0x11
    a696:	86 85       	ldd	r24, Z+14	; 0x0e
    a698:	82 80       	ldd	r8, Z+2	; 0x02
    a69a:	80 80       	ld	r8, Z
    a69c:	80 80       	ld	r8, Z
    a69e:	80 80       	ld	r8, Z
    a6a0:	80 80       	ld	r8, Z
    a6a2:	80 80       	ld	r8, Z
    a6a4:	80 80       	ld	r8, Z
    a6a6:	80 80       	ld	r8, Z
    a6a8:	80 80       	ld	r8, Z
    a6aa:	80 80       	ld	r8, Z
    a6ac:	80 80       	ld	r8, Z
    a6ae:	80 80       	ld	r8, Z
    a6b0:	80 80       	ld	r8, Z
    a6b2:	80 80       	ld	r8, Z
    a6b4:	80 80       	ld	r8, Z
    a6b6:	80 80       	ld	r8, Z
    a6b8:	80 80       	ld	r8, Z
    a6ba:	80 80       	ld	r8, Z
    a6bc:	80 80       	ld	r8, Z
    a6be:	80 80       	ld	r8, Z
    a6c0:	80 80       	ld	r8, Z
    a6c2:	80 80       	ld	r8, Z
    a6c4:	80 80       	ld	r8, Z
    a6c6:	80 80       	ld	r8, Z
    a6c8:	80 80       	ld	r8, Z
    a6ca:	80 80       	ld	r8, Z
    a6cc:	80 80       	ld	r8, Z
    a6ce:	80 80       	ld	r8, Z
    a6d0:	80 80       	ld	r8, Z
    a6d2:	80 80       	ld	r8, Z
    a6d4:	80 80       	ld	r8, Z
    a6d6:	80 80       	ld	r8, Z
    a6d8:	80 80       	ld	r8, Z
    a6da:	80 80       	ld	r8, Z
    a6dc:	80 80       	ld	r8, Z
    a6de:	80 80       	ld	r8, Z
    a6e0:	80 80       	ld	r8, Z
    a6e2:	80 80       	ld	r8, Z
    a6e4:	80 80       	ld	r8, Z
    a6e6:	80 80       	ld	r8, Z
    a6e8:	80 80       	ld	r8, Z
    a6ea:	80 80       	ld	r8, Z
    a6ec:	80 80       	ld	r8, Z
    a6ee:	80 80       	ld	r8, Z
    a6f0:	80 80       	ld	r8, Z
    a6f2:	80 80       	ld	r8, Z
    a6f4:	80 87       	std	Z+8, r24	; 0x08
    a6f6:	91 9d       	mul	r25, r1
    a6f8:	ac c4       	rjmp	.+2392   	; 0xb052 <LBRandom+0x58>
    a6fa:	cb d4       	rcall	.+2454   	; 0xb092 <init_scores+0x10>
    a6fc:	dd f2       	brhs	.-74     	; 0xa6b4 <waves+0x9b4>
    a6fe:	fa fa       	.word	0xfafa	; ????

0000a700 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a700:	90 91 c1 0b 	lds	r25, 0x0BC1
    a704:	e0 e9       	ldi	r30, 0x90	; 144
    a706:	fa e0       	ldi	r31, 0x0A	; 10
    a708:	80 e0       	ldi	r24, 0x00	; 0
    a70a:	89 17       	cp	r24, r25
    a70c:	49 f0       	breq	.+18     	; 0xa720 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a70e:	a0 81       	ld	r26, Z
    a710:	b1 81       	ldd	r27, Z+1	; 0x01
    a712:	a0 5e       	subi	r26, 0xE0	; 224
    a714:	be 4f       	sbci	r27, 0xFE	; 254
    a716:	22 81       	ldd	r18, Z+2	; 0x02
    a718:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a71a:	8f 5f       	subi	r24, 0xFF	; 255
    a71c:	33 96       	adiw	r30, 0x03	; 3
    a71e:	f5 cf       	rjmp	.-22     	; 0xa70a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    a720:	08 95       	ret

0000a722 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    a722:	80 93 00 01 	sts	0x0100, r24
    a726:	08 95       	ret

0000a728 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a728:	2f 92       	push	r2
    a72a:	3f 92       	push	r3
    a72c:	4f 92       	push	r4
    a72e:	5f 92       	push	r5
    a730:	6f 92       	push	r6
    a732:	7f 92       	push	r7
    a734:	8f 92       	push	r8
    a736:	9f 92       	push	r9
    a738:	af 92       	push	r10
    a73a:	bf 92       	push	r11
    a73c:	cf 92       	push	r12
    a73e:	df 92       	push	r13
    a740:	ef 92       	push	r14
    a742:	ff 92       	push	r15
    a744:	0f 93       	push	r16
    a746:	1f 93       	push	r17
    a748:	cf 93       	push	r28
    a74a:	df 93       	push	r29
    a74c:	00 d0       	rcall	.+0      	; 0xa74e <ProcessSprites+0x26>
    a74e:	1f 92       	push	r1
    a750:	cd b7       	in	r28, 0x3d	; 61
    a752:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a754:	10 92 c1 0b 	sts	0x0BC1, r1
		if(!spritesOn) return;
    a758:	80 91 00 01 	lds	r24, 0x0100
    a75c:	88 23       	and	r24, r24
    a75e:	09 f4       	brne	.+2      	; 0xa762 <ProcessSprites+0x3a>
    a760:	a1 c0       	rjmp	.+322    	; 0xa8a4 <ProcessSprites+0x17c>
    a762:	e8 e6       	ldi	r30, 0x68	; 104
    a764:	ce 2e       	mov	r12, r30
    a766:	e4 e0       	ldi	r30, 0x04	; 4
    a768:	de 2e       	mov	r13, r30
    a76a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a76c:	f6 01       	movw	r30, r12
    a76e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a770:	80 3f       	cpi	r24, 0xF0	; 240
    a772:	09 f4       	brne	.+2      	; 0xa776 <ProcessSprites+0x4e>
    a774:	79 c0       	rjmp	.+242    	; 0xa868 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a776:	91 81       	ldd	r25, Z+1	; 0x01
    a778:	29 2f       	mov	r18, r25
    a77a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a77c:	28 2e       	mov	r2, r24
    a77e:	26 94       	lsr	r2
    a780:	26 94       	lsr	r2
    a782:	26 94       	lsr	r2
				dx=ssx&0x7;
    a784:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a786:	19 f0       	breq	.+6      	; 0xa78e <ProcessSprites+0x66>
    a788:	72 e0       	ldi	r23, 0x02	; 2
    a78a:	47 2e       	mov	r4, r23
    a78c:	02 c0       	rjmp	.+4      	; 0xa792 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a78e:	44 24       	eor	r4, r4
    a790:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a792:	63 e0       	ldi	r22, 0x03	; 3
    a794:	36 95       	lsr	r19
    a796:	27 95       	ror	r18
    a798:	6a 95       	dec	r22
    a79a:	e1 f7       	brne	.-8      	; 0xa794 <ProcessSprites+0x6c>
    a79c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    a79e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    a7a0:	19 f0       	breq	.+6      	; 0xa7a8 <ProcessSprites+0x80>
    a7a2:	52 e0       	ldi	r21, 0x02	; 2
    a7a4:	55 2e       	mov	r5, r21
    a7a6:	02 c0       	rjmp	.+4      	; 0xa7ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a7a8:	55 24       	eor	r5, r5
    a7aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a7ac:	29 2f       	mov	r18, r25
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	32 2f       	mov	r19, r18
    a7b2:	22 27       	eor	r18, r18
    a7b4:	a9 01       	movw	r20, r18
    a7b6:	48 0f       	add	r20, r24
    a7b8:	51 1d       	adc	r21, r1
    a7ba:	5b 83       	std	Y+3, r21	; 0x03
    a7bc:	4a 83       	std	Y+2, r20	; 0x02
    a7be:	e1 2c       	mov	r14, r1
    a7c0:	f1 2c       	mov	r15, r1
    a7c2:	94 ee       	ldi	r25, 0xE4	; 228
    a7c4:	93 0d       	add	r25, r3
    a7c6:	99 83       	std	Y+1, r25	; 0x01
    a7c8:	03 2d       	mov	r16, r3
    a7ca:	0e 0d       	add	r16, r14
    a7cc:	0c 31       	cpi	r16, 0x1C	; 28
    a7ce:	10 f0       	brcs	.+4      	; 0xa7d4 <ProcessSprites+0xac>
    a7d0:	09 81       	ldd	r16, Y+1	; 0x01
    a7d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a7d4:	5e e1       	ldi	r21, 0x1E	; 30
    a7d6:	05 9f       	mul	r16, r21
    a7d8:	80 01       	movw	r16, r0
    a7da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a7dc:	be 2c       	mov	r11, r14
    a7de:	aa 24       	eor	r10, r10
    a7e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a7e2:	ed e1       	ldi	r30, 0x1D	; 29
    a7e4:	e7 15       	cp	r30, r7
    a7e6:	18 f4       	brcc	.+6      	; 0xa7ee <ProcessSprites+0xc6>
    a7e8:	82 ee       	ldi	r24, 0xE2	; 226
    a7ea:	87 0d       	add	r24, r7
    a7ec:	01 c0       	rjmp	.+2      	; 0xa7f0 <ProcessSprites+0xc8>
    a7ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a7f0:	a8 01       	movw	r20, r16
    a7f2:	48 0f       	add	r20, r24
    a7f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    a7f6:	ca 01       	movw	r24, r20
    a7f8:	80 5e       	subi	r24, 0xE0	; 224
    a7fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a7fc:	4c 01       	movw	r8, r24
    a7fe:	fc 01       	movw	r30, r24
    a800:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    a802:	88 31       	cpi	r24, 0x18	; 24
    a804:	e0 f0       	brcs	.+56     	; 0xa83e <ProcessSprites+0x116>
    a806:	60 91 c1 0b 	lds	r22, 0x0BC1
    a80a:	68 31       	cpi	r22, 0x18	; 24
    a80c:	f8 f4       	brcc	.+62     	; 0xa84c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    a80e:	26 2f       	mov	r18, r22
    a810:	30 e0       	ldi	r19, 0x00	; 0
    a812:	f9 01       	movw	r30, r18
    a814:	ee 0f       	add	r30, r30
    a816:	ff 1f       	adc	r31, r31
    a818:	e2 0f       	add	r30, r18
    a81a:	f3 1f       	adc	r31, r19
    a81c:	e0 57       	subi	r30, 0x70	; 112
    a81e:	f5 4f       	sbci	r31, 0xF5	; 245
    a820:	51 83       	std	Z+1, r21	; 0x01
    a822:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a824:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    a826:	0e 94 95 44 	call	0x892a	; 0x892a <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    a82a:	80 91 c1 0b 	lds	r24, 0x0BC1
    a82e:	f4 01       	movw	r30, r8
    a830:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    a832:	91 e0       	ldi	r25, 0x01	; 1
    a834:	98 0f       	add	r25, r24
    a836:	90 93 c1 0b 	sts	0x0BC1, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    a83a:	88 31       	cpi	r24, 0x18	; 24
    a83c:	38 f4       	brcc	.+14     	; 0xa84c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a83e:	2a 81       	ldd	r18, Y+2	; 0x02
    a840:	3b 81       	ldd	r19, Y+3	; 0x03
    a842:	a5 01       	movw	r20, r10
    a844:	68 2f       	mov	r22, r24
    a846:	86 2d       	mov	r24, r6
    a848:	0e 94 26 45 	call	0x8a4c	; 0x8a4c <BlitSprite>
    a84c:	ff ef       	ldi	r31, 0xFF	; 255
    a84e:	af 1a       	sub	r10, r31
    a850:	bf 0a       	sbc	r11, r31
    a852:	73 94       	inc	r7
    a854:	87 2d       	mov	r24, r7
    a856:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a858:	84 15       	cp	r24, r4
    a85a:	18 f2       	brcs	.-122    	; 0xa7e2 <ProcessSprites+0xba>
    a85c:	4f ef       	ldi	r20, 0xFF	; 255
    a85e:	e4 1a       	sub	r14, r20
    a860:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a862:	e5 14       	cp	r14, r5
    a864:	08 f4       	brcc	.+2      	; 0xa868 <ProcessSprites+0x140>
    a866:	b0 cf       	rjmp	.-160    	; 0xa7c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    a868:	63 94       	inc	r6
    a86a:	84 e0       	ldi	r24, 0x04	; 4
    a86c:	c8 0e       	add	r12, r24
    a86e:	d1 1c       	adc	r13, r1
    a870:	9a e0       	ldi	r25, 0x0A	; 10
    a872:	69 12       	cpse	r6, r25
    a874:	7b cf       	rjmp	.-266    	; 0xa76c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    a876:	0f 90       	pop	r0
    a878:	0f 90       	pop	r0
    a87a:	0f 90       	pop	r0
    a87c:	df 91       	pop	r29
    a87e:	cf 91       	pop	r28
    a880:	1f 91       	pop	r17
    a882:	0f 91       	pop	r16
    a884:	ff 90       	pop	r15
    a886:	ef 90       	pop	r14
    a888:	df 90       	pop	r13
    a88a:	cf 90       	pop	r12
    a88c:	bf 90       	pop	r11
    a88e:	af 90       	pop	r10
    a890:	9f 90       	pop	r9
    a892:	8f 90       	pop	r8
    a894:	7f 90       	pop	r7
    a896:	6f 90       	pop	r6
    a898:	5f 90       	pop	r5
    a89a:	4f 90       	pop	r4
    a89c:	3f 90       	pop	r3
    a89e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    a8a0:	0c 94 80 53 	jmp	0xa700	; 0xa700 <RestoreBackground>

	}
    a8a4:	0f 90       	pop	r0
    a8a6:	0f 90       	pop	r0
    a8a8:	0f 90       	pop	r0
    a8aa:	df 91       	pop	r29
    a8ac:	cf 91       	pop	r28
    a8ae:	1f 91       	pop	r17
    a8b0:	0f 91       	pop	r16
    a8b2:	ff 90       	pop	r15
    a8b4:	ef 90       	pop	r14
    a8b6:	df 90       	pop	r13
    a8b8:	cf 90       	pop	r12
    a8ba:	bf 90       	pop	r11
    a8bc:	af 90       	pop	r10
    a8be:	9f 90       	pop	r9
    a8c0:	8f 90       	pop	r8
    a8c2:	7f 90       	pop	r7
    a8c4:	6f 90       	pop	r6
    a8c6:	5f 90       	pop	r5
    a8c8:	4f 90       	pop	r4
    a8ca:	3f 90       	pop	r3
    a8cc:	2f 90       	pop	r2
    a8ce:	08 95       	ret

0000a8d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a8d0:	df 92       	push	r13
    a8d2:	ef 92       	push	r14
    a8d4:	ff 92       	push	r15
    a8d6:	0f 93       	push	r16
    a8d8:	1f 93       	push	r17
    a8da:	cf 93       	push	r28
    a8dc:	df 93       	push	r29
    a8de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a8e0:	fb 01       	movw	r30, r22
    a8e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a8e4:	31 96       	adiw	r30, 0x01	; 1
    a8e6:	64 91       	lpm	r22, Z
    a8e8:	5f ef       	ldi	r21, 0xFF	; 255
    a8ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a8ec:	24 2f       	mov	r18, r20
    a8ee:	21 70       	andi	r18, 0x01	; 1
    a8f0:	40 ff       	sbrs	r20, 0
    a8f2:	04 c0       	rjmp	.+8      	; 0xa8fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    a8f4:	95 2f       	mov	r25, r21
			dx=-1;
    a8f6:	ff 24       	eor	r15, r15
    a8f8:	fa 94       	dec	r15
    a8fa:	03 c0       	rjmp	.+6      	; 0xa902 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a8fc:	ff 24       	eor	r15, r15
    a8fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a900:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a902:	41 ff       	sbrs	r20, 1
    a904:	05 c0       	rjmp	.+10     	; 0xa910 <MapSprite2+0x40>
			y=(mapHeight-1);
    a906:	7f ef       	ldi	r23, 0xFF	; 255
    a908:	76 0f       	add	r23, r22
			dy=-1;
    a90a:	ee 24       	eor	r14, r14
    a90c:	ea 94       	dec	r14
    a90e:	03 c0       	rjmp	.+6      	; 0xa916 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a910:	ee 24       	eor	r14, r14
    a912:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a914:	70 e0       	ldi	r23, 0x00	; 0
    a916:	21 11       	cpse	r18, r1
    a918:	01 c0       	rjmp	.+2      	; 0xa91c <MapSprite2+0x4c>
    a91a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a91c:	00 e0       	ldi	r16, 0x00	; 0
    a91e:	06 17       	cp	r16, r22
    a920:	09 f1       	breq	.+66     	; 0xa964 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a922:	71 03       	mulsu	r23, r17
    a924:	e0 01       	movw	r28, r0
    a926:	11 24       	eor	r1, r1
    a928:	d8 2e       	mov	r13, r24
    a92a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a92c:	8d 15       	cp	r24, r13
    a92e:	b1 f0       	breq	.+44     	; 0xa95c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a930:	9e 01       	movw	r18, r28
    a932:	29 0f       	add	r18, r25
    a934:	31 1d       	adc	r19, r1
    a936:	97 fd       	sbrc	r25, 7
    a938:	3a 95       	dec	r19
    a93a:	2e 5f       	subi	r18, 0xFE	; 254
    a93c:	3f 4f       	sbci	r19, 0xFF	; 255
    a93e:	fd 01       	movw	r30, r26
    a940:	e2 0f       	add	r30, r18
    a942:	f3 1f       	adc	r31, r19
    a944:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a946:	34 e0       	ldi	r19, 0x04	; 4
    a948:	83 9f       	mul	r24, r19
    a94a:	f0 01       	movw	r30, r0
    a94c:	11 24       	eor	r1, r1
    a94e:	e8 59       	subi	r30, 0x98	; 152
    a950:	fb 4f       	sbci	r31, 0xFB	; 251
    a952:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a954:	8f 5f       	subi	r24, 0xFF	; 255
    a956:	43 83       	std	Z+3, r20	; 0x03
    a958:	9f 0d       	add	r25, r15
    a95a:	e8 cf       	rjmp	.-48     	; 0xa92c <MapSprite2+0x5c>
    a95c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a95e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a960:	95 2f       	mov	r25, r21
    a962:	dd cf       	rjmp	.-70     	; 0xa91e <MapSprite2+0x4e>
	    }
	}
    a964:	df 91       	pop	r29
    a966:	cf 91       	pop	r28
    a968:	1f 91       	pop	r17
    a96a:	0f 91       	pop	r16
    a96c:	ff 90       	pop	r15
    a96e:	ef 90       	pop	r14
    a970:	df 90       	pop	r13
    a972:	08 95       	ret

0000a974 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a974:	0f 93       	push	r16
    a976:	cf 93       	push	r28
    a978:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a97a:	30 e0       	ldi	r19, 0x00	; 0
    a97c:	30 17       	cp	r19, r16
    a97e:	e1 f0       	breq	.+56     	; 0xa9b8 <MoveSprite+0x44>
    a980:	b4 2f       	mov	r27, r20
    a982:	a0 e2       	ldi	r26, 0x20	; 32
    a984:	a4 0f       	add	r26, r20
    a986:	78 2f       	mov	r23, r24
    a988:	72 0f       	add	r23, r18
    a98a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a98c:	87 17       	cp	r24, r23
    a98e:	81 f0       	breq	.+32     	; 0xa9b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a990:	c4 e0       	ldi	r28, 0x04	; 4
    a992:	8c 9f       	mul	r24, r28
    a994:	f0 01       	movw	r30, r0
    a996:	11 24       	eor	r1, r1
    a998:	e8 59       	subi	r30, 0x98	; 152
    a99a:	fb 4f       	sbci	r31, 0xFB	; 251
    a99c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a99e:	41 3e       	cpi	r20, 0xE1	; 225
    a9a0:	51 05       	cpc	r21, r1
    a9a2:	14 f0       	brlt	.+4      	; 0xa9a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a9a4:	a1 83       	std	Z+1, r26	; 0x01
    a9a6:	01 c0       	rjmp	.+2      	; 0xa9aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a9a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a9aa:	8f 5f       	subi	r24, 0xFF	; 255
    a9ac:	98 5f       	subi	r25, 0xF8	; 248
    a9ae:	ee cf       	rjmp	.-36     	; 0xa98c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a9b0:	3f 5f       	subi	r19, 0xFF	; 255
    a9b2:	48 5f       	subi	r20, 0xF8	; 248
    a9b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a9b6:	e2 cf       	rjmp	.-60     	; 0xa97c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a9b8:	cf 91       	pop	r28
    a9ba:	0f 91       	pop	r16
    a9bc:	08 95       	ret

0000a9be <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a9be:	e8 e6       	ldi	r30, 0x68	; 104
    a9c0:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a9c2:	80 ef       	ldi	r24, 0xF0	; 240
    a9c4:	80 83       	st	Z, r24
    a9c6:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a9c8:	94 e0       	ldi	r25, 0x04	; 4
    a9ca:	e0 39       	cpi	r30, 0x90	; 144
    a9cc:	f9 07       	cpc	r31, r25
    a9ce:	d1 f7       	brne	.-12     	; 0xa9c4 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    a9d0:	08 95       	ret

0000a9d2 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    a9d2:	4f 92       	push	r4
    a9d4:	5f 92       	push	r5
    a9d6:	6f 92       	push	r6
    a9d8:	7f 92       	push	r7
    a9da:	8f 92       	push	r8
    a9dc:	9f 92       	push	r9
    a9de:	af 92       	push	r10
    a9e0:	bf 92       	push	r11
    a9e2:	cf 92       	push	r12
    a9e4:	df 92       	push	r13
    a9e6:	ef 92       	push	r14
    a9e8:	ff 92       	push	r15
    a9ea:	0f 93       	push	r16
    a9ec:	1f 93       	push	r17
    a9ee:	cf 93       	push	r28
    a9f0:	df 93       	push	r29
    a9f2:	68 2e       	mov	r6, r24
    a9f4:	56 2e       	mov	r5, r22
    a9f6:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a9f8:	fa 01       	movw	r30, r20
    a9fa:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a9fc:	31 96       	adiw	r30, 0x01	; 1
    a9fe:	84 90       	lpm	r8, Z
    aa00:	c7 2c       	mov	r12, r7
    aa02:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    aa04:	00 e0       	ldi	r16, 0x00	; 0
    aa06:	10 e0       	ldi	r17, 0x00	; 0
    aa08:	91 2c       	mov	r9, r1
    aa0a:	98 14       	cp	r9, r8
    aa0c:	f1 f0       	breq	.+60     	; 0xaa4a <DrawMap2+0x78>
    aa0e:	c0 e0       	ldi	r28, 0x00	; 0
    aa10:	d0 e0       	ldi	r29, 0x00	; 0
    aa12:	58 01       	movw	r10, r16
    aa14:	f2 e0       	ldi	r31, 0x02	; 2
    aa16:	af 0e       	add	r10, r31
    aa18:	b1 1c       	adc	r11, r1
    aa1a:	49 2c       	mov	r4, r9
    aa1c:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    aa1e:	c7 15       	cp	r28, r7
    aa20:	80 f4       	brcc	.+32     	; 0xaa42 <DrawMap2+0x70>
    aa22:	95 01       	movw	r18, r10
    aa24:	2c 0f       	add	r18, r28
    aa26:	3d 1f       	adc	r19, r29
    aa28:	f7 01       	movw	r30, r14
    aa2a:	e2 0f       	add	r30, r18
    aa2c:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    aa2e:	24 91       	lpm	r18, Z
    aa30:	42 2f       	mov	r20, r18
    aa32:	50 e0       	ldi	r21, 0x00	; 0
    aa34:	64 2d       	mov	r22, r4
    aa36:	8c 2f       	mov	r24, r28
    aa38:	86 0d       	add	r24, r6
    aa3a:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
    aa3e:	21 96       	adiw	r28, 0x01	; 1
    aa40:	ee cf       	rjmp	.-36     	; 0xaa1e <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    aa42:	93 94       	inc	r9
    aa44:	0c 0d       	add	r16, r12
    aa46:	1d 1d       	adc	r17, r13
    aa48:	e0 cf       	rjmp	.-64     	; 0xaa0a <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    aa4a:	df 91       	pop	r29
    aa4c:	cf 91       	pop	r28
    aa4e:	1f 91       	pop	r17
    aa50:	0f 91       	pop	r16
    aa52:	ff 90       	pop	r15
    aa54:	ef 90       	pop	r14
    aa56:	df 90       	pop	r13
    aa58:	cf 90       	pop	r12
    aa5a:	bf 90       	pop	r11
    aa5c:	af 90       	pop	r10
    aa5e:	9f 90       	pop	r9
    aa60:	8f 90       	pop	r8
    aa62:	7f 90       	pop	r7
    aa64:	6f 90       	pop	r6
    aa66:	5f 90       	pop	r5
    aa68:	4f 90       	pop	r4
    aa6a:	08 95       	ret

0000aa6c <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    aa6c:	df 92       	push	r13
    aa6e:	ef 92       	push	r14
    aa70:	ff 92       	push	r15
    aa72:	0f 93       	push	r16
    aa74:	1f 93       	push	r17
    aa76:	cf 93       	push	r28
    aa78:	df 93       	push	r29
    aa7a:	f6 2e       	mov	r15, r22
    aa7c:	04 2f       	mov	r16, r20
    aa7e:	d2 2e       	mov	r13, r18
    aa80:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    aa82:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    aa84:	8a e0       	ldi	r24, 0x0A	; 10
    aa86:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    aa88:	01 11       	cpse	r16, r1
    aa8a:	02 c0       	rjmp	.+4      	; 0xaa90 <PrintByte+0x24>
    aa8c:	11 11       	cpse	r17, r1
    aa8e:	07 c0       	rjmp	.+14     	; 0xaa9e <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    aa90:	80 2f       	mov	r24, r16
    aa92:	6e 2d       	mov	r22, r14
    aa94:	0e 94 94 75 	call	0xeb28	; 0xeb28 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    aa98:	40 e1       	ldi	r20, 0x10	; 16
    aa9a:	49 0f       	add	r20, r25
    aa9c:	05 c0       	rjmp	.+10     	; 0xaaa8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    aa9e:	dd 20       	and	r13, r13
    aaa0:	11 f0       	breq	.+4      	; 0xaaa6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    aaa2:	40 e1       	ldi	r20, 0x10	; 16
    aaa4:	01 c0       	rjmp	.+2      	; 0xaaa8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    aaa6:	40 e0       	ldi	r20, 0x00	; 0
    aaa8:	6f 2d       	mov	r22, r15
    aaaa:	8c 2f       	mov	r24, r28
    aaac:	0e 94 56 47 	call	0x8eac	; 0x8eac <SetFont>
			}
		}
		val=val/10;
    aab0:	80 2f       	mov	r24, r16
    aab2:	6e 2d       	mov	r22, r14
    aab4:	0e 94 94 75 	call	0xeb28	; 0xeb28 <__udivmodqi4>
    aab8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    aaba:	1f 5f       	subi	r17, 0xFF	; 255
    aabc:	21 97       	sbiw	r28, 0x01	; 1
    aabe:	13 30       	cpi	r17, 0x03	; 3
    aac0:	19 f7       	brne	.-58     	; 0xaa88 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    aac2:	df 91       	pop	r29
    aac4:	cf 91       	pop	r28
    aac6:	1f 91       	pop	r17
    aac8:	0f 91       	pop	r16
    aaca:	ff 90       	pop	r15
    aacc:	ef 90       	pop	r14
    aace:	df 90       	pop	r13
    aad0:	08 95       	ret

0000aad2 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    aad2:	0f 93       	push	r16
    aad4:	1f 93       	push	r17
    aad6:	cf 93       	push	r28
    aad8:	df 93       	push	r29
    aada:	06 2f       	mov	r16, r22
    aadc:	c4 2f       	mov	r28, r20
    aade:	d5 2f       	mov	r29, r21
    aae0:	18 2f       	mov	r17, r24
    aae2:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    aae4:	fe 01       	movw	r30, r28
    aae6:	44 91       	lpm	r20, Z
		if(c!=0){
    aae8:	44 23       	and	r20, r20
    aaea:	49 f0       	breq	.+18     	; 0xaafe <Print+0x2c>
			c=((c&127)-32);			
    aaec:	4f 77       	andi	r20, 0x7F	; 127
    aaee:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    aaf0:	60 2f       	mov	r22, r16
    aaf2:	8c 2f       	mov	r24, r28
    aaf4:	81 0f       	add	r24, r17
    aaf6:	0e 94 56 47 	call	0x8eac	; 0x8eac <SetFont>
    aafa:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    aafc:	f3 cf       	rjmp	.-26     	; 0xaae4 <Print+0x12>
	
}
    aafe:	df 91       	pop	r29
    ab00:	cf 91       	pop	r28
    ab02:	1f 91       	pop	r17
    ab04:	0f 91       	pop	r16
    ab06:	08 95       	ret

0000ab08 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    ab08:	40 52       	subi	r20, 0x20	; 32
    ab0a:	0c 94 56 47 	jmp	0x8eac	; 0x8eac <SetFont>

0000ab0e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    ab0e:	0f 93       	push	r16
    ab10:	1f 93       	push	r17
    ab12:	cf 93       	push	r28
    ab14:	df 93       	push	r29
    ab16:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ab18:	c0 e0       	ldi	r28, 0x00	; 0
    ab1a:	d0 e0       	ldi	r29, 0x00	; 0
    ab1c:	c0 17       	cp	r28, r16
    ab1e:	d1 07       	cpc	r29, r17
    ab20:	44 f4       	brge	.+16     	; 0xab32 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    ab22:	0e 94 70 47 	call	0x8ee0	; 0x8ee0 <GetVsyncFlag>
    ab26:	88 23       	and	r24, r24
    ab28:	e1 f3       	breq	.-8      	; 0xab22 <WaitVsync+0x14>
		ClearVsyncFlag();		
    ab2a:	0e 94 74 47 	call	0x8ee8	; 0x8ee8 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ab2e:	21 96       	adiw	r28, 0x01	; 1
    ab30:	f5 cf       	rjmp	.-22     	; 0xab1c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    ab32:	df 91       	pop	r29
    ab34:	cf 91       	pop	r28
    ab36:	1f 91       	pop	r17
    ab38:	0f 91       	pop	r16
    ab3a:	08 95       	ret

0000ab3c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    ab3c:	8b e0       	ldi	r24, 0x0B	; 11
    ab3e:	99 e0       	ldi	r25, 0x09	; 9
    ab40:	0e 94 ac 49 	call	0x9358	; 0x9358 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    ab44:	8b e0       	ldi	r24, 0x0B	; 11
    ab46:	91 e0       	ldi	r25, 0x01	; 1
    ab48:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <SetTileTable>
			
			//draw logo
			ClearVram();
    ab4c:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
			WaitVsync(15);		
    ab50:	8f e0       	ldi	r24, 0x0F	; 15
    ab52:	90 e0       	ldi	r25, 0x00	; 0
    ab54:	0e 94 87 55 	call	0xab0e	; 0xab0e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    ab58:	41 e0       	ldi	r20, 0x01	; 1
    ab5a:	6f ef       	ldi	r22, 0xFF	; 255
    ab5c:	80 e0       	ldi	r24, 0x00	; 0
    ab5e:	0e 94 a1 4a 	call	0x9542	; 0x9542 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    ab62:	45 ef       	ldi	r20, 0xF5	; 245
    ab64:	50 e0       	ldi	r21, 0x00	; 0
    ab66:	6c e0       	ldi	r22, 0x0C	; 12
    ab68:	8c e0       	ldi	r24, 0x0C	; 12
    ab6a:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
			WaitVsync(3);
    ab6e:	83 e0       	ldi	r24, 0x03	; 3
    ab70:	90 e0       	ldi	r25, 0x00	; 0
    ab72:	0e 94 87 55 	call	0xab0e	; 0xab0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    ab76:	44 ee       	ldi	r20, 0xE4	; 228
    ab78:	50 e0       	ldi	r21, 0x00	; 0
    ab7a:	6c e0       	ldi	r22, 0x0C	; 12
    ab7c:	8c e0       	ldi	r24, 0x0C	; 12
    ab7e:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
			WaitVsync(2);
    ab82:	82 e0       	ldi	r24, 0x02	; 2
    ab84:	90 e0       	ldi	r25, 0x00	; 0
    ab86:	0e 94 87 55 	call	0xab0e	; 0xab0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    ab8a:	45 ef       	ldi	r20, 0xF5	; 245
    ab8c:	50 e0       	ldi	r21, 0x00	; 0
    ab8e:	6c e0       	ldi	r22, 0x0C	; 12
    ab90:	8c e0       	ldi	r24, 0x0C	; 12
    ab92:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    ab96:	81 e4       	ldi	r24, 0x41	; 65
    ab98:	90 e0       	ldi	r25, 0x00	; 0
    ab9a:	0e 94 87 55 	call	0xab0e	; 0xab0e <WaitVsync>
			ClearVram();
    ab9e:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
			WaitVsync(20);
    aba2:	84 e1       	ldi	r24, 0x14	; 20
    aba4:	90 e0       	ldi	r25, 0x00	; 0
    aba6:	0c 94 87 55 	jmp	0xab0e	; 0xab0e <WaitVsync>

0000abaa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    abaa:	80 93 bf 0b 	sts	0x0BBF, r24
	currFadeFrame=0;
    abae:	10 92 c3 0b 	sts	0x0BC3, r1
	fadeActive=true;
    abb2:	81 e0       	ldi	r24, 0x01	; 1
    abb4:	80 93 c2 0b 	sts	0x0BC2, r24
		
	if(blocking){
    abb8:	66 23       	and	r22, r22
    abba:	21 f0       	breq	.+8      	; 0xabc4 <doFade+0x1a>
		while(fadeActive==true);
    abbc:	80 91 c2 0b 	lds	r24, 0x0BC2
    abc0:	81 11       	cpse	r24, r1
    abc2:	fc cf       	rjmp	.-8      	; 0xabbc <doFade+0x12>
    abc4:	08 95       	ret

0000abc6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    abc6:	81 11       	cpse	r24, r1
    abc8:	03 c0       	rjmp	.+6      	; 0xabd0 <FadeIn+0xa>
		DDRC=0xff;
    abca:	8f ef       	ldi	r24, 0xFF	; 255
    abcc:	87 b9       	out	0x07, r24	; 7
		return;
    abce:	08 95       	ret
	}
	fadeStep=1;
    abd0:	91 e0       	ldi	r25, 0x01	; 1
    abd2:	90 93 c4 0b 	sts	0x0BC4, r25
	fadeDir=1;
    abd6:	90 93 c0 0b 	sts	0x0BC0, r25
	doFade(speed,blocking);
    abda:	0c 94 d5 55 	jmp	0xabaa	; 0xabaa <doFade>

0000abde <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    abde:	81 11       	cpse	r24, r1
    abe0:	02 c0       	rjmp	.+4      	; 0xabe6 <FadeOut+0x8>
		DDRC=0;
    abe2:	17 b8       	out	0x07, r1	; 7
		return;
    abe4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    abe6:	9c e0       	ldi	r25, 0x0C	; 12
    abe8:	90 93 c4 0b 	sts	0x0BC4, r25
	fadeDir=-1;
    abec:	9f ef       	ldi	r25, 0xFF	; 255
    abee:	90 93 c0 0b 	sts	0x0BC0, r25
	doFade(speed,blocking);
    abf2:	0c 94 d5 55 	jmp	0xabaa	; 0xabaa <doFade>

0000abf6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    abf6:	80 91 c2 0b 	lds	r24, 0x0BC2
    abfa:	88 23       	and	r24, r24
    abfc:	01 f1       	breq	.+64     	; 0xac3e <ProcessFading+0x48>
		if(currFadeFrame==0){
    abfe:	80 91 c3 0b 	lds	r24, 0x0BC3
    ac02:	81 11       	cpse	r24, r1
    ac04:	19 c0       	rjmp	.+50     	; 0xac38 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    ac06:	80 91 bf 0b 	lds	r24, 0x0BBF
    ac0a:	80 93 c3 0b 	sts	0x0BC3, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    ac0e:	e0 91 c4 0b 	lds	r30, 0x0BC4
    ac12:	f0 e0       	ldi	r31, 0x00	; 0
    ac14:	e9 52       	subi	r30, 0x29	; 41
    ac16:	ff 4f       	sbci	r31, 0xFF	; 255
    ac18:	e4 91       	lpm	r30, Z
    ac1a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    ac1c:	90 91 c0 0b 	lds	r25, 0x0BC0
    ac20:	80 91 c4 0b 	lds	r24, 0x0BC4
    ac24:	89 0f       	add	r24, r25
    ac26:	80 93 c4 0b 	sts	0x0BC4, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    ac2a:	88 23       	and	r24, r24
    ac2c:	11 f0       	breq	.+4      	; 0xac32 <ProcessFading+0x3c>
    ac2e:	8d 30       	cpi	r24, 0x0D	; 13
    ac30:	31 f4       	brne	.+12     	; 0xac3e <ProcessFading+0x48>
				fadeActive=false;
    ac32:	10 92 c2 0b 	sts	0x0BC2, r1
    ac36:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    ac38:	81 50       	subi	r24, 0x01	; 1
    ac3a:	80 93 c3 0b 	sts	0x0BC3, r24
    ac3e:	08 95       	ret

0000ac40 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    ac40:	0e 94 fb 55 	call	0xabf6	; 0xabf6 <ProcessFading>
		ProcessSprites();
    ac44:	0c 94 94 53 	jmp	0xa728	; 0xa728 <ProcessSprites>

0000ac48 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    ac48:	fc 01       	movw	r30, r24
	anim->looped = 0;
    ac4a:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    ac4c:	93 81       	ldd	r25, Z+3	; 0x03
    ac4e:	9f 5f       	subi	r25, 0xFF	; 255
    ac50:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    ac52:	22 81       	ldd	r18, Z+2	; 0x02
    ac54:	80 81       	ld	r24, Z
    ac56:	92 17       	cp	r25, r18
    ac58:	38 f4       	brcc	.+14     	; 0xac68 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    ac5a:	e8 0f       	add	r30, r24
    ac5c:	f1 1d       	adc	r31, r1
    ac5e:	e8 0f       	add	r30, r24
    ac60:	f1 1d       	adc	r31, r1
    ac62:	86 81       	ldd	r24, Z+6	; 0x06
    ac64:	97 81       	ldd	r25, Z+7	; 0x07
    ac66:	08 95       	ret
	}
	anim->frame_count = 0;
    ac68:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    ac6a:	90 e0       	ldi	r25, 0x00	; 0
    ac6c:	01 96       	adiw	r24, 0x01	; 1
    ac6e:	61 81       	ldd	r22, Z+1	; 0x01
    ac70:	70 e0       	ldi	r23, 0x00	; 0
    ac72:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    ac76:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    ac78:	81 11       	cpse	r24, r1
    ac7a:	02 c0       	rjmp	.+4      	; 0xac80 <LBGetNextFrame+0x38>
    ac7c:	21 e0       	ldi	r18, 0x01	; 1
    ac7e:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    ac80:	99 27       	eor	r25, r25
    ac82:	03 96       	adiw	r24, 0x03	; 3
    ac84:	88 0f       	add	r24, r24
    ac86:	99 1f       	adc	r25, r25
    ac88:	e8 0f       	add	r30, r24
    ac8a:	f9 1f       	adc	r31, r25
    ac8c:	80 81       	ld	r24, Z
    ac8e:	91 81       	ldd	r25, Z+1	; 0x01
}
    ac90:	08 95       	ret

0000ac92 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    ac92:	fc 01       	movw	r30, r24
	anim->looped = 0;
    ac94:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    ac96:	93 81       	ldd	r25, Z+3	; 0x03
    ac98:	9f 5f       	subi	r25, 0xFF	; 255
    ac9a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    ac9c:	22 81       	ldd	r18, Z+2	; 0x02
    ac9e:	80 81       	ld	r24, Z
    aca0:	92 17       	cp	r25, r18
    aca2:	e0 f0       	brcs	.+56     	; 0xacdc <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    aca4:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    aca6:	95 81       	ldd	r25, Z+5	; 0x05
    aca8:	99 23       	and	r25, r25
    acaa:	49 f0       	breq	.+18     	; 0xacbe <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    acac:	81 50       	subi	r24, 0x01	; 1
    acae:	10 f0       	brcs	.+4      	; 0xacb4 <LBGetNextFrameReverse+0x22>
    acb0:	80 83       	st	Z, r24
    acb2:	13 c0       	rjmp	.+38     	; 0xacda <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    acb4:	10 82       	st	Z, r1
			anim->looped = 1;
    acb6:	81 e0       	ldi	r24, 0x01	; 1
    acb8:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    acba:	15 82       	std	Z+5, r1	; 0x05
    acbc:	0e c0       	rjmp	.+28     	; 0xacda <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    acbe:	21 81       	ldd	r18, Z+1	; 0x01
    acc0:	90 e0       	ldi	r25, 0x00	; 0
    acc2:	01 96       	adiw	r24, 0x01	; 1
    acc4:	62 2f       	mov	r22, r18
    acc6:	70 e0       	ldi	r23, 0x00	; 0
    acc8:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    accc:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    acce:	81 11       	cpse	r24, r1
    acd0:	04 c0       	rjmp	.+8      	; 0xacda <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    acd2:	81 e0       	ldi	r24, 0x01	; 1
    acd4:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    acd6:	21 50       	subi	r18, 0x01	; 1
    acd8:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    acda:	80 81       	ld	r24, Z
    acdc:	e8 0f       	add	r30, r24
    acde:	f1 1d       	adc	r31, r1
    ace0:	e8 0f       	add	r30, r24
    ace2:	f1 1d       	adc	r31, r1
    ace4:	86 81       	ldd	r24, Z+6	; 0x06
    ace6:	97 81       	ldd	r25, Z+7	; 0x07
}
    ace8:	08 95       	ret

0000acea <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    acea:	0f 93       	push	r16
    acec:	1f 93       	push	r17
    acee:	cf 93       	push	r28
    acf0:	df 93       	push	r29
    acf2:	1f 92       	push	r1
    acf4:	cd b7       	in	r28, 0x3d	; 61
    acf6:	de b7       	in	r29, 0x3e	; 62
    acf8:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    acfa:	86 2f       	mov	r24, r22
    acfc:	69 83       	std	Y+1, r22	; 0x01
    acfe:	0e 94 7a 47 	call	0x8ef4	; 0x8ef4 <ReadJoypad>
    ad02:	d8 01       	movw	r26, r16
    ad04:	15 96       	adiw	r26, 0x05	; 5
    ad06:	9c 93       	st	X, r25
    ad08:	8e 93       	st	-X, r24
    ad0a:	14 97       	sbiw	r26, 0x04	; 4
    ad0c:	69 81       	ldd	r22, Y+1	; 0x01
    ad0e:	e6 2f       	mov	r30, r22
    ad10:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    ad12:	00 97       	sbiw	r24, 0x00	; 0
    ad14:	51 f0       	breq	.+20     	; 0xad2a <LBGetJoyPadState+0x40>
    ad16:	df 01       	movw	r26, r30
    ad18:	aa 0f       	add	r26, r26
    ad1a:	bb 1f       	adc	r27, r27
    ad1c:	a4 5c       	subi	r26, 0xC4	; 196
    ad1e:	b4 4f       	sbci	r27, 0xF4	; 244
    ad20:	2d 91       	ld	r18, X+
    ad22:	3c 91       	ld	r19, X
    ad24:	82 17       	cp	r24, r18
    ad26:	93 07       	cpc	r25, r19
    ad28:	21 f0       	breq	.+8      	; 0xad32 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    ad2a:	d8 01       	movw	r26, r16
    ad2c:	16 96       	adiw	r26, 0x06	; 6
    ad2e:	1c 92       	st	X, r1
    ad30:	07 c0       	rjmp	.+14     	; 0xad40 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    ad32:	d8 01       	movw	r26, r16
    ad34:	16 96       	adiw	r26, 0x06	; 6
    ad36:	2c 91       	ld	r18, X
    ad38:	16 97       	sbiw	r26, 0x06	; 6
    ad3a:	2f 5f       	subi	r18, 0xFF	; 255
    ad3c:	16 96       	adiw	r26, 0x06	; 6
    ad3e:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    ad40:	ee 0f       	add	r30, r30
    ad42:	ff 1f       	adc	r31, r31
    ad44:	e4 5c       	subi	r30, 0xC4	; 196
    ad46:	f4 4f       	sbci	r31, 0xF4	; 244
    ad48:	20 81       	ld	r18, Z
    ad4a:	31 81       	ldd	r19, Z+1	; 0x01
    ad4c:	a9 01       	movw	r20, r18
    ad4e:	40 95       	com	r20
    ad50:	50 95       	com	r21
    ad52:	48 23       	and	r20, r24
    ad54:	59 23       	and	r21, r25
    ad56:	d8 01       	movw	r26, r16
    ad58:	11 96       	adiw	r26, 0x01	; 1
    ad5a:	5c 93       	st	X, r21
    ad5c:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    ad5e:	ac 01       	movw	r20, r24
    ad60:	40 95       	com	r20
    ad62:	50 95       	com	r21
    ad64:	24 23       	and	r18, r20
    ad66:	35 23       	and	r19, r21
    ad68:	13 96       	adiw	r26, 0x03	; 3
    ad6a:	3c 93       	st	X, r19
    ad6c:	2e 93       	st	-X, r18
    ad6e:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    ad70:	91 83       	std	Z+1, r25	; 0x01
    ad72:	80 83       	st	Z, r24
}
    ad74:	0f 90       	pop	r0
    ad76:	df 91       	pop	r29
    ad78:	cf 91       	pop	r28
    ad7a:	1f 91       	pop	r17
    ad7c:	0f 91       	pop	r16
    ad7e:	08 95       	ret

0000ad80 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    ad80:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    ad82:	fb 01       	movw	r30, r22
    ad84:	2e 2f       	mov	r18, r30
    ad86:	23 1b       	sub	r18, r19
    ad88:	24 17       	cp	r18, r20
    ad8a:	28 f4       	brcc	.+10     	; 0xad96 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    ad8c:	21 91       	ld	r18, Z+
    ad8e:	dc 01       	movw	r26, r24
    ad90:	2d 93       	st	X+, r18
    ad92:	cd 01       	movw	r24, r26
    ad94:	f7 cf       	rjmp	.-18     	; 0xad84 <LBCopyChars+0x4>
	}
}
    ad96:	08 95       	ret

0000ad98 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    ad98:	af 92       	push	r10
    ad9a:	bf 92       	push	r11
    ad9c:	cf 92       	push	r12
    ad9e:	df 92       	push	r13
    ada0:	ef 92       	push	r14
    ada2:	ff 92       	push	r15
    ada4:	0f 93       	push	r16
    ada6:	1f 93       	push	r17
    ada8:	cf 93       	push	r28
    adaa:	df 93       	push	r29
    adac:	1f 92       	push	r1
    adae:	cd b7       	in	r28, 0x3d	; 61
    adb0:	de b7       	in	r29, 0x3e	; 62
    adb2:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    adb4:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    adb6:	c6 2e       	mov	r12, r22
    adb8:	d1 2c       	mov	r13, r1
    adba:	90 e0       	ldi	r25, 0x00	; 0
    adbc:	5c 01       	movw	r10, r24
    adbe:	a4 1a       	sub	r10, r20
    adc0:	b5 0a       	sbc	r11, r21
    adc2:	80 2f       	mov	r24, r16
    adc4:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    adc6:	82 17       	cp	r24, r18
    adc8:	60 f4       	brcc	.+24     	; 0xade2 <LBPrintStr+0x4a>
    adca:	c5 01       	movw	r24, r10
    adcc:	80 0f       	add	r24, r16
    adce:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    add0:	f8 01       	movw	r30, r16
    add2:	41 91       	ld	r20, Z+
    add4:	8f 01       	movw	r16, r30
    add6:	b6 01       	movw	r22, r12
    add8:	29 83       	std	Y+1, r18	; 0x01
    adda:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
    adde:	29 81       	ldd	r18, Y+1	; 0x01
    ade0:	f0 cf       	rjmp	.-32     	; 0xadc2 <LBPrintStr+0x2a>
	}
}
    ade2:	0f 90       	pop	r0
    ade4:	df 91       	pop	r29
    ade6:	cf 91       	pop	r28
    ade8:	1f 91       	pop	r17
    adea:	0f 91       	pop	r16
    adec:	ff 90       	pop	r15
    adee:	ef 90       	pop	r14
    adf0:	df 90       	pop	r13
    adf2:	cf 90       	pop	r12
    adf4:	bf 90       	pop	r11
    adf6:	af 90       	pop	r10
    adf8:	08 95       	ret

0000adfa <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    adfa:	af 92       	push	r10
    adfc:	cf 92       	push	r12
    adfe:	ef 92       	push	r14
    ae00:	ff 92       	push	r15
    ae02:	0f 93       	push	r16
    ae04:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    ae06:	70 e0       	ldi	r23, 0x00	; 0
    ae08:	f1 2c       	mov	r15, r1
    ae0a:	fb 01       	movw	r30, r22
    ae0c:	e2 0f       	add	r30, r18
    ae0e:	f1 1d       	adc	r31, r1
    ae10:	ee 16       	cp	r14, r30
    ae12:	ff 06       	cpc	r15, r31
    ae14:	a4 f4       	brge	.+40     	; 0xae3e <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    ae16:	ea 0c       	add	r14, r10
    ae18:	f1 1c       	adc	r15, r1
    ae1a:	6e 15       	cp	r22, r14
    ae1c:	7f 05       	cpc	r23, r15
    ae1e:	7c f4       	brge	.+30     	; 0xae3e <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    ae20:	28 2f       	mov	r18, r24
    ae22:	30 e0       	ldi	r19, 0x00	; 0
    ae24:	10 e0       	ldi	r17, 0x00	; 0
    ae26:	c9 01       	movw	r24, r18
    ae28:	84 0f       	add	r24, r20
    ae2a:	91 1d       	adc	r25, r1
    ae2c:	08 17       	cp	r16, r24
    ae2e:	19 07       	cpc	r17, r25
    ae30:	34 f4       	brge	.+12     	; 0xae3e <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    ae32:	0c 0d       	add	r16, r12
    ae34:	11 1d       	adc	r17, r1
    ae36:	81 e0       	ldi	r24, 0x01	; 1
    ae38:	20 17       	cp	r18, r16
    ae3a:	31 07       	cpc	r19, r17
    ae3c:	0c f0       	brlt	.+2      	; 0xae40 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    ae3e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    ae40:	1f 91       	pop	r17
    ae42:	0f 91       	pop	r16
    ae44:	ff 90       	pop	r15
    ae46:	ef 90       	pop	r14
    ae48:	cf 90       	pop	r12
    ae4a:	af 90       	pop	r10
    ae4c:	08 95       	ret

0000ae4e <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    ae4e:	2f 92       	push	r2
    ae50:	3f 92       	push	r3
    ae52:	4f 92       	push	r4
    ae54:	5f 92       	push	r5
    ae56:	6f 92       	push	r6
    ae58:	7f 92       	push	r7
    ae5a:	8f 92       	push	r8
    ae5c:	9f 92       	push	r9
    ae5e:	af 92       	push	r10
    ae60:	bf 92       	push	r11
    ae62:	cf 92       	push	r12
    ae64:	df 92       	push	r13
    ae66:	ef 92       	push	r14
    ae68:	ff 92       	push	r15
    ae6a:	0f 93       	push	r16
    ae6c:	1f 93       	push	r17
    ae6e:	cf 93       	push	r28
    ae70:	df 93       	push	r29
    ae72:	00 d0       	rcall	.+0      	; 0xae74 <LBLineIntersect+0x26>
    ae74:	00 d0       	rcall	.+0      	; 0xae76 <LBLineIntersect+0x28>
    ae76:	cd b7       	in	r28, 0x3d	; 61
    ae78:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    ae7a:	f1 2c       	mov	r15, r1
    ae7c:	8a 2c       	mov	r8, r10
    ae7e:	91 2c       	mov	r9, r1
    ae80:	8e 18       	sub	r8, r14
    ae82:	9f 08       	sbc	r9, r15
    ae84:	a8 2e       	mov	r10, r24
    ae86:	b1 2c       	mov	r11, r1
    ae88:	24 2e       	mov	r2, r20
    ae8a:	31 2c       	mov	r3, r1
    ae8c:	2a 18       	sub	r2, r10
    ae8e:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    ae90:	10 e0       	ldi	r17, 0x00	; 0
    ae92:	d1 2c       	mov	r13, r1
    ae94:	c0 1a       	sub	r12, r16
    ae96:	d1 0a       	sbc	r13, r17
    ae98:	46 2f       	mov	r20, r22
    ae9a:	50 e0       	ldi	r21, 0x00	; 0
    ae9c:	5c 83       	std	Y+4, r21	; 0x04
    ae9e:	4b 83       	std	Y+3, r20	; 0x03
    aea0:	82 2f       	mov	r24, r18
    aea2:	90 e0       	ldi	r25, 0x00	; 0
    aea4:	9a 83       	std	Y+2, r25	; 0x02
    aea6:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    aea8:	82 9c       	mul	r8, r2
    aeaa:	90 01       	movw	r18, r0
    aeac:	83 9c       	mul	r8, r3
    aeae:	30 0d       	add	r19, r0
    aeb0:	92 9c       	mul	r9, r2
    aeb2:	30 0d       	add	r19, r0
    aeb4:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    aeb6:	ca 01       	movw	r24, r20
    aeb8:	e9 81       	ldd	r30, Y+1	; 0x01
    aeba:	fa 81       	ldd	r31, Y+2	; 0x02
    aebc:	8e 1b       	sub	r24, r30
    aebe:	9f 0b       	sbc	r25, r31
    aec0:	c8 9e       	mul	r12, r24
    aec2:	b0 01       	movw	r22, r0
    aec4:	c9 9e       	mul	r12, r25
    aec6:	70 0d       	add	r23, r0
    aec8:	d8 9e       	mul	r13, r24
    aeca:	70 0d       	add	r23, r0
    aecc:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    aece:	62 0f       	add	r22, r18
    aed0:	73 1f       	adc	r23, r19
    aed2:	88 27       	eor	r24, r24
    aed4:	77 fd       	sbrc	r23, 7
    aed6:	80 95       	com	r24
    aed8:	98 2f       	mov	r25, r24
    aeda:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    aede:	2b 01       	movw	r4, r22
    aee0:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    aee2:	20 e0       	ldi	r18, 0x00	; 0
    aee4:	30 e0       	ldi	r19, 0x00	; 0
    aee6:	a9 01       	movw	r20, r18
    aee8:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    aeec:	88 23       	and	r24, r24
    aeee:	09 f4       	brne	.+2      	; 0xaef2 <LBLineIntersect+0xa4>
    aef0:	6c c0       	rjmp	.+216    	; 0xafca <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    aef2:	4b 81       	ldd	r20, Y+3	; 0x03
    aef4:	5c 81       	ldd	r21, Y+4	; 0x04
    aef6:	4e 19       	sub	r20, r14
    aef8:	5f 09       	sbc	r21, r15
    aefa:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    aefc:	0a 19       	sub	r16, r10
    aefe:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    af00:	c4 9e       	mul	r12, r20
    af02:	c0 01       	movw	r24, r0
    af04:	c5 9e       	mul	r12, r21
    af06:	90 0d       	add	r25, r0
    af08:	d4 9e       	mul	r13, r20
    af0a:	90 0d       	add	r25, r0
    af0c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    af0e:	80 9e       	mul	r8, r16
    af10:	b0 01       	movw	r22, r0
    af12:	81 9e       	mul	r8, r17
    af14:	70 0d       	add	r23, r0
    af16:	90 9e       	mul	r9, r16
    af18:	70 0d       	add	r23, r0
    af1a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    af1c:	68 0f       	add	r22, r24
    af1e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    af20:	88 27       	eor	r24, r24
    af22:	77 fd       	sbrc	r23, 7
    af24:	80 95       	com	r24
    af26:	98 2f       	mov	r25, r24
    af28:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    af2c:	a3 01       	movw	r20, r6
    af2e:	92 01       	movw	r18, r4
    af30:	0e 94 31 76 	call	0xec62	; 0xec62 <__divsf3>
    af34:	4b 01       	movw	r8, r22
    af36:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    af38:	20 e0       	ldi	r18, 0x00	; 0
    af3a:	30 e0       	ldi	r19, 0x00	; 0
    af3c:	a9 01       	movw	r20, r18
    af3e:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    af42:	87 fd       	sbrc	r24, 7
    af44:	42 c0       	rjmp	.+132    	; 0xafca <LBLineIntersect+0x17c>
    af46:	20 e0       	ldi	r18, 0x00	; 0
    af48:	30 e0       	ldi	r19, 0x00	; 0
    af4a:	40 e8       	ldi	r20, 0x80	; 128
    af4c:	5f e3       	ldi	r21, 0x3F	; 63
    af4e:	c5 01       	movw	r24, r10
    af50:	b4 01       	movw	r22, r8
    af52:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    af56:	18 16       	cp	r1, r24
    af58:	c4 f1       	brlt	.+112    	; 0xafca <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    af5a:	2e 9c       	mul	r2, r14
    af5c:	b0 01       	movw	r22, r0
    af5e:	2f 9c       	mul	r2, r15
    af60:	70 0d       	add	r23, r0
    af62:	3e 9c       	mul	r3, r14
    af64:	70 0d       	add	r23, r0
    af66:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    af68:	29 81       	ldd	r18, Y+1	; 0x01
    af6a:	3a 81       	ldd	r19, Y+2	; 0x02
    af6c:	8b 81       	ldd	r24, Y+3	; 0x03
    af6e:	9c 81       	ldd	r25, Y+4	; 0x04
    af70:	28 1b       	sub	r18, r24
    af72:	39 0b       	sbc	r19, r25
    af74:	20 9f       	mul	r18, r16
    af76:	c0 01       	movw	r24, r0
    af78:	21 9f       	mul	r18, r17
    af7a:	90 0d       	add	r25, r0
    af7c:	30 9f       	mul	r19, r16
    af7e:	90 0d       	add	r25, r0
    af80:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    af82:	68 0f       	add	r22, r24
    af84:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    af86:	88 27       	eor	r24, r24
    af88:	77 fd       	sbrc	r23, 7
    af8a:	80 95       	com	r24
    af8c:	98 2f       	mov	r25, r24
    af8e:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    af92:	a3 01       	movw	r20, r6
    af94:	92 01       	movw	r18, r4
    af96:	0e 94 31 76 	call	0xec62	; 0xec62 <__divsf3>
    af9a:	6b 01       	movw	r12, r22
    af9c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    af9e:	20 e0       	ldi	r18, 0x00	; 0
    afa0:	30 e0       	ldi	r19, 0x00	; 0
    afa2:	a9 01       	movw	r20, r18
    afa4:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    afa8:	87 fd       	sbrc	r24, 7
    afaa:	0f c0       	rjmp	.+30     	; 0xafca <LBLineIntersect+0x17c>
    afac:	11 e0       	ldi	r17, 0x01	; 1
    afae:	20 e0       	ldi	r18, 0x00	; 0
    afb0:	30 e0       	ldi	r19, 0x00	; 0
    afb2:	40 e8       	ldi	r20, 0x80	; 128
    afb4:	5f e3       	ldi	r21, 0x3F	; 63
    afb6:	c7 01       	movw	r24, r14
    afb8:	b6 01       	movw	r22, r12
    afba:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    afbe:	18 16       	cp	r1, r24
    afc0:	0c f0       	brlt	.+2      	; 0xafc4 <LBLineIntersect+0x176>
    afc2:	10 e0       	ldi	r17, 0x00	; 0
    afc4:	81 e0       	ldi	r24, 0x01	; 1
    afc6:	81 27       	eor	r24, r17
    afc8:	01 c0       	rjmp	.+2      	; 0xafcc <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    afca:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    afcc:	0f 90       	pop	r0
    afce:	0f 90       	pop	r0
    afd0:	0f 90       	pop	r0
    afd2:	0f 90       	pop	r0
    afd4:	df 91       	pop	r29
    afd6:	cf 91       	pop	r28
    afd8:	1f 91       	pop	r17
    afda:	0f 91       	pop	r16
    afdc:	ff 90       	pop	r15
    afde:	ef 90       	pop	r14
    afe0:	df 90       	pop	r13
    afe2:	cf 90       	pop	r12
    afe4:	bf 90       	pop	r11
    afe6:	af 90       	pop	r10
    afe8:	9f 90       	pop	r9
    afea:	8f 90       	pop	r8
    afec:	7f 90       	pop	r7
    afee:	6f 90       	pop	r6
    aff0:	5f 90       	pop	r5
    aff2:	4f 90       	pop	r4
    aff4:	3f 90       	pop	r3
    aff6:	2f 90       	pop	r2
    aff8:	08 95       	ret

0000affa <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    affa:	0f 93       	push	r16
    affc:	1f 93       	push	r17
    affe:	cf 93       	push	r28
    b000:	df 93       	push	r29
    b002:	8c 01       	movw	r16, r24
    b004:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    b006:	80 91 3a 0b 	lds	r24, 0x0B3A
    b00a:	90 91 3b 0b 	lds	r25, 0x0B3B
    b00e:	89 2b       	or	r24, r25
    b010:	31 f4       	brne	.+12     	; 0xb01e <LBRandom+0x24>
    b012:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <GetRandomSeed>
    b016:	90 93 3b 0b 	sts	0x0B3B, r25
    b01a:	80 93 3a 0b 	sts	0x0B3A, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    b01e:	90 91 39 0b 	lds	r25, 0x0B39
    b022:	20 91 3a 0b 	lds	r18, 0x0B3A
    b026:	30 91 3b 0b 	lds	r19, 0x0B3B
    b02a:	09 2e       	mov	r0, r25
    b02c:	02 c0       	rjmp	.+4      	; 0xb032 <LBRandom+0x38>
    b02e:	36 95       	lsr	r19
    b030:	27 95       	ror	r18
    b032:	0a 94       	dec	r0
    b034:	e2 f7       	brpl	.-8      	; 0xb02e <LBRandom+0x34>
	unsigned int delta = to - from;
    b036:	be 01       	movw	r22, r28
    b038:	60 1b       	sub	r22, r16
    b03a:	71 0b       	sbc	r23, r17

	shift_count++;
    b03c:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    b03e:	90 31       	cpi	r25, 0x10	; 16
    b040:	18 f4       	brcc	.+6      	; 0xb048 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    b042:	90 93 39 0b 	sts	0x0B39, r25
    b046:	02 c0       	rjmp	.+4      	; 0xb04c <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    b048:	10 92 39 0b 	sts	0x0B39, r1

	return from + ((delta + shifted) % delta);
    b04c:	cb 01       	movw	r24, r22
    b04e:	82 0f       	add	r24, r18
    b050:	93 1f       	adc	r25, r19
    b052:	0e 94 a0 75 	call	0xeb40	; 0xeb40 <__udivmodhi4>
}
    b056:	80 0f       	add	r24, r16
    b058:	91 1f       	adc	r25, r17
    b05a:	df 91       	pop	r29
    b05c:	cf 91       	pop	r28
    b05e:	1f 91       	pop	r17
    b060:	0f 91       	pop	r16
    b062:	08 95       	ret

0000b064 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    b064:	cf 93       	push	r28
    b066:	df 93       	push	r29
    b068:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    b06a:	c0 e0       	ldi	r28, 0x00	; 0
    b06c:	cd 17       	cp	r28, r29
    b06e:	31 f0       	breq	.+12     	; 0xb07c <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    b070:	8f ef       	ldi	r24, 0xFF	; 255
    b072:	9f ef       	ldi	r25, 0xFF	; 255
    b074:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    b078:	cf 5f       	subi	r28, 0xFF	; 255
    b07a:	f8 cf       	rjmp	.-16     	; 0xb06c <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    b07c:	df 91       	pop	r29
    b07e:	cf 91       	pop	r28
    b080:	08 95       	ret

0000b082 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    b082:	2b e8       	ldi	r18, 0x8B	; 139
    b084:	30 e0       	ldi	r19, 0x00	; 0
    b086:	fc 01       	movw	r30, r24
    b088:	21 93       	st	Z+, r18
    b08a:	31 93       	st	Z+, r19
    b08c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    b08e:	4e e1       	ldi	r20, 0x1E	; 30
    b090:	50 e0       	ldi	r21, 0x00	; 0
    b092:	6b e2       	ldi	r22, 0x2B	; 43
    b094:	79 e0       	ldi	r23, 0x09	; 9
    b096:	0c 94 e3 77 	jmp	0xefc6	; 0xefc6 <memcpy_P>

0000b09a <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    b09a:	2a e8       	ldi	r18, 0x8A	; 138
    b09c:	30 e0       	ldi	r19, 0x00	; 0
    b09e:	fc 01       	movw	r30, r24
    b0a0:	21 93       	st	Z+, r18
    b0a2:	31 93       	st	Z+, r19
    b0a4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    b0a6:	4e e1       	ldi	r20, 0x1E	; 30
    b0a8:	50 e0       	ldi	r21, 0x00	; 0
    b0aa:	69 e4       	ldi	r22, 0x49	; 73
    b0ac:	79 e0       	ldi	r23, 0x09	; 9
    b0ae:	0c 94 e3 77 	jmp	0xefc6	; 0xefc6 <memcpy_P>

0000b0b2 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    b0b2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    b0b4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b0b6:	16 86       	std	Z+14, r1	; 0x0e
    b0b8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    b0ba:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    b0bc:	73 e0       	ldi	r23, 0x03	; 3
    b0be:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b0c0:	65 e0       	ldi	r22, 0x05	; 5
    b0c2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    b0c4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    b0c6:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    b0c8:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b0ca:	4c ef       	ldi	r20, 0xFC	; 252
    b0cc:	55 e8       	ldi	r21, 0x85	; 133
    b0ce:	50 87       	std	Z+8, r21	; 0x08
    b0d0:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b0d2:	29 ef       	ldi	r18, 0xF9	; 249
    b0d4:	35 e8       	ldi	r19, 0x85	; 133
    b0d6:	32 87       	std	Z+10, r19	; 0x0a
    b0d8:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b0da:	86 ef       	ldi	r24, 0xF6	; 246
    b0dc:	95 e8       	ldi	r25, 0x85	; 133
    b0de:	94 87       	std	Z+12, r25	; 0x0c
    b0e0:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b0e2:	14 8e       	std	Z+28, r1	; 0x1c
    b0e4:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    b0e6:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    b0e8:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b0ea:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    b0ec:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    b0ee:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    b0f0:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b0f2:	56 8b       	std	Z+22, r21	; 0x16
    b0f4:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b0f6:	30 8f       	std	Z+24, r19	; 0x18
    b0f8:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b0fa:	92 8f       	std	Z+26, r25	; 0x1a
    b0fc:	81 8f       	std	Z+25, r24	; 0x19
    b0fe:	08 95       	ret

0000b100 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    b100:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    b102:	15 86       	std	Z+13, r1	; 0x0d
    b104:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    b106:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    b108:	83 e0       	ldi	r24, 0x03	; 3
    b10a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    b10c:	8e e1       	ldi	r24, 0x1E	; 30
    b10e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    b110:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    b112:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    b114:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    b116:	82 ed       	ldi	r24, 0xD2	; 210
    b118:	95 e8       	ldi	r25, 0x85	; 133
    b11a:	97 83       	std	Z+7, r25	; 0x07
    b11c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    b11e:	8f ec       	ldi	r24, 0xCF	; 207
    b120:	95 e8       	ldi	r25, 0x85	; 133
    b122:	91 87       	std	Z+9, r25	; 0x09
    b124:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    b126:	8c ec       	ldi	r24, 0xCC	; 204
    b128:	95 e8       	ldi	r25, 0x85	; 133
    b12a:	93 87       	std	Z+11, r25	; 0x0b
    b12c:	82 87       	std	Z+10, r24	; 0x0a
    b12e:	08 95       	ret

0000b130 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    b130:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    b132:	15 86       	std	Z+13, r1	; 0x0d
    b134:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    b136:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    b138:	82 e0       	ldi	r24, 0x02	; 2
    b13a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    b13c:	8c e3       	ldi	r24, 0x3C	; 60
    b13e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    b140:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    b142:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    b144:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    b146:	80 e6       	ldi	r24, 0x60	; 96
    b148:	93 e8       	ldi	r25, 0x83	; 131
    b14a:	97 83       	std	Z+7, r25	; 0x07
    b14c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    b14e:	86 e9       	ldi	r24, 0x96	; 150
    b150:	94 e8       	ldi	r25, 0x84	; 132
    b152:	91 87       	std	Z+9, r25	; 0x09
    b154:	80 87       	std	Z+8, r24	; 0x08
    b156:	08 95       	ret

0000b158 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    b158:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    b15a:	88 e7       	ldi	r24, 0x78	; 120
    b15c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    b15e:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    b160:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    b162:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    b164:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    b166:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    b168:	84 e0       	ldi	r24, 0x04	; 4
    b16a:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    b16c:	66 23       	and	r22, r22
    b16e:	11 f0       	breq	.+4      	; 0xb174 <init_shot_state+0x1c>
    b170:	85 e0       	ldi	r24, 0x05	; 5
    b172:	01 c0       	rjmp	.+2      	; 0xb176 <init_shot_state+0x1e>
    b174:	81 e0       	ldi	r24, 0x01	; 1
    b176:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    b178:	80 e0       	ldi	r24, 0x00	; 0
    b17a:	90 e0       	ldi	r25, 0x00	; 0
    b17c:	a0 e7       	ldi	r26, 0x70	; 112
    b17e:	b3 e4       	ldi	r27, 0x43	; 67
    b180:	83 83       	std	Z+3, r24	; 0x03
    b182:	94 83       	std	Z+4, r25	; 0x04
    b184:	a5 83       	std	Z+5, r26	; 0x05
    b186:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    b188:	17 82       	std	Z+7, r1	; 0x07
    b18a:	10 86       	std	Z+8, r1	; 0x08
    b18c:	11 86       	std	Z+9, r1	; 0x09
    b18e:	12 86       	std	Z+10, r1	; 0x0a
    b190:	08 95       	ret

0000b192 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    b192:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    b194:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    b196:	82 e0       	ldi	r24, 0x02	; 2
    b198:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b19a:	85 e0       	ldi	r24, 0x05	; 5
    b19c:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    b19e:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    b1a0:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    b1a2:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    b1a4:	61 11       	cpse	r22, r1
    b1a6:	03 c0       	rjmp	.+6      	; 0xb1ae <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    b1a8:	8a e6       	ldi	r24, 0x6A	; 106
    b1aa:	9c e4       	ldi	r25, 0x4C	; 76
    b1ac:	13 c0       	rjmp	.+38     	; 0xb1d4 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    b1ae:	61 30       	cpi	r22, 0x01	; 1
    b1b0:	79 f4       	brne	.+30     	; 0xb1d0 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    b1b2:	87 e6       	ldi	r24, 0x67	; 103
    b1b4:	9c e4       	ldi	r25, 0x4C	; 76
    b1b6:	97 8b       	std	Z+23, r25	; 0x17
    b1b8:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    b1ba:	84 e6       	ldi	r24, 0x64	; 100
    b1bc:	9c e4       	ldi	r25, 0x4C	; 76
    b1be:	91 8f       	std	Z+25, r25	; 0x19
    b1c0:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    b1c2:	81 e6       	ldi	r24, 0x61	; 97
    b1c4:	9c e4       	ldi	r25, 0x4C	; 76
    b1c6:	93 a3       	std	Z+35, r25	; 0x23
    b1c8:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    b1ca:	8e e5       	ldi	r24, 0x5E	; 94
    b1cc:	9c e4       	ldi	r25, 0x4C	; 76
    b1ce:	08 c0       	rjmp	.+16     	; 0xb1e0 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    b1d0:	82 e5       	ldi	r24, 0x52	; 82
    b1d2:	9c e4       	ldi	r25, 0x4C	; 76
    b1d4:	97 8b       	std	Z+23, r25	; 0x17
    b1d6:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    b1d8:	91 8f       	std	Z+25, r25	; 0x19
    b1da:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    b1dc:	93 a3       	std	Z+35, r25	; 0x23
    b1de:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    b1e0:	95 a3       	std	Z+37, r25	; 0x25
    b1e2:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    b1e4:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    b1e6:	82 e0       	ldi	r24, 0x02	; 2
    b1e8:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b1ea:	85 e0       	ldi	r24, 0x05	; 5
    b1ec:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    b1ee:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    b1f0:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    b1f2:	11 a2       	std	Z+33, r1	; 0x21
    b1f4:	08 95       	ret

0000b1f6 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    b1f6:	0f 93       	push	r16
    b1f8:	1f 93       	push	r17
    b1fa:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    b1fc:	85 e0       	ldi	r24, 0x05	; 5
    b1fe:	83 87       	std	Z+11, r24	; 0x0b
	t->flags = 0;
    b200:	14 86       	std	Z+12, r1	; 0x0c
	t->shared.direction = D_LEFT;
    b202:	83 e0       	ldi	r24, 0x03	; 3
    b204:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    b206:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    b208:	8a e5       	ldi	r24, 0x5A	; 90
    b20a:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    b20c:	43 83       	std	Z+3, r20	; 0x03
    b20e:	54 83       	std	Z+4, r21	; 0x04
    b210:	65 83       	std	Z+5, r22	; 0x05
    b212:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    b214:	07 83       	std	Z+7, r16	; 0x07
    b216:	10 87       	std	Z+8, r17	; 0x08
    b218:	21 87       	std	Z+9, r18	; 0x09
    b21a:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    b21c:	8a ef       	ldi	r24, 0xFA	; 250
    b21e:	86 87       	std	Z+14, r24	; 0x0e
		t->shot[i].shared.direction = D_DOWN;
    b220:	82 e0       	ldi	r24, 0x02	; 2
    b222:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.recoiled = 0;
    b224:	17 86       	std	Z+15, r1	; 0x0f
		t->shot[i].shared.x = OFF_SCREEN;
    b226:	40 e0       	ldi	r20, 0x00	; 0
    b228:	50 e0       	ldi	r21, 0x00	; 0
    b22a:	60 e7       	ldi	r22, 0x70	; 112
    b22c:	73 e4       	ldi	r23, 0x43	; 67
    b22e:	40 8b       	std	Z+16, r20	; 0x10
    b230:	51 8b       	std	Z+17, r21	; 0x11
    b232:	62 8b       	std	Z+18, r22	; 0x12
    b234:	73 8b       	std	Z+19, r23	; 0x13
		t->shot[i].shared.y = 0;
    b236:	14 8a       	std	Z+20, r1	; 0x14
    b238:	15 8a       	std	Z+21, r1	; 0x15
    b23a:	16 8a       	std	Z+22, r1	; 0x16
    b23c:	17 8a       	std	Z+23, r1	; 0x17
		t->shot[i].active = 0;
    b23e:	13 8e       	std	Z+27, r1	; 0x1b
		t->shot[i].distance = 100;
    b240:	94 e6       	ldi	r25, 0x64	; 100
    b242:	94 8f       	std	Z+28, r25	; 0x1c
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    b244:	80 8f       	std	Z+24, r24	; 0x18
		t->shot[i].rebounds = SHOT_REBOUNDS;
    b246:	84 e0       	ldi	r24, 0x04	; 4
    b248:	82 8f       	std	Z+26, r24	; 0x1a
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    b24a:	81 e0       	ldi	r24, 0x01	; 1
    b24c:	81 8f       	std	Z+25, r24	; 0x19
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    b24e:	62 e0       	ldi	r22, 0x02	; 2
    b250:	cf 01       	movw	r24, r30
    b252:	0d 96       	adiw	r24, 0x0d	; 13
	}
}
    b254:	1f 91       	pop	r17
    b256:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    b258:	0c 94 c9 58 	jmp	0xb192	; 0xb192 <set_shot_animations>

0000b25c <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    b25c:	0f 93       	push	r16
    b25e:	1f 93       	push	r17
    b260:	cf 93       	push	r28
    b262:	df 93       	push	r29
    b264:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    b266:	8a e5       	ldi	r24, 0x5A	; 90
    b268:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    b26a:	88 e7       	ldi	r24, 0x78	; 120
    b26c:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    b26e:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    b270:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    b272:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    b274:	18 82       	st	Y, r1
	p->shared.speed = 0;
    b276:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    b278:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    b27a:	82 e3       	ldi	r24, 0x32	; 50
    b27c:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    b27e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    b280:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    b282:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    b284:	fe 01       	movw	r30, r28
    b286:	ec 5a       	subi	r30, 0xAC	; 172
    b288:	ff 4f       	sbci	r31, 0xFF	; 255
    b28a:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    b28c:	31 96       	adiw	r30, 0x01	; 1
    b28e:	91 e0       	ldi	r25, 0x01	; 1
    b290:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b292:	31 96       	adiw	r30, 0x01	; 1
    b294:	85 e0       	ldi	r24, 0x05	; 5
    b296:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    b298:	31 96       	adiw	r30, 0x01	; 1
    b29a:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    b29c:	31 96       	adiw	r30, 0x01	; 1
    b29e:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    b2a0:	31 96       	adiw	r30, 0x01	; 1
    b2a2:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    b2a4:	31 96       	adiw	r30, 0x01	; 1
    b2a6:	71 83       	std	Z+1, r23	; 0x01
    b2a8:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    b2aa:	36 96       	adiw	r30, 0x06	; 6
    b2ac:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    b2ae:	31 96       	adiw	r30, 0x01	; 1
    b2b0:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b2b2:	31 96       	adiw	r30, 0x01	; 1
    b2b4:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    b2b6:	31 96       	adiw	r30, 0x01	; 1
    b2b8:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    b2ba:	31 96       	adiw	r30, 0x01	; 1
    b2bc:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    b2be:	31 96       	adiw	r30, 0x01	; 1
    b2c0:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    b2c2:	31 96       	adiw	r30, 0x01	; 1
    b2c4:	51 83       	std	Z+1, r21	; 0x01
    b2c6:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    b2c8:	36 96       	adiw	r30, 0x06	; 6
    b2ca:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    b2cc:	31 96       	adiw	r30, 0x01	; 1
    b2ce:	93 e0       	ldi	r25, 0x03	; 3
    b2d0:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    b2d2:	31 96       	adiw	r30, 0x01	; 1
    b2d4:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    b2d6:	31 96       	adiw	r30, 0x01	; 1
    b2d8:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    b2da:	31 96       	adiw	r30, 0x01	; 1
    b2dc:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    b2de:	31 96       	adiw	r30, 0x01	; 1
    b2e0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    b2e2:	31 96       	adiw	r30, 0x01	; 1
    b2e4:	89 e7       	ldi	r24, 0x79	; 121
    b2e6:	9c e4       	ldi	r25, 0x4C	; 76
    b2e8:	91 83       	std	Z+1, r25	; 0x01
    b2ea:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    b2ec:	32 96       	adiw	r30, 0x02	; 2
    b2ee:	83 e7       	ldi	r24, 0x73	; 115
    b2f0:	9c e4       	ldi	r25, 0x4C	; 76
    b2f2:	91 83       	std	Z+1, r25	; 0x01
    b2f4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    b2f6:	32 96       	adiw	r30, 0x02	; 2
    b2f8:	8d e6       	ldi	r24, 0x6D	; 109
    b2fa:	9c e4       	ldi	r25, 0x4C	; 76
    b2fc:	91 83       	std	Z+1, r25	; 0x01
    b2fe:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    b300:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    b302:	8e 01       	movw	r16, r28
    b304:	04 5d       	subi	r16, 0xD4	; 212
    b306:	1f 4f       	sbci	r17, 0xFF	; 255
    b308:	60 e0       	ldi	r22, 0x00	; 0
    b30a:	c8 01       	movw	r24, r16
    b30c:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    b310:	60 e0       	ldi	r22, 0x00	; 0
    b312:	c8 01       	movw	r24, r16
    b314:	0e 94 c9 58 	call	0xb192	; 0xb192 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    b318:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    b31a:	1d 8e       	std	Y+29, r1	; 0x1d
    b31c:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    b31e:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    b320:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    b322:	1c a2       	std	Y+36, r1	; 0x24
    b324:	1d a2       	std	Y+37, r1	; 0x25
    b326:	1e a2       	std	Y+38, r1	; 0x26
    b328:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    b32a:	18 a6       	std	Y+40, r1	; 0x28
    b32c:	19 a6       	std	Y+41, r1	; 0x29
    b32e:	1a a6       	std	Y+42, r1	; 0x2a
    b330:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    b332:	1f 8e       	std	Y+31, r1	; 0x1f
    b334:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    b336:	19 a2       	std	Y+33, r1	; 0x21
    b338:	18 a2       	std	Y+32, r1	; 0x20
}
    b33a:	df 91       	pop	r29
    b33c:	cf 91       	pop	r28
    b33e:	1f 91       	pop	r17
    b340:	0f 91       	pop	r16
    b342:	08 95       	ret

0000b344 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    b344:	fc 01       	movw	r30, r24
    b346:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    b348:	60 e0       	ldi	r22, 0x00	; 0
    b34a:	8c 96       	adiw	r24, 0x2c	; 44
    b34c:	0c 94 ac 58 	jmp	0xb158	; 0xb158 <init_shot_state>

0000b350 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    b350:	ec e0       	ldi	r30, 0x0C	; 12
    b352:	fc e0       	ldi	r31, 0x0C	; 12
    b354:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    b356:	14 86       	std	Z+12, r1	; 0x0c
	game.paused = 0;
    b358:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    b35a:	13 86       	std	Z+11, r1	; 0x0b
    b35c:	12 86       	std	Z+10, r1	; 0x0a
	game.boss_fight_status = 0;
    b35e:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    b360:	17 82       	std	Z+7, r1	; 0x07
    b362:	16 82       	std	Z+6, r1	; 0x06
	game.boss_fight_joypad = 0;
    b364:	11 86       	std	Z+9, r1	; 0x09
    b366:	10 86       	std	Z+8, r1	; 0x08
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    b368:	82 e0       	ldi	r24, 0x02	; 2
    b36a:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    b36c:	14 82       	std	Z+4, r1	; 0x04
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    b36e:	4b e8       	ldi	r20, 0x8B	; 139
    b370:	5c e4       	ldi	r21, 0x4C	; 76
    b372:	61 e9       	ldi	r22, 0x91	; 145
    b374:	7c e4       	ldi	r23, 0x4C	; 76
    b376:	86 e3       	ldi	r24, 0x36	; 54
    b378:	9c e0       	ldi	r25, 0x0C	; 12
    b37a:	0e 94 2e 59 	call	0xb25c	; 0xb25c <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    b37e:	4f e7       	ldi	r20, 0x7F	; 127
    b380:	5c e4       	ldi	r21, 0x4C	; 76
    b382:	65 e8       	ldi	r22, 0x85	; 133
    b384:	7c e4       	ldi	r23, 0x4C	; 76
    b386:	84 ea       	ldi	r24, 0xA4	; 164
    b388:	9f e0       	ldi	r25, 0x0F	; 15
    b38a:	0c 94 2e 59 	jmp	0xb25c	; 0xb25c <init_player>

0000b38e <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    b38e:	cf 93       	push	r28
    b390:	df 93       	push	r29
    b392:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    b394:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    b396:	6a 89       	ldd	r22, Y+18	; 0x12
    b398:	70 e0       	ldi	r23, 0x00	; 0
    b39a:	80 e0       	ldi	r24, 0x00	; 0
    b39c:	90 e0       	ldi	r25, 0x00	; 0
    b39e:	0e 94 ca 76 	call	0xed94	; 0xed94 <__floatunsisf>
    b3a2:	6b 83       	std	Y+3, r22	; 0x03
    b3a4:	7c 83       	std	Y+4, r23	; 0x04
    b3a6:	8d 83       	std	Y+5, r24	; 0x05
    b3a8:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    b3aa:	6b 89       	ldd	r22, Y+19	; 0x13
    b3ac:	70 e0       	ldi	r23, 0x00	; 0
    b3ae:	80 e0       	ldi	r24, 0x00	; 0
    b3b0:	90 e0       	ldi	r25, 0x00	; 0
    b3b2:	0e 94 ca 76 	call	0xed94	; 0xed94 <__floatunsisf>
    b3b6:	6f 83       	std	Y+7, r22	; 0x07
    b3b8:	78 87       	std	Y+8, r23	; 0x08
    b3ba:	89 87       	std	Y+9, r24	; 0x09
    b3bc:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    b3be:	18 82       	st	Y, r1
	player->shared.speed = 0;
    b3c0:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    b3c2:	1a 82       	std	Y+2, r1	; 0x02
	
}
    b3c4:	df 91       	pop	r29
    b3c6:	cf 91       	pop	r28
    b3c8:	08 95       	ret

0000b3ca <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b3ca:	cf 93       	push	r28
    b3cc:	df 93       	push	r29
    b3ce:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b3d0:	bc 01       	movw	r22, r24
    b3d2:	88 81       	ld	r24, Y
    b3d4:	99 81       	ldd	r25, Y+1	; 0x01
    b3d6:	0e 94 d8 48 	call	0x91b0	; 0x91b0 <EepromReadBlock>
	if (status == 0x03)
    b3da:	83 30       	cpi	r24, 0x03	; 3
    b3dc:	29 f4       	brne	.+10     	; 0xb3e8 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b3de:	ce 01       	movw	r24, r28
	}
}
    b3e0:	df 91       	pop	r29
    b3e2:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b3e4:	0c 94 6b 48 	jmp	0x90d6	; 0x90d6 <EepromWriteBlock>
	}
}
    b3e8:	df 91       	pop	r29
    b3ea:	cf 91       	pop	r28
    b3ec:	08 95       	ret

0000b3ee <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b3ee:	61 e0       	ldi	r22, 0x01	; 1
    b3f0:	83 e0       	ldi	r24, 0x03	; 3
    b3f2:	0e 94 ef 55 	call	0xabde	; 0xabde <FadeOut>
	ClearVram();
    b3f6:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b3fa:	60 e0       	ldi	r22, 0x00	; 0
    b3fc:	83 e0       	ldi	r24, 0x03	; 3
    b3fe:	0c 94 e3 55 	jmp	0xabc6	; 0xabc6 <FadeIn>

0000b402 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    b402:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    b404:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    b406:	40 e0       	ldi	r20, 0x00	; 0
    b408:	6d e9       	ldi	r22, 0x9D	; 157
    b40a:	7c e4       	ldi	r23, 0x4C	; 76
    b40c:	8c 2f       	mov	r24, r28
    b40e:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
    b412:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    b414:	ca 30       	cpi	r28, 0x0A	; 10
    b416:	b9 f7       	brne	.-18     	; 0xb406 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    b418:	cf 91       	pop	r28
    b41a:	08 95       	ret

0000b41c <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    b41c:	cf 92       	push	r12
    b41e:	df 92       	push	r13
    b420:	ff 92       	push	r15
    b422:	0f 93       	push	r16
    b424:	1f 93       	push	r17
    b426:	cf 93       	push	r28
    b428:	df 93       	push	r29
    b42a:	cd b7       	in	r28, 0x3d	; 61
    b42c:	de b7       	in	r29, 0x3e	; 62
    b42e:	2a 97       	sbiw	r28, 0x0a	; 10
    b430:	0f b6       	in	r0, 0x3f	; 63
    b432:	f8 94       	cli
    b434:	de bf       	out	0x3e, r29	; 62
    b436:	0f be       	out	0x3f, r0	; 63
    b438:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    b43a:	90 91 45 0c 	lds	r25, 0x0C45
    b43e:	80 91 b3 0f 	lds	r24, 0x0FB3
    b442:	98 17       	cp	r25, r24
    b444:	28 f4       	brcc	.+10     	; 0xb450 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    b446:	e6 e3       	ldi	r30, 0x36	; 54
    b448:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    b44a:	a4 ea       	ldi	r26, 0xA4	; 164
    b44c:	bf e0       	ldi	r27, 0x0F	; 15
    b44e:	04 c0       	rjmp	.+8      	; 0xb458 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    b450:	e4 ea       	ldi	r30, 0xA4	; 164
    b452:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    b454:	a6 e3       	ldi	r26, 0x36	; 54
    b456:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    b458:	1b 96       	adiw	r26, 0x0b	; 11
    b45a:	8c 91       	ld	r24, X
    b45c:	1b 97       	sbiw	r26, 0x0b	; 11
    b45e:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    b460:	83 85       	ldd	r24, Z+11	; 0x0b
    b462:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    b464:	1f 96       	adiw	r26, 0x0f	; 15
    b466:	8c 91       	ld	r24, X
    b468:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    b46a:	97 85       	ldd	r25, Z+15	; 0x0f
    b46c:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    b46e:	21 e0       	ldi	r18, 0x01	; 1
    b470:	30 91 0f 0c 	lds	r19, 0x0C0F
    b474:	38 30       	cpi	r19, 0x08	; 8
    b476:	09 f0       	breq	.+2      	; 0xb47a <save_score+0x5e>
    b478:	20 e0       	ldi	r18, 0x00	; 0
    b47a:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    b47c:	f8 2e       	mov	r15, r24
    b47e:	f9 1a       	sub	r15, r25
    b480:	00 e0       	ldi	r16, 0x00	; 0
    b482:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    b484:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    b486:	81 11       	cpse	r24, r1
    b488:	08 c0       	rjmp	.+16     	; 0xb49a <save_score+0x7e>
    b48a:	f8 01       	movw	r30, r16
    b48c:	eb 53       	subi	r30, 0x3B	; 59
    b48e:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    b490:	94 81       	ldd	r25, Z+4	; 0x04
    b492:	25 81       	ldd	r18, Z+5	; 0x05
    b494:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    b496:	9f 15       	cp	r25, r15
    b498:	d0 f4       	brcc	.+52     	; 0xb4ce <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    b49a:	45 e0       	ldi	r20, 0x05	; 5
    b49c:	c8 01       	movw	r24, r16
    b49e:	89 53       	subi	r24, 0x39	; 57
    b4a0:	94 4f       	sbci	r25, 0xF4	; 244
    b4a2:	6c 01       	movw	r12, r24
    b4a4:	bc 01       	movw	r22, r24
    b4a6:	ce 01       	movw	r24, r28
    b4a8:	06 96       	adiw	r24, 0x06	; 6
    b4aa:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    b4ae:	45 e0       	ldi	r20, 0x05	; 5
    b4b0:	be 01       	movw	r22, r28
    b4b2:	6f 5f       	subi	r22, 0xFF	; 255
    b4b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b4b6:	c6 01       	movw	r24, r12
    b4b8:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    b4bc:	45 e0       	ldi	r20, 0x05	; 5
    b4be:	be 01       	movw	r22, r28
    b4c0:	6a 5f       	subi	r22, 0xFA	; 250
    b4c2:	7f 4f       	sbci	r23, 0xFF	; 255
    b4c4:	ce 01       	movw	r24, r28
    b4c6:	01 96       	adiw	r24, 0x01	; 1
    b4c8:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
				saved = 1;
    b4cc:	81 e0       	ldi	r24, 0x01	; 1
    b4ce:	0b 5f       	subi	r16, 0xFB	; 251
    b4d0:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    b4d2:	0e 31       	cpi	r16, 0x1E	; 30
    b4d4:	11 05       	cpc	r17, r1
    b4d6:	b9 f6       	brne	.-82     	; 0xb486 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b4d8:	85 ec       	ldi	r24, 0xC5	; 197
    b4da:	9b e0       	ldi	r25, 0x0B	; 11
    b4dc:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    b4e0:	2a 96       	adiw	r28, 0x0a	; 10
    b4e2:	0f b6       	in	r0, 0x3f	; 63
    b4e4:	f8 94       	cli
    b4e6:	de bf       	out	0x3e, r29	; 62
    b4e8:	0f be       	out	0x3f, r0	; 63
    b4ea:	cd bf       	out	0x3d, r28	; 61
    b4ec:	df 91       	pop	r29
    b4ee:	cf 91       	pop	r28
    b4f0:	1f 91       	pop	r17
    b4f2:	0f 91       	pop	r16
    b4f4:	ff 90       	pop	r15
    b4f6:	df 90       	pop	r13
    b4f8:	cf 90       	pop	r12
    b4fa:	08 95       	ret

0000b4fc <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    b4fc:	0f 93       	push	r16
    b4fe:	1f 93       	push	r17
    b500:	cf 93       	push	r28
    b502:	df 93       	push	r29
    b504:	8c 01       	movw	r16, r24
    b506:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    b508:	88 81       	ld	r24, Y
    b50a:	81 30       	cpi	r24, 0x01	; 1
    b50c:	69 f1       	breq	.+90     	; 0xb568 <position_shot+0x6c>
    b50e:	98 f0       	brcs	.+38     	; 0xb536 <position_shot+0x3a>
    b510:	82 30       	cpi	r24, 0x02	; 2
    b512:	f1 f1       	breq	.+124    	; 0xb590 <position_shot+0x94>
    b514:	83 30       	cpi	r24, 0x03	; 3
    b516:	09 f0       	breq	.+2      	; 0xb51a <position_shot+0x1e>
    b518:	59 c0       	rjmp	.+178    	; 0xb5cc <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    b51a:	f8 01       	movw	r30, r16
    b51c:	83 81       	ldd	r24, Z+3	; 0x03
    b51e:	94 81       	ldd	r25, Z+4	; 0x04
    b520:	a5 81       	ldd	r26, Z+5	; 0x05
    b522:	b6 81       	ldd	r27, Z+6	; 0x06
    b524:	8b 83       	std	Y+3, r24	; 0x03
    b526:	9c 83       	std	Y+4, r25	; 0x04
    b528:	ad 83       	std	Y+5, r26	; 0x05
    b52a:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    b52c:	20 e0       	ldi	r18, 0x00	; 0
    b52e:	30 e0       	ldi	r19, 0x00	; 0
    b530:	40 e8       	ldi	r20, 0x80	; 128
    b532:	50 e4       	ldi	r21, 0x40	; 64
    b534:	41 c0       	rjmp	.+130    	; 0xb5b8 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    b536:	20 e0       	ldi	r18, 0x00	; 0
    b538:	30 e0       	ldi	r19, 0x00	; 0
    b53a:	40 e8       	ldi	r20, 0x80	; 128
    b53c:	50 e4       	ldi	r21, 0x40	; 64
    b53e:	f8 01       	movw	r30, r16
    b540:	63 81       	ldd	r22, Z+3	; 0x03
    b542:	74 81       	ldd	r23, Z+4	; 0x04
    b544:	85 81       	ldd	r24, Z+5	; 0x05
    b546:	96 81       	ldd	r25, Z+6	; 0x06
    b548:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    b54c:	6b 83       	std	Y+3, r22	; 0x03
    b54e:	7c 83       	std	Y+4, r23	; 0x04
    b550:	8d 83       	std	Y+5, r24	; 0x05
    b552:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    b554:	f8 01       	movw	r30, r16
    b556:	87 81       	ldd	r24, Z+7	; 0x07
    b558:	90 85       	ldd	r25, Z+8	; 0x08
    b55a:	a1 85       	ldd	r26, Z+9	; 0x09
    b55c:	b2 85       	ldd	r27, Z+10	; 0x0a
    b55e:	8f 83       	std	Y+7, r24	; 0x07
    b560:	98 87       	std	Y+8, r25	; 0x08
    b562:	a9 87       	std	Y+9, r26	; 0x09
    b564:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    b566:	32 c0       	rjmp	.+100    	; 0xb5cc <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    b568:	20 e0       	ldi	r18, 0x00	; 0
    b56a:	30 e0       	ldi	r19, 0x00	; 0
    b56c:	40 e0       	ldi	r20, 0x00	; 0
    b56e:	51 e4       	ldi	r21, 0x41	; 65
    b570:	f8 01       	movw	r30, r16
    b572:	63 81       	ldd	r22, Z+3	; 0x03
    b574:	74 81       	ldd	r23, Z+4	; 0x04
    b576:	85 81       	ldd	r24, Z+5	; 0x05
    b578:	96 81       	ldd	r25, Z+6	; 0x06
    b57a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    b57e:	6b 83       	std	Y+3, r22	; 0x03
    b580:	7c 83       	std	Y+4, r23	; 0x04
    b582:	8d 83       	std	Y+5, r24	; 0x05
    b584:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    b586:	20 e0       	ldi	r18, 0x00	; 0
    b588:	30 e0       	ldi	r19, 0x00	; 0
    b58a:	40 e8       	ldi	r20, 0x80	; 128
    b58c:	50 e4       	ldi	r21, 0x40	; 64
    b58e:	13 c0       	rjmp	.+38     	; 0xb5b6 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    b590:	20 e0       	ldi	r18, 0x00	; 0
    b592:	30 e0       	ldi	r19, 0x00	; 0
    b594:	40 e8       	ldi	r20, 0x80	; 128
    b596:	50 e4       	ldi	r21, 0x40	; 64
    b598:	f8 01       	movw	r30, r16
    b59a:	63 81       	ldd	r22, Z+3	; 0x03
    b59c:	74 81       	ldd	r23, Z+4	; 0x04
    b59e:	85 81       	ldd	r24, Z+5	; 0x05
    b5a0:	96 81       	ldd	r25, Z+6	; 0x06
    b5a2:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    b5a6:	6b 83       	std	Y+3, r22	; 0x03
    b5a8:	7c 83       	std	Y+4, r23	; 0x04
    b5aa:	8d 83       	std	Y+5, r24	; 0x05
    b5ac:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    b5ae:	20 e0       	ldi	r18, 0x00	; 0
    b5b0:	30 e0       	ldi	r19, 0x00	; 0
    b5b2:	40 e0       	ldi	r20, 0x00	; 0
    b5b4:	51 e4       	ldi	r21, 0x41	; 65
    b5b6:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    b5b8:	67 81       	ldd	r22, Z+7	; 0x07
    b5ba:	70 85       	ldd	r23, Z+8	; 0x08
    b5bc:	81 85       	ldd	r24, Z+9	; 0x09
    b5be:	92 85       	ldd	r25, Z+10	; 0x0a
    b5c0:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    b5c4:	6f 83       	std	Y+7, r22	; 0x07
    b5c6:	78 87       	std	Y+8, r23	; 0x08
    b5c8:	89 87       	std	Y+9, r24	; 0x09
    b5ca:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    b5cc:	df 91       	pop	r29
    b5ce:	cf 91       	pop	r28
    b5d0:	1f 91       	pop	r17
    b5d2:	0f 91       	pop	r16
    b5d4:	08 95       	ret

0000b5d6 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    b5d6:	0f 93       	push	r16
    b5d8:	1f 93       	push	r17
    b5da:	cf 93       	push	r28
    b5dc:	df 93       	push	r29
    b5de:	8c 01       	movw	r16, r24
    b5e0:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    b5e2:	ac 01       	movw	r20, r24
    b5e4:	44 5f       	subi	r20, 0xF4	; 244
    b5e6:	5f 4f       	sbci	r21, 0xFF	; 255
    b5e8:	23 e0       	ldi	r18, 0x03	; 3
    b5ea:	6e e0       	ldi	r22, 0x0E	; 14
    b5ec:	84 e0       	ldi	r24, 0x04	; 4
    b5ee:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b5f2:	49 ee       	ldi	r20, 0xE9	; 233
    b5f4:	5a e0       	ldi	r21, 0x0A	; 10
    b5f6:	6e e0       	ldi	r22, 0x0E	; 14
    b5f8:	70 e0       	ldi	r23, 0x00	; 0
    b5fa:	88 e0       	ldi	r24, 0x08	; 8
    b5fc:	90 e0       	ldi	r25, 0x00	; 0
    b5fe:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b602:	ae 01       	movw	r20, r28
    b604:	44 5f       	subi	r20, 0xF4	; 244
    b606:	5f 4f       	sbci	r21, 0xFF	; 255
    b608:	23 e0       	ldi	r18, 0x03	; 3
    b60a:	6e e0       	ldi	r22, 0x0E	; 14
    b60c:	8d e0       	ldi	r24, 0x0D	; 13
    b60e:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b612:	46 ee       	ldi	r20, 0xE6	; 230
    b614:	5a e0       	ldi	r21, 0x0A	; 10
    b616:	6e e0       	ldi	r22, 0x0E	; 14
    b618:	70 e0       	ldi	r23, 0x00	; 0
    b61a:	81 e1       	ldi	r24, 0x11	; 17
    b61c:	90 e0       	ldi	r25, 0x00	; 0
    b61e:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b622:	21 e0       	ldi	r18, 0x01	; 1
    b624:	f8 01       	movw	r30, r16
    b626:	40 89       	ldd	r20, Z+16	; 0x10
    b628:	6e e0       	ldi	r22, 0x0E	; 14
    b62a:	70 e0       	ldi	r23, 0x00	; 0
    b62c:	86 e1       	ldi	r24, 0x16	; 22
    b62e:	90 e0       	ldi	r25, 0x00	; 0
    b630:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
	PrintChar(23, 14, '-');
    b634:	4d e2       	ldi	r20, 0x2D	; 45
    b636:	6e e0       	ldi	r22, 0x0E	; 14
    b638:	70 e0       	ldi	r23, 0x00	; 0
    b63a:	87 e1       	ldi	r24, 0x17	; 23
    b63c:	90 e0       	ldi	r25, 0x00	; 0
    b63e:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b642:	21 e0       	ldi	r18, 0x01	; 1
    b644:	48 89       	ldd	r20, Y+16	; 0x10
    b646:	6e e0       	ldi	r22, 0x0E	; 14
    b648:	70 e0       	ldi	r23, 0x00	; 0
    b64a:	8a e1       	ldi	r24, 0x1A	; 26
    b64c:	90 e0       	ldi	r25, 0x00	; 0
}
    b64e:	df 91       	pop	r29
    b650:	cf 91       	pop	r28
    b652:	1f 91       	pop	r17
    b654:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b656:	0c 94 36 55 	jmp	0xaa6c	; 0xaa6c <PrintByte>

0000b65a <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b65a:	0f 93       	push	r16
    b65c:	1f 93       	push	r17
    b65e:	cf 93       	push	r28
    b660:	df 93       	push	r29
    b662:	8c 01       	movw	r16, r24
    b664:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    b666:	4a ed       	ldi	r20, 0xDA	; 218
    b668:	5a e0       	ldi	r21, 0x0A	; 10
    b66a:	6c e0       	ldi	r22, 0x0C	; 12
    b66c:	70 e0       	ldi	r23, 0x00	; 0
    b66e:	89 e0       	ldi	r24, 0x09	; 9
    b670:	90 e0       	ldi	r25, 0x00	; 0
    b672:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b676:	a8 01       	movw	r20, r16
    b678:	44 5f       	subi	r20, 0xF4	; 244
    b67a:	5f 4f       	sbci	r21, 0xFF	; 255
    b67c:	23 e0       	ldi	r18, 0x03	; 3
    b67e:	6e e0       	ldi	r22, 0x0E	; 14
    b680:	84 e0       	ldi	r24, 0x04	; 4
    b682:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b686:	49 ee       	ldi	r20, 0xE9	; 233
    b688:	5a e0       	ldi	r21, 0x0A	; 10
    b68a:	6e e0       	ldi	r22, 0x0E	; 14
    b68c:	70 e0       	ldi	r23, 0x00	; 0
    b68e:	88 e0       	ldi	r24, 0x08	; 8
    b690:	90 e0       	ldi	r25, 0x00	; 0
    b692:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b696:	ae 01       	movw	r20, r28
    b698:	44 5f       	subi	r20, 0xF4	; 244
    b69a:	5f 4f       	sbci	r21, 0xFF	; 255
    b69c:	23 e0       	ldi	r18, 0x03	; 3
    b69e:	6e e0       	ldi	r22, 0x0E	; 14
    b6a0:	8d e0       	ldi	r24, 0x0D	; 13
    b6a2:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b6a6:	46 ee       	ldi	r20, 0xE6	; 230
    b6a8:	5a e0       	ldi	r21, 0x0A	; 10
    b6aa:	6e e0       	ldi	r22, 0x0E	; 14
    b6ac:	70 e0       	ldi	r23, 0x00	; 0
    b6ae:	81 e1       	ldi	r24, 0x11	; 17
    b6b0:	90 e0       	ldi	r25, 0x00	; 0
    b6b2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    PrintByte(22, 14, winner->score ,true);
    b6b6:	21 e0       	ldi	r18, 0x01	; 1
    b6b8:	f8 01       	movw	r30, r16
    b6ba:	47 85       	ldd	r20, Z+15	; 0x0f
    b6bc:	6e e0       	ldi	r22, 0x0E	; 14
    b6be:	70 e0       	ldi	r23, 0x00	; 0
    b6c0:	86 e1       	ldi	r24, 0x16	; 22
    b6c2:	90 e0       	ldi	r25, 0x00	; 0
    b6c4:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
    PrintChar(23, 14, '-');
    b6c8:	4d e2       	ldi	r20, 0x2D	; 45
    b6ca:	6e e0       	ldi	r22, 0x0E	; 14
    b6cc:	70 e0       	ldi	r23, 0x00	; 0
    b6ce:	87 e1       	ldi	r24, 0x17	; 23
    b6d0:	90 e0       	ldi	r25, 0x00	; 0
    b6d2:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b6d6:	21 e0       	ldi	r18, 0x01	; 1
    b6d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    b6da:	6e e0       	ldi	r22, 0x0E	; 14
    b6dc:	70 e0       	ldi	r23, 0x00	; 0
    b6de:	8a e1       	ldi	r24, 0x1A	; 26
    b6e0:	90 e0       	ldi	r25, 0x00	; 0
    b6e2:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    b6e6:	80 91 0f 0c 	lds	r24, 0x0C0F
    b6ea:	88 30       	cpi	r24, 0x08	; 8
    b6ec:	59 f4       	brne	.+22     	; 0xb704 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    b6ee:	4a e2       	ldi	r20, 0x2A	; 42
    b6f0:	6e e0       	ldi	r22, 0x0E	; 14
    b6f2:	70 e0       	ldi	r23, 0x00	; 0
    b6f4:	8c e1       	ldi	r24, 0x1C	; 28
    b6f6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    b6f8:	df 91       	pop	r29
    b6fa:	cf 91       	pop	r28
    b6fc:	1f 91       	pop	r17
    b6fe:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    b700:	0c 94 84 55 	jmp	0xab08	; 0xab08 <PrintChar>
	}
}
    b704:	df 91       	pop	r29
    b706:	cf 91       	pop	r28
    b708:	1f 91       	pop	r17
    b70a:	0f 91       	pop	r16
    b70c:	08 95       	ret

0000b70e <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    b70e:	fc 01       	movw	r30, r24
    b710:	20 81       	ld	r18, Z
    b712:	31 81       	ldd	r19, Z+1	; 0x01
    b714:	21 70       	andi	r18, 0x01	; 1
    b716:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    b718:	81 e0       	ldi	r24, 0x01	; 1
    b71a:	23 2b       	or	r18, r19
    b71c:	09 f4       	brne	.+2      	; 0xb720 <shoot_pressed+0x12>
    b71e:	80 e0       	ldi	r24, 0x00	; 0
}
    b720:	08 95       	ret

0000b722 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b722:	cf 93       	push	r28
    b724:	df 93       	push	r29
    b726:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b728:	ac 01       	movw	r20, r24
    b72a:	44 5f       	subi	r20, 0xF4	; 244
    b72c:	5f 4f       	sbci	r21, 0xFF	; 255
    b72e:	23 e0       	ldi	r18, 0x03	; 3
    b730:	60 e0       	ldi	r22, 0x00	; 0
    b732:	8a e0       	ldi	r24, 0x0A	; 10
    b734:	8c 0f       	add	r24, r28
    b736:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b73a:	d0 e0       	ldi	r29, 0x00	; 0
    b73c:	4e e2       	ldi	r20, 0x2E	; 46
    b73e:	5a e0       	ldi	r21, 0x0A	; 10
    b740:	60 e0       	ldi	r22, 0x00	; 0
    b742:	70 e0       	ldi	r23, 0x00	; 0
    b744:	ce 01       	movw	r24, r28
    b746:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(x, 1, (char*) strTotal);
    b74a:	47 e2       	ldi	r20, 0x27	; 39
    b74c:	5a e0       	ldi	r21, 0x0A	; 10
    b74e:	61 e0       	ldi	r22, 0x01	; 1
    b750:	70 e0       	ldi	r23, 0x00	; 0
    b752:	ce 01       	movw	r24, r28
	
}
    b754:	df 91       	pop	r29
    b756:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b758:	0c 94 69 55 	jmp	0xaad2	; 0xaad2 <Print>

0000b75c <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b75c:	0f 93       	push	r16
    b75e:	1f 93       	push	r17
    b760:	cf 93       	push	r28
    b762:	df 93       	push	r29
    b764:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b766:	c6 2f       	mov	r28, r22
    b768:	d0 e0       	ldi	r29, 0x00	; 0
    b76a:	28 96       	adiw	r28, 0x08	; 8
    b76c:	20 e0       	ldi	r18, 0x00	; 0
    b76e:	fc 01       	movw	r30, r24
    b770:	40 89       	ldd	r20, Z+16	; 0x10
    b772:	60 e0       	ldi	r22, 0x00	; 0
    b774:	70 e0       	ldi	r23, 0x00	; 0
    b776:	ce 01       	movw	r24, r28
    b778:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b77c:	20 e0       	ldi	r18, 0x00	; 0
    b77e:	f8 01       	movw	r30, r16
    b780:	47 85       	ldd	r20, Z+15	; 0x0f
    b782:	61 e0       	ldi	r22, 0x01	; 1
    b784:	70 e0       	ldi	r23, 0x00	; 0
    b786:	ce 01       	movw	r24, r28
}
    b788:	df 91       	pop	r29
    b78a:	cf 91       	pop	r28
    b78c:	1f 91       	pop	r17
    b78e:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b790:	0c 94 36 55 	jmp	0xaa6c	; 0xaa6c <PrintByte>

0000b794 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b794:	cf 93       	push	r28
    b796:	df 93       	push	r29
    b798:	ec 01       	movw	r28, r24
    b79a:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b79c:	9d 89       	ldd	r25, Y+21	; 0x15
    b79e:	9a 35       	cpi	r25, 0x5A	; 90
    b7a0:	99 f0       	breq	.+38     	; 0xb7c8 <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b7a2:	91 11       	cpse	r25, r1
    b7a4:	0c c0       	rjmp	.+24     	; 0xb7be <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b7a6:	4e 89       	ldd	r20, Y+22	; 0x16
    b7a8:	9f e0       	ldi	r25, 0x0F	; 15
    b7aa:	49 9f       	mul	r20, r25
    b7ac:	a0 01       	movw	r20, r0
    b7ae:	11 24       	eor	r1, r1
    b7b0:	4c 5b       	subi	r20, 0xBC	; 188
    b7b2:	55 4f       	sbci	r21, 0xF5	; 245
    b7b4:	62 e0       	ldi	r22, 0x02	; 2
    b7b6:	70 e0       	ldi	r23, 0x00	; 0
    b7b8:	90 e0       	ldi	r25, 0x00	; 0
    b7ba:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b7be:	8d 89       	ldd	r24, Y+21	; 0x15
    b7c0:	8f 5f       	subi	r24, 0xFF	; 255
    b7c2:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b7c4:	41 e0       	ldi	r20, 0x01	; 1
    b7c6:	0a c0       	rjmp	.+20     	; 0xb7dc <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b7c8:	44 23       	and	r20, r20
    b7ca:	41 f0       	breq	.+16     	; 0xb7dc <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b7cc:	45 e3       	ldi	r20, 0x35	; 53
    b7ce:	5a e0       	ldi	r21, 0x0A	; 10
    b7d0:	62 e0       	ldi	r22, 0x02	; 2
    b7d2:	70 e0       	ldi	r23, 0x00	; 0
    b7d4:	90 e0       	ldi	r25, 0x00	; 0
    b7d6:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    b7da:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b7dc:	84 2f       	mov	r24, r20
    b7de:	df 91       	pop	r29
    b7e0:	cf 91       	pop	r28
    b7e2:	08 95       	ret

0000b7e4 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b7e4:	ef 92       	push	r14
    b7e6:	ff 92       	push	r15
    b7e8:	0f 93       	push	r16
    b7ea:	1f 93       	push	r17
    b7ec:	cf 93       	push	r28
    b7ee:	df 93       	push	r29
    b7f0:	1f 92       	push	r1
    b7f2:	cd b7       	in	r28, 0x3d	; 61
    b7f4:	de b7       	in	r29, 0x3e	; 62
    b7f6:	7c 01       	movw	r14, r24
    b7f8:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b7fa:	fc 01       	movw	r30, r24
    b7fc:	67 81       	ldd	r22, Z+7	; 0x07
    b7fe:	70 85       	ldd	r23, Z+8	; 0x08
    b800:	81 85       	ldd	r24, Z+9	; 0x09
    b802:	92 85       	ldd	r25, Z+10	; 0x0a
    b804:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    b808:	46 2f       	mov	r20, r22
    b80a:	f7 01       	movw	r30, r14
    b80c:	63 81       	ldd	r22, Z+3	; 0x03
    b80e:	74 81       	ldd	r23, Z+4	; 0x04
    b810:	85 81       	ldd	r24, Z+5	; 0x05
    b812:	96 81       	ldd	r25, Z+6	; 0x06
    b814:	49 83       	std	Y+1, r20	; 0x01
    b816:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    b81a:	02 e0       	ldi	r16, 0x02	; 2
    b81c:	22 e0       	ldi	r18, 0x02	; 2
    b81e:	49 81       	ldd	r20, Y+1	; 0x01
    b820:	81 2f       	mov	r24, r17
    b822:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
}
    b826:	0f 90       	pop	r0
    b828:	df 91       	pop	r29
    b82a:	cf 91       	pop	r28
    b82c:	1f 91       	pop	r17
    b82e:	0f 91       	pop	r16
    b830:	ff 90       	pop	r15
    b832:	ef 90       	pop	r14
    b834:	08 95       	ret

0000b836 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b836:	ef 92       	push	r14
    b838:	ff 92       	push	r15
    b83a:	0f 93       	push	r16
    b83c:	1f 93       	push	r17
    b83e:	cf 93       	push	r28
    b840:	df 93       	push	r29
    b842:	1f 92       	push	r1
    b844:	cd b7       	in	r28, 0x3d	; 61
    b846:	de b7       	in	r29, 0x3e	; 62
    b848:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b84a:	81 89       	ldd	r24, Z+17	; 0x11
    b84c:	88 23       	and	r24, r24
    b84e:	b9 f0       	breq	.+46     	; 0xb87e <render_shot+0x48>
    b850:	16 2f       	mov	r17, r22
    b852:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b854:	63 a9       	ldd	r22, Z+51	; 0x33
    b856:	74 a9       	ldd	r23, Z+52	; 0x34
    b858:	85 a9       	ldd	r24, Z+53	; 0x35
    b85a:	96 a9       	ldd	r25, Z+54	; 0x36
    b85c:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    b860:	46 2f       	mov	r20, r22
    b862:	f7 01       	movw	r30, r14
    b864:	67 a5       	ldd	r22, Z+47	; 0x2f
    b866:	70 a9       	ldd	r23, Z+48	; 0x30
    b868:	81 a9       	ldd	r24, Z+49	; 0x31
    b86a:	92 a9       	ldd	r25, Z+50	; 0x32
    b86c:	49 83       	std	Y+1, r20	; 0x01
    b86e:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    b872:	01 e0       	ldi	r16, 0x01	; 1
    b874:	21 e0       	ldi	r18, 0x01	; 1
    b876:	49 81       	ldd	r20, Y+1	; 0x01
    b878:	81 2f       	mov	r24, r17
    b87a:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
			sprite_index++;
		}
	}
}
    b87e:	0f 90       	pop	r0
    b880:	df 91       	pop	r29
    b882:	cf 91       	pop	r28
    b884:	1f 91       	pop	r17
    b886:	0f 91       	pop	r16
    b888:	ff 90       	pop	r15
    b88a:	ef 90       	pop	r14
    b88c:	08 95       	ret

0000b88e <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b88e:	ef 92       	push	r14
    b890:	ff 92       	push	r15
    b892:	0f 93       	push	r16
    b894:	1f 93       	push	r17
    b896:	cf 93       	push	r28
    b898:	df 93       	push	r29
    b89a:	ec 01       	movw	r28, r24
    b89c:	25 96       	adiw	r28, 0x05	; 5
    b89e:	8c 01       	movw	r16, r24
    b8a0:	0f 5d       	subi	r16, 0xDF	; 223
    b8a2:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b8a4:	8e e1       	ldi	r24, 0x1E	; 30
    b8a6:	e8 2e       	mov	r14, r24
    b8a8:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b8aa:	88 85       	ldd	r24, Y+8	; 0x08
    b8ac:	99 85       	ldd	r25, Y+9	; 0x09
    b8ae:	89 2b       	or	r24, r25
    b8b0:	c1 f0       	breq	.+48     	; 0xb8e2 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b8b2:	ce 01       	movw	r24, r28
    b8b4:	04 97       	sbiw	r24, 0x04	; 4
    b8b6:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    b8ba:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b8bc:	48 81       	ld	r20, Y
    b8be:	88 85       	ldd	r24, Y+8	; 0x08
    b8c0:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b8c2:	b7 01       	movw	r22, r14
    b8c4:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    b8c8:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b8ca:	44 23       	and	r20, r20
    b8cc:	39 f0       	breq	.+14     	; 0xb8dc <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b8ce:	40 e0       	ldi	r20, 0x00	; 0
    b8d0:	50 e0       	ldi	r21, 0x00	; 0
    b8d2:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
				ta->anims[i].tile_index = 0;
    b8d6:	19 86       	std	Y+9, r1	; 0x09
    b8d8:	18 86       	std	Y+8, r1	; 0x08
    b8da:	03 c0       	rjmp	.+6      	; 0xb8e2 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b8dc:	a9 01       	movw	r20, r18
    b8de:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
    b8e2:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b8e4:	c0 17       	cp	r28, r16
    b8e6:	d1 07       	cpc	r29, r17
    b8e8:	01 f7       	brne	.-64     	; 0xb8aa <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b8ea:	df 91       	pop	r29
    b8ec:	cf 91       	pop	r28
    b8ee:	1f 91       	pop	r17
    b8f0:	0f 91       	pop	r16
    b8f2:	ff 90       	pop	r15
    b8f4:	ef 90       	pop	r14
    b8f6:	08 95       	ret

0000b8f8 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b8f8:	cf 93       	push	r28
    b8fa:	df 93       	push	r29
    b8fc:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b8fe:	0e 94 49 56 	call	0xac92	; 0xac92 <LBGetNextFrameReverse>
    b902:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b904:	4c 81       	ldd	r20, Y+4	; 0x04
    b906:	8c 85       	ldd	r24, Y+12	; 0x0c
    b908:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b90a:	6e e1       	ldi	r22, 0x1E	; 30
    b90c:	70 e0       	ldi	r23, 0x00	; 0
    b90e:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    b912:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b914:	44 23       	and	r20, r20
    b916:	19 f0       	breq	.+6      	; 0xb91e <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b918:	47 ee       	ldi	r20, 0xE7	; 231
    b91a:	55 e8       	ldi	r21, 0x85	; 133
    b91c:	01 c0       	rjmp	.+2      	; 0xb920 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b91e:	a9 01       	movw	r20, r18
    b920:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	}
	return ta->anim.looped;
}
    b924:	8c 81       	ldd	r24, Y+4	; 0x04
    b926:	df 91       	pop	r29
    b928:	cf 91       	pop	r28
    b92a:	08 95       	ret

0000b92c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b92c:	1f 93       	push	r17
    b92e:	cf 93       	push	r28
    b930:	df 93       	push	r29
    b932:	ec 01       	movw	r28, r24
    b934:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    b936:	8c 89       	ldd	r24, Y+20	; 0x14
    b938:	80 ff       	sbrs	r24, 0
    b93a:	17 c0       	rjmp	.+46     	; 0xb96a <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b93c:	ce 01       	movw	r24, r28
    b93e:	84 59       	subi	r24, 0x94	; 148
    b940:	9f 4f       	sbci	r25, 0xFF	; 255
    b942:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b946:	fe 01       	movw	r30, r28
    b948:	e0 59       	subi	r30, 0x90	; 144
    b94a:	ff 4f       	sbci	r31, 0xFF	; 255
    b94c:	20 81       	ld	r18, Z
    b94e:	22 23       	and	r18, r18
    b950:	09 f4       	brne	.+2      	; 0xb954 <tank_map+0x28>
    b952:	4a c0       	rjmp	.+148    	; 0xb9e8 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b954:	8c 89       	ldd	r24, Y+20	; 0x14
    b956:	91 e0       	ldi	r25, 0x01	; 1
    b958:	98 27       	eor	r25, r24
    b95a:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b95c:	ce 01       	movw	r24, r28
    b95e:	0e 94 c7 59 	call	0xb38e	; 0xb38e <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b962:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b964:	87 e9       	ldi	r24, 0x97	; 151
    b966:	9c e4       	ldi	r25, 0x4C	; 76
    b968:	40 c0       	rjmp	.+128    	; 0xb9ea <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b96a:	9f 89       	ldd	r25, Y+23	; 0x17
    b96c:	98 37       	cpi	r25, 0x78	; 120
    b96e:	11 f0       	breq	.+4      	; 0xb974 <tank_map+0x48>
		{
			player->grace_frame++;
    b970:	9f 5f       	subi	r25, 0xFF	; 255
    b972:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    b974:	98 81       	ld	r25, Y
    b976:	91 30       	cpi	r25, 0x01	; 1
    b978:	61 f0       	breq	.+24     	; 0xb992 <tank_map+0x66>
    b97a:	b0 f0       	brcs	.+44     	; 0xb9a8 <tank_map+0x7c>
    b97c:	92 30       	cpi	r25, 0x02	; 2
    b97e:	69 f0       	breq	.+26     	; 0xb99a <tank_map+0x6e>
    b980:	93 30       	cpi	r25, 0x03	; 3
    b982:	91 f4       	brne	.+36     	; 0xb9a8 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b984:	ce 01       	movw	r24, r28
    b986:	80 5a       	subi	r24, 0xA0	; 160
    b988:	9f 4f       	sbci	r25, 0xFF	; 255
    b98a:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    b98e:	41 e0       	ldi	r20, 0x01	; 1
    b990:	11 c0       	rjmp	.+34     	; 0xb9b4 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b992:	ce 01       	movw	r24, r28
    b994:	80 5a       	subi	r24, 0xA0	; 160
    b996:	9f 4f       	sbci	r25, 0xFF	; 255
    b998:	0a c0       	rjmp	.+20     	; 0xb9ae <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b99a:	ce 01       	movw	r24, r28
    b99c:	8c 5a       	subi	r24, 0xAC	; 172
    b99e:	9f 4f       	sbci	r25, 0xFF	; 255
    b9a0:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    b9a4:	42 e0       	ldi	r20, 0x02	; 2
    b9a6:	06 c0       	rjmp	.+12     	; 0xb9b4 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b9a8:	ce 01       	movw	r24, r28
    b9aa:	8c 5a       	subi	r24, 0xAC	; 172
    b9ac:	9f 4f       	sbci	r25, 0xFF	; 255
    b9ae:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    b9b2:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    b9b4:	2f 89       	ldd	r18, Y+23	; 0x17
    b9b6:	28 37       	cpi	r18, 0x78	; 120
    b9b8:	31 f0       	breq	.+12     	; 0xb9c6 <tank_map+0x9a>
    b9ba:	20 91 38 0b 	lds	r18, 0x0B38
    b9be:	22 23       	and	r18, r18
    b9c0:	11 f0       	breq	.+4      	; 0xb9c6 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b9c2:	87 e9       	ldi	r24, 0x97	; 151
    b9c4:	9c e4       	ldi	r25, 0x4C	; 76
		}
		toggle_counter--;
    b9c6:	20 91 03 01 	lds	r18, 0x0103
    b9ca:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    b9cc:	19 f0       	breq	.+6      	; 0xb9d4 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    b9ce:	20 93 03 01 	sts	0x0103, r18
    b9d2:	0b c0       	rjmp	.+22     	; 0xb9ea <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    b9d4:	24 e1       	ldi	r18, 0x14	; 20
    b9d6:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    b9da:	30 91 38 0b 	lds	r19, 0x0B38
    b9de:	21 e0       	ldi	r18, 0x01	; 1
    b9e0:	23 27       	eor	r18, r19
    b9e2:	20 93 38 0b 	sts	0x0B38, r18
    b9e6:	01 c0       	rjmp	.+2      	; 0xb9ea <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b9e8:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b9ea:	bc 01       	movw	r22, r24
    b9ec:	81 2f       	mov	r24, r17
    b9ee:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b9f2:	84 e0       	ldi	r24, 0x04	; 4
    b9f4:	81 0f       	add	r24, r17
    b9f6:	df 91       	pop	r29
    b9f8:	cf 91       	pop	r28
    b9fa:	1f 91       	pop	r17
    b9fc:	08 95       	ret

0000b9fe <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b9fe:	cf 93       	push	r28
    ba00:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    ba02:	fc 01       	movw	r30, r24
    ba04:	22 ad       	ldd	r18, Z+58	; 0x3a
    ba06:	22 23       	and	r18, r18
    ba08:	d9 f0       	breq	.+54     	; 0xba40 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    ba0a:	24 a5       	ldd	r18, Z+44	; 0x2c
    ba0c:	21 30       	cpi	r18, 0x01	; 1
    ba0e:	59 f0       	breq	.+22     	; 0xba26 <shot_map+0x28>
    ba10:	a8 f0       	brcs	.+42     	; 0xba3c <shot_map+0x3e>
    ba12:	22 30       	cpi	r18, 0x02	; 2
    ba14:	71 f0       	breq	.+28     	; 0xba32 <shot_map+0x34>
    ba16:	23 30       	cpi	r18, 0x03	; 3
    ba18:	89 f4       	brne	.+34     	; 0xba3c <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    ba1a:	88 5b       	subi	r24, 0xB8	; 184
    ba1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ba1e:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    ba22:	41 e0       	ldi	r20, 0x01	; 1
    ba24:	10 c0       	rjmp	.+32     	; 0xba46 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    ba26:	88 5b       	subi	r24, 0xB8	; 184
    ba28:	9f 4f       	sbci	r25, 0xFF	; 255
    ba2a:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    ba2e:	40 e0       	ldi	r20, 0x00	; 0
    ba30:	0a c0       	rjmp	.+20     	; 0xba46 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    ba32:	cc 96       	adiw	r24, 0x3c	; 60
    ba34:	0e 94 24 56 	call	0xac48	; 0xac48 <LBGetNextFrame>
    ba38:	42 e0       	ldi	r20, 0x02	; 2
    ba3a:	05 c0       	rjmp	.+10     	; 0xba46 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    ba3c:	cc 96       	adiw	r24, 0x3c	; 60
    ba3e:	f5 cf       	rjmp	.-22     	; 0xba2a <shot_map+0x2c>
    ba40:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    ba42:	87 e9       	ldi	r24, 0x97	; 151
    ba44:	9c e4       	ldi	r25, 0x4C	; 76
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    ba46:	bc 01       	movw	r22, r24
    ba48:	8c 2f       	mov	r24, r28
    ba4a:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    ba4e:	81 e0       	ldi	r24, 0x01	; 1
    ba50:	8c 0f       	add	r24, r28
    ba52:	cf 91       	pop	r28
    ba54:	08 95       	ret

0000ba56 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    ba56:	cf 93       	push	r28
    ba58:	df 93       	push	r29
    ba5a:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    ba5c:	88 81       	ld	r24, Y
    ba5e:	81 11       	cpse	r24, r1
    ba60:	0b c0       	rjmp	.+22     	; 0xba78 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    ba62:	6f 81       	ldd	r22, Y+7	; 0x07
    ba64:	78 85       	ldd	r23, Y+8	; 0x08
    ba66:	89 85       	ldd	r24, Y+9	; 0x09
    ba68:	9a 85       	ldd	r25, Y+10	; 0x0a
    ba6a:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ba6e:	66 95       	lsr	r22
    ba70:	66 95       	lsr	r22
    ba72:	66 95       	lsr	r22
    ba74:	6f 5f       	subi	r22, 0xFF	; 255
    ba76:	1d c0       	rjmp	.+58     	; 0xbab2 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    ba78:	81 30       	cpi	r24, 0x01	; 1
    ba7a:	69 f4       	brne	.+26     	; 0xba96 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    ba7c:	20 e0       	ldi	r18, 0x00	; 0
    ba7e:	30 e0       	ldi	r19, 0x00	; 0
    ba80:	40 e0       	ldi	r20, 0x00	; 0
    ba82:	5e e3       	ldi	r21, 0x3E	; 62
    ba84:	6b 81       	ldd	r22, Y+3	; 0x03
    ba86:	7c 81       	ldd	r23, Y+4	; 0x04
    ba88:	8d 81       	ldd	r24, Y+5	; 0x05
    ba8a:	9e 81       	ldd	r25, Y+6	; 0x06
    ba8c:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    ba90:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ba94:	27 c0       	rjmp	.+78     	; 0xbae4 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    ba96:	82 30       	cpi	r24, 0x02	; 2
    ba98:	d9 f4       	brne	.+54     	; 0xbad0 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    ba9a:	20 e0       	ldi	r18, 0x00	; 0
    ba9c:	30 e0       	ldi	r19, 0x00	; 0
    ba9e:	40 e0       	ldi	r20, 0x00	; 0
    baa0:	5e e3       	ldi	r21, 0x3E	; 62
    baa2:	6f 81       	ldd	r22, Y+7	; 0x07
    baa4:	78 85       	ldd	r23, Y+8	; 0x08
    baa6:	89 85       	ldd	r24, Y+9	; 0x09
    baa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    baaa:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    baae:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
		sprite->y = tile * 8;
    bab2:	88 e0       	ldi	r24, 0x08	; 8
    bab4:	68 9f       	mul	r22, r24
    bab6:	b0 01       	movw	r22, r0
    bab8:	11 24       	eor	r1, r1
    baba:	88 27       	eor	r24, r24
    babc:	77 fd       	sbrc	r23, 7
    babe:	80 95       	com	r24
    bac0:	98 2f       	mov	r25, r24
    bac2:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    bac6:	6f 83       	std	Y+7, r22	; 0x07
    bac8:	78 87       	std	Y+8, r23	; 0x08
    baca:	89 87       	std	Y+9, r24	; 0x09
    bacc:	9a 87       	std	Y+10, r25	; 0x0a
    bace:	18 c0       	rjmp	.+48     	; 0xbb00 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    bad0:	6b 81       	ldd	r22, Y+3	; 0x03
    bad2:	7c 81       	ldd	r23, Y+4	; 0x04
    bad4:	8d 81       	ldd	r24, Y+5	; 0x05
    bad6:	9e 81       	ldd	r25, Y+6	; 0x06
    bad8:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    badc:	66 95       	lsr	r22
    bade:	66 95       	lsr	r22
    bae0:	66 95       	lsr	r22
    bae2:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    bae4:	88 e0       	ldi	r24, 0x08	; 8
    bae6:	68 9f       	mul	r22, r24
    bae8:	b0 01       	movw	r22, r0
    baea:	11 24       	eor	r1, r1
    baec:	88 27       	eor	r24, r24
    baee:	77 fd       	sbrc	r23, 7
    baf0:	80 95       	com	r24
    baf2:	98 2f       	mov	r25, r24
    baf4:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    baf8:	6b 83       	std	Y+3, r22	; 0x03
    bafa:	7c 83       	std	Y+4, r23	; 0x04
    bafc:	8d 83       	std	Y+5, r24	; 0x05
    bafe:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bb00:	81 e0       	ldi	r24, 0x01	; 1
    bb02:	8a 83       	std	Y+2, r24	; 0x02
}
    bb04:	df 91       	pop	r29
    bb06:	cf 91       	pop	r28
    bb08:	08 95       	ret

0000bb0a <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    bb0a:	cf 93       	push	r28
    bb0c:	df 93       	push	r29
    bb0e:	ec 01       	movw	r28, r24
	float speed = FRAME_TIME * sprite->speed;
    bb10:	69 81       	ldd	r22, Y+1	; 0x01
    bb12:	70 e0       	ldi	r23, 0x00	; 0
    bb14:	80 e0       	ldi	r24, 0x00	; 0
    bb16:	90 e0       	ldi	r25, 0x00	; 0
    bb18:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    bb1c:	25 e6       	ldi	r18, 0x65	; 101
    bb1e:	38 e8       	ldi	r19, 0x88	; 136
    bb20:	48 e8       	ldi	r20, 0x88	; 136
    bb22:	5c e3       	ldi	r21, 0x3C	; 60
    bb24:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    bb28:	9b 01       	movw	r18, r22
    bb2a:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    bb2c:	88 81       	ld	r24, Y
    bb2e:	81 11       	cpse	r24, r1
    bb30:	07 c0       	rjmp	.+14     	; 0xbb40 <recoil_sprite_fine+0x36>
	{
		sprite->y += speed;
    bb32:	6f 81       	ldd	r22, Y+7	; 0x07
    bb34:	78 85       	ldd	r23, Y+8	; 0x08
    bb36:	89 85       	ldd	r24, Y+9	; 0x09
    bb38:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb3a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bb3e:	11 c0       	rjmp	.+34     	; 0xbb62 <recoil_sprite_fine+0x58>
	}
	else if (sprite->direction == D_RIGHT)
    bb40:	81 30       	cpi	r24, 0x01	; 1
    bb42:	39 f4       	brne	.+14     	; 0xbb52 <recoil_sprite_fine+0x48>
	{
		sprite->x -= speed;
    bb44:	6b 81       	ldd	r22, Y+3	; 0x03
    bb46:	7c 81       	ldd	r23, Y+4	; 0x04
    bb48:	8d 81       	ldd	r24, Y+5	; 0x05
    bb4a:	9e 81       	ldd	r25, Y+6	; 0x06
    bb4c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    bb50:	13 c0       	rjmp	.+38     	; 0xbb78 <recoil_sprite_fine+0x6e>
	}
	else if (sprite->direction == D_DOWN)
    bb52:	82 30       	cpi	r24, 0x02	; 2
    bb54:	59 f4       	brne	.+22     	; 0xbb6c <recoil_sprite_fine+0x62>
	{
		sprite->y -= speed;
    bb56:	6f 81       	ldd	r22, Y+7	; 0x07
    bb58:	78 85       	ldd	r23, Y+8	; 0x08
    bb5a:	89 85       	ldd	r24, Y+9	; 0x09
    bb5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb5e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    bb62:	6f 83       	std	Y+7, r22	; 0x07
    bb64:	78 87       	std	Y+8, r23	; 0x08
    bb66:	89 87       	std	Y+9, r24	; 0x09
    bb68:	9a 87       	std	Y+10, r25	; 0x0a
    bb6a:	0a c0       	rjmp	.+20     	; 0xbb80 <recoil_sprite_fine+0x76>
	}
	else
	{
		sprite->x += speed;
    bb6c:	6b 81       	ldd	r22, Y+3	; 0x03
    bb6e:	7c 81       	ldd	r23, Y+4	; 0x04
    bb70:	8d 81       	ldd	r24, Y+5	; 0x05
    bb72:	9e 81       	ldd	r25, Y+6	; 0x06
    bb74:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bb78:	6b 83       	std	Y+3, r22	; 0x03
    bb7a:	7c 83       	std	Y+4, r23	; 0x04
    bb7c:	8d 83       	std	Y+5, r24	; 0x05
    bb7e:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bb80:	81 e0       	ldi	r24, 0x01	; 1
    bb82:	8a 83       	std	Y+2, r24	; 0x02
}
    bb84:	df 91       	pop	r29
    bb86:	cf 91       	pop	r28
    bb88:	08 95       	ret

0000bb8a <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bb8a:	8b 54       	subi	r24, 0x4B	; 75
    bb8c:	93 4f       	sbci	r25, 0xF3	; 243
    bb8e:	fc 01       	movw	r30, r24
    bb90:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    bb92:	81 30       	cpi	r24, 0x01	; 1
    bb94:	31 f0       	breq	.+12     	; 0xbba2 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    bb96:	82 30       	cpi	r24, 0x02	; 2
    bb98:	31 f0       	breq	.+12     	; 0xbba6 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    bb9a:	87 33       	cpi	r24, 0x37	; 55
    bb9c:	31 f0       	breq	.+12     	; 0xbbaa <solid_square_tile+0x20>

	return 0;
    bb9e:	80 e0       	ldi	r24, 0x00	; 0
    bba0:	08 95       	ret
    bba2:	81 e0       	ldi	r24, 0x01	; 1
    bba4:	08 95       	ret
    bba6:	82 e0       	ldi	r24, 0x02	; 2
    bba8:	08 95       	ret
    bbaa:	87 e3       	ldi	r24, 0x37	; 55
}
    bbac:	08 95       	ret

0000bbae <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bbae:	8b 54       	subi	r24, 0x4B	; 75
    bbb0:	93 4f       	sbci	r25, 0xF3	; 243
    bbb2:	fc 01       	movw	r30, r24
    bbb4:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    bbb6:	83 30       	cpi	r24, 0x03	; 3
    bbb8:	41 f0       	breq	.+16     	; 0xbbca <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    bbba:	86 30       	cpi	r24, 0x06	; 6
    bbbc:	41 f0       	breq	.+16     	; 0xbbce <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    bbbe:	84 30       	cpi	r24, 0x04	; 4
    bbc0:	41 f0       	breq	.+16     	; 0xbbd2 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    bbc2:	85 30       	cpi	r24, 0x05	; 5
    bbc4:	41 f0       	breq	.+16     	; 0xbbd6 <solid_directional_tile+0x28>
	
	return 0;
    bbc6:	80 e0       	ldi	r24, 0x00	; 0
    bbc8:	08 95       	ret
    bbca:	83 e0       	ldi	r24, 0x03	; 3
    bbcc:	08 95       	ret
    bbce:	86 e0       	ldi	r24, 0x06	; 6
    bbd0:	08 95       	ret
    bbd2:	84 e0       	ldi	r24, 0x04	; 4
    bbd4:	08 95       	ret
    bbd6:	85 e0       	ldi	r24, 0x05	; 5
}
    bbd8:	08 95       	ret

0000bbda <solid_tile>:

u8 solid_tile(int tile_index)
{
    bbda:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    bbdc:	fc 01       	movw	r30, r24
    bbde:	eb 54       	subi	r30, 0x4B	; 75
    bbe0:	f3 4f       	sbci	r31, 0xF3	; 243
    bbe2:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    bbe4:	91 30       	cpi	r25, 0x01	; 1
    bbe6:	39 f0       	breq	.+14     	; 0xbbf6 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    bbe8:	92 30       	cpi	r25, 0x02	; 2
    bbea:	39 f0       	breq	.+14     	; 0xbbfa <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    bbec:	97 33       	cpi	r25, 0x37	; 55
    bbee:	39 f0       	breq	.+14     	; 0xbbfe <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    bbf0:	c9 01       	movw	r24, r18
    bbf2:	0c 94 d7 5d 	jmp	0xbbae	; 0xbbae <solid_directional_tile>
    bbf6:	81 e0       	ldi	r24, 0x01	; 1
    bbf8:	08 95       	ret
    bbfa:	82 e0       	ldi	r24, 0x02	; 2
    bbfc:	08 95       	ret
    bbfe:	87 e3       	ldi	r24, 0x37	; 55
}
    bc00:	08 95       	ret

0000bc02 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    bc02:	7f 92       	push	r7
    bc04:	8f 92       	push	r8
    bc06:	9f 92       	push	r9
    bc08:	af 92       	push	r10
    bc0a:	bf 92       	push	r11
    bc0c:	cf 92       	push	r12
    bc0e:	df 92       	push	r13
    bc10:	ef 92       	push	r14
    bc12:	ff 92       	push	r15
    bc14:	0f 93       	push	r16
    bc16:	1f 93       	push	r17
    bc18:	cf 93       	push	r28
    bc1a:	df 93       	push	r29
    bc1c:	b6 2e       	mov	r11, r22
    bc1e:	94 2e       	mov	r9, r20
    bc20:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    bc22:	fc 01       	movw	r30, r24
    bc24:	eb 54       	subi	r30, 0x4B	; 75
    bc26:	f3 4f       	sbci	r31, 0xF3	; 243
    bc28:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    bc2a:	6e e1       	ldi	r22, 0x1E	; 30
    bc2c:	70 e0       	ldi	r23, 0x00	; 0
    bc2e:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    bc32:	f8 2e       	mov	r15, r24
    bc34:	ff 0c       	add	r15, r15
    bc36:	ff 0c       	add	r15, r15
    bc38:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    bc3a:	6d 5f       	subi	r22, 0xFD	; 253
    bc3c:	7f 4f       	sbci	r23, 0xFF	; 255
    bc3e:	16 2f       	mov	r17, r22
    bc40:	11 0f       	add	r17, r17
    bc42:	11 0f       	add	r17, r17
    bc44:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    bc46:	83 e0       	ldi	r24, 0x03	; 3
    bc48:	d8 16       	cp	r13, r24
    bc4a:	19 f0       	breq	.+6      	; 0xbc52 <collides_directional_tile+0x50>
    bc4c:	86 e0       	ldi	r24, 0x06	; 6
    bc4e:	d8 12       	cpse	r13, r24
    bc50:	31 c0       	rjmp	.+98     	; 0xbcb4 <collides_directional_tile+0xb2>
    bc52:	cf ef       	ldi	r28, 0xFF	; 255
    bc54:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    bc56:	c9 0d       	add	r28, r9
    bc58:	27 e0       	ldi	r18, 0x07	; 7
    bc5a:	72 2e       	mov	r7, r18
    bc5c:	7f 0c       	add	r7, r15
    bc5e:	37 e0       	ldi	r19, 0x07	; 7
    bc60:	83 2e       	mov	r8, r19
    bc62:	81 0e       	add	r8, r17
    bc64:	ac 2e       	mov	r10, r28
    bc66:	cb 2c       	mov	r12, r11
    bc68:	e9 2c       	mov	r14, r9
    bc6a:	0b 2d       	mov	r16, r11
    bc6c:	21 2f       	mov	r18, r17
    bc6e:	47 2d       	mov	r20, r7
    bc70:	68 2d       	mov	r22, r8
    bc72:	8f 2d       	mov	r24, r15
    bc74:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bc78:	81 11       	cpse	r24, r1
    bc7a:	58 c0       	rjmp	.+176    	; 0xbd2c <collides_directional_tile+0x12a>
    bc7c:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    bc7e:	db 0d       	add	r29, r11
    bc80:	a9 2c       	mov	r10, r9
    bc82:	cd 2e       	mov	r12, r29
    bc84:	21 2f       	mov	r18, r17
    bc86:	47 2d       	mov	r20, r7
    bc88:	68 2d       	mov	r22, r8
    bc8a:	8f 2d       	mov	r24, r15
    bc8c:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bc90:	81 11       	cpse	r24, r1
    bc92:	4c c0       	rjmp	.+152    	; 0xbd2c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    bc94:	ac 2e       	mov	r10, r28
    bc96:	0d 2f       	mov	r16, r29
    bc98:	21 2f       	mov	r18, r17
    bc9a:	47 2d       	mov	r20, r7
    bc9c:	68 2d       	mov	r22, r8
    bc9e:	8f 2d       	mov	r24, r15
    bca0:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bca4:	81 11       	cpse	r24, r1
    bca6:	42 c0       	rjmp	.+132    	; 0xbd2c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    bca8:	ec 2e       	mov	r14, r28
    bcaa:	0b 2d       	mov	r16, r11
    bcac:	21 2f       	mov	r18, r17
    bcae:	47 2d       	mov	r20, r7
    bcb0:	68 2d       	mov	r22, r8
    bcb2:	34 c0       	rjmp	.+104    	; 0xbd1c <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    bcb4:	8c ef       	ldi	r24, 0xFC	; 252
    bcb6:	8d 0d       	add	r24, r13
    bcb8:	82 30       	cpi	r24, 0x02	; 2
    bcba:	b0 f5       	brcc	.+108    	; 0xbd28 <collides_directional_tile+0x126>
    bcbc:	cf ef       	ldi	r28, 0xFF	; 255
    bcbe:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    bcc0:	c4 0f       	add	r28, r20
    bcc2:	87 e0       	ldi	r24, 0x07	; 7
    bcc4:	78 2e       	mov	r7, r24
    bcc6:	71 0e       	add	r7, r17
    bcc8:	97 e0       	ldi	r25, 0x07	; 7
    bcca:	89 2e       	mov	r8, r25
    bccc:	8f 0c       	add	r8, r15
    bcce:	ac 2e       	mov	r10, r28
    bcd0:	cb 2c       	mov	r12, r11
    bcd2:	e4 2e       	mov	r14, r20
    bcd4:	0b 2d       	mov	r16, r11
    bcd6:	27 2d       	mov	r18, r7
    bcd8:	48 2d       	mov	r20, r8
    bcda:	61 2f       	mov	r22, r17
    bcdc:	8f 2d       	mov	r24, r15
    bcde:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bce2:	81 11       	cpse	r24, r1
    bce4:	23 c0       	rjmp	.+70     	; 0xbd2c <collides_directional_tile+0x12a>
    bce6:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    bce8:	db 0d       	add	r29, r11
    bcea:	a9 2c       	mov	r10, r9
    bcec:	cd 2e       	mov	r12, r29
    bcee:	27 2d       	mov	r18, r7
    bcf0:	48 2d       	mov	r20, r8
    bcf2:	61 2f       	mov	r22, r17
    bcf4:	8f 2d       	mov	r24, r15
    bcf6:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bcfa:	81 11       	cpse	r24, r1
    bcfc:	17 c0       	rjmp	.+46     	; 0xbd2c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    bcfe:	ac 2e       	mov	r10, r28
    bd00:	0d 2f       	mov	r16, r29
    bd02:	27 2d       	mov	r18, r7
    bd04:	48 2d       	mov	r20, r8
    bd06:	61 2f       	mov	r22, r17
    bd08:	8f 2d       	mov	r24, r15
    bd0a:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bd0e:	81 11       	cpse	r24, r1
    bd10:	0d c0       	rjmp	.+26     	; 0xbd2c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    bd12:	ec 2e       	mov	r14, r28
    bd14:	0b 2d       	mov	r16, r11
    bd16:	27 2d       	mov	r18, r7
    bd18:	48 2d       	mov	r20, r8
    bd1a:	61 2f       	mov	r22, r17
    bd1c:	8f 2d       	mov	r24, r15
    bd1e:	0e 94 27 57 	call	0xae4e	; 0xae4e <LBLineIntersect>
    bd22:	81 11       	cpse	r24, r1
    bd24:	03 c0       	rjmp	.+6      	; 0xbd2c <collides_directional_tile+0x12a>
    bd26:	03 c0       	rjmp	.+6      	; 0xbd2e <collides_directional_tile+0x12c>
	}
	
	return 0;
    bd28:	80 e0       	ldi	r24, 0x00	; 0
    bd2a:	01 c0       	rjmp	.+2      	; 0xbd2e <collides_directional_tile+0x12c>
    bd2c:	8d 2d       	mov	r24, r13
}
    bd2e:	df 91       	pop	r29
    bd30:	cf 91       	pop	r28
    bd32:	1f 91       	pop	r17
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	df 90       	pop	r13
    bd3c:	cf 90       	pop	r12
    bd3e:	bf 90       	pop	r11
    bd40:	af 90       	pop	r10
    bd42:	9f 90       	pop	r9
    bd44:	8f 90       	pop	r8
    bd46:	7f 90       	pop	r7
    bd48:	08 95       	ret

0000bd4a <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    bd4a:	8f 92       	push	r8
    bd4c:	9f 92       	push	r9
    bd4e:	af 92       	push	r10
    bd50:	cf 92       	push	r12
    bd52:	ef 92       	push	r14
    bd54:	0f 93       	push	r16
    bd56:	1f 93       	push	r17
    bd58:	cf 93       	push	r28
    bd5a:	df 93       	push	r29
    bd5c:	4c 01       	movw	r8, r24
    bd5e:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bd60:	20 e0       	ldi	r18, 0x00	; 0
    bd62:	30 e0       	ldi	r19, 0x00	; 0
    bd64:	40 e0       	ldi	r20, 0x00	; 0
    bd66:	50 e4       	ldi	r21, 0x40	; 64
    bd68:	6f 81       	ldd	r22, Y+7	; 0x07
    bd6a:	78 85       	ldd	r23, Y+8	; 0x08
    bd6c:	89 85       	ldd	r24, Y+9	; 0x09
    bd6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd70:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bd74:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    bd78:	e6 2e       	mov	r14, r22
    bd7a:	20 e0       	ldi	r18, 0x00	; 0
    bd7c:	30 e0       	ldi	r19, 0x00	; 0
    bd7e:	40 e0       	ldi	r20, 0x00	; 0
    bd80:	50 e4       	ldi	r21, 0x40	; 64
    bd82:	6b 81       	ldd	r22, Y+3	; 0x03
    bd84:	7c 81       	ldd	r23, Y+4	; 0x04
    bd86:	8d 81       	ldd	r24, Y+5	; 0x05
    bd88:	9e 81       	ldd	r25, Y+6	; 0x06
    bd8a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bd8e:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    bd92:	06 2f       	mov	r16, r22
    bd94:	20 e0       	ldi	r18, 0x00	; 0
    bd96:	30 e0       	ldi	r19, 0x00	; 0
    bd98:	40 e8       	ldi	r20, 0x80	; 128
    bd9a:	5f e3       	ldi	r21, 0x3F	; 63
    bd9c:	f4 01       	movw	r30, r8
    bd9e:	67 81       	ldd	r22, Z+7	; 0x07
    bda0:	70 85       	ldd	r23, Z+8	; 0x08
    bda2:	81 85       	ldd	r24, Z+9	; 0x09
    bda4:	92 85       	ldd	r25, Z+10	; 0x0a
    bda6:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bdaa:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    bdae:	16 2f       	mov	r17, r22
    bdb0:	20 e0       	ldi	r18, 0x00	; 0
    bdb2:	30 e0       	ldi	r19, 0x00	; 0
    bdb4:	40 e8       	ldi	r20, 0x80	; 128
    bdb6:	5f e3       	ldi	r21, 0x3F	; 63
    bdb8:	f4 01       	movw	r30, r8
    bdba:	63 81       	ldd	r22, Z+3	; 0x03
    bdbc:	74 81       	ldd	r23, Z+4	; 0x04
    bdbe:	85 81       	ldd	r24, Z+5	; 0x05
    bdc0:	96 81       	ldd	r25, Z+6	; 0x06
    bdc2:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bdc6:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    bdca:	86 2f       	mov	r24, r22
    bdcc:	94 e0       	ldi	r25, 0x04	; 4
    bdce:	a9 2e       	mov	r10, r25
    bdd0:	24 e0       	ldi	r18, 0x04	; 4
    bdd2:	c2 2e       	mov	r12, r18
    bdd4:	2e e0       	ldi	r18, 0x0E	; 14
    bdd6:	4e e0       	ldi	r20, 0x0E	; 14
    bdd8:	61 2f       	mov	r22, r17
    bdda:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bdde:	88 23       	and	r24, r24
    bde0:	41 f0       	breq	.+16     	; 0xbdf2 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bde2:	f4 01       	movw	r30, r8
    bde4:	87 89       	ldd	r24, Z+23	; 0x17
    bde6:	88 37       	cpi	r24, 0x78	; 120
    bde8:	21 f4       	brne	.+8      	; 0xbdf2 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bdea:	81 e0       	ldi	r24, 0x01	; 1
    bdec:	9f 85       	ldd	r25, Y+15	; 0x0f
    bdee:	99 30       	cpi	r25, 0x09	; 9
    bdf0:	08 f4       	brcc	.+2      	; 0xbdf4 <player_shot+0xaa>
    bdf2:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    bdf4:	df 91       	pop	r29
    bdf6:	cf 91       	pop	r28
    bdf8:	1f 91       	pop	r17
    bdfa:	0f 91       	pop	r16
    bdfc:	ef 90       	pop	r14
    bdfe:	cf 90       	pop	r12
    be00:	af 90       	pop	r10
    be02:	9f 90       	pop	r9
    be04:	8f 90       	pop	r8
    be06:	08 95       	ret

0000be08 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    be08:	af 92       	push	r10
    be0a:	cf 92       	push	r12
    be0c:	ef 92       	push	r14
    be0e:	0f 93       	push	r16
    be10:	1f 93       	push	r17
    be12:	cf 93       	push	r28
    be14:	df 93       	push	r29
    be16:	ec 01       	movw	r28, r24
    be18:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    be1a:	20 e0       	ldi	r18, 0x00	; 0
    be1c:	30 e0       	ldi	r19, 0x00	; 0
    be1e:	40 e0       	ldi	r20, 0x00	; 0
    be20:	50 e4       	ldi	r21, 0x40	; 64
    be22:	fb 01       	movw	r30, r22
    be24:	67 81       	ldd	r22, Z+7	; 0x07
    be26:	70 85       	ldd	r23, Z+8	; 0x08
    be28:	81 85       	ldd	r24, Z+9	; 0x09
    be2a:	92 85       	ldd	r25, Z+10	; 0x0a
    be2c:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    be30:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    be34:	e6 2e       	mov	r14, r22
    be36:	20 e0       	ldi	r18, 0x00	; 0
    be38:	30 e0       	ldi	r19, 0x00	; 0
    be3a:	40 e0       	ldi	r20, 0x00	; 0
    be3c:	50 e4       	ldi	r21, 0x40	; 64
    be3e:	f8 01       	movw	r30, r16
    be40:	63 81       	ldd	r22, Z+3	; 0x03
    be42:	74 81       	ldd	r23, Z+4	; 0x04
    be44:	85 81       	ldd	r24, Z+5	; 0x05
    be46:	96 81       	ldd	r25, Z+6	; 0x06
    be48:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    be4c:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    be50:	06 2f       	mov	r16, r22
    be52:	6f 81       	ldd	r22, Y+7	; 0x07
    be54:	78 85       	ldd	r23, Y+8	; 0x08
    be56:	89 85       	ldd	r24, Y+9	; 0x09
    be58:	9a 85       	ldd	r25, Y+10	; 0x0a
    be5a:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    be5e:	16 2f       	mov	r17, r22
    be60:	6b 81       	ldd	r22, Y+3	; 0x03
    be62:	7c 81       	ldd	r23, Y+4	; 0x04
    be64:	8d 81       	ldd	r24, Y+5	; 0x05
    be66:	9e 81       	ldd	r25, Y+6	; 0x06
    be68:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    be6c:	86 2f       	mov	r24, r22
    be6e:	94 e0       	ldi	r25, 0x04	; 4
    be70:	a9 2e       	mov	r10, r25
    be72:	24 e0       	ldi	r18, 0x04	; 4
    be74:	c2 2e       	mov	r12, r18
    be76:	28 e0       	ldi	r18, 0x08	; 8
    be78:	48 e0       	ldi	r20, 0x08	; 8
    be7a:	61 2f       	mov	r22, r17
    be7c:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
    be80:	88 23       	and	r24, r24
    be82:	39 f0       	breq	.+14     	; 0xbe92 <turret_shot+0x8a>
    be84:	91 e0       	ldi	r25, 0x01	; 1
    be86:	8b 85       	ldd	r24, Y+11	; 0x0b
    be88:	81 11       	cpse	r24, r1
    be8a:	01 c0       	rjmp	.+2      	; 0xbe8e <turret_shot+0x86>
    be8c:	90 e0       	ldi	r25, 0x00	; 0
    be8e:	89 2f       	mov	r24, r25
    be90:	01 c0       	rjmp	.+2      	; 0xbe94 <turret_shot+0x8c>
    be92:	80 e0       	ldi	r24, 0x00	; 0
}
    be94:	df 91       	pop	r29
    be96:	cf 91       	pop	r28
    be98:	1f 91       	pop	r17
    be9a:	0f 91       	pop	r16
    be9c:	ef 90       	pop	r14
    be9e:	cf 90       	pop	r12
    bea0:	af 90       	pop	r10
    bea2:	08 95       	ret

0000bea4 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    bea4:	cf 92       	push	r12
    bea6:	df 92       	push	r13
    bea8:	ef 92       	push	r14
    beaa:	ff 92       	push	r15
    beac:	cf 93       	push	r28
    beae:	df 93       	push	r29
    beb0:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    beb2:	cb 80       	ldd	r12, Y+3	; 0x03
    beb4:	dc 80       	ldd	r13, Y+4	; 0x04
    beb6:	ed 80       	ldd	r14, Y+5	; 0x05
    beb8:	fe 80       	ldd	r15, Y+6	; 0x06
    beba:	20 e0       	ldi	r18, 0x00	; 0
    bebc:	30 e0       	ldi	r19, 0x00	; 0
    bebe:	a9 01       	movw	r20, r18
    bec0:	c7 01       	movw	r24, r14
    bec2:	b6 01       	movw	r22, r12
    bec4:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    bec8:	87 fd       	sbrc	r24, 7
    beca:	31 c0       	rjmp	.+98     	; 0xbf2e <collision_detect_boundries+0x8a>
    becc:	20 e0       	ldi	r18, 0x00	; 0
    bece:	30 e0       	ldi	r19, 0x00	; 0
    bed0:	40 e0       	ldi	r20, 0x00	; 0
    bed2:	51 e4       	ldi	r21, 0x41	; 65
    bed4:	c7 01       	movw	r24, r14
    bed6:	b6 01       	movw	r22, r12
    bed8:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bedc:	20 e0       	ldi	r18, 0x00	; 0
    bede:	30 e0       	ldi	r19, 0x00	; 0
    bee0:	40 e7       	ldi	r20, 0x70	; 112
    bee2:	53 e4       	ldi	r21, 0x43	; 67
    bee4:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    bee8:	18 16       	cp	r1, r24
    beea:	0c f1       	brlt	.+66     	; 0xbf2e <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    beec:	cf 80       	ldd	r12, Y+7	; 0x07
    beee:	d8 84       	ldd	r13, Y+8	; 0x08
    bef0:	e9 84       	ldd	r14, Y+9	; 0x09
    bef2:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bef4:	20 e0       	ldi	r18, 0x00	; 0
    bef6:	30 e0       	ldi	r19, 0x00	; 0
    bef8:	40 ec       	ldi	r20, 0xC0	; 192
    befa:	51 e4       	ldi	r21, 0x41	; 65
    befc:	c7 01       	movw	r24, r14
    befe:	b6 01       	movw	r22, r12
    bf00:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    bf04:	87 fd       	sbrc	r24, 7
    bf06:	13 c0       	rjmp	.+38     	; 0xbf2e <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bf08:	20 e0       	ldi	r18, 0x00	; 0
    bf0a:	30 e0       	ldi	r19, 0x00	; 0
    bf0c:	40 e0       	ldi	r20, 0x00	; 0
    bf0e:	51 e4       	ldi	r21, 0x41	; 65
    bf10:	c7 01       	movw	r24, r14
    bf12:	b6 01       	movw	r22, r12
    bf14:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    bf18:	c1 e0       	ldi	r28, 0x01	; 1
    bf1a:	20 e0       	ldi	r18, 0x00	; 0
    bf1c:	30 e0       	ldi	r19, 0x00	; 0
    bf1e:	40 e6       	ldi	r20, 0x60	; 96
    bf20:	53 e4       	ldi	r21, 0x43	; 67
    bf22:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    bf26:	18 16       	cp	r1, r24
    bf28:	1c f0       	brlt	.+6      	; 0xbf30 <collision_detect_boundries+0x8c>
    bf2a:	c0 e0       	ldi	r28, 0x00	; 0
    bf2c:	01 c0       	rjmp	.+2      	; 0xbf30 <collision_detect_boundries+0x8c>
	{
		return 1;
    bf2e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    bf30:	8c 2f       	mov	r24, r28
    bf32:	df 91       	pop	r29
    bf34:	cf 91       	pop	r28
    bf36:	ff 90       	pop	r15
    bf38:	ef 90       	pop	r14
    bf3a:	df 90       	pop	r13
    bf3c:	cf 90       	pop	r12
    bf3e:	08 95       	ret

0000bf40 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    bf40:	1f 93       	push	r17
    bf42:	cf 93       	push	r28
    bf44:	df 93       	push	r29
    bf46:	9c 01       	movw	r18, r24
    bf48:	fb 01       	movw	r30, r22
    bf4a:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    bf4c:	6e e1       	ldi	r22, 0x1E	; 30
    bf4e:	70 e0       	ldi	r23, 0x00	; 0
    bf50:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    bf54:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    bf56:	63 e0       	ldi	r22, 0x03	; 3
    bf58:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    bf5a:	e9 01       	movw	r28, r18
    bf5c:	cb 54       	subi	r28, 0x4B	; 75
    bf5e:	d3 4f       	sbci	r29, 0xF3	; 243
    bf60:	49 81       	ldd	r20, Y+1	; 0x01
    bf62:	44 23       	and	r20, r20
    bf64:	71 f0       	breq	.+28     	; 0xbf82 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    bf66:	e9 01       	movw	r28, r18
    bf68:	ca 54       	subi	r28, 0x4A	; 74
    bf6a:	d3 4f       	sbci	r29, 0xF3	; 243
    bf6c:	49 81       	ldd	r20, Y+1	; 0x01
    bf6e:	44 23       	and	r20, r20
    bf70:	91 f0       	breq	.+36     	; 0xbf96 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    bf72:	e9 01       	movw	r28, r18
    bf74:	cd 52       	subi	r28, 0x2D	; 45
    bf76:	d3 4f       	sbci	r29, 0xF3	; 243
    bf78:	49 81       	ldd	r20, Y+1	; 0x01
    bf7a:	41 11       	cpse	r20, r1
    bf7c:	04 c0       	rjmp	.+8      	; 0xbf86 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    bf7e:	64 e0       	ldi	r22, 0x04	; 4
    bf80:	69 0f       	add	r22, r25
    bf82:	af 01       	movw	r20, r30
    bf84:	0a c0       	rjmp	.+20     	; 0xbf9a <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    bf86:	e9 01       	movw	r28, r18
    bf88:	cc 52       	subi	r28, 0x2C	; 44
    bf8a:	d3 4f       	sbci	r29, 0xF3	; 243
    bf8c:	29 81       	ldd	r18, Y+1	; 0x01
    bf8e:	21 11       	cpse	r18, r1
    bf90:	07 c0       	rjmp	.+14     	; 0xbfa0 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    bf92:	64 e0       	ldi	r22, 0x04	; 4
    bf94:	69 0f       	add	r22, r25
    bf96:	af 01       	movw	r20, r30
    bf98:	8f 5f       	subi	r24, 0xFF	; 255
    bf9a:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    bf9e:	19 83       	std	Y+1, r17	; 0x01
	}
}
    bfa0:	df 91       	pop	r29
    bfa2:	cf 91       	pop	r28
    bfa4:	1f 91       	pop	r17
    bfa6:	08 95       	ret

0000bfa8 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    bfa8:	ff 92       	push	r15
    bfaa:	0f 93       	push	r16
    bfac:	1f 93       	push	r17
    bfae:	cf 93       	push	r28
    bfb0:	df 93       	push	r29
    bfb2:	ec 01       	movw	r28, r24
    bfb4:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    bfb6:	20 e0       	ldi	r18, 0x00	; 0
    bfb8:	30 e0       	ldi	r19, 0x00	; 0
    bfba:	40 e0       	ldi	r20, 0x00	; 0
    bfbc:	5e e3       	ldi	r21, 0x3E	; 62
    bfbe:	6f 81       	ldd	r22, Y+7	; 0x07
    bfc0:	78 85       	ldd	r23, Y+8	; 0x08
    bfc2:	89 85       	ldd	r24, Y+9	; 0x09
    bfc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    bfc6:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    bfca:	20 e0       	ldi	r18, 0x00	; 0
    bfcc:	30 e0       	ldi	r19, 0x00	; 0
    bfce:	40 e4       	ldi	r20, 0x40	; 64
    bfd0:	50 e4       	ldi	r21, 0x40	; 64
    bfd2:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    bfd6:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    bfda:	8e e1       	ldi	r24, 0x1E	; 30
    bfdc:	68 9f       	mul	r22, r24
    bfde:	80 01       	movw	r16, r0
    bfe0:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    bfe2:	20 e0       	ldi	r18, 0x00	; 0
    bfe4:	30 e0       	ldi	r19, 0x00	; 0
    bfe6:	40 e0       	ldi	r20, 0x00	; 0
    bfe8:	5e e3       	ldi	r21, 0x3E	; 62
    bfea:	6b 81       	ldd	r22, Y+3	; 0x03
    bfec:	7c 81       	ldd	r23, Y+4	; 0x04
    bfee:	8d 81       	ldd	r24, Y+5	; 0x05
    bff0:	9e 81       	ldd	r25, Y+6	; 0x06
    bff2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    bff6:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    bffa:	06 0f       	add	r16, r22
    bffc:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    bffe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c000:	88 23       	and	r24, r24
    c002:	79 f0       	breq	.+30     	; 0xc022 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    c004:	40 e0       	ldi	r20, 0x00	; 0
    c006:	50 e0       	ldi	r21, 0x00	; 0
    c008:	61 e0       	ldi	r22, 0x01	; 1
    c00a:	8a e0       	ldi	r24, 0x0A	; 10
    c00c:	8f 0d       	add	r24, r15
    c00e:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    c012:	47 e0       	ldi	r20, 0x07	; 7
    c014:	65 e0       	ldi	r22, 0x05	; 5
    c016:	76 e8       	ldi	r23, 0x86	; 134
    c018:	c8 01       	movw	r24, r16
    c01a:	0e 94 a0 5f 	call	0xbf40	; 0xbf40 <drop_item>
		player->max_speed = MAX_SPEED;
    c01e:	82 e3       	ldi	r24, 0x32	; 50
    c020:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    c022:	89 8d       	ldd	r24, Y+25	; 0x19
    c024:	88 23       	and	r24, r24
    c026:	69 f0       	breq	.+26     	; 0xc042 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    c028:	40 e0       	ldi	r20, 0x00	; 0
    c02a:	50 e0       	ldi	r21, 0x00	; 0
    c02c:	61 e0       	ldi	r22, 0x01	; 1
    c02e:	8b e0       	ldi	r24, 0x0B	; 11
    c030:	8f 0d       	add	r24, r15
    c032:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    c036:	49 e0       	ldi	r20, 0x09	; 9
    c038:	6f ef       	ldi	r22, 0xFF	; 255
    c03a:	75 e8       	ldi	r23, 0x85	; 133
    c03c:	c8 01       	movw	r24, r16
    c03e:	0e 94 a0 5f 	call	0xbf40	; 0xbf40 <drop_item>
	}
	player->has_over_speed = false;
    c042:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    c044:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    c046:	8c 89       	ldd	r24, Y+20	; 0x14
    c048:	81 60       	ori	r24, 0x01	; 1
    c04a:	8c 8b       	std	Y+20, r24	; 0x14
}
    c04c:	df 91       	pop	r29
    c04e:	cf 91       	pop	r28
    c050:	1f 91       	pop	r17
    c052:	0f 91       	pop	r16
    c054:	ff 90       	pop	r15
    c056:	08 95       	ret

0000c058 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    c058:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    c05a:	70 e0       	ldi	r23, 0x00	; 0
    c05c:	8e e1       	ldi	r24, 0x1E	; 30
    c05e:	48 9f       	mul	r20, r24
    c060:	60 0d       	add	r22, r0
    c062:	71 1d       	adc	r23, r1
    c064:	11 24       	eor	r1, r1
	if (direction == D_UP)
    c066:	21 11       	cpse	r18, r1
    c068:	05 c0       	rjmp	.+10     	; 0xc074 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    c06a:	71 83       	std	Z+1, r23	; 0x01
    c06c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c06e:	6f 5f       	subi	r22, 0xFF	; 255
    c070:	7f 4f       	sbci	r23, 0xFF	; 255
    c072:	0c c0       	rjmp	.+24     	; 0xc08c <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    c074:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    c076:	21 30       	cpi	r18, 0x01	; 1
    c078:	11 f4       	brne	.+4      	; 0xc07e <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    c07a:	01 96       	adiw	r24, 0x01	; 1
    c07c:	03 c0       	rjmp	.+6      	; 0xc084 <get_interesting_tile_indexes_shot+0x2c>
    c07e:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    c080:	22 30       	cpi	r18, 0x02	; 2
    c082:	39 f4       	brne	.+14     	; 0xc092 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    c084:	91 83       	std	Z+1, r25	; 0x01
    c086:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c088:	61 5e       	subi	r22, 0xE1	; 225
    c08a:	7f 4f       	sbci	r23, 0xFF	; 255
    c08c:	73 83       	std	Z+3, r23	; 0x03
    c08e:	62 83       	std	Z+2, r22	; 0x02
    c090:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    c092:	71 83       	std	Z+1, r23	; 0x01
    c094:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c096:	93 83       	std	Z+3, r25	; 0x03
    c098:	82 83       	std	Z+2, r24	; 0x02
    c09a:	08 95       	ret

0000c09c <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    c09c:	ef 92       	push	r14
    c09e:	ff 92       	push	r15
    c0a0:	0f 93       	push	r16
    c0a2:	1f 93       	push	r17
    c0a4:	cf 93       	push	r28
    c0a6:	df 93       	push	r29
    c0a8:	ec 01       	movw	r28, r24
    c0aa:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    c0ac:	8e e1       	ldi	r24, 0x1E	; 30
    c0ae:	e8 2e       	mov	r14, r24
    c0b0:	f1 2c       	mov	r15, r1
    c0b2:	cb 01       	movw	r24, r22
    c0b4:	b7 01       	movw	r22, r14
    c0b6:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c0ba:	6d 5f       	subi	r22, 0xFD	; 253
    c0bc:	40 e0       	ldi	r20, 0x00	; 0
    c0be:	50 e0       	ldi	r21, 0x00	; 0
    c0c0:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    c0c4:	88 81       	ld	r24, Y
    c0c6:	fe 01       	movw	r30, r28
    c0c8:	9e e0       	ldi	r25, 0x0E	; 14
    c0ca:	89 9f       	mul	r24, r25
    c0cc:	e0 0d       	add	r30, r0
    c0ce:	f1 1d       	adc	r31, r1
    c0d0:	11 24       	eor	r1, r1
    c0d2:	85 85       	ldd	r24, Z+13	; 0x0d
    c0d4:	96 85       	ldd	r25, Z+14	; 0x0e
    c0d6:	00 97       	sbiw	r24, 0x00	; 0
    c0d8:	41 f0       	breq	.+16     	; 0xc0ea <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    c0da:	b7 01       	movw	r22, r14
    c0dc:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c0e0:	6d 5f       	subi	r22, 0xFD	; 253
    c0e2:	40 e0       	ldi	r20, 0x00	; 0
    c0e4:	50 e0       	ldi	r21, 0x00	; 0
    c0e6:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    c0ea:	88 81       	ld	r24, Y
    c0ec:	fe 01       	movw	r30, r28
    c0ee:	9e e0       	ldi	r25, 0x0E	; 14
    c0f0:	89 9f       	mul	r24, r25
    c0f2:	e0 0d       	add	r30, r0
    c0f4:	f1 1d       	adc	r31, r1
    c0f6:	11 24       	eor	r1, r1
    c0f8:	16 87       	std	Z+14, r17	; 0x0e
    c0fa:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    c0fc:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    c0fe:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    c100:	82 30       	cpi	r24, 0x02	; 2
    c102:	11 f0       	breq	.+4      	; 0xc108 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    c104:	88 83       	st	Y, r24
    c106:	01 c0       	rjmp	.+2      	; 0xc10a <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    c108:	18 82       	st	Y, r1
	}
}
    c10a:	df 91       	pop	r29
    c10c:	cf 91       	pop	r28
    c10e:	1f 91       	pop	r17
    c110:	0f 91       	pop	r16
    c112:	ff 90       	pop	r15
    c114:	ef 90       	pop	r14
    c116:	08 95       	ret

0000c118 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    c118:	fb 01       	movw	r30, r22
	switch (tile_type)
    c11a:	84 30       	cpi	r24, 0x04	; 4
    c11c:	59 f0       	breq	.+22     	; 0xc134 <richochet+0x1c>
    c11e:	18 f4       	brcc	.+6      	; 0xc126 <richochet+0xe>
    c120:	83 30       	cpi	r24, 0x03	; 3
    c122:	31 f0       	breq	.+12     	; 0xc130 <richochet+0x18>
    c124:	08 95       	ret
    c126:	85 30       	cpi	r24, 0x05	; 5
    c128:	19 f0       	breq	.+6      	; 0xc130 <richochet+0x18>
    c12a:	86 30       	cpi	r24, 0x06	; 6
    c12c:	19 f0       	breq	.+6      	; 0xc134 <richochet+0x1c>
    c12e:	08 95       	ret
				sprite->direction = D_LEFT;
			break;
		case L_BL:
			sprite->direction = D_UP;
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
				sprite->direction = D_RIGHT;
    c130:	81 e0       	ldi	r24, 0x01	; 1
    c132:	01 c0       	rjmp	.+2      	; 0xc136 <richochet+0x1e>
			break;
		case L_BR:
			sprite->direction = D_UP;
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
				sprite->direction = D_LEFT;
    c134:	83 e0       	ldi	r24, 0x03	; 3
    c136:	80 83       	st	Z, r24
    c138:	08 95       	ret

0000c13a <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    c13a:	2f 92       	push	r2
    c13c:	3f 92       	push	r3
    c13e:	4f 92       	push	r4
    c140:	5f 92       	push	r5
    c142:	6f 92       	push	r6
    c144:	7f 92       	push	r7
    c146:	8f 92       	push	r8
    c148:	9f 92       	push	r9
    c14a:	af 92       	push	r10
    c14c:	bf 92       	push	r11
    c14e:	cf 92       	push	r12
    c150:	df 92       	push	r13
    c152:	ef 92       	push	r14
    c154:	ff 92       	push	r15
    c156:	0f 93       	push	r16
    c158:	1f 93       	push	r17
    c15a:	cf 93       	push	r28
    c15c:	df 93       	push	r29
    c15e:	00 d0       	rcall	.+0      	; 0xc160 <collision_detect_shot+0x26>
    c160:	00 d0       	rcall	.+0      	; 0xc162 <collision_detect_shot+0x28>
    c162:	1f 92       	push	r1
    c164:	cd b7       	in	r28, 0x3d	; 61
    c166:	de b7       	in	r29, 0x3e	; 62
    c168:	3c 01       	movw	r6, r24
    c16a:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    c16c:	1a 82       	std	Y+2, r1	; 0x02
    c16e:	19 82       	std	Y+1, r1	; 0x01
    c170:	1c 82       	std	Y+4, r1	; 0x04
    c172:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    c174:	20 e0       	ldi	r18, 0x00	; 0
    c176:	30 e0       	ldi	r19, 0x00	; 0
    c178:	40 e0       	ldi	r20, 0x00	; 0
    c17a:	5e e3       	ldi	r21, 0x3E	; 62
    c17c:	db 01       	movw	r26, r22
    c17e:	17 96       	adiw	r26, 0x07	; 7
    c180:	6d 91       	ld	r22, X+
    c182:	7d 91       	ld	r23, X+
    c184:	8d 91       	ld	r24, X+
    c186:	9c 91       	ld	r25, X
    c188:	1a 97       	sbiw	r26, 0x0a	; 10
    c18a:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    c18e:	20 e0       	ldi	r18, 0x00	; 0
    c190:	30 e0       	ldi	r19, 0x00	; 0
    c192:	40 e4       	ldi	r20, 0x40	; 64
    c194:	50 e4       	ldi	r21, 0x40	; 64
    c196:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c19a:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c19e:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    c1a0:	20 e0       	ldi	r18, 0x00	; 0
    c1a2:	30 e0       	ldi	r19, 0x00	; 0
    c1a4:	40 e0       	ldi	r20, 0x00	; 0
    c1a6:	5e e3       	ldi	r21, 0x3E	; 62
    c1a8:	f4 01       	movw	r30, r8
    c1aa:	63 81       	ldd	r22, Z+3	; 0x03
    c1ac:	74 81       	ldd	r23, Z+4	; 0x04
    c1ae:	85 81       	ldd	r24, Z+5	; 0x05
    c1b0:	96 81       	ldd	r25, Z+6	; 0x06
    c1b2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    c1b6:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    c1ba:	d4 01       	movw	r26, r8
    c1bc:	2c 91       	ld	r18, X
    c1be:	41 2f       	mov	r20, r17
    c1c0:	ce 01       	movw	r24, r28
    c1c2:	01 96       	adiw	r24, 0x01	; 1
    c1c4:	0e 94 2c 60 	call	0xc058	; 0xc058 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    c1c8:	c4 01       	movw	r24, r8
    c1ca:	0e 94 52 5f 	call	0xbea4	; 0xbea4 <collision_detect_boundries>
    c1ce:	88 23       	and	r24, r24
    c1d0:	69 f0       	breq	.+26     	; 0xc1ec <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    c1d2:	f4 01       	movw	r30, r8
    c1d4:	63 85       	ldd	r22, Z+11	; 0x0b
    c1d6:	c4 01       	movw	r24, r8
    c1d8:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
		player->active_shots--;
    c1dc:	d3 01       	movw	r26, r6
    c1de:	51 96       	adiw	r26, 0x11	; 17
    c1e0:	8c 91       	ld	r24, X
    c1e2:	51 97       	sbiw	r26, 0x11	; 17
    c1e4:	81 50       	subi	r24, 0x01	; 1
    c1e6:	51 96       	adiw	r26, 0x11	; 17
    c1e8:	8c 93       	st	X, r24
		return;
    c1ea:	aa c1       	rjmp	.+852    	; 0xc540 <collision_detect_shot+0x406>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    c1ec:	b4 01       	movw	r22, r8
    c1ee:	86 e3       	ldi	r24, 0x36	; 54
    c1f0:	9c e0       	ldi	r25, 0x0C	; 12
    c1f2:	0e 94 a5 5e 	call	0xbd4a	; 0xbd4a <player_shot>
    c1f6:	88 23       	and	r24, r24
    c1f8:	b9 f0       	breq	.+46     	; 0xc228 <collision_detect_shot+0xee>
    c1fa:	80 91 4a 0c 	lds	r24, 0x0C4A
    c1fe:	80 fd       	sbrc	r24, 0
    c200:	13 c0       	rjmp	.+38     	; 0xc228 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    c202:	80 91 b4 0f 	lds	r24, 0x0FB4
    c206:	8f 5f       	subi	r24, 0xFF	; 255
    c208:	80 93 b4 0f 	sts	0x0FB4, r24
		player2.score++;
    c20c:	80 91 b3 0f 	lds	r24, 0x0FB3
    c210:	8f 5f       	subi	r24, 0xFF	; 255
    c212:	80 93 b3 0f 	sts	0x0FB3, r24
		render_score(&player2, 15);
    c216:	6f e0       	ldi	r22, 0x0F	; 15
    c218:	84 ea       	ldi	r24, 0xA4	; 164
    c21a:	9f e0       	ldi	r25, 0x0F	; 15
    c21c:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    c220:	06 e3       	ldi	r16, 0x36	; 54
    c222:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    c224:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    c226:	54 c0       	rjmp	.+168    	; 0xc2d0 <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    c228:	b4 01       	movw	r22, r8
    c22a:	84 ea       	ldi	r24, 0xA4	; 164
    c22c:	9f e0       	ldi	r25, 0x0F	; 15
    c22e:	0e 94 a5 5e 	call	0xbd4a	; 0xbd4a <player_shot>
    c232:	90 91 0f 0c 	lds	r25, 0x0C0F
    c236:	88 23       	and	r24, r24
    c238:	d1 f0       	breq	.+52     	; 0xc26e <collision_detect_shot+0x134>
    c23a:	80 91 b8 0f 	lds	r24, 0x0FB8
    c23e:	80 fd       	sbrc	r24, 0
    c240:	16 c0       	rjmp	.+44     	; 0xc26e <collision_detect_shot+0x134>
    c242:	91 11       	cpse	r25, r1
    c244:	14 c0       	rjmp	.+40     	; 0xc26e <collision_detect_shot+0x134>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    c246:	80 91 46 0c 	lds	r24, 0x0C46
    c24a:	8f 5f       	subi	r24, 0xFF	; 255
    c24c:	80 93 46 0c 	sts	0x0C46, r24
		player1.score++;
    c250:	80 91 45 0c 	lds	r24, 0x0C45
    c254:	8f 5f       	subi	r24, 0xFF	; 255
    c256:	80 93 45 0c 	sts	0x0C45, r24
		render_score(&player1, 0);
    c25a:	60 e0       	ldi	r22, 0x00	; 0
    c25c:	86 e3       	ldi	r24, 0x36	; 54
    c25e:	9c e0       	ldi	r25, 0x0C	; 12
    c260:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    c264:	04 ea       	ldi	r16, 0xA4	; 164
    c266:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    c268:	6f e0       	ldi	r22, 0x0F	; 15
    c26a:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    c26c:	31 c0       	rjmp	.+98     	; 0xc2d0 <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    c26e:	94 30       	cpi	r25, 0x04	; 4
    c270:	91 f5       	brne	.+100    	; 0xc2d6 <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    c272:	b4 01       	movw	r22, r8
    c274:	8d e6       	ldi	r24, 0x6D	; 109
    c276:	90 e1       	ldi	r25, 0x10	; 16
    c278:	0e 94 04 5f 	call	0xbe08	; 0xbe08 <turret_shot>
    c27c:	88 23       	and	r24, r24
    c27e:	41 f0       	breq	.+16     	; 0xc290 <collision_detect_shot+0x156>
		{
			turret1.lives--;
    c280:	80 91 78 10 	lds	r24, 0x1078
    c284:	81 50       	subi	r24, 0x01	; 1
    c286:	80 93 78 10 	sts	0x1078, r24
			init_shot_state(shot, shot->shot_type);
    c28a:	f4 01       	movw	r30, r8
    c28c:	63 85       	ldd	r22, Z+11	; 0x0b
    c28e:	0f c0       	rjmp	.+30     	; 0xc2ae <collision_detect_shot+0x174>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    c290:	b4 01       	movw	r22, r8
    c292:	88 e3       	ldi	r24, 0x38	; 56
    c294:	90 e1       	ldi	r25, 0x10	; 16
    c296:	0e 94 04 5f 	call	0xbe08	; 0xbe08 <turret_shot>
    c29a:	88 23       	and	r24, r24
    c29c:	e1 f0       	breq	.+56     	; 0xc2d6 <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    c29e:	80 91 43 10 	lds	r24, 0x1043
    c2a2:	81 50       	subi	r24, 0x01	; 1
    c2a4:	80 93 43 10 	sts	0x1043, r24
			init_shot_state(shot, shot->shot_type);
    c2a8:	d4 01       	movw	r26, r8
    c2aa:	1b 96       	adiw	r26, 0x0b	; 11
    c2ac:	6c 91       	ld	r22, X
    c2ae:	c4 01       	movw	r24, r8
    c2b0:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
			game.boss_fight_player->active_shots--;
    c2b4:	e0 91 12 0c 	lds	r30, 0x0C12
    c2b8:	f0 91 13 0c 	lds	r31, 0x0C13
    c2bc:	81 89       	ldd	r24, Z+17	; 0x11
    c2be:	81 50       	subi	r24, 0x01	; 1
    c2c0:	81 8b       	std	Z+17, r24	; 0x11
			SFX_TANK_EXPLODE;
    c2c2:	2f ef       	ldi	r18, 0xFF	; 255
    c2c4:	40 e1       	ldi	r20, 0x10	; 16
    c2c6:	67 e0       	ldi	r22, 0x07	; 7
    c2c8:	84 e0       	ldi	r24, 0x04	; 4
    c2ca:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
    c2ce:	03 c0       	rjmp	.+6      	; 0xc2d6 <collision_detect_shot+0x19c>
		}
	}
	if (p)
    c2d0:	01 15       	cp	r16, r1
    c2d2:	11 05       	cpc	r17, r1
    c2d4:	59 f4       	brne	.+22     	; 0xc2ec <collision_detect_shot+0x1b2>
    c2d6:	fe 01       	movw	r30, r28
    c2d8:	31 96       	adiw	r30, 0x01	; 1
    c2da:	2f 01       	movw	r4, r30
    c2dc:	1d 82       	std	Y+5, r1	; 0x05
    c2de:	f1 2c       	mov	r15, r1
    c2e0:	d1 2c       	mov	r13, r1
    c2e2:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c2e4:	5e e1       	ldi	r21, 0x1E	; 30
    c2e6:	25 2e       	mov	r2, r21
    c2e8:	31 2c       	mov	r3, r1
    c2ea:	44 c0       	rjmp	.+136    	; 0xc374 <collision_detect_shot+0x23a>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    c2ec:	d4 01       	movw	r26, r8
    c2ee:	1b 96       	adiw	r26, 0x0b	; 11
    c2f0:	6c 91       	ld	r22, X
    c2f2:	c4 01       	movw	r24, r8
    c2f4:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
		player->active_shots--;
    c2f8:	f3 01       	movw	r30, r6
    c2fa:	81 89       	ldd	r24, Z+17	; 0x11
    c2fc:	81 50       	subi	r24, 0x01	; 1
    c2fe:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    c300:	6f 2d       	mov	r22, r15
    c302:	c8 01       	movw	r24, r16
    c304:	0e 94 d4 5f 	call	0xbfa8	; 0xbfa8 <kill_player>
		SFX_TANK_EXPLODE;
    c308:	2f ef       	ldi	r18, 0xFF	; 255
    c30a:	40 e1       	ldi	r20, 0x10	; 16
    c30c:	67 e0       	ldi	r22, 0x07	; 7
    c30e:	10 c1       	rjmp	.+544    	; 0xc530 <collision_detect_shot+0x3f6>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    c310:	c5 01       	movw	r24, r10
    c312:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <solid_directional_tile>
    c316:	88 23       	and	r24, r24
    c318:	c1 f1       	breq	.+112    	; 0xc38a <collision_detect_shot+0x250>
    c31a:	20 e0       	ldi	r18, 0x00	; 0
    c31c:	30 e0       	ldi	r19, 0x00	; 0
    c31e:	40 e0       	ldi	r20, 0x00	; 0
    c320:	50 e4       	ldi	r21, 0x40	; 64
    c322:	f4 01       	movw	r30, r8
    c324:	67 81       	ldd	r22, Z+7	; 0x07
    c326:	70 85       	ldd	r23, Z+8	; 0x08
    c328:	81 85       	ldd	r24, Z+9	; 0x09
    c32a:	92 85       	ldd	r25, Z+10	; 0x0a
    c32c:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c330:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c334:	c6 2e       	mov	r12, r22
    c336:	20 e0       	ldi	r18, 0x00	; 0
    c338:	30 e0       	ldi	r19, 0x00	; 0
    c33a:	40 e0       	ldi	r20, 0x00	; 0
    c33c:	50 e4       	ldi	r21, 0x40	; 64
    c33e:	d4 01       	movw	r26, r8
    c340:	13 96       	adiw	r26, 0x03	; 3
    c342:	6d 91       	ld	r22, X+
    c344:	7d 91       	ld	r23, X+
    c346:	8d 91       	ld	r24, X+
    c348:	9c 91       	ld	r25, X
    c34a:	16 97       	sbiw	r26, 0x06	; 6
    c34c:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c350:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c354:	04 e0       	ldi	r16, 0x04	; 4
    c356:	24 e0       	ldi	r18, 0x04	; 4
    c358:	4c 2d       	mov	r20, r12
    c35a:	c5 01       	movw	r24, r10
    c35c:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <collides_directional_tile>
    c360:	88 23       	and	r24, r24
    c362:	99 f0       	breq	.+38     	; 0xc38a <collision_detect_shot+0x250>
		{
			hit = hit | HIT_ANGLE;
    c364:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    c366:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    c368:	bd 81       	ldd	r27, Y+5	; 0x05
    c36a:	b1 30       	cpi	r27, 0x01	; 1
    c36c:	09 f4       	brne	.+2      	; 0xc370 <collision_detect_shot+0x236>
    c36e:	88 c0       	rjmp	.+272    	; 0xc480 <collision_detect_shot+0x346>
    c370:	f1 e0       	ldi	r31, 0x01	; 1
    c372:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    c374:	d2 01       	movw	r26, r4
    c376:	ad 90       	ld	r10, X+
    c378:	bd 90       	ld	r11, X+
    c37a:	2d 01       	movw	r4, r26
    c37c:	f5 01       	movw	r30, r10
    c37e:	eb 54       	subi	r30, 0x4B	; 75
    c380:	f3 4f       	sbci	r31, 0xF3	; 243
    c382:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    c384:	ee 20       	and	r14, r14
    c386:	81 f3       	breq	.-32     	; 0xc368 <collision_detect_shot+0x22e>
    c388:	c3 cf       	rjmp	.-122    	; 0xc310 <collision_detect_shot+0x1d6>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c38a:	b1 e0       	ldi	r27, 0x01	; 1
    c38c:	eb 12       	cpse	r14, r27
    c38e:	3b c0       	rjmp	.+118    	; 0xc406 <collision_detect_shot+0x2cc>
    c390:	c5 01       	movw	r24, r10
    c392:	b1 01       	movw	r22, r2
    c394:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c398:	6d 5f       	subi	r22, 0xFD	; 253
    c39a:	7f 4f       	sbci	r23, 0xFF	; 255
    c39c:	e6 2e       	mov	r14, r22
    c39e:	ee 0c       	add	r14, r14
    c3a0:	ee 0c       	add	r14, r14
    c3a2:	ee 0c       	add	r14, r14
    c3a4:	08 2f       	mov	r16, r24
    c3a6:	00 0f       	add	r16, r16
    c3a8:	00 0f       	add	r16, r16
    c3aa:	00 0f       	add	r16, r16
    c3ac:	20 e0       	ldi	r18, 0x00	; 0
    c3ae:	30 e0       	ldi	r19, 0x00	; 0
    c3b0:	40 e0       	ldi	r20, 0x00	; 0
    c3b2:	50 e4       	ldi	r21, 0x40	; 64
    c3b4:	f4 01       	movw	r30, r8
    c3b6:	67 81       	ldd	r22, Z+7	; 0x07
    c3b8:	70 85       	ldd	r23, Z+8	; 0x08
    c3ba:	81 85       	ldd	r24, Z+9	; 0x09
    c3bc:	92 85       	ldd	r25, Z+10	; 0x0a
    c3be:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c3c2:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c3c6:	b6 2e       	mov	r11, r22
    c3c8:	20 e0       	ldi	r18, 0x00	; 0
    c3ca:	30 e0       	ldi	r19, 0x00	; 0
    c3cc:	40 e0       	ldi	r20, 0x00	; 0
    c3ce:	50 e4       	ldi	r21, 0x40	; 64
    c3d0:	d4 01       	movw	r26, r8
    c3d2:	13 96       	adiw	r26, 0x03	; 3
    c3d4:	6d 91       	ld	r22, X+
    c3d6:	7d 91       	ld	r23, X+
    c3d8:	8d 91       	ld	r24, X+
    c3da:	9c 91       	ld	r25, X
    c3dc:	16 97       	sbiw	r26, 0x06	; 6
    c3de:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c3e2:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c3e6:	86 2f       	mov	r24, r22
    c3e8:	38 e0       	ldi	r19, 0x08	; 8
    c3ea:	a3 2e       	mov	r10, r19
    c3ec:	48 e0       	ldi	r20, 0x08	; 8
    c3ee:	c4 2e       	mov	r12, r20
    c3f0:	24 e0       	ldi	r18, 0x04	; 4
    c3f2:	44 e0       	ldi	r20, 0x04	; 4
    c3f4:	6b 2d       	mov	r22, r11
    c3f6:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
    c3fa:	88 23       	and	r24, r24
    c3fc:	09 f4       	brne	.+2      	; 0xc400 <collision_detect_shot+0x2c6>
    c3fe:	b4 cf       	rjmp	.-152    	; 0xc368 <collision_detect_shot+0x22e>
		{
			hit = hit | HIT_BRICK;
    c400:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    c402:	dd 80       	ldd	r13, Y+5	; 0x05
    c404:	b1 cf       	rjmp	.-158    	; 0xc368 <collision_detect_shot+0x22e>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c406:	b2 e0       	ldi	r27, 0x02	; 2
    c408:	eb 12       	cpse	r14, r27
    c40a:	ae cf       	rjmp	.-164    	; 0xc368 <collision_detect_shot+0x22e>
    c40c:	c5 01       	movw	r24, r10
    c40e:	b1 01       	movw	r22, r2
    c410:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c414:	6d 5f       	subi	r22, 0xFD	; 253
    c416:	7f 4f       	sbci	r23, 0xFF	; 255
    c418:	e6 2e       	mov	r14, r22
    c41a:	ee 0c       	add	r14, r14
    c41c:	ee 0c       	add	r14, r14
    c41e:	ee 0c       	add	r14, r14
    c420:	08 2f       	mov	r16, r24
    c422:	00 0f       	add	r16, r16
    c424:	00 0f       	add	r16, r16
    c426:	00 0f       	add	r16, r16
    c428:	20 e0       	ldi	r18, 0x00	; 0
    c42a:	30 e0       	ldi	r19, 0x00	; 0
    c42c:	40 e0       	ldi	r20, 0x00	; 0
    c42e:	50 e4       	ldi	r21, 0x40	; 64
    c430:	f4 01       	movw	r30, r8
    c432:	67 81       	ldd	r22, Z+7	; 0x07
    c434:	70 85       	ldd	r23, Z+8	; 0x08
    c436:	81 85       	ldd	r24, Z+9	; 0x09
    c438:	92 85       	ldd	r25, Z+10	; 0x0a
    c43a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c43e:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c442:	b6 2e       	mov	r11, r22
    c444:	20 e0       	ldi	r18, 0x00	; 0
    c446:	30 e0       	ldi	r19, 0x00	; 0
    c448:	40 e0       	ldi	r20, 0x00	; 0
    c44a:	50 e4       	ldi	r21, 0x40	; 64
    c44c:	d4 01       	movw	r26, r8
    c44e:	13 96       	adiw	r26, 0x03	; 3
    c450:	6d 91       	ld	r22, X+
    c452:	7d 91       	ld	r23, X+
    c454:	8d 91       	ld	r24, X+
    c456:	9c 91       	ld	r25, X
    c458:	16 97       	sbiw	r26, 0x06	; 6
    c45a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c45e:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c462:	86 2f       	mov	r24, r22
    c464:	98 e0       	ldi	r25, 0x08	; 8
    c466:	a9 2e       	mov	r10, r25
    c468:	28 e0       	ldi	r18, 0x08	; 8
    c46a:	c2 2e       	mov	r12, r18
    c46c:	24 e0       	ldi	r18, 0x04	; 4
    c46e:	44 e0       	ldi	r20, 0x04	; 4
    c470:	6b 2d       	mov	r22, r11
    c472:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
    c476:	88 23       	and	r24, r24
    c478:	09 f4       	brne	.+2      	; 0xc47c <collision_detect_shot+0x342>
    c47a:	76 cf       	rjmp	.-276    	; 0xc368 <collision_detect_shot+0x22e>
        {
		    hit = hit | HIT_METAL;
    c47c:	11 60       	ori	r17, 0x01	; 1
    c47e:	74 cf       	rjmp	.-280    	; 0xc368 <collision_detect_shot+0x22e>
        }
	}
	
	if (hit & HIT_ANGLE)
    c480:	12 ff       	sbrs	r17, 2
    c482:	24 c0       	rjmp	.+72     	; 0xc4cc <collision_detect_shot+0x392>
	{
		recoil_sprite_fine(&shot->shared);
    c484:	c4 01       	movw	r24, r8
    c486:	0e 94 85 5d 	call	0xbb0a	; 0xbb0a <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    c48a:	b4 01       	movw	r22, r8
    c48c:	8f 2d       	mov	r24, r15
    c48e:	0e 94 8c 60 	call	0xc118	; 0xc118 <richochet>
		shot->rebounds--;
    c492:	f4 01       	movw	r30, r8
    c494:	85 85       	ldd	r24, Z+13	; 0x0d
    c496:	81 50       	subi	r24, 0x01	; 1
    c498:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    c49a:	81 11       	cpse	r24, r1
    c49c:	0b c0       	rjmp	.+22     	; 0xc4b4 <collision_detect_shot+0x37a>
		{
			init_shot_state(shot, shot->shot_type);
    c49e:	63 85       	ldd	r22, Z+11	; 0x0b
    c4a0:	c4 01       	movw	r24, r8
    c4a2:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
			player->active_shots--;
    c4a6:	d3 01       	movw	r26, r6
    c4a8:	51 96       	adiw	r26, 0x11	; 17
    c4aa:	8c 91       	ld	r24, X
    c4ac:	51 97       	sbiw	r26, 0x11	; 17
    c4ae:	81 50       	subi	r24, 0x01	; 1
    c4b0:	51 96       	adiw	r26, 0x11	; 17
    c4b2:	8c 93       	st	X, r24
		}
		SFX_METAL;
    c4b4:	80 91 4a 0c 	lds	r24, 0x0C4A
    c4b8:	80 fd       	sbrc	r24, 0
    c4ba:	42 c0       	rjmp	.+132    	; 0xc540 <collision_detect_shot+0x406>
    c4bc:	80 91 b8 0f 	lds	r24, 0x0FB8
    c4c0:	80 fd       	sbrc	r24, 0
    c4c2:	3e c0       	rjmp	.+124    	; 0xc540 <collision_detect_shot+0x406>
    c4c4:	2f ef       	ldi	r18, 0xFF	; 255
    c4c6:	47 e1       	ldi	r20, 0x17	; 23
    c4c8:	64 e0       	ldi	r22, 0x04	; 4
    c4ca:	32 c0       	rjmp	.+100    	; 0xc530 <collision_detect_shot+0x3f6>
	}
	else if (hit & HIT_BRICK)
    c4cc:	11 ff       	sbrs	r17, 1
    c4ce:	34 c0       	rjmp	.+104    	; 0xc538 <collision_detect_shot+0x3fe>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    c4d0:	fe 01       	movw	r30, r28
    c4d2:	31 96       	adiw	r30, 0x01	; 1
    c4d4:	7f 01       	movw	r14, r30
    c4d6:	ed 0c       	add	r14, r13
    c4d8:	f1 1c       	adc	r15, r1
    c4da:	ed 0c       	add	r14, r13
    c4dc:	f1 1c       	adc	r15, r1
    c4de:	d7 01       	movw	r26, r14
    c4e0:	6d 91       	ld	r22, X+
    c4e2:	7c 91       	ld	r23, X
    c4e4:	89 e1       	ldi	r24, 0x19	; 25
    c4e6:	9c e0       	ldi	r25, 0x0C	; 12
    c4e8:	0e 94 4e 60 	call	0xc09c	; 0xc09c <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    c4ec:	d7 01       	movw	r26, r14
    c4ee:	ed 91       	ld	r30, X+
    c4f0:	fc 91       	ld	r31, X
    c4f2:	eb 54       	subi	r30, 0x4B	; 75
    c4f4:	f3 4f       	sbci	r31, 0xF3	; 243
    c4f6:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    c4f8:	f4 01       	movw	r30, r8
    c4fa:	84 85       	ldd	r24, Z+12	; 0x0c
    c4fc:	81 50       	subi	r24, 0x01	; 1
    c4fe:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    c500:	81 11       	cpse	r24, r1
    c502:	0b c0       	rjmp	.+22     	; 0xc51a <collision_detect_shot+0x3e0>
		{
			init_shot_state(shot, shot->shot_type);
    c504:	63 85       	ldd	r22, Z+11	; 0x0b
    c506:	c4 01       	movw	r24, r8
    c508:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
			player->active_shots--;
    c50c:	d3 01       	movw	r26, r6
    c50e:	51 96       	adiw	r26, 0x11	; 17
    c510:	8c 91       	ld	r24, X
    c512:	51 97       	sbiw	r26, 0x11	; 17
    c514:	81 50       	subi	r24, 0x01	; 1
    c516:	51 96       	adiw	r26, 0x11	; 17
    c518:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    c51a:	80 91 4a 0c 	lds	r24, 0x0C4A
    c51e:	80 fd       	sbrc	r24, 0
    c520:	0f c0       	rjmp	.+30     	; 0xc540 <collision_detect_shot+0x406>
    c522:	80 91 b8 0f 	lds	r24, 0x0FB8
    c526:	80 fd       	sbrc	r24, 0
    c528:	0b c0       	rjmp	.+22     	; 0xc540 <collision_detect_shot+0x406>
    c52a:	2f ed       	ldi	r18, 0xDF	; 223
    c52c:	47 e1       	ldi	r20, 0x17	; 23
    c52e:	61 e0       	ldi	r22, 0x01	; 1
    c530:	84 e0       	ldi	r24, 0x04	; 4
    c532:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
    c536:	04 c0       	rjmp	.+8      	; 0xc540 <collision_detect_shot+0x406>
	}
	else if (hit & HIT_METAL)
    c538:	10 ff       	sbrs	r17, 0
    c53a:	02 c0       	rjmp	.+4      	; 0xc540 <collision_detect_shot+0x406>
	{
        init_shot_state(shot, shot->shot_type);
    c53c:	f4 01       	movw	r30, r8
    c53e:	af cf       	rjmp	.-162    	; 0xc49e <collision_detect_shot+0x364>
        player->active_shots--;
        SFX_METAL;
	}
}
    c540:	0f 90       	pop	r0
    c542:	0f 90       	pop	r0
    c544:	0f 90       	pop	r0
    c546:	0f 90       	pop	r0
    c548:	0f 90       	pop	r0
    c54a:	df 91       	pop	r29
    c54c:	cf 91       	pop	r28
    c54e:	1f 91       	pop	r17
    c550:	0f 91       	pop	r16
    c552:	ff 90       	pop	r15
    c554:	ef 90       	pop	r14
    c556:	df 90       	pop	r13
    c558:	cf 90       	pop	r12
    c55a:	bf 90       	pop	r11
    c55c:	af 90       	pop	r10
    c55e:	9f 90       	pop	r9
    c560:	8f 90       	pop	r8
    c562:	7f 90       	pop	r7
    c564:	6f 90       	pop	r6
    c566:	5f 90       	pop	r5
    c568:	4f 90       	pop	r4
    c56a:	3f 90       	pop	r3
    c56c:	2f 90       	pop	r2
    c56e:	08 95       	ret

0000c570 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    c570:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    c572:	70 e0       	ldi	r23, 0x00	; 0
    c574:	8e e1       	ldi	r24, 0x1E	; 30
    c576:	48 9f       	mul	r20, r24
    c578:	60 0d       	add	r22, r0
    c57a:	71 1d       	adc	r23, r1
    c57c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    c57e:	21 11       	cpse	r18, r1
    c580:	09 c0       	rjmp	.+18     	; 0xc594 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    c582:	71 83       	std	Z+1, r23	; 0x01
    c584:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c586:	cb 01       	movw	r24, r22
    c588:	01 96       	adiw	r24, 0x01	; 1
    c58a:	93 83       	std	Z+3, r25	; 0x03
    c58c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c58e:	6e 5f       	subi	r22, 0xFE	; 254
    c590:	7f 4f       	sbci	r23, 0xFF	; 255
    c592:	12 c0       	rjmp	.+36     	; 0xc5b8 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    c594:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    c596:	21 30       	cpi	r18, 0x01	; 1
    c598:	29 f4       	brne	.+10     	; 0xc5a4 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    c59a:	02 96       	adiw	r24, 0x02	; 2
    c59c:	91 83       	std	Z+1, r25	; 0x01
    c59e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c5a0:	4e 96       	adiw	r24, 0x1e	; 30
    c5a2:	06 c0       	rjmp	.+12     	; 0xc5b0 <get_interesting_tile_indexes+0x40>
    c5a4:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c5a6:	22 30       	cpi	r18, 0x02	; 2
    c5a8:	51 f4       	brne	.+20     	; 0xc5be <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    c5aa:	91 83       	std	Z+1, r25	; 0x01
    c5ac:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c5ae:	01 96       	adiw	r24, 0x01	; 1
    c5b0:	93 83       	std	Z+3, r25	; 0x03
    c5b2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c5b4:	62 5c       	subi	r22, 0xC2	; 194
    c5b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5b8:	75 83       	std	Z+5, r23	; 0x05
    c5ba:	64 83       	std	Z+4, r22	; 0x04
    c5bc:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    c5be:	71 83       	std	Z+1, r23	; 0x01
    c5c0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c5c2:	62 5e       	subi	r22, 0xE2	; 226
    c5c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c6:	73 83       	std	Z+3, r23	; 0x03
    c5c8:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    c5ca:	95 83       	std	Z+5, r25	; 0x05
    c5cc:	84 83       	std	Z+4, r24	; 0x04
    c5ce:	08 95       	ret

0000c5d0 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c5d0:	1f 93       	push	r17
    c5d2:	cf 93       	push	r28
    c5d4:	df 93       	push	r29
    c5d6:	fc 01       	movw	r30, r24
    c5d8:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    c5da:	54 96       	adiw	r26, 0x14	; 20
    c5dc:	8c 91       	ld	r24, X
    c5de:	54 97       	sbiw	r26, 0x14	; 20
    c5e0:	80 fd       	sbrc	r24, 0
    c5e2:	13 c0       	rjmp	.+38     	; 0xc60a <explode_player+0x3a>
    c5e4:	12 2f       	mov	r17, r18
    c5e6:	64 2f       	mov	r22, r20
    c5e8:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c5ea:	80 89       	ldd	r24, Z+16	; 0x10
    c5ec:	8f 5f       	subi	r24, 0xFF	; 255
    c5ee:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c5f0:	87 85       	ldd	r24, Z+15	; 0x0f
    c5f2:	8f 5f       	subi	r24, 0xFF	; 255
    c5f4:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c5f6:	cf 01       	movw	r24, r30
    c5f8:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <render_score>
		kill_player(other_player, other_player_hud_x);
    c5fc:	61 2f       	mov	r22, r17
    c5fe:	ce 01       	movw	r24, r28
	}
}
    c600:	df 91       	pop	r29
    c602:	cf 91       	pop	r28
    c604:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c606:	0c 94 d4 5f 	jmp	0xbfa8	; 0xbfa8 <kill_player>
	}
}
    c60a:	df 91       	pop	r29
    c60c:	cf 91       	pop	r28
    c60e:	1f 91       	pop	r17
    c610:	08 95       	ret

0000c612 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    c612:	cf 92       	push	r12
    c614:	df 92       	push	r13
    c616:	ef 92       	push	r14
    c618:	ff 92       	push	r15
    c61a:	cf 93       	push	r28
    c61c:	df 93       	push	r29
    c61e:	ec 01       	movw	r28, r24
    c620:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    c622:	98 81       	ld	r25, Y
    c624:	9d 7f       	andi	r25, 0xFD	; 253
    c626:	09 f0       	breq	.+2      	; 0xc62a <slide+0x18>
    c628:	54 c0       	rjmp	.+168    	; 0xc6d2 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    c62a:	ca 01       	movw	r24, r20
    c62c:	6e e1       	ldi	r22, 0x1E	; 30
    c62e:	70 e0       	ldi	r23, 0x00	; 0
    c630:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c634:	88 0f       	add	r24, r24
    c636:	88 0f       	add	r24, r24
    c638:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    c63a:	21 11       	cpse	r18, r1
    c63c:	22 c0       	rjmp	.+68     	; 0xc682 <slide+0x70>
    c63e:	cb 80       	ldd	r12, Y+3	; 0x03
    c640:	dc 80       	ldd	r13, Y+4	; 0x04
    c642:	ed 80       	ldd	r14, Y+5	; 0x05
    c644:	fe 80       	ldd	r15, Y+6	; 0x06
    c646:	68 2f       	mov	r22, r24
    c648:	70 e0       	ldi	r23, 0x00	; 0
    c64a:	80 e0       	ldi	r24, 0x00	; 0
    c64c:	90 e0       	ldi	r25, 0x00	; 0
    c64e:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    c652:	9b 01       	movw	r18, r22
    c654:	ac 01       	movw	r20, r24
    c656:	c7 01       	movw	r24, r14
    c658:	b6 01       	movw	r22, r12
    c65a:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c65e:	20 e0       	ldi	r18, 0x00	; 0
    c660:	30 e0       	ldi	r19, 0x00	; 0
    c662:	40 e8       	ldi	r20, 0x80	; 128
    c664:	50 e4       	ldi	r21, 0x40	; 64
    c666:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    c66a:	18 16       	cp	r1, r24
    c66c:	0c f0       	brlt	.+2      	; 0xc670 <slide+0x5e>
    c66e:	85 c0       	rjmp	.+266    	; 0xc77a <slide+0x168>
			player->shared.x++; 
    c670:	20 e0       	ldi	r18, 0x00	; 0
    c672:	30 e0       	ldi	r19, 0x00	; 0
    c674:	40 e8       	ldi	r20, 0x80	; 128
    c676:	5f e3       	ldi	r21, 0x3F	; 63
    c678:	c7 01       	movw	r24, r14
    c67a:	b6 01       	movw	r22, r12
    c67c:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c680:	23 c0       	rjmp	.+70     	; 0xc6c8 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    c682:	22 30       	cpi	r18, 0x02	; 2
    c684:	09 f0       	breq	.+2      	; 0xc688 <slide+0x76>
    c686:	79 c0       	rjmp	.+242    	; 0xc77a <slide+0x168>
    c688:	cb 80       	ldd	r12, Y+3	; 0x03
    c68a:	dc 80       	ldd	r13, Y+4	; 0x04
    c68c:	ed 80       	ldd	r14, Y+5	; 0x05
    c68e:	fe 80       	ldd	r15, Y+6	; 0x06
    c690:	68 2f       	mov	r22, r24
    c692:	70 e0       	ldi	r23, 0x00	; 0
    c694:	80 e0       	ldi	r24, 0x00	; 0
    c696:	90 e0       	ldi	r25, 0x00	; 0
    c698:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    c69c:	9b 01       	movw	r18, r22
    c69e:	ac 01       	movw	r20, r24
    c6a0:	c7 01       	movw	r24, r14
    c6a2:	b6 01       	movw	r22, r12
    c6a4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c6a8:	20 e0       	ldi	r18, 0x00	; 0
    c6aa:	30 e0       	ldi	r19, 0x00	; 0
    c6ac:	40 e4       	ldi	r20, 0x40	; 64
    c6ae:	51 ec       	ldi	r21, 0xC1	; 193
    c6b0:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    c6b4:	87 ff       	sbrs	r24, 7
    c6b6:	61 c0       	rjmp	.+194    	; 0xc77a <slide+0x168>
			player->shared.x--;
    c6b8:	20 e0       	ldi	r18, 0x00	; 0
    c6ba:	30 e0       	ldi	r19, 0x00	; 0
    c6bc:	40 e8       	ldi	r20, 0x80	; 128
    c6be:	5f e3       	ldi	r21, 0x3F	; 63
    c6c0:	c7 01       	movw	r24, r14
    c6c2:	b6 01       	movw	r22, r12
    c6c4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c6c8:	6b 83       	std	Y+3, r22	; 0x03
    c6ca:	7c 83       	std	Y+4, r23	; 0x04
    c6cc:	8d 83       	std	Y+5, r24	; 0x05
    c6ce:	9e 83       	std	Y+6, r25	; 0x06
    c6d0:	54 c0       	rjmp	.+168    	; 0xc77a <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    c6d2:	ca 01       	movw	r24, r20
    c6d4:	6e e1       	ldi	r22, 0x1E	; 30
    c6d6:	70 e0       	ldi	r23, 0x00	; 0
    c6d8:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c6dc:	ab 01       	movw	r20, r22
    c6de:	4d 5f       	subi	r20, 0xFD	; 253
    c6e0:	5f 4f       	sbci	r21, 0xFF	; 255
    c6e2:	44 0f       	add	r20, r20
    c6e4:	44 0f       	add	r20, r20
    c6e6:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    c6e8:	21 11       	cpse	r18, r1
    c6ea:	21 c0       	rjmp	.+66     	; 0xc72e <slide+0x11c>
    c6ec:	cf 80       	ldd	r12, Y+7	; 0x07
    c6ee:	d8 84       	ldd	r13, Y+8	; 0x08
    c6f0:	e9 84       	ldd	r14, Y+9	; 0x09
    c6f2:	fa 84       	ldd	r15, Y+10	; 0x0a
    c6f4:	64 2f       	mov	r22, r20
    c6f6:	70 e0       	ldi	r23, 0x00	; 0
    c6f8:	80 e0       	ldi	r24, 0x00	; 0
    c6fa:	90 e0       	ldi	r25, 0x00	; 0
    c6fc:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    c700:	9b 01       	movw	r18, r22
    c702:	ac 01       	movw	r20, r24
    c704:	c7 01       	movw	r24, r14
    c706:	b6 01       	movw	r22, r12
    c708:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c70c:	20 e0       	ldi	r18, 0x00	; 0
    c70e:	30 e0       	ldi	r19, 0x00	; 0
    c710:	40 e8       	ldi	r20, 0x80	; 128
    c712:	50 e4       	ldi	r21, 0x40	; 64
    c714:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    c718:	18 16       	cp	r1, r24
    c71a:	7c f5       	brge	.+94     	; 0xc77a <slide+0x168>
			player->shared.y++;
    c71c:	20 e0       	ldi	r18, 0x00	; 0
    c71e:	30 e0       	ldi	r19, 0x00	; 0
    c720:	40 e8       	ldi	r20, 0x80	; 128
    c722:	5f e3       	ldi	r21, 0x3F	; 63
    c724:	c7 01       	movw	r24, r14
    c726:	b6 01       	movw	r22, r12
    c728:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    c72c:	22 c0       	rjmp	.+68     	; 0xc772 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    c72e:	22 30       	cpi	r18, 0x02	; 2
    c730:	21 f5       	brne	.+72     	; 0xc77a <slide+0x168>
    c732:	cf 80       	ldd	r12, Y+7	; 0x07
    c734:	d8 84       	ldd	r13, Y+8	; 0x08
    c736:	e9 84       	ldd	r14, Y+9	; 0x09
    c738:	fa 84       	ldd	r15, Y+10	; 0x0a
    c73a:	64 2f       	mov	r22, r20
    c73c:	70 e0       	ldi	r23, 0x00	; 0
    c73e:	80 e0       	ldi	r24, 0x00	; 0
    c740:	90 e0       	ldi	r25, 0x00	; 0
    c742:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    c746:	9b 01       	movw	r18, r22
    c748:	ac 01       	movw	r20, r24
    c74a:	c7 01       	movw	r24, r14
    c74c:	b6 01       	movw	r22, r12
    c74e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c752:	20 e0       	ldi	r18, 0x00	; 0
    c754:	30 e0       	ldi	r19, 0x00	; 0
    c756:	40 e4       	ldi	r20, 0x40	; 64
    c758:	51 ec       	ldi	r21, 0xC1	; 193
    c75a:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    c75e:	87 ff       	sbrs	r24, 7
    c760:	0c c0       	rjmp	.+24     	; 0xc77a <slide+0x168>
			player->shared.y--;
    c762:	20 e0       	ldi	r18, 0x00	; 0
    c764:	30 e0       	ldi	r19, 0x00	; 0
    c766:	40 e8       	ldi	r20, 0x80	; 128
    c768:	5f e3       	ldi	r21, 0x3F	; 63
    c76a:	c7 01       	movw	r24, r14
    c76c:	b6 01       	movw	r22, r12
    c76e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c772:	6f 83       	std	Y+7, r22	; 0x07
    c774:	78 87       	std	Y+8, r23	; 0x08
    c776:	89 87       	std	Y+9, r24	; 0x09
    c778:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    c77a:	df 91       	pop	r29
    c77c:	cf 91       	pop	r28
    c77e:	ff 90       	pop	r15
    c780:	ef 90       	pop	r14
    c782:	df 90       	pop	r13
    c784:	cf 90       	pop	r12
    c786:	08 95       	ret

0000c788 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    c788:	2f 92       	push	r2
    c78a:	3f 92       	push	r3
    c78c:	4f 92       	push	r4
    c78e:	5f 92       	push	r5
    c790:	6f 92       	push	r6
    c792:	7f 92       	push	r7
    c794:	8f 92       	push	r8
    c796:	9f 92       	push	r9
    c798:	af 92       	push	r10
    c79a:	bf 92       	push	r11
    c79c:	cf 92       	push	r12
    c79e:	df 92       	push	r13
    c7a0:	ef 92       	push	r14
    c7a2:	ff 92       	push	r15
    c7a4:	0f 93       	push	r16
    c7a6:	1f 93       	push	r17
    c7a8:	cf 93       	push	r28
    c7aa:	df 93       	push	r29
    c7ac:	cd b7       	in	r28, 0x3d	; 61
    c7ae:	de b7       	in	r29, 0x3e	; 62
    c7b0:	2b 97       	sbiw	r28, 0x0b	; 11
    c7b2:	0f b6       	in	r0, 0x3f	; 63
    c7b4:	f8 94       	cli
    c7b6:	de bf       	out	0x3e, r29	; 62
    c7b8:	0f be       	out	0x3f, r0	; 63
    c7ba:	cd bf       	out	0x3d, r28	; 61
    c7bc:	4c 01       	movw	r8, r24
    c7be:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    c7c0:	1a 82       	std	Y+2, r1	; 0x02
    c7c2:	19 82       	std	Y+1, r1	; 0x01
    c7c4:	1c 82       	std	Y+4, r1	; 0x04
    c7c6:	1b 82       	std	Y+3, r1	; 0x03
    c7c8:	1e 82       	std	Y+6, r1	; 0x06
    c7ca:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c7cc:	20 e0       	ldi	r18, 0x00	; 0
    c7ce:	30 e0       	ldi	r19, 0x00	; 0
    c7d0:	40 e0       	ldi	r20, 0x00	; 0
    c7d2:	5e e3       	ldi	r21, 0x3E	; 62
    c7d4:	dc 01       	movw	r26, r24
    c7d6:	17 96       	adiw	r26, 0x07	; 7
    c7d8:	6d 91       	ld	r22, X+
    c7da:	7d 91       	ld	r23, X+
    c7dc:	8d 91       	ld	r24, X+
    c7de:	9c 91       	ld	r25, X
    c7e0:	1a 97       	sbiw	r26, 0x0a	; 10
    c7e2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    c7e6:	20 e0       	ldi	r18, 0x00	; 0
    c7e8:	30 e0       	ldi	r19, 0x00	; 0
    c7ea:	40 e4       	ldi	r20, 0x40	; 64
    c7ec:	50 e4       	ldi	r21, 0x40	; 64
    c7ee:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    c7f2:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c7f6:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c7f8:	20 e0       	ldi	r18, 0x00	; 0
    c7fa:	30 e0       	ldi	r19, 0x00	; 0
    c7fc:	40 e0       	ldi	r20, 0x00	; 0
    c7fe:	5e e3       	ldi	r21, 0x3E	; 62
    c800:	f4 01       	movw	r30, r8
    c802:	63 81       	ldd	r22, Z+3	; 0x03
    c804:	74 81       	ldd	r23, Z+4	; 0x04
    c806:	85 81       	ldd	r24, Z+5	; 0x05
    c808:	96 81       	ldd	r25, Z+6	; 0x06
    c80a:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    c80e:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c812:	d4 01       	movw	r26, r8
    c814:	2c 91       	ld	r18, X
    c816:	40 2f       	mov	r20, r16
    c818:	ce 01       	movw	r24, r28
    c81a:	01 96       	adiw	r24, 0x01	; 1
    c81c:	0e 94 b8 62 	call	0xc570	; 0xc570 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c820:	c4 01       	movw	r24, r8
    c822:	0e 94 52 5f 	call	0xbea4	; 0xbea4 <collision_detect_boundries>
    c826:	88 23       	and	r24, r24
    c828:	39 f0       	breq	.+14     	; 0xc838 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    c82a:	c4 01       	movw	r24, r8
    c82c:	0e 94 2b 5d 	call	0xba56	; 0xba56 <recoil_sprite>
		player->shared.speed = 0;
    c830:	f4 01       	movw	r30, r8
    c832:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    c834:	d1 2c       	mov	r13, r1
    c836:	2b c1       	rjmp	.+598    	; 0xca8e <collision_detect_player+0x306>
    c838:	ce 01       	movw	r24, r28
    c83a:	01 96       	adiw	r24, 0x01	; 1
    c83c:	98 87       	std	Y+8, r25	; 0x08
    c83e:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c840:	41 2c       	mov	r4, r1
    c842:	51 2c       	mov	r5, r1
    c844:	b1 2c       	mov	r11, r1
    c846:	d1 2c       	mov	r13, r1
    c848:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c84a:	9b e0       	ldi	r25, 0x0B	; 11
    c84c:	91 0f       	add	r25, r17
    c84e:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c850:	16 5f       	subi	r17, 0xF6	; 246
    c852:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    c854:	af 81       	ldd	r26, Y+7	; 0x07
    c856:	b8 85       	ldd	r27, Y+8	; 0x08
    c858:	6d 90       	ld	r6, X+
    c85a:	7d 90       	ld	r7, X+
    c85c:	b8 87       	std	Y+8, r27	; 0x08
    c85e:	af 83       	std	Y+7, r26	; 0x07
    c860:	c3 01       	movw	r24, r6
    c862:	6e e1       	ldi	r22, 0x1E	; 30
    c864:	70 e0       	ldi	r23, 0x00	; 0
    c866:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    c86a:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    c86c:	13 e0       	ldi	r17, 0x03	; 3
    c86e:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c870:	c3 01       	movw	r24, r6
    c872:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <solid_directional_tile>
    c876:	88 23       	and	r24, r24
    c878:	49 f1       	breq	.+82     	; 0xc8cc <collision_detect_player+0x144>
    c87a:	f4 01       	movw	r30, r8
    c87c:	67 81       	ldd	r22, Z+7	; 0x07
    c87e:	70 85       	ldd	r23, Z+8	; 0x08
    c880:	81 85       	ldd	r24, Z+9	; 0x09
    c882:	92 85       	ldd	r25, Z+10	; 0x0a
    c884:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c888:	46 2f       	mov	r20, r22
    c88a:	d4 01       	movw	r26, r8
    c88c:	13 96       	adiw	r26, 0x03	; 3
    c88e:	6d 91       	ld	r22, X+
    c890:	7d 91       	ld	r23, X+
    c892:	8d 91       	ld	r24, X+
    c894:	9c 91       	ld	r25, X
    c896:	16 97       	sbiw	r26, 0x06	; 6
    c898:	4b 87       	std	Y+11, r20	; 0x0b
    c89a:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c89e:	00 e1       	ldi	r16, 0x10	; 16
    c8a0:	20 e1       	ldi	r18, 0x10	; 16
    c8a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    c8a4:	c3 01       	movw	r24, r6
    c8a6:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <collides_directional_tile>
    c8aa:	88 23       	and	r24, r24
    c8ac:	79 f0       	breq	.+30     	; 0xc8cc <collision_detect_player+0x144>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    c8ae:	f4 01       	movw	r30, r8
    c8b0:	83 85       	ldd	r24, Z+11	; 0x0b
    c8b2:	89 30       	cpi	r24, 0x09	; 9
    c8b4:	21 f4       	brne	.+8      	; 0xc8be <collision_detect_player+0x136>
    c8b6:	c4 01       	movw	r24, r8
    c8b8:	0e 94 2b 5d 	call	0xba56	; 0xba56 <recoil_sprite>
    c8bc:	03 c0       	rjmp	.+6      	; 0xc8c4 <collision_detect_player+0x13c>
    c8be:	c4 01       	movw	r24, r8
    c8c0:	0e 94 85 5d 	call	0xbb0a	; 0xbb0a <recoil_sprite_fine>
			player->shared.speed = 0;
    c8c4:	d4 01       	movw	r26, r8
    c8c6:	11 96       	adiw	r26, 0x01	; 1
    c8c8:	1c 92       	st	X, r1
    c8ca:	bc c0       	rjmp	.+376    	; 0xca44 <collision_detect_player+0x2bc>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c8cc:	c3 01       	movw	r24, r6
    c8ce:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <solid_square_tile>
    c8d2:	88 23       	and	r24, r24
    c8d4:	51 f1       	breq	.+84     	; 0xc92a <collision_detect_player+0x1a2>
    c8d6:	f4 01       	movw	r30, r8
    c8d8:	67 81       	ldd	r22, Z+7	; 0x07
    c8da:	70 85       	ldd	r23, Z+8	; 0x08
    c8dc:	81 85       	ldd	r24, Z+9	; 0x09
    c8de:	92 85       	ldd	r25, Z+10	; 0x0a
    c8e0:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c8e4:	26 2e       	mov	r2, r22
    c8e6:	d4 01       	movw	r26, r8
    c8e8:	13 96       	adiw	r26, 0x03	; 3
    c8ea:	6d 91       	ld	r22, X+
    c8ec:	7d 91       	ld	r23, X+
    c8ee:	8d 91       	ld	r24, X+
    c8f0:	9c 91       	ld	r25, X
    c8f2:	16 97       	sbiw	r26, 0x06	; 6
    c8f4:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c8f8:	86 2f       	mov	r24, r22
    c8fa:	38 e0       	ldi	r19, 0x08	; 8
    c8fc:	a3 2e       	mov	r10, r19
    c8fe:	48 e0       	ldi	r20, 0x08	; 8
    c900:	c4 2e       	mov	r12, r20
    c902:	e1 2e       	mov	r14, r17
    c904:	ee 0c       	add	r14, r14
    c906:	ee 0c       	add	r14, r14
    c908:	ee 0c       	add	r14, r14
    c90a:	0f 2d       	mov	r16, r15
    c90c:	00 0f       	add	r16, r16
    c90e:	00 0f       	add	r16, r16
    c910:	00 0f       	add	r16, r16
    c912:	20 e1       	ldi	r18, 0x10	; 16
    c914:	40 e1       	ldi	r20, 0x10	; 16
    c916:	62 2d       	mov	r22, r2
    c918:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
    c91c:	88 23       	and	r24, r24
    c91e:	29 f0       	breq	.+10     	; 0xc92a <collision_detect_player+0x1a2>
		{
			collision_count++;
    c920:	53 94       	inc	r5
			collision_tile = i;
			player->shared.speed = 0;
    c922:	f4 01       	movw	r30, r8
    c924:	11 82       	std	Z+1, r1	; 0x01
    c926:	b4 2c       	mov	r11, r4
    c928:	8d c0       	rjmp	.+282    	; 0xca44 <collision_detect_player+0x2bc>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c92a:	f3 01       	movw	r30, r6
    c92c:	eb 54       	subi	r30, 0x4B	; 75
    c92e:	f3 4f       	sbci	r31, 0xF3	; 243
    c930:	81 81       	ldd	r24, Z+1	; 0x01
    c932:	8d 34       	cpi	r24, 0x4D	; 77
    c934:	59 f5       	brne	.+86     	; 0xc98c <collision_detect_player+0x204>
    c936:	e1 2e       	mov	r14, r17
    c938:	ee 0c       	add	r14, r14
    c93a:	ee 0c       	add	r14, r14
    c93c:	ee 0c       	add	r14, r14
    c93e:	0f 2d       	mov	r16, r15
    c940:	00 0f       	add	r16, r16
    c942:	00 0f       	add	r16, r16
    c944:	00 0f       	add	r16, r16
    c946:	d4 01       	movw	r26, r8
    c948:	17 96       	adiw	r26, 0x07	; 7
    c94a:	6d 91       	ld	r22, X+
    c94c:	7d 91       	ld	r23, X+
    c94e:	8d 91       	ld	r24, X+
    c950:	9c 91       	ld	r25, X
    c952:	1a 97       	sbiw	r26, 0x0a	; 10
    c954:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c958:	76 2e       	mov	r7, r22
    c95a:	f4 01       	movw	r30, r8
    c95c:	63 81       	ldd	r22, Z+3	; 0x03
    c95e:	74 81       	ldd	r23, Z+4	; 0x04
    c960:	85 81       	ldd	r24, Z+5	; 0x05
    c962:	96 81       	ldd	r25, Z+6	; 0x06
    c964:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    c968:	86 2f       	mov	r24, r22
    c96a:	98 e0       	ldi	r25, 0x08	; 8
    c96c:	a9 2e       	mov	r10, r25
    c96e:	28 e0       	ldi	r18, 0x08	; 8
    c970:	c2 2e       	mov	r12, r18
    c972:	20 e1       	ldi	r18, 0x10	; 16
    c974:	40 e1       	ldi	r20, 0x10	; 16
    c976:	67 2d       	mov	r22, r7
    c978:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBCollides>
    c97c:	88 23       	and	r24, r24
    c97e:	09 f4       	brne	.+2      	; 0xc982 <collision_detect_player+0x1fa>
    c980:	61 c0       	rjmp	.+194    	; 0xca44 <collision_detect_player+0x2bc>
		{
			player->max_speed = WATER_SPEED;
    c982:	e9 e1       	ldi	r30, 0x19	; 25
    c984:	d4 01       	movw	r26, r8
    c986:	58 96       	adiw	r26, 0x18	; 24
    c988:	ec 93       	st	X, r30
    c98a:	67 c0       	rjmp	.+206    	; 0xca5a <collision_detect_player+0x2d2>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c98c:	8c 32       	cpi	r24, 0x2C	; 44
    c98e:	99 f2       	breq	.-90     	; 0xc936 <collision_detect_player+0x1ae>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c990:	87 30       	cpi	r24, 0x07	; 7
    c992:	99 f4       	brne	.+38     	; 0xc9ba <collision_detect_player+0x232>
    c994:	d4 01       	movw	r26, r8
    c996:	54 96       	adiw	r26, 0x14	; 20
    c998:	8c 91       	ld	r24, X
    c99a:	54 97       	sbiw	r26, 0x14	; 20
    c99c:	80 fd       	sbrc	r24, 0
    c99e:	52 c0       	rjmp	.+164    	; 0xca44 <collision_detect_player+0x2bc>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c9a0:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c9a2:	e1 e4       	ldi	r30, 0x41	; 65
    c9a4:	58 96       	adiw	r26, 0x18	; 24
    c9a6:	ec 93       	st	X, r30
    c9a8:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    c9aa:	f1 e0       	ldi	r31, 0x01	; 1
    c9ac:	5a 96       	adiw	r26, 0x1a	; 26
    c9ae:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c9b0:	45 e0       	ldi	r20, 0x05	; 5
    c9b2:	56 e8       	ldi	r21, 0x86	; 134
    c9b4:	61 e0       	ldi	r22, 0x01	; 1
    c9b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    c9b8:	10 c0       	rjmp	.+32     	; 0xc9da <collision_detect_player+0x252>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c9ba:	89 30       	cpi	r24, 0x09	; 9
    c9bc:	29 f5       	brne	.+74     	; 0xca08 <collision_detect_player+0x280>
    c9be:	d4 01       	movw	r26, r8
    c9c0:	54 96       	adiw	r26, 0x14	; 20
    c9c2:	8c 91       	ld	r24, X
    c9c4:	54 97       	sbiw	r26, 0x14	; 20
    c9c6:	80 fd       	sbrc	r24, 0
    c9c8:	3d c0       	rjmp	.+122    	; 0xca44 <collision_detect_player+0x2bc>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c9ca:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c9cc:	e1 e0       	ldi	r30, 0x01	; 1
    c9ce:	59 96       	adiw	r26, 0x19	; 25
    c9d0:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c9d2:	4f ef       	ldi	r20, 0xFF	; 255
    c9d4:	55 e8       	ldi	r21, 0x85	; 133
    c9d6:	61 e0       	ldi	r22, 0x01	; 1
    c9d8:	89 85       	ldd	r24, Y+9	; 0x09
    c9da:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
			SetTile(tile_x, tile_y, 0);
    c9de:	40 e0       	ldi	r20, 0x00	; 0
    c9e0:	50 e0       	ldi	r21, 0x00	; 0
    c9e2:	61 2f       	mov	r22, r17
    c9e4:	8f 2d       	mov	r24, r15
    c9e6:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
			SFX_ITEM;
    c9ea:	80 91 4a 0c 	lds	r24, 0x0C4A
    c9ee:	80 fd       	sbrc	r24, 0
    c9f0:	29 c0       	rjmp	.+82     	; 0xca44 <collision_detect_player+0x2bc>
    c9f2:	80 91 b8 0f 	lds	r24, 0x0FB8
    c9f6:	80 fd       	sbrc	r24, 0
    c9f8:	25 c0       	rjmp	.+74     	; 0xca44 <collision_detect_player+0x2bc>
    c9fa:	2f ef       	ldi	r18, 0xFF	; 255
    c9fc:	47 e1       	ldi	r20, 0x17	; 23
    c9fe:	63 e0       	ldi	r22, 0x03	; 3
    ca00:	84 e0       	ldi	r24, 0x04	; 4
    ca02:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
    ca06:	1e c0       	rjmp	.+60     	; 0xca44 <collision_detect_player+0x2bc>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    ca08:	88 30       	cpi	r24, 0x08	; 8
    ca0a:	e1 f4       	brne	.+56     	; 0xca44 <collision_detect_player+0x2bc>
    ca0c:	d4 01       	movw	r26, r8
    ca0e:	54 96       	adiw	r26, 0x14	; 20
    ca10:	8c 91       	ld	r24, X
    ca12:	80 fd       	sbrc	r24, 0
    ca14:	17 c0       	rjmp	.+46     	; 0xca44 <collision_detect_player+0x2bc>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    ca16:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    ca18:	40 e0       	ldi	r20, 0x00	; 0
    ca1a:	50 e0       	ldi	r21, 0x00	; 0
    ca1c:	61 2f       	mov	r22, r17
    ca1e:	8f 2d       	mov	r24, r15
    ca20:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
			SFX_ITEM;
    ca24:	80 91 4a 0c 	lds	r24, 0x0C4A
    ca28:	80 fd       	sbrc	r24, 0
    ca2a:	0a c0       	rjmp	.+20     	; 0xca40 <collision_detect_player+0x2b8>
    ca2c:	80 91 b8 0f 	lds	r24, 0x0FB8
    ca30:	80 fd       	sbrc	r24, 0
    ca32:	06 c0       	rjmp	.+12     	; 0xca40 <collision_detect_player+0x2b8>
    ca34:	2f ef       	ldi	r18, 0xFF	; 255
    ca36:	47 e1       	ldi	r20, 0x17	; 23
    ca38:	63 e0       	ldi	r22, 0x03	; 3
    ca3a:	84 e0       	ldi	r24, 0x04	; 4
    ca3c:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
			explode = 1;
    ca40:	dd 24       	eor	r13, r13
    ca42:	d3 94       	inc	r13
		}
		
		if (!hit_water)
    ca44:	31 10       	cpse	r3, r1
    ca46:	09 c0       	rjmp	.+18     	; 0xca5a <collision_detect_player+0x2d2>
		{
			player->max_speed = MAX_SPEED;
    ca48:	82 e3       	ldi	r24, 0x32	; 50
    ca4a:	f4 01       	movw	r30, r8
    ca4c:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    ca4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    ca50:	88 23       	and	r24, r24
    ca52:	29 f0       	breq	.+10     	; 0xca5e <collision_detect_player+0x2d6>
    ca54:	91 e4       	ldi	r25, 0x41	; 65
    ca56:	90 8f       	std	Z+24, r25	; 0x18
    ca58:	02 c0       	rjmp	.+4      	; 0xca5e <collision_detect_player+0x2d6>
    ca5a:	33 24       	eor	r3, r3
    ca5c:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    ca5e:	43 94       	inc	r4
    ca60:	a3 e0       	ldi	r26, 0x03	; 3
    ca62:	4a 12       	cpse	r4, r26
    ca64:	f7 ce       	rjmp	.-530    	; 0xc854 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    ca66:	55 20       	and	r5, r5
    ca68:	91 f0       	breq	.+36     	; 0xca8e <collision_detect_player+0x306>
    ca6a:	c4 01       	movw	r24, r8
    ca6c:	0e 94 2b 5d 	call	0xba56	; 0xba56 <recoil_sprite>
	if (collision_count == 1)
    ca70:	b1 e0       	ldi	r27, 0x01	; 1
    ca72:	5b 12       	cpse	r5, r27
    ca74:	0c c0       	rjmp	.+24     	; 0xca8e <collision_detect_player+0x306>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    ca76:	fe 01       	movw	r30, r28
    ca78:	31 96       	adiw	r30, 0x01	; 1
    ca7a:	eb 0d       	add	r30, r11
    ca7c:	f1 1d       	adc	r31, r1
    ca7e:	eb 0d       	add	r30, r11
    ca80:	f1 1d       	adc	r31, r1
    ca82:	40 81       	ld	r20, Z
    ca84:	51 81       	ldd	r21, Z+1	; 0x01
    ca86:	6b 2d       	mov	r22, r11
    ca88:	c4 01       	movw	r24, r8
    ca8a:	0e 94 09 63 	call	0xc612	; 0xc612 <slide>
	}
	return explode;
}
    ca8e:	8d 2d       	mov	r24, r13
    ca90:	2b 96       	adiw	r28, 0x0b	; 11
    ca92:	0f b6       	in	r0, 0x3f	; 63
    ca94:	f8 94       	cli
    ca96:	de bf       	out	0x3e, r29	; 62
    ca98:	0f be       	out	0x3f, r0	; 63
    ca9a:	cd bf       	out	0x3d, r28	; 61
    ca9c:	df 91       	pop	r29
    ca9e:	cf 91       	pop	r28
    caa0:	1f 91       	pop	r17
    caa2:	0f 91       	pop	r16
    caa4:	ff 90       	pop	r15
    caa6:	ef 90       	pop	r14
    caa8:	df 90       	pop	r13
    caaa:	cf 90       	pop	r12
    caac:	bf 90       	pop	r11
    caae:	af 90       	pop	r10
    cab0:	9f 90       	pop	r9
    cab2:	8f 90       	pop	r8
    cab4:	7f 90       	pop	r7
    cab6:	6f 90       	pop	r6
    cab8:	5f 90       	pop	r5
    caba:	4f 90       	pop	r4
    cabc:	3f 90       	pop	r3
    cabe:	2f 90       	pop	r2
    cac0:	08 95       	ret

0000cac2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    cac2:	ef 92       	push	r14
    cac4:	ff 92       	push	r15
    cac6:	1f 93       	push	r17
    cac8:	cf 93       	push	r28
    caca:	df 93       	push	r29
    cacc:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    cace:	c0 e0       	ldi	r28, 0x00	; 0
    cad0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    cad2:	8e e1       	ldi	r24, 0x1E	; 30
    cad4:	e8 2e       	mov	r14, r24
    cad6:	f1 2c       	mov	r15, r1
    cad8:	ce 01       	movw	r24, r28
    cada:	b7 01       	movw	r22, r14
    cadc:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
		y = 3 + i / 30;
    cae0:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    cae2:	11 23       	and	r17, r17
    cae4:	19 f0       	breq	.+6      	; 0xcaec <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    cae6:	42 ea       	ldi	r20, 0xA2	; 162
    cae8:	56 e8       	ldi	r21, 0x86	; 134
    caea:	2d c0       	rjmp	.+90     	; 0xcb46 <load_level_tiles+0x84>
    caec:	fe 01       	movw	r30, r28
    caee:	eb 54       	subi	r30, 0x4B	; 75
    caf0:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    caf2:	91 81       	ldd	r25, Z+1	; 0x01
    caf4:	97 30       	cpi	r25, 0x07	; 7
    caf6:	99 f1       	breq	.+102    	; 0xcb5e <load_level_tiles+0x9c>
    caf8:	88 f4       	brcc	.+34     	; 0xcb1c <load_level_tiles+0x5a>
    cafa:	93 30       	cpi	r25, 0x03	; 3
    cafc:	39 f1       	breq	.+78     	; 0xcb4c <load_level_tiles+0x8a>
    cafe:	40 f4       	brcc	.+16     	; 0xcb10 <load_level_tiles+0x4e>
    cb00:	91 30       	cpi	r25, 0x01	; 1
    cb02:	f9 f0       	breq	.+62     	; 0xcb42 <load_level_tiles+0x80>
    cb04:	92 30       	cpi	r25, 0x02	; 2
    cb06:	09 f0       	breq	.+2      	; 0xcb0a <load_level_tiles+0x48>
    cb08:	3f c0       	rjmp	.+126    	; 0xcb88 <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    cb0a:	48 e0       	ldi	r20, 0x08	; 8
    cb0c:	56 e8       	ldi	r21, 0x86	; 134
    cb0e:	1b c0       	rjmp	.+54     	; 0xcb46 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cb10:	95 30       	cpi	r25, 0x05	; 5
    cb12:	f9 f0       	breq	.+62     	; 0xcb52 <load_level_tiles+0x90>
    cb14:	08 f5       	brcc	.+66     	; 0xcb58 <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    cb16:	4d ee       	ldi	r20, 0xED	; 237
    cb18:	55 e8       	ldi	r21, 0x85	; 133
    cb1a:	15 c0       	rjmp	.+42     	; 0xcb46 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cb1c:	9c 32       	cpi	r25, 0x2C	; 44
    cb1e:	59 f1       	breq	.+86     	; 0xcb76 <load_level_tiles+0xb4>
    cb20:	38 f4       	brcc	.+14     	; 0xcb30 <load_level_tiles+0x6e>
    cb22:	98 30       	cpi	r25, 0x08	; 8
    cb24:	f9 f0       	breq	.+62     	; 0xcb64 <load_level_tiles+0xa2>
    cb26:	99 30       	cpi	r25, 0x09	; 9
    cb28:	79 f5       	brne	.+94     	; 0xcb88 <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    cb2a:	4f ef       	ldi	r20, 0xFF	; 255
    cb2c:	55 e8       	ldi	r21, 0x85	; 133
    cb2e:	0b c0       	rjmp	.+22     	; 0xcb46 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cb30:	92 34       	cpi	r25, 0x42	; 66
    cb32:	d9 f0       	breq	.+54     	; 0xcb6a <load_level_tiles+0xa8>
    cb34:	9d 34       	cpi	r25, 0x4D	; 77
    cb36:	e1 f0       	breq	.+56     	; 0xcb70 <load_level_tiles+0xae>
    cb38:	97 33       	cpi	r25, 0x37	; 55
    cb3a:	31 f5       	brne	.+76     	; 0xcb88 <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    cb3c:	41 ee       	ldi	r20, 0xE1	; 225
    cb3e:	55 e8       	ldi	r21, 0x85	; 133
    cb40:	02 c0       	rjmp	.+4      	; 0xcb46 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    cb42:	4b e0       	ldi	r20, 0x0B	; 11
    cb44:	56 e8       	ldi	r21, 0x86	; 134
    cb46:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
    cb4a:	22 c0       	rjmp	.+68     	; 0xcb90 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    cb4c:	43 ef       	ldi	r20, 0xF3	; 243
    cb4e:	55 e8       	ldi	r21, 0x85	; 133
    cb50:	fa cf       	rjmp	.-12     	; 0xcb46 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    cb52:	4a ee       	ldi	r20, 0xEA	; 234
    cb54:	55 e8       	ldi	r21, 0x85	; 133
    cb56:	f7 cf       	rjmp	.-18     	; 0xcb46 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    cb58:	40 ef       	ldi	r20, 0xF0	; 240
    cb5a:	55 e8       	ldi	r21, 0x85	; 133
    cb5c:	f4 cf       	rjmp	.-24     	; 0xcb46 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    cb5e:	45 e0       	ldi	r20, 0x05	; 5
    cb60:	56 e8       	ldi	r21, 0x86	; 134
    cb62:	f1 cf       	rjmp	.-30     	; 0xcb46 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    cb64:	42 e0       	ldi	r20, 0x02	; 2
    cb66:	56 e8       	ldi	r21, 0x86	; 134
    cb68:	ee cf       	rjmp	.-36     	; 0xcb46 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    cb6a:	44 ee       	ldi	r20, 0xE4	; 228
    cb6c:	55 e8       	ldi	r21, 0x85	; 133
    cb6e:	eb cf       	rjmp	.-42     	; 0xcb46 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    cb70:	47 ee       	ldi	r20, 0xE7	; 231
    cb72:	55 e8       	ldi	r21, 0x85	; 133
    cb74:	e8 cf       	rjmp	.-48     	; 0xcb46 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    cb76:	47 ee       	ldi	r20, 0xE7	; 231
    cb78:	55 e8       	ldi	r21, 0x85	; 133
    cb7a:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
    cb7e:	d0 93 37 10 	sts	0x1037, r29
    cb82:	c0 93 36 10 	sts	0x1036, r28
    cb86:	04 c0       	rjmp	.+8      	; 0xcb90 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    cb88:	40 e0       	ldi	r20, 0x00	; 0
    cb8a:	50 e0       	ldi	r21, 0x00	; 0
    cb8c:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    cb90:	21 96       	adiw	r28, 0x01	; 1
    cb92:	ce 3e       	cpi	r28, 0xEE	; 238
    cb94:	82 e0       	ldi	r24, 0x02	; 2
    cb96:	d8 07       	cpc	r29, r24
    cb98:	09 f0       	breq	.+2      	; 0xcb9c <load_level_tiles+0xda>
    cb9a:	9e cf       	rjmp	.-196    	; 0xcad8 <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    cb9c:	df 91       	pop	r29
    cb9e:	cf 91       	pop	r28
    cba0:	1f 91       	pop	r17
    cba2:	ff 90       	pop	r15
    cba4:	ef 90       	pop	r14
    cba6:	08 95       	ret

0000cba8 <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    cba8:	cf 93       	push	r28
    cbaa:	df 93       	push	r29
    cbac:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    cbae:	6a 8b       	std	Y+18, r22	; 0x12
	p->spawn_y = y;
    cbb0:	4b 8b       	std	Y+19, r20	; 0x13
	p->level_score = 0;
    cbb2:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    cbb4:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    cbb6:	19 8e       	std	Y+25, r1	; 0x19
	p->max_speed = MAX_SPEED;
    cbb8:	82 e3       	ldi	r24, 0x32	; 50
    cbba:	88 8f       	std	Y+24, r24	; 0x18
	player_init_shot_state(p);
    cbbc:	ce 01       	movw	r24, r28
    cbbe:	0e 94 a2 59 	call	0xb344	; 0xb344 <player_init_shot_state>
	player_spawn(p);
    cbc2:	ce 01       	movw	r24, r28
}
    cbc4:	df 91       	pop	r29
    cbc6:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    cbc8:	0c 94 c7 59 	jmp	0xb38e	; 0xb38e <player_spawn>

0000cbcc <load_level>:
}

void load_level(int level_number)
{
    cbcc:	8f 92       	push	r8
    cbce:	9f 92       	push	r9
    cbd0:	af 92       	push	r10
    cbd2:	bf 92       	push	r11
    cbd4:	cf 92       	push	r12
    cbd6:	df 92       	push	r13
    cbd8:	ef 92       	push	r14
    cbda:	ff 92       	push	r15
    cbdc:	0f 93       	push	r16
    cbde:	1f 93       	push	r17
    cbe0:	cf 93       	push	r28
    cbe2:	df 93       	push	r29
    cbe4:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    cbe6:	8e ee       	ldi	r24, 0xEE	; 238
    cbe8:	92 e0       	ldi	r25, 0x02	; 2
    cbea:	c8 9f       	mul	r28, r24
    cbec:	70 01       	movw	r14, r0
    cbee:	c9 9f       	mul	r28, r25
    cbf0:	f0 0c       	add	r15, r0
    cbf2:	d8 9f       	mul	r29, r24
    cbf4:	f0 0c       	add	r15, r0
    cbf6:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    cbf8:	10 92 17 0c 	sts	0x0C17, r1
    cbfc:	10 92 16 0c 	sts	0x0C16, r1
	init_tile_animations(&tile_animations);
    cc00:	89 e1       	ldi	r24, 0x19	; 25
    cc02:	9c e0       	ldi	r25, 0x0C	; 12
    cc04:	0e 94 59 58 	call	0xb0b2	; 0xb0b2 <init_tile_animations>
	init_scope_animation(&scope_animation);
    cc08:	8a e2       	ldi	r24, 0x2A	; 42
    cc0a:	90 e1       	ldi	r25, 0x10	; 16
    cc0c:	0e 94 80 58 	call	0xb100	; 0xb100 <init_scope_animation>
	init_sub_animation(&sub_animation);
    cc10:	8c e1       	ldi	r24, 0x1C	; 28
    cc12:	90 e1       	ldi	r25, 0x10	; 16
    cc14:	0e 94 98 58 	call	0xb130	; 0xb130 <init_sub_animation>
	game.current_screen = LEVEL;
    cc18:	83 e0       	ldi	r24, 0x03	; 3
    cc1a:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    cc1e:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
	game.current_level = level_number;
    cc22:	c0 93 0d 0c 	sts	0x0C0D, r28
    cc26:	86 eb       	ldi	r24, 0xB6	; 182
    cc28:	a8 2e       	mov	r10, r24
    cc2a:	8c e0       	ldi	r24, 0x0C	; 12
    cc2c:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    cc2e:	00 e0       	ldi	r16, 0x00	; 0
    cc30:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    cc32:	9e e1       	ldi	r25, 0x1E	; 30
    cc34:	c9 2e       	mov	r12, r25
    cc36:	d1 2c       	mov	r13, r1
    cc38:	c8 01       	movw	r24, r16
    cc3a:	b6 01       	movw	r22, r12
    cc3c:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    cc40:	d8 2f       	mov	r29, r24
    cc42:	dd 0f       	add	r29, r29
    cc44:	dd 0f       	add	r29, r29
    cc46:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    cc48:	ab 01       	movw	r20, r22
    cc4a:	4d 5f       	subi	r20, 0xFD	; 253
    cc4c:	5f 4f       	sbci	r21, 0xFF	; 255
    cc4e:	c4 2f       	mov	r28, r20
    cc50:	cc 0f       	add	r28, r28
    cc52:	cc 0f       	add	r28, r28
    cc54:	cc 0f       	add	r28, r28
    cc56:	f8 01       	movw	r30, r16
    cc58:	ee 0d       	add	r30, r14
    cc5a:	ff 1d       	adc	r31, r15
    cc5c:	eb 52       	subi	r30, 0x2B	; 43
    cc5e:	fd 4d       	sbci	r31, 0xDD	; 221
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    cc60:	e4 91       	lpm	r30, Z
    cc62:	45 01       	movw	r8, r10
    cc64:	d5 01       	movw	r26, r10
    cc66:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    cc68:	e8 35       	cpi	r30, 0x58	; 88
    cc6a:	31 f4       	brne	.+12     	; 0xcc78 <load_level+0xac>
		{
			prep_player(&player1, x, y);
    cc6c:	4c 2f       	mov	r20, r28
    cc6e:	6d 2f       	mov	r22, r29
    cc70:	86 e3       	ldi	r24, 0x36	; 54
    cc72:	9c e0       	ldi	r25, 0x0C	; 12
    cc74:	0e 94 d4 65 	call	0xcba8	; 0xcba8 <prep_player>
    cc78:	bf ef       	ldi	r27, 0xFF	; 255
    cc7a:	ab 1a       	sub	r10, r27
    cc7c:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    cc7e:	f4 01       	movw	r30, r8
    cc80:	80 81       	ld	r24, Z
    cc82:	83 36       	cpi	r24, 0x63	; 99
    cc84:	31 f4       	brne	.+12     	; 0xcc92 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    cc86:	4c 2f       	mov	r20, r28
    cc88:	6d 2f       	mov	r22, r29
    cc8a:	84 ea       	ldi	r24, 0xA4	; 164
    cc8c:	9f e0       	ldi	r25, 0x0F	; 15
    cc8e:	0e 94 d4 65 	call	0xcba8	; 0xcba8 <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    cc92:	0f 5f       	subi	r16, 0xFF	; 255
    cc94:	1f 4f       	sbci	r17, 0xFF	; 255
    cc96:	0e 3e       	cpi	r16, 0xEE	; 238
    cc98:	f2 e0       	ldi	r31, 0x02	; 2
    cc9a:	1f 07       	cpc	r17, r31
    cc9c:	69 f6       	brne	.-102    	; 0xcc38 <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    cc9e:	60 e0       	ldi	r22, 0x00	; 0
    cca0:	86 e3       	ldi	r24, 0x36	; 54
    cca2:	9c e0       	ldi	r25, 0x0C	; 12
    cca4:	0e 94 91 5b 	call	0xb722	; 0xb722 <render_hud>
	render_hud(&player2, 15);
    cca8:	6f e0       	ldi	r22, 0x0F	; 15
    ccaa:	84 ea       	ldi	r24, 0xA4	; 164
    ccac:	9f e0       	ldi	r25, 0x0F	; 15
    ccae:	0e 94 91 5b 	call	0xb722	; 0xb722 <render_hud>
	render_score(&player1, 0);
    ccb2:	60 e0       	ldi	r22, 0x00	; 0
    ccb4:	86 e3       	ldi	r24, 0x36	; 54
    ccb6:	9c e0       	ldi	r25, 0x0C	; 12
    ccb8:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <render_score>
	render_score(&player2, 15);
    ccbc:	6f e0       	ldi	r22, 0x0F	; 15
    ccbe:	84 ea       	ldi	r24, 0xA4	; 164
    ccc0:	9f e0       	ldi	r25, 0x0F	; 15
    ccc2:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <render_score>
	Print(14, 0, (char*) strVertSep);
    ccc6:	4a e4       	ldi	r20, 0x4A	; 74
    ccc8:	5b e0       	ldi	r21, 0x0B	; 11
    ccca:	60 e0       	ldi	r22, 0x00	; 0
    cccc:	70 e0       	ldi	r23, 0x00	; 0
    ccce:	8e e0       	ldi	r24, 0x0E	; 14
    ccd0:	90 e0       	ldi	r25, 0x00	; 0
    ccd2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(14, 1, (char*) strVertSep);
    ccd6:	4a e4       	ldi	r20, 0x4A	; 74
    ccd8:	5b e0       	ldi	r21, 0x0B	; 11
    ccda:	61 e0       	ldi	r22, 0x01	; 1
    ccdc:	70 e0       	ldi	r23, 0x00	; 0
    ccde:	8e e0       	ldi	r24, 0x0E	; 14
    cce0:	90 e0       	ldi	r25, 0x00	; 0
    cce2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(14, 2, (char*) strVertSep);
    cce6:	4a e4       	ldi	r20, 0x4A	; 74
    cce8:	5b e0       	ldi	r21, 0x0B	; 11
    ccea:	62 e0       	ldi	r22, 0x02	; 2
    ccec:	70 e0       	ldi	r23, 0x00	; 0
    ccee:	8e e0       	ldi	r24, 0x0E	; 14
    ccf0:	90 e0       	ldi	r25, 0x00	; 0
    ccf2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	load_level_tiles(false);
    ccf6:	80 e0       	ldi	r24, 0x00	; 0
}
    ccf8:	df 91       	pop	r29
    ccfa:	cf 91       	pop	r28
    ccfc:	1f 91       	pop	r17
    ccfe:	0f 91       	pop	r16
    cd00:	ff 90       	pop	r15
    cd02:	ef 90       	pop	r14
    cd04:	df 90       	pop	r13
    cd06:	cf 90       	pop	r12
    cd08:	bf 90       	pop	r11
    cd0a:	af 90       	pop	r10
    cd0c:	9f 90       	pop	r9
    cd0e:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    cd10:	0c 94 61 65 	jmp	0xcac2	; 0xcac2 <load_level_tiles>

0000cd14 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    cd14:	cf 93       	push	r28
    cd16:	df 93       	push	r29
    cd18:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    cd1a:	61 e0       	ldi	r22, 0x01	; 1
    cd1c:	83 e0       	ldi	r24, 0x03	; 3
    cd1e:	0e 94 ef 55 	call	0xabde	; 0xabde <FadeOut>
	ClearVram();
    cd22:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
	clear_sprites();
    cd26:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    cd2a:	d0 e0       	ldi	r29, 0x00	; 0
    cd2c:	ae 01       	movw	r20, r28
    cd2e:	84 e0       	ldi	r24, 0x04	; 4
    cd30:	44 0f       	add	r20, r20
    cd32:	55 1f       	adc	r21, r21
    cd34:	8a 95       	dec	r24
    cd36:	e1 f7       	brne	.-8      	; 0xcd30 <level_transition+0x1c>
    cd38:	49 59       	subi	r20, 0x99	; 153
    cd3a:	56 4f       	sbci	r21, 0xF6	; 246
    cd3c:	6c e0       	ldi	r22, 0x0C	; 12
    cd3e:	70 e0       	ldi	r23, 0x00	; 0
    cd40:	88 e0       	ldi	r24, 0x08	; 8
    cd42:	90 e0       	ldi	r25, 0x00	; 0
    cd44:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	FadeIn(1, true);
    cd48:	61 e0       	ldi	r22, 0x01	; 1
    cd4a:	81 e0       	ldi	r24, 0x01	; 1
    cd4c:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    cd50:	84 e0       	ldi	r24, 0x04	; 4
    cd52:	0e 94 32 58 	call	0xb064	; 0xb064 <LBWaitSeconds>
	FadeOut(1, true);
    cd56:	61 e0       	ldi	r22, 0x01	; 1
    cd58:	81 e0       	ldi	r24, 0x01	; 1
    cd5a:	0e 94 ef 55 	call	0xabde	; 0xabde <FadeOut>
	ClearVram();
    cd5e:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cd62:	60 e0       	ldi	r22, 0x00	; 0
    cd64:	83 e0       	ldi	r24, 0x03	; 3
    cd66:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <FadeIn>
	load_level(index);
    cd6a:	ce 01       	movw	r24, r28
}
    cd6c:	df 91       	pop	r29
    cd6e:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    cd70:	0c 94 e6 65 	jmp	0xcbcc	; 0xcbcc <load_level>

0000cd74 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    cd74:	8a e2       	ldi	r24, 0x2A	; 42
    cd76:	90 e1       	ldi	r25, 0x10	; 16
    cd78:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <render_scope>
    cd7c:	88 23       	and	r24, r24
    cd7e:	41 f0       	breq	.+16     	; 0xcd90 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    cd80:	82 e0       	ldi	r24, 0x02	; 2
    cd82:	80 93 0f 0c 	sts	0x0C0F, r24
		SFX_ALARM;
    cd86:	41 e0       	ldi	r20, 0x01	; 1
    cd88:	6f ef       	ldi	r22, 0xFF	; 255
    cd8a:	88 e0       	ldi	r24, 0x08	; 8
    cd8c:	0c 94 a1 4a 	jmp	0x9542	; 0x9542 <TriggerFx>
    cd90:	08 95       	ret

0000cd92 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    cd92:	0f 93       	push	r16
    cd94:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    cd96:	8c e1       	ldi	r24, 0x1C	; 28
    cd98:	90 e1       	ldi	r25, 0x10	; 16
    cd9a:	0e 94 49 56 	call	0xac92	; 0xac92 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    cd9e:	ac 01       	movw	r20, r24
    cda0:	64 e0       	ldi	r22, 0x04	; 4
    cda2:	81 e0       	ldi	r24, 0x01	; 1
    cda4:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	if (sub_animation.anim.reversing)
    cda8:	80 91 21 10 	lds	r24, 0x1021
    cdac:	88 23       	and	r24, r24
    cdae:	d9 f0       	breq	.+54     	; 0xcde6 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    cdb0:	84 e0       	ldi	r24, 0x04	; 4
    cdb2:	80 93 0f 0c 	sts	0x0C0F, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    cdb6:	00 e0       	ldi	r16, 0x00	; 0
    cdb8:	10 e0       	ldi	r17, 0x00	; 0
    cdba:	20 e9       	ldi	r18, 0x90	; 144
    cdbc:	32 e4       	ldi	r19, 0x42	; 66
    cdbe:	40 e0       	ldi	r20, 0x00	; 0
    cdc0:	50 e0       	ldi	r21, 0x00	; 0
    cdc2:	60 ec       	ldi	r22, 0xC0	; 192
    cdc4:	72 e4       	ldi	r23, 0x42	; 66
    cdc6:	8d e6       	ldi	r24, 0x6D	; 109
    cdc8:	90 e1       	ldi	r25, 0x10	; 16
    cdca:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    cdce:	00 e0       	ldi	r16, 0x00	; 0
    cdd0:	10 e0       	ldi	r17, 0x00	; 0
    cdd2:	20 e9       	ldi	r18, 0x90	; 144
    cdd4:	32 e4       	ldi	r19, 0x42	; 66
    cdd6:	40 e0       	ldi	r20, 0x00	; 0
    cdd8:	50 e0       	ldi	r21, 0x00	; 0
    cdda:	60 e4       	ldi	r22, 0x40	; 64
    cddc:	73 e4       	ldi	r23, 0x43	; 67
    cdde:	88 e3       	ldi	r24, 0x38	; 56
    cde0:	90 e1       	ldi	r25, 0x10	; 16
    cde2:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <init_turret>
	}
}
    cde6:	1f 91       	pop	r17
    cde8:	0f 91       	pop	r16
    cdea:	08 95       	ret

0000cdec <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    cdec:	8c e1       	ldi	r24, 0x1C	; 28
    cdee:	90 e1       	ldi	r25, 0x10	; 16
    cdf0:	0e 94 49 56 	call	0xac92	; 0xac92 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    cdf4:	20 91 1c 10 	lds	r18, 0x101C
    cdf8:	21 11       	cpse	r18, r1
    cdfa:	05 c0       	rjmp	.+10     	; 0xce06 <render_boss_fight_sub_sinking+0x1a>
    cdfc:	ac 01       	movw	r20, r24
    cdfe:	64 e0       	ldi	r22, 0x04	; 4
    ce00:	81 e0       	ldi	r24, 0x01	; 1
    ce02:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	if (sub_animation.anim.looped)
    ce06:	80 91 20 10 	lds	r24, 0x1020
    ce0a:	88 23       	and	r24, r24
    ce0c:	19 f0       	breq	.+6      	; 0xce14 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    ce0e:	88 e0       	ldi	r24, 0x08	; 8
    ce10:	80 93 0f 0c 	sts	0x0C0F, r24
    ce14:	08 95       	ret

0000ce16 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    ce16:	ef 92       	push	r14
    ce18:	ff 92       	push	r15
    ce1a:	0f 93       	push	r16
    ce1c:	1f 93       	push	r17
    ce1e:	cf 93       	push	r28
    ce20:	df 93       	push	r29
    ce22:	1f 92       	push	r1
    ce24:	cd b7       	in	r28, 0x3d	; 61
    ce26:	de b7       	in	r29, 0x3e	; 62
    ce28:	7c 01       	movw	r14, r24
    ce2a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    ce2c:	fc 01       	movw	r30, r24
    ce2e:	67 81       	ldd	r22, Z+7	; 0x07
    ce30:	70 85       	ldd	r23, Z+8	; 0x08
    ce32:	81 85       	ldd	r24, Z+9	; 0x09
    ce34:	92 85       	ldd	r25, Z+10	; 0x0a
    ce36:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ce3a:	46 2f       	mov	r20, r22
    ce3c:	f7 01       	movw	r30, r14
    ce3e:	63 81       	ldd	r22, Z+3	; 0x03
    ce40:	74 81       	ldd	r23, Z+4	; 0x04
    ce42:	85 81       	ldd	r24, Z+5	; 0x05
    ce44:	96 81       	ldd	r25, Z+6	; 0x06
    ce46:	49 83       	std	Y+1, r20	; 0x01
    ce48:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ce4c:	01 e0       	ldi	r16, 0x01	; 1
    ce4e:	21 e0       	ldi	r18, 0x01	; 1
    ce50:	49 81       	ldd	r20, Y+1	; 0x01
    ce52:	81 2f       	mov	r24, r17
    ce54:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
}
    ce58:	0f 90       	pop	r0
    ce5a:	df 91       	pop	r29
    ce5c:	cf 91       	pop	r28
    ce5e:	1f 91       	pop	r17
    ce60:	0f 91       	pop	r16
    ce62:	ff 90       	pop	r15
    ce64:	ef 90       	pop	r14
    ce66:	08 95       	ret

0000ce68 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    ce68:	ef 92       	push	r14
    ce6a:	ff 92       	push	r15
    ce6c:	0f 93       	push	r16
    ce6e:	1f 93       	push	r17
    ce70:	cf 93       	push	r28
    ce72:	df 93       	push	r29
    ce74:	1f 92       	push	r1
    ce76:	cd b7       	in	r28, 0x3d	; 61
    ce78:	de b7       	in	r29, 0x3e	; 62
    ce7a:	7c 01       	movw	r14, r24
    ce7c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    ce7e:	fc 01       	movw	r30, r24
    ce80:	64 89       	ldd	r22, Z+20	; 0x14
    ce82:	75 89       	ldd	r23, Z+21	; 0x15
    ce84:	86 89       	ldd	r24, Z+22	; 0x16
    ce86:	97 89       	ldd	r25, Z+23	; 0x17
    ce88:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ce8c:	46 2f       	mov	r20, r22
    ce8e:	f7 01       	movw	r30, r14
    ce90:	60 89       	ldd	r22, Z+16	; 0x10
    ce92:	71 89       	ldd	r23, Z+17	; 0x11
    ce94:	82 89       	ldd	r24, Z+18	; 0x12
    ce96:	93 89       	ldd	r25, Z+19	; 0x13
    ce98:	49 83       	std	Y+1, r20	; 0x01
    ce9a:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    ce9e:	01 e0       	ldi	r16, 0x01	; 1
    cea0:	21 e0       	ldi	r18, 0x01	; 1
    cea2:	49 81       	ldd	r20, Y+1	; 0x01
    cea4:	81 2f       	mov	r24, r17
    cea6:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
}
    ceaa:	0f 90       	pop	r0
    ceac:	df 91       	pop	r29
    ceae:	cf 91       	pop	r28
    ceb0:	1f 91       	pop	r17
    ceb2:	0f 91       	pop	r16
    ceb4:	ff 90       	pop	r15
    ceb6:	ef 90       	pop	r14
    ceb8:	08 95       	ret

0000ceba <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    ceba:	cf 92       	push	r12
    cebc:	df 92       	push	r13
    cebe:	ef 92       	push	r14
    cec0:	ff 92       	push	r15
    cec2:	cf 93       	push	r28
    cec4:	df 93       	push	r29
    cec6:	ec 01       	movw	r28, r24
    cec8:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    ceca:	cb 80       	ldd	r12, Y+3	; 0x03
    cecc:	dc 80       	ldd	r13, Y+4	; 0x04
    cece:	ed 80       	ldd	r14, Y+5	; 0x05
    ced0:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    ced2:	6f 81       	ldd	r22, Y+7	; 0x07
    ced4:	78 85       	ldd	r23, Y+8	; 0x08
    ced6:	89 85       	ldd	r24, Y+9	; 0x09
    ced8:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    ceda:	2b 85       	ldd	r18, Y+11	; 0x0b
    cedc:	21 11       	cpse	r18, r1
    cede:	27 c0       	rjmp	.+78     	; 0xcf2e <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    cee0:	20 e0       	ldi	r18, 0x00	; 0
    cee2:	30 e0       	ldi	r19, 0x00	; 0
    cee4:	40 e0       	ldi	r20, 0x00	; 0
    cee6:	5e e3       	ldi	r21, 0x3E	; 62
    cee8:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    ceec:	20 e0       	ldi	r18, 0x00	; 0
    ceee:	30 e0       	ldi	r19, 0x00	; 0
    cef0:	40 e4       	ldi	r20, 0x40	; 64
    cef2:	50 e4       	ldi	r21, 0x40	; 64
    cef4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    cef8:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    cefc:	8e e1       	ldi	r24, 0x1E	; 30
    cefe:	68 9f       	mul	r22, r24
    cf00:	e0 01       	movw	r28, r0
    cf02:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    cf04:	20 e0       	ldi	r18, 0x00	; 0
    cf06:	30 e0       	ldi	r19, 0x00	; 0
    cf08:	40 e0       	ldi	r20, 0x00	; 0
    cf0a:	5e e3       	ldi	r21, 0x3E	; 62
    cf0c:	c7 01       	movw	r24, r14
    cf0e:	b6 01       	movw	r22, r12
    cf10:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    cf14:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    cf18:	c6 0f       	add	r28, r22
    cf1a:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    cf1c:	be 01       	movw	r22, r28
    cf1e:	89 e1       	ldi	r24, 0x19	; 25
    cf20:	9c e0       	ldi	r25, 0x0C	; 12
    cf22:	0e 94 4e 60 	call	0xc09c	; 0xc09c <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    cf26:	cb 54       	subi	r28, 0x4B	; 75
    cf28:	d3 4f       	sbci	r29, 0xF3	; 243
    cf2a:	19 82       	std	Y+1, r1	; 0x01
    cf2c:	56 c0       	rjmp	.+172    	; 0xcfda <update_turret+0x120>
	}
	else if (t->shared.direction == D_LEFT)
    cf2e:	98 81       	ld	r25, Y
    cf30:	93 30       	cpi	r25, 0x03	; 3
    cf32:	19 f5       	brne	.+70     	; 0xcf7a <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    cf34:	63 2f       	mov	r22, r19
    cf36:	70 e0       	ldi	r23, 0x00	; 0
    cf38:	80 e0       	ldi	r24, 0x00	; 0
    cf3a:	90 e0       	ldi	r25, 0x00	; 0
    cf3c:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    cf40:	9b 01       	movw	r18, r22
    cf42:	ac 01       	movw	r20, r24
    cf44:	c7 01       	movw	r24, r14
    cf46:	b6 01       	movw	r22, r12
    cf48:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    cf4c:	87 ff       	sbrs	r24, 7
    cf4e:	02 c0       	rjmp	.+4      	; 0xcf54 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    cf50:	81 e0       	ldi	r24, 0x01	; 1
    cf52:	24 c0       	rjmp	.+72     	; 0xcf9c <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    cf54:	69 81       	ldd	r22, Y+1	; 0x01
    cf56:	70 e0       	ldi	r23, 0x00	; 0
    cf58:	80 e0       	ldi	r24, 0x00	; 0
    cf5a:	90 e0       	ldi	r25, 0x00	; 0
    cf5c:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    cf60:	25 e6       	ldi	r18, 0x65	; 101
    cf62:	38 e8       	ldi	r19, 0x88	; 136
    cf64:	48 e8       	ldi	r20, 0x88	; 136
    cf66:	5c e3       	ldi	r21, 0x3C	; 60
    cf68:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    cf6c:	9b 01       	movw	r18, r22
    cf6e:	ac 01       	movw	r20, r24
    cf70:	c7 01       	movw	r24, r14
    cf72:	b6 01       	movw	r22, r12
    cf74:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    cf78:	2c c0       	rjmp	.+88     	; 0xcfd2 <update_turret+0x118>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    cf7a:	91 30       	cpi	r25, 0x01	; 1
    cf7c:	71 f5       	brne	.+92     	; 0xcfda <update_turret+0x120>
	{
		if (t->shared.x > right_limit)
    cf7e:	64 2f       	mov	r22, r20
    cf80:	70 e0       	ldi	r23, 0x00	; 0
    cf82:	80 e0       	ldi	r24, 0x00	; 0
    cf84:	90 e0       	ldi	r25, 0x00	; 0
    cf86:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    cf8a:	9b 01       	movw	r18, r22
    cf8c:	ac 01       	movw	r20, r24
    cf8e:	c7 01       	movw	r24, r14
    cf90:	b6 01       	movw	r22, r12
    cf92:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    cf96:	18 16       	cp	r1, r24
    cf98:	54 f4       	brge	.+20     	; 0xcfae <update_turret+0xf4>
		{
			t->shared.direction = D_LEFT;
    cf9a:	83 e0       	ldi	r24, 0x03	; 3
    cf9c:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    cf9e:	6c e8       	ldi	r22, 0x8C	; 140
    cfa0:	70 e0       	ldi	r23, 0x00	; 0
    cfa2:	8a e5       	ldi	r24, 0x5A	; 90
    cfa4:	90 e0       	ldi	r25, 0x00	; 0
    cfa6:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    cfaa:	89 83       	std	Y+1, r24	; 0x01
    cfac:	16 c0       	rjmp	.+44     	; 0xcfda <update_turret+0x120>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    cfae:	69 81       	ldd	r22, Y+1	; 0x01
    cfb0:	70 e0       	ldi	r23, 0x00	; 0
    cfb2:	80 e0       	ldi	r24, 0x00	; 0
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    cfba:	25 e6       	ldi	r18, 0x65	; 101
    cfbc:	38 e8       	ldi	r19, 0x88	; 136
    cfbe:	48 e8       	ldi	r20, 0x88	; 136
    cfc0:	5c e3       	ldi	r21, 0x3C	; 60
    cfc2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    cfc6:	9b 01       	movw	r18, r22
    cfc8:	ac 01       	movw	r20, r24
    cfca:	c7 01       	movw	r24, r14
    cfcc:	b6 01       	movw	r22, r12
    cfce:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    cfd2:	6b 83       	std	Y+3, r22	; 0x03
    cfd4:	7c 83       	std	Y+4, r23	; 0x04
    cfd6:	8d 83       	std	Y+5, r24	; 0x05
    cfd8:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    cfda:	df 91       	pop	r29
    cfdc:	cf 91       	pop	r28
    cfde:	ff 90       	pop	r15
    cfe0:	ef 90       	pop	r14
    cfe2:	df 90       	pop	r13
    cfe4:	cf 90       	pop	r12
    cfe6:	08 95       	ret

0000cfe8 <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    cfe8:	0f 93       	push	r16
    cfea:	1f 93       	push	r17
    cfec:	cf 93       	push	r28
    cfee:	df 93       	push	r29
    cff0:	8c 01       	movw	r16, r24
    cff2:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    cff4:	fc 01       	movw	r30, r24
    cff6:	83 85       	ldd	r24, Z+11	; 0x0b
    cff8:	81 11       	cpse	r24, r1
    cffa:	02 c0       	rjmp	.+4      	; 0xd000 <update_turret_shot+0x18>
	{
		s->active = 0;
    cffc:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    cffe:	76 c0       	rjmp	.+236    	; 0xd0ec <update_turret_shot+0x104>
	}
	if (!s->active)
    d000:	8e 85       	ldd	r24, Y+14	; 0x0e
    d002:	81 11       	cpse	r24, r1
    d004:	2e c0       	rjmp	.+92     	; 0xd062 <update_turret_shot+0x7a>
	{
		s->active = 1;
    d006:	81 e0       	ldi	r24, 0x01	; 1
    d008:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    d00a:	20 e0       	ldi	r18, 0x00	; 0
    d00c:	30 e0       	ldi	r19, 0x00	; 0
    d00e:	40 e4       	ldi	r20, 0x40	; 64
    d010:	50 e4       	ldi	r21, 0x40	; 64
    d012:	f8 01       	movw	r30, r16
    d014:	63 81       	ldd	r22, Z+3	; 0x03
    d016:	74 81       	ldd	r23, Z+4	; 0x04
    d018:	85 81       	ldd	r24, Z+5	; 0x05
    d01a:	96 81       	ldd	r25, Z+6	; 0x06
    d01c:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d020:	6b 83       	std	Y+3, r22	; 0x03
    d022:	7c 83       	std	Y+4, r23	; 0x04
    d024:	8d 83       	std	Y+5, r24	; 0x05
    d026:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    d028:	20 e0       	ldi	r18, 0x00	; 0
    d02a:	30 e0       	ldi	r19, 0x00	; 0
    d02c:	40 e4       	ldi	r20, 0x40	; 64
    d02e:	50 e4       	ldi	r21, 0x40	; 64
    d030:	f8 01       	movw	r30, r16
    d032:	67 81       	ldd	r22, Z+7	; 0x07
    d034:	70 85       	ldd	r23, Z+8	; 0x08
    d036:	81 85       	ldd	r24, Z+9	; 0x09
    d038:	92 85       	ldd	r25, Z+10	; 0x0a
    d03a:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d03e:	6f 83       	std	Y+7, r22	; 0x07
    d040:	78 87       	std	Y+8, r23	; 0x08
    d042:	89 87       	std	Y+9, r24	; 0x09
    d044:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
    d046:	80 91 4a 0c 	lds	r24, 0x0C4A
    d04a:	80 fd       	sbrc	r24, 0
    d04c:	0a c0       	rjmp	.+20     	; 0xd062 <update_turret_shot+0x7a>
    d04e:	80 91 b8 0f 	lds	r24, 0x0FB8
    d052:	80 fd       	sbrc	r24, 0
    d054:	06 c0       	rjmp	.+12     	; 0xd062 <update_turret_shot+0x7a>
    d056:	2f ef       	ldi	r18, 0xFF	; 255
    d058:	47 e1       	ldi	r20, 0x17	; 23
    d05a:	62 e0       	ldi	r22, 0x02	; 2
    d05c:	84 e0       	ldi	r24, 0x04	; 4
    d05e:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    d062:	23 e3       	ldi	r18, 0x33	; 51
    d064:	35 e5       	ldi	r19, 0x55	; 85
    d066:	45 e8       	ldi	r20, 0x85	; 133
    d068:	50 e4       	ldi	r21, 0x40	; 64
    d06a:	6f 81       	ldd	r22, Y+7	; 0x07
    d06c:	78 85       	ldd	r23, Y+8	; 0x08
    d06e:	89 85       	ldd	r24, Y+9	; 0x09
    d070:	9a 85       	ldd	r25, Y+10	; 0x0a
    d072:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d076:	6f 83       	std	Y+7, r22	; 0x07
    d078:	78 87       	std	Y+8, r23	; 0x08
    d07a:	89 87       	std	Y+9, r24	; 0x09
    d07c:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    d07e:	20 e0       	ldi	r18, 0x00	; 0
    d080:	30 e0       	ldi	r19, 0x00	; 0
    d082:	40 e0       	ldi	r20, 0x00	; 0
    d084:	51 e4       	ldi	r21, 0x41	; 65
    d086:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d08a:	20 e0       	ldi	r18, 0x00	; 0
    d08c:	30 e0       	ldi	r19, 0x00	; 0
    d08e:	48 e5       	ldi	r20, 0x58	; 88
    d090:	53 e4       	ldi	r21, 0x43	; 67
    d092:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__gesf2>
    d096:	18 16       	cp	r1, r24
    d098:	0c f4       	brge	.+2      	; 0xd09c <update_turret_shot+0xb4>
    d09a:	b0 cf       	rjmp	.-160    	; 0xcffc <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    d09c:	00 91 12 0c 	lds	r16, 0x0C12
    d0a0:	10 91 13 0c 	lds	r17, 0x0C13
    d0a4:	be 01       	movw	r22, r28
    d0a6:	c8 01       	movw	r24, r16
    d0a8:	0e 94 a5 5e 	call	0xbd4a	; 0xbd4a <player_shot>
    d0ac:	88 23       	and	r24, r24
    d0ae:	f1 f0       	breq	.+60     	; 0xd0ec <update_turret_shot+0x104>
    d0b0:	f8 01       	movw	r30, r16
    d0b2:	84 89       	ldd	r24, Z+20	; 0x14
    d0b4:	80 fd       	sbrc	r24, 0
    d0b6:	1a c0       	rjmp	.+52     	; 0xd0ec <update_turret_shot+0x104>
	{
		game.boss_fight_player_lives--;
    d0b8:	90 91 11 0c 	lds	r25, 0x0C11
    d0bc:	91 50       	subi	r25, 0x01	; 1
    d0be:	90 93 11 0c 	sts	0x0C11, r25
		if (game.boss_fight_player_lives <= 0)
    d0c2:	91 11       	cpse	r25, r1
    d0c4:	03 c0       	rjmp	.+6      	; 0xd0cc <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d0c6:	80 e1       	ldi	r24, 0x10	; 16
    d0c8:	80 93 0f 0c 	sts	0x0C0F, r24
		}
		s->active = 0;
    d0cc:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d0ce:	60 91 10 0c 	lds	r22, 0x0C10
    d0d2:	c8 01       	movw	r24, r16
    d0d4:	0e 94 d4 5f 	call	0xbfa8	; 0xbfa8 <kill_player>
		SFX_TANK_EXPLODE;
    d0d8:	2f ef       	ldi	r18, 0xFF	; 255
    d0da:	40 e1       	ldi	r20, 0x10	; 16
    d0dc:	67 e0       	ldi	r22, 0x07	; 7
    d0de:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    d0e0:	df 91       	pop	r29
    d0e2:	cf 91       	pop	r28
    d0e4:	1f 91       	pop	r17
    d0e6:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    d0e8:	0c 94 e0 4a 	jmp	0x95c0	; 0x95c0 <TriggerNote>
	}
}
    d0ec:	df 91       	pop	r29
    d0ee:	cf 91       	pop	r28
    d0f0:	1f 91       	pop	r17
    d0f2:	0f 91       	pop	r16
    d0f4:	08 95       	ret

0000d0f6 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    d0f6:	10 92 0c 0c 	sts	0x0C0C, r1
	clear_sprites();
    d0fa:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    d0fe:	4f e7       	ldi	r20, 0x7F	; 127
    d100:	5b e0       	ldi	r21, 0x0B	; 11
    d102:	6d e0       	ldi	r22, 0x0D	; 13
    d104:	70 e0       	ldi	r23, 0x00	; 0
    d106:	87 e0       	ldi	r24, 0x07	; 7
    d108:	90 e0       	ldi	r25, 0x00	; 0
    d10a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(7, 14, (char*) str2Player);
    d10e:	4e e6       	ldi	r20, 0x6E	; 110
    d110:	5b e0       	ldi	r21, 0x0B	; 11
    d112:	6e e0       	ldi	r22, 0x0E	; 14
    d114:	70 e0       	ldi	r23, 0x00	; 0
    d116:	87 e0       	ldi	r24, 0x07	; 7
    d118:	90 e0       	ldi	r25, 0x00	; 0
    d11a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(7, 15, (char*) strHighscores);
    d11e:	44 e6       	ldi	r20, 0x64	; 100
    d120:	5b e0       	ldi	r21, 0x0B	; 11
    d122:	6f e0       	ldi	r22, 0x0F	; 15
    d124:	70 e0       	ldi	r23, 0x00	; 0
    d126:	87 e0       	ldi	r24, 0x07	; 7
    d128:	90 e0       	ldi	r25, 0x00	; 0
    d12a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(5, 26, (char*) strCopyright);
    d12e:	4d e8       	ldi	r20, 0x8D	; 141
    d130:	5b e0       	ldi	r21, 0x0B	; 11
    d132:	6a e1       	ldi	r22, 0x1A	; 26
    d134:	70 e0       	ldi	r23, 0x00	; 0
    d136:	85 e0       	ldi	r24, 0x05	; 5
    d138:	90 e0       	ldi	r25, 0x00	; 0
    d13a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    d13e:	4e e0       	ldi	r20, 0x0E	; 14
    d140:	56 e8       	ldi	r21, 0x86	; 134
    d142:	65 e0       	ldi	r22, 0x05	; 5
    d144:	84 e0       	ldi	r24, 0x04	; 4
    d146:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    d14a:	40 e0       	ldi	r20, 0x00	; 0
    d14c:	6b e5       	ldi	r22, 0x5B	; 91
    d14e:	7c e4       	ldi	r23, 0x4C	; 76
    d150:	80 e0       	ldi	r24, 0x00	; 0
    d152:	0c 94 68 54 	jmp	0xa8d0	; 0xa8d0 <MapSprite2>

0000d156 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    d156:	fc 01       	movw	r30, r24
    d158:	20 81       	ld	r18, Z
    d15a:	31 81       	ldd	r19, Z+1	; 0x01
    d15c:	28 70       	andi	r18, 0x08	; 8
    d15e:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    d160:	81 e0       	ldi	r24, 0x01	; 1
    d162:	23 2b       	or	r18, r19
    d164:	09 f4       	brne	.+2      	; 0xd168 <select_pressed+0x12>
    d166:	80 e0       	ldi	r24, 0x00	; 0
}
    d168:	08 95       	ret

0000d16a <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    d16a:	ff 92       	push	r15
    d16c:	0f 93       	push	r16
    d16e:	1f 93       	push	r17
    d170:	cf 93       	push	r28
    d172:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    d174:	81 e0       	ldi	r24, 0x01	; 1
    d176:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    d17a:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    d17e:	4b ed       	ldi	r20, 0xDB	; 219
    d180:	55 e8       	ldi	r21, 0x85	; 133
    d182:	61 e0       	ldi	r22, 0x01	; 1
    d184:	87 e0       	ldi	r24, 0x07	; 7
    d186:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    d18a:	45 ed       	ldi	r20, 0xD5	; 213
    d18c:	55 e8       	ldi	r21, 0x85	; 133
    d18e:	61 e0       	ldi	r22, 0x01	; 1
    d190:	84 e1       	ldi	r24, 0x14	; 20
    d192:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    d196:	44 e6       	ldi	r20, 0x64	; 100
    d198:	5b e0       	ldi	r21, 0x0B	; 11
    d19a:	62 e0       	ldi	r22, 0x02	; 2
    d19c:	70 e0       	ldi	r23, 0x00	; 0
    d19e:	8a e0       	ldi	r24, 0x0A	; 10
    d1a0:	90 e0       	ldi	r25, 0x00	; 0
    d1a2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    d1a6:	0b ec       	ldi	r16, 0xCB	; 203
    d1a8:	1b e0       	ldi	r17, 0x0B	; 11
    d1aa:	c7 e0       	ldi	r28, 0x07	; 7
    d1ac:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    d1ae:	ff 24       	eor	r15, r15
    d1b0:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    d1b2:	20 e0       	ldi	r18, 0x00	; 0
    d1b4:	4f 2d       	mov	r20, r15
    d1b6:	be 01       	movw	r22, r28
    d1b8:	82 e0       	ldi	r24, 0x02	; 2
    d1ba:	90 e0       	ldi	r25, 0x00	; 0
    d1bc:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
		PrintChar(3, y, '.');
    d1c0:	4e e2       	ldi	r20, 0x2E	; 46
    d1c2:	be 01       	movw	r22, r28
    d1c4:	83 e0       	ldi	r24, 0x03	; 3
    d1c6:	90 e0       	ldi	r25, 0x00	; 0
    d1c8:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
    d1cc:	f8 01       	movw	r30, r16
    d1ce:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    d1d0:	80 81       	ld	r24, Z
    d1d2:	93 e0       	ldi	r25, 0x03	; 3
    d1d4:	89 9f       	mul	r24, r25
    d1d6:	a0 01       	movw	r20, r0
    d1d8:	11 24       	eor	r1, r1
    d1da:	42 51       	subi	r20, 0x12	; 18
    d1dc:	54 4f       	sbci	r21, 0xF4	; 244
    d1de:	23 e0       	ldi	r18, 0x03	; 3
    d1e0:	6c 2f       	mov	r22, r28
    d1e2:	85 e0       	ldi	r24, 0x05	; 5
    d1e4:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    d1e8:	49 ee       	ldi	r20, 0xE9	; 233
    d1ea:	5a e0       	ldi	r21, 0x0A	; 10
    d1ec:	be 01       	movw	r22, r28
    d1ee:	89 e0       	ldi	r24, 0x09	; 9
    d1f0:	90 e0       	ldi	r25, 0x00	; 0
    d1f2:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    d1f6:	f8 01       	movw	r30, r16
    d1f8:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    d1fa:	80 81       	ld	r24, Z
    d1fc:	e3 e0       	ldi	r30, 0x03	; 3
    d1fe:	8e 9f       	mul	r24, r30
    d200:	a0 01       	movw	r20, r0
    d202:	11 24       	eor	r1, r1
    d204:	42 51       	subi	r20, 0x12	; 18
    d206:	54 4f       	sbci	r21, 0xF4	; 244
    d208:	23 e0       	ldi	r18, 0x03	; 3
    d20a:	6c 2f       	mov	r22, r28
    d20c:	8e e0       	ldi	r24, 0x0E	; 14
    d20e:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
		Print(18, y, (char*) strBy);
    d212:	46 ee       	ldi	r20, 0xE6	; 230
    d214:	5a e0       	ldi	r21, 0x0A	; 10
    d216:	be 01       	movw	r22, r28
    d218:	82 e1       	ldi	r24, 0x12	; 18
    d21a:	90 e0       	ldi	r25, 0x00	; 0
    d21c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    d220:	21 e0       	ldi	r18, 0x01	; 1
    d222:	f8 01       	movw	r30, r16
    d224:	32 97       	sbiw	r30, 0x02	; 2
    d226:	40 81       	ld	r20, Z
    d228:	be 01       	movw	r22, r28
    d22a:	87 e1       	ldi	r24, 0x17	; 23
    d22c:	90 e0       	ldi	r25, 0x00	; 0
    d22e:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
		PrintChar(24, y, '-');
    d232:	4d e2       	ldi	r20, 0x2D	; 45
    d234:	be 01       	movw	r22, r28
    d236:	88 e1       	ldi	r24, 0x18	; 24
    d238:	90 e0       	ldi	r25, 0x00	; 0
    d23a:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    d23e:	21 e0       	ldi	r18, 0x01	; 1
    d240:	f8 01       	movw	r30, r16
    d242:	31 97       	sbiw	r30, 0x01	; 1
    d244:	40 81       	ld	r20, Z
    d246:	be 01       	movw	r22, r28
    d248:	8b e1       	ldi	r24, 0x1B	; 27
    d24a:	90 e0       	ldi	r25, 0x00	; 0
    d24c:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <PrintByte>
		if (scores.data[i+4]) PrintChar(29, y, '*');
    d250:	f8 01       	movw	r30, r16
    d252:	80 81       	ld	r24, Z
    d254:	88 23       	and	r24, r24
    d256:	31 f0       	breq	.+12     	; 0xd264 <load_tank_rank+0xfa>
    d258:	4a e2       	ldi	r20, 0x2A	; 42
    d25a:	be 01       	movw	r22, r28
    d25c:	8d e1       	ldi	r24, 0x1D	; 29
    d25e:	90 e0       	ldi	r25, 0x00	; 0
    d260:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
		y += 3;
		rank += 1;
    d264:	f3 94       	inc	r15
    d266:	23 96       	adiw	r28, 0x03	; 3
    d268:	0b 5f       	subi	r16, 0xFB	; 251
    d26a:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    d26c:	f6 e0       	ldi	r31, 0x06	; 6
    d26e:	ff 12       	cpse	r15, r31
    d270:	a0 cf       	rjmp	.-192    	; 0xd1b2 <load_tank_rank+0x48>
		PrintByte(27, y, scores.data[i+3] ,true);
		if (scores.data[i+4]) PrintChar(29, y, '*');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    d272:	4d ef       	ldi	r20, 0xFD	; 253
    d274:	5a e0       	ldi	r21, 0x0A	; 10
    d276:	66 e1       	ldi	r22, 0x16	; 22
    d278:	70 e0       	ldi	r23, 0x00	; 0
    d27a:	83 e0       	ldi	r24, 0x03	; 3
    d27c:	90 e0       	ldi	r25, 0x00	; 0
    d27e:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(10, 24, (char*) strCancelHandle);
    d282:	46 e1       	ldi	r20, 0x16	; 22
    d284:	5b e0       	ldi	r21, 0x0B	; 11
    d286:	68 e1       	ldi	r22, 0x18	; 24
    d288:	70 e0       	ldi	r23, 0x00	; 0
    d28a:	8a e0       	ldi	r24, 0x0A	; 10
    d28c:	90 e0       	ldi	r25, 0x00	; 0
}
    d28e:	df 91       	pop	r29
    d290:	cf 91       	pop	r28
    d292:	1f 91       	pop	r17
    d294:	0f 91       	pop	r16
    d296:	ff 90       	pop	r15
		if (scores.data[i+4]) PrintChar(29, y, '*');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    d298:	0c 94 69 55 	jmp	0xaad2	; 0xaad2 <Print>

0000d29c <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    d29c:	0e 94 0e 5a 	call	0xb41c	; 0xb41c <save_score>
	fade_through();
    d2a0:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
	SetSpriteVisibility(true);
    d2a4:	81 e0       	ldi	r24, 0x01	; 1
    d2a6:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
	init_game_state();
    d2aa:	0e 94 a8 59 	call	0xb350	; 0xb350 <init_game_state>
	load_tank_rank();
    d2ae:	0c 94 b5 68 	jmp	0xd16a	; 0xd16a <load_tank_rank>

0000d2b2 <update_player>:
{
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

void update_player(JoyPadState* p, Player* player)
{
    d2b2:	bf 92       	push	r11
    d2b4:	cf 92       	push	r12
    d2b6:	df 92       	push	r13
    d2b8:	ef 92       	push	r14
    d2ba:	ff 92       	push	r15
    d2bc:	0f 93       	push	r16
    d2be:	1f 93       	push	r17
    d2c0:	cf 93       	push	r28
    d2c2:	df 93       	push	r29
    d2c4:	8c 01       	movw	r16, r24
    d2c6:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    d2c8:	1a 82       	std	Y+2, r1	; 0x02
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    d2ca:	fc 01       	movw	r30, r24
    d2cc:	80 81       	ld	r24, Z
    d2ce:	83 ff       	sbrs	r24, 3
    d2d0:	13 c0       	rjmp	.+38     	; 0xd2f8 <update_player+0x46>
    d2d2:	80 91 0f 0c 	lds	r24, 0x0C0F
    d2d6:	81 11       	cpse	r24, r1
    d2d8:	0f c0       	rjmp	.+30     	; 0xd2f8 <update_player+0x46>
	{
		SFX_NAVIGATE;
    d2da:	2f ef       	ldi	r18, 0xFF	; 255
    d2dc:	47 e1       	ldi	r20, 0x17	; 23
    d2de:	65 e0       	ldi	r22, 0x05	; 5
    d2e0:	84 e0       	ldi	r24, 0x04	; 4
    d2e2:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		game.paused = game.paused ^ 1;
    d2e6:	90 91 0e 0c 	lds	r25, 0x0C0E
    d2ea:	81 e0       	ldi	r24, 0x01	; 1
    d2ec:	89 27       	eor	r24, r25
    d2ee:	80 93 0e 0c 	sts	0x0C0E, r24
		load_level_tiles(false);
    d2f2:	80 e0       	ldi	r24, 0x00	; 0
    d2f4:	0e 94 61 65 	call	0xcac2	; 0xcac2 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    d2f8:	80 91 0e 0c 	lds	r24, 0x0C0E
    d2fc:	81 11       	cpse	r24, r1
    d2fe:	da c0       	rjmp	.+436    	; 0xd4b4 <update_player+0x202>
    d300:	8c 89       	ldd	r24, Y+20	; 0x14
    d302:	80 fd       	sbrc	r24, 0
    d304:	d7 c0       	rjmp	.+430    	; 0xd4b4 <update_player+0x202>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    d306:	f8 01       	movw	r30, r16
    d308:	80 81       	ld	r24, Z
    d30a:	91 81       	ldd	r25, Z+1	; 0x01
    d30c:	93 ff       	sbrs	r25, 3
    d30e:	19 c0       	rjmp	.+50     	; 0xd342 <update_player+0x90>
    d310:	8d 89       	ldd	r24, Y+21	; 0x15
    d312:	8a 35       	cpi	r24, 0x5A	; 90
    d314:	b1 f4       	brne	.+44     	; 0xd342 <update_player+0x90>
		{
			player->banter_frame = 0;
    d316:	1d 8a       	std	Y+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    d318:	69 e0       	ldi	r22, 0x09	; 9
    d31a:	70 e0       	ldi	r23, 0x00	; 0
    d31c:	80 e0       	ldi	r24, 0x00	; 0
    d31e:	90 e0       	ldi	r25, 0x00	; 0
    d320:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    d324:	8e 8b       	std	Y+22, r24	; 0x16
			SFX_BANTER;
    d326:	80 91 4a 0c 	lds	r24, 0x0C4A
    d32a:	80 fd       	sbrc	r24, 0
    d32c:	0a c0       	rjmp	.+20     	; 0xd342 <update_player+0x90>
    d32e:	80 91 b8 0f 	lds	r24, 0x0FB8
    d332:	80 fd       	sbrc	r24, 0
    d334:	06 c0       	rjmp	.+12     	; 0xd342 <update_player+0x90>
    d336:	2f e5       	ldi	r18, 0x5F	; 95
    d338:	4e e1       	ldi	r20, 0x1E	; 30
    d33a:	60 e0       	ldi	r22, 0x00	; 0
    d33c:	84 e0       	ldi	r24, 0x04	; 4
    d33e:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    d342:	68 8d       	ldd	r22, Y+24	; 0x18
    d344:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    d346:	f8 01       	movw	r30, r16
    d348:	84 81       	ldd	r24, Z+4	; 0x04
    d34a:	84 ff       	sbrs	r24, 4
    d34c:	15 c0       	rjmp	.+42     	; 0xd378 <update_player+0xc6>
		{
			player->shared.direction = D_UP;
    d34e:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    d350:	70 e0       	ldi	r23, 0x00	; 0
    d352:	80 e0       	ldi	r24, 0x00	; 0
    d354:	90 e0       	ldi	r25, 0x00	; 0
    d356:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d35a:	25 e6       	ldi	r18, 0x65	; 101
    d35c:	38 e8       	ldi	r19, 0x88	; 136
    d35e:	48 e8       	ldi	r20, 0x88	; 136
    d360:	5c e3       	ldi	r21, 0x3C	; 60
    d362:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d366:	9b 01       	movw	r18, r22
    d368:	ac 01       	movw	r20, r24
    d36a:	6f 81       	ldd	r22, Y+7	; 0x07
    d36c:	78 85       	ldd	r23, Y+8	; 0x08
    d36e:	89 85       	ldd	r24, Y+9	; 0x09
    d370:	9a 85       	ldd	r25, Y+10	; 0x0a
    d372:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    d376:	2f c0       	rjmp	.+94     	; 0xd3d6 <update_player+0x124>
		}
		else if ((p->held & BTN_RIGHT))
    d378:	87 ff       	sbrs	r24, 7
    d37a:	16 c0       	rjmp	.+44     	; 0xd3a8 <update_player+0xf6>
		{
			player->shared.direction = D_RIGHT;
    d37c:	81 e0       	ldi	r24, 0x01	; 1
    d37e:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    d380:	70 e0       	ldi	r23, 0x00	; 0
    d382:	80 e0       	ldi	r24, 0x00	; 0
    d384:	90 e0       	ldi	r25, 0x00	; 0
    d386:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d38a:	25 e6       	ldi	r18, 0x65	; 101
    d38c:	38 e8       	ldi	r19, 0x88	; 136
    d38e:	48 e8       	ldi	r20, 0x88	; 136
    d390:	5c e3       	ldi	r21, 0x3C	; 60
    d392:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d396:	9b 01       	movw	r18, r22
    d398:	ac 01       	movw	r20, r24
    d39a:	6b 81       	ldd	r22, Y+3	; 0x03
    d39c:	7c 81       	ldd	r23, Y+4	; 0x04
    d39e:	8d 81       	ldd	r24, Y+5	; 0x05
    d3a0:	9e 81       	ldd	r25, Y+6	; 0x06
    d3a2:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d3a6:	33 c0       	rjmp	.+102    	; 0xd40e <update_player+0x15c>
		}
		else if ((p->held & BTN_DOWN))
    d3a8:	85 ff       	sbrs	r24, 5
    d3aa:	1a c0       	rjmp	.+52     	; 0xd3e0 <update_player+0x12e>
		{
			player->shared.direction = D_DOWN;
    d3ac:	82 e0       	ldi	r24, 0x02	; 2
    d3ae:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    d3b0:	70 e0       	ldi	r23, 0x00	; 0
    d3b2:	80 e0       	ldi	r24, 0x00	; 0
    d3b4:	90 e0       	ldi	r25, 0x00	; 0
    d3b6:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d3ba:	25 e6       	ldi	r18, 0x65	; 101
    d3bc:	38 e8       	ldi	r19, 0x88	; 136
    d3be:	48 e8       	ldi	r20, 0x88	; 136
    d3c0:	5c e3       	ldi	r21, 0x3C	; 60
    d3c2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d3c6:	9b 01       	movw	r18, r22
    d3c8:	ac 01       	movw	r20, r24
    d3ca:	6f 81       	ldd	r22, Y+7	; 0x07
    d3cc:	78 85       	ldd	r23, Y+8	; 0x08
    d3ce:	89 85       	ldd	r24, Y+9	; 0x09
    d3d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    d3d2:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d3d6:	6f 83       	std	Y+7, r22	; 0x07
    d3d8:	78 87       	std	Y+8, r23	; 0x08
    d3da:	89 87       	std	Y+9, r24	; 0x09
    d3dc:	9a 87       	std	Y+10, r25	; 0x0a
    d3de:	1d c0       	rjmp	.+58     	; 0xd41a <update_player+0x168>
		}
		else if ((p->held & BTN_LEFT))
    d3e0:	86 ff       	sbrs	r24, 6
    d3e2:	1a c0       	rjmp	.+52     	; 0xd418 <update_player+0x166>
		{
			player->shared.direction = D_LEFT;
    d3e4:	83 e0       	ldi	r24, 0x03	; 3
    d3e6:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    d3e8:	70 e0       	ldi	r23, 0x00	; 0
    d3ea:	80 e0       	ldi	r24, 0x00	; 0
    d3ec:	90 e0       	ldi	r25, 0x00	; 0
    d3ee:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d3f2:	25 e6       	ldi	r18, 0x65	; 101
    d3f4:	38 e8       	ldi	r19, 0x88	; 136
    d3f6:	48 e8       	ldi	r20, 0x88	; 136
    d3f8:	5c e3       	ldi	r21, 0x3C	; 60
    d3fa:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d3fe:	9b 01       	movw	r18, r22
    d400:	ac 01       	movw	r20, r24
    d402:	6b 81       	ldd	r22, Y+3	; 0x03
    d404:	7c 81       	ldd	r23, Y+4	; 0x04
    d406:	8d 81       	ldd	r24, Y+5	; 0x05
    d408:	9e 81       	ldd	r25, Y+6	; 0x06
    d40a:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    d40e:	6b 83       	std	Y+3, r22	; 0x03
    d410:	7c 83       	std	Y+4, r23	; 0x04
    d412:	8d 83       	std	Y+5, r24	; 0x05
    d414:	9e 83       	std	Y+6, r25	; 0x06
    d416:	01 c0       	rjmp	.+2      	; 0xd41a <update_player+0x168>
		}
		else
		{
			player->shared.speed = 0;
    d418:	19 82       	std	Y+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d41a:	c8 01       	movw	r24, r16
    d41c:	0e 94 87 5b 	call	0xb70e	; 0xb70e <shoot_pressed>
    d420:	88 23       	and	r24, r24
    d422:	09 f4       	brne	.+2      	; 0xd426 <update_player+0x174>
    d424:	47 c0       	rjmp	.+142    	; 0xd4b4 <update_player+0x202>
    d426:	89 89       	ldd	r24, Y+17	; 0x11
    d428:	81 11       	cpse	r24, r1
    d42a:	44 c0       	rjmp	.+136    	; 0xd4b4 <update_player+0x202>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d42c:	8a ad       	ldd	r24, Y+58	; 0x3a
    d42e:	81 11       	cpse	r24, r1
    d430:	41 c0       	rjmp	.+130    	; 0xd4b4 <update_player+0x202>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d432:	7e 01       	movw	r14, r28
    d434:	fc e2       	ldi	r31, 0x2C	; 44
    d436:	ef 0e       	add	r14, r31
    d438:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    d43a:	89 8d       	ldd	r24, Y+25	; 0x19
    d43c:	88 23       	and	r24, r24
    d43e:	a1 f0       	breq	.+40     	; 0xd468 <update_player+0x1b6>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d440:	61 e0       	ldi	r22, 0x01	; 1
    d442:	c7 01       	movw	r24, r14
    d444:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d448:	61 e0       	ldi	r22, 0x01	; 1
    d44a:	c7 01       	movw	r24, r14
    d44c:	0e 94 c9 58 	call	0xb192	; 0xb192 <set_shot_animations>
						SFX_ROCKET;
    d450:	80 91 4a 0c 	lds	r24, 0x0C4A
    d454:	80 fd       	sbrc	r24, 0
    d456:	1e c0       	rjmp	.+60     	; 0xd494 <update_player+0x1e2>
    d458:	80 91 b8 0f 	lds	r24, 0x0FB8
    d45c:	80 fd       	sbrc	r24, 0
    d45e:	1a c0       	rjmp	.+52     	; 0xd494 <update_player+0x1e2>
    d460:	2f ef       	ldi	r18, 0xFF	; 255
    d462:	47 e1       	ldi	r20, 0x17	; 23
    d464:	66 e0       	ldi	r22, 0x06	; 6
    d466:	13 c0       	rjmp	.+38     	; 0xd48e <update_player+0x1dc>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d468:	60 e0       	ldi	r22, 0x00	; 0
    d46a:	c7 01       	movw	r24, r14
    d46c:	0e 94 ac 58 	call	0xb158	; 0xb158 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d470:	60 e0       	ldi	r22, 0x00	; 0
    d472:	c7 01       	movw	r24, r14
    d474:	0e 94 c9 58 	call	0xb192	; 0xb192 <set_shot_animations>
						SFX_CANNONBALL;
    d478:	80 91 4a 0c 	lds	r24, 0x0C4A
    d47c:	80 fd       	sbrc	r24, 0
    d47e:	0a c0       	rjmp	.+20     	; 0xd494 <update_player+0x1e2>
    d480:	80 91 b8 0f 	lds	r24, 0x0FB8
    d484:	80 fd       	sbrc	r24, 0
    d486:	06 c0       	rjmp	.+12     	; 0xd494 <update_player+0x1e2>
    d488:	2f ef       	ldi	r18, 0xFF	; 255
    d48a:	47 e1       	ldi	r20, 0x17	; 23
    d48c:	62 e0       	ldi	r22, 0x02	; 2
    d48e:	84 e0       	ldi	r24, 0x04	; 4
    d490:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
					}
					player->active_shots++;
    d494:	89 89       	ldd	r24, Y+17	; 0x11
    d496:	8f 5f       	subi	r24, 0xFF	; 255
    d498:	89 8b       	std	Y+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    d49a:	88 81       	ld	r24, Y
    d49c:	8c a7       	std	Y+44, r24	; 0x2c
					position_shot(player, shot);
    d49e:	b7 01       	movw	r22, r14
    d4a0:	ce 01       	movw	r24, r28
    d4a2:	0e 94 7e 5a 	call	0xb4fc	; 0xb4fc <position_shot>
					shot->active = 1;
    d4a6:	81 e0       	ldi	r24, 0x01	; 1
    d4a8:	8a af       	std	Y+58, r24	; 0x3a
					if (player->has_over_speed)
    d4aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d4ac:	88 23       	and	r24, r24
    d4ae:	11 f0       	breq	.+4      	; 0xd4b4 <update_player+0x202>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d4b0:	8a ea       	ldi	r24, 0xAA	; 170
    d4b2:	8d a7       	std	Y+45, r24	; 0x2d
				}
			}
		}
	}
	
	if (!game.paused)
    d4b4:	80 91 0e 0c 	lds	r24, 0x0C0E
    d4b8:	81 11       	cpse	r24, r1
    d4ba:	a0 c0       	rjmp	.+320    	; 0xd5fc <update_player+0x34a>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d4bc:	8e 01       	movw	r16, r28
    d4be:	04 5d       	subi	r16, 0xD4	; 212
    d4c0:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d4c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    d4c4:	88 23       	and	r24, r24
    d4c6:	09 f4       	brne	.+2      	; 0xd4ca <update_player+0x218>
    d4c8:	af c0       	rjmp	.+350    	; 0xd628 <update_player+0x376>
			{
				switch (shot->shared.direction)
    d4ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    d4cc:	81 30       	cpi	r24, 0x01	; 1
    d4ce:	89 f1       	breq	.+98     	; 0xd532 <update_player+0x280>
    d4d0:	d8 f0       	brcs	.+54     	; 0xd508 <update_player+0x256>
    d4d2:	82 30       	cpi	r24, 0x02	; 2
    d4d4:	09 f4       	brne	.+2      	; 0xd4d8 <update_player+0x226>
    d4d6:	42 c0       	rjmp	.+132    	; 0xd55c <update_player+0x2aa>
    d4d8:	83 30       	cpi	r24, 0x03	; 3
    d4da:	09 f0       	breq	.+2      	; 0xd4de <update_player+0x22c>
    d4dc:	5c c0       	rjmp	.+184    	; 0xd596 <update_player+0x2e4>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    d4de:	6d a5       	ldd	r22, Y+45	; 0x2d
    d4e0:	70 e0       	ldi	r23, 0x00	; 0
    d4e2:	80 e0       	ldi	r24, 0x00	; 0
    d4e4:	90 e0       	ldi	r25, 0x00	; 0
    d4e6:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d4ea:	25 e6       	ldi	r18, 0x65	; 101
    d4ec:	38 e8       	ldi	r19, 0x88	; 136
    d4ee:	48 e8       	ldi	r20, 0x88	; 136
    d4f0:	5c e3       	ldi	r21, 0x3C	; 60
    d4f2:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d4f6:	9b 01       	movw	r18, r22
    d4f8:	ac 01       	movw	r20, r24
    d4fa:	6f a5       	ldd	r22, Y+47	; 0x2f
    d4fc:	78 a9       	ldd	r23, Y+48	; 0x30
    d4fe:	89 a9       	ldd	r24, Y+49	; 0x31
    d500:	9a a9       	ldd	r25, Y+50	; 0x32
    d502:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    d506:	43 c0       	rjmp	.+134    	; 0xd58e <update_player+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    d508:	6d a5       	ldd	r22, Y+45	; 0x2d
    d50a:	70 e0       	ldi	r23, 0x00	; 0
    d50c:	80 e0       	ldi	r24, 0x00	; 0
    d50e:	90 e0       	ldi	r25, 0x00	; 0
    d510:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d514:	25 e6       	ldi	r18, 0x65	; 101
    d516:	38 e8       	ldi	r19, 0x88	; 136
    d518:	48 e8       	ldi	r20, 0x88	; 136
    d51a:	5c e3       	ldi	r21, 0x3C	; 60
    d51c:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d520:	9b 01       	movw	r18, r22
    d522:	ac 01       	movw	r20, r24
    d524:	6b a9       	ldd	r22, Y+51	; 0x33
    d526:	7c a9       	ldd	r23, Y+52	; 0x34
    d528:	8d a9       	ldd	r24, Y+53	; 0x35
    d52a:	9e a9       	ldd	r25, Y+54	; 0x36
    d52c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    d530:	29 c0       	rjmp	.+82     	; 0xd584 <update_player+0x2d2>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    d532:	6d a5       	ldd	r22, Y+45	; 0x2d
    d534:	70 e0       	ldi	r23, 0x00	; 0
    d536:	80 e0       	ldi	r24, 0x00	; 0
    d538:	90 e0       	ldi	r25, 0x00	; 0
    d53a:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d53e:	25 e6       	ldi	r18, 0x65	; 101
    d540:	38 e8       	ldi	r19, 0x88	; 136
    d542:	48 e8       	ldi	r20, 0x88	; 136
    d544:	5c e3       	ldi	r21, 0x3C	; 60
    d546:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d54a:	9b 01       	movw	r18, r22
    d54c:	ac 01       	movw	r20, r24
    d54e:	6f a5       	ldd	r22, Y+47	; 0x2f
    d550:	78 a9       	ldd	r23, Y+48	; 0x30
    d552:	89 a9       	ldd	r24, Y+49	; 0x31
    d554:	9a a9       	ldd	r25, Y+50	; 0x32
    d556:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d55a:	19 c0       	rjmp	.+50     	; 0xd58e <update_player+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    d55c:	6d a5       	ldd	r22, Y+45	; 0x2d
    d55e:	70 e0       	ldi	r23, 0x00	; 0
    d560:	80 e0       	ldi	r24, 0x00	; 0
    d562:	90 e0       	ldi	r25, 0x00	; 0
    d564:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d568:	25 e6       	ldi	r18, 0x65	; 101
    d56a:	38 e8       	ldi	r19, 0x88	; 136
    d56c:	48 e8       	ldi	r20, 0x88	; 136
    d56e:	5c e3       	ldi	r21, 0x3C	; 60
    d570:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d574:	9b 01       	movw	r18, r22
    d576:	ac 01       	movw	r20, r24
    d578:	6b a9       	ldd	r22, Y+51	; 0x33
    d57a:	7c a9       	ldd	r23, Y+52	; 0x34
    d57c:	8d a9       	ldd	r24, Y+53	; 0x35
    d57e:	9e a9       	ldd	r25, Y+54	; 0x36
    d580:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d584:	6b ab       	std	Y+51, r22	; 0x33
    d586:	7c ab       	std	Y+52, r23	; 0x34
    d588:	8d ab       	std	Y+53, r24	; 0x35
    d58a:	9e ab       	std	Y+54, r25	; 0x36
    d58c:	04 c0       	rjmp	.+8      	; 0xd596 <update_player+0x2e4>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    d58e:	6f a7       	std	Y+47, r22	; 0x2f
    d590:	78 ab       	std	Y+48, r23	; 0x30
    d592:	89 ab       	std	Y+49, r24	; 0x31
    d594:	9a ab       	std	Y+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    d596:	bb ac       	ldd	r11, Y+59	; 0x3b
    d598:	6b 2d       	mov	r22, r11
    d59a:	70 e0       	ldi	r23, 0x00	; 0
    d59c:	80 e0       	ldi	r24, 0x00	; 0
    d59e:	90 e0       	ldi	r25, 0x00	; 0
    d5a0:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d5a4:	6b 01       	movw	r12, r22
    d5a6:	7c 01       	movw	r14, r24
    d5a8:	88 e0       	ldi	r24, 0x08	; 8
    d5aa:	8b 15       	cp	r24, r11
    d5ac:	80 f0       	brcs	.+32     	; 0xd5ce <update_player+0x31c>
    d5ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    d5b0:	68 2f       	mov	r22, r24
    d5b2:	70 e0       	ldi	r23, 0x00	; 0
    d5b4:	80 e0       	ldi	r24, 0x00	; 0
    d5b6:	90 e0       	ldi	r25, 0x00	; 0
    d5b8:	0e 94 cc 76 	call	0xed98	; 0xed98 <__floatsisf>
    d5bc:	25 e6       	ldi	r18, 0x65	; 101
    d5be:	38 e8       	ldi	r19, 0x88	; 136
    d5c0:	48 e8       	ldi	r20, 0x88	; 136
    d5c2:	5c e3       	ldi	r21, 0x3C	; 60
    d5c4:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    d5c8:	9b 01       	movw	r18, r22
    d5ca:	ac 01       	movw	r20, r24
    d5cc:	03 c0       	rjmp	.+6      	; 0xd5d4 <update_player+0x322>
    d5ce:	20 e0       	ldi	r18, 0x00	; 0
    d5d0:	30 e0       	ldi	r19, 0x00	; 0
    d5d2:	a9 01       	movw	r20, r18
    d5d4:	c7 01       	movw	r24, r14
    d5d6:	b6 01       	movw	r22, r12
    d5d8:	0e 94 c9 75 	call	0xeb92	; 0xeb92 <__addsf3>
    d5dc:	0e 94 9e 76 	call	0xed3c	; 0xed3c <__fixunssfsi>
    d5e0:	6b af       	std	Y+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    d5e2:	b8 01       	movw	r22, r16
    d5e4:	ce 01       	movw	r24, r28
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d5e6:	df 91       	pop	r29
    d5e8:	cf 91       	pop	r28
    d5ea:	1f 91       	pop	r17
    d5ec:	0f 91       	pop	r16
    d5ee:	ff 90       	pop	r15
    d5f0:	ef 90       	pop	r14
    d5f2:	df 90       	pop	r13
    d5f4:	cf 90       	pop	r12
    d5f6:	bf 90       	pop	r11
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
				collision_detect_shot(player, shot);
    d5f8:	0c 94 9d 60 	jmp	0xc13a	; 0xc13a <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d5fc:	f8 01       	movw	r30, r16
    d5fe:	80 81       	ld	r24, Z
    d600:	91 81       	ldd	r25, Z+1	; 0x01
    d602:	91 ff       	sbrs	r25, 1
    d604:	11 c0       	rjmp	.+34     	; 0xd628 <update_player+0x376>
		{
			SFX_NAVIGATE;
    d606:	2f ef       	ldi	r18, 0xFF	; 255
    d608:	47 e1       	ldi	r20, 0x17	; 23
    d60a:	65 e0       	ldi	r22, 0x05	; 5
    d60c:	84 e0       	ldi	r24, 0x04	; 4
    d60e:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
			exit_game();
		}
	}
}
    d612:	df 91       	pop	r29
    d614:	cf 91       	pop	r28
    d616:	1f 91       	pop	r17
    d618:	0f 91       	pop	r16
    d61a:	ff 90       	pop	r15
    d61c:	ef 90       	pop	r14
    d61e:	df 90       	pop	r13
    d620:	cf 90       	pop	r12
    d622:	bf 90       	pop	r11
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d624:	0c 94 4e 69 	jmp	0xd29c	; 0xd29c <exit_game>
		}
	}
}
    d628:	df 91       	pop	r29
    d62a:	cf 91       	pop	r28
    d62c:	1f 91       	pop	r17
    d62e:	0f 91       	pop	r16
    d630:	ff 90       	pop	r15
    d632:	ef 90       	pop	r14
    d634:	df 90       	pop	r13
    d636:	cf 90       	pop	r12
    d638:	bf 90       	pop	r11
    d63a:	08 95       	ret

0000d63c <resolve_scoring>:

void resolve_scoring()
{
    d63c:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    d63e:	c0 91 0d 0c 	lds	r28, 0x0C0D
    d642:	80 91 46 0c 	lds	r24, 0x0C46
    d646:	ca 30       	cpi	r28, 0x0A	; 10
    d648:	90 f5       	brcc	.+100    	; 0xd6ae <resolve_scoring+0x72>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    d64a:	8a 30       	cpi	r24, 0x0A	; 10
    d64c:	78 f0       	brcs	.+30     	; 0xd66c <resolve_scoring+0x30>
    d64e:	80 91 b8 0f 	lds	r24, 0x0FB8
    d652:	80 fd       	sbrc	r24, 0
    d654:	0b c0       	rjmp	.+22     	; 0xd66c <resolve_scoring+0x30>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d656:	81 e0       	ldi	r24, 0x01	; 1
    d658:	0e 94 61 65 	call	0xcac2	; 0xcac2 <load_level_tiles>
			SetSpriteVisibility(false);
    d65c:	80 e0       	ldi	r24, 0x00	; 0
    d65e:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
			print_level_score(&player1, &player2);
    d662:	64 ea       	ldi	r22, 0xA4	; 164
    d664:	7f e0       	ldi	r23, 0x0F	; 15
    d666:	86 e3       	ldi	r24, 0x36	; 54
    d668:	9c e0       	ldi	r25, 0x0C	; 12
    d66a:	13 c0       	rjmp	.+38     	; 0xd692 <resolve_scoring+0x56>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    d66c:	80 91 b4 0f 	lds	r24, 0x0FB4
    d670:	8a 30       	cpi	r24, 0x0A	; 10
    d672:	08 f4       	brcc	.+2      	; 0xd676 <resolve_scoring+0x3a>
    d674:	a9 c0       	rjmp	.+338    	; 0xd7c8 <resolve_scoring+0x18c>
    d676:	80 91 4a 0c 	lds	r24, 0x0C4A
    d67a:	80 fd       	sbrc	r24, 0
    d67c:	a5 c0       	rjmp	.+330    	; 0xd7c8 <resolve_scoring+0x18c>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d67e:	81 e0       	ldi	r24, 0x01	; 1
    d680:	0e 94 61 65 	call	0xcac2	; 0xcac2 <load_level_tiles>
			SetSpriteVisibility(false);
    d684:	80 e0       	ldi	r24, 0x00	; 0
    d686:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
			print_level_score(&player2, &player1);
    d68a:	66 e3       	ldi	r22, 0x36	; 54
    d68c:	7c e0       	ldi	r23, 0x0C	; 12
    d68e:	84 ea       	ldi	r24, 0xA4	; 164
    d690:	9f e0       	ldi	r25, 0x0F	; 15
    d692:	0e 94 eb 5a 	call	0xb5d6	; 0xb5d6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d696:	84 e0       	ldi	r24, 0x04	; 4
    d698:	0e 94 32 58 	call	0xb064	; 0xb064 <LBWaitSeconds>
			player1.level_score = 0;
    d69c:	10 92 46 0c 	sts	0x0C46, r1
			player2.level_score = 0;
    d6a0:	10 92 b4 0f 	sts	0x0FB4, r1
			level_transition(next_level);
    d6a4:	81 e0       	ldi	r24, 0x01	; 1
    d6a6:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    d6a8:	cf 91       	pop	r28
			SetSpriteVisibility(false);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    d6aa:	0c 94 8a 66 	jmp	0xcd14	; 0xcd14 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    d6ae:	8a 30       	cpi	r24, 0x0A	; 10
    d6b0:	28 f4       	brcc	.+10     	; 0xd6bc <resolve_scoring+0x80>
    d6b2:	80 91 b4 0f 	lds	r24, 0x0FB4
    d6b6:	8a 30       	cpi	r24, 0x0A	; 10
    d6b8:	08 f4       	brcc	.+2      	; 0xd6bc <resolve_scoring+0x80>
    d6ba:	86 c0       	rjmp	.+268    	; 0xd7c8 <resolve_scoring+0x18c>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    d6bc:	90 91 45 0c 	lds	r25, 0x0C45
    d6c0:	80 91 b3 0f 	lds	r24, 0x0FB3
    d6c4:	98 17       	cp	r25, r24
    d6c6:	09 f4       	brne	.+2      	; 0xd6ca <resolve_scoring+0x8e>
    d6c8:	7f c0       	rjmp	.+254    	; 0xd7c8 <resolve_scoring+0x18c>
			
			if (game.boss_fight_status == 0)
    d6ca:	20 91 0f 0c 	lds	r18, 0x0C0F
    d6ce:	21 11       	cpse	r18, r1
    d6d0:	46 c0       	rjmp	.+140    	; 0xd75e <resolve_scoring+0x122>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    d6d2:	c1 e0       	ldi	r28, 0x01	; 1
    d6d4:	c0 93 0f 0c 	sts	0x0C0F, r28
				if (player1.score > player2.score)
    d6d8:	89 17       	cp	r24, r25
    d6da:	e8 f4       	brcc	.+58     	; 0xd716 <resolve_scoring+0xda>
				{
					game.boss_fight_player = &player1;
    d6dc:	86 e3       	ldi	r24, 0x36	; 54
    d6de:	9c e0       	ldi	r25, 0x0C	; 12
    d6e0:	90 93 13 0c 	sts	0x0C13, r25
    d6e4:	80 93 12 0c 	sts	0x0C12, r24
					game.boss_fight_joypad = &p1;
    d6e8:	8e ea       	ldi	r24, 0xAE	; 174
    d6ea:	9c e0       	ldi	r25, 0x0C	; 12
    d6ec:	90 93 15 0c 	sts	0x0C15, r25
    d6f0:	80 93 14 0c 	sts	0x0C14, r24
					game.boss_fight_player_hud = 0;
    d6f4:	10 92 10 0c 	sts	0x0C10, r1
					kill_player(&player2, 15);
    d6f8:	6f e0       	ldi	r22, 0x0F	; 15
    d6fa:	84 ea       	ldi	r24, 0xA4	; 164
    d6fc:	9f e0       	ldi	r25, 0x0F	; 15
    d6fe:	0e 94 d4 5f 	call	0xbfa8	; 0xbfa8 <kill_player>
					player_spawn(&player2);
    d702:	84 ea       	ldi	r24, 0xA4	; 164
    d704:	9f e0       	ldi	r25, 0x0F	; 15
    d706:	0e 94 c7 59 	call	0xb38e	; 0xb38e <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    d70a:	80 91 b8 0f 	lds	r24, 0x0FB8
    d70e:	c8 27       	eor	r28, r24
    d710:	c0 93 b8 0f 	sts	0x0FB8, r28
    d714:	1d c0       	rjmp	.+58     	; 0xd750 <resolve_scoring+0x114>
				}
				else
				{
					game.boss_fight_player = &player2;
    d716:	84 ea       	ldi	r24, 0xA4	; 164
    d718:	9f e0       	ldi	r25, 0x0F	; 15
    d71a:	90 93 13 0c 	sts	0x0C13, r25
    d71e:	80 93 12 0c 	sts	0x0C12, r24
					game.boss_fight_joypad = &p2;
    d722:	85 ee       	ldi	r24, 0xE5	; 229
    d724:	9b e0       	ldi	r25, 0x0B	; 11
    d726:	90 93 15 0c 	sts	0x0C15, r25
    d72a:	80 93 14 0c 	sts	0x0C14, r24
					game.boss_fight_player_hud = 15;
    d72e:	8f e0       	ldi	r24, 0x0F	; 15
    d730:	80 93 10 0c 	sts	0x0C10, r24
					kill_player(&player1, 0);
    d734:	60 e0       	ldi	r22, 0x00	; 0
    d736:	86 e3       	ldi	r24, 0x36	; 54
    d738:	9c e0       	ldi	r25, 0x0C	; 12
    d73a:	0e 94 d4 5f 	call	0xbfa8	; 0xbfa8 <kill_player>
					player_spawn(&player1);
    d73e:	86 e3       	ldi	r24, 0x36	; 54
    d740:	9c e0       	ldi	r25, 0x0C	; 12
    d742:	0e 94 c7 59 	call	0xb38e	; 0xb38e <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    d746:	80 91 4a 0c 	lds	r24, 0x0C4A
    d74a:	c8 27       	eor	r28, r24
    d74c:	c0 93 4a 0c 	sts	0x0C4A, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    d750:	85 ea       	ldi	r24, 0xA5	; 165
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	90 93 37 10 	sts	0x1037, r25
    d758:	80 93 36 10 	sts	0x1036, r24
				return;
    d75c:	35 c0       	rjmp	.+106    	; 0xd7c8 <resolve_scoring+0x18c>
			}
			
			// Print level score
			load_level_tiles(true);
    d75e:	81 e0       	ldi	r24, 0x01	; 1
    d760:	0e 94 61 65 	call	0xcac2	; 0xcac2 <load_level_tiles>
			SetSpriteVisibility(false);
    d764:	80 e0       	ldi	r24, 0x00	; 0
    d766:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
			if (player1.level_score > player2.level_score)
    d76a:	90 91 46 0c 	lds	r25, 0x0C46
    d76e:	80 91 b4 0f 	lds	r24, 0x0FB4
    d772:	89 17       	cp	r24, r25
    d774:	28 f4       	brcc	.+10     	; 0xd780 <resolve_scoring+0x144>
				print_level_score(&player1, &player2);
    d776:	64 ea       	ldi	r22, 0xA4	; 164
    d778:	7f e0       	ldi	r23, 0x0F	; 15
    d77a:	86 e3       	ldi	r24, 0x36	; 54
    d77c:	9c e0       	ldi	r25, 0x0C	; 12
    d77e:	04 c0       	rjmp	.+8      	; 0xd788 <resolve_scoring+0x14c>
			else
				print_level_score(&player2, &player1);
    d780:	66 e3       	ldi	r22, 0x36	; 54
    d782:	7c e0       	ldi	r23, 0x0C	; 12
    d784:	84 ea       	ldi	r24, 0xA4	; 164
    d786:	9f e0       	ldi	r25, 0x0F	; 15
    d788:	0e 94 eb 5a 	call	0xb5d6	; 0xb5d6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d78c:	84 e0       	ldi	r24, 0x04	; 4
    d78e:	0e 94 32 58 	call	0xb064	; 0xb064 <LBWaitSeconds>
			player1.level_score = 0;
    d792:	10 92 46 0c 	sts	0x0C46, r1
			player2.level_score = 0;
    d796:	10 92 b4 0f 	sts	0x0FB4, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    d79a:	90 91 45 0c 	lds	r25, 0x0C45
    d79e:	80 91 b3 0f 	lds	r24, 0x0FB3
    d7a2:	89 17       	cp	r24, r25
    d7a4:	28 f4       	brcc	.+10     	; 0xd7b0 <resolve_scoring+0x174>
				print_final_score(&player1, &player2);
    d7a6:	64 ea       	ldi	r22, 0xA4	; 164
    d7a8:	7f e0       	ldi	r23, 0x0F	; 15
    d7aa:	86 e3       	ldi	r24, 0x36	; 54
    d7ac:	9c e0       	ldi	r25, 0x0C	; 12
    d7ae:	04 c0       	rjmp	.+8      	; 0xd7b8 <resolve_scoring+0x17c>
			else
				print_final_score(&player2, &player1);
    d7b0:	66 e3       	ldi	r22, 0x36	; 54
    d7b2:	7c e0       	ldi	r23, 0x0C	; 12
    d7b4:	84 ea       	ldi	r24, 0xA4	; 164
    d7b6:	9f e0       	ldi	r25, 0x0F	; 15
    d7b8:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    d7bc:	84 e0       	ldi	r24, 0x04	; 4
    d7be:	0e 94 32 58 	call	0xb064	; 0xb064 <LBWaitSeconds>
			exit_game();
		}
	}
}
    d7c2:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    d7c4:	0c 94 4e 69 	jmp	0xd29c	; 0xd29c <exit_game>
		}
	}
}
    d7c8:	cf 91       	pop	r28
    d7ca:	08 95       	ret

0000d7cc <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d7cc:	df 92       	push	r13
    d7ce:	ef 92       	push	r14
    d7d0:	ff 92       	push	r15
    d7d2:	0f 93       	push	r16
    d7d4:	1f 93       	push	r17
    d7d6:	cf 93       	push	r28
    d7d8:	df 93       	push	r29
    d7da:	8c 01       	movw	r16, r24
    d7dc:	eb 01       	movw	r28, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    d7de:	80 91 0e 0c 	lds	r24, 0x0C0E
    d7e2:	88 23       	and	r24, r24
    d7e4:	21 f1       	breq	.+72     	; 0xd82e <update_level+0x62>
	{
		// Render
		SetSpriteVisibility(false);
    d7e6:	80 e0       	ldi	r24, 0x00	; 0
    d7e8:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    d7ec:	44 e6       	ldi	r20, 0x64	; 100
    d7ee:	56 e8       	ldi	r21, 0x86	; 134
    d7f0:	6c e0       	ldi	r22, 0x0C	; 12
    d7f2:	88 e0       	ldi	r24, 0x08	; 8
    d7f4:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    d7f8:	47 e1       	ldi	r20, 0x17	; 23
    d7fa:	5a e0       	ldi	r21, 0x0A	; 10
    d7fc:	6d e0       	ldi	r22, 0x0D	; 13
    d7fe:	70 e0       	ldi	r23, 0x00	; 0
    d800:	8c e0       	ldi	r24, 0x0C	; 12
    d802:	90 e0       	ldi	r25, 0x00	; 0
    d804:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
		Print(11, 14, (char*) strExit);
    d808:	4e e1       	ldi	r20, 0x1E	; 30
    d80a:	5a e0       	ldi	r21, 0x0A	; 10
    d80c:	6e e0       	ldi	r22, 0x0E	; 14
    d80e:	70 e0       	ldi	r23, 0x00	; 0
    d810:	8b e0       	ldi	r24, 0x0B	; 11
    d812:	90 e0       	ldi	r25, 0x00	; 0
    d814:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
		
		// Update
		update_player(p1, &player1);
    d818:	66 e3       	ldi	r22, 0x36	; 54
    d81a:	7c e0       	ldi	r23, 0x0C	; 12
    d81c:	c8 01       	movw	r24, r16
    d81e:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
		update_player(p2, &player2);
    d822:	64 ea       	ldi	r22, 0xA4	; 164
    d824:	7f e0       	ldi	r23, 0x0F	; 15
    d826:	ce 01       	movw	r24, r28
    d828:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
    d82c:	e7 c1       	rjmp	.+974    	; 0xdbfc <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d82e:	90 91 0f 0c 	lds	r25, 0x0C0F
    d832:	91 30       	cpi	r25, 0x01	; 1
    d834:	31 f4       	brne	.+12     	; 0xd842 <update_level+0x76>
	{
		// Render
		SetSpriteVisibility(true);
    d836:	81 e0       	ldi	r24, 0x01	; 1
    d838:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		render_boss_fight_scope_load();
    d83c:	0e 94 ba 66 	call	0xcd74	; 0xcd74 <render_boss_fight_scope_load>
    d840:	08 c0       	rjmp	.+16     	; 0xd852 <update_level+0x86>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d842:	92 30       	cpi	r25, 0x02	; 2
    d844:	09 f0       	breq	.+2      	; 0xd848 <update_level+0x7c>
    d846:	51 c0       	rjmp	.+162    	; 0xd8ea <update_level+0x11e>
	{
		// Render
		SetSpriteVisibility(true);
    d848:	81 e0       	ldi	r24, 0x01	; 1
    d84a:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		render_boss_fight_sub_load();
    d84e:	0e 94 c9 66 	call	0xcd92	; 0xcd92 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d852:	60 e0       	ldi	r22, 0x00	; 0
    d854:	80 91 12 0c 	lds	r24, 0x0C12
    d858:	90 91 13 0c 	lds	r25, 0x0C13
    d85c:	0e 94 96 5c 	call	0xb92c	; 0xb92c <tank_map>
    d860:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d862:	40 e0       	ldi	r20, 0x00	; 0
    d864:	67 e9       	ldi	r22, 0x97	; 151
    d866:	7c e4       	ldi	r23, 0x4C	; 76
    d868:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d86c:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d86e:	6c 2f       	mov	r22, r28
    d870:	80 91 12 0c 	lds	r24, 0x0C12
    d874:	90 91 13 0c 	lds	r25, 0x0C13
    d878:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
    d87c:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d87e:	40 e0       	ldi	r20, 0x00	; 0
    d880:	6d e9       	ldi	r22, 0x9D	; 157
    d882:	7c e4       	ldi	r23, 0x4C	; 76
    d884:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d888:	6c 2f       	mov	r22, r28
    d88a:	80 91 12 0c 	lds	r24, 0x0C12
    d88e:	90 91 13 0c 	lds	r25, 0x0C13
    d892:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d896:	60 e0       	ldi	r22, 0x00	; 0
    d898:	80 91 12 0c 	lds	r24, 0x0C12
    d89c:	90 91 13 0c 	lds	r25, 0x0C13
    d8a0:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d8a4:	6c 2f       	mov	r22, r28
    d8a6:	80 91 12 0c 	lds	r24, 0x0C12
    d8aa:	90 91 13 0c 	lds	r25, 0x0C13
    d8ae:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_shot(&player2, p2_shot_index);
    d8b2:	6d 2f       	mov	r22, r29
    d8b4:	84 ea       	ldi	r24, 0xA4	; 164
    d8b6:	9f e0       	ldi	r25, 0x0F	; 15
    d8b8:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_tile_explosions(&tile_animations);
    d8bc:	89 e1       	ldi	r24, 0x19	; 25
    d8be:	9c e0       	ldi	r25, 0x0C	; 12
    d8c0:	0e 94 47 5c 	call	0xb88e	; 0xb88e <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d8c4:	60 91 12 0c 	lds	r22, 0x0C12
    d8c8:	70 91 13 0c 	lds	r23, 0x0C13
    d8cc:	80 91 14 0c 	lds	r24, 0x0C14
    d8d0:	90 91 15 0c 	lds	r25, 0x0C15
    d8d4:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d8d8:	60 91 10 0c 	lds	r22, 0x0C10
    d8dc:	80 91 12 0c 	lds	r24, 0x0C12
    d8e0:	90 91 13 0c 	lds	r25, 0x0C13
    d8e4:	0e 94 c4 63 	call	0xc788	; 0xc788 <collision_detect_player>
    d8e8:	89 c1       	rjmp	.+786    	; 0xdbfc <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d8ea:	94 30       	cpi	r25, 0x04	; 4
    d8ec:	09 f0       	breq	.+2      	; 0xd8f0 <update_level+0x124>
    d8ee:	97 c0       	rjmp	.+302    	; 0xda1e <update_level+0x252>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d8f0:	80 91 78 10 	lds	r24, 0x1078
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	07 c0       	rjmp	.+14     	; 0xd906 <update_level+0x13a>
    d8f8:	80 91 43 10 	lds	r24, 0x1043
    d8fc:	81 11       	cpse	r24, r1
    d8fe:	03 c0       	rjmp	.+6      	; 0xd906 <update_level+0x13a>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d900:	80 e2       	ldi	r24, 0x20	; 32
    d902:	80 93 0f 0c 	sts	0x0C0F, r24
		}
		
		// Render
		SetSpriteVisibility(true);
    d906:	81 e0       	ldi	r24, 0x01	; 1
    d908:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d90c:	60 e0       	ldi	r22, 0x00	; 0
    d90e:	80 91 12 0c 	lds	r24, 0x0C12
    d912:	90 91 13 0c 	lds	r25, 0x0C13
    d916:	0e 94 96 5c 	call	0xb92c	; 0xb92c <tank_map>
    d91a:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d91c:	68 2f       	mov	r22, r24
    d91e:	80 91 12 0c 	lds	r24, 0x0C12
    d922:	90 91 13 0c 	lds	r25, 0x0C13
    d926:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
    d92a:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d92c:	01 e0       	ldi	r16, 0x01	; 1
    d92e:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d930:	12 e0       	ldi	r17, 0x02	; 2
    d932:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d934:	d3 e0       	ldi	r29, 0x03	; 3
    d936:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d938:	80 91 78 10 	lds	r24, 0x1078
    d93c:	88 23       	and	r24, r24
    d93e:	19 f0       	breq	.+6      	; 0xd946 <update_level+0x17a>
	return (char*) map_sub_turret;
    d940:	6f e4       	ldi	r22, 0x4F	; 79
    d942:	7c e4       	ldi	r23, 0x4C	; 76
    d944:	02 c0       	rjmp	.+4      	; 0xd94a <update_level+0x17e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d946:	6d e9       	ldi	r22, 0x9D	; 157
    d948:	7c e4       	ldi	r23, 0x4C	; 76
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d94a:	40 e0       	ldi	r20, 0x00	; 0
    d94c:	8c 2f       	mov	r24, r28
    d94e:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d952:	80 91 78 10 	lds	r24, 0x1078
    d956:	88 23       	and	r24, r24
    d958:	19 f0       	breq	.+6      	; 0xd960 <update_level+0x194>
	return (char*) map_sub_shot;
    d95a:	62 e5       	ldi	r22, 0x52	; 82
    d95c:	7c e4       	ldi	r23, 0x4C	; 76
    d95e:	02 c0       	rjmp	.+4      	; 0xd964 <update_level+0x198>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d960:	6d e9       	ldi	r22, 0x9D	; 157
    d962:	7c e4       	ldi	r23, 0x4C	; 76
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d964:	40 e0       	ldi	r20, 0x00	; 0
    d966:	80 2f       	mov	r24, r16
    d968:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d96c:	80 91 43 10 	lds	r24, 0x1043
    d970:	88 23       	and	r24, r24
    d972:	19 f0       	breq	.+6      	; 0xd97a <update_level+0x1ae>
	return (char*) map_sub_turret;
    d974:	6f e4       	ldi	r22, 0x4F	; 79
    d976:	7c e4       	ldi	r23, 0x4C	; 76
    d978:	02 c0       	rjmp	.+4      	; 0xd97e <update_level+0x1b2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d97a:	6d e9       	ldi	r22, 0x9D	; 157
    d97c:	7c e4       	ldi	r23, 0x4C	; 76
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d97e:	40 e0       	ldi	r20, 0x00	; 0
    d980:	81 2f       	mov	r24, r17
    d982:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d986:	80 91 43 10 	lds	r24, 0x1043
    d98a:	88 23       	and	r24, r24
    d98c:	19 f0       	breq	.+6      	; 0xd994 <update_level+0x1c8>
	return (char*) map_sub_shot;
    d98e:	62 e5       	ldi	r22, 0x52	; 82
    d990:	7c e4       	ldi	r23, 0x4C	; 76
    d992:	02 c0       	rjmp	.+4      	; 0xd998 <update_level+0x1cc>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d994:	6d e9       	ldi	r22, 0x9D	; 157
    d996:	7c e4       	ldi	r23, 0x4C	; 76
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d998:	40 e0       	ldi	r20, 0x00	; 0
    d99a:	8d 2f       	mov	r24, r29
    d99c:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d9a0:	60 e0       	ldi	r22, 0x00	; 0
    d9a2:	80 91 12 0c 	lds	r24, 0x0C12
    d9a6:	90 91 13 0c 	lds	r25, 0x0C13
    d9aa:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d9ae:	6f 2d       	mov	r22, r15
    d9b0:	80 91 12 0c 	lds	r24, 0x0C12
    d9b4:	90 91 13 0c 	lds	r25, 0x0C13
    d9b8:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_tile_explosions(&tile_animations);
    d9bc:	89 e1       	ldi	r24, 0x19	; 25
    d9be:	9c e0       	ldi	r25, 0x0C	; 12
    d9c0:	0e 94 47 5c 	call	0xb88e	; 0xb88e <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d9c4:	6c 2f       	mov	r22, r28
    d9c6:	8d e6       	ldi	r24, 0x6D	; 109
    d9c8:	90 e1       	ldi	r25, 0x10	; 16
    d9ca:	0e 94 0b 67 	call	0xce16	; 0xce16 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d9ce:	60 2f       	mov	r22, r16
    d9d0:	8d e6       	ldi	r24, 0x6D	; 109
    d9d2:	90 e1       	ldi	r25, 0x10	; 16
    d9d4:	0e 94 34 67 	call	0xce68	; 0xce68 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d9d8:	61 2f       	mov	r22, r17
    d9da:	88 e3       	ldi	r24, 0x38	; 56
    d9dc:	90 e1       	ldi	r25, 0x10	; 16
    d9de:	0e 94 0b 67 	call	0xce16	; 0xce16 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d9e2:	6d 2f       	mov	r22, r29
    d9e4:	88 e3       	ldi	r24, 0x38	; 56
    d9e6:	90 e1       	ldi	r25, 0x10	; 16
    d9e8:	0e 94 34 67 	call	0xce68	; 0xce68 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d9ec:	40 e6       	ldi	r20, 0x60	; 96
    d9ee:	68 e2       	ldi	r22, 0x28	; 40
    d9f0:	8d e6       	ldi	r24, 0x6D	; 109
    d9f2:	90 e1       	ldi	r25, 0x10	; 16
    d9f4:	0e 94 5d 67 	call	0xceba	; 0xceba <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d9f8:	40 ec       	ldi	r20, 0xC0	; 192
    d9fa:	68 e8       	ldi	r22, 0x88	; 136
    d9fc:	88 e3       	ldi	r24, 0x38	; 56
    d9fe:	90 e1       	ldi	r25, 0x10	; 16
    da00:	0e 94 5d 67 	call	0xceba	; 0xceba <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    da04:	6a e7       	ldi	r22, 0x7A	; 122
    da06:	70 e1       	ldi	r23, 0x10	; 16
    da08:	8d e6       	ldi	r24, 0x6D	; 109
    da0a:	90 e1       	ldi	r25, 0x10	; 16
    da0c:	0e 94 f4 67 	call	0xcfe8	; 0xcfe8 <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    da10:	65 e4       	ldi	r22, 0x45	; 69
    da12:	70 e1       	ldi	r23, 0x10	; 16
    da14:	88 e3       	ldi	r24, 0x38	; 56
    da16:	90 e1       	ldi	r25, 0x10	; 16
    da18:	0e 94 f4 67 	call	0xcfe8	; 0xcfe8 <update_turret_shot>
    da1c:	53 cf       	rjmp	.-346    	; 0xd8c4 <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    da1e:	90 32       	cpi	r25, 0x20	; 32
    da20:	09 f0       	breq	.+2      	; 0xda24 <update_level+0x258>
    da22:	58 c0       	rjmp	.+176    	; 0xdad4 <update_level+0x308>
	{
		// Render
		SetSpriteVisibility(true);
    da24:	81 e0       	ldi	r24, 0x01	; 1
    da26:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		render_boss_fight_sub_sinking();
    da2a:	0e 94 f6 66 	call	0xcdec	; 0xcdec <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    da2e:	60 e0       	ldi	r22, 0x00	; 0
    da30:	80 91 12 0c 	lds	r24, 0x0C12
    da34:	90 91 13 0c 	lds	r25, 0x0C13
    da38:	0e 94 96 5c 	call	0xb92c	; 0xb92c <tank_map>
    da3c:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    da3e:	40 e0       	ldi	r20, 0x00	; 0
    da40:	67 e9       	ldi	r22, 0x97	; 151
    da42:	7c e4       	ldi	r23, 0x4C	; 76
    da44:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		p1_shot_index = p2_index + 4;
    da48:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    da4a:	6c 2f       	mov	r22, r28
    da4c:	80 91 12 0c 	lds	r24, 0x0C12
    da50:	90 91 13 0c 	lds	r25, 0x0C13
    da54:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
    da58:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    da5a:	40 e0       	ldi	r20, 0x00	; 0
    da5c:	6d e9       	ldi	r22, 0x9D	; 157
    da5e:	7c e4       	ldi	r23, 0x4C	; 76
    da60:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    da64:	6c 2f       	mov	r22, r28
    da66:	80 91 12 0c 	lds	r24, 0x0C12
    da6a:	90 91 13 0c 	lds	r25, 0x0C13
    da6e:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
		render_player(game.boss_fight_player, p1_index);
    da72:	60 e0       	ldi	r22, 0x00	; 0
    da74:	80 91 12 0c 	lds	r24, 0x0C12
    da78:	90 91 13 0c 	lds	r25, 0x0C13
    da7c:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    da80:	6c 2f       	mov	r22, r28
    da82:	80 91 12 0c 	lds	r24, 0x0C12
    da86:	90 91 13 0c 	lds	r25, 0x0C13
    da8a:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_shot(&player2, p2_shot_index);
    da8e:	6d 2f       	mov	r22, r29
    da90:	84 ea       	ldi	r24, 0xA4	; 164
    da92:	9f e0       	ldi	r25, 0x0F	; 15
    da94:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_tile_explosions(&tile_animations);
    da98:	89 e1       	ldi	r24, 0x19	; 25
    da9a:	9c e0       	ldi	r25, 0x0C	; 12
    da9c:	0e 94 47 5c 	call	0xb88e	; 0xb88e <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    daa0:	60 91 12 0c 	lds	r22, 0x0C12
    daa4:	70 91 13 0c 	lds	r23, 0x0C13
    daa8:	80 91 14 0c 	lds	r24, 0x0C14
    daac:	90 91 15 0c 	lds	r25, 0x0C15
    dab0:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dab4:	60 91 10 0c 	lds	r22, 0x0C10
    dab8:	80 91 12 0c 	lds	r24, 0x0C12
    dabc:	90 91 13 0c 	lds	r25, 0x0C13
    dac0:	0e 94 c4 63 	call	0xc788	; 0xc788 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    dac4:	80 91 0f 0c 	lds	r24, 0x0C0F
    dac8:	80 32       	cpi	r24, 0x20	; 32
    daca:	09 f4       	brne	.+2      	; 0xdace <update_level+0x302>
    dacc:	97 c0       	rjmp	.+302    	; 0xdbfc <update_level+0x430>
		{
			resolve_scoring();
    dace:	0e 94 1e 6b 	call	0xd63c	; 0xd63c <resolve_scoring>
    dad2:	94 c0       	rjmp	.+296    	; 0xdbfc <update_level+0x430>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    dad4:	90 31       	cpi	r25, 0x10	; 16
    dad6:	d9 f3       	breq	.-10     	; 0xdace <update_level+0x302>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    dad8:	91 11       	cpse	r25, r1
    dada:	90 c0       	rjmp	.+288    	; 0xdbfc <update_level+0x430>
	{
		SetSpriteVisibility(true);
    dadc:	81 e0       	ldi	r24, 0x01	; 1
    dade:	0e 94 91 53 	call	0xa722	; 0xa722 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    dae2:	60 e0       	ldi	r22, 0x00	; 0
    dae4:	86 e3       	ldi	r24, 0x36	; 54
    dae6:	9c e0       	ldi	r25, 0x0C	; 12
    dae8:	0e 94 96 5c 	call	0xb92c	; 0xb92c <tank_map>
    daec:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    daee:	68 2f       	mov	r22, r24
    daf0:	84 ea       	ldi	r24, 0xA4	; 164
    daf2:	9f e0       	ldi	r25, 0x0F	; 15
    daf4:	0e 94 96 5c 	call	0xb92c	; 0xb92c <tank_map>
    daf8:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    dafa:	68 2f       	mov	r22, r24
    dafc:	86 e3       	ldi	r24, 0x36	; 54
    dafe:	9c e0       	ldi	r25, 0x0C	; 12
    db00:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
    db04:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    db06:	68 2f       	mov	r22, r24
    db08:	84 ea       	ldi	r24, 0xA4	; 164
    db0a:	9f e0       	ldi	r25, 0x0F	; 15
    db0c:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    db10:	40 91 02 01 	lds	r20, 0x0102
    db14:	6f e0       	ldi	r22, 0x0F	; 15
    db16:	86 e3       	ldi	r24, 0x36	; 54
    db18:	9c e0       	ldi	r25, 0x0C	; 12
    db1a:	0e 94 ca 5b 	call	0xb794	; 0xb794 <render_banter>
    db1e:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    db22:	40 91 01 01 	lds	r20, 0x0101
    db26:	60 e0       	ldi	r22, 0x00	; 0
    db28:	84 ea       	ldi	r24, 0xA4	; 164
    db2a:	9f e0       	ldi	r25, 0x0F	; 15
    db2c:	0e 94 ca 5b 	call	0xb794	; 0xb794 <render_banter>
    db30:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    db34:	60 e0       	ldi	r22, 0x00	; 0
    db36:	86 e3       	ldi	r24, 0x36	; 54
    db38:	9c e0       	ldi	r25, 0x0C	; 12
    db3a:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <render_player>
		render_player(&player2, p2_index);
    db3e:	6d 2d       	mov	r22, r13
    db40:	84 ea       	ldi	r24, 0xA4	; 164
    db42:	9f e0       	ldi	r25, 0x0F	; 15
    db44:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <render_player>
		render_shot(&player1, p1_shot_index);
    db48:	6e 2d       	mov	r22, r14
    db4a:	86 e3       	ldi	r24, 0x36	; 54
    db4c:	9c e0       	ldi	r25, 0x0C	; 12
    db4e:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_shot(&player2, p2_shot_index);
    db52:	6f 2d       	mov	r22, r15
    db54:	84 ea       	ldi	r24, 0xA4	; 164
    db56:	9f e0       	ldi	r25, 0x0F	; 15
    db58:	0e 94 1b 5c 	call	0xb836	; 0xb836 <render_shot>
		render_tile_explosions(&tile_animations);
    db5c:	89 e1       	ldi	r24, 0x19	; 25
    db5e:	9c e0       	ldi	r25, 0x0C	; 12
    db60:	0e 94 47 5c 	call	0xb88e	; 0xb88e <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    db64:	80 91 16 0c 	lds	r24, 0x0C16
    db68:	90 91 17 0c 	lds	r25, 0x0C17
    db6c:	89 3e       	cpi	r24, 0xE9	; 233
    db6e:	93 40       	sbci	r25, 0x03	; 3
    db70:	88 f0       	brcs	.+34     	; 0xdb94 <update_level+0x3c8>
    db72:	80 91 36 10 	lds	r24, 0x1036
    db76:	90 91 37 10 	lds	r25, 0x1037
    db7a:	18 16       	cp	r1, r24
    db7c:	19 06       	cpc	r1, r25
    db7e:	54 f4       	brge	.+20     	; 0xdb94 <update_level+0x3c8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    db80:	8a e2       	ldi	r24, 0x2A	; 42
    db82:	90 e1       	ldi	r25, 0x10	; 16
    db84:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <render_scope>
    db88:	88 23       	and	r24, r24
    db8a:	21 f0       	breq	.+8      	; 0xdb94 <update_level+0x3c8>
    db8c:	10 92 17 0c 	sts	0x0C17, r1
    db90:	10 92 16 0c 	sts	0x0C16, r1
		}
		game.scope_counter++;
    db94:	20 91 16 0c 	lds	r18, 0x0C16
    db98:	30 91 17 0c 	lds	r19, 0x0C17
    db9c:	2f 5f       	subi	r18, 0xFF	; 255
    db9e:	3f 4f       	sbci	r19, 0xFF	; 255
    dba0:	30 93 17 0c 	sts	0x0C17, r19
    dba4:	20 93 16 0c 	sts	0x0C16, r18
		
		// Update
		update_player(p1, &player1);
    dba8:	66 e3       	ldi	r22, 0x36	; 54
    dbaa:	7c e0       	ldi	r23, 0x0C	; 12
    dbac:	c8 01       	movw	r24, r16
    dbae:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
		update_player(p2, &player2);
    dbb2:	64 ea       	ldi	r22, 0xA4	; 164
    dbb4:	7f e0       	ldi	r23, 0x0F	; 15
    dbb6:	ce 01       	movw	r24, r28
    dbb8:	0e 94 59 69 	call	0xd2b2	; 0xd2b2 <update_player>
		resolve_scoring();
    dbbc:	0e 94 1e 6b 	call	0xd63c	; 0xd63c <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    dbc0:	60 e0       	ldi	r22, 0x00	; 0
    dbc2:	86 e3       	ldi	r24, 0x36	; 54
    dbc4:	9c e0       	ldi	r25, 0x0C	; 12
    dbc6:	0e 94 c4 63 	call	0xc788	; 0xc788 <collision_detect_player>
    dbca:	88 23       	and	r24, r24
    dbcc:	41 f0       	breq	.+16     	; 0xdbde <update_level+0x412>
    dbce:	2f e0       	ldi	r18, 0x0F	; 15
    dbd0:	40 e0       	ldi	r20, 0x00	; 0
    dbd2:	64 ea       	ldi	r22, 0xA4	; 164
    dbd4:	7f e0       	ldi	r23, 0x0F	; 15
    dbd6:	86 e3       	ldi	r24, 0x36	; 54
    dbd8:	9c e0       	ldi	r25, 0x0C	; 12
    dbda:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    dbde:	6f e0       	ldi	r22, 0x0F	; 15
    dbe0:	84 ea       	ldi	r24, 0xA4	; 164
    dbe2:	9f e0       	ldi	r25, 0x0F	; 15
    dbe4:	0e 94 c4 63 	call	0xc788	; 0xc788 <collision_detect_player>
    dbe8:	88 23       	and	r24, r24
    dbea:	41 f0       	breq	.+16     	; 0xdbfc <update_level+0x430>
    dbec:	20 e0       	ldi	r18, 0x00	; 0
    dbee:	4f e0       	ldi	r20, 0x0F	; 15
    dbf0:	66 e3       	ldi	r22, 0x36	; 54
    dbf2:	7c e0       	ldi	r23, 0x0C	; 12
    dbf4:	84 ea       	ldi	r24, 0xA4	; 164
    dbf6:	9f e0       	ldi	r25, 0x0F	; 15
    dbf8:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    dbfc:	80 91 18 0c 	lds	r24, 0x0C18
    dc00:	83 30       	cpi	r24, 0x03	; 3
    dc02:	31 f5       	brne	.+76     	; 0xdc50 <update_level+0x484>
	{
		demo_counter++;
    dc04:	80 91 36 0b 	lds	r24, 0x0B36
    dc08:	90 91 37 0b 	lds	r25, 0x0B37
    dc0c:	01 96       	adiw	r24, 0x01	; 1
    dc0e:	90 93 37 0b 	sts	0x0B37, r25
    dc12:	80 93 36 0b 	sts	0x0B36, r24
		held = ReadJoypad(0);
    dc16:	80 e0       	ldi	r24, 0x00	; 0
    dc18:	0e 94 7a 47 	call	0x8ef4	; 0x8ef4 <ReadJoypad>
		if (held || (demo_counter >= DEMO_LENGTH))
    dc1c:	89 2b       	or	r24, r25
    dc1e:	39 f4       	brne	.+14     	; 0xdc2e <update_level+0x462>
    dc20:	80 91 36 0b 	lds	r24, 0x0B36
    dc24:	90 91 37 0b 	lds	r25, 0x0B37
    dc28:	88 30       	cpi	r24, 0x08	; 8
    dc2a:	97 40       	sbci	r25, 0x07	; 7
    dc2c:	88 f0       	brcs	.+34     	; 0xdc50 <update_level+0x484>
		{
			demo_counter = 0;
    dc2e:	10 92 37 0b 	sts	0x0B37, r1
    dc32:	10 92 36 0b 	sts	0x0B36, r1
			fade_through();
    dc36:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
			init_game_state();
    dc3a:	0e 94 a8 59 	call	0xb350	; 0xb350 <init_game_state>
			load_splash();
		}
	}
}
    dc3e:	df 91       	pop	r29
    dc40:	cf 91       	pop	r28
    dc42:	1f 91       	pop	r17
    dc44:	0f 91       	pop	r16
    dc46:	ff 90       	pop	r15
    dc48:	ef 90       	pop	r14
    dc4a:	df 90       	pop	r13
		if (held || (demo_counter >= DEMO_LENGTH))
		{
			demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    dc4c:	0c 94 7b 68 	jmp	0xd0f6	; 0xd0f6 <load_splash>
		}
	}
}
    dc50:	df 91       	pop	r29
    dc52:	cf 91       	pop	r28
    dc54:	1f 91       	pop	r17
    dc56:	0f 91       	pop	r16
    dc58:	ff 90       	pop	r15
    dc5a:	ef 90       	pop	r14
    dc5c:	df 90       	pop	r13
    dc5e:	08 95       	ret

0000dc60 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1)
{
    dc60:	cf 93       	push	r28
    dc62:	df 93       	push	r29
    dc64:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    dc66:	88 81       	ld	r24, Y
    dc68:	99 81       	ldd	r25, Y+1	; 0x01
    dc6a:	91 ff       	sbrs	r25, 1
    dc6c:	0e c0       	rjmp	.+28     	; 0xdc8a <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    dc6e:	10 92 32 0b 	sts	0x0B32, r1
    dc72:	10 92 31 0b 	sts	0x0B31, r1
		SFX_NAVIGATE;
    dc76:	2f ef       	ldi	r18, 0xFF	; 255
    dc78:	47 e1       	ldi	r20, 0x17	; 23
    dc7a:	65 e0       	ldi	r22, 0x05	; 5
    dc7c:	84 e0       	ldi	r24, 0x04	; 4
    dc7e:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		fade_through();
    dc82:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
		load_splash();
    dc86:	0e 94 7b 68 	call	0xd0f6	; 0xd0f6 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    dc8a:	8c 81       	ldd	r24, Y+4	; 0x04
    dc8c:	9d 81       	ldd	r25, Y+5	; 0x05
    dc8e:	92 ff       	sbrs	r25, 2
    dc90:	1f c0       	rjmp	.+62     	; 0xdcd0 <update_tank_rank+0x70>
    dc92:	8e 81       	ldd	r24, Y+6	; 0x06
    dc94:	8f 3f       	cpi	r24, 0xFF	; 255
    dc96:	e1 f4       	brne	.+56     	; 0xdcd0 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    dc98:	10 92 32 0b 	sts	0x0B32, r1
    dc9c:	10 92 31 0b 	sts	0x0B31, r1
	    SFX_NAVIGATE;
    dca0:	2f ef       	ldi	r18, 0xFF	; 255
    dca2:	47 e1       	ldi	r20, 0x17	; 23
    dca4:	65 e0       	ldi	r22, 0x05	; 5
    dca6:	84 e0       	ldi	r24, 0x04	; 4
    dca8:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
	    init_scores(&scores);
    dcac:	85 ec       	ldi	r24, 0xC5	; 197
    dcae:	9b e0       	ldi	r25, 0x0B	; 11
    dcb0:	0e 94 41 58 	call	0xb082	; 0xb082 <init_scores>
	    init_handles(&handles);
    dcb4:	8c ee       	ldi	r24, 0xEC	; 236
    dcb6:	9b e0       	ldi	r25, 0x0B	; 11
    dcb8:	0e 94 4d 58 	call	0xb09a	; 0xb09a <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dcbc:	85 ec       	ldi	r24, 0xC5	; 197
    dcbe:	9b e0       	ldi	r25, 0x0B	; 11
    dcc0:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <EepromWriteBlock>
    dcc4:	8c ee       	ldi	r24, 0xEC	; 236
    dcc6:	9b e0       	ldi	r25, 0x0B	; 11
    dcc8:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    dccc:	0e 94 b5 68 	call	0xd16a	; 0xd16a <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    dcd0:	80 91 31 0b 	lds	r24, 0x0B31
    dcd4:	90 91 32 0b 	lds	r25, 0x0B32
    dcd8:	85 38       	cpi	r24, 0x85	; 133
    dcda:	93 40       	sbci	r25, 0x03	; 3
    dcdc:	70 f0       	brcs	.+28     	; 0xdcfa <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    dcde:	10 92 32 0b 	sts	0x0B32, r1
    dce2:	10 92 31 0b 	sts	0x0B31, r1
		SFX_NAVIGATE;
    dce6:	2f ef       	ldi	r18, 0xFF	; 255
    dce8:	47 e1       	ldi	r20, 0x17	; 23
    dcea:	65 e0       	ldi	r22, 0x05	; 5
    dcec:	84 e0       	ldi	r24, 0x04	; 4
    dcee:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		fade_through();
    dcf2:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
		load_splash();
    dcf6:	0e 94 7b 68 	call	0xd0f6	; 0xd0f6 <load_splash>
	}
	tank_rank_counter++;
    dcfa:	80 91 31 0b 	lds	r24, 0x0B31
    dcfe:	90 91 32 0b 	lds	r25, 0x0B32
    dd02:	01 96       	adiw	r24, 0x01	; 1
    dd04:	90 93 32 0b 	sts	0x0B32, r25
    dd08:	80 93 31 0b 	sts	0x0B31, r24
}
    dd0c:	df 91       	pop	r29
    dd0e:	cf 91       	pop	r28
    dd10:	08 95       	ret

0000dd12 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    dd12:	af 92       	push	r10
    dd14:	bf 92       	push	r11
    dd16:	cf 92       	push	r12
    dd18:	df 92       	push	r13
    dd1a:	ef 92       	push	r14
    dd1c:	ff 92       	push	r15
    dd1e:	0f 93       	push	r16
    dd20:	1f 93       	push	r17
    dd22:	cf 93       	push	r28
    dd24:	df 93       	push	r29
    dd26:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    dd28:	fb 01       	movw	r30, r22
    dd2a:	00 81       	ld	r16, Z
    dd2c:	11 81       	ldd	r17, Z+1	; 0x01
    dd2e:	68 01       	movw	r12, r16
    dd30:	f0 e1       	ldi	r31, 0x10	; 16
    dd32:	cf 22       	and	r12, r31
    dd34:	dd 24       	eor	r13, r13
    dd36:	04 ff       	sbrs	r16, 4
    dd38:	09 c0       	rjmp	.+18     	; 0xdd4c <_handle_select_helper+0x3a>
    dd3a:	8d 81       	ldd	r24, Y+5	; 0x05
    dd3c:	81 11       	cpse	r24, r1
    dd3e:	06 c0       	rjmp	.+12     	; 0xdd4c <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    dd40:	88 81       	ld	r24, Y
    dd42:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    dd44:	87 ff       	sbrs	r24, 7
    dd46:	10 c0       	rjmp	.+32     	; 0xdd68 <_handle_select_helper+0x56>
    dd48:	18 82       	st	Y, r1
    dd4a:	26 c0       	rjmp	.+76     	; 0xdd98 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    dd4c:	58 01       	movw	r10, r16
    dd4e:	20 e2       	ldi	r18, 0x20	; 32
    dd50:	a2 22       	and	r10, r18
    dd52:	bb 24       	eor	r11, r11
    dd54:	05 ff       	sbrs	r16, 5
    dd56:	0a c0       	rjmp	.+20     	; 0xdd6c <_handle_select_helper+0x5a>
    dd58:	8d 81       	ldd	r24, Y+5	; 0x05
    dd5a:	81 11       	cpse	r24, r1
    dd5c:	07 c0       	rjmp	.+14     	; 0xdd6c <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    dd5e:	88 81       	ld	r24, Y
    dd60:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    dd62:	89 30       	cpi	r24, 0x09	; 9
    dd64:	0c f0       	brlt	.+2      	; 0xdd68 <_handle_select_helper+0x56>
    dd66:	88 e0       	ldi	r24, 0x08	; 8
    dd68:	88 83       	st	Y, r24
    dd6a:	16 c0       	rjmp	.+44     	; 0xdd98 <_handle_select_helper+0x86>
    dd6c:	7a 01       	movw	r14, r20
    dd6e:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    dd70:	0e 94 ab 68 	call	0xd156	; 0xd156 <select_pressed>
    dd74:	88 23       	and	r24, r24
    dd76:	01 f1       	breq	.+64     	; 0xddb8 <_handle_select_helper+0xa6>
    dd78:	9d 81       	ldd	r25, Y+5	; 0x05
    dd7a:	91 11       	cpse	r25, r1
    dd7c:	1d c0       	rjmp	.+58     	; 0xddb8 <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    dd7e:	81 e0       	ldi	r24, 0x01	; 1
    dd80:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    dd82:	69 91       	ld	r22, Y+
    dd84:	83 e0       	ldi	r24, 0x03	; 3
    dd86:	68 02       	muls	r22, r24
    dd88:	b0 01       	movw	r22, r0
    dd8a:	11 24       	eor	r1, r1
    dd8c:	62 51       	subi	r22, 0x12	; 18
    dd8e:	74 4f       	sbci	r23, 0xF4	; 244
    dd90:	43 e0       	ldi	r20, 0x03	; 3
    dd92:	ce 01       	movw	r24, r28
    dd94:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
		SFX_NAVIGATE;
    dd98:	2f ef       	ldi	r18, 0xFF	; 255
    dd9a:	47 e1       	ldi	r20, 0x17	; 23
    dd9c:	65 e0       	ldi	r22, 0x05	; 5
    dd9e:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    dda0:	df 91       	pop	r29
    dda2:	cf 91       	pop	r28
    dda4:	1f 91       	pop	r17
    dda6:	0f 91       	pop	r16
    dda8:	ff 90       	pop	r15
    ddaa:	ef 90       	pop	r14
    ddac:	df 90       	pop	r13
    ddae:	cf 90       	pop	r12
    ddb0:	bf 90       	pop	r11
    ddb2:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    ddb4:	0c 94 e0 4a 	jmp	0x95c0	; 0x95c0 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    ddb8:	07 ff       	sbrs	r16, 7
    ddba:	09 c0       	rjmp	.+18     	; 0xddce <_handle_select_helper+0xbc>
    ddbc:	9d 81       	ldd	r25, Y+5	; 0x05
    ddbe:	91 30       	cpi	r25, 0x01	; 1
    ddc0:	31 f4       	brne	.+12     	; 0xddce <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    ddc2:	8c 81       	ldd	r24, Y+4	; 0x04
    ddc4:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    ddc6:	83 30       	cpi	r24, 0x03	; 3
    ddc8:	5c f0       	brlt	.+22     	; 0xdde0 <_handle_select_helper+0xce>
    ddca:	82 e0       	ldi	r24, 0x02	; 2
    ddcc:	09 c0       	rjmp	.+18     	; 0xdde0 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    ddce:	06 ff       	sbrs	r16, 6
    ddd0:	0b c0       	rjmp	.+22     	; 0xdde8 <_handle_select_helper+0xd6>
    ddd2:	9d 81       	ldd	r25, Y+5	; 0x05
    ddd4:	91 30       	cpi	r25, 0x01	; 1
    ddd6:	41 f5       	brne	.+80     	; 0xde28 <_handle_select_helper+0x116>
	{
		ps->char_index--;
    ddd8:	8c 81       	ldd	r24, Y+4	; 0x04
    ddda:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    dddc:	87 fd       	sbrc	r24, 7
    ddde:	02 c0       	rjmp	.+4      	; 0xdde4 <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    dde0:	8c 83       	std	Y+4, r24	; 0x04
    dde2:	da cf       	rjmp	.-76     	; 0xdd98 <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    dde4:	1c 82       	std	Y+4, r1	; 0x04
    dde6:	d8 cf       	rjmp	.-80     	; 0xdd98 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    dde8:	cd 28       	or	r12, r13
    ddea:	69 f0       	breq	.+26     	; 0xde06 <_handle_select_helper+0xf4>
    ddec:	8d 81       	ldd	r24, Y+5	; 0x05
    ddee:	81 30       	cpi	r24, 0x01	; 1
    ddf0:	09 f0       	breq	.+2      	; 0xddf4 <_handle_select_helper+0xe2>
    ddf2:	44 c0       	rjmp	.+136    	; 0xde7c <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    ddf4:	8c 81       	ldd	r24, Y+4	; 0x04
    ddf6:	c8 0f       	add	r28, r24
    ddf8:	d1 1d       	adc	r29, r1
    ddfa:	99 81       	ldd	r25, Y+1	; 0x01
    ddfc:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    ddfe:	91 34       	cpi	r25, 0x41	; 65
    de00:	70 f4       	brcc	.+28     	; 0xde1e <_handle_select_helper+0x10c>
    de02:	81 e4       	ldi	r24, 0x41	; 65
    de04:	0f c0       	rjmp	.+30     	; 0xde24 <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    de06:	ab 28       	or	r10, r11
    de08:	89 f0       	breq	.+34     	; 0xde2c <_handle_select_helper+0x11a>
    de0a:	8d 81       	ldd	r24, Y+5	; 0x05
    de0c:	81 30       	cpi	r24, 0x01	; 1
    de0e:	b1 f5       	brne	.+108    	; 0xde7c <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    de10:	8c 81       	ldd	r24, Y+4	; 0x04
    de12:	c8 0f       	add	r28, r24
    de14:	d1 1d       	adc	r29, r1
    de16:	99 81       	ldd	r25, Y+1	; 0x01
    de18:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    de1a:	9b 35       	cpi	r25, 0x5B	; 91
    de1c:	10 f4       	brcc	.+4      	; 0xde22 <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    de1e:	99 83       	std	Y+1, r25	; 0x01
    de20:	bb cf       	rjmp	.-138    	; 0xdd98 <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    de22:	8a e5       	ldi	r24, 0x5A	; 90
    de24:	89 83       	std	Y+1, r24	; 0x01
    de26:	b8 cf       	rjmp	.-144    	; 0xdd98 <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    de28:	ab 28       	or	r10, r11
    de2a:	41 f5       	brne	.+80     	; 0xde7c <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    de2c:	88 23       	and	r24, r24
    de2e:	31 f1       	breq	.+76     	; 0xde7c <_handle_select_helper+0x16a>
    de30:	8d 81       	ldd	r24, Y+5	; 0x05
    de32:	81 30       	cpi	r24, 0x01	; 1
    de34:	19 f5       	brne	.+70     	; 0xde7c <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    de36:	fe 01       	movw	r30, r28
    de38:	81 91       	ld	r24, Z+
    de3a:	8f 01       	movw	r16, r30
    de3c:	f7 01       	movw	r30, r14
    de3e:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    de40:	43 e0       	ldi	r20, 0x03	; 3
    de42:	b8 01       	movw	r22, r16
    de44:	c7 01       	movw	r24, r14
    de46:	0c 96       	adiw	r24, 0x0c	; 12
    de48:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    de4c:	88 81       	ld	r24, Y
    de4e:	f3 e0       	ldi	r31, 0x03	; 3
    de50:	8f 02       	muls	r24, r31
    de52:	c0 01       	movw	r24, r0
    de54:	11 24       	eor	r1, r1
    de56:	43 e0       	ldi	r20, 0x03	; 3
    de58:	b8 01       	movw	r22, r16
    de5a:	82 51       	subi	r24, 0x12	; 18
    de5c:	94 4f       	sbci	r25, 0xF4	; 244
    de5e:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
		SFX_NAVIGATE;
    de62:	2f ef       	ldi	r18, 0xFF	; 255
    de64:	47 e1       	ldi	r20, 0x17	; 23
    de66:	65 e0       	ldi	r22, 0x05	; 5
    de68:	84 e0       	ldi	r24, 0x04	; 4
    de6a:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    de6e:	8c ee       	ldi	r24, 0xEC	; 236
    de70:	9b e0       	ldi	r25, 0x0B	; 11
    de72:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    de76:	82 e0       	ldi	r24, 0x02	; 2
    de78:	8d 83       	std	Y+5, r24	; 0x05
    de7a:	20 c0       	rjmp	.+64     	; 0xdebc <_handle_select_helper+0x1aa>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    de7c:	11 ff       	sbrs	r17, 1
    de7e:	1e c0       	rjmp	.+60     	; 0xdebc <_handle_select_helper+0x1aa>
    de80:	8d 81       	ldd	r24, Y+5	; 0x05
    de82:	81 30       	cpi	r24, 0x01	; 1
    de84:	11 f4       	brne	.+4      	; 0xde8a <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    de86:	1d 82       	std	Y+5, r1	; 0x05
    de88:	87 cf       	rjmp	.-242    	; 0xdd98 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    de8a:	82 30       	cpi	r24, 0x02	; 2
    de8c:	19 f4       	brne	.+6      	; 0xde94 <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    de8e:	81 e0       	ldi	r24, 0x01	; 1
    de90:	8d 83       	std	Y+5, r24	; 0x05
    de92:	82 cf       	rjmp	.-252    	; 0xdd98 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    de94:	2f ef       	ldi	r18, 0xFF	; 255
    de96:	47 e1       	ldi	r20, 0x17	; 23
    de98:	65 e0       	ldi	r22, 0x05	; 5
    de9a:	84 e0       	ldi	r24, 0x04	; 4
    de9c:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		fade_through();
    dea0:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
		load_splash();
	}
}
    dea4:	df 91       	pop	r29
    dea6:	cf 91       	pop	r28
    dea8:	1f 91       	pop	r17
    deaa:	0f 91       	pop	r16
    deac:	ff 90       	pop	r15
    deae:	ef 90       	pop	r14
    deb0:	df 90       	pop	r13
    deb2:	cf 90       	pop	r12
    deb4:	bf 90       	pop	r11
    deb6:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    deb8:	0c 94 7b 68 	jmp	0xd0f6	; 0xd0f6 <load_splash>
	}
}
    debc:	df 91       	pop	r29
    debe:	cf 91       	pop	r28
    dec0:	1f 91       	pop	r17
    dec2:	0f 91       	pop	r16
    dec4:	ff 90       	pop	r15
    dec6:	ef 90       	pop	r14
    dec8:	df 90       	pop	r13
    deca:	cf 90       	pop	r12
    decc:	bf 90       	pop	r11
    dece:	af 90       	pop	r10
    ded0:	08 95       	ret

0000ded2 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    ded2:	af 92       	push	r10
    ded4:	bf 92       	push	r11
    ded6:	cf 92       	push	r12
    ded8:	df 92       	push	r13
    deda:	ef 92       	push	r14
    dedc:	ff 92       	push	r15
    dede:	0f 93       	push	r16
    dee0:	1f 93       	push	r17
    dee2:	cf 93       	push	r28
    dee4:	df 93       	push	r29
    dee6:	00 d0       	rcall	.+0      	; 0xdee8 <_handle_select_render_helper+0x16>
    dee8:	1f 92       	push	r1
    deea:	cd b7       	in	r28, 0x3d	; 61
    deec:	de b7       	in	r29, 0x3e	; 62
    deee:	7c 01       	movw	r14, r24
    def0:	b4 2e       	mov	r11, r20
    def2:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    def4:	80 e2       	ldi	r24, 0x20	; 32
    def6:	89 83       	std	Y+1, r24	; 0x01
    def8:	8a 83       	std	Y+2, r24	; 0x02
    defa:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    defc:	f7 01       	movw	r30, r14
    defe:	85 81       	ldd	r24, Z+5	; 0x05
    df00:	81 11       	cpse	r24, r1
    df02:	1d c0       	rjmp	.+58     	; 0xdf3e <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    df04:	40 e0       	ldi	r20, 0x00	; 0
    df06:	6b e5       	ldi	r22, 0x5B	; 91
    df08:	7c e4       	ldi	r23, 0x4C	; 76
    df0a:	82 2f       	mov	r24, r18
    df0c:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    df10:	40 e0       	ldi	r20, 0x00	; 0
    df12:	6d e9       	ldi	r22, 0x9D	; 157
    df14:	7c e4       	ldi	r23, 0x4C	; 76
    df16:	81 e0       	ldi	r24, 0x01	; 1
    df18:	81 0f       	add	r24, r17
    df1a:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    df1e:	f7 01       	movw	r30, r14
    df20:	40 81       	ld	r20, Z
    df22:	44 0f       	add	r20, r20
    df24:	44 0f       	add	r20, r20
    df26:	44 0f       	add	r20, r20
    df28:	40 5c       	subi	r20, 0xC0	; 192
    df2a:	01 e0       	ldi	r16, 0x01	; 1
    df2c:	21 e0       	ldi	r18, 0x01	; 1
    df2e:	6b 2d       	mov	r22, r11
    df30:	66 0f       	add	r22, r22
    df32:	66 0f       	add	r22, r22
    df34:	66 0f       	add	r22, r22
    df36:	81 2f       	mov	r24, r17
    df38:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
    df3c:	6f c0       	rjmp	.+222    	; 0xe01c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    df3e:	81 30       	cpi	r24, 0x01	; 1
    df40:	09 f0       	breq	.+2      	; 0xdf44 <_handle_select_render_helper+0x72>
    df42:	44 c0       	rjmp	.+136    	; 0xdfcc <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    df44:	40 e0       	ldi	r20, 0x00	; 0
    df46:	68 e5       	ldi	r22, 0x58	; 88
    df48:	7c e4       	ldi	r23, 0x4C	; 76
    df4a:	82 2f       	mov	r24, r18
    df4c:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    df50:	aa 24       	eor	r10, r10
    df52:	a3 94       	inc	r10
    df54:	a1 0e       	add	r10, r17
    df56:	40 e0       	ldi	r20, 0x00	; 0
    df58:	65 e5       	ldi	r22, 0x55	; 85
    df5a:	7c e4       	ldi	r23, 0x4C	; 76
    df5c:	8a 2d       	mov	r24, r10
    df5e:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    df62:	cb 2c       	mov	r12, r11
    df64:	d1 2c       	mov	r13, r1
    df66:	f5 e0       	ldi	r31, 0x05	; 5
    df68:	cf 0e       	add	r12, r31
    df6a:	d1 1c       	adc	r13, r1
    df6c:	f7 01       	movw	r30, r14
    df6e:	40 81       	ld	r20, Z
    df70:	44 0f       	add	r20, r20
    df72:	44 0f       	add	r20, r20
    df74:	44 0f       	add	r20, r20
    df76:	48 5c       	subi	r20, 0xC8	; 200
    df78:	84 81       	ldd	r24, Z+4	; 0x04
    df7a:	b6 01       	movw	r22, r12
    df7c:	68 0f       	add	r22, r24
    df7e:	71 1d       	adc	r23, r1
    df80:	87 fd       	sbrc	r24, 7
    df82:	7a 95       	dec	r23
    df84:	66 0f       	add	r22, r22
    df86:	66 0f       	add	r22, r22
    df88:	66 0f       	add	r22, r22
    df8a:	01 e0       	ldi	r16, 0x01	; 1
    df8c:	21 e0       	ldi	r18, 0x01	; 1
    df8e:	81 2f       	mov	r24, r17
    df90:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    df94:	f7 01       	movw	r30, r14
    df96:	40 81       	ld	r20, Z
    df98:	44 0f       	add	r20, r20
    df9a:	44 0f       	add	r20, r20
    df9c:	44 0f       	add	r20, r20
    df9e:	48 5b       	subi	r20, 0xB8	; 184
    dfa0:	84 81       	ldd	r24, Z+4	; 0x04
    dfa2:	c8 0e       	add	r12, r24
    dfa4:	d1 1c       	adc	r13, r1
    dfa6:	87 fd       	sbrc	r24, 7
    dfa8:	da 94       	dec	r13
    dfaa:	6c 2d       	mov	r22, r12
    dfac:	66 0f       	add	r22, r22
    dfae:	66 0f       	add	r22, r22
    dfb0:	66 0f       	add	r22, r22
    dfb2:	21 e0       	ldi	r18, 0x01	; 1
    dfb4:	8a 2d       	mov	r24, r10
    dfb6:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    dfba:	43 e0       	ldi	r20, 0x03	; 3
    dfbc:	b7 01       	movw	r22, r14
    dfbe:	6f 5f       	subi	r22, 0xFF	; 255
    dfc0:	7f 4f       	sbci	r23, 0xFF	; 255
    dfc2:	ce 01       	movw	r24, r28
    dfc4:	01 96       	adiw	r24, 0x01	; 1
    dfc6:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
    dfca:	28 c0       	rjmp	.+80     	; 0xe01c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    dfcc:	82 30       	cpi	r24, 0x02	; 2
    dfce:	31 f5       	brne	.+76     	; 0xe01c <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    dfd0:	c4 2e       	mov	r12, r20
    dfd2:	d1 2c       	mov	r13, r1
    dfd4:	48 e2       	ldi	r20, 0x28	; 40
    dfd6:	65 e0       	ldi	r22, 0x05	; 5
    dfd8:	70 e0       	ldi	r23, 0x00	; 0
    dfda:	c6 01       	movw	r24, r12
    dfdc:	06 96       	adiw	r24, 0x06	; 6
    dfde:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    dfe2:	23 e0       	ldi	r18, 0x03	; 3
    dfe4:	a7 01       	movw	r20, r14
    dfe6:	4f 5f       	subi	r20, 0xFF	; 255
    dfe8:	5f 4f       	sbci	r21, 0xFF	; 255
    dfea:	65 e0       	ldi	r22, 0x05	; 5
    dfec:	87 e0       	ldi	r24, 0x07	; 7
    dfee:	8b 0d       	add	r24, r11
    dff0:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    dff4:	49 e2       	ldi	r20, 0x29	; 41
    dff6:	65 e0       	ldi	r22, 0x05	; 5
    dff8:	70 e0       	ldi	r23, 0x00	; 0
    dffa:	c6 01       	movw	r24, r12
    dffc:	0a 96       	adiw	r24, 0x0a	; 10
    dffe:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
		MapSprite2(idx, map_none, 0);
    e002:	40 e0       	ldi	r20, 0x00	; 0
    e004:	6d e9       	ldi	r22, 0x9D	; 157
    e006:	7c e4       	ldi	r23, 0x4C	; 76
    e008:	81 2f       	mov	r24, r17
    e00a:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    e00e:	40 e0       	ldi	r20, 0x00	; 0
    e010:	6d e9       	ldi	r22, 0x9D	; 157
    e012:	7c e4       	ldi	r23, 0x4C	; 76
    e014:	81 e0       	ldi	r24, 0x01	; 1
    e016:	81 0f       	add	r24, r17
    e018:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    e01c:	f7 01       	movw	r30, r14
    e01e:	60 81       	ld	r22, Z
    e020:	68 5f       	subi	r22, 0xF8	; 248
    e022:	23 e0       	ldi	r18, 0x03	; 3
    e024:	ae 01       	movw	r20, r28
    e026:	4f 5f       	subi	r20, 0xFF	; 255
    e028:	5f 4f       	sbci	r21, 0xFF	; 255
    e02a:	85 e0       	ldi	r24, 0x05	; 5
    e02c:	8b 0d       	add	r24, r11
    e02e:	0e 94 cc 56 	call	0xad98	; 0xad98 <LBPrintStr>
}
    e032:	0f 90       	pop	r0
    e034:	0f 90       	pop	r0
    e036:	0f 90       	pop	r0
    e038:	df 91       	pop	r29
    e03a:	cf 91       	pop	r28
    e03c:	1f 91       	pop	r17
    e03e:	0f 91       	pop	r16
    e040:	ff 90       	pop	r15
    e042:	ef 90       	pop	r14
    e044:	df 90       	pop	r13
    e046:	cf 90       	pop	r12
    e048:	bf 90       	pop	r11
    e04a:	af 90       	pop	r10
    e04c:	08 95       	ret

0000e04e <load_handle_select>:

void load_handle_select()
{
    e04e:	8f 92       	push	r8
    e050:	9f 92       	push	r9
    e052:	af 92       	push	r10
    e054:	bf 92       	push	r11
    e056:	cf 92       	push	r12
    e058:	df 92       	push	r13
    e05a:	ef 92       	push	r14
    e05c:	ff 92       	push	r15
    e05e:	0f 93       	push	r16
    e060:	1f 93       	push	r17
    e062:	cf 93       	push	r28
    e064:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    e066:	82 e0       	ldi	r24, 0x02	; 2
    e068:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    e06c:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    e070:	4b ed       	ldi	r20, 0xDB	; 219
    e072:	55 e8       	ldi	r21, 0x85	; 133
    e074:	64 e0       	ldi	r22, 0x04	; 4
    e076:	83 e0       	ldi	r24, 0x03	; 3
    e078:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    e07c:	45 ed       	ldi	r20, 0xD5	; 213
    e07e:	55 e8       	ldi	r21, 0x85	; 133
    e080:	64 e0       	ldi	r22, 0x04	; 4
    e082:	84 e1       	ldi	r24, 0x14	; 20
    e084:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    e088:	48 e5       	ldi	r20, 0x58	; 88
    e08a:	5b e0       	ldi	r21, 0x0B	; 11
    e08c:	61 e0       	ldi	r22, 0x01	; 1
    e08e:	70 e0       	ldi	r23, 0x00	; 0
    e090:	89 e0       	ldi	r24, 0x09	; 9
    e092:	90 e0       	ldi	r25, 0x00	; 0
    e094:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(6, 5, (char*) strPlayer1);
    e098:	47 e4       	ldi	r20, 0x47	; 71
    e09a:	5b e0       	ldi	r21, 0x0B	; 11
    e09c:	65 e0       	ldi	r22, 0x05	; 5
    e09e:	70 e0       	ldi	r23, 0x00	; 0
    e0a0:	86 e0       	ldi	r24, 0x06	; 6
    e0a2:	90 e0       	ldi	r25, 0x00	; 0
    e0a4:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(23, 5, (char*) strPlayer2);
    e0a8:	44 e4       	ldi	r20, 0x44	; 68
    e0aa:	5b e0       	ldi	r21, 0x0B	; 11
    e0ac:	65 e0       	ldi	r22, 0x05	; 5
    e0ae:	70 e0       	ldi	r23, 0x00	; 0
    e0b0:	87 e1       	ldi	r24, 0x17	; 23
    e0b2:	90 e0       	ldi	r25, 0x00	; 0
    e0b4:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
    e0b8:	8e ee       	ldi	r24, 0xEE	; 238
    e0ba:	e8 2e       	mov	r14, r24
    e0bc:	8b e0       	ldi	r24, 0x0B	; 11
    e0be:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    e0c0:	c0 e0       	ldi	r28, 0x00	; 0
    e0c2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    e0c4:	93 e0       	ldi	r25, 0x03	; 3
    e0c6:	a9 2e       	mov	r10, r25
    e0c8:	b1 2c       	mov	r11, r1
    e0ca:	67 01       	movw	r12, r14
    e0cc:	ce 01       	movw	r24, r28
    e0ce:	b5 01       	movw	r22, r10
    e0d0:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <__divmodhi4>
    e0d4:	4c 01       	movw	r8, r24
    e0d6:	8b 01       	movw	r16, r22
    e0d8:	08 5f       	subi	r16, 0xF8	; 248
    e0da:	1f 4f       	sbci	r17, 0xFF	; 255
    e0dc:	f7 01       	movw	r30, r14
    e0de:	41 91       	ld	r20, Z+
    e0e0:	7f 01       	movw	r14, r30
    e0e2:	b8 01       	movw	r22, r16
    e0e4:	03 96       	adiw	r24, 0x03	; 3
    e0e6:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    e0ea:	f6 01       	movw	r30, r12
    e0ec:	40 81       	ld	r20, Z
    e0ee:	b8 01       	movw	r22, r16
    e0f0:	c4 01       	movw	r24, r8
    e0f2:	44 96       	adiw	r24, 0x14	; 20
    e0f4:	0e 94 84 55 	call	0xab08	; 0xab08 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    e0f8:	21 96       	adiw	r28, 0x01	; 1
    e0fa:	cb 31       	cpi	r28, 0x1B	; 27
    e0fc:	d1 05       	cpc	r29, r1
    e0fe:	29 f7       	brne	.-54     	; 0xe0ca <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
    e100:	43 e3       	ldi	r20, 0x33	; 51
    e102:	5b e0       	ldi	r21, 0x0B	; 11
    e104:	65 e1       	ldi	r22, 0x15	; 21
    e106:	70 e0       	ldi	r23, 0x00	; 0
    e108:	85 e0       	ldi	r24, 0x05	; 5
    e10a:	90 e0       	ldi	r25, 0x00	; 0
    e10c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    e110:	41 e2       	ldi	r20, 0x21	; 33
    e112:	5b e0       	ldi	r21, 0x0B	; 11
    e114:	66 e1       	ldi	r22, 0x16	; 22
    e116:	70 e0       	ldi	r23, 0x00	; 0
    e118:	85 e0       	ldi	r24, 0x05	; 5
    e11a:	90 e0       	ldi	r25, 0x00	; 0
    e11c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(5, 23, (char*) strCancelHandle);
    e120:	46 e1       	ldi	r20, 0x16	; 22
    e122:	5b e0       	ldi	r21, 0x0B	; 11
    e124:	67 e1       	ldi	r22, 0x17	; 23
    e126:	70 e0       	ldi	r23, 0x00	; 0
    e128:	85 e0       	ldi	r24, 0x05	; 5
    e12a:	90 e0       	ldi	r25, 0x00	; 0
    e12c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>
	Print(5, 24, (char*) strChangeHandle);
    e130:	4e ee       	ldi	r20, 0xEE	; 238
    e132:	5a e0       	ldi	r21, 0x0A	; 10
    e134:	68 e1       	ldi	r22, 0x18	; 24
    e136:	70 e0       	ldi	r23, 0x00	; 0
    e138:	85 e0       	ldi	r24, 0x05	; 5
    e13a:	90 e0       	ldi	r25, 0x00	; 0
}
    e13c:	df 91       	pop	r29
    e13e:	cf 91       	pop	r28
    e140:	1f 91       	pop	r17
    e142:	0f 91       	pop	r16
    e144:	ff 90       	pop	r15
    e146:	ef 90       	pop	r14
    e148:	df 90       	pop	r13
    e14a:	cf 90       	pop	r12
    e14c:	bf 90       	pop	r11
    e14e:	af 90       	pop	r10
    e150:	9f 90       	pop	r9
    e152:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    e154:	0c 94 69 55 	jmp	0xaad2	; 0xaad2 <Print>

0000e158 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    e158:	0f 93       	push	r16
    e15a:	cf 93       	push	r28
    e15c:	df 93       	push	r29
    e15e:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    e160:	90 91 18 0c 	lds	r25, 0x0C18
    e164:	91 30       	cpi	r25, 0x01	; 1
    e166:	41 f0       	breq	.+16     	; 0xe178 <update_splash+0x20>
    e168:	92 30       	cpi	r25, 0x02	; 2
    e16a:	51 f0       	breq	.+20     	; 0xe180 <update_splash+0x28>
    e16c:	91 11       	cpse	r25, r1
    e16e:	0f c0       	rjmp	.+30     	; 0xe18e <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    e170:	01 e0       	ldi	r16, 0x01	; 1
    e172:	21 e0       	ldi	r18, 0x01	; 1
    e174:	48 e6       	ldi	r20, 0x68	; 104
    e176:	07 c0       	rjmp	.+14     	; 0xe186 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    e178:	01 e0       	ldi	r16, 0x01	; 1
    e17a:	21 e0       	ldi	r18, 0x01	; 1
    e17c:	40 e7       	ldi	r20, 0x70	; 112
    e17e:	03 c0       	rjmp	.+6      	; 0xe186 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    e180:	01 e0       	ldi	r16, 0x01	; 1
    e182:	21 e0       	ldi	r18, 0x01	; 1
    e184:	48 e7       	ldi	r20, 0x78	; 120
    e186:	60 e3       	ldi	r22, 0x30	; 48
    e188:	80 e0       	ldi	r24, 0x00	; 0
    e18a:	0e 94 ba 54 	call	0xa974	; 0xa974 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    e18e:	43 e3       	ldi	r20, 0x33	; 51
    e190:	5b e0       	ldi	r21, 0x0B	; 11
    e192:	65 e1       	ldi	r22, 0x15	; 21
    e194:	70 e0       	ldi	r23, 0x00	; 0
    e196:	86 e0       	ldi	r24, 0x06	; 6
    e198:	90 e0       	ldi	r25, 0x00	; 0
    e19a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    e19e:	28 81       	ld	r18, Y
    e1a0:	39 81       	ldd	r19, Y+1	; 0x01
    e1a2:	21 15       	cp	r18, r1
    e1a4:	31 05       	cpc	r19, r1
    e1a6:	21 f0       	breq	.+8      	; 0xe1b0 <update_splash+0x58>
    e1a8:	10 92 35 0b 	sts	0x0B35, r1
    e1ac:	10 92 34 0b 	sts	0x0B34, r1
	
	if (p1->pressed & BTN_UP)
    e1b0:	24 ff       	sbrs	r18, 4
    e1b2:	0e c0       	rjmp	.+28     	; 0xe1d0 <update_splash+0x78>
	{
		game.selection--;
    e1b4:	80 91 18 0c 	lds	r24, 0x0C18
    e1b8:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    e1ba:	87 ff       	sbrs	r24, 7
    e1bc:	11 c0       	rjmp	.+34     	; 0xe1e0 <update_splash+0x88>
    e1be:	10 92 18 0c 	sts	0x0C18, r1
		SFX_NAVIGATE;
    e1c2:	2f ef       	ldi	r18, 0xFF	; 255
    e1c4:	47 e1       	ldi	r20, 0x17	; 23
    e1c6:	65 e0       	ldi	r22, 0x05	; 5
    e1c8:	84 e0       	ldi	r24, 0x04	; 4
    e1ca:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
    e1ce:	91 c0       	rjmp	.+290    	; 0xe2f2 <update_splash+0x19a>
	}
	else if (p1->pressed & BTN_DOWN)
    e1d0:	25 ff       	sbrs	r18, 5
    e1d2:	09 c0       	rjmp	.+18     	; 0xe1e6 <update_splash+0x8e>
	{
		game.selection++;
    e1d4:	80 91 18 0c 	lds	r24, 0x0C18
    e1d8:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    e1da:	83 30       	cpi	r24, 0x03	; 3
    e1dc:	0c f0       	brlt	.+2      	; 0xe1e0 <update_splash+0x88>
    e1de:	82 e0       	ldi	r24, 0x02	; 2
    e1e0:	80 93 18 0c 	sts	0x0C18, r24
    e1e4:	ee cf       	rjmp	.-36     	; 0xe1c2 <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    e1e6:	ce 01       	movw	r24, r28
    e1e8:	0e 94 ab 68 	call	0xd156	; 0xd156 <select_pressed>
    e1ec:	88 23       	and	r24, r24
    e1ee:	a1 f1       	breq	.+104    	; 0xe258 <update_splash+0x100>
    e1f0:	80 91 18 0c 	lds	r24, 0x0C18
    e1f4:	82 30       	cpi	r24, 0x02	; 2
    e1f6:	c8 f4       	brcc	.+50     	; 0xe22a <update_splash+0xd2>
	{
		demo_counter = 0;
    e1f8:	10 92 35 0b 	sts	0x0B35, r1
    e1fc:	10 92 34 0b 	sts	0x0B34, r1
		p1s.select_state = SELECTING;
    e200:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    e204:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    e208:	2f ef       	ldi	r18, 0xFF	; 255
    e20a:	47 e1       	ldi	r20, 0x17	; 23
    e20c:	65 e0       	ldi	r22, 0x05	; 5
    e20e:	84 e0       	ldi	r24, 0x04	; 4
    e210:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		fade_through();
    e214:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
		load_eeprom(&handles);
    e218:	8c ee       	ldi	r24, 0xEC	; 236
    e21a:	9b e0       	ldi	r25, 0x0B	; 11
    e21c:	0e 94 e5 59 	call	0xb3ca	; 0xb3ca <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    e220:	df 91       	pop	r29
    e222:	cf 91       	pop	r28
    e224:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    e226:	0c 94 27 70 	jmp	0xe04e	; 0xe04e <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    e22a:	82 30       	cpi	r24, 0x02	; 2
    e22c:	a9 f4       	brne	.+42     	; 0xe258 <update_splash+0x100>
	{
		demo_counter = 0;
    e22e:	10 92 35 0b 	sts	0x0B35, r1
    e232:	10 92 34 0b 	sts	0x0B34, r1
		SFX_NAVIGATE;
    e236:	2f ef       	ldi	r18, 0xFF	; 255
    e238:	47 e1       	ldi	r20, 0x17	; 23
    e23a:	65 e0       	ldi	r22, 0x05	; 5
    e23c:	84 e0       	ldi	r24, 0x04	; 4
    e23e:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
		fade_through();
    e242:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
		load_eeprom(&scores);
    e246:	85 ec       	ldi	r24, 0xC5	; 197
    e248:	9b e0       	ldi	r25, 0x0B	; 11
    e24a:	0e 94 e5 59 	call	0xb3ca	; 0xb3ca <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    e24e:	df 91       	pop	r29
    e250:	cf 91       	pop	r28
    e252:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    e254:	0c 94 b5 68 	jmp	0xd16a	; 0xd16a <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    e258:	80 91 34 0b 	lds	r24, 0x0B34
    e25c:	90 91 35 0b 	lds	r25, 0x0B35
    e260:	88 35       	cpi	r24, 0x58	; 88
    e262:	92 40       	sbci	r25, 0x02	; 2
    e264:	08 f4       	brcc	.+2      	; 0xe268 <update_splash+0x110>
    e266:	45 c0       	rjmp	.+138    	; 0xe2f2 <update_splash+0x19a>
	{
		demo_counter = 0;
    e268:	10 92 35 0b 	sts	0x0B35, r1
    e26c:	10 92 34 0b 	sts	0x0B34, r1
		if (demo_choice % 2 == 0)
    e270:	80 91 33 0b 	lds	r24, 0x0B33
    e274:	80 fd       	sbrc	r24, 0
    e276:	29 c0       	rjmp	.+82     	; 0xe2ca <update_splash+0x172>
		{
			game.selection = CPUVCPU;
    e278:	83 e0       	ldi	r24, 0x03	; 3
    e27a:	80 93 18 0c 	sts	0x0C18, r24
			player1.handle_id = 9;
    e27e:	c9 e0       	ldi	r28, 0x09	; 9
    e280:	c0 93 41 0c 	sts	0x0C41, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    e284:	43 e0       	ldi	r20, 0x03	; 3
    e286:	69 e0       	ldi	r22, 0x09	; 9
    e288:	7c e0       	ldi	r23, 0x0C	; 12
    e28a:	82 e4       	ldi	r24, 0x42	; 66
    e28c:	9c e0       	ldi	r25, 0x0C	; 12
    e28e:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
			player2.handle_id = 9;
    e292:	c0 93 af 0f 	sts	0x0FAF, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    e296:	43 e0       	ldi	r20, 0x03	; 3
    e298:	69 e0       	ldi	r22, 0x09	; 9
    e29a:	7c e0       	ldi	r23, 0x0C	; 12
    e29c:	80 eb       	ldi	r24, 0xB0	; 176
    e29e:	9f e0       	ldi	r25, 0x0F	; 15
    e2a0:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
			SFX_NAVIGATE;
    e2a4:	2f ef       	ldi	r18, 0xFF	; 255
    e2a6:	47 e1       	ldi	r20, 0x17	; 23
    e2a8:	65 e0       	ldi	r22, 0x05	; 5
    e2aa:	84 e0       	ldi	r24, 0x04	; 4
    e2ac:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
			clear_sprites();
    e2b0:	0e 94 01 5a 	call	0xb402	; 0xb402 <clear_sprites>
			fade_through();
    e2b4:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
			level_transition(LBRandom(0, 10));
    e2b8:	6a e0       	ldi	r22, 0x0A	; 10
    e2ba:	70 e0       	ldi	r23, 0x00	; 0
    e2bc:	80 e0       	ldi	r24, 0x00	; 0
    e2be:	90 e0       	ldi	r25, 0x00	; 0
    e2c0:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    e2c4:	0e 94 8a 66 	call	0xcd14	; 0xcd14 <level_transition>
    e2c8:	0e c0       	rjmp	.+28     	; 0xe2e6 <update_splash+0x18e>
		}
		else
		{
			SFX_NAVIGATE;
    e2ca:	2f ef       	ldi	r18, 0xFF	; 255
    e2cc:	47 e1       	ldi	r20, 0x17	; 23
    e2ce:	65 e0       	ldi	r22, 0x05	; 5
    e2d0:	84 e0       	ldi	r24, 0x04	; 4
    e2d2:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <TriggerNote>
			fade_through();
    e2d6:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <fade_through>
			load_eeprom(&scores);
    e2da:	85 ec       	ldi	r24, 0xC5	; 197
    e2dc:	9b e0       	ldi	r25, 0x0B	; 11
    e2de:	0e 94 e5 59 	call	0xb3ca	; 0xb3ca <load_eeprom>
			load_tank_rank();
    e2e2:	0e 94 b5 68 	call	0xd16a	; 0xd16a <load_tank_rank>
		}
		demo_choice++;
    e2e6:	80 91 33 0b 	lds	r24, 0x0B33
    e2ea:	8f 5f       	subi	r24, 0xFF	; 255
    e2ec:	80 93 33 0b 	sts	0x0B33, r24
		return;
    e2f0:	09 c0       	rjmp	.+18     	; 0xe304 <update_splash+0x1ac>
		
	}
	demo_counter++;
    e2f2:	80 91 34 0b 	lds	r24, 0x0B34
    e2f6:	90 91 35 0b 	lds	r25, 0x0B35
    e2fa:	01 96       	adiw	r24, 0x01	; 1
    e2fc:	90 93 35 0b 	sts	0x0B35, r25
    e300:	80 93 34 0b 	sts	0x0B34, r24
}
    e304:	df 91       	pop	r29
    e306:	cf 91       	pop	r28
    e308:	0f 91       	pop	r16
    e30a:	08 95       	ret

0000e30c <update_handle_select>:
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    e30c:	0f 93       	push	r16
    e30e:	1f 93       	push	r17
    e310:	cf 93       	push	r28
    e312:	df 93       	push	r29
    e314:	8c 01       	movw	r16, r24
    e316:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    e318:	26 e0       	ldi	r18, 0x06	; 6
    e31a:	42 e0       	ldi	r20, 0x02	; 2
    e31c:	bc 01       	movw	r22, r24
    e31e:	8a e2       	ldi	r24, 0x2A	; 42
    e320:	9b e0       	ldi	r25, 0x0B	; 11
    e322:	0e 94 69 6f 	call	0xded2	; 0xded2 <_handle_select_render_helper>
	if (game.selection == PVP)
    e326:	80 91 18 0c 	lds	r24, 0x0C18
    e32a:	81 30       	cpi	r24, 0x01	; 1
    e32c:	39 f4       	brne	.+14     	; 0xe33c <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    e32e:	28 e0       	ldi	r18, 0x08	; 8
    e330:	43 e1       	ldi	r20, 0x13	; 19
    e332:	be 01       	movw	r22, r28
    e334:	84 e2       	ldi	r24, 0x24	; 36
    e336:	9b e0       	ldi	r25, 0x0B	; 11
    e338:	0e 94 69 6f 	call	0xded2	; 0xded2 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    e33c:	46 e3       	ldi	r20, 0x36	; 54
    e33e:	5c e0       	ldi	r21, 0x0C	; 12
    e340:	b8 01       	movw	r22, r16
    e342:	8a e2       	ldi	r24, 0x2A	; 42
    e344:	9b e0       	ldi	r25, 0x0B	; 11
    e346:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    e34a:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    e34e:	80 91 18 0c 	lds	r24, 0x0C18
    e352:	81 30       	cpi	r24, 0x01	; 1
    e354:	19 f0       	breq	.+6      	; 0xe35c <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    e356:	12 30       	cpi	r17, 0x02	; 2
    e358:	69 f0       	breq	.+26     	; 0xe374 <update_handle_select+0x68>
    e35a:	21 c0       	rjmp	.+66     	; 0xe39e <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    e35c:	44 ea       	ldi	r20, 0xA4	; 164
    e35e:	5f e0       	ldi	r21, 0x0F	; 15
    e360:	be 01       	movw	r22, r28
    e362:	84 e2       	ldi	r24, 0x24	; 36
    e364:	9b e0       	ldi	r25, 0x0B	; 11
    e366:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    e36a:	80 91 29 0b 	lds	r24, 0x0B29
    e36e:	82 30       	cpi	r24, 0x02	; 2
    e370:	b1 f4       	brne	.+44     	; 0xe39e <update_handle_select+0x92>
    e372:	f1 cf       	rjmp	.-30     	; 0xe356 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    e374:	80 91 18 0c 	lds	r24, 0x0C18
    e378:	81 11       	cpse	r24, r1
    e37a:	0a c0       	rjmp	.+20     	; 0xe390 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    e37c:	89 e0       	ldi	r24, 0x09	; 9
    e37e:	80 93 af 0f 	sts	0x0FAF, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    e382:	43 e0       	ldi	r20, 0x03	; 3
    e384:	69 e0       	ldi	r22, 0x09	; 9
    e386:	7c e0       	ldi	r23, 0x0C	; 12
    e388:	80 eb       	ldi	r24, 0xB0	; 176
    e38a:	9f e0       	ldi	r25, 0x0F	; 15
    e38c:	0e 94 c0 56 	call	0xad80	; 0xad80 <LBCopyChars>
		}
		level_transition(0);
    e390:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    e392:	df 91       	pop	r29
    e394:	cf 91       	pop	r28
    e396:	1f 91       	pop	r17
    e398:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    e39a:	0c 94 8a 66 	jmp	0xcd14	; 0xcd14 <level_transition>
	}
}
    e39e:	df 91       	pop	r29
    e3a0:	cf 91       	pop	r28
    e3a2:	1f 91       	pop	r17
    e3a4:	0f 91       	pop	r16
    e3a6:	08 95       	ret

0000e3a8 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    e3a8:	00 97       	sbiw	r24, 0x00	; 0
    e3aa:	41 f0       	breq	.+16     	; 0xe3bc <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    e3ac:	81 30       	cpi	r24, 0x01	; 1
    e3ae:	91 05       	cpc	r25, r1
    e3b0:	41 f0       	breq	.+16     	; 0xe3c2 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    e3b2:	82 30       	cpi	r24, 0x02	; 2
    e3b4:	91 05       	cpc	r25, r1
    e3b6:	41 f0       	breq	.+16     	; 0xe3c8 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    e3b8:	03 97       	sbiw	r24, 0x03	; 3
    e3ba:	49 f0       	breq	.+18     	; 0xe3ce <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    e3bc:	80 e1       	ldi	r24, 0x10	; 16
    e3be:	90 e0       	ldi	r25, 0x00	; 0
    e3c0:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    e3c2:	80 e2       	ldi	r24, 0x20	; 32
    e3c4:	90 e0       	ldi	r25, 0x00	; 0
    e3c6:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    e3c8:	80 e4       	ldi	r24, 0x40	; 64
    e3ca:	90 e0       	ldi	r25, 0x00	; 0
    e3cc:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    e3ce:	80 e8       	ldi	r24, 0x80	; 128
    e3d0:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    e3d2:	08 95       	ret

0000e3d4 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    e3d4:	8f 92       	push	r8
    e3d6:	9f 92       	push	r9
    e3d8:	af 92       	push	r10
    e3da:	bf 92       	push	r11
    e3dc:	cf 92       	push	r12
    e3de:	df 92       	push	r13
    e3e0:	ef 92       	push	r14
    e3e2:	ff 92       	push	r15
    e3e4:	0f 93       	push	r16
    e3e6:	1f 93       	push	r17
    e3e8:	cf 93       	push	r28
    e3ea:	df 93       	push	r29
    e3ec:	f8 2e       	mov	r15, r24
    e3ee:	e6 2e       	mov	r14, r22
    e3f0:	d4 2e       	mov	r13, r20
    e3f2:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    e3f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e3f6:	88 23       	and	r24, r24
    e3f8:	09 f4       	brne	.+2      	; 0xe3fc <crash_and_turn+0x28>
    e3fa:	a8 c0       	rjmp	.+336    	; 0xe54c <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    e3fc:	f8 01       	movw	r30, r16
    e3fe:	c4 80       	ldd	r12, Z+4	; 0x04
    e400:	c4 fe       	sbrs	r12, 4
    e402:	23 c0       	rjmp	.+70     	; 0xe44a <crash_and_turn+0x76>
    e404:	fe e1       	ldi	r31, 0x1E	; 30
    e406:	6f 02       	muls	r22, r31
    e408:	40 01       	movw	r8, r0
    e40a:	11 24       	eor	r1, r1
    e40c:	af 2c       	mov	r10, r15
    e40e:	bb 24       	eor	r11, r11
    e410:	a7 fc       	sbrc	r10, 7
    e412:	b0 94       	com	r11
    e414:	c4 01       	movw	r24, r8
    e416:	8a 0d       	add	r24, r10
    e418:	9b 1d       	adc	r25, r11
    e41a:	01 97       	sbiw	r24, 0x01	; 1
    e41c:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e420:	81 11       	cpse	r24, r1
    e422:	13 c0       	rjmp	.+38     	; 0xe44a <crash_and_turn+0x76>
    e424:	c4 01       	movw	r24, r8
    e426:	8a 0d       	add	r24, r10
    e428:	9b 1d       	adc	r25, r11
    e42a:	4d 96       	adiw	r24, 0x1d	; 29
    e42c:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e430:	81 11       	cpse	r24, r1
    e432:	0b c0       	rjmp	.+22     	; 0xe44a <crash_and_turn+0x76>
    e434:	c4 01       	movw	r24, r8
    e436:	8a 0d       	add	r24, r10
    e438:	9b 1d       	adc	r25, r11
    e43a:	cb 96       	adiw	r24, 0x3b	; 59
    e43c:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e440:	81 11       	cpse	r24, r1
    e442:	03 c0       	rjmp	.+6      	; 0xe44a <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    e444:	80 e4       	ldi	r24, 0x40	; 64
    e446:	90 e0       	ldi	r25, 0x00	; 0
    e448:	6f c0       	rjmp	.+222    	; 0xe528 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    e44a:	c6 fe       	sbrs	r12, 6
    e44c:	23 c0       	rjmp	.+70     	; 0xe494 <crash_and_turn+0xc0>
    e44e:	8e 2d       	mov	r24, r14
    e450:	99 27       	eor	r25, r25
    e452:	87 fd       	sbrc	r24, 7
    e454:	90 95       	com	r25
    e456:	02 96       	adiw	r24, 0x02	; 2
    e458:	2e e1       	ldi	r18, 0x1E	; 30
    e45a:	28 9f       	mul	r18, r24
    e45c:	50 01       	movw	r10, r0
    e45e:	29 9f       	mul	r18, r25
    e460:	b0 0c       	add	r11, r0
    e462:	11 24       	eor	r1, r1
    e464:	af 0c       	add	r10, r15
    e466:	b1 1c       	adc	r11, r1
    e468:	f7 fc       	sbrc	r15, 7
    e46a:	ba 94       	dec	r11
    e46c:	c5 01       	movw	r24, r10
    e46e:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e472:	81 11       	cpse	r24, r1
    e474:	0f c0       	rjmp	.+30     	; 0xe494 <crash_and_turn+0xc0>
    e476:	c5 01       	movw	r24, r10
    e478:	01 96       	adiw	r24, 0x01	; 1
    e47a:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e47e:	81 11       	cpse	r24, r1
    e480:	09 c0       	rjmp	.+18     	; 0xe494 <crash_and_turn+0xc0>
    e482:	c5 01       	movw	r24, r10
    e484:	02 96       	adiw	r24, 0x02	; 2
    e486:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e48a:	81 11       	cpse	r24, r1
    e48c:	03 c0       	rjmp	.+6      	; 0xe494 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    e48e:	80 e2       	ldi	r24, 0x20	; 32
    e490:	90 e0       	ldi	r25, 0x00	; 0
    e492:	4a c0       	rjmp	.+148    	; 0xe528 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    e494:	c5 fe       	sbrs	r12, 5
    e496:	24 c0       	rjmp	.+72     	; 0xe4e0 <crash_and_turn+0x10c>
    e498:	fe 2d       	mov	r31, r14
    e49a:	8e e1       	ldi	r24, 0x1E	; 30
    e49c:	f8 02       	muls	r31, r24
    e49e:	40 01       	movw	r8, r0
    e4a0:	11 24       	eor	r1, r1
    e4a2:	af 2c       	mov	r10, r15
    e4a4:	bb 24       	eor	r11, r11
    e4a6:	a7 fc       	sbrc	r10, 7
    e4a8:	b0 94       	com	r11
    e4aa:	c4 01       	movw	r24, r8
    e4ac:	8a 0d       	add	r24, r10
    e4ae:	9b 1d       	adc	r25, r11
    e4b0:	02 96       	adiw	r24, 0x02	; 2
    e4b2:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e4b6:	81 11       	cpse	r24, r1
    e4b8:	13 c0       	rjmp	.+38     	; 0xe4e0 <crash_and_turn+0x10c>
    e4ba:	c4 01       	movw	r24, r8
    e4bc:	8a 0d       	add	r24, r10
    e4be:	9b 1d       	adc	r25, r11
    e4c0:	80 96       	adiw	r24, 0x20	; 32
    e4c2:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e4c6:	81 11       	cpse	r24, r1
    e4c8:	0b c0       	rjmp	.+22     	; 0xe4e0 <crash_and_turn+0x10c>
    e4ca:	c4 01       	movw	r24, r8
    e4cc:	8a 0d       	add	r24, r10
    e4ce:	9b 1d       	adc	r25, r11
    e4d0:	ce 96       	adiw	r24, 0x3e	; 62
    e4d2:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e4d6:	81 11       	cpse	r24, r1
    e4d8:	03 c0       	rjmp	.+6      	; 0xe4e0 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    e4da:	80 e8       	ldi	r24, 0x80	; 128
    e4dc:	90 e0       	ldi	r25, 0x00	; 0
    e4de:	24 c0       	rjmp	.+72     	; 0xe528 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    e4e0:	c7 fe       	sbrs	r12, 7
    e4e2:	29 c0       	rjmp	.+82     	; 0xe536 <crash_and_turn+0x162>
    e4e4:	8e 2d       	mov	r24, r14
    e4e6:	99 27       	eor	r25, r25
    e4e8:	87 fd       	sbrc	r24, 7
    e4ea:	90 95       	com	r25
    e4ec:	01 97       	sbiw	r24, 0x01	; 1
    e4ee:	2e e1       	ldi	r18, 0x1E	; 30
    e4f0:	28 9f       	mul	r18, r24
    e4f2:	50 01       	movw	r10, r0
    e4f4:	29 9f       	mul	r18, r25
    e4f6:	b0 0c       	add	r11, r0
    e4f8:	11 24       	eor	r1, r1
    e4fa:	af 0c       	add	r10, r15
    e4fc:	b1 1c       	adc	r11, r1
    e4fe:	f7 fc       	sbrc	r15, 7
    e500:	ba 94       	dec	r11
    e502:	c5 01       	movw	r24, r10
    e504:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e508:	81 11       	cpse	r24, r1
    e50a:	15 c0       	rjmp	.+42     	; 0xe536 <crash_and_turn+0x162>
    e50c:	c5 01       	movw	r24, r10
    e50e:	01 96       	adiw	r24, 0x01	; 1
    e510:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e514:	81 11       	cpse	r24, r1
    e516:	0f c0       	rjmp	.+30     	; 0xe536 <crash_and_turn+0x162>
    e518:	c5 01       	movw	r24, r10
    e51a:	02 96       	adiw	r24, 0x02	; 2
    e51c:	0e 94 ed 5d 	call	0xbbda	; 0xbbda <solid_tile>
    e520:	81 11       	cpse	r24, r1
    e522:	09 c0       	rjmp	.+18     	; 0xe536 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    e524:	80 e1       	ldi	r24, 0x10	; 16
    e526:	90 e0       	ldi	r25, 0x00	; 0
    e528:	f8 01       	movw	r30, r16
    e52a:	95 83       	std	Z+5, r25	; 0x05
    e52c:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    e52e:	ce 01       	movw	r24, r28
    e530:	0e 94 2b 5d 	call	0xba56	; 0xba56 <recoil_sprite>
			recoiled = 0;
    e534:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    e536:	f8 01       	movw	r30, r16
    e538:	24 81       	ldd	r18, Z+4	; 0x04
    e53a:	35 81       	ldd	r19, Z+5	; 0x05
    e53c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    e53e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    e540:	82 23       	and	r24, r18
    e542:	93 23       	and	r25, r19
    e544:	89 2b       	or	r24, r25
    e546:	11 f0       	breq	.+4      	; 0xe54c <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    e548:	1b 8e       	std	Y+27, r1	; 0x1b
    e54a:	1c c0       	rjmp	.+56     	; 0xe584 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    e54c:	dd 20       	and	r13, r13
    e54e:	d1 f0       	breq	.+52     	; 0xe584 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    e550:	f8 01       	movw	r30, r16
    e552:	84 81       	ldd	r24, Z+4	; 0x04
    e554:	86 ff       	sbrs	r24, 6
    e556:	03 c0       	rjmp	.+6      	; 0xe55e <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    e558:	80 e1       	ldi	r24, 0x10	; 16
    e55a:	90 e0       	ldi	r25, 0x00	; 0
    e55c:	0f c0       	rjmp	.+30     	; 0xe57c <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    e55e:	84 ff       	sbrs	r24, 4
    e560:	03 c0       	rjmp	.+6      	; 0xe568 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    e562:	80 e8       	ldi	r24, 0x80	; 128
    e564:	90 e0       	ldi	r25, 0x00	; 0
    e566:	09 c0       	rjmp	.+18     	; 0xe57a <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    e568:	87 ff       	sbrs	r24, 7
    e56a:	03 c0       	rjmp	.+6      	; 0xe572 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    e56c:	80 e2       	ldi	r24, 0x20	; 32
    e56e:	90 e0       	ldi	r25, 0x00	; 0
    e570:	04 c0       	rjmp	.+8      	; 0xe57a <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    e572:	85 ff       	sbrs	r24, 5
    e574:	07 c0       	rjmp	.+14     	; 0xe584 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    e576:	80 e4       	ldi	r24, 0x40	; 64
    e578:	90 e0       	ldi	r25, 0x00	; 0
    e57a:	f8 01       	movw	r30, r16
    e57c:	95 83       	std	Z+5, r25	; 0x05
    e57e:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    e580:	81 e0       	ldi	r24, 0x01	; 1
    e582:	8b 8f       	std	Y+27, r24	; 0x1b
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    e584:	8c 8d       	ldd	r24, Y+28	; 0x1c
    e586:	9d 8d       	ldd	r25, Y+29	; 0x1d
    e588:	80 31       	cpi	r24, 0x10	; 16
    e58a:	91 05       	cpc	r25, r1
    e58c:	19 f0       	breq	.+6      	; 0xe594 <crash_and_turn+0x1c0>
    e58e:	80 32       	cpi	r24, 0x20	; 32
    e590:	91 05       	cpc	r25, r1
    e592:	19 f4       	brne	.+6      	; 0xe59a <crash_and_turn+0x1c6>
    e594:	2a a1       	ldd	r18, Y+34	; 0x22
    e596:	e2 16       	cp	r14, r18
    e598:	59 f0       	breq	.+22     	; 0xe5b0 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    e59a:	80 34       	cpi	r24, 0x40	; 64
    e59c:	91 05       	cpc	r25, r1
    e59e:	19 f0       	breq	.+6      	; 0xe5a6 <crash_and_turn+0x1d2>
    e5a0:	80 38       	cpi	r24, 0x80	; 128
    e5a2:	91 05       	cpc	r25, r1
    e5a4:	39 f4       	brne	.+14     	; 0xe5b4 <crash_and_turn+0x1e0>
    e5a6:	81 e0       	ldi	r24, 0x01	; 1
    e5a8:	9a a1       	ldd	r25, Y+34	; 0x22
    e5aa:	f9 12       	cpse	r15, r25
    e5ac:	03 c0       	rjmp	.+6      	; 0xe5b4 <crash_and_turn+0x1e0>
    e5ae:	03 c0       	rjmp	.+6      	; 0xe5b6 <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    e5b0:	81 e0       	ldi	r24, 0x01	; 1
    e5b2:	01 c0       	rjmp	.+2      	; 0xe5b6 <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    e5b4:	80 e0       	ldi	r24, 0x00	; 0
}
    e5b6:	df 91       	pop	r29
    e5b8:	cf 91       	pop	r28
    e5ba:	1f 91       	pop	r17
    e5bc:	0f 91       	pop	r16
    e5be:	ff 90       	pop	r15
    e5c0:	ef 90       	pop	r14
    e5c2:	df 90       	pop	r13
    e5c4:	cf 90       	pop	r12
    e5c6:	bf 90       	pop	r11
    e5c8:	af 90       	pop	r10
    e5ca:	9f 90       	pop	r9
    e5cc:	8f 90       	pop	r8
    e5ce:	08 95       	ret

0000e5d0 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    e5d0:	48 2f       	mov	r20, r24
    e5d2:	55 27       	eor	r21, r21
    e5d4:	47 fd       	sbrc	r20, 7
    e5d6:	50 95       	com	r21
    e5d8:	57 ff       	sbrs	r21, 7
    e5da:	03 c0       	rjmp	.+6      	; 0xe5e2 <get_cpu_goal_direction+0x12>
    e5dc:	51 95       	neg	r21
    e5de:	41 95       	neg	r20
    e5e0:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    e5e2:	26 2f       	mov	r18, r22
    e5e4:	33 27       	eor	r19, r19
    e5e6:	27 fd       	sbrc	r18, 7
    e5e8:	30 95       	com	r19
    e5ea:	37 ff       	sbrs	r19, 7
    e5ec:	03 c0       	rjmp	.+6      	; 0xe5f4 <get_cpu_goal_direction+0x24>
    e5ee:	31 95       	neg	r19
    e5f0:	21 95       	neg	r18
    e5f2:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    e5f4:	24 17       	cp	r18, r20
    e5f6:	2c f4       	brge	.+10     	; 0xe602 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    e5f8:	18 16       	cp	r1, r24
    e5fa:	44 f4       	brge	.+16     	; 0xe60c <get_cpu_goal_direction+0x3c>
    e5fc:	80 e8       	ldi	r24, 0x80	; 128
    e5fe:	90 e0       	ldi	r25, 0x00	; 0
    e600:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    e602:	16 16       	cp	r1, r22
    e604:	34 f4       	brge	.+12     	; 0xe612 <get_cpu_goal_direction+0x42>
    e606:	80 e2       	ldi	r24, 0x20	; 32
    e608:	90 e0       	ldi	r25, 0x00	; 0
    e60a:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    e60c:	80 e4       	ldi	r24, 0x40	; 64
    e60e:	90 e0       	ldi	r25, 0x00	; 0
    e610:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    e612:	80 e1       	ldi	r24, 0x10	; 16
    e614:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    e616:	08 95       	ret

0000e618 <evade>:

void evade(Player* player, JoyPadState* p)
{	
	p->held = BTN_UP;
    e618:	20 e1       	ldi	r18, 0x10	; 16
    e61a:	30 e0       	ldi	r19, 0x00	; 0
    e61c:	fb 01       	movw	r30, r22
    e61e:	35 83       	std	Z+5, r19	; 0x05
    e620:	24 83       	std	Z+4, r18	; 0x04
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    e622:	fc 01       	movw	r30, r24
    e624:	80 81       	ld	r24, Z
    e626:	8d 7f       	andi	r24, 0xFD	; 253
    e628:	29 f4       	brne	.+10     	; 0xe634 <evade+0x1c>
	{
		p->held = BTN_LEFT;
    e62a:	80 e4       	ldi	r24, 0x40	; 64
    e62c:	90 e0       	ldi	r25, 0x00	; 0
    e62e:	fb 01       	movw	r30, r22
    e630:	95 83       	std	Z+5, r25	; 0x05
    e632:	84 83       	std	Z+4, r24	; 0x04
    e634:	08 95       	ret

0000e636 <get_cpu_joypad_state>:
	}
}

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    e636:	2f 92       	push	r2
    e638:	3f 92       	push	r3
    e63a:	4f 92       	push	r4
    e63c:	5f 92       	push	r5
    e63e:	6f 92       	push	r6
    e640:	7f 92       	push	r7
    e642:	8f 92       	push	r8
    e644:	9f 92       	push	r9
    e646:	af 92       	push	r10
    e648:	bf 92       	push	r11
    e64a:	cf 92       	push	r12
    e64c:	df 92       	push	r13
    e64e:	ef 92       	push	r14
    e650:	ff 92       	push	r15
    e652:	0f 93       	push	r16
    e654:	1f 93       	push	r17
    e656:	cf 93       	push	r28
    e658:	df 93       	push	r29
    e65a:	cd b7       	in	r28, 0x3d	; 61
    e65c:	de b7       	in	r29, 0x3e	; 62
    e65e:	2c 97       	sbiw	r28, 0x0c	; 12
    e660:	0f b6       	in	r0, 0x3f	; 63
    e662:	f8 94       	cli
    e664:	de bf       	out	0x3e, r29	; 62
    e666:	0f be       	out	0x3f, r0	; 63
    e668:	cd bf       	out	0x3d, r28	; 61
    e66a:	5c 01       	movw	r10, r24
    e66c:	fb 01       	movw	r30, r22
	char goal_y;
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	int bdx = other_player->shot[0].shared.x - player->shared.x;
    e66e:	67 a5       	ldd	r22, Z+47	; 0x2f
    e670:	70 a9       	ldd	r23, Z+48	; 0x30
    e672:	81 a9       	ldd	r24, Z+49	; 0x31
    e674:	92 a9       	ldd	r25, Z+50	; 0x32
    e676:	d5 01       	movw	r26, r10
    e678:	13 96       	adiw	r26, 0x03	; 3
    e67a:	cd 90       	ld	r12, X+
    e67c:	dd 90       	ld	r13, X+
    e67e:	ed 90       	ld	r14, X+
    e680:	fc 90       	ld	r15, X
    e682:	16 97       	sbiw	r26, 0x06	; 6
	int bdy = other_player->shot[0].shared.y - player->shared.y;
    e684:	03 a9       	ldd	r16, Z+51	; 0x33
    e686:	14 a9       	ldd	r17, Z+52	; 0x34
    e688:	25 a9       	ldd	r18, Z+53	; 0x35
    e68a:	36 a9       	ldd	r19, Z+54	; 0x36
    e68c:	09 83       	std	Y+1, r16	; 0x01
    e68e:	1a 83       	std	Y+2, r17	; 0x02
    e690:	2b 83       	std	Y+3, r18	; 0x03
    e692:	3c 83       	std	Y+4, r19	; 0x04
    e694:	17 96       	adiw	r26, 0x07	; 7
    e696:	4d 90       	ld	r4, X+
    e698:	5d 90       	ld	r5, X+
    e69a:	6d 90       	ld	r6, X+
    e69c:	7c 90       	ld	r7, X
    e69e:	1a 97       	sbiw	r26, 0x0a	; 10
	static u8 evade_delay = 0;
	
	goal_x = other_player->shared.x / 8;
    e6a0:	03 81       	ldd	r16, Z+3	; 0x03
    e6a2:	14 81       	ldd	r17, Z+4	; 0x04
    e6a4:	25 81       	ldd	r18, Z+5	; 0x05
    e6a6:	36 81       	ldd	r19, Z+6	; 0x06
    e6a8:	0d 83       	std	Y+5, r16	; 0x05
    e6aa:	1e 83       	std	Y+6, r17	; 0x06
    e6ac:	2f 83       	std	Y+7, r18	; 0x07
    e6ae:	38 87       	std	Y+8, r19	; 0x08
	goal_y = other_player->shared.y / 8 - 3;
    e6b0:	07 81       	ldd	r16, Z+7	; 0x07
    e6b2:	10 85       	ldd	r17, Z+8	; 0x08
    e6b4:	21 85       	ldd	r18, Z+9	; 0x09
    e6b6:	32 85       	ldd	r19, Z+10	; 0x0a
    e6b8:	09 87       	std	Y+9, r16	; 0x09
    e6ba:	1a 87       	std	Y+10, r17	; 0x0a
    e6bc:	2b 87       	std	Y+11, r18	; 0x0b
    e6be:	3c 87       	std	Y+12, r19	; 0x0c
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    e6c0:	57 96       	adiw	r26, 0x17	; 23
    e6c2:	2c 91       	ld	r18, X
    e6c4:	21 11       	cpse	r18, r1
    e6c6:	06 c0       	rjmp	.+12     	; 0xe6d4 <get_cpu_joypad_state+0x9e>
	{
		p->held = 0;
    e6c8:	da 01       	movw	r26, r20
    e6ca:	15 96       	adiw	r26, 0x05	; 5
    e6cc:	1c 92       	st	X, r1
    e6ce:	1e 92       	st	-X, r1
    e6d0:	14 97       	sbiw	r26, 0x04	; 4
		return;
    e6d2:	81 c1       	rjmp	.+770    	; 0xe9d6 <get_cpu_joypad_state+0x3a0>
	}
	
	// Take evasive action
	if (evade_delay) evade_delay --;
    e6d4:	20 91 30 0b 	lds	r18, 0x0B30
    e6d8:	22 23       	and	r18, r18
    e6da:	19 f0       	breq	.+6      	; 0xe6e2 <get_cpu_joypad_state+0xac>
    e6dc:	21 50       	subi	r18, 0x01	; 1
    e6de:	20 93 30 0b 	sts	0x0B30, r18
    e6e2:	8a 01       	movw	r16, r20
    e6e4:	15 01       	movw	r2, r10
	if (other_player->active_shots > 0 && ((bdx*bdx + bdy*bdy) < 800) && evade_delay == 0)
    e6e6:	21 89       	ldd	r18, Z+17	; 0x11
    e6e8:	22 23       	and	r18, r18
    e6ea:	81 f1       	breq	.+96     	; 0xe74c <get_cpu_joypad_state+0x116>
	char goal_y;
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	int bdx = other_player->shot[0].shared.x - player->shared.x;
    e6ec:	a7 01       	movw	r20, r14
    e6ee:	96 01       	movw	r18, r12
    e6f0:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    e6f4:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
    e6f8:	4b 01       	movw	r8, r22
    e6fa:	5c 01       	movw	r10, r24
	int bdy = other_player->shot[0].shared.y - player->shared.y;
    e6fc:	a3 01       	movw	r20, r6
    e6fe:	92 01       	movw	r18, r4
    e700:	69 81       	ldd	r22, Y+1	; 0x01
    e702:	7a 81       	ldd	r23, Y+2	; 0x02
    e704:	8b 81       	ldd	r24, Y+3	; 0x03
    e706:	9c 81       	ldd	r25, Y+4	; 0x04
    e708:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    e70c:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
		return;
	}
	
	// Take evasive action
	if (evade_delay) evade_delay --;
	if (other_player->active_shots > 0 && ((bdx*bdx + bdy*bdy) < 800) && evade_delay == 0)
    e710:	88 9c       	mul	r8, r8
    e712:	90 01       	movw	r18, r0
    e714:	89 9c       	mul	r8, r9
    e716:	30 0d       	add	r19, r0
    e718:	30 0d       	add	r19, r0
    e71a:	11 24       	eor	r1, r1
    e71c:	66 9f       	mul	r22, r22
    e71e:	a0 01       	movw	r20, r0
    e720:	67 9f       	mul	r22, r23
    e722:	50 0d       	add	r21, r0
    e724:	50 0d       	add	r21, r0
    e726:	11 24       	eor	r1, r1
    e728:	c9 01       	movw	r24, r18
    e72a:	84 0f       	add	r24, r20
    e72c:	95 1f       	adc	r25, r21
    e72e:	80 32       	cpi	r24, 0x20	; 32
    e730:	93 40       	sbci	r25, 0x03	; 3
    e732:	64 f4       	brge	.+24     	; 0xe74c <get_cpu_joypad_state+0x116>
    e734:	80 91 30 0b 	lds	r24, 0x0B30
    e738:	81 11       	cpse	r24, r1
    e73a:	08 c0       	rjmp	.+16     	; 0xe74c <get_cpu_joypad_state+0x116>
	{
		evade(player, p);
    e73c:	b8 01       	movw	r22, r16
    e73e:	c1 01       	movw	r24, r2
    e740:	0e 94 0c 73 	call	0xe618	; 0xe618 <evade>
		evade_delay = 0xff;
    e744:	8f ef       	ldi	r24, 0xFF	; 255
    e746:	80 93 30 0b 	sts	0x0B30, r24
		return;
    e74a:	45 c1       	rjmp	.+650    	; 0xe9d6 <get_cpu_joypad_state+0x3a0>
	}
	
	// Shot
	if (shoot_pressed(p))
    e74c:	c8 01       	movw	r24, r16
    e74e:	0e 94 87 5b 	call	0xb70e	; 0xb70e <shoot_pressed>
    e752:	88 23       	and	r24, r24
    e754:	19 f0       	breq	.+6      	; 0xe75c <get_cpu_joypad_state+0x126>
	{
		p->pressed = 0;
    e756:	f8 01       	movw	r30, r16
    e758:	11 82       	std	Z+1, r1	; 0x01
    e75a:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    e75c:	20 91 04 01 	lds	r18, 0x0104
    e760:	30 91 05 01 	lds	r19, 0x0105
    e764:	c9 01       	movw	r24, r18
    e766:	6a e0       	ldi	r22, 0x0A	; 10
    e768:	70 e0       	ldi	r23, 0x00	; 0
    e76a:	0e 94 a0 75 	call	0xeb40	; 0xeb40 <__udivmodhi4>
    e76e:	89 2b       	or	r24, r25
    e770:	51 f4       	brne	.+20     	; 0xe786 <get_cpu_joypad_state+0x150>
    e772:	d1 01       	movw	r26, r2
    e774:	57 96       	adiw	r26, 0x17	; 23
    e776:	8c 91       	ld	r24, X
    e778:	83 33       	cpi	r24, 0x33	; 51
    e77a:	28 f0       	brcs	.+10     	; 0xe786 <get_cpu_joypad_state+0x150>
	{
		p->pressed = BTN_B;
    e77c:	81 e0       	ldi	r24, 0x01	; 1
    e77e:	90 e0       	ldi	r25, 0x00	; 0
    e780:	f8 01       	movw	r30, r16
    e782:	91 83       	std	Z+1, r25	; 0x01
    e784:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    e786:	c9 01       	movw	r24, r18
    e788:	64 eb       	ldi	r22, 0xB4	; 180
    e78a:	70 e0       	ldi	r23, 0x00	; 0
    e78c:	0e 94 a0 75 	call	0xeb40	; 0xeb40 <__udivmodhi4>
    e790:	89 2b       	or	r24, r25
    e792:	59 f0       	breq	.+22     	; 0xe7aa <get_cpu_joypad_state+0x174>
    e794:	d1 01       	movw	r26, r2
    e796:	57 96       	adiw	r26, 0x17	; 23
    e798:	8c 91       	ld	r24, X
    e79a:	57 97       	sbiw	r26, 0x17	; 23
    e79c:	8a 30       	cpi	r24, 0x0A	; 10
    e79e:	29 f0       	breq	.+10     	; 0xe7aa <get_cpu_joypad_state+0x174>
    e7a0:	93 96       	adiw	r26, 0x23	; 35
    e7a2:	8c 91       	ld	r24, X
    e7a4:	88 23       	and	r24, r24
    e7a6:	09 f4       	brne	.+2      	; 0xe7aa <get_cpu_joypad_state+0x174>
    e7a8:	7a c0       	rjmp	.+244    	; 0xe89e <get_cpu_joypad_state+0x268>
	char player_y;
	int bdx = other_player->shot[0].shared.x - player->shared.x;
	int bdy = other_player->shot[0].shared.y - player->shared.y;
	static u8 evade_delay = 0;
	
	goal_x = other_player->shared.x / 8;
    e7aa:	20 e0       	ldi	r18, 0x00	; 0
    e7ac:	30 e0       	ldi	r19, 0x00	; 0
    e7ae:	40 e0       	ldi	r20, 0x00	; 0
    e7b0:	5e e3       	ldi	r21, 0x3E	; 62
    e7b2:	6d 81       	ldd	r22, Y+5	; 0x05
    e7b4:	7e 81       	ldd	r23, Y+6	; 0x06
    e7b6:	8f 81       	ldd	r24, Y+7	; 0x07
    e7b8:	98 85       	ldd	r25, Y+8	; 0x08
    e7ba:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e7be:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
    e7c2:	b6 2e       	mov	r11, r22
	goal_y = other_player->shared.y / 8 - 3;
    e7c4:	20 e0       	ldi	r18, 0x00	; 0
    e7c6:	30 e0       	ldi	r19, 0x00	; 0
    e7c8:	40 e0       	ldi	r20, 0x00	; 0
    e7ca:	5e e3       	ldi	r21, 0x3E	; 62
    e7cc:	69 85       	ldd	r22, Y+9	; 0x09
    e7ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    e7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    e7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    e7d4:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e7d8:	20 e0       	ldi	r18, 0x00	; 0
    e7da:	30 e0       	ldi	r19, 0x00	; 0
    e7dc:	40 e4       	ldi	r20, 0x40	; 64
    e7de:	50 e4       	ldi	r21, 0x40	; 64
    e7e0:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    e7e4:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
    e7e8:	a6 2e       	mov	r10, r22
	player_x = player->shared.x / 8;
    e7ea:	20 e0       	ldi	r18, 0x00	; 0
    e7ec:	30 e0       	ldi	r19, 0x00	; 0
    e7ee:	40 e0       	ldi	r20, 0x00	; 0
    e7f0:	5e e3       	ldi	r21, 0x3E	; 62
    e7f2:	c7 01       	movw	r24, r14
    e7f4:	b6 01       	movw	r22, r12
    e7f6:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e7fa:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    e7fe:	fb 2c       	mov	r15, r11
    e800:	f6 1a       	sub	r15, r22
	static u8 evade_delay = 0;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    e802:	20 e0       	ldi	r18, 0x00	; 0
    e804:	30 e0       	ldi	r19, 0x00	; 0
    e806:	40 e0       	ldi	r20, 0x00	; 0
    e808:	5e e3       	ldi	r21, 0x3E	; 62
    e80a:	c3 01       	movw	r24, r6
    e80c:	b2 01       	movw	r22, r4
    e80e:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e812:	20 e0       	ldi	r18, 0x00	; 0
    e814:	30 e0       	ldi	r19, 0x00	; 0
    e816:	40 e4       	ldi	r20, 0x40	; 64
    e818:	50 e4       	ldi	r21, 0x40	; 64
    e81a:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    e81e:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    e822:	ba 2d       	mov	r27, r10
    e824:	b6 1b       	sub	r27, r22
    e826:	6b 2f       	mov	r22, r27
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    e828:	f1 01       	movw	r30, r2
    e82a:	13 a2       	std	Z+35, r1	; 0x23
		player->feeling_my_way = 0;
    e82c:	13 8e       	std	Z+27, r1	; 0x1b
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    e82e:	82 e0       	ldi	r24, 0x02	; 2
    e830:	8f 0d       	add	r24, r15
    e832:	85 30       	cpi	r24, 0x05	; 5
    e834:	d0 f4       	brcc	.+52     	; 0xe86a <get_cpu_joypad_state+0x234>
    e836:	be 3f       	cpi	r27, 0xFE	; 254
    e838:	c4 f0       	brlt	.+48     	; 0xe86a <get_cpu_joypad_state+0x234>
    e83a:	b3 30       	cpi	r27, 0x03	; 3
    e83c:	b4 f4       	brge	.+44     	; 0xe86a <get_cpu_joypad_state+0x234>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    e83e:	64 e0       	ldi	r22, 0x04	; 4
    e840:	70 e0       	ldi	r23, 0x00	; 0
    e842:	80 e0       	ldi	r24, 0x00	; 0
    e844:	90 e0       	ldi	r25, 0x00	; 0
    e846:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    e84a:	0e 94 d4 71 	call	0xe3a8	; 0xe3a8 <button_map>
    e84e:	d1 01       	movw	r26, r2
    e850:	5d 96       	adiw	r26, 0x1d	; 29
    e852:	9c 93       	st	X, r25
    e854:	8e 93       	st	-X, r24
    e856:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = LBRandom(5, 18);
    e858:	62 e1       	ldi	r22, 0x12	; 18
    e85a:	70 e0       	ldi	r23, 0x00	; 0
    e85c:	85 e0       	ldi	r24, 0x05	; 5
    e85e:	90 e0       	ldi	r25, 0x00	; 0
    e860:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    e864:	f1 01       	movw	r30, r2
    e866:	82 a3       	std	Z+34, r24	; 0x22
    e868:	12 c0       	rjmp	.+36     	; 0xe88e <get_cpu_joypad_state+0x258>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    e86a:	8f 2d       	mov	r24, r15
    e86c:	0e 94 e8 72 	call	0xe5d0	; 0xe5d0 <get_cpu_goal_direction>
    e870:	d1 01       	movw	r26, r2
    e872:	5d 96       	adiw	r26, 0x1d	; 29
    e874:	9c 93       	st	X, r25
    e876:	8e 93       	st	-X, r24
    e878:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e87a:	80 31       	cpi	r24, 0x10	; 16
    e87c:	91 05       	cpc	r25, r1
    e87e:	29 f0       	breq	.+10     	; 0xe88a <get_cpu_joypad_state+0x254>
    e880:	80 97       	sbiw	r24, 0x20	; 32
    e882:	19 f0       	breq	.+6      	; 0xe88a <get_cpu_joypad_state+0x254>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    e884:	92 96       	adiw	r26, 0x22	; 34
    e886:	bc 92       	st	X, r11
    e888:	02 c0       	rjmp	.+4      	; 0xe88e <get_cpu_joypad_state+0x258>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e88a:	f1 01       	movw	r30, r2
    e88c:	a2 a2       	std	Z+34, r10	; 0x22
		}
		p->held = player->goal_direction;
    e88e:	d1 01       	movw	r26, r2
    e890:	5c 96       	adiw	r26, 0x1c	; 28
    e892:	8d 91       	ld	r24, X+
    e894:	9c 91       	ld	r25, X
    e896:	5d 97       	sbiw	r26, 0x1d	; 29
    e898:	f8 01       	movw	r30, r16
    e89a:	95 83       	std	Z+5, r25	; 0x05
    e89c:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    e89e:	d1 01       	movw	r26, r2
    e8a0:	13 96       	adiw	r26, 0x03	; 3
    e8a2:	cd 90       	ld	r12, X+
    e8a4:	dd 90       	ld	r13, X+
    e8a6:	ed 90       	ld	r14, X+
    e8a8:	fc 90       	ld	r15, X
    e8aa:	16 97       	sbiw	r26, 0x06	; 6
    e8ac:	94 96       	adiw	r26, 0x24	; 36
    e8ae:	2d 91       	ld	r18, X+
    e8b0:	3d 91       	ld	r19, X+
    e8b2:	4d 91       	ld	r20, X+
    e8b4:	5c 91       	ld	r21, X
    e8b6:	97 97       	sbiw	r26, 0x27	; 39
    e8b8:	c7 01       	movw	r24, r14
    e8ba:	b6 01       	movw	r22, r12
    e8bc:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    e8c0:	88 23       	and	r24, r24
    e8c2:	21 f0       	breq	.+8      	; 0xe8cc <get_cpu_joypad_state+0x296>
		player->deadlock_count_x = 0;
    e8c4:	f1 01       	movw	r30, r2
    e8c6:	17 8e       	std	Z+31, r1	; 0x1f
    e8c8:	16 8e       	std	Z+30, r1	; 0x1e
    e8ca:	0a c0       	rjmp	.+20     	; 0xe8e0 <get_cpu_joypad_state+0x2aa>
	else 
		player->deadlock_count_x++;
    e8cc:	d1 01       	movw	r26, r2
    e8ce:	5e 96       	adiw	r26, 0x1e	; 30
    e8d0:	8d 91       	ld	r24, X+
    e8d2:	9c 91       	ld	r25, X
    e8d4:	5f 97       	sbiw	r26, 0x1f	; 31
    e8d6:	01 96       	adiw	r24, 0x01	; 1
    e8d8:	5f 96       	adiw	r26, 0x1f	; 31
    e8da:	9c 93       	st	X, r25
    e8dc:	8e 93       	st	-X, r24
    e8de:	5e 97       	sbiw	r26, 0x1e	; 30
	if (player->shared.y != player->old_y)
    e8e0:	f1 01       	movw	r30, r2
    e8e2:	87 80       	ldd	r8, Z+7	; 0x07
    e8e4:	90 84       	ldd	r9, Z+8	; 0x08
    e8e6:	a1 84       	ldd	r10, Z+9	; 0x09
    e8e8:	b2 84       	ldd	r11, Z+10	; 0x0a
    e8ea:	20 a5       	ldd	r18, Z+40	; 0x28
    e8ec:	31 a5       	ldd	r19, Z+41	; 0x29
    e8ee:	42 a5       	ldd	r20, Z+42	; 0x2a
    e8f0:	53 a5       	ldd	r21, Z+43	; 0x2b
    e8f2:	c5 01       	movw	r24, r10
    e8f4:	b4 01       	movw	r22, r8
    e8f6:	0e 94 2d 76 	call	0xec5a	; 0xec5a <__cmpsf2>
    e8fa:	88 23       	and	r24, r24
    e8fc:	31 f0       	breq	.+12     	; 0xe90a <get_cpu_joypad_state+0x2d4>
		player->deadlock_count_y = 0;
    e8fe:	d1 01       	movw	r26, r2
    e900:	91 96       	adiw	r26, 0x21	; 33
    e902:	1c 92       	st	X, r1
    e904:	1e 92       	st	-X, r1
    e906:	90 97       	sbiw	r26, 0x20	; 32
    e908:	06 c0       	rjmp	.+12     	; 0xe916 <get_cpu_joypad_state+0x2e0>
	else
		player->deadlock_count_y++;
    e90a:	f1 01       	movw	r30, r2
    e90c:	80 a1       	ldd	r24, Z+32	; 0x20
    e90e:	91 a1       	ldd	r25, Z+33	; 0x21
    e910:	01 96       	adiw	r24, 0x01	; 1
    e912:	91 a3       	std	Z+33, r25	; 0x21
    e914:	80 a3       	std	Z+32, r24	; 0x20
	player->old_x = player->shared.x;
    e916:	d1 01       	movw	r26, r2
    e918:	94 96       	adiw	r26, 0x24	; 36
    e91a:	cd 92       	st	X+, r12
    e91c:	dd 92       	st	X+, r13
    e91e:	ed 92       	st	X+, r14
    e920:	fc 92       	st	X, r15
    e922:	97 97       	sbiw	r26, 0x27	; 39
	player->old_y = player->shared.y;
    e924:	f1 01       	movw	r30, r2
    e926:	80 a6       	std	Z+40, r8	; 0x28
    e928:	91 a6       	std	Z+41, r9	; 0x29
    e92a:	a2 a6       	std	Z+42, r10	; 0x2a
    e92c:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    e92e:	86 8d       	ldd	r24, Z+30	; 0x1e
    e930:	97 8d       	ldd	r25, Z+31	; 0x1f
    e932:	80 34       	cpi	r24, 0x40	; 64
    e934:	91 40       	sbci	r25, 0x01	; 1
    e936:	88 f0       	brcs	.+34     	; 0xe95a <get_cpu_joypad_state+0x324>
	{
		p->held = button_map(LBRandom(2, 4));
    e938:	64 e0       	ldi	r22, 0x04	; 4
    e93a:	70 e0       	ldi	r23, 0x00	; 0
    e93c:	82 e0       	ldi	r24, 0x02	; 2
    e93e:	90 e0       	ldi	r25, 0x00	; 0
    e940:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    e944:	0e 94 d4 71 	call	0xe3a8	; 0xe3a8 <button_map>
    e948:	d8 01       	movw	r26, r16
    e94a:	15 96       	adiw	r26, 0x05	; 5
    e94c:	9c 93       	st	X, r25
    e94e:	8e 93       	st	-X, r24
    e950:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    e952:	f1 01       	movw	r30, r2
    e954:	17 8e       	std	Z+31, r1	; 0x1f
    e956:	16 8e       	std	Z+30, r1	; 0x1e
    e958:	3e c0       	rjmp	.+124    	; 0xe9d6 <get_cpu_joypad_state+0x3a0>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    e95a:	d1 01       	movw	r26, r2
    e95c:	90 96       	adiw	r26, 0x20	; 32
    e95e:	8d 91       	ld	r24, X+
    e960:	9c 91       	ld	r25, X
    e962:	91 97       	sbiw	r26, 0x21	; 33
    e964:	80 34       	cpi	r24, 0x40	; 64
    e966:	91 40       	sbci	r25, 0x01	; 1
    e968:	88 f0       	brcs	.+34     	; 0xe98c <get_cpu_joypad_state+0x356>
	{
		p->held = button_map(LBRandom(0, 2));
    e96a:	62 e0       	ldi	r22, 0x02	; 2
    e96c:	70 e0       	ldi	r23, 0x00	; 0
    e96e:	80 e0       	ldi	r24, 0x00	; 0
    e970:	90 e0       	ldi	r25, 0x00	; 0
    e972:	0e 94 fd 57 	call	0xaffa	; 0xaffa <LBRandom>
    e976:	0e 94 d4 71 	call	0xe3a8	; 0xe3a8 <button_map>
    e97a:	f8 01       	movw	r30, r16
    e97c:	95 83       	std	Z+5, r25	; 0x05
    e97e:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    e980:	d1 01       	movw	r26, r2
    e982:	91 96       	adiw	r26, 0x21	; 33
    e984:	1c 92       	st	X, r1
    e986:	1e 92       	st	-X, r1
    e988:	90 97       	sbiw	r26, 0x20	; 32
    e98a:	25 c0       	rjmp	.+74     	; 0xe9d6 <get_cpu_joypad_state+0x3a0>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    e98c:	20 e0       	ldi	r18, 0x00	; 0
    e98e:	30 e0       	ldi	r19, 0x00	; 0
    e990:	40 e0       	ldi	r20, 0x00	; 0
    e992:	5e e3       	ldi	r21, 0x3E	; 62
    e994:	c5 01       	movw	r24, r10
    e996:	b4 01       	movw	r22, r8
    e998:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e99c:	20 e0       	ldi	r18, 0x00	; 0
    e99e:	30 e0       	ldi	r19, 0x00	; 0
    e9a0:	40 e4       	ldi	r20, 0x40	; 64
    e9a2:	50 e4       	ldi	r21, 0x40	; 64
    e9a4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__subsf3>
    e9a8:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
    e9ac:	b6 2e       	mov	r11, r22
    e9ae:	20 e0       	ldi	r18, 0x00	; 0
    e9b0:	30 e0       	ldi	r19, 0x00	; 0
    e9b2:	40 e0       	ldi	r20, 0x00	; 0
    e9b4:	5e e3       	ldi	r21, 0x3E	; 62
    e9b6:	c7 01       	movw	r24, r14
    e9b8:	b6 01       	movw	r22, r12
    e9ba:	0e 94 80 77 	call	0xef00	; 0xef00 <__mulsf3>
    e9be:	0e 94 99 76 	call	0xed32	; 0xed32 <__fixsfsi>
    e9c2:	86 2f       	mov	r24, r22
    e9c4:	91 01       	movw	r18, r2
    e9c6:	f1 01       	movw	r30, r2
    e9c8:	42 81       	ldd	r20, Z+2	; 0x02
    e9ca:	6b 2d       	mov	r22, r11
    e9cc:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <crash_and_turn>
    e9d0:	d1 01       	movw	r26, r2
    e9d2:	93 96       	adiw	r26, 0x23	; 35
    e9d4:	8c 93       	st	X, r24
}
    e9d6:	2c 96       	adiw	r28, 0x0c	; 12
    e9d8:	0f b6       	in	r0, 0x3f	; 63
    e9da:	f8 94       	cli
    e9dc:	de bf       	out	0x3e, r29	; 62
    e9de:	0f be       	out	0x3f, r0	; 63
    e9e0:	cd bf       	out	0x3d, r28	; 61
    e9e2:	df 91       	pop	r29
    e9e4:	cf 91       	pop	r28
    e9e6:	1f 91       	pop	r17
    e9e8:	0f 91       	pop	r16
    e9ea:	ff 90       	pop	r15
    e9ec:	ef 90       	pop	r14
    e9ee:	df 90       	pop	r13
    e9f0:	cf 90       	pop	r12
    e9f2:	bf 90       	pop	r11
    e9f4:	af 90       	pop	r10
    e9f6:	9f 90       	pop	r9
    e9f8:	8f 90       	pop	r8
    e9fa:	7f 90       	pop	r7
    e9fc:	6f 90       	pop	r6
    e9fe:	5f 90       	pop	r5
    ea00:	4f 90       	pop	r4
    ea02:	3f 90       	pop	r3
    ea04:	2f 90       	pop	r2
    ea06:	08 95       	ret

0000ea08 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    ea08:	82 ea       	ldi	r24, 0xA2	; 162
    ea0a:	9b e0       	ldi	r25, 0x0B	; 11
    ea0c:	0e 94 ac 49 	call	0x9358	; 0x9358 <InitMusicPlayer>
	SetMasterVolume(0xff);
    ea10:	8f ef       	ldi	r24, 0xFF	; 255
    ea12:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <SetMasterVolume>
	SetTileTable(tiles_data);
    ea16:	80 ea       	ldi	r24, 0xA0	; 160
    ea18:	9c e4       	ldi	r25, 0x4C	; 76
    ea1a:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ea1e:	8f e0       	ldi	r24, 0x0F	; 15
    ea20:	93 e4       	ldi	r25, 0x43	; 67
    ea22:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    ea26:	8b e9       	ldi	r24, 0x9B	; 155
    ea28:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    ea2c:	60 e0       	ldi	r22, 0x00	; 0
    ea2e:	83 e0       	ldi	r24, 0x03	; 3
    ea30:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <FadeIn>
	ClearVram();
    ea34:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <ClearVram>
	init_scores(&scores);
    ea38:	85 ec       	ldi	r24, 0xC5	; 197
    ea3a:	9b e0       	ldi	r25, 0x0B	; 11
    ea3c:	0e 94 41 58 	call	0xb082	; 0xb082 <init_scores>
	init_handles(&handles);
    ea40:	8c ee       	ldi	r24, 0xEC	; 236
    ea42:	9b e0       	ldi	r25, 0x0B	; 11
    ea44:	0e 94 4d 58 	call	0xb09a	; 0xb09a <init_handles>
	init_game_state();
    ea48:	0e 94 a8 59 	call	0xb350	; 0xb350 <init_game_state>
	load_splash();
    ea4c:	0e 94 7b 68 	call	0xd0f6	; 0xd0f6 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    ea50:	81 e0       	ldi	r24, 0x01	; 1
    ea52:	90 e0       	ldi	r25, 0x00	; 0
    ea54:	0e 94 87 55 	call	0xab0e	; 0xab0e <WaitVsync>
		switch (game.current_screen)
    ea58:	80 91 0c 0c 	lds	r24, 0x0C0C
    ea5c:	81 30       	cpi	r24, 0x01	; 1
    ea5e:	91 f0       	breq	.+36     	; 0xea84 <main+0x7c>
    ea60:	28 f0       	brcs	.+10     	; 0xea6c <main+0x64>
    ea62:	82 30       	cpi	r24, 0x02	; 2
    ea64:	c9 f0       	breq	.+50     	; 0xea98 <main+0x90>
    ea66:	83 30       	cpi	r24, 0x03	; 3
    ea68:	41 f1       	breq	.+80     	; 0xeaba <main+0xb2>
    ea6a:	54 c0       	rjmp	.+168    	; 0xeb14 <main+0x10c>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    ea6c:	60 e0       	ldi	r22, 0x00	; 0
    ea6e:	8e ea       	ldi	r24, 0xAE	; 174
    ea70:	9c e0       	ldi	r25, 0x0C	; 12
    ea72:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
				update_splash(&p1, &p2);
    ea76:	65 ee       	ldi	r22, 0xE5	; 229
    ea78:	7b e0       	ldi	r23, 0x0B	; 11
    ea7a:	8e ea       	ldi	r24, 0xAE	; 174
    ea7c:	9c e0       	ldi	r25, 0x0C	; 12
    ea7e:	0e 94 ac 70 	call	0xe158	; 0xe158 <update_splash>
				break;
    ea82:	48 c0       	rjmp	.+144    	; 0xeb14 <main+0x10c>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    ea84:	60 e0       	ldi	r22, 0x00	; 0
    ea86:	8e ea       	ldi	r24, 0xAE	; 174
    ea88:	9c e0       	ldi	r25, 0x0C	; 12
    ea8a:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
				update_tank_rank(&p1);
    ea8e:	8e ea       	ldi	r24, 0xAE	; 174
    ea90:	9c e0       	ldi	r25, 0x0C	; 12
    ea92:	0e 94 30 6e 	call	0xdc60	; 0xdc60 <update_tank_rank>
				break;
    ea96:	3e c0       	rjmp	.+124    	; 0xeb14 <main+0x10c>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    ea98:	60 e0       	ldi	r22, 0x00	; 0
    ea9a:	8e ea       	ldi	r24, 0xAE	; 174
    ea9c:	9c e0       	ldi	r25, 0x0C	; 12
    ea9e:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    eaa2:	61 e0       	ldi	r22, 0x01	; 1
    eaa4:	85 ee       	ldi	r24, 0xE5	; 229
    eaa6:	9b e0       	ldi	r25, 0x0B	; 11
    eaa8:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    eaac:	65 ee       	ldi	r22, 0xE5	; 229
    eaae:	7b e0       	ldi	r23, 0x0B	; 11
    eab0:	8e ea       	ldi	r24, 0xAE	; 174
    eab2:	9c e0       	ldi	r25, 0x0C	; 12
    eab4:	0e 94 86 71 	call	0xe30c	; 0xe30c <update_handle_select>
				break;
    eab8:	2d c0       	rjmp	.+90     	; 0xeb14 <main+0x10c>
			case LEVEL:
				if (game.selection == PVCPU)
    eaba:	80 91 18 0c 	lds	r24, 0x0C18
    eabe:	81 11       	cpse	r24, r1
    eac0:	06 c0       	rjmp	.+12     	; 0xeace <main+0xc6>
				{
					LBGetJoyPadState(&p1, 0);
    eac2:	60 e0       	ldi	r22, 0x00	; 0
    eac4:	8e ea       	ldi	r24, 0xAE	; 174
    eac6:	9c e0       	ldi	r25, 0x0C	; 12
    eac8:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
    eacc:	0a c0       	rjmp	.+20     	; 0xeae2 <main+0xda>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    eace:	83 30       	cpi	r24, 0x03	; 3
    ead0:	89 f4       	brne	.+34     	; 0xeaf4 <main+0xec>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    ead2:	4e ea       	ldi	r20, 0xAE	; 174
    ead4:	5c e0       	ldi	r21, 0x0C	; 12
    ead6:	64 ea       	ldi	r22, 0xA4	; 164
    ead8:	7f e0       	ldi	r23, 0x0F	; 15
    eada:	86 e3       	ldi	r24, 0x36	; 54
    eadc:	9c e0       	ldi	r25, 0x0C	; 12
    eade:	0e 94 1b 73 	call	0xe636	; 0xe636 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    eae2:	45 ee       	ldi	r20, 0xE5	; 229
    eae4:	5b e0       	ldi	r21, 0x0B	; 11
    eae6:	66 e3       	ldi	r22, 0x36	; 54
    eae8:	7c e0       	ldi	r23, 0x0C	; 12
    eaea:	84 ea       	ldi	r24, 0xA4	; 164
    eaec:	9f e0       	ldi	r25, 0x0F	; 15
    eaee:	0e 94 1b 73 	call	0xe636	; 0xe636 <get_cpu_joypad_state>
    eaf2:	0a c0       	rjmp	.+20     	; 0xeb08 <main+0x100>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    eaf4:	60 e0       	ldi	r22, 0x00	; 0
    eaf6:	8e ea       	ldi	r24, 0xAE	; 174
    eaf8:	9c e0       	ldi	r25, 0x0C	; 12
    eafa:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    eafe:	61 e0       	ldi	r22, 0x01	; 1
    eb00:	85 ee       	ldi	r24, 0xE5	; 229
    eb02:	9b e0       	ldi	r25, 0x0B	; 11
    eb04:	0e 94 75 56 	call	0xacea	; 0xacea <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    eb08:	65 ee       	ldi	r22, 0xE5	; 229
    eb0a:	7b e0       	ldi	r23, 0x0B	; 11
    eb0c:	8e ea       	ldi	r24, 0xAE	; 174
    eb0e:	9c e0       	ldi	r25, 0x0C	; 12
    eb10:	0e 94 e6 6b 	call	0xd7cc	; 0xd7cc <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    eb14:	80 91 04 01 	lds	r24, 0x0104
    eb18:	90 91 05 01 	lds	r25, 0x0105
    eb1c:	01 96       	adiw	r24, 0x01	; 1
    eb1e:	90 93 05 01 	sts	0x0105, r25
    eb22:	80 93 04 01 	sts	0x0104, r24
	}
    eb26:	94 cf       	rjmp	.-216    	; 0xea50 <main+0x48>

0000eb28 <__udivmodqi4>:
    eb28:	99 1b       	sub	r25, r25
    eb2a:	79 e0       	ldi	r23, 0x09	; 9
    eb2c:	04 c0       	rjmp	.+8      	; 0xeb36 <__udivmodqi4_ep>

0000eb2e <__udivmodqi4_loop>:
    eb2e:	99 1f       	adc	r25, r25
    eb30:	96 17       	cp	r25, r22
    eb32:	08 f0       	brcs	.+2      	; 0xeb36 <__udivmodqi4_ep>
    eb34:	96 1b       	sub	r25, r22

0000eb36 <__udivmodqi4_ep>:
    eb36:	88 1f       	adc	r24, r24
    eb38:	7a 95       	dec	r23
    eb3a:	c9 f7       	brne	.-14     	; 0xeb2e <__udivmodqi4_loop>
    eb3c:	80 95       	com	r24
    eb3e:	08 95       	ret

0000eb40 <__udivmodhi4>:
    eb40:	aa 1b       	sub	r26, r26
    eb42:	bb 1b       	sub	r27, r27
    eb44:	51 e1       	ldi	r21, 0x11	; 17
    eb46:	07 c0       	rjmp	.+14     	; 0xeb56 <__udivmodhi4_ep>

0000eb48 <__udivmodhi4_loop>:
    eb48:	aa 1f       	adc	r26, r26
    eb4a:	bb 1f       	adc	r27, r27
    eb4c:	a6 17       	cp	r26, r22
    eb4e:	b7 07       	cpc	r27, r23
    eb50:	10 f0       	brcs	.+4      	; 0xeb56 <__udivmodhi4_ep>
    eb52:	a6 1b       	sub	r26, r22
    eb54:	b7 0b       	sbc	r27, r23

0000eb56 <__udivmodhi4_ep>:
    eb56:	88 1f       	adc	r24, r24
    eb58:	99 1f       	adc	r25, r25
    eb5a:	5a 95       	dec	r21
    eb5c:	a9 f7       	brne	.-22     	; 0xeb48 <__udivmodhi4_loop>
    eb5e:	80 95       	com	r24
    eb60:	90 95       	com	r25
    eb62:	bc 01       	movw	r22, r24
    eb64:	cd 01       	movw	r24, r26
    eb66:	08 95       	ret

0000eb68 <__divmodhi4>:
    eb68:	97 fb       	bst	r25, 7
    eb6a:	07 2e       	mov	r0, r23
    eb6c:	16 f4       	brtc	.+4      	; 0xeb72 <__divmodhi4+0xa>
    eb6e:	00 94       	com	r0
    eb70:	07 d0       	rcall	.+14     	; 0xeb80 <__divmodhi4_neg1>
    eb72:	77 fd       	sbrc	r23, 7
    eb74:	09 d0       	rcall	.+18     	; 0xeb88 <__divmodhi4_neg2>
    eb76:	0e 94 a0 75 	call	0xeb40	; 0xeb40 <__udivmodhi4>
    eb7a:	07 fc       	sbrc	r0, 7
    eb7c:	05 d0       	rcall	.+10     	; 0xeb88 <__divmodhi4_neg2>
    eb7e:	3e f4       	brtc	.+14     	; 0xeb8e <__divmodhi4_exit>

0000eb80 <__divmodhi4_neg1>:
    eb80:	90 95       	com	r25
    eb82:	81 95       	neg	r24
    eb84:	9f 4f       	sbci	r25, 0xFF	; 255
    eb86:	08 95       	ret

0000eb88 <__divmodhi4_neg2>:
    eb88:	70 95       	com	r23
    eb8a:	61 95       	neg	r22
    eb8c:	7f 4f       	sbci	r23, 0xFF	; 255

0000eb8e <__divmodhi4_exit>:
    eb8e:	08 95       	ret

0000eb90 <__subsf3>:
    eb90:	50 58       	subi	r21, 0x80	; 128

0000eb92 <__addsf3>:
    eb92:	bb 27       	eor	r27, r27
    eb94:	aa 27       	eor	r26, r26
    eb96:	0e d0       	rcall	.+28     	; 0xebb4 <__addsf3x>
    eb98:	75 c1       	rjmp	.+746    	; 0xee84 <__fp_round>
    eb9a:	66 d1       	rcall	.+716    	; 0xee68 <__fp_pscA>
    eb9c:	30 f0       	brcs	.+12     	; 0xebaa <__addsf3+0x18>
    eb9e:	6b d1       	rcall	.+726    	; 0xee76 <__fp_pscB>
    eba0:	20 f0       	brcs	.+8      	; 0xebaa <__addsf3+0x18>
    eba2:	31 f4       	brne	.+12     	; 0xebb0 <__addsf3+0x1e>
    eba4:	9f 3f       	cpi	r25, 0xFF	; 255
    eba6:	11 f4       	brne	.+4      	; 0xebac <__addsf3+0x1a>
    eba8:	1e f4       	brtc	.+6      	; 0xebb0 <__addsf3+0x1e>
    ebaa:	5b c1       	rjmp	.+694    	; 0xee62 <__fp_nan>
    ebac:	0e f4       	brtc	.+2      	; 0xebb0 <__addsf3+0x1e>
    ebae:	e0 95       	com	r30
    ebb0:	e7 fb       	bst	r30, 7
    ebb2:	51 c1       	rjmp	.+674    	; 0xee56 <__fp_inf>

0000ebb4 <__addsf3x>:
    ebb4:	e9 2f       	mov	r30, r25
    ebb6:	77 d1       	rcall	.+750    	; 0xeea6 <__fp_split3>
    ebb8:	80 f3       	brcs	.-32     	; 0xeb9a <__addsf3+0x8>
    ebba:	ba 17       	cp	r27, r26
    ebbc:	62 07       	cpc	r22, r18
    ebbe:	73 07       	cpc	r23, r19
    ebc0:	84 07       	cpc	r24, r20
    ebc2:	95 07       	cpc	r25, r21
    ebc4:	18 f0       	brcs	.+6      	; 0xebcc <__addsf3x+0x18>
    ebc6:	71 f4       	brne	.+28     	; 0xebe4 <__addsf3x+0x30>
    ebc8:	9e f5       	brtc	.+102    	; 0xec30 <__addsf3x+0x7c>
    ebca:	8f c1       	rjmp	.+798    	; 0xeeea <__fp_zero>
    ebcc:	0e f4       	brtc	.+2      	; 0xebd0 <__addsf3x+0x1c>
    ebce:	e0 95       	com	r30
    ebd0:	0b 2e       	mov	r0, r27
    ebd2:	ba 2f       	mov	r27, r26
    ebd4:	a0 2d       	mov	r26, r0
    ebd6:	0b 01       	movw	r0, r22
    ebd8:	b9 01       	movw	r22, r18
    ebda:	90 01       	movw	r18, r0
    ebdc:	0c 01       	movw	r0, r24
    ebde:	ca 01       	movw	r24, r20
    ebe0:	a0 01       	movw	r20, r0
    ebe2:	11 24       	eor	r1, r1
    ebe4:	ff 27       	eor	r31, r31
    ebe6:	59 1b       	sub	r21, r25
    ebe8:	99 f0       	breq	.+38     	; 0xec10 <__addsf3x+0x5c>
    ebea:	59 3f       	cpi	r21, 0xF9	; 249
    ebec:	50 f4       	brcc	.+20     	; 0xec02 <__addsf3x+0x4e>
    ebee:	50 3e       	cpi	r21, 0xE0	; 224
    ebf0:	68 f1       	brcs	.+90     	; 0xec4c <__addsf3x+0x98>
    ebf2:	1a 16       	cp	r1, r26
    ebf4:	f0 40       	sbci	r31, 0x00	; 0
    ebf6:	a2 2f       	mov	r26, r18
    ebf8:	23 2f       	mov	r18, r19
    ebfa:	34 2f       	mov	r19, r20
    ebfc:	44 27       	eor	r20, r20
    ebfe:	58 5f       	subi	r21, 0xF8	; 248
    ec00:	f3 cf       	rjmp	.-26     	; 0xebe8 <__addsf3x+0x34>
    ec02:	46 95       	lsr	r20
    ec04:	37 95       	ror	r19
    ec06:	27 95       	ror	r18
    ec08:	a7 95       	ror	r26
    ec0a:	f0 40       	sbci	r31, 0x00	; 0
    ec0c:	53 95       	inc	r21
    ec0e:	c9 f7       	brne	.-14     	; 0xec02 <__addsf3x+0x4e>
    ec10:	7e f4       	brtc	.+30     	; 0xec30 <__addsf3x+0x7c>
    ec12:	1f 16       	cp	r1, r31
    ec14:	ba 0b       	sbc	r27, r26
    ec16:	62 0b       	sbc	r22, r18
    ec18:	73 0b       	sbc	r23, r19
    ec1a:	84 0b       	sbc	r24, r20
    ec1c:	ba f0       	brmi	.+46     	; 0xec4c <__addsf3x+0x98>
    ec1e:	91 50       	subi	r25, 0x01	; 1
    ec20:	a1 f0       	breq	.+40     	; 0xec4a <__addsf3x+0x96>
    ec22:	ff 0f       	add	r31, r31
    ec24:	bb 1f       	adc	r27, r27
    ec26:	66 1f       	adc	r22, r22
    ec28:	77 1f       	adc	r23, r23
    ec2a:	88 1f       	adc	r24, r24
    ec2c:	c2 f7       	brpl	.-16     	; 0xec1e <__addsf3x+0x6a>
    ec2e:	0e c0       	rjmp	.+28     	; 0xec4c <__addsf3x+0x98>
    ec30:	ba 0f       	add	r27, r26
    ec32:	62 1f       	adc	r22, r18
    ec34:	73 1f       	adc	r23, r19
    ec36:	84 1f       	adc	r24, r20
    ec38:	48 f4       	brcc	.+18     	; 0xec4c <__addsf3x+0x98>
    ec3a:	87 95       	ror	r24
    ec3c:	77 95       	ror	r23
    ec3e:	67 95       	ror	r22
    ec40:	b7 95       	ror	r27
    ec42:	f7 95       	ror	r31
    ec44:	9e 3f       	cpi	r25, 0xFE	; 254
    ec46:	08 f0       	brcs	.+2      	; 0xec4a <__addsf3x+0x96>
    ec48:	b3 cf       	rjmp	.-154    	; 0xebb0 <__addsf3+0x1e>
    ec4a:	93 95       	inc	r25
    ec4c:	88 0f       	add	r24, r24
    ec4e:	08 f0       	brcs	.+2      	; 0xec52 <__addsf3x+0x9e>
    ec50:	99 27       	eor	r25, r25
    ec52:	ee 0f       	add	r30, r30
    ec54:	97 95       	ror	r25
    ec56:	87 95       	ror	r24
    ec58:	08 95       	ret

0000ec5a <__cmpsf2>:
    ec5a:	d9 d0       	rcall	.+434    	; 0xee0e <__fp_cmp>
    ec5c:	08 f4       	brcc	.+2      	; 0xec60 <__cmpsf2+0x6>
    ec5e:	81 e0       	ldi	r24, 0x01	; 1
    ec60:	08 95       	ret

0000ec62 <__divsf3>:
    ec62:	0c d0       	rcall	.+24     	; 0xec7c <__divsf3x>
    ec64:	0f c1       	rjmp	.+542    	; 0xee84 <__fp_round>
    ec66:	07 d1       	rcall	.+526    	; 0xee76 <__fp_pscB>
    ec68:	40 f0       	brcs	.+16     	; 0xec7a <__divsf3+0x18>
    ec6a:	fe d0       	rcall	.+508    	; 0xee68 <__fp_pscA>
    ec6c:	30 f0       	brcs	.+12     	; 0xec7a <__divsf3+0x18>
    ec6e:	21 f4       	brne	.+8      	; 0xec78 <__divsf3+0x16>
    ec70:	5f 3f       	cpi	r21, 0xFF	; 255
    ec72:	19 f0       	breq	.+6      	; 0xec7a <__divsf3+0x18>
    ec74:	f0 c0       	rjmp	.+480    	; 0xee56 <__fp_inf>
    ec76:	51 11       	cpse	r21, r1
    ec78:	39 c1       	rjmp	.+626    	; 0xeeec <__fp_szero>
    ec7a:	f3 c0       	rjmp	.+486    	; 0xee62 <__fp_nan>

0000ec7c <__divsf3x>:
    ec7c:	14 d1       	rcall	.+552    	; 0xeea6 <__fp_split3>
    ec7e:	98 f3       	brcs	.-26     	; 0xec66 <__divsf3+0x4>

0000ec80 <__divsf3_pse>:
    ec80:	99 23       	and	r25, r25
    ec82:	c9 f3       	breq	.-14     	; 0xec76 <__divsf3+0x14>
    ec84:	55 23       	and	r21, r21
    ec86:	b1 f3       	breq	.-20     	; 0xec74 <__divsf3+0x12>
    ec88:	95 1b       	sub	r25, r21
    ec8a:	55 0b       	sbc	r21, r21
    ec8c:	bb 27       	eor	r27, r27
    ec8e:	aa 27       	eor	r26, r26
    ec90:	62 17       	cp	r22, r18
    ec92:	73 07       	cpc	r23, r19
    ec94:	84 07       	cpc	r24, r20
    ec96:	38 f0       	brcs	.+14     	; 0xeca6 <__divsf3_pse+0x26>
    ec98:	9f 5f       	subi	r25, 0xFF	; 255
    ec9a:	5f 4f       	sbci	r21, 0xFF	; 255
    ec9c:	22 0f       	add	r18, r18
    ec9e:	33 1f       	adc	r19, r19
    eca0:	44 1f       	adc	r20, r20
    eca2:	aa 1f       	adc	r26, r26
    eca4:	a9 f3       	breq	.-22     	; 0xec90 <__divsf3_pse+0x10>
    eca6:	33 d0       	rcall	.+102    	; 0xed0e <__divsf3_pse+0x8e>
    eca8:	0e 2e       	mov	r0, r30
    ecaa:	3a f0       	brmi	.+14     	; 0xecba <__divsf3_pse+0x3a>
    ecac:	e0 e8       	ldi	r30, 0x80	; 128
    ecae:	30 d0       	rcall	.+96     	; 0xed10 <__divsf3_pse+0x90>
    ecb0:	91 50       	subi	r25, 0x01	; 1
    ecb2:	50 40       	sbci	r21, 0x00	; 0
    ecb4:	e6 95       	lsr	r30
    ecb6:	00 1c       	adc	r0, r0
    ecb8:	ca f7       	brpl	.-14     	; 0xecac <__divsf3_pse+0x2c>
    ecba:	29 d0       	rcall	.+82     	; 0xed0e <__divsf3_pse+0x8e>
    ecbc:	fe 2f       	mov	r31, r30
    ecbe:	27 d0       	rcall	.+78     	; 0xed0e <__divsf3_pse+0x8e>
    ecc0:	66 0f       	add	r22, r22
    ecc2:	77 1f       	adc	r23, r23
    ecc4:	88 1f       	adc	r24, r24
    ecc6:	bb 1f       	adc	r27, r27
    ecc8:	26 17       	cp	r18, r22
    ecca:	37 07       	cpc	r19, r23
    eccc:	48 07       	cpc	r20, r24
    ecce:	ab 07       	cpc	r26, r27
    ecd0:	b0 e8       	ldi	r27, 0x80	; 128
    ecd2:	09 f0       	breq	.+2      	; 0xecd6 <__divsf3_pse+0x56>
    ecd4:	bb 0b       	sbc	r27, r27
    ecd6:	80 2d       	mov	r24, r0
    ecd8:	bf 01       	movw	r22, r30
    ecda:	ff 27       	eor	r31, r31
    ecdc:	93 58       	subi	r25, 0x83	; 131
    ecde:	5f 4f       	sbci	r21, 0xFF	; 255
    ece0:	2a f0       	brmi	.+10     	; 0xecec <__divsf3_pse+0x6c>
    ece2:	9e 3f       	cpi	r25, 0xFE	; 254
    ece4:	51 05       	cpc	r21, r1
    ece6:	68 f0       	brcs	.+26     	; 0xed02 <__divsf3_pse+0x82>
    ece8:	b6 c0       	rjmp	.+364    	; 0xee56 <__fp_inf>
    ecea:	00 c1       	rjmp	.+512    	; 0xeeec <__fp_szero>
    ecec:	5f 3f       	cpi	r21, 0xFF	; 255
    ecee:	ec f3       	brlt	.-6      	; 0xecea <__divsf3_pse+0x6a>
    ecf0:	98 3e       	cpi	r25, 0xE8	; 232
    ecf2:	dc f3       	brlt	.-10     	; 0xecea <__divsf3_pse+0x6a>
    ecf4:	86 95       	lsr	r24
    ecf6:	77 95       	ror	r23
    ecf8:	67 95       	ror	r22
    ecfa:	b7 95       	ror	r27
    ecfc:	f7 95       	ror	r31
    ecfe:	9f 5f       	subi	r25, 0xFF	; 255
    ed00:	c9 f7       	brne	.-14     	; 0xecf4 <__divsf3_pse+0x74>
    ed02:	88 0f       	add	r24, r24
    ed04:	91 1d       	adc	r25, r1
    ed06:	96 95       	lsr	r25
    ed08:	87 95       	ror	r24
    ed0a:	97 f9       	bld	r25, 7
    ed0c:	08 95       	ret
    ed0e:	e1 e0       	ldi	r30, 0x01	; 1
    ed10:	66 0f       	add	r22, r22
    ed12:	77 1f       	adc	r23, r23
    ed14:	88 1f       	adc	r24, r24
    ed16:	bb 1f       	adc	r27, r27
    ed18:	62 17       	cp	r22, r18
    ed1a:	73 07       	cpc	r23, r19
    ed1c:	84 07       	cpc	r24, r20
    ed1e:	ba 07       	cpc	r27, r26
    ed20:	20 f0       	brcs	.+8      	; 0xed2a <__divsf3_pse+0xaa>
    ed22:	62 1b       	sub	r22, r18
    ed24:	73 0b       	sbc	r23, r19
    ed26:	84 0b       	sbc	r24, r20
    ed28:	ba 0b       	sbc	r27, r26
    ed2a:	ee 1f       	adc	r30, r30
    ed2c:	88 f7       	brcc	.-30     	; 0xed10 <__divsf3_pse+0x90>
    ed2e:	e0 95       	com	r30
    ed30:	08 95       	ret

0000ed32 <__fixsfsi>:
    ed32:	04 d0       	rcall	.+8      	; 0xed3c <__fixunssfsi>
    ed34:	68 94       	set
    ed36:	b1 11       	cpse	r27, r1
    ed38:	d9 c0       	rjmp	.+434    	; 0xeeec <__fp_szero>
    ed3a:	08 95       	ret

0000ed3c <__fixunssfsi>:
    ed3c:	bc d0       	rcall	.+376    	; 0xeeb6 <__fp_splitA>
    ed3e:	88 f0       	brcs	.+34     	; 0xed62 <__fixunssfsi+0x26>
    ed40:	9f 57       	subi	r25, 0x7F	; 127
    ed42:	90 f0       	brcs	.+36     	; 0xed68 <__fixunssfsi+0x2c>
    ed44:	b9 2f       	mov	r27, r25
    ed46:	99 27       	eor	r25, r25
    ed48:	b7 51       	subi	r27, 0x17	; 23
    ed4a:	a0 f0       	brcs	.+40     	; 0xed74 <__fixunssfsi+0x38>
    ed4c:	d1 f0       	breq	.+52     	; 0xed82 <__fixunssfsi+0x46>
    ed4e:	66 0f       	add	r22, r22
    ed50:	77 1f       	adc	r23, r23
    ed52:	88 1f       	adc	r24, r24
    ed54:	99 1f       	adc	r25, r25
    ed56:	1a f0       	brmi	.+6      	; 0xed5e <__fixunssfsi+0x22>
    ed58:	ba 95       	dec	r27
    ed5a:	c9 f7       	brne	.-14     	; 0xed4e <__fixunssfsi+0x12>
    ed5c:	12 c0       	rjmp	.+36     	; 0xed82 <__fixunssfsi+0x46>
    ed5e:	b1 30       	cpi	r27, 0x01	; 1
    ed60:	81 f0       	breq	.+32     	; 0xed82 <__fixunssfsi+0x46>
    ed62:	c3 d0       	rcall	.+390    	; 0xeeea <__fp_zero>
    ed64:	b1 e0       	ldi	r27, 0x01	; 1
    ed66:	08 95       	ret
    ed68:	c0 c0       	rjmp	.+384    	; 0xeeea <__fp_zero>
    ed6a:	67 2f       	mov	r22, r23
    ed6c:	78 2f       	mov	r23, r24
    ed6e:	88 27       	eor	r24, r24
    ed70:	b8 5f       	subi	r27, 0xF8	; 248
    ed72:	39 f0       	breq	.+14     	; 0xed82 <__fixunssfsi+0x46>
    ed74:	b9 3f       	cpi	r27, 0xF9	; 249
    ed76:	cc f3       	brlt	.-14     	; 0xed6a <__fixunssfsi+0x2e>
    ed78:	86 95       	lsr	r24
    ed7a:	77 95       	ror	r23
    ed7c:	67 95       	ror	r22
    ed7e:	b3 95       	inc	r27
    ed80:	d9 f7       	brne	.-10     	; 0xed78 <__fixunssfsi+0x3c>
    ed82:	3e f4       	brtc	.+14     	; 0xed92 <__fixunssfsi+0x56>
    ed84:	90 95       	com	r25
    ed86:	80 95       	com	r24
    ed88:	70 95       	com	r23
    ed8a:	61 95       	neg	r22
    ed8c:	7f 4f       	sbci	r23, 0xFF	; 255
    ed8e:	8f 4f       	sbci	r24, 0xFF	; 255
    ed90:	9f 4f       	sbci	r25, 0xFF	; 255
    ed92:	08 95       	ret

0000ed94 <__floatunsisf>:
    ed94:	e8 94       	clt
    ed96:	09 c0       	rjmp	.+18     	; 0xedaa <__floatsisf+0x12>

0000ed98 <__floatsisf>:
    ed98:	97 fb       	bst	r25, 7
    ed9a:	3e f4       	brtc	.+14     	; 0xedaa <__floatsisf+0x12>
    ed9c:	90 95       	com	r25
    ed9e:	80 95       	com	r24
    eda0:	70 95       	com	r23
    eda2:	61 95       	neg	r22
    eda4:	7f 4f       	sbci	r23, 0xFF	; 255
    eda6:	8f 4f       	sbci	r24, 0xFF	; 255
    eda8:	9f 4f       	sbci	r25, 0xFF	; 255
    edaa:	99 23       	and	r25, r25
    edac:	a9 f0       	breq	.+42     	; 0xedd8 <__floatsisf+0x40>
    edae:	f9 2f       	mov	r31, r25
    edb0:	96 e9       	ldi	r25, 0x96	; 150
    edb2:	bb 27       	eor	r27, r27
    edb4:	93 95       	inc	r25
    edb6:	f6 95       	lsr	r31
    edb8:	87 95       	ror	r24
    edba:	77 95       	ror	r23
    edbc:	67 95       	ror	r22
    edbe:	b7 95       	ror	r27
    edc0:	f1 11       	cpse	r31, r1
    edc2:	f8 cf       	rjmp	.-16     	; 0xedb4 <__floatsisf+0x1c>
    edc4:	fa f4       	brpl	.+62     	; 0xee04 <__floatsisf+0x6c>
    edc6:	bb 0f       	add	r27, r27
    edc8:	11 f4       	brne	.+4      	; 0xedce <__floatsisf+0x36>
    edca:	60 ff       	sbrs	r22, 0
    edcc:	1b c0       	rjmp	.+54     	; 0xee04 <__floatsisf+0x6c>
    edce:	6f 5f       	subi	r22, 0xFF	; 255
    edd0:	7f 4f       	sbci	r23, 0xFF	; 255
    edd2:	8f 4f       	sbci	r24, 0xFF	; 255
    edd4:	9f 4f       	sbci	r25, 0xFF	; 255
    edd6:	16 c0       	rjmp	.+44     	; 0xee04 <__floatsisf+0x6c>
    edd8:	88 23       	and	r24, r24
    edda:	11 f0       	breq	.+4      	; 0xede0 <__floatsisf+0x48>
    eddc:	96 e9       	ldi	r25, 0x96	; 150
    edde:	11 c0       	rjmp	.+34     	; 0xee02 <__floatsisf+0x6a>
    ede0:	77 23       	and	r23, r23
    ede2:	21 f0       	breq	.+8      	; 0xedec <__floatsisf+0x54>
    ede4:	9e e8       	ldi	r25, 0x8E	; 142
    ede6:	87 2f       	mov	r24, r23
    ede8:	76 2f       	mov	r23, r22
    edea:	05 c0       	rjmp	.+10     	; 0xedf6 <__floatsisf+0x5e>
    edec:	66 23       	and	r22, r22
    edee:	71 f0       	breq	.+28     	; 0xee0c <__floatsisf+0x74>
    edf0:	96 e8       	ldi	r25, 0x86	; 134
    edf2:	86 2f       	mov	r24, r22
    edf4:	70 e0       	ldi	r23, 0x00	; 0
    edf6:	60 e0       	ldi	r22, 0x00	; 0
    edf8:	2a f0       	brmi	.+10     	; 0xee04 <__floatsisf+0x6c>
    edfa:	9a 95       	dec	r25
    edfc:	66 0f       	add	r22, r22
    edfe:	77 1f       	adc	r23, r23
    ee00:	88 1f       	adc	r24, r24
    ee02:	da f7       	brpl	.-10     	; 0xedfa <__floatsisf+0x62>
    ee04:	88 0f       	add	r24, r24
    ee06:	96 95       	lsr	r25
    ee08:	87 95       	ror	r24
    ee0a:	97 f9       	bld	r25, 7
    ee0c:	08 95       	ret

0000ee0e <__fp_cmp>:
    ee0e:	99 0f       	add	r25, r25
    ee10:	00 08       	sbc	r0, r0
    ee12:	55 0f       	add	r21, r21
    ee14:	aa 0b       	sbc	r26, r26
    ee16:	e0 e8       	ldi	r30, 0x80	; 128
    ee18:	fe ef       	ldi	r31, 0xFE	; 254
    ee1a:	16 16       	cp	r1, r22
    ee1c:	17 06       	cpc	r1, r23
    ee1e:	e8 07       	cpc	r30, r24
    ee20:	f9 07       	cpc	r31, r25
    ee22:	c0 f0       	brcs	.+48     	; 0xee54 <__fp_cmp+0x46>
    ee24:	12 16       	cp	r1, r18
    ee26:	13 06       	cpc	r1, r19
    ee28:	e4 07       	cpc	r30, r20
    ee2a:	f5 07       	cpc	r31, r21
    ee2c:	98 f0       	brcs	.+38     	; 0xee54 <__fp_cmp+0x46>
    ee2e:	62 1b       	sub	r22, r18
    ee30:	73 0b       	sbc	r23, r19
    ee32:	84 0b       	sbc	r24, r20
    ee34:	95 0b       	sbc	r25, r21
    ee36:	39 f4       	brne	.+14     	; 0xee46 <__fp_cmp+0x38>
    ee38:	0a 26       	eor	r0, r26
    ee3a:	61 f0       	breq	.+24     	; 0xee54 <__fp_cmp+0x46>
    ee3c:	23 2b       	or	r18, r19
    ee3e:	24 2b       	or	r18, r20
    ee40:	25 2b       	or	r18, r21
    ee42:	21 f4       	brne	.+8      	; 0xee4c <__fp_cmp+0x3e>
    ee44:	08 95       	ret
    ee46:	0a 26       	eor	r0, r26
    ee48:	09 f4       	brne	.+2      	; 0xee4c <__fp_cmp+0x3e>
    ee4a:	a1 40       	sbci	r26, 0x01	; 1
    ee4c:	a6 95       	lsr	r26
    ee4e:	8f ef       	ldi	r24, 0xFF	; 255
    ee50:	81 1d       	adc	r24, r1
    ee52:	81 1d       	adc	r24, r1
    ee54:	08 95       	ret

0000ee56 <__fp_inf>:
    ee56:	97 f9       	bld	r25, 7
    ee58:	9f 67       	ori	r25, 0x7F	; 127
    ee5a:	80 e8       	ldi	r24, 0x80	; 128
    ee5c:	70 e0       	ldi	r23, 0x00	; 0
    ee5e:	60 e0       	ldi	r22, 0x00	; 0
    ee60:	08 95       	ret

0000ee62 <__fp_nan>:
    ee62:	9f ef       	ldi	r25, 0xFF	; 255
    ee64:	80 ec       	ldi	r24, 0xC0	; 192
    ee66:	08 95       	ret

0000ee68 <__fp_pscA>:
    ee68:	00 24       	eor	r0, r0
    ee6a:	0a 94       	dec	r0
    ee6c:	16 16       	cp	r1, r22
    ee6e:	17 06       	cpc	r1, r23
    ee70:	18 06       	cpc	r1, r24
    ee72:	09 06       	cpc	r0, r25
    ee74:	08 95       	ret

0000ee76 <__fp_pscB>:
    ee76:	00 24       	eor	r0, r0
    ee78:	0a 94       	dec	r0
    ee7a:	12 16       	cp	r1, r18
    ee7c:	13 06       	cpc	r1, r19
    ee7e:	14 06       	cpc	r1, r20
    ee80:	05 06       	cpc	r0, r21
    ee82:	08 95       	ret

0000ee84 <__fp_round>:
    ee84:	09 2e       	mov	r0, r25
    ee86:	03 94       	inc	r0
    ee88:	00 0c       	add	r0, r0
    ee8a:	11 f4       	brne	.+4      	; 0xee90 <__fp_round+0xc>
    ee8c:	88 23       	and	r24, r24
    ee8e:	52 f0       	brmi	.+20     	; 0xeea4 <__fp_round+0x20>
    ee90:	bb 0f       	add	r27, r27
    ee92:	40 f4       	brcc	.+16     	; 0xeea4 <__fp_round+0x20>
    ee94:	bf 2b       	or	r27, r31
    ee96:	11 f4       	brne	.+4      	; 0xee9c <__fp_round+0x18>
    ee98:	60 ff       	sbrs	r22, 0
    ee9a:	04 c0       	rjmp	.+8      	; 0xeea4 <__fp_round+0x20>
    ee9c:	6f 5f       	subi	r22, 0xFF	; 255
    ee9e:	7f 4f       	sbci	r23, 0xFF	; 255
    eea0:	8f 4f       	sbci	r24, 0xFF	; 255
    eea2:	9f 4f       	sbci	r25, 0xFF	; 255
    eea4:	08 95       	ret

0000eea6 <__fp_split3>:
    eea6:	57 fd       	sbrc	r21, 7
    eea8:	90 58       	subi	r25, 0x80	; 128
    eeaa:	44 0f       	add	r20, r20
    eeac:	55 1f       	adc	r21, r21
    eeae:	59 f0       	breq	.+22     	; 0xeec6 <__fp_splitA+0x10>
    eeb0:	5f 3f       	cpi	r21, 0xFF	; 255
    eeb2:	71 f0       	breq	.+28     	; 0xeed0 <__fp_splitA+0x1a>
    eeb4:	47 95       	ror	r20

0000eeb6 <__fp_splitA>:
    eeb6:	88 0f       	add	r24, r24
    eeb8:	97 fb       	bst	r25, 7
    eeba:	99 1f       	adc	r25, r25
    eebc:	61 f0       	breq	.+24     	; 0xeed6 <__fp_splitA+0x20>
    eebe:	9f 3f       	cpi	r25, 0xFF	; 255
    eec0:	79 f0       	breq	.+30     	; 0xeee0 <__fp_splitA+0x2a>
    eec2:	87 95       	ror	r24
    eec4:	08 95       	ret
    eec6:	12 16       	cp	r1, r18
    eec8:	13 06       	cpc	r1, r19
    eeca:	14 06       	cpc	r1, r20
    eecc:	55 1f       	adc	r21, r21
    eece:	f2 cf       	rjmp	.-28     	; 0xeeb4 <__fp_split3+0xe>
    eed0:	46 95       	lsr	r20
    eed2:	f1 df       	rcall	.-30     	; 0xeeb6 <__fp_splitA>
    eed4:	08 c0       	rjmp	.+16     	; 0xeee6 <__fp_splitA+0x30>
    eed6:	16 16       	cp	r1, r22
    eed8:	17 06       	cpc	r1, r23
    eeda:	18 06       	cpc	r1, r24
    eedc:	99 1f       	adc	r25, r25
    eede:	f1 cf       	rjmp	.-30     	; 0xeec2 <__fp_splitA+0xc>
    eee0:	86 95       	lsr	r24
    eee2:	71 05       	cpc	r23, r1
    eee4:	61 05       	cpc	r22, r1
    eee6:	08 94       	sec
    eee8:	08 95       	ret

0000eeea <__fp_zero>:
    eeea:	e8 94       	clt

0000eeec <__fp_szero>:
    eeec:	bb 27       	eor	r27, r27
    eeee:	66 27       	eor	r22, r22
    eef0:	77 27       	eor	r23, r23
    eef2:	cb 01       	movw	r24, r22
    eef4:	97 f9       	bld	r25, 7
    eef6:	08 95       	ret

0000eef8 <__gesf2>:
    eef8:	8a df       	rcall	.-236    	; 0xee0e <__fp_cmp>
    eefa:	08 f4       	brcc	.+2      	; 0xeefe <__gesf2+0x6>
    eefc:	8f ef       	ldi	r24, 0xFF	; 255
    eefe:	08 95       	ret

0000ef00 <__mulsf3>:
    ef00:	0b d0       	rcall	.+22     	; 0xef18 <__mulsf3x>
    ef02:	c0 cf       	rjmp	.-128    	; 0xee84 <__fp_round>
    ef04:	b1 df       	rcall	.-158    	; 0xee68 <__fp_pscA>
    ef06:	28 f0       	brcs	.+10     	; 0xef12 <__mulsf3+0x12>
    ef08:	b6 df       	rcall	.-148    	; 0xee76 <__fp_pscB>
    ef0a:	18 f0       	brcs	.+6      	; 0xef12 <__mulsf3+0x12>
    ef0c:	95 23       	and	r25, r21
    ef0e:	09 f0       	breq	.+2      	; 0xef12 <__mulsf3+0x12>
    ef10:	a2 cf       	rjmp	.-188    	; 0xee56 <__fp_inf>
    ef12:	a7 cf       	rjmp	.-178    	; 0xee62 <__fp_nan>
    ef14:	11 24       	eor	r1, r1
    ef16:	ea cf       	rjmp	.-44     	; 0xeeec <__fp_szero>

0000ef18 <__mulsf3x>:
    ef18:	c6 df       	rcall	.-116    	; 0xeea6 <__fp_split3>
    ef1a:	a0 f3       	brcs	.-24     	; 0xef04 <__mulsf3+0x4>

0000ef1c <__mulsf3_pse>:
    ef1c:	95 9f       	mul	r25, r21
    ef1e:	d1 f3       	breq	.-12     	; 0xef14 <__mulsf3+0x14>
    ef20:	95 0f       	add	r25, r21
    ef22:	50 e0       	ldi	r21, 0x00	; 0
    ef24:	55 1f       	adc	r21, r21
    ef26:	62 9f       	mul	r22, r18
    ef28:	f0 01       	movw	r30, r0
    ef2a:	72 9f       	mul	r23, r18
    ef2c:	bb 27       	eor	r27, r27
    ef2e:	f0 0d       	add	r31, r0
    ef30:	b1 1d       	adc	r27, r1
    ef32:	63 9f       	mul	r22, r19
    ef34:	aa 27       	eor	r26, r26
    ef36:	f0 0d       	add	r31, r0
    ef38:	b1 1d       	adc	r27, r1
    ef3a:	aa 1f       	adc	r26, r26
    ef3c:	64 9f       	mul	r22, r20
    ef3e:	66 27       	eor	r22, r22
    ef40:	b0 0d       	add	r27, r0
    ef42:	a1 1d       	adc	r26, r1
    ef44:	66 1f       	adc	r22, r22
    ef46:	82 9f       	mul	r24, r18
    ef48:	22 27       	eor	r18, r18
    ef4a:	b0 0d       	add	r27, r0
    ef4c:	a1 1d       	adc	r26, r1
    ef4e:	62 1f       	adc	r22, r18
    ef50:	73 9f       	mul	r23, r19
    ef52:	b0 0d       	add	r27, r0
    ef54:	a1 1d       	adc	r26, r1
    ef56:	62 1f       	adc	r22, r18
    ef58:	83 9f       	mul	r24, r19
    ef5a:	a0 0d       	add	r26, r0
    ef5c:	61 1d       	adc	r22, r1
    ef5e:	22 1f       	adc	r18, r18
    ef60:	74 9f       	mul	r23, r20
    ef62:	33 27       	eor	r19, r19
    ef64:	a0 0d       	add	r26, r0
    ef66:	61 1d       	adc	r22, r1
    ef68:	23 1f       	adc	r18, r19
    ef6a:	84 9f       	mul	r24, r20
    ef6c:	60 0d       	add	r22, r0
    ef6e:	21 1d       	adc	r18, r1
    ef70:	82 2f       	mov	r24, r18
    ef72:	76 2f       	mov	r23, r22
    ef74:	6a 2f       	mov	r22, r26
    ef76:	11 24       	eor	r1, r1
    ef78:	9f 57       	subi	r25, 0x7F	; 127
    ef7a:	50 40       	sbci	r21, 0x00	; 0
    ef7c:	8a f0       	brmi	.+34     	; 0xefa0 <__mulsf3_pse+0x84>
    ef7e:	e1 f0       	breq	.+56     	; 0xefb8 <__mulsf3_pse+0x9c>
    ef80:	88 23       	and	r24, r24
    ef82:	4a f0       	brmi	.+18     	; 0xef96 <__mulsf3_pse+0x7a>
    ef84:	ee 0f       	add	r30, r30
    ef86:	ff 1f       	adc	r31, r31
    ef88:	bb 1f       	adc	r27, r27
    ef8a:	66 1f       	adc	r22, r22
    ef8c:	77 1f       	adc	r23, r23
    ef8e:	88 1f       	adc	r24, r24
    ef90:	91 50       	subi	r25, 0x01	; 1
    ef92:	50 40       	sbci	r21, 0x00	; 0
    ef94:	a9 f7       	brne	.-22     	; 0xef80 <__mulsf3_pse+0x64>
    ef96:	9e 3f       	cpi	r25, 0xFE	; 254
    ef98:	51 05       	cpc	r21, r1
    ef9a:	70 f0       	brcs	.+28     	; 0xefb8 <__mulsf3_pse+0x9c>
    ef9c:	5c cf       	rjmp	.-328    	; 0xee56 <__fp_inf>
    ef9e:	a6 cf       	rjmp	.-180    	; 0xeeec <__fp_szero>
    efa0:	5f 3f       	cpi	r21, 0xFF	; 255
    efa2:	ec f3       	brlt	.-6      	; 0xef9e <__mulsf3_pse+0x82>
    efa4:	98 3e       	cpi	r25, 0xE8	; 232
    efa6:	dc f3       	brlt	.-10     	; 0xef9e <__mulsf3_pse+0x82>
    efa8:	86 95       	lsr	r24
    efaa:	77 95       	ror	r23
    efac:	67 95       	ror	r22
    efae:	b7 95       	ror	r27
    efb0:	f7 95       	ror	r31
    efb2:	e7 95       	ror	r30
    efb4:	9f 5f       	subi	r25, 0xFF	; 255
    efb6:	c1 f7       	brne	.-16     	; 0xefa8 <__mulsf3_pse+0x8c>
    efb8:	fe 2b       	or	r31, r30
    efba:	88 0f       	add	r24, r24
    efbc:	91 1d       	adc	r25, r1
    efbe:	96 95       	lsr	r25
    efc0:	87 95       	ror	r24
    efc2:	97 f9       	bld	r25, 7
    efc4:	08 95       	ret

0000efc6 <memcpy_P>:
    efc6:	fb 01       	movw	r30, r22
    efc8:	dc 01       	movw	r26, r24
    efca:	02 c0       	rjmp	.+4      	; 0xefd0 <memcpy_P+0xa>
    efcc:	05 90       	lpm	r0, Z+
    efce:	0d 92       	st	X+, r0
    efd0:	41 50       	subi	r20, 0x01	; 1
    efd2:	50 40       	sbci	r21, 0x00	; 0
    efd4:	d8 f7       	brcc	.-10     	; 0xefcc <memcpy_P+0x6>
    efd6:	08 95       	ret

0000efd8 <_exit>:
    efd8:	f8 94       	cli

0000efda <__stop_program>:
    efda:	ff cf       	rjmp	.-2      	; 0xefda <__stop_program>
