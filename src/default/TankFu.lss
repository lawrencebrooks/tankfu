
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000e708  0000e808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e708  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ecb  00800154  00800154  0000e874  2**5
                  ALLOC
  3 .stab         000008c4  00000000  00000000  0000e85c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ff  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f41f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000808  00000000  00000000  0000f430  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c20b  00000000  00000000  0000fc38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016ee  00000000  00000000  0001be43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029d6  00000000  00000000  0001d531  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001950  00000000  00000000  0001ff08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002372  00000000  00000000  00021858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aa00  00000000  00000000  00023bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000950  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 35 	jmp	0x6b62	; 0x6b62 <__ctors_end>
       4:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
       8:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
       c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      10:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      14:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      18:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      1c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      20:	0c 94 cb 3a 	jmp	0x7596	; 0x7596 <__vector_8>
      24:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      28:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      2c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      30:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      34:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__vector_13>
      38:	0c 94 c9 38 	jmp	0x7192	; 0x7192 <__vector_14>
      3c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      40:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      44:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      48:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      4c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      50:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      54:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      58:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      5c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      60:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      64:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      68:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>
      6c:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	af 3c b2 3c 0e 3d 12 3d 19 3d ba 3c bf 3c c4 3c     .<.<.=.=.=.<.<.<
      ce:	21 3d c7 3c ca 3c cd 3c 08 3d 0b 3d 31 3d           !=.<.<.<.=.=1=

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.3005>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.3007>:
      f5:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

000000fd <__c.3001>:
      fd:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

0000010c <__c.3003>:
     10c:	4f 4b 0d 0a 00                                      OK...

00000111 <__c.2997>:
     111:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     121:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     131:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

0000013d <__c.2999>:
     13d:	4f 4b 0d 0a 00                                      OK...

00000142 <__c.2993>:
     142:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     152:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000160 <__c.2995>:
     160:	4f 4b 0d 0a 00                                      OK...

00000165 <__c.2991>:
     165:	4f 4b 0d 0a 00                                      OK...

0000016a <__c.2987>:
     16a:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     17a:	0a 00                                               ..

0000017c <__c.2989>:
     17c:	4f 4b 0d 0a 00                                      OK...

00000181 <__c.2979>:
     181:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

0000018e <__c.2981>:
     18e:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

00000196 <__c.2975>:
     196:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001a5 <__c.2977>:
     1a5:	4f 4b 0d 0a 00                                      OK...

000001aa <__c.2971>:
     1aa:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1ba:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1ca:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001d8 <__c.2973>:
     1d8:	4f 4b 0d 0a 00                                      OK...

000001dd <__c.2969>:
     1dd:	4f 4b 0d 0a 00                                      OK...

000001e2 <__c.2962>:
     1e2:	4f 4b 0d 0a 00                                      OK...

000001e7 <__c.2960>:
     1e7:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     1f7:	0d 0a 00                                            ...

000001fa <__c.2956>:
     1fa:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     20a:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000217 <__c.2958>:
     217:	4f 4b 0d 0a 00                                      OK...

0000021c <__c.2952>:
     21c:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     22c:	0a 00                                               ..

0000022e <__c.2954>:
     22e:	4f 4b 0d 0a 00                                      OK...

00000233 <__c.2930>:
     233:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 39 32 30     AT+UART_CUR=1920
     243:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

0000024f <__c.2932>:
     24f:	4f 4b 0d 0a 00                                      OK...

00000254 <__c.2924>:
     254:	41 54 0d 0a 00                                      AT...

00000259 <__c.2926>:
     259:	4f 4b 0d 0a 00                                      OK...

0000025e <__c.2907>:
     25e:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

0000026c <__c.2909>:
     26c:	4f 4b 0d 0a 00                                      OK...

00000271 <__c.2903>:
     271:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000280 <__c.2905>:
     280:	4f 4b 0d 0a 00                                      OK...

00000285 <__c.2901>:
     285:	2b 2b 2b 00                                         +++.

00000289 <bauds>:
     289:	b9 00 7b 00 5c 00 3d 00 2e 00 1e 00 16 00 0f 00     ..{.\.=.........

00000299 <strCredits>:
     299:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     2a9:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2b9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2c9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     2d9:	4f 4b 53 00 00 00 00 00 4c 4f 4f 4b 49 4e 47 20     OKS.....LOOKING 
     2e9:	46 4f 52 20 57 49 46 49 20 44 45 56 49 43 45 2e     FOR WIFI DEVICE.
     2f9:	2e 2e 00 23 00                                      ...#.

000002fe <default_scores>:
     2fe:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     30e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000031c <default_handles>:
     31c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     32c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000033a <strLevels>:
     33a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     34a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     35a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     36a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     37a:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     38a:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     39a:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     3aa:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     3ba:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     3ca:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     3da:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000003ea <strPaused>:
     3ea:	50 41 55 53 45 44 00                                PAUSED.

000003f1 <strExit>:
     3f1:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000003fa <strTotal>:
     3fa:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000401 <strScore>:
     401:	53 43 4f 52 45 3a 00                                SCORE:.

00000408 <strFinalScore>:
     408:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000414 <strBy>:
     414:	42 59 00                                            BY.

00000417 <strOwns>:
     417:	4f 57 4e 53 00                                      OWNS.

0000041c <strChangeHandle>:
     41c:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

0000042b <strPlayer2>:
     42b:	50 32 00                                            P2.

0000042e <strPlayer1>:
     42e:	50 31 00                                            P1.

00000431 <strVertSep>:
     431:	3b 00                                               ;.

00000433 <strUnderline>:
     433:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000043f <strHandlesTitle>:
     43f:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000044b <strHighscores>:
     44b:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000455 <strCopyright>:
     455:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     465:	4f 4f 4b 53 00                                      OOKS.

0000046a <strSelectHandle>:
     46a:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

00000479 <strCancelHandle>:
     479:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000484 <strReset>:
     484:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     494:	20 53 4c 20 28 35 53 29 00                           SL (5S).

0000049d <strConfirmHandle>:
     49d:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     4ad:	54 00                                               T.

000004af <strNetworkError>:
     4af:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

000004bd <strEnterGameId>:
     4bd:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     4cd:	49 44 00                                            ID.

000004d0 <strConnecting>:
     4d0:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

000004de <strWaitingForNetOppenent>:
     4de:	57 41 49 54 49 4e 47 20 4f 4e 20 4c 41 4e 20 4f     WAITING ON LAN O
     4ee:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

000004f9 <strShareGameId>:
     4f9:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     509:	49 44 00                                            ID.

0000050c <strJoinNetGame>:
     50c:	4a 4f 49 4e 20 4c 41 4e 20 47 41 4d 45 00           JOIN LAN GAME.

0000051a <strHostNetGame>:
     51a:	48 4f 53 54 20 4c 41 4e 20 47 41 4d 45 00           HOST LAN GAME.

00000528 <str2Player>:
     528:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000539 <str1Player>:
     539:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000547 <my_patches>:
     547:	00 00 00 4f 06 00 00 00 00 00 00 00 38 06 00 00     ...O........8...
     557:	00 00 00 00 00 27 06 00 00 00 00 00 00 00 27 06     .....'........'.
     567:	00 00 00 00 00 00 00 27 06 00 00 00 00 00 00 00     .......'........
     577:	38 06 00 00 00 00 00 00 00 c0 06 00 00 00 00 00     8...............
     587:	00 00 8f 05 00 00 00 00                             ........

0000058f <ad_alarm>:
     58f:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     59f:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5af:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5bf:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5cf:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     5df:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     5ef:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     5ff:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     60f:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     61f:	01 03 01 01 05 00 00 ff                             ........

00000627 <ad_navigate>:
     627:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
     637:	ff                                                  .

00000638 <ad_cannonball>:
     638:	00 07 7f 00 08 32 00 02 03 00 00 f0 00 0c 0c 00     .....2..........
     648:	0b e8 08 00 e0 00 ff                                .......

0000064f <ad_brick_explode>:
     64f:	00 07 7f 00 02 03 00 00 ff 00 07 64 00 08 32 01     ...........d..2.
     65f:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     66f:	04 01 04 04 01 04 04 01 04 04 03 07 50 00 08 2d     ............P..-
     67f:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     68f:	04 04 01 04 04 01 04 04 01 04 04 03 07 3c 00 08     .............<..
     69f:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     6af:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     6bf:	ff                                                  .

000006c0 <ad_tank_explode>:
     6c0:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     6d0:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     6e0:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     6f0:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     700:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     710:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     720:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     730:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     740:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     750:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     760:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     770:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     780:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     790:	ff                                                  .

00000791 <level_data>:
     791:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     7a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     7c9:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     7e1:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     7f1:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     801:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     81d:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     82d:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     83d:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     859:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     879:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     889:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     899:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     8a9:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     8b9:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     8c9:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     8d9:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     8e9:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     8f9:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     909:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     919:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     929:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     939:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     949:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     961:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     971:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     98d:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     9a5:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     9c1:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     9d1:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     9e1:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     9fd:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     a0d:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a1d:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     a3d:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     a5d:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a6d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a7d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a8d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a9d:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ab9:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ad5:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     ae5:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     af5:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     b05:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     b15:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     b25:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     b35:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     b45:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     b55:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     b65:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     b75:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     b85:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     b95:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     ba5:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     bb5:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     bc5:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     bd5:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     be5:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     bf5:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     c05:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     c15:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     c25:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     c35:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     c45:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     c55:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     c65:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     c75:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     c85:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     c95:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     ca5:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     cb5:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     cc5:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     cd5:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     ce5:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     cf5:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     d05:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     d15:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d2d:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     d49:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     d59:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d69:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d79:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d89:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     da5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dc5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     de1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e01:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e1d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e3d:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e55:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     e71:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     e81:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     e91:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     ea1:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     eb1:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     ec1:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     ed1:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     ee1:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     ef1:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     f01:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     f11:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     f21:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     f31:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     f41:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     f51:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f61:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     f71:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f81:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     f9d:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
     fc1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     fe1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ffd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    101d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1039:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1049:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1059:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1069:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1079:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1089:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1099:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    10a9:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    10b9:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    10c9:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    10d9:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    10e9:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    10f9:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1109:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1119:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1129:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1139:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1149:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1159:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1169:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1185:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    119d:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    11ad:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    11bd:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    11cd:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    11e5:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    11f5:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1205:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1215:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1225:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1235:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    124d:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    125d:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    126d:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1285:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1295:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    12a5:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    12b5:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    12c5:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    12d5:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    12e5:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    12fd:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    130d:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1325:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1335:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1345:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1355:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1365:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    1381:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    139d:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    13bd:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    13cd:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13dd:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    13f9:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1419:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1435:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1455:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1465:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1475:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    1485:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    149d:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    14ad:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    14bd:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    14cd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    14dd:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14ed:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1509:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1519:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1529:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1539:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    1559:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    1575:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    1595:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    15ad:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    15bd:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    15d9:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    15f5:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1615:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1625:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1635:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1645:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1655:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1665:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    167d:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    168d:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    169d:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    16ad:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    16bd:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    16cd:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    16dd:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    16ed:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    16fd:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1725:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1735:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1745:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1755:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    176d:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    177d:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    178d:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    179d:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    17ad:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    17bd:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    17cd:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    17e5:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    17f5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1805:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1815:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1825:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1835:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1845:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1855:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1865:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1875:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1885:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1895:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18a5:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    18b5:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    18c5:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    18e1:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1905:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1915:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1925:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1935:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1945:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1955:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    196d:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    197d:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    198d:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    199d:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    19ad:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    19bd:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    19cd:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    19dd:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    19ed:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    19fd:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1a0d:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1a31:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a4d:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1a5d:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1a6d:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1a7d:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1a8d:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1a9d:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1aad:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1abd:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1ad5:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1ae5:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b01:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b21:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1b31:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1b41:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1b51:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1b61:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1b71:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1b81:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1b91:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1ba1:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1bb1:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1bc1:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1bd1:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1be1:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1bf1:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c01:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c11:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c21:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c31:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c4d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c69:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c89:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ca5:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1cb5:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1cc5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ce1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf9:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1d09:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1d19:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1d29:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1d39:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1d49:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1d59:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1d69:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1d79:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1d89:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1d99:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1da9:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1dc1:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1dd1:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1de1:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1df1:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e01:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1e11:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e2d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e49:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1e59:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1e69:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e85:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ea5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ec1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ee1:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ef1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f01:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f11:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1f39:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f59:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f75:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f95:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1fa5:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1fb5:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fd1:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1fed:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2005:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2015:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2025:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2035:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2045:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2055:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2065:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2075:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2085:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2095:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    20a5:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    20b5:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    20c5:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    20dd:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    20fd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2119:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2139:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2149:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2159:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2175:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2191:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21b1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21cd:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21dd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21ed:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21fd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    220d:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    221d:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2235:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2245:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2255:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2265:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2275:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2285:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2295:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    22ad:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    22bd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    22cd:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    22dd:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    22ed:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    22fd:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2319:	00 02 02 37 37 37 37 02 00 00 00 02 37 37 37 37     ...7777.....7777
    2329:	37 37 37 37 37 37 02 00 00 00 02 37 37 37 37 02     777777.....7777.
    2339:	02 4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d     .MMMM.....MMMMMM
    2349:	4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d     MMMM.....MMMM..M
    2359:	4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 2c 4d 4d 4d     MMM.....MMMM,MMM
    2369:	4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d 4d 4d     MM.....MMMM..MMM
    2379:	4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M.....MMMMMMMMMM
    2389:	02 00 00 00 02 4d 4d 4d 4d 02 02 37 37 37 37 02     .....MMMM..7777.
    2399:	00 00 00 02 37 37 37 37 37 37 37 37 37 37 02 00     ....7777777777..
    23a9:	00 00 02 37 37 37 37 02 02 00 00 00 00 00 00 00     ...7777.........
	...
    23cd:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    23dd:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    23ed:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    23fd:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2415:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2425:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2435:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2445:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2455:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2465:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2475:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    248d:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    249d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    24ad:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    24bd:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24cd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24dd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24ed:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    24fd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    250d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    251d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    252d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    253d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    254d:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    255d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    256d:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    257d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    258d:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    259d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25ad:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    25bd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    25cd:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    25dd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    25ed:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25fd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    260d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    261d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    262d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    263d:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    264d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    265d:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    267d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    269d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26b9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26d9:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    26f1:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2715:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2731:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2751:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    276d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    277d:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    278d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27a9:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27b9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27c9:	02 02                                               ..

000027cb <sprites_data>:
    27cb:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    27db:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    27eb:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    27fb:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    280b:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    281b:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    282b:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    283b:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    284b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    285b:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    286b:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    287b:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    288b:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    289b:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    28ab:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    28bb:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    28cb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28db:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    28eb:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    28fb:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    290b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    291b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    292b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    293b:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    294b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    295b:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    296b:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    297b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    298b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    299b:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29ab:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    29bb:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    29cb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29db:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    29eb:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    29fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a0b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a1b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a2b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a3b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a4b:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2a5b:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2a6b:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2a7b:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2a8b:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2a9b:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2aab:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2abb:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2acb:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2adb:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2aeb:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2afb:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2b0b:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2b1b:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2b2b:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2b3b:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2b4b:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2b5b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2b6b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2b7b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b8b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b9b:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2bab:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2bbb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bcb:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2bdb:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2beb:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2bfb:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c0b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c1b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c2b:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2c3b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c4b:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2c5b:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2c6b:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2c7b:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2c8b:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2c9b:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2cab:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2cbb:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2ccb:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2cdb:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2ceb:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2cfb:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2d0b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d1b:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d2b:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2d3b:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2d4b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d5b:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2d6b:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2d7b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d8b:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d9b:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2dab:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2dbb:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2dcb:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2ddb:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2deb:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2dfb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e0b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e1b:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2e2b:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2e3b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e4b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e5b:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2e6b:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2e7b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e8b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e9b:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2eab:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2ebb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ecb:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2edb:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2eeb:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2efb:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2f0b:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2f1b:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2f2b:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2f3b:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2f4b:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2f5b:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2f6b:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2f7b:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2f8b:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2f9b:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2fab:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fbb:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fcb:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2fdb:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2feb:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2ffb:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    300b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    301b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    302b:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    303b:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    304b:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    305b:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    306b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    307b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    308b:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    309b:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    30ab:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    30bb:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    30cb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30db:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000310b <map_sub_turret>:
    310b:	01 01 23                                            ..#

0000310e <map_sub_shot>:
    310e:	01 01 1b                                            ...

00003111 <map_up_arrow>:
    3111:	01 01 22                                            .."

00003114 <map_down_arrow>:
    3114:	01 01 21                                            ..!

00003117 <map_right_arrow>:
    3117:	01 01 20                                            .. 

0000311a <map_rocket_right_1>:
    311a:	01 01 1a                                            ...

0000311d <map_rocket_right_0>:
    311d:	01 01 19                                            ...

00003120 <map_rocket_up_1>:
    3120:	01 01 18                                            ...

00003123 <map_rocket_up_0>:
    3123:	01 01 17                                            ...

00003126 <map_ball>:
    3126:	01 01 16                                            ...

00003129 <map_explosion_2>:
    3129:	02 02 08 09 09 08                                   ......

0000312f <map_explosion_1>:
    312f:	02 02 06 07 10 11                                   ......

00003135 <map_explosion_0>:
    3135:	02 02 04 05 0e 0f                                   ......

0000313b <map_tank2_right_0>:
    313b:	02 02 14 15 1e 1f                                   ......

00003141 <map_tank2_up_0>:
    3141:	02 02 12 13 1c 1d                                   ......

00003147 <map_tank1_right_0>:
    3147:	02 02 02 03 0c 0d                                   ......

0000314d <map_tank1_up_0>:
    314d:	02 02 00 01 0a 0b                                   ......

00003153 <map_tank_blank>:
    3153:	02 02 24 24 24 24                                   ..$$$$

00003159 <map_none>:
    3159:	01 01 24                                            ..$

0000315c <tiles_data>:
	...
    319c:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    31ac:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    31bc:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    31cc:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    31dc:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    31ec:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    31fc:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    320c:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    321c:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    322c:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    323c:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    324c:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    325c:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    326c:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    327c:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    328c:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    329c:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    32ac:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    32bc:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    32cc:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    32e4:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    32f4:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3304:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    331c:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    332c:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    333c:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    334c:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3364:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3384:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    339c:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    33ac:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    33bc:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    33cc:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    33dc:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    33ec:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    33fc:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    340c:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    341c:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    342c:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    343c:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    344c:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    345c:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    346c:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    347c:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    348c:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    349c:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34ac:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34bc:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    34cc:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    34dc:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    34ec:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    34fc:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    350c:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    351c:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    352c:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    353c:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    354c:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    355c:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    356c:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    357c:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    358c:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    359c:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    35ac:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    35bc:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    35cc:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    35dc:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    35ec:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    35fc:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    360c:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    361c:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    362c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    363c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    364c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    365c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    366c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    367c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    368c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    36bc:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    36cc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36dc:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    36ec:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    36fc:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    370c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    371c:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    372c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    373c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    374c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    375c:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    376c:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    377c:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    378c:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    379c:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    37ac:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    37bc:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37cc:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    37dc:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37ec:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37fc:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    380c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    381c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    382c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    385c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    386c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    387c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    388c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    389c:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    38ac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38bc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38cc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38dc:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    391c:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    392c:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    393c:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    394c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    395c:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    396c:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    397c:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    398c:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    39cc:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3a04:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3a14:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3a24:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3a34:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3a44:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    3a54:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    3a64:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    3a74:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    3a84:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    3a94:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    3aa4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ab4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ac4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ad4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ae4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3af4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b14:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3b24:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3b34:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3b44:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3b54:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3b64:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3b74:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3b84:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3b94:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3ba4:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bdc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3bec:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3bfc:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3c20:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3c30:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3c40:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3c50:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3c60:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3c70:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3c80:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3c90:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3ca0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cb0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cc0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cd0:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3ce0:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3cf0:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d00:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d10:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3d20:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3d30:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d40:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d50:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3d60:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3d70:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d80:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d90:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3da0:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3db0:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3dc0:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3dd0:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3de0:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3df0:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3e00:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3e10:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3e20:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e30:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e40:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3e50:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3e60:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e70:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e80:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3e90:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3ea0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3eb0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3ec0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3ed0:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3ee0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3ef0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f00:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f10:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3f20:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3f30:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f40:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f50:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f60:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3f70:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f80:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f90:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3fa0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3fb0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fc0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fd0:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    3fe0:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    3ff0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4000:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4010:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4020:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4030:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4040:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4050:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4060:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4070:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4080:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4090:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    40a0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    40d0:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    40e0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40f0:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4100:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4110:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4120:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4130:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4140:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4150:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    4160:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4170:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    4180:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    4190:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    41a0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41b0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    41c0:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    41d0:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    41e0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41f0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4200:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4210:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4220:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4230:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4240:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    4250:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    4260:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4270:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4280:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4290:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    42a0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42c0:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    42d0:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    42e0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42f0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4300:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    4310:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4320:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4330:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4340:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4350:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4360:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4370:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4380:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4390:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43a0:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43b0:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    43c0:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    43d0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43e0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43f0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4400:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4410:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4420:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    4430:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    4440:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4450:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4460:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4470:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    4480:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    4490:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    44a0:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44d0:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    44e0:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    44f0:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4500:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4510:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    4520:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    4530:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    4540:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    4550:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    4560:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4570:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4580:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4590:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    45a0:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    45b0:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    45c0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45d0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    45e0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    45f0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4600:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4610:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    4620:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    4630:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    4640:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4650:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    4660:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4670:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4680:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4690:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    46a0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46c0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    46d0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    46e0:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46f0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4700:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    4710:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    4720:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4730:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4740:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4750:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    4760:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    4770:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    4780:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4790:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    47a0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    47b0:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    47c0:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    47d0:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    47e0:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    47f0:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    4800:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4810:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    4820:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    4830:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    4840:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    4850:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    4860:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4870:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4880:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4890:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    48a0:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    48b0:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48d0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    48e0:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    48f0:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4900:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4910:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4920:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4930:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4940:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4950:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4960:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4970:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4980:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4990:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    49a0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    49b0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    49c0:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    49d0:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    49e0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    49f0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a00:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a10:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a20:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a30:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a40:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a50:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a60:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    4a70:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    4a80:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    4a90:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    4aa0:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4ab0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ac0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4ad0:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4ae0:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4af0:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4b00:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4b10:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4b20:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4b30:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4b40:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4b50:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4b60:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b70:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4b80:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4b90:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4ba0:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bb0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bc0:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4bd0:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4be0:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bf0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c00:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4c10:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4c20:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c30:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c40:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c50:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4c60:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c70:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c80:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4c90:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4ca0:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4cb0:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cc0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4cd0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4ce0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cf0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4d00:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4d10:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d20:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d30:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4d40:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4d50:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4d60:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4d70:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4d80:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4d90:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4da0:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4db0:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dc0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4dd0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4de0:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4df0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4e00:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e10:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4e20:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4e30:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4e40:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4e50:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4e60:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4e70:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4e80:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e90:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4ea0:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4eb0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ec0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4ed0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4ee0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4ef0:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4f00:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4f10:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f20:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4f30:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f40:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f50:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f60:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f70:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f80:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f90:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    4fa0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fb0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fc0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fd0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4fe0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4ff0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5000:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5010:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5020:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5030:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5040:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5050:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5060:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5070:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5080:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5090:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    50a0:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    50b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50c0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50d0:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    50e0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    50f0:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5100:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5110:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5120:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5130:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5140:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5150:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5160:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5170:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5180:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5190:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    51a0:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    51b0:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    51c0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51d0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    51e0:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    51f0:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5200:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5210:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5220:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5230:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5240:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5250:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5260:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5270:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5280:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5290:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    52a0:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52b0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52c0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52d0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    52e0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52f0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5300:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5310:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5320:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5330:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5340:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5350:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5360:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5370:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5380:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5390:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53a0:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    53b0:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53e0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    53f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5400:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5410:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5420:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    5430:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5440:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5450:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5460:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5470:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5480:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5490:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    54a0:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    54e0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54f0:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    5500:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5510:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5520:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5530:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5540:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    5550:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5560:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5570:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5580:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5590:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    55a0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    55b0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    55c0:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    55d0:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    55e0:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    55f0:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    5600:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5610:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5620:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5630:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5640:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5650:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5660:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5670:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5680:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5690:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56a0:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    56b0:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56c0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    56d0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    5700:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5710:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5720:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5730:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5740:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5750:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5760:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5770:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5780:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5790:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    57a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    57d0:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    57e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5800:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    5810:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    5864:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5874:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    588c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58b4:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    58e4:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    58f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5904:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    591c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    592c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    593c:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    594c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5964:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5974:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5984:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    599c:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    59ac:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    59bc:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    59cc:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    59e4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59f4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a28:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5a38:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5a48:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5a64:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5a74:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a84:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5aa4:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5ab4:	df df df df df df df df 00 00 df df df df 00 00     ................
    5ac4:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5ae4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5af4:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5b04:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b44:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b54:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b74:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5bc4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5be8:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5bf8:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5c08:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c24:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5c34:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5c44:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5c64:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5c74:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5c84:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5ca4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5cb4:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5cc4:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5ce4:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5cf4:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5d04:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d28:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5d38:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5d48:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5d64:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5d74:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5d84:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5da4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5db4:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5dc4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5de4:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5df4:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5e04:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5e24:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e34:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e44:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e64:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e74:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5e84:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5eac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5ec4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5edc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5eec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5efc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f0c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f1c:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f2c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f3c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5f4c:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f6c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f84:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f9c:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fac:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5fbc:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fcc:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5fe4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ff4:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    600c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6024:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6034:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6044:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6064:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6074:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6084:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    60a4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60b4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60c4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    60e4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60f4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6104:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6124:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6134:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6144:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6164:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6174:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6184:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    61a4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61b4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    61e4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61f4:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6204:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6224:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6234:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6244:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6264:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6274:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6284:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    62a8:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    62b8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    62c8:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    62e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    62f4:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6304:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6324:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6334:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6344:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6364:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    6374:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6384:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    63a4:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    63b4:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    63c4:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    63e4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6404:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6424:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6434:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6444:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6464:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6474:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6484:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    64a4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64b4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64c4:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    64e4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    64f4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6504:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6524:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6534:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6544:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6564:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6574:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6584:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    65a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65b4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65c4:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65e4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    65f4:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6604:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6624:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6634:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    6644:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6664:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6674:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    6684:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66a4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    66b4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    66c4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    66e4:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    66f4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6704:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6724:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6734:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    6744:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    6764:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6774:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6784:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    67a8:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    67b8:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    680c:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000681c <map_sub_emerging>:
    681c:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    682c:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    683c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    684c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    685c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    686c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    687c:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    688c:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    689c:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    68ac:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    68bc:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    68cc:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    68dc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68ec:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    68fc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    690c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    691c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    692c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    693c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    694c:	0d 0d 0d 0d 0d 0d                                   ......

00006952 <map_sub>:
    6952:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6962:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    6972:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6982:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6992:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69a2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    69b2:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    69c2:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    69d2:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    69e2:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    69f2:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    6a02:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6a12:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a22:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6a32:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a42:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a52:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a62:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a72:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a82:	0d 0d 0d 0d 0d 0d                                   ......

00006a88 <map_scope_2>:
    6a88:	01 01 12                                            ...

00006a8b <map_scope_1>:
    6a8b:	01 01 11                                            ...

00006a8e <map_scope_0>:
    6a8e:	01 01 10                                            ...

00006a91 <map_blue_tank>:
    6a91:	02 02 2b 2c 31 32                                   ..+,12

00006a97 <map_green_tank>:
    6a97:	02 02 18 19 23 24                                   ....#$

00006a9d <map_fence>:
    6a9d:	01 01 0f                                            ...

00006aa0 <map_turf>:
    6aa0:	01 01 0e                                            ...

00006aa3 <map_water>:
    6aa3:	01 01 0d                                            ...

00006aa6 <map_metal_bl>:
    6aa6:	01 01 0c                                            ...

00006aa9 <map_metal_tr>:
    6aa9:	01 01 0b                                            ...

00006aac <map_metal_br>:
    6aac:	01 01 0a                                            ...

00006aaf <map_metal_tl>:
    6aaf:	01 01 09                                            ...

00006ab2 <map_tile_exp_2>:
    6ab2:	01 01 08                                            ...

00006ab5 <map_tile_exp_1>:
    6ab5:	01 01 07                                            ...

00006ab8 <map_tile_exp_0>:
    6ab8:	01 01 06                                            ...

00006abb <map_rocket_itm>:
    6abb:	01 01 04                                            ...

00006abe <map_explode_itm>:
    6abe:	01 01 03                                            ...

00006ac1 <map_speed_itm>:
    6ac1:	01 01 02                                            ...

00006ac4 <map_metal>:
    6ac4:	01 01 05                                            ...

00006ac7 <map_brick>:
    6ac7:	01 01 01                                            ...

00006aca <map_splash>:
    6aca:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6ada:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6aea:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6afa:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6b0a:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6b1a:	1a 00 00 1a 2f 30                                   ..../0

00006b20 <map_pause>:
    6b20:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6b30:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6b40:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6b50:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006b5e <map_tile_none>:
    6b5e:	01 01 00 00                                         ....

00006b62 <__ctors_end>:
    6b62:	11 24       	eor	r1, r1
    6b64:	1f be       	out	0x3f, r1	; 63
    6b66:	cf ef       	ldi	r28, 0xFF	; 255
    6b68:	d0 e1       	ldi	r29, 0x10	; 16
    6b6a:	de bf       	out	0x3e, r29	; 62
    6b6c:	cd bf       	out	0x3d, r28	; 61

00006b6e <__do_copy_data>:
    6b6e:	11 e0       	ldi	r17, 0x01	; 1
    6b70:	a0 e0       	ldi	r26, 0x00	; 0
    6b72:	b1 e0       	ldi	r27, 0x01	; 1
    6b74:	e8 e0       	ldi	r30, 0x08	; 8
    6b76:	f7 ee       	ldi	r31, 0xE7	; 231
    6b78:	02 c0       	rjmp	.+4      	; 0x6b7e <__do_copy_data+0x10>
    6b7a:	05 90       	lpm	r0, Z+
    6b7c:	0d 92       	st	X+, r0
    6b7e:	a4 35       	cpi	r26, 0x54	; 84
    6b80:	b1 07       	cpc	r27, r17
    6b82:	d9 f7       	brne	.-10     	; 0x6b7a <__do_copy_data+0xc>

00006b84 <__do_clear_bss>:
    6b84:	10 e1       	ldi	r17, 0x10	; 16
    6b86:	a4 e5       	ldi	r26, 0x54	; 84
    6b88:	b1 e0       	ldi	r27, 0x01	; 1
    6b8a:	01 c0       	rjmp	.+2      	; 0x6b8e <.do_clear_bss_start>

00006b8c <.do_clear_bss_loop>:
    6b8c:	1d 92       	st	X+, r1

00006b8e <.do_clear_bss_start>:
    6b8e:	af 31       	cpi	r26, 0x1F	; 31
    6b90:	b1 07       	cpc	r27, r17
    6b92:	e1 f7       	brne	.-8      	; 0x6b8c <.do_clear_bss_loop>

00006b94 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6b94:	0e 94 9e 3a 	call	0x753c	; 0x753c <wdt_randomize>
#endif

    MCUSR = 0;
    6b98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6b9a:	88 e1       	ldi	r24, 0x18	; 24
    6b9c:	0f b6       	in	r0, 0x3f	; 63
    6b9e:	f8 94       	cli
    6ba0:	80 93 60 00 	sts	0x0060, r24
    6ba4:	10 92 60 00 	sts	0x0060, r1
    6ba8:	0f be       	out	0x3f, r0	; 63

00006baa <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6baa:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <isEepromFormatted>
    6bae:	81 11       	cpse	r24, r1
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <Initialize+0xc>
    6bb2:	0e 94 3e 3b 	call	0x767c	; 0x767c <FormatEeprom>

	cli();
    6bb6:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6bb8:	c1 e0       	ldi	r28, 0x01	; 1
    6bba:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    6bbe:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6bc2:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6bc6:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <InitUartRxBuffer>
		InitUartTxBuffer();
    6bca:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6bce:	10 92 44 0a 	sts	0x0A44, r1
    6bd2:	10 92 4a 0a 	sts	0x0A4A, r1
    6bd6:	10 92 50 0a 	sts	0x0A50, r1
    6bda:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6bde:	10 92 1e 0a 	sts	0x0A1E, r1
	sync_flags=0;
    6be2:	10 92 20 0a 	sts	0x0A20, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6be6:	82 e1       	ldi	r24, 0x12	; 18
    6be8:	80 93 1f 0a 	sts	0x0A1F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6bec:	80 ee       	ldi	r24, 0xE0	; 224
    6bee:	80 93 26 0a 	sts	0x0A26, r24
	first_render_line=FIRST_RENDER_LINE;
    6bf2:	84 e1       	ldi	r24, 0x14	; 20
    6bf4:	80 93 25 0a 	sts	0x0A25, r24

	joypad1_status_hi=0;
    6bf8:	10 92 2a 0a 	sts	0x0A2A, r1
    6bfc:	10 92 29 0a 	sts	0x0A29, r1
	joypad2_status_hi=0;
    6c00:	10 92 2e 0a 	sts	0x0A2E, r1
    6c04:	10 92 2d 0a 	sts	0x0A2D, r1
	sound_enabled=1;
    6c08:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    6c0c:	0e 94 78 48 	call	0x90f0	; 0x90f0 <InitializeVideoMode>
    6c10:	80 e7       	ldi	r24, 0x70	; 112
    6c12:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6c14:	fc 01       	movw	r30, r24
    6c16:	25 91       	lpm	r18, Z+
    6c18:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6c1a:	f9 01       	movw	r30, r18
    6c1c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6c1e:	30 83       	st	Z, r19
    6c20:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	8e 39       	cpi	r24, 0x9E	; 158
    6c26:	92 07       	cpc	r25, r18
    6c28:	a9 f7       	brne	.-22     	; 0x6c14 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6c2a:	78 94       	sei
	
	DisplayLogo();
    6c2c:	0e 94 77 48 	call	0x90ee	; 0x90ee <DisplayLogo>
    6c30:	0e 94 6f 6f 	call	0xdede	; 0xdede <main>
    6c34:	0c 94 82 73 	jmp	0xe704	; 0xe704 <_exit>

00006c38 <__bad_interrupt>:
    6c38:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006c3c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6c3c:	0b e9       	ldi	r16, 0x9B	; 155
    6c3e:	0a 95       	dec	r16
    6c40:	f1 f7       	brne	.-4      	; 0x6c3e <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    6c42:	00 91 0d 0a 	lds	r16, 0x0A0D

		ldi ZL,lo8(ram_tiles_restore);
    6c46:	e0 ed       	ldi	r30, 0xD0	; 208
		ldi ZH,hi8(ram_tiles_restore);
    6c48:	f9 e0       	ldi	r31, 0x09	; 9
		ldi r18,3
    6c4a:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6c4c:	02 9f       	mul	r16, r18
		add ZL,r0
    6c4e:	e0 0d       	add	r30, r0
		adc ZH,r1
    6c50:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6c52:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c54:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6c56:	20 91 0c 0a 	lds	r18, 0x0A0C
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6c5a:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6c5c:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6c5e:	30 0f       	add	r19, r16

		cp r18,r16
    6c60:	20 17       	cp	r18, r16
		breq no_ramtiles
    6c62:	51 f0       	breq	.+20     	; 0x6c78 <no_ramtiles>
		nop
    6c64:	00 00       	nop
	...

00006c68 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6c68:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6c6a:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6c6c:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6c6e:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6c70:	0c 93       	st	X, r16

		inc r16
    6c72:	03 95       	inc	r16
		cp r16,r18
    6c74:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6c76:	c0 f3       	brcs	.-16     	; 0x6c68 <upd_loop>

00006c78 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6c78:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6c7a:	1a 95       	dec	r17
		brne .-4
    6c7c:	f1 f7       	brne	.-4      	; 0x6c7a <no_ramtiles+0x2>
		rjmp .
    6c7e:	00 c0       	rjmp	.+0      	; 0x6c80 <no_ramtiles+0x8>
		dec r19
    6c80:	3a 95       	dec	r19
		brne 1b
    6c82:	d1 f7       	brne	.-12     	; 0x6c78 <no_ramtiles>
		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1

#endif


		lds r2,overlay_tile_table
    6c84:	20 90 1b 0a 	lds	r2, 0x0A1B
		lds r3,overlay_tile_table+1
    6c88:	30 90 1c 0a 	lds	r3, 0x0A1C
		lds r16,tile_table_lo 
    6c8c:	00 91 17 0a 	lds	r16, 0x0A17
		lds r17,tile_table_hi
    6c90:	10 91 18 0a 	lds	r17, 0x0A18
		movw r12,r16
    6c94:	68 01       	movw	r12, r16
		movw r6,r16
    6c96:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6c98:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6c9a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c9c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6c9e:	4e 01       	movw	r8, r28
		clr r0
    6ca0:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6ca2:	30 91 1a 0a 	lds	r19, 0x0A1A
		cpi r19,0
    6ca6:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6ca8:	09 f0       	breq	.+2      	; 0x6cac <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    6caa:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6cac:	09 f0       	breq	.+2      	; 0x6cb0 <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    6cae:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6cb0:	09 f0       	breq	.+2      	; 0x6cb4 <no_ramtiles+0x3c>
		mov r24,r19
    6cb2:	83 2f       	mov	r24, r19

		breq .+2
    6cb4:	09 f0       	breq	.+2      	; 0x6cb8 <no_ramtiles+0x40>
		movw r12,r2
    6cb6:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6cb8:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6cba:	a0 2e       	mov	r10, r16
		clr r22
    6cbc:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6cbe:	78 e0       	ldi	r23, 0x08	; 8

00006cc0 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6cc0:	0a d3       	rcall	.+1556   	; 0x72d6 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6cc2:	3c e0       	ldi	r19, 0x0C	; 12
    6cc4:	3a 95       	dec	r19
    6cc6:	f1 f7       	brne	.-4      	; 0x6cc4 <next_tile_line+0x4>
    6cc8:	00 00       	nop

		;***draw line***
		call render_tile_line
    6cca:	0e 94 94 36 	call	0x6d28	; 0x6d28 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6cce:	3f e0       	ldi	r19, 0x0F	; 15
    6cd0:	3a 95       	dec	r19
    6cd2:	f1 f7       	brne	.-4      	; 0x6cd0 <next_tile_line+0x10>
    6cd4:	00 c0       	rjmp	.+0      	; 0x6cd6 <next_tile_line+0x16>

		dec r10
    6cd6:	aa 94       	dec	r10
		breq frame_end
    6cd8:	a1 f0       	breq	.+40     	; 0x6d02 <frame_end>
	
		inc r22
    6cda:	63 95       	inc	r22
		lpm ;3 nop
    6cdc:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6cde:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6ce0:	29 f0       	breq	.+10     	; 0x6cec <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6ce2:	33 e0       	ldi	r19, 0x03	; 3
    6ce4:	3a 95       	dec	r19
    6ce6:	f1 f7       	brne	.-4      	; 0x6ce4 <next_tile_line+0x24>
    6ce8:	00 c0       	rjmp	.+0      	; 0x6cea <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6cea:	ea cf       	rjmp	.-44     	; 0x6cc0 <next_tile_line>

00006cec <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6cec:	66 27       	eor	r22, r22

		clr r0
    6cee:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6cf0:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6cf2:	c3 0f       	add	r28, r19
		adc YH,r0
    6cf4:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6cf6:	8a 95       	dec	r24
		brne .+2
    6cf8:	09 f4       	brne	.+2      	; 0x6cfc <next_tile_row+0x10>
		movw YL,r8	;main vram
    6cfa:	e4 01       	movw	r28, r8
		brne .+2
    6cfc:	09 f4       	brne	.+2      	; 0x6d00 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6cfe:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6d00:	df cf       	rjmp	.-66     	; 0x6cc0 <next_tile_line>

00006d02 <frame_end>:

	frame_end:

		WAIT r19,18
    6d02:	36 e0       	ldi	r19, 0x06	; 6
    6d04:	3a 95       	dec	r19
    6d06:	f1 f7       	brne	.-4      	; 0x6d04 <frame_end+0x2>

		rcall hsync_pulse ;145
    6d08:	e6 d2       	rcall	.+1484   	; 0x72d6 <hsync_pulse>
	
#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
		clr r1
    6d0a:	11 24       	eor	r1, r1
		call RestoreBackground
    6d0c:	0e 94 10 38 	call	0x7020	; 0x7020 <RestoreBackground>
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6d10:	e0 91 20 0a 	lds	r30, 0x0A20
		ldi r20,SYNC_FLAG_FIELD
    6d14:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6d16:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6d18:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6d1a:	e0 93 20 0a 	sts	0x0A20, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6d1e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6d20:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6d24:	11 24       	eor	r1, r1


		ret
    6d26:	08 95       	ret

00006d28 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6d28:	de 01       	movw	r26, r28

		mul r22,r23
    6d2a:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6d2c:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d2e:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d30:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6d32:	00 0d       	add	r16, r0
		adc r17,r1
    6d34:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6d36:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6d38:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6d3a:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6d3c:	00 0d       	add	r16, r0
		adc r17,r1
    6d3e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6d40:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6d42:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6d44:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6d46:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6d48:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6d4a:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6d4c:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    6d4e:	08 f4       	brcc	.+2      	; 0x6d52 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6d50:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6d52:	04 0e       	add	r0, r20
	    adc r1,r21
    6d54:	15 1e       	adc	r1, r21

		movw ZL,r0
    6d56:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6d58:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    6d5a:	f0 f0       	brcs	.+60     	; 0x6d98 <ramloop>

00006d5c <romloop>:
	

	romloop:
	    lpm r16,Z+
    6d5c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d5e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d60:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6d62:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6d64:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d66:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6d68:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6d6a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6d6c:	24 31       	cpi	r18, 0x14	; 20
		nop
    6d6e:	00 00       	nop

	    lpm r16,Z+
    6d70:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d72:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6d74:	08 f4       	brcc	.+2      	; 0x6d78 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6d76:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6d78:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6d7a:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6d7c:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6d7e:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6d80:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6d82:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6d84:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    6d86:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6d88:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6d8a:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6d8c:	05 91       	lpm	r16, Z+

		breq end	
    6d8e:	31 f1       	breq	.+76     	; 0x6ddc <end>
	    movw ZL,r0   	;copy next tile adress
    6d90:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d92:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6d94:	18 f7       	brcc	.-58     	; 0x6d5c <romloop>
	
		rjmp .
    6d96:	00 c0       	rjmp	.+0      	; 0x6d98 <ramloop>

00006d98 <ramloop>:

	ramloop:

	    ld r16,Z+
    6d98:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d9a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d9c:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6d9e:	01 91       	ld	r16, Z+
		nop   
    6da0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6da2:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6da4:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6da6:	01 91       	ld	r16, Z+
		nop
    6da8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6daa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6dac:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    6dae:	00 c0       	rjmp	.+0      	; 0x6db0 <ramloop+0x18>

	    ld r16,Z+
    6db0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6db2:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6db4:	08 f0       	brcs	.+2      	; 0x6db8 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6db6:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6db8:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6dba:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6dbc:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6dbe:	15 1e       	adc	r1, r21
		rjmp .
    6dc0:	00 c0       	rjmp	.+0      	; 0x6dc2 <ramloop+0x2a>
    
		ld r16,Z+		
    6dc2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6dc4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6dc6:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    6dc8:	00 c0       	rjmp	.+0      	; 0x6dca <ramloop+0x32>

	    ld r16,Z+	
    6dca:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6dcc:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6dce:	01 91       	ld	r16, Z+

	    dec r17
    6dd0:	1a 95       	dec	r17
	    breq end
    6dd2:	21 f0       	breq	.+8      	; 0x6ddc <end>
	
		movw ZL,r0
    6dd4:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6dd6:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6dd8:	08 f6       	brcc	.-126    	; 0x6d5c <romloop>
		rjmp ramloop
    6dda:	de cf       	rjmp	.-68     	; 0x6d98 <ramloop>

00006ddc <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6ddc:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6dde:	00 27       	eor	r16, r16
		lpm	
    6de0:	c8 95       	lpm
		nop
    6de2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6de4:	08 b9       	out	0x08, r16	; 8

		ret
    6de6:	08 95       	ret

00006de8 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6de8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6dea:	e0 91 17 0a 	lds	r30, 0x0A17
	lds ZH,tile_table_hi
    6dee:	f0 91 18 0a 	lds	r31, 0x0A18
	mul r24,r18
    6df2:	82 9f       	mul	r24, r18
	add ZL,r0
    6df4:	e0 0d       	add	r30, r0
	adc ZH,r1
    6df6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6df8:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6dfa:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6dfc:	62 9f       	mul	r22, r18
	add XL,r0
    6dfe:	a0 0d       	add	r26, r0
	adc XH,r1
    6e00:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6e02:	15 90       	lpm	r1, Z+
    6e04:	1d 92       	st	X+, r1
    6e06:	15 90       	lpm	r1, Z+
    6e08:	1d 92       	st	X+, r1
    6e0a:	15 90       	lpm	r1, Z+
    6e0c:	1d 92       	st	X+, r1
    6e0e:	15 90       	lpm	r1, Z+
    6e10:	1d 92       	st	X+, r1
    6e12:	15 90       	lpm	r1, Z+
    6e14:	1d 92       	st	X+, r1
    6e16:	15 90       	lpm	r1, Z+
    6e18:	1d 92       	st	X+, r1
    6e1a:	15 90       	lpm	r1, Z+
    6e1c:	1d 92       	st	X+, r1
    6e1e:	15 90       	lpm	r1, Z+
    6e20:	1d 92       	st	X+, r1
    6e22:	15 90       	lpm	r1, Z+
    6e24:	1d 92       	st	X+, r1
    6e26:	15 90       	lpm	r1, Z+
    6e28:	1d 92       	st	X+, r1
    6e2a:	15 90       	lpm	r1, Z+
    6e2c:	1d 92       	st	X+, r1
    6e2e:	15 90       	lpm	r1, Z+
    6e30:	1d 92       	st	X+, r1
    6e32:	15 90       	lpm	r1, Z+
    6e34:	1d 92       	st	X+, r1
    6e36:	15 90       	lpm	r1, Z+
    6e38:	1d 92       	st	X+, r1
    6e3a:	15 90       	lpm	r1, Z+
    6e3c:	1d 92       	st	X+, r1
    6e3e:	15 90       	lpm	r1, Z+
    6e40:	1d 92       	st	X+, r1
    6e42:	15 90       	lpm	r1, Z+
    6e44:	1d 92       	st	X+, r1
    6e46:	15 90       	lpm	r1, Z+
    6e48:	1d 92       	st	X+, r1
    6e4a:	15 90       	lpm	r1, Z+
    6e4c:	1d 92       	st	X+, r1
    6e4e:	15 90       	lpm	r1, Z+
    6e50:	1d 92       	st	X+, r1
    6e52:	15 90       	lpm	r1, Z+
    6e54:	1d 92       	st	X+, r1
    6e56:	15 90       	lpm	r1, Z+
    6e58:	1d 92       	st	X+, r1
    6e5a:	15 90       	lpm	r1, Z+
    6e5c:	1d 92       	st	X+, r1
    6e5e:	15 90       	lpm	r1, Z+
    6e60:	1d 92       	st	X+, r1
    6e62:	15 90       	lpm	r1, Z+
    6e64:	1d 92       	st	X+, r1
    6e66:	15 90       	lpm	r1, Z+
    6e68:	1d 92       	st	X+, r1
    6e6a:	15 90       	lpm	r1, Z+
    6e6c:	1d 92       	st	X+, r1
    6e6e:	15 90       	lpm	r1, Z+
    6e70:	1d 92       	st	X+, r1
    6e72:	15 90       	lpm	r1, Z+
    6e74:	1d 92       	st	X+, r1
    6e76:	15 90       	lpm	r1, Z+
    6e78:	1d 92       	st	X+, r1
    6e7a:	15 90       	lpm	r1, Z+
    6e7c:	1d 92       	st	X+, r1
    6e7e:	15 90       	lpm	r1, Z+
    6e80:	1d 92       	st	X+, r1
    6e82:	15 90       	lpm	r1, Z+
    6e84:	1d 92       	st	X+, r1
    6e86:	15 90       	lpm	r1, Z+
    6e88:	1d 92       	st	X+, r1
    6e8a:	15 90       	lpm	r1, Z+
    6e8c:	1d 92       	st	X+, r1
    6e8e:	15 90       	lpm	r1, Z+
    6e90:	1d 92       	st	X+, r1
    6e92:	15 90       	lpm	r1, Z+
    6e94:	1d 92       	st	X+, r1
    6e96:	15 90       	lpm	r1, Z+
    6e98:	1d 92       	st	X+, r1
    6e9a:	15 90       	lpm	r1, Z+
    6e9c:	1d 92       	st	X+, r1
    6e9e:	15 90       	lpm	r1, Z+
    6ea0:	1d 92       	st	X+, r1
    6ea2:	15 90       	lpm	r1, Z+
    6ea4:	1d 92       	st	X+, r1
    6ea6:	15 90       	lpm	r1, Z+
    6ea8:	1d 92       	st	X+, r1
    6eaa:	15 90       	lpm	r1, Z+
    6eac:	1d 92       	st	X+, r1
    6eae:	15 90       	lpm	r1, Z+
    6eb0:	1d 92       	st	X+, r1
    6eb2:	15 90       	lpm	r1, Z+
    6eb4:	1d 92       	st	X+, r1
    6eb6:	15 90       	lpm	r1, Z+
    6eb8:	1d 92       	st	X+, r1
    6eba:	15 90       	lpm	r1, Z+
    6ebc:	1d 92       	st	X+, r1
    6ebe:	15 90       	lpm	r1, Z+
    6ec0:	1d 92       	st	X+, r1
    6ec2:	15 90       	lpm	r1, Z+
    6ec4:	1d 92       	st	X+, r1
    6ec6:	15 90       	lpm	r1, Z+
    6ec8:	1d 92       	st	X+, r1
    6eca:	15 90       	lpm	r1, Z+
    6ecc:	1d 92       	st	X+, r1
    6ece:	15 90       	lpm	r1, Z+
    6ed0:	1d 92       	st	X+, r1
    6ed2:	15 90       	lpm	r1, Z+
    6ed4:	1d 92       	st	X+, r1
    6ed6:	15 90       	lpm	r1, Z+
    6ed8:	1d 92       	st	X+, r1
    6eda:	15 90       	lpm	r1, Z+
    6edc:	1d 92       	st	X+, r1
    6ede:	15 90       	lpm	r1, Z+
    6ee0:	1d 92       	st	X+, r1
    6ee2:	15 90       	lpm	r1, Z+
    6ee4:	1d 92       	st	X+, r1
    6ee6:	15 90       	lpm	r1, Z+
    6ee8:	1d 92       	st	X+, r1
    6eea:	15 90       	lpm	r1, Z+
    6eec:	1d 92       	st	X+, r1
    6eee:	15 90       	lpm	r1, Z+
    6ef0:	1d 92       	st	X+, r1
    6ef2:	15 90       	lpm	r1, Z+
    6ef4:	1d 92       	st	X+, r1
    6ef6:	15 90       	lpm	r1, Z+
    6ef8:	1d 92       	st	X+, r1
    6efa:	15 90       	lpm	r1, Z+
    6efc:	1d 92       	st	X+, r1
    6efe:	15 90       	lpm	r1, Z+
    6f00:	1d 92       	st	X+, r1
	clr r1
    6f02:	11 24       	eor	r1, r1
	ret
    6f04:	08 95       	ret

00006f06 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6f06:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6f08:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6f0a:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6f0c:	82 9f       	mul	r24, r18
	add ZL,r0
    6f0e:	e0 0d       	add	r30, r0
	adc ZH,r1
    6f10:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6f12:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6f14:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6f16:	62 9f       	mul	r22, r18
	add XL,r0
    6f18:	a0 0d       	add	r26, r0
	adc XH,r1
    6f1a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6f1c:	11 90       	ld	r1, Z+
    6f1e:	1d 92       	st	X+, r1
    6f20:	11 90       	ld	r1, Z+
    6f22:	1d 92       	st	X+, r1
    6f24:	11 90       	ld	r1, Z+
    6f26:	1d 92       	st	X+, r1
    6f28:	11 90       	ld	r1, Z+
    6f2a:	1d 92       	st	X+, r1
    6f2c:	11 90       	ld	r1, Z+
    6f2e:	1d 92       	st	X+, r1
    6f30:	11 90       	ld	r1, Z+
    6f32:	1d 92       	st	X+, r1
    6f34:	11 90       	ld	r1, Z+
    6f36:	1d 92       	st	X+, r1
    6f38:	11 90       	ld	r1, Z+
    6f3a:	1d 92       	st	X+, r1
    6f3c:	11 90       	ld	r1, Z+
    6f3e:	1d 92       	st	X+, r1
    6f40:	11 90       	ld	r1, Z+
    6f42:	1d 92       	st	X+, r1
    6f44:	11 90       	ld	r1, Z+
    6f46:	1d 92       	st	X+, r1
    6f48:	11 90       	ld	r1, Z+
    6f4a:	1d 92       	st	X+, r1
    6f4c:	11 90       	ld	r1, Z+
    6f4e:	1d 92       	st	X+, r1
    6f50:	11 90       	ld	r1, Z+
    6f52:	1d 92       	st	X+, r1
    6f54:	11 90       	ld	r1, Z+
    6f56:	1d 92       	st	X+, r1
    6f58:	11 90       	ld	r1, Z+
    6f5a:	1d 92       	st	X+, r1
    6f5c:	11 90       	ld	r1, Z+
    6f5e:	1d 92       	st	X+, r1
    6f60:	11 90       	ld	r1, Z+
    6f62:	1d 92       	st	X+, r1
    6f64:	11 90       	ld	r1, Z+
    6f66:	1d 92       	st	X+, r1
    6f68:	11 90       	ld	r1, Z+
    6f6a:	1d 92       	st	X+, r1
    6f6c:	11 90       	ld	r1, Z+
    6f6e:	1d 92       	st	X+, r1
    6f70:	11 90       	ld	r1, Z+
    6f72:	1d 92       	st	X+, r1
    6f74:	11 90       	ld	r1, Z+
    6f76:	1d 92       	st	X+, r1
    6f78:	11 90       	ld	r1, Z+
    6f7a:	1d 92       	st	X+, r1
    6f7c:	11 90       	ld	r1, Z+
    6f7e:	1d 92       	st	X+, r1
    6f80:	11 90       	ld	r1, Z+
    6f82:	1d 92       	st	X+, r1
    6f84:	11 90       	ld	r1, Z+
    6f86:	1d 92       	st	X+, r1
    6f88:	11 90       	ld	r1, Z+
    6f8a:	1d 92       	st	X+, r1
    6f8c:	11 90       	ld	r1, Z+
    6f8e:	1d 92       	st	X+, r1
    6f90:	11 90       	ld	r1, Z+
    6f92:	1d 92       	st	X+, r1
    6f94:	11 90       	ld	r1, Z+
    6f96:	1d 92       	st	X+, r1
    6f98:	11 90       	ld	r1, Z+
    6f9a:	1d 92       	st	X+, r1
    6f9c:	11 90       	ld	r1, Z+
    6f9e:	1d 92       	st	X+, r1
    6fa0:	11 90       	ld	r1, Z+
    6fa2:	1d 92       	st	X+, r1
    6fa4:	11 90       	ld	r1, Z+
    6fa6:	1d 92       	st	X+, r1
    6fa8:	11 90       	ld	r1, Z+
    6faa:	1d 92       	st	X+, r1
    6fac:	11 90       	ld	r1, Z+
    6fae:	1d 92       	st	X+, r1
    6fb0:	11 90       	ld	r1, Z+
    6fb2:	1d 92       	st	X+, r1
    6fb4:	11 90       	ld	r1, Z+
    6fb6:	1d 92       	st	X+, r1
    6fb8:	11 90       	ld	r1, Z+
    6fba:	1d 92       	st	X+, r1
    6fbc:	11 90       	ld	r1, Z+
    6fbe:	1d 92       	st	X+, r1
    6fc0:	11 90       	ld	r1, Z+
    6fc2:	1d 92       	st	X+, r1
    6fc4:	11 90       	ld	r1, Z+
    6fc6:	1d 92       	st	X+, r1
    6fc8:	11 90       	ld	r1, Z+
    6fca:	1d 92       	st	X+, r1
    6fcc:	11 90       	ld	r1, Z+
    6fce:	1d 92       	st	X+, r1
    6fd0:	11 90       	ld	r1, Z+
    6fd2:	1d 92       	st	X+, r1
    6fd4:	11 90       	ld	r1, Z+
    6fd6:	1d 92       	st	X+, r1
    6fd8:	11 90       	ld	r1, Z+
    6fda:	1d 92       	st	X+, r1
    6fdc:	11 90       	ld	r1, Z+
    6fde:	1d 92       	st	X+, r1
    6fe0:	11 90       	ld	r1, Z+
    6fe2:	1d 92       	st	X+, r1
    6fe4:	11 90       	ld	r1, Z+
    6fe6:	1d 92       	st	X+, r1
    6fe8:	11 90       	ld	r1, Z+
    6fea:	1d 92       	st	X+, r1
    6fec:	11 90       	ld	r1, Z+
    6fee:	1d 92       	st	X+, r1
    6ff0:	11 90       	ld	r1, Z+
    6ff2:	1d 92       	st	X+, r1
    6ff4:	11 90       	ld	r1, Z+
    6ff6:	1d 92       	st	X+, r1
    6ff8:	11 90       	ld	r1, Z+
    6ffa:	1d 92       	st	X+, r1
    6ffc:	11 90       	ld	r1, Z+
    6ffe:	1d 92       	st	X+, r1
    7000:	11 90       	ld	r1, Z+
    7002:	1d 92       	st	X+, r1
    7004:	11 90       	ld	r1, Z+
    7006:	1d 92       	st	X+, r1
    7008:	11 90       	ld	r1, Z+
    700a:	1d 92       	st	X+, r1
    700c:	11 90       	ld	r1, Z+
    700e:	1d 92       	st	X+, r1
    7010:	11 90       	ld	r1, Z+
    7012:	1d 92       	st	X+, r1
    7014:	11 90       	ld	r1, Z+
    7016:	1d 92       	st	X+, r1
    7018:	11 90       	ld	r1, Z+
    701a:	1d 92       	st	X+, r1
	clr r1
    701c:	11 24       	eor	r1, r1
	ret
    701e:	08 95       	ret

00007020 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7020:	e0 91 0d 0a 	lds	r30, 0x0A0D
	mov   r24,     ZL
    7024:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7026:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7028:	e8 0f       	add	r30, r24
	clr   ZH
    702a:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    702c:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    702e:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    7030:	00 90 0c 0a 	lds	r0, 0x0A0C
	sub   r24,     r0
    7034:	80 19       	sub	r24, r0
	brcc  rbg_exit
    7036:	30 f4       	brcc	.+12     	; 0x7044 <rbg_exit>

00007038 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    7038:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    703a:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    703c:	01 90       	ld	r0, Z+
	st    X,       r0
    703e:	0c 92       	st	X, r0
	inc   r24
    7040:	83 95       	inc	r24
	brne  rbg_loop
    7042:	d1 f7       	brne	.-12     	; 0x7038 <rbg_loop>

00007044 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7044:	08 95       	ret

00007046 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7046:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    7048:	79 9f       	mul	r23, r25
	mov   XL,      r1
    704a:	a1 2d       	mov	r26, r1
	clr   XH
    704c:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    704e:	a1 5f       	subi	r26, 0xF1	; 241
	sbci  XH,      hi8(-(sprites_tile_banks))
    7050:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    7052:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7054:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7056:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    7058:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    705a:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    705c:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    705e:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7060:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7062:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    7064:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7066:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7068:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    706a:	09 c0       	rjmp	.+18     	; 0x707e <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    706c:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    706e:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7070:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7072:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7074:	0a c0       	rjmp	.+20     	; 0x708a <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7076:	17 96       	adiw	r26, 0x07	; 7

00007078 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7078:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    707a:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    707c:	08 c0       	rjmp	.+16     	; 0x708e <x_check_end>

0000707e <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    707e:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7080:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7082:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7084:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7086:	f8 cf       	rjmp	.-16     	; 0x7078 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7088:	11 97       	sbiw	r26, 0x01	; 1

0000708a <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    708a:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    708c:	b9 1f       	adc	r27, r25

0000708e <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    708e:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7090:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7092:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7094:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7096:	09 c0       	rjmp	.+18     	; 0x70aa <y_2nd_tile>

	mul   r22,     r19
    7098:	63 9f       	mul	r22, r19
	add   XL,      r0
    709a:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    709c:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    709e:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    70a0:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    70a2:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    70a4:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    70a6:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    70a8:	08 c0       	rjmp	.+16     	; 0x70ba <y_check_end>

000070aa <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    70aa:	13 2e       	mov	r1, r19
	dec   r1
    70ac:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    70ae:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    70b0:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    70b2:	61 9d       	mul	r22, r1
	add   ZL,      r0
    70b4:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    70b6:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    70b8:	13 2e       	mov	r1, r19

000070ba <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    70ba:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    70bc:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    70be:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    70c0:	05 c0       	rjmp	.+10     	; 0x70cc <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    70c2:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    70c4:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    70c6:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    70c8:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    70ca:	04 c0       	rjmp	.+8      	; 0x70d4 <x_diff_end>

000070cc <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    70cc:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    70ce:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    70d0:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    70d2:	6f ef       	ldi	r22, 0xFF	; 255

000070d4 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    70d4:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    70d6:	04 2e       	mov	r0, r20
	lsr   r20
    70d8:	46 95       	lsr	r20
	brcc  x_loop1
    70da:	30 f4       	brcc	.+12     	; 0x70e8 <x_loop1>
	breq  x_loopx
    70dc:	61 f0       	breq	.+24     	; 0x70f6 <x_loopx>

000070de <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70de:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70e0:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70e2:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70e4:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70e6:	b7 1f       	adc	r27, r23

000070e8 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70e8:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70ea:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70ec:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70ee:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70f0:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    70f2:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    70f4:	a1 f7       	brne	.-24     	; 0x70de <x_loop0>

000070f6 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70f6:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70f8:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70fa:	2c 93       	st	X, r18

	dec   r1
    70fc:	1a 94       	dec	r1
	breq  loop_e
    70fe:	49 f0       	breq	.+18     	; 0x7112 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    7100:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    7102:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7104:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7106:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7108:	40 2d       	mov	r20, r0
	lsr   r20
    710a:	46 95       	lsr	r20
	brcc  x_loop1
    710c:	68 f7       	brcc	.-38     	; 0x70e8 <x_loop1>
	brne  x_loop0
    710e:	39 f7       	brne	.-50     	; 0x70de <x_loop0>
	rjmp  x_loopx
    7110:	f2 cf       	rjmp	.-28     	; 0x70f6 <x_loopx>

00007112 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7112:	08 95       	ret

00007114 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7114:	0f 92       	push	r0
	push  r1
    7116:	1f 92       	push	r1
	push  ZL
    7118:	ef 93       	push	r30
	push  ZH
    711a:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    711c:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    711e:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7122:	ff 93       	push	r31

	sbrc  ZL,      2
    7124:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7126:	04 c0       	rjmp	.+8      	; 0x7130 <__vector_13+0x1c>
	sbrc  ZL,      1
    7128:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    712a:	02 c0       	rjmp	.+4      	; 0x7130 <__vector_13+0x1c>
	nop
    712c:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    712e:	00 c0       	rjmp	.+0      	; 0x7130 <__vector_13+0x1c>
	sbrs  ZL,      0
    7130:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7132:	00 c0       	rjmp	.+0      	; 0x7134 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7134:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    7138:	ea 95       	dec	r30
	sts sync_pulse,ZL
    713a:	e0 93 1f 0a 	sts	0x0A1F, r30

	;process sync phases
	lds ZH,sync_phase
    713e:	f0 91 1e 0a 	lds	r31, 0x0A1E
	sbrc ZH,0
    7142:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7144:	51 c0       	rjmp	.+162    	; 0x71e8 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7146:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7148:	98 f0       	brcs	.+38     	; 0x7170 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    714a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    714c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7150:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7152:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7156:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7158:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    715a:	26 f4       	brtc	.+8      	; 0x7164 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    715c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    715e:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <update_sound>
	rjmp sync_end
    7162:	b2 c0       	rjmp	.+356    	; 0x72c8 <sync_end>

00007164 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7164:	e5 e1       	ldi	r30, 0x15	; 21
    7166:	ea 95       	dec	r30
    7168:	f1 f7       	brne	.-4      	; 0x7166 <sync_pre_eq_no_sound_update+0x2>
    716a:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    716c:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    716e:	ac c0       	rjmp	.+344    	; 0x72c8 <sync_end>

00007170 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7170:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7172:	08 f1       	brcs	.+66     	; 0x71b6 <sync_post_eq>

	rjmp .
    7174:	00 c0       	rjmp	.+0      	; 0x7176 <sync_eq+0x6>
	rjmp .
    7176:	00 c0       	rjmp	.+0      	; 0x7178 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7178:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    717a:	e0 fb       	bst	r30, 0
	ldi ZL,4
    717c:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    717e:	16 f4       	brtc	.+4      	; 0x7184 <sync_eq_skip>
	
	call update_sound
    7180:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <update_sound>

00007184 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7184:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7186:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    718a:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    718c:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7190:	9b c0       	rjmp	.+310    	; 0x72c8 <sync_end>

00007192 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7192:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7194:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7198:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    719a:	04 c0       	rjmp	.+8      	; 0x71a4 <__vector_14+0x12>
	sbrc  ZL,      1
    719c:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    719e:	02 c0       	rjmp	.+4      	; 0x71a4 <__vector_14+0x12>
	nop
    71a0:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    71a2:	00 c0       	rjmp	.+0      	; 0x71a4 <__vector_14+0x12>
	sbrs  ZL,      0
    71a4:	e0 ff       	sbrs	r30, 0
	rjmp  .
    71a6:	00 c0       	rjmp	.+0      	; 0x71a8 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    71a8:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    71aa:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    71ac:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    71ae:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    71b2:	ef 91       	pop	r30
	reti
    71b4:	18 95       	reti

000071b6 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    71b6:	00 c0       	rjmp	.+0      	; 0x71b8 <sync_post_eq+0x2>

	bst ZL,0
    71b8:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71ba:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    71bc:	26 f4       	brtc	.+8      	; 0x71c6 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    71be:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    71c0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <update_sound>
	rjmp sync_pre_eq_cont
    71c4:	05 c0       	rjmp	.+10     	; 0x71d0 <sync_pre_eq_cont>

000071c6 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    71c6:	e5 e1       	ldi	r30, 0x15	; 21
    71c8:	ea 95       	dec	r30
    71ca:	f1 f7       	brne	.-4      	; 0x71c8 <sync_post_eq_no_sound_update+0x2>
    71cc:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    71ce:	28 9a       	sbi	0x05, 0	; 5

000071d0 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    71d0:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    71d4:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    71d6:	09 f0       	breq	.+2      	; 0x71da <sync_pre_eq_cont+0xa>
	rjmp sync_end
    71d8:	77 c0       	rjmp	.+238    	; 0x72c8 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    71da:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    71dc:	e0 93 1f 0a 	sts	0x0A1F, r30
	ldi ZL,1
    71e0:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    71e2:	e0 93 1e 0a 	sts	0x0A1E, r30
	
	rjmp sync_end
    71e6:	70 c0       	rjmp	.+224    	; 0x72c8 <sync_end>

000071e8 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    71e8:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    71ea:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    71ee:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    71f0:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    71f4:	00 c0       	rjmp	.+0      	; 0x71f6 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71f6:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    71f8:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71fa:	00 c0       	rjmp	.+0      	; 0x71fc <sync_hsync+0x14>
	call update_sound
    71fc:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7200:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7202:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    7206:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7208:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cp ZL,ZH
    720c:	ef 17       	cp	r30, r31
	brsh no_render
    720e:	d8 f4       	brcc	.+54     	; 0x7246 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7210:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7212:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    7216:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7218:	00 90 26 0a 	lds	r0, 0x0A26
	sub ZH,r0			
    721c:	f0 19       	sub	r31, r0
	cp ZL,ZH
    721e:	ef 17       	cp	r30, r31
	brlo no_render
    7220:	90 f0       	brcs	.+36     	; 0x7246 <no_render>

	;push r1-r29
	ldi ZL,29
    7222:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7224:	ff 27       	eor	r31, r31

00007226 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7226:	00 80       	ld	r0, Z
	push r0
    7228:	0f 92       	push	r0
	dec ZL
    722a:	ea 95       	dec	r30
	brne push_loop	
    722c:	e1 f7       	brne	.-8      	; 0x7226 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    722e:	05 e0       	ldi	r16, 0x05	; 5
    7230:	0a 95       	dec	r16
    7232:	f1 f7       	brne	.-4      	; 0x7230 <push_loop+0xa>
    7234:	00 c0       	rjmp	.+0      	; 0x7236 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    7236:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    723a:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    723c:	ff 27       	eor	r31, r31

0000723e <pop_loop>:
pop_loop:
	pop r0
    723e:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7240:	01 92       	st	Z+, r0
	cpi ZL,30
    7242:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7244:	e0 f3       	brcs	.-8      	; 0x723e <pop_loop>

00007246 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7246:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    724a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    724c:	09 f0       	breq	.+2      	; 0x7250 <no_render+0xa>
	rjmp sync_end
    724e:	3c c0       	rjmp	.+120    	; 0x72c8 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7250:	2f 93       	push	r18
	push r19
    7252:	3f 93       	push	r19
	push r20
    7254:	4f 93       	push	r20
	push r21
    7256:	5f 93       	push	r21
	push r22
    7258:	6f 93       	push	r22
	push r23
    725a:	7f 93       	push	r23
	push r24
    725c:	8f 93       	push	r24
	push r25
    725e:	9f 93       	push	r25
	push r26
    7260:	af 93       	push	r26
	push r27
    7262:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7264:	78 94       	sei
	clr r1
    7266:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7268:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    726a:	e0 93 1e 0a 	sts	0x0A1E, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    726e:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7270:	e0 93 1f 0a 	sts	0x0A1F, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7274:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    7278:	90 91 30 0a 	lds	r25, 0x0A30
	adiw r24,1
    727c:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    727e:	80 93 2f 0a 	sts	0x0A2F, r24
	sts vsync_counter+1,r25
    7282:	90 93 30 0a 	sts	0x0A30, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7286:	e0 91 21 0a 	lds	r30, 0x0A21
	lds ZH,pre_vsync_user_callback+1
    728a:	f0 91 22 0a 	lds	r31, 0x0A22
	cp  ZL,r1
    728e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7290:	f1 05       	cpc	r31, r1
	breq .+2 
    7292:	09 f0       	breq	.+2      	; 0x7296 <no_render+0x50>
	icall
    7294:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7296:	0e 94 2e 3b 	call	0x765c	; 0x765c <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    729a:	0e 94 86 49 	call	0x930c	; 0x930c <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    729e:	0e 94 76 39 	call	0x72ec	; 0x72ec <process_music>
	clr r1
    72a2:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    72a4:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,post_vsync_user_callback+1
    72a8:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    72ac:	e1 15       	cp	r30, r1
	cpc ZH,r1
    72ae:	f1 05       	cpc	r31, r1
	breq .+2 
    72b0:	09 f0       	breq	.+2      	; 0x72b4 <no_render+0x6e>
	icall
    72b2:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    72b4:	bf 91       	pop	r27
	pop r26
    72b6:	af 91       	pop	r26
	pop r25
    72b8:	9f 91       	pop	r25
	pop r24
    72ba:	8f 91       	pop	r24
	pop r23
    72bc:	7f 91       	pop	r23
	pop r22
    72be:	6f 91       	pop	r22
	pop r21
    72c0:	5f 91       	pop	r21
	pop r20
    72c2:	4f 91       	pop	r20
	pop r19
    72c4:	3f 91       	pop	r19
	pop r18
    72c6:	2f 91       	pop	r18

000072c8 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    72c8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    72ca:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    72cc:	ff 91       	pop	r31
	pop ZL
    72ce:	ef 91       	pop	r30
	pop r1
    72d0:	1f 90       	pop	r1
	pop r0
    72d2:	0f 90       	pop	r0
	reti
    72d4:	18 95       	reti

000072d6 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    72d6:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    72d8:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    72da:	00 c0       	rjmp	.+0      	; 0x72dc <hsync_pulse+0x6>
	call update_sound
    72dc:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <update_sound>

	lds ZL,sync_pulse
    72e0:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    72e4:	ea 95       	dec	r30
	sts sync_pulse,ZL
    72e6:	e0 93 1f 0a 	sts	0x0A1F, r30

	ret
    72ea:	08 95       	ret

000072ec <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    72ec:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    72f0:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    72f2:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <ProcessMusic>
#endif

	ret
    72f6:	08 95       	ret

000072f8 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    72f8:	0f 93       	push	r16
	push r17
    72fa:	1f 93       	push	r17
	push r18
    72fc:	2f 93       	push	r18
	push r28
    72fe:	cf 93       	push	r28
	push r29
    7300:	df 93       	push	r29

	mov r18,ZL
    7302:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7304:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    7308:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    730c:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    730e:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    7312:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    7316:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    731a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    731c:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    731e:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    7322:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    7326:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    732a:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    732c:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    732e:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7330:	d0 2d       	mov	r29, r0
	nop
    7332:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7334:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    7338:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    733c:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    733e:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    7342:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    7346:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    734a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    734c:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    734e:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    7352:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    7356:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    735a:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    735c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    735e:	20 ff       	sbrs	r18, 0
	rjmp .
    7360:	00 c0       	rjmp	.+0      	; 0x7362 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7362:	01 03       	mulsu	r16, r17
	clr r0
    7364:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7366:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7368:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    736a:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    736c:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    7370:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7374:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7376:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    737a:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    737e:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    7382:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7384:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7386:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    738a:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    738e:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    7392:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7394:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7396:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7398:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    739a:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    739e:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    73a2:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    73a6:	ea 95       	dec	r30
	brpl ch4_no_shift	
    73a8:	92 f4       	brpl	.+36     	; 0x73ce <ch4_no_shift>

	lds ZH,tr4_params
    73aa:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    73ae:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    73b0:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    73b2:	00 2e       	mov	r0, r16
	lsr r0
    73b4:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    73b6:	00 26       	eor	r0, r16
	bst r0,0
    73b8:	00 fa       	bst	r0, 0
	lsr r17
    73ba:	16 95       	lsr	r17
	ror r16
    73bc:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    73be:	16 f9       	bld	r17, 6
	sbrs ZH,0
    73c0:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    73c2:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    73c4:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    73c8:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    73cc:	03 c0       	rjmp	.+6      	; 0x73d4 <ch4_end>

000073ce <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    73ce:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    73d0:	1a 95       	dec	r17
	brne .-4
    73d2:	f1 f7       	brne	.-4      	; 0x73d0 <ch4_no_shift+0x2>

000073d4 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    73d4:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    73d8:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    73da:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    73dc:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    73de:	21 ff       	sbrs	r18, 1
	rjmp .
    73e0:	00 c0       	rjmp	.+0      	; 0x73e2 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    73e2:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    73e4:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    73e6:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    73ea:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    73ec:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73ee:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    73f0:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    73f2:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    73f4:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    73f6:	d0 05       	cpc	r29, r0
	brlt .+2
    73f8:	0c f0       	brlt	.+2      	; 0x73fc <ch4_end+0x28>
	ldi r28,127
    73fa:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    73fc:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    73fe:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7400:	d0 05       	cpc	r29, r0
	brge .+2
    7402:	0c f4       	brge	.+2      	; 0x7406 <ch4_end+0x32>
	ldi r28,-128
    7404:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7406:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7408:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    740c:	e4 e8       	ldi	r30, 0x84	; 132
	ldi ZH,hi8(uart_rx_buf)
    740e:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    7410:	00 91 81 0a 	lds	r16, 0x0A81

	clr r0
    7414:	00 24       	eor	r0, r0
	add ZL,r16
    7416:	e0 0f       	add	r30, r16
	adc ZH,r0
    7418:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    741a:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    741e:	17 ff       	sbrs	r17, 7
	rjmp 1f
    7420:	08 c0       	rjmp	.+16     	; 0x7432 <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    7422:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    7426:	20 83       	st	Z, r18
	inc r16
    7428:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    742a:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    742c:	00 93 81 0a 	sts	0x0A81, r16
	rjmp uart_tx
    7430:	03 c0       	rjmp	.+6      	; 0x7438 <uart_tx>
1:
	WAIT r28,9
    7432:	c3 e0       	ldi	r28, 0x03	; 3
    7434:	ca 95       	dec	r28
    7436:	f1 f7       	brne	.-4      	; 0x7434 <ch4_end+0x60>

00007438 <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    7438:	e0 e6       	ldi	r30, 0x60	; 96
	ldi ZH,hi8(uart_tx_buf)
    743a:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    743c:	00 91 c4 0a 	lds	r16, 0x0AC4
	lds r29,uart_tx_head
    7440:	d0 91 82 0a 	lds	r29, 0x0A82
	
	add ZL,r16
    7444:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    7446:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    7448:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    744c:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    744e:	d0 1b       	sub	r29, r16
	mul r28,r29
    7450:	cd 9f       	mul	r28, r29
	breq 1f		
    7452:	41 f0       	breq	.+16     	; 0x7464 <uart_tx+0x2c>

	ld r18,Z
    7454:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    7456:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    745a:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    745c:	0f 71       	andi	r16, 0x1F	; 31
	sts uart_tx_tail,r16
    745e:	00 93 c4 0a 	sts	0x0AC4, r16
	rjmp update_sound_end
    7462:	03 c0       	rjmp	.+6      	; 0x746a <update_sound_end>
1:
	WAIT r28,9
    7464:	c3 e0       	ldi	r28, 0x03	; 3
    7466:	ca 95       	dec	r28
    7468:	f1 f7       	brne	.-4      	; 0x7466 <uart_tx+0x2e>

0000746a <update_sound_end>:
#endif


update_sound_end:

	pop r29
    746a:	df 91       	pop	r29
	pop r28
    746c:	cf 91       	pop	r28
	pop r18
    746e:	2f 91       	pop	r18
	pop r17
    7470:	1f 91       	pop	r17
	pop r16
    7472:	0f 91       	pop	r16
	
	ret
    7474:	08 95       	ret

00007476 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7476:	80 93 0f 0a 	sts	0x0A0F, r24
	sts sprites_tile_banks+1,r25
    747a:	90 93 10 0a 	sts	0x0A10, r25
	ret
    747e:	08 95       	ret

00007480 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7480:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7482:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7484:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    7486:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7488:	64 e1       	ldi	r22, 0x14	; 20

0000748a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    748a:	6d 93       	st	X+, r22
	sbiw r30,1
    748c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    748e:	e9 f7       	brne	.-6      	; 0x748a <fill_vram_loop>

	clr r1
    7490:	11 24       	eor	r1, r1

	ret
    7492:	08 95       	ret

00007494 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7494:	50 91 19 0a 	lds	r21, 0x0A19
	add r20,21
    7498:	45 0f       	add	r20, r21
	rjmp SetTile	
    749a:	00 c0       	rjmp	.+0      	; 0x749c <SetTile>

0000749c <SetTile>:

	ret

#else

	clr r25
    749c:	99 27       	eor	r25, r25
	clr r23	
    749e:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    74a0:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    74a2:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    74a4:	08 0e       	add	r0, r24
	adc r1,r25
    74a6:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    74a8:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    74aa:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    74ac:	a0 0d       	add	r26, r0
	adc XH,r1
    74ae:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    74b0:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    74b2:	4c 93       	st	X, r20

	clr r1
    74b4:	11 24       	eor	r1, r1

	ret
    74b6:	08 95       	ret

000074b8 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    74b8:	80 93 19 0a 	sts	0x0A19, r24
	ret
    74bc:	08 95       	ret

000074be <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    74be:	80 93 17 0a 	sts	0x0A17, r24
	sts tile_table_hi,r25	
    74c2:	90 93 18 0a 	sts	0x0A18, r25
	ret
    74c6:	08 95       	ret

000074c8 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    74c8:	80 91 20 0a 	lds	r24, 0x0A20
	andi r24,SYNC_FLAG_VSYNC
    74cc:	81 70       	andi	r24, 0x01	; 1
	ret
    74ce:	08 95       	ret

000074d0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    74d0:	20 91 20 0a 	lds	r18, 0x0A20
	andi r18,~SYNC_FLAG_VSYNC
    74d4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    74d6:	20 93 20 0a 	sts	0x0A20, r18
	ret
    74da:	08 95       	ret

000074dc <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    74dc:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    74e0:	90 91 30 0a 	lds	r25, 0x0A30
	ret
    74e4:	08 95       	ret

000074e6 <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    74e6:	10 92 2f 0a 	sts	0x0A2F, r1
	sts vsync_counter+1,r1
    74ea:	10 92 30 0a 	sts	0x0A30, r1
	ret
    74ee:	08 95       	ret

000074f0 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    74f0:	88 23       	and	r24, r24
	brne rj_p2
    74f2:	29 f4       	brne	.+10     	; 0x74fe <rj_p2>
		
	lds r24,joypad1_status_lo
    74f4:	80 91 27 0a 	lds	r24, 0x0A27
	lds r25,joypad1_status_lo+1
    74f8:	90 91 28 0a 	lds	r25, 0x0A28
	ret
    74fc:	08 95       	ret

000074fe <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    74fe:	80 91 2b 0a 	lds	r24, 0x0A2B
	lds r25,joypad2_status_lo+1	
    7502:	90 91 2c 0a 	lds	r25, 0x0A2C

	ret
    7506:	08 95       	ret

00007508 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7508:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    750a:	7a 95       	dec	r23
	brne .-4 ;~1 us
    750c:	f1 f7       	brne	.-4      	; 0x750a <WaitUs+0x2>
	nop
    750e:	00 00       	nop
	sbiw r24,1
    7510:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7512:	d1 f7       	brne	.-12     	; 0x7508 <WaitUs>

	ret
    7514:	08 95       	ret

00007516 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7516:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7518:	fe cf       	rjmp	.-4      	; 0x7516 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    751a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    751c:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    751e:	60 bd       	out	0x20, r22	; 32
   cli
    7520:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7522:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7524:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7526:	78 94       	sei
   ret
    7528:	08 95       	ret

0000752a <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    752a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    752c:	fe cf       	rjmp	.-4      	; 0x752a <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    752e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7530:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7532:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7534:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7536:	80 b5       	in	r24, 0x20	; 32
   sei
    7538:	78 94       	sei
   ret
    753a:	08 95       	ret

0000753c <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    753c:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    753e:	80 93 1f 0a 	sts	0x0A1F, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7542:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7546:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    754a:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    754e:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7552:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7556:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    755a:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    755e:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7562:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7564:	80 93 81 00 	sts	0x0081, r24

		cli
    7568:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    756a:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    756c:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7570:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7572:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7576:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7578:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    757c:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7580:	78 94       	sei

00007582 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7582:	80 91 1f 0a 	lds	r24, 0x0A1F
		cpi r24,8
    7586:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7588:	e0 f3       	brcs	.-8      	; 0x7582 <wait>

		ret
    758a:	08 95       	ret

0000758c <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    758c:	80 91 31 0a 	lds	r24, 0x0A31
		lds r25,random_value+1
    7590:	90 91 32 0a 	lds	r25, 0x0A32
		ret
    7594:	08 95       	ret

00007596 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7596:	0f 93       	push	r16
		push r17
    7598:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    759a:	0f b7       	in	r16, 0x3f	; 63
		push r16
    759c:	0f 93       	push	r16

		lds r16,sync_pulse
    759e:	00 91 1f 0a 	lds	r16, 0x0A1F
		inc r16
    75a2:	03 95       	inc	r16
		sts sync_pulse,r16
    75a4:	00 93 1f 0a 	sts	0x0A1F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    75a8:	00 fd       	sbrc	r16, 0
		rjmp 1f
    75aa:	08 c0       	rjmp	.+16     	; 0x75bc <__vector_8+0x26>
		lds r17,random_value
    75ac:	10 91 31 0a 	lds	r17, 0x0A31
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    75b0:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75b4:	10 27       	eor	r17, r16
		sts random_value,r17
    75b6:	10 93 31 0a 	sts	0x0A31, r17
		rjmp 2f
    75ba:	07 c0       	rjmp	.+14     	; 0x75ca <__vector_8+0x34>
	1:
		lds r17,random_value+1
    75bc:	10 91 32 0a 	lds	r17, 0x0A32
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    75c0:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75c4:	10 27       	eor	r17, r16
		sts random_value+1,r17
    75c6:	10 93 32 0a 	sts	0x0A32, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    75ca:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    75cc:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    75d0:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    75d2:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    75d4:	1f 91       	pop	r17
		pop r16
    75d6:	0f 91       	pop	r16
		reti
    75d8:	18 95       	reti

000075da <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    75da:	98 e0       	ldi	r25, 0x08	; 8
    75dc:	88 e1       	ldi	r24, 0x18	; 24
    75de:	0f b6       	in	r0, 0x3f	; 63
    75e0:	f8 94       	cli
    75e2:	a8 95       	wdr
    75e4:	80 93 60 00 	sts	0x0060, r24
    75e8:	0f be       	out	0x3f, r0	; 63
    75ea:	90 93 60 00 	sts	0x0060, r25
	while(1);
    75ee:	ff cf       	rjmp	.-2      	; 0x75ee <SoftReset+0x14>

000075f0 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    75f0:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    75f2:	c8 95       	lpm
    75f4:	c8 95       	lpm
		Wait200ns();
    75f6:	c8 95       	lpm
    75f8:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    75fa:	12 98       	cbi	0x02, 2	; 2
    75fc:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    75fe:	80 e0       	ldi	r24, 0x00	; 0
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	20 e0       	ldi	r18, 0x00	; 0
    7604:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7606:	36 95       	lsr	r19
    7608:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    760a:	96 95       	lsr	r25
    760c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    760e:	c8 95       	lpm
    7610:	c8 95       	lpm
			Wait200ns();
    7612:	c8 95       	lpm
    7614:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7616:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7618:	00 9b       	sbis	0x00, 0	; 0
    761a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    761c:	01 9b       	sbis	0x00, 1	; 0
    761e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7620:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7622:	c8 95       	lpm
    7624:	c8 95       	lpm
			Wait200ns();
    7626:	c8 95       	lpm
    7628:	c8 95       	lpm
    762a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    762c:	61 f7       	brne	.-40     	; 0x7606 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    762e:	30 93 28 0a 	sts	0x0A28, r19
    7632:	20 93 27 0a 	sts	0x0A27, r18
		joypad2_status_lo=p2ButtonsLo;
    7636:	90 93 2c 0a 	sts	0x0A2C, r25
    763a:	80 93 2b 0a 	sts	0x0A2B, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    763e:	80 91 27 0a 	lds	r24, 0x0A27
    7642:	90 91 28 0a 	lds	r25, 0x0A28
    7646:	0f 97       	sbiw	r24, 0x0f	; 15
    7648:	31 f0       	breq	.+12     	; 0x7656 <ReadButtons+0x66>
    764a:	80 91 2b 0a 	lds	r24, 0x0A2B
    764e:	90 91 2c 0a 	lds	r25, 0x0A2C
    7652:	0f 97       	sbiw	r24, 0x0f	; 15
    7654:	11 f4       	brne	.+4      	; 0x765a <ReadButtons+0x6a>
		SoftReset();
    7656:	0e 94 ed 3a 	call	0x75da	; 0x75da <SoftReset>
    765a:	08 95       	ret

0000765c <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    765c:	10 92 80 0a 	sts	0x0A80, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7660:	00 99       	sbic	0x00, 0	; 0
    7662:	03 c0       	rjmp	.+6      	; 0x766a <ReadControllers+0xe>
    7664:	81 e0       	ldi	r24, 0x01	; 1
    7666:	80 93 80 0a 	sts	0x0A80, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    766a:	01 99       	sbic	0x00, 1	; 0
    766c:	05 c0       	rjmp	.+10     	; 0x7678 <ReadControllers+0x1c>
    766e:	80 91 80 0a 	lds	r24, 0x0A80
    7672:	82 60       	ori	r24, 0x02	; 2
    7674:	80 93 80 0a 	sts	0x0A80, r24
			
	//read the standard buttons
	ReadButtons();
    7678:	0c 94 f8 3a 	jmp	0x75f0	; 0x75f0 <ReadButtons>

0000767c <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    767c:	cf 93       	push	r28
    767e:	df 93       	push	r29
    7680:	c0 e0       	ldi	r28, 0x00	; 0
    7682:	d0 e0       	ldi	r29, 0x00	; 0
    7684:	fe 01       	movw	r30, r28
    7686:	e2 56       	subi	r30, 0x62	; 98
    7688:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    768a:	64 91       	lpm	r22, Z
    768c:	ce 01       	movw	r24, r28
    768e:	0e 94 8b 3a 	call	0x7516	; 0x7516 <WriteEeprom>
    7692:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7694:	c0 32       	cpi	r28, 0x20	; 32
    7696:	d1 05       	cpc	r29, r1
    7698:	a9 f7       	brne	.-22     	; 0x7684 <FormatEeprom+0x8>
    769a:	c0 e2       	ldi	r28, 0x20	; 32
    769c:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    769e:	6f ef       	ldi	r22, 0xFF	; 255
    76a0:	ce 01       	movw	r24, r28
    76a2:	0e 94 8b 3a 	call	0x7516	; 0x7516 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    76a6:	6f ef       	ldi	r22, 0xFF	; 255
    76a8:	ce 01       	movw	r24, r28
    76aa:	01 96       	adiw	r24, 0x01	; 1
    76ac:	0e 94 8b 3a 	call	0x7516	; 0x7516 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    76b0:	a0 96       	adiw	r28, 0x20	; 32
    76b2:	c1 15       	cp	r28, r1
    76b4:	88 e0       	ldi	r24, 0x08	; 8
    76b6:	d8 07       	cpc	r29, r24
    76b8:	91 f7       	brne	.-28     	; 0x769e <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    76ba:	df 91       	pop	r29
    76bc:	cf 91       	pop	r28
    76be:	08 95       	ret

000076c0 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    76c0:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    76c2:	80 e0       	ldi	r24, 0x00	; 0
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	0e 94 95 3a 	call	0x752a	; 0x752a <ReadEeprom>
    76ca:	c8 2f       	mov	r28, r24
    76cc:	81 e0       	ldi	r24, 0x01	; 1
    76ce:	90 e0       	ldi	r25, 0x00	; 0
    76d0:	0e 94 95 3a 	call	0x752a	; 0x752a <ReadEeprom>
    76d4:	28 2f       	mov	r18, r24
    76d6:	30 e0       	ldi	r19, 0x00	; 0
    76d8:	32 2f       	mov	r19, r18
    76da:	22 27       	eor	r18, r18
    76dc:	2c 0f       	add	r18, r28
    76de:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    76e0:	81 e0       	ldi	r24, 0x01	; 1
    76e2:	2a 35       	cpi	r18, 0x5A	; 90
    76e4:	35 45       	sbci	r19, 0x55	; 85
    76e6:	09 f0       	breq	.+2      	; 0x76ea <isEepromFormatted+0x2a>
    76e8:	80 e0       	ldi	r24, 0x00	; 0
}
    76ea:	cf 91       	pop	r28
    76ec:	08 95       	ret

000076ee <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    76ee:	8f 92       	push	r8
    76f0:	9f 92       	push	r9
    76f2:	af 92       	push	r10
    76f4:	bf 92       	push	r11
    76f6:	cf 92       	push	r12
    76f8:	df 92       	push	r13
    76fa:	ef 92       	push	r14
    76fc:	ff 92       	push	r15
    76fe:	0f 93       	push	r16
    7700:	1f 93       	push	r17
    7702:	cf 93       	push	r28
    7704:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7706:	fb 01       	movw	r30, r22
    7708:	11 82       	std	Z+1, r1	; 0x01
    770a:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    770c:	8f 3f       	cpi	r24, 0xFF	; 255
    770e:	ff ef       	ldi	r31, 0xFF	; 255
    7710:	9f 07       	cpc	r25, r31
    7712:	89 f1       	breq	.+98     	; 0x7776 <EepromBlockExists+0x88>
    7714:	6a 01       	movw	r12, r20
    7716:	8b 01       	movw	r16, r22
    7718:	7c 01       	movw	r14, r24
    771a:	a1 2c       	mov	r10, r1
    771c:	b1 2c       	mov	r11, r1
    771e:	c0 e0       	ldi	r28, 0x00	; 0
    7720:	d3 e0       	ldi	r29, 0x03	; 3
    7722:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7724:	c5 01       	movw	r24, r10
    7726:	0e 94 95 3a 	call	0x752a	; 0x752a <ReadEeprom>
    772a:	88 2e       	mov	r8, r24
    772c:	c5 01       	movw	r24, r10
    772e:	01 96       	adiw	r24, 0x01	; 1
    7730:	0e 94 95 3a 	call	0x752a	; 0x752a <ReadEeprom>
    7734:	28 2f       	mov	r18, r24
    7736:	30 e0       	ldi	r19, 0x00	; 0
    7738:	32 2f       	mov	r19, r18
    773a:	22 27       	eor	r18, r18
    773c:	28 0d       	add	r18, r8
    773e:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7740:	2e 15       	cp	r18, r14
    7742:	3f 05       	cpc	r19, r15
    7744:	29 f4       	brne	.+10     	; 0x7750 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7746:	f8 01       	movw	r30, r16
    7748:	b1 82       	std	Z+1, r11	; 0x01
    774a:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    774c:	d0 e0       	ldi	r29, 0x00	; 0
    774e:	0b c0       	rjmp	.+22     	; 0x7766 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7750:	2f 3f       	cpi	r18, 0xFF	; 255
    7752:	3f 4f       	sbci	r19, 0xFF	; 255
    7754:	41 f4       	brne	.+16     	; 0x7766 <EepromBlockExists+0x78>
    7756:	91 10       	cpse	r9, r1
    7758:	06 c0       	rjmp	.+12     	; 0x7766 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    775a:	c1 14       	cp	r12, r1
    775c:	d1 04       	cpc	r13, r1
    775e:	11 f0       	breq	.+4      	; 0x7764 <EepromBlockExists+0x76>
    7760:	f6 01       	movw	r30, r12
    7762:	c0 83       	st	Z, r28
    7764:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7766:	cf 5f       	subi	r28, 0xFF	; 255
    7768:	f0 e2       	ldi	r31, 0x20	; 32
    776a:	af 0e       	add	r10, r31
    776c:	b1 1c       	adc	r11, r1
    776e:	c0 34       	cpi	r28, 0x40	; 64
    7770:	c9 f6       	brne	.-78     	; 0x7724 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7772:	8d 2f       	mov	r24, r29
    7774:	01 c0       	rjmp	.+2      	; 0x7778 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7776:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7778:	df 91       	pop	r29
    777a:	cf 91       	pop	r28
    777c:	1f 91       	pop	r17
    777e:	0f 91       	pop	r16
    7780:	ff 90       	pop	r15
    7782:	ef 90       	pop	r14
    7784:	df 90       	pop	r13
    7786:	cf 90       	pop	r12
    7788:	bf 90       	pop	r11
    778a:	af 90       	pop	r10
    778c:	9f 90       	pop	r9
    778e:	8f 90       	pop	r8
    7790:	08 95       	ret

00007792 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7792:	ef 92       	push	r14
    7794:	ff 92       	push	r15
    7796:	0f 93       	push	r16
    7798:	1f 93       	push	r17
    779a:	cf 93       	push	r28
    779c:	df 93       	push	r29
    779e:	00 d0       	rcall	.+0      	; 0x77a0 <EepromWriteBlock+0xe>
    77a0:	1f 92       	push	r1
    77a2:	cd b7       	in	r28, 0x3d	; 61
    77a4:	de b7       	in	r29, 0x3e	; 62
    77a6:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    77a8:	1a 82       	std	Y+2, r1	; 0x02
    77aa:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    77ac:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    77ae:	ae 01       	movw	r20, r28
    77b0:	4d 5f       	subi	r20, 0xFD	; 253
    77b2:	5f 4f       	sbci	r21, 0xFF	; 255
    77b4:	be 01       	movw	r22, r28
    77b6:	6f 5f       	subi	r22, 0xFF	; 255
    77b8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ba:	fc 01       	movw	r30, r24
    77bc:	80 81       	ld	r24, Z
    77be:	91 81       	ldd	r25, Z+1	; 0x01
    77c0:	0e 94 77 3b 	call	0x76ee	; 0x76ee <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    77c4:	88 23       	and	r24, r24
    77c6:	11 f0       	breq	.+4      	; 0x77cc <EepromWriteBlock+0x3a>
    77c8:	83 30       	cpi	r24, 0x03	; 3
    77ca:	19 f5       	brne	.+70     	; 0x7812 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    77cc:	89 81       	ldd	r24, Y+1	; 0x01
    77ce:	9a 81       	ldd	r25, Y+2	; 0x02
    77d0:	89 2b       	or	r24, r25
    77d2:	49 f4       	brne	.+18     	; 0x77e6 <EepromWriteBlock+0x54>
    77d4:	8b 81       	ldd	r24, Y+3	; 0x03
    77d6:	88 23       	and	r24, r24
    77d8:	d9 f0       	breq	.+54     	; 0x7810 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    77da:	f0 e2       	ldi	r31, 0x20	; 32
    77dc:	8f 9f       	mul	r24, r31
    77de:	c0 01       	movw	r24, r0
    77e0:	11 24       	eor	r1, r1
    77e2:	9a 83       	std	Y+2, r25	; 0x02
    77e4:	89 83       	std	Y+1, r24	; 0x01
    77e6:	78 01       	movw	r14, r16
    77e8:	20 e2       	ldi	r18, 0x20	; 32
    77ea:	e2 0e       	add	r14, r18
    77ec:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    77ee:	f8 01       	movw	r30, r16
    77f0:	61 91       	ld	r22, Z+
    77f2:	8f 01       	movw	r16, r30
    77f4:	89 81       	ldd	r24, Y+1	; 0x01
    77f6:	9a 81       	ldd	r25, Y+2	; 0x02
    77f8:	9c 01       	movw	r18, r24
    77fa:	2f 5f       	subi	r18, 0xFF	; 255
    77fc:	3f 4f       	sbci	r19, 0xFF	; 255
    77fe:	3a 83       	std	Y+2, r19	; 0x02
    7800:	29 83       	std	Y+1, r18	; 0x01
    7802:	0e 94 8b 3a 	call	0x7516	; 0x7516 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7806:	0e 15       	cp	r16, r14
    7808:	1f 05       	cpc	r17, r15
    780a:	89 f7       	brne	.-30     	; 0x77ee <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    780c:	80 e0       	ldi	r24, 0x00	; 0
    780e:	01 c0       	rjmp	.+2      	; 0x7812 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7810:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7812:	0f 90       	pop	r0
    7814:	0f 90       	pop	r0
    7816:	0f 90       	pop	r0
    7818:	df 91       	pop	r29
    781a:	cf 91       	pop	r28
    781c:	1f 91       	pop	r17
    781e:	0f 91       	pop	r16
    7820:	ff 90       	pop	r15
    7822:	ef 90       	pop	r14
    7824:	08 95       	ret

00007826 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7826:	cf 92       	push	r12
    7828:	df 92       	push	r13
    782a:	ff 92       	push	r15
    782c:	0f 93       	push	r16
    782e:	1f 93       	push	r17
    7830:	cf 93       	push	r28
    7832:	df 93       	push	r29
    7834:	00 d0       	rcall	.+0      	; 0x7836 <EepromReadBlock+0x10>
    7836:	cd b7       	in	r28, 0x3d	; 61
    7838:	de b7       	in	r29, 0x3e	; 62
    783a:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    783c:	40 e0       	ldi	r20, 0x00	; 0
    783e:	50 e0       	ldi	r21, 0x00	; 0
    7840:	be 01       	movw	r22, r28
    7842:	6f 5f       	subi	r22, 0xFF	; 255
    7844:	7f 4f       	sbci	r23, 0xFF	; 255
    7846:	0e 94 77 3b 	call	0x76ee	; 0x76ee <EepromBlockExists>
    784a:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    784c:	81 11       	cpse	r24, r1
    784e:	13 c0       	rjmp	.+38     	; 0x7876 <EepromReadBlock+0x50>
    7850:	68 01       	movw	r12, r16
    7852:	80 e2       	ldi	r24, 0x20	; 32
    7854:	c8 0e       	add	r12, r24
    7856:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7858:	89 81       	ldd	r24, Y+1	; 0x01
    785a:	9a 81       	ldd	r25, Y+2	; 0x02
    785c:	9c 01       	movw	r18, r24
    785e:	2f 5f       	subi	r18, 0xFF	; 255
    7860:	3f 4f       	sbci	r19, 0xFF	; 255
    7862:	3a 83       	std	Y+2, r19	; 0x02
    7864:	29 83       	std	Y+1, r18	; 0x01
    7866:	0e 94 95 3a 	call	0x752a	; 0x752a <ReadEeprom>
    786a:	f8 01       	movw	r30, r16
    786c:	81 93       	st	Z+, r24
    786e:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7870:	ec 15       	cp	r30, r12
    7872:	fd 05       	cpc	r31, r13
    7874:	89 f7       	brne	.-30     	; 0x7858 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7876:	8f 2d       	mov	r24, r15
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	df 91       	pop	r29
    787e:	cf 91       	pop	r28
    7880:	1f 91       	pop	r17
    7882:	0f 91       	pop	r16
    7884:	ff 90       	pop	r15
    7886:	df 90       	pop	r13
    7888:	cf 90       	pop	r12
    788a:	08 95       	ret

0000788c <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    788c:	80 91 81 0a 	lds	r24, 0x0A81
    7890:	90 91 83 0a 	lds	r25, 0x0A83
	}
    7894:	89 1b       	sub	r24, r25
    7896:	08 95       	ret

00007898 <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    7898:	90 91 81 0a 	lds	r25, 0x0A81
    789c:	80 91 83 0a 	lds	r24, 0x0A83
    78a0:	98 17       	cp	r25, r24
    78a2:	71 f0       	breq	.+28     	; 0x78c0 <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    78a4:	e0 91 83 0a 	lds	r30, 0x0A83
    78a8:	f0 e0       	ldi	r31, 0x00	; 0
    78aa:	ec 57       	subi	r30, 0x7C	; 124
    78ac:	f5 4f       	sbci	r31, 0xF5	; 245
    78ae:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    78b0:	90 91 83 0a 	lds	r25, 0x0A83
    78b4:	9f 5f       	subi	r25, 0xFF	; 255
    78b6:	9f 73       	andi	r25, 0x3F	; 63
    78b8:	90 93 83 0a 	sts	0x0A83, r25
			return (data&0xff);
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    78c0:	8f ef       	ldi	r24, 0xFF	; 255
    78c2:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    78c4:	08 95       	ret

000078c6 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    78c6:	10 92 83 0a 	sts	0x0A83, r1
		uart_rx_head=0;
    78ca:	10 92 81 0a 	sts	0x0A81, r1
    78ce:	08 95       	ret

000078d0 <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    78d0:	90 91 82 0a 	lds	r25, 0x0A82
    78d4:	9f 5f       	subi	r25, 0xFF	; 255
    78d6:	9f 71       	andi	r25, 0x1F	; 31

		if (next_head != uart_tx_tail) {
    78d8:	20 91 c4 0a 	lds	r18, 0x0AC4
    78dc:	92 17       	cp	r25, r18
    78de:	51 f0       	breq	.+20     	; 0x78f4 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    78e0:	e0 91 82 0a 	lds	r30, 0x0A82
    78e4:	f0 e0       	ldi	r31, 0x00	; 0
    78e6:	e0 5a       	subi	r30, 0xA0	; 160
    78e8:	f5 4f       	sbci	r31, 0xF5	; 245
    78ea:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    78ec:	90 93 82 0a 	sts	0x0A82, r25
			return 0;
    78f0:	80 e0       	ldi	r24, 0x00	; 0
    78f2:	08 95       	ret
		}else{
			return -1; //buffer full
    78f4:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    78f6:	08 95       	ret

000078f8 <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    78f8:	10 92 c4 0a 	sts	0x0AC4, r1
		uart_tx_head=0;
    78fc:	10 92 82 0a 	sts	0x0A82, r1
    7900:	08 95       	ret

00007902 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7902:	00 97       	sbiw	r24, 0x00	; 0
    7904:	21 f0       	breq	.+8      	; 0x790e <GetPrngNumber+0xc>
    7906:	90 93 41 0a 	sts	0x0A41, r25
    790a:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    790e:	20 91 40 0a 	lds	r18, 0x0A40
    7912:	30 91 41 0a 	lds	r19, 0x0A41
    7916:	a9 01       	movw	r20, r18
    7918:	56 95       	lsr	r21
    791a:	47 95       	ror	r20
    791c:	56 95       	lsr	r21
    791e:	47 95       	ror	r20
    7920:	c9 01       	movw	r24, r18
    7922:	63 e0       	ldi	r22, 0x03	; 3
    7924:	96 95       	lsr	r25
    7926:	87 95       	ror	r24
    7928:	6a 95       	dec	r22
    792a:	e1 f7       	brne	.-8      	; 0x7924 <GetPrngNumber+0x22>
    792c:	84 27       	eor	r24, r20
    792e:	95 27       	eor	r25, r21
    7930:	82 27       	eor	r24, r18
    7932:	93 27       	eor	r25, r19
    7934:	a9 01       	movw	r20, r18
    7936:	75 e0       	ldi	r23, 0x05	; 5
    7938:	56 95       	lsr	r21
    793a:	47 95       	ror	r20
    793c:	7a 95       	dec	r23
    793e:	e1 f7       	brne	.-8      	; 0x7938 <GetPrngNumber+0x36>
    7940:	84 27       	eor	r24, r20
    7942:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7944:	99 27       	eor	r25, r25
    7946:	86 95       	lsr	r24
    7948:	97 95       	ror	r25
    794a:	88 27       	eor	r24, r24
    794c:	36 95       	lsr	r19
    794e:	27 95       	ror	r18
    7950:	82 2b       	or	r24, r18
    7952:	93 2b       	or	r25, r19
    7954:	90 93 41 0a 	sts	0x0A41, r25
    7958:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    795c:	08 95       	ret

0000795e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    795e:	fc 01       	movw	r30, r24
    7960:	67 87       	std	Z+15, r22	; 0x0f
    7962:	08 95       	ret

00007964 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7964:	e4 e4       	ldi	r30, 0x44	; 68
    7966:	fa e0       	ldi	r31, 0x0A	; 10
    7968:	81 e0       	ldi	r24, 0x01	; 1
    796a:	91 e0       	ldi	r25, 0x01	; 1
    796c:	95 8b       	std	Z+21, r25	; 0x15
    796e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7970:	63 8b       	std	Z+19, r22	; 0x13
    7972:	08 95       	ret

00007974 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7974:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7976:	90 81       	ld	r25, Z
    7978:	9f 75       	andi	r25, 0x5F	; 95
    797a:	90 83       	st	Z, r25
    797c:	08 95       	ret

0000797e <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    797e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7980:	90 81       	ld	r25, Z
    7982:	90 64       	ori	r25, 0x40	; 64
    7984:	90 83       	st	Z, r25
    7986:	08 95       	ret

00007988 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7988:	fc 01       	movw	r30, r24
    798a:	66 87       	std	Z+14, r22	; 0x0e
    798c:	08 95       	ret

0000798e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    798e:	fc 01       	movw	r30, r24
    7990:	62 87       	std	Z+10, r22	; 0x0a
    7992:	08 95       	ret

00007994 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7994:	fc 01       	movw	r30, r24
    7996:	63 87       	std	Z+11, r22	; 0x0b
    7998:	08 95       	ret

0000799a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    799a:	cf 93       	push	r28
    799c:	df 93       	push	r29
    799e:	ec 01       	movw	r28, r24
    79a0:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    79a2:	29 81       	ldd	r18, Y+1	; 0x01
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	f9 01       	movw	r30, r18
    79a8:	ee 0f       	add	r30, r30
    79aa:	ff 1f       	adc	r31, r31
    79ac:	e8 5f       	subi	r30, 0xF8	; 248
    79ae:	fd 47       	sbci	r31, 0x7D	; 125
    79b0:	65 91       	lpm	r22, Z+
    79b2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    79b4:	f9 01       	movw	r30, r18
    79b6:	e4 0f       	add	r30, r20
    79b8:	f1 1d       	adc	r31, r1
    79ba:	47 fd       	sbrc	r20, 7
    79bc:	fa 95       	dec	r31
    79be:	ee 0f       	add	r30, r30
    79c0:	ff 1f       	adc	r31, r31
    79c2:	e8 5f       	subi	r30, 0xF8	; 248
    79c4:	fd 47       	sbci	r31, 0x7D	; 125
    79c6:	85 91       	lpm	r24, Z+
    79c8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    79ca:	86 1b       	sub	r24, r22
    79cc:	97 0b       	sbc	r25, r23
    79ce:	68 85       	ldd	r22, Y+8	; 0x08
    79d0:	70 e0       	ldi	r23, 0x00	; 0
    79d2:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
	if(delta==0)delta++;
    79d6:	61 15       	cp	r22, r1
    79d8:	71 05       	cpc	r23, r1
    79da:	11 f4       	brne	.+4      	; 0x79e0 <PatchCommand11+0x46>
    79dc:	61 e0       	ldi	r22, 0x01	; 1
    79de:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    79e0:	ea 81       	ldd	r30, Y+2	; 0x02
    79e2:	86 e0       	ldi	r24, 0x06	; 6
    79e4:	e8 9f       	mul	r30, r24
    79e6:	f0 01       	movw	r30, r0
    79e8:	11 24       	eor	r1, r1
    79ea:	ec 5b       	subi	r30, 0xBC	; 188
    79ec:	f5 4f       	sbci	r31, 0xF5	; 245
    79ee:	81 81       	ldd	r24, Z+1	; 0x01
    79f0:	92 81       	ldd	r25, Z+2	; 0x02
    79f2:	86 0f       	add	r24, r22
    79f4:	97 1f       	adc	r25, r23
    79f6:	92 83       	std	Z+2, r25	; 0x02
    79f8:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    79fa:	7e 83       	std	Y+6, r23	; 0x06
    79fc:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    79fe:	88 81       	ld	r24, Y
    7a00:	88 60       	ori	r24, 0x08	; 8
    7a02:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7a04:	89 81       	ldd	r24, Y+1	; 0x01
    7a06:	48 0f       	add	r20, r24
    7a08:	4f 83       	std	Y+7, r20	; 0x07
}
    7a0a:	df 91       	pop	r29
    7a0c:	cf 91       	pop	r28
    7a0e:	08 95       	ret

00007a10 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7a10:	fc 01       	movw	r30, r24
    7a12:	60 87       	std	Z+8, r22	; 0x08
    7a14:	08 95       	ret

00007a16 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7a16:	fc 01       	movw	r30, r24
    7a18:	64 83       	std	Z+4, r22	; 0x04
    7a1a:	08 95       	ret

00007a1c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	82 81       	ldd	r24, Z+2	; 0x02
    7a20:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <SetMixerWave>

00007a24 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7a24:	fc 01       	movw	r30, r24
	track->note+=param;
    7a26:	91 81       	ldd	r25, Z+1	; 0x01
    7a28:	69 0f       	add	r22, r25
    7a2a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7a2c:	82 81       	ldd	r24, Z+2	; 0x02
    7a2e:	0c 94 ac 40 	jmp	0x8158	; 0x8158 <SetMixerNote>

00007a32 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7a32:	fc 01       	movw	r30, r24
	track->note-=param;
    7a34:	91 81       	ldd	r25, Z+1	; 0x01
    7a36:	96 1b       	sub	r25, r22
    7a38:	69 2f       	mov	r22, r25
    7a3a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7a3c:	82 81       	ldd	r24, Z+2	; 0x02
    7a3e:	0c 94 ac 40 	jmp	0x8158	; 0x8158 <SetMixerNote>

00007a42 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7a42:	1f 93       	push	r17
    7a44:	cf 93       	push	r28
    7a46:	df 93       	push	r29
    7a48:	ec 01       	movw	r28, r24
    7a4a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a4e:	0e 94 ac 40 	call	0x8158	; 0x8158 <SetMixerNote>
	track->note=param;
    7a52:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7a54:	88 81       	ld	r24, Y
    7a56:	87 7f       	andi	r24, 0xF7	; 247
    7a58:	88 83       	st	Y, r24
}
    7a5a:	df 91       	pop	r29
    7a5c:	cf 91       	pop	r28
    7a5e:	1f 91       	pop	r17
    7a60:	08 95       	ret

00007a62 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7a62:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7a64:	14 96       	adiw	r26, 0x04	; 4
    7a66:	8c 91       	ld	r24, X
    7a68:	14 97       	sbiw	r26, 0x04	; 4
    7a6a:	88 23       	and	r24, r24
    7a6c:	19 f1       	breq	.+70     	; 0x7ab4 <PatchCommand14+0x52>
    7a6e:	55 96       	adiw	r26, 0x15	; 21
    7a70:	2d 91       	ld	r18, X+
    7a72:	3c 91       	ld	r19, X
    7a74:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7a76:	66 23       	and	r22, r22
    7a78:	79 f0       	breq	.+30     	; 0x7a98 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7a7a:	77 27       	eor	r23, r23
    7a7c:	67 fd       	sbrc	r22, 7
    7a7e:	70 95       	com	r23
    7a80:	6f 5f       	subi	r22, 0xFF	; 255
    7a82:	7f 4f       	sbci	r23, 0xFF	; 255
    7a84:	ab 01       	movw	r20, r22
    7a86:	44 0f       	add	r20, r20
    7a88:	55 1f       	adc	r21, r21
    7a8a:	64 0f       	add	r22, r20
    7a8c:	75 1f       	adc	r23, r21
    7a8e:	26 1b       	sub	r18, r22
    7a90:	37 0b       	sbc	r19, r23
    7a92:	09 c0       	rjmp	.+18     	; 0x7aa6 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a94:	ef 3f       	cpi	r30, 0xFF	; 255
    7a96:	39 f0       	breq	.+14     	; 0x7aa6 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7a98:	23 50       	subi	r18, 0x03	; 3
    7a9a:	31 09       	sbc	r19, r1
    7a9c:	f9 01       	movw	r30, r18
    7a9e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7aa0:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7aa2:	ed 30       	cpi	r30, 0x0D	; 13
    7aa4:	b9 f7       	brne	.-18     	; 0x7a94 <PatchCommand14+0x32>
    7aa6:	56 96       	adiw	r26, 0x16	; 22
    7aa8:	3c 93       	st	X, r19
    7aaa:	2e 93       	st	-X, r18
    7aac:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7aae:	81 50       	subi	r24, 0x01	; 1
    7ab0:	14 96       	adiw	r26, 0x04	; 4
    7ab2:	8c 93       	st	X, r24
    7ab4:	08 95       	ret

00007ab6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7ab6:	90 93 26 0b 	sts	0x0B26, r25
    7aba:	80 93 25 0b 	sts	0x0B25, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7abe:	8f e6       	ldi	r24, 0x6F	; 111
    7ac0:	80 93 28 0b 	sts	0x0B28, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7ac4:	10 92 42 0a 	sts	0x0A42, r1
    7ac8:	e7 ed       	ldi	r30, 0xD7	; 215
    7aca:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7acc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7ace:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7ad0:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7ad2:	28 e1       	ldi	r18, 0x18	; 24
    7ad4:	df 01       	movw	r26, r30
    7ad6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7ad8:	8c 93       	st	X, r24
    7ada:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7adc:	9c 93       	st	X, r25
    7ade:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7ae0:	1c 92       	st	X, r1
    7ae2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7ae4:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7ae6:	10 82       	st	Z, r1
    7ae8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7aea:	2c 93       	st	X, r18
    7aec:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7aee:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7af0:	8f 5f       	subi	r24, 0xFF	; 255
    7af2:	77 96       	adiw	r30, 0x17	; 23
    7af4:	84 30       	cpi	r24, 0x04	; 4
    7af6:	71 f7       	brne	.-36     	; 0x7ad4 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7af8:	08 95       	ret

00007afa <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7afa:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7afc:	ed 91       	ld	r30, X+
    7afe:	fc 91       	ld	r31, X
    7b00:	11 97       	sbiw	r26, 0x01	; 1
    7b02:	9f 01       	movw	r18, r30
    7b04:	2f 5f       	subi	r18, 0xFF	; 255
    7b06:	3f 4f       	sbci	r19, 0xFF	; 255
    7b08:	11 96       	adiw	r26, 0x01	; 1
    7b0a:	3c 93       	st	X, r19
    7b0c:	2e 93       	st	-X, r18
    7b0e:	e4 91       	lpm	r30, Z
    7b10:	e7 fd       	sbrc	r30, 7
    7b12:	03 c0       	rjmp	.+6      	; 0x7b1a <ReadVarLen+0x20>
    7b14:	8e 2f       	mov	r24, r30
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	08 95       	ret
    {
       value &= 0x7F;
    7b1a:	ef 77       	andi	r30, 0x7F	; 127
    7b1c:	8e 2f       	mov	r24, r30
    7b1e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7b20:	96 95       	lsr	r25
    7b22:	98 2f       	mov	r25, r24
    7b24:	88 27       	eor	r24, r24
    7b26:	97 95       	ror	r25
    7b28:	87 95       	ror	r24
    7b2a:	2f 5f       	subi	r18, 0xFF	; 255
    7b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b2e:	f9 01       	movw	r30, r18
    7b30:	31 97       	sbiw	r30, 0x01	; 1
    7b32:	e4 91       	lpm	r30, Z
    7b34:	4e 2f       	mov	r20, r30
    7b36:	4f 77       	andi	r20, 0x7F	; 127
    7b38:	84 0f       	add	r24, r20
    7b3a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7b3c:	e7 fd       	sbrc	r30, 7
    7b3e:	f0 cf       	rjmp	.-32     	; 0x7b20 <ReadVarLen+0x26>
    7b40:	2d 93       	st	X+, r18
    7b42:	3c 93       	st	X, r19
    }


    return value;
}
    7b44:	08 95       	ret

00007b46 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7b46:	ef 92       	push	r14
    7b48:	ff 92       	push	r15
    7b4a:	0f 93       	push	r16
    7b4c:	1f 93       	push	r17
    7b4e:	cf 93       	push	r28
    7b50:	df 93       	push	r29
    7b52:	1f 92       	push	r1
    7b54:	cd b7       	in	r28, 0x3d	; 61
    7b56:	de b7       	in	r29, 0x3e	; 62
    7b58:	7c 01       	movw	r14, r24
    7b5a:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7b5c:	fc 01       	movw	r30, r24
    7b5e:	80 81       	ld	r24, Z
    7b60:	08 2f       	mov	r16, r24
    7b62:	00 1f       	adc	r16, r16
    7b64:	00 27       	eor	r16, r16
    7b66:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7b68:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7b6a:	9f ef       	ldi	r25, 0xFF	; 255
    7b6c:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7b6e:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7b70:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7b72:	87 7b       	andi	r24, 0xB7	; 183
    7b74:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7b76:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7b78:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7b7a:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7b7c:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7b7e:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7b80:	82 81       	ldd	r24, Z+2	; 0x02
    7b82:	83 30       	cpi	r24, 0x03	; 3
    7b84:	69 f4       	brne	.+26     	; 0x7ba0 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7b86:	01 11       	cpse	r16, r1
    7b88:	01 c0       	rjmp	.+2      	; 0x7b8c <TriggerCommon+0x46>
    7b8a:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7b8c:	81 e0       	ldi	r24, 0x01	; 1
    7b8e:	91 e0       	ldi	r25, 0x01	; 1
    7b90:	90 93 59 0a 	sts	0x0A59, r25
    7b94:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7b98:	81 e0       	ldi	r24, 0x01	; 1
    7b9a:	80 93 57 0a 	sts	0x0A57, r24
    7b9e:	0a c0       	rjmp	.+20     	; 0x7bb4 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7ba0:	60 e0       	ldi	r22, 0x00	; 0
    7ba2:	29 83       	std	Y+1, r18	; 0x01
    7ba4:	0e 94 c3 40 	call	0x8186	; 0x8186 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7ba8:	29 81       	ldd	r18, Y+1	; 0x01
    7baa:	62 2f       	mov	r22, r18
    7bac:	f7 01       	movw	r30, r14
    7bae:	82 81       	ldd	r24, Z+2	; 0x02
    7bb0:	0e 94 ac 40 	call	0x8158	; 0x8158 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7bb4:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7bb6:	00 23       	and	r16, r16
    7bb8:	11 f0       	breq	.+4      	; 0x7bbe <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7bba:	11 8b       	std	Z+17, r17	; 0x11
    7bbc:	01 c0       	rjmp	.+2      	; 0x7bc0 <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7bbe:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7bc0:	e0 91 25 0b 	lds	r30, 0x0B25
    7bc4:	f0 91 26 0b 	lds	r31, 0x0B26
    7bc8:	89 e0       	ldi	r24, 0x09	; 9
    7bca:	18 9f       	mul	r17, r24
    7bcc:	e0 0d       	add	r30, r0
    7bce:	f1 1d       	adc	r31, r1
    7bd0:	11 24       	eor	r1, r1
    7bd2:	33 96       	adiw	r30, 0x03	; 3
    7bd4:	85 91       	lpm	r24, Z+
    7bd6:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7bd8:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7bda:	00 97       	sbiw	r24, 0x00	; 0
    7bdc:	19 f4       	brne	.+6      	; 0x7be4 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7bde:	16 8a       	std	Z+22, r1	; 0x16
    7be0:	15 8a       	std	Z+21, r1	; 0x15
    7be2:	08 c0       	rjmp	.+16     	; 0x7bf4 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7be4:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7be6:	fc 01       	movw	r30, r24
    7be8:	24 91       	lpm	r18, Z
    7bea:	f7 01       	movw	r30, r14
    7bec:	22 8b       	std	Z+18, r18	; 0x12
    7bee:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7bf0:	96 8b       	std	Z+22, r25	; 0x16
    7bf2:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7bf4:	0f 90       	pop	r0
    7bf6:	df 91       	pop	r29
    7bf8:	cf 91       	pop	r28
    7bfa:	1f 91       	pop	r17
    7bfc:	0f 91       	pop	r16
    7bfe:	ff 90       	pop	r15
    7c00:	ef 90       	pop	r14
    7c02:	08 95       	ret

00007c04 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7c04:	cf 93       	push	r28
    7c06:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7c08:	e0 91 25 0b 	lds	r30, 0x0B25
    7c0c:	f0 91 26 0b 	lds	r31, 0x0B26
    7c10:	99 e0       	ldi	r25, 0x09	; 9
    7c12:	89 9f       	mul	r24, r25
    7c14:	e0 0d       	add	r30, r0
    7c16:	f1 1d       	adc	r31, r1
    7c18:	11 24       	eor	r1, r1
    7c1a:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7c1c:	e1 30       	cpi	r30, 0x01	; 1
    7c1e:	e9 f0       	breq	.+58     	; 0x7c5a <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7c20:	e2 30       	cpi	r30, 0x02	; 2
    7c22:	e9 f0       	breq	.+58     	; 0x7c5e <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7c24:	20 91 de 0a 	lds	r18, 0x0ADE
    7c28:	27 ff       	sbrs	r18, 7
    7c2a:	1d c0       	rjmp	.+58     	; 0x7c66 <TriggerFx+0x62>
    7c2c:	20 91 ef 0a 	lds	r18, 0x0AEF
    7c30:	28 13       	cpse	r18, r24
    7c32:	02 c0       	rjmp	.+4      	; 0x7c38 <TriggerFx+0x34>
    7c34:	41 11       	cpse	r20, r1
    7c36:	17 c0       	rjmp	.+46     	; 0x7c66 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7c38:	20 91 f5 0a 	lds	r18, 0x0AF5
    7c3c:	27 ff       	sbrs	r18, 7
    7c3e:	11 c0       	rjmp	.+34     	; 0x7c62 <TriggerFx+0x5e>
    7c40:	20 91 06 0b 	lds	r18, 0x0B06
    7c44:	28 13       	cpse	r18, r24
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <TriggerFx+0x48>
    7c48:	41 11       	cpse	r20, r1
    7c4a:	0b c0       	rjmp	.+22     	; 0x7c62 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7c4c:	20 91 f2 0a 	lds	r18, 0x0AF2
    7c50:	90 91 09 0b 	lds	r25, 0x0B09
    7c54:	92 17       	cp	r25, r18
    7c56:	28 f4       	brcc	.+10     	; 0x7c62 <TriggerFx+0x5e>
    7c58:	06 c0       	rjmp	.+12     	; 0x7c66 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7c5a:	c3 e0       	ldi	r28, 0x03	; 3
    7c5c:	05 c0       	rjmp	.+10     	; 0x7c68 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7c5e:	c4 e0       	ldi	r28, 0x04	; 4
    7c60:	03 c0       	rjmp	.+6      	; 0x7c68 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7c62:	c2 e0       	ldi	r28, 0x02	; 2
    7c64:	01 c0       	rjmp	.+2      	; 0x7c68 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7c66:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7c68:	97 e1       	ldi	r25, 0x17	; 23
    7c6a:	c9 9f       	mul	r28, r25
    7c6c:	e0 01       	movw	r28, r0
    7c6e:	11 24       	eor	r1, r1
    7c70:	c9 53       	subi	r28, 0x39	; 57
    7c72:	d5 4f       	sbci	r29, 0xF5	; 245
    7c74:	90 e8       	ldi	r25, 0x80	; 128
    7c76:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7c78:	1e 8a       	std	Y+22, r1	; 0x16
    7c7a:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7c7c:	20 e5       	ldi	r18, 0x50	; 80
    7c7e:	46 2f       	mov	r20, r22
    7c80:	68 2f       	mov	r22, r24
    7c82:	ce 01       	movw	r24, r28
    7c84:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7c88:	88 81       	ld	r24, Y
    7c8a:	80 62       	ori	r24, 0x20	; 32
    7c8c:	88 83       	st	Y, r24
}
    7c8e:	df 91       	pop	r29
    7c90:	cf 91       	pop	r28
    7c92:	08 95       	ret

00007c94 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7c94:	cf 93       	push	r28
    7c96:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7c98:	a8 2f       	mov	r26, r24
    7c9a:	b0 e0       	ldi	r27, 0x00	; 0
    7c9c:	97 e1       	ldi	r25, 0x17	; 23
    7c9e:	89 9f       	mul	r24, r25
    7ca0:	f0 01       	movw	r30, r0
    7ca2:	11 24       	eor	r1, r1
    7ca4:	e9 53       	subi	r30, 0x39	; 57
    7ca6:	f5 4f       	sbci	r31, 0xF5	; 245
    7ca8:	80 81       	ld	r24, Z
    7caa:	85 ff       	sbrs	r24, 5
    7cac:	02 c0       	rjmp	.+4      	; 0x7cb2 <TriggerNote+0x1e>
    7cae:	87 fd       	sbrc	r24, 7
    7cb0:	2e c0       	rjmp	.+92     	; 0x7d0e <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7cb2:	21 11       	cpse	r18, r1
    7cb4:	18 c0       	rjmp	.+48     	; 0x7ce6 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7cb6:	97 e1       	ldi	r25, 0x17	; 23
    7cb8:	9a 9f       	mul	r25, r26
    7cba:	f0 01       	movw	r30, r0
    7cbc:	9b 9f       	mul	r25, r27
    7cbe:	f0 0d       	add	r31, r0
    7cc0:	11 24       	eor	r1, r1
    7cc2:	e9 53       	subi	r30, 0x39	; 57
    7cc4:	f5 4f       	sbci	r31, 0xF5	; 245
    7cc6:	97 85       	ldd	r25, Z+15	; 0x0f
    7cc8:	91 11       	cpse	r25, r1
    7cca:	02 c0       	rjmp	.+4      	; 0x7cd0 <TriggerNote+0x3c>
    7ccc:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7cce:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7cd0:	97 e1       	ldi	r25, 0x17	; 23
    7cd2:	9a 9f       	mul	r25, r26
    7cd4:	f0 01       	movw	r30, r0
    7cd6:	9b 9f       	mul	r25, r27
    7cd8:	f0 0d       	add	r31, r0
    7cda:	11 24       	eor	r1, r1
    7cdc:	e9 53       	subi	r30, 0x39	; 57
    7cde:	f5 4f       	sbci	r31, 0xF5	; 245
    7ce0:	8f 7b       	andi	r24, 0xBF	; 191
    7ce2:	80 83       	st	Z, r24
    7ce4:	14 c0       	rjmp	.+40     	; 0x7d0e <TriggerNote+0x7a>
    7ce6:	82 2f       	mov	r24, r18
    7ce8:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7cea:	97 e1       	ldi	r25, 0x17	; 23
    7cec:	9a 9f       	mul	r25, r26
    7cee:	e0 01       	movw	r28, r0
    7cf0:	9b 9f       	mul	r25, r27
    7cf2:	d0 0d       	add	r29, r0
    7cf4:	11 24       	eor	r1, r1
    7cf6:	c9 53       	subi	r28, 0x39	; 57
    7cf8:	d5 4f       	sbci	r29, 0xF5	; 245
    7cfa:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7cfc:	1e 8a       	std	Y+22, r1	; 0x16
    7cfe:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7d00:	48 2f       	mov	r20, r24
    7d02:	ce 01       	movw	r24, r28
    7d04:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7d08:	88 81       	ld	r24, Y
    7d0a:	80 62       	ori	r24, 0x20	; 32
    7d0c:	88 83       	st	Y, r24
		}

	}
}
    7d0e:	df 91       	pop	r29
    7d10:	cf 91       	pop	r28
    7d12:	08 95       	ret

00007d14 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7d14:	6f 92       	push	r6
    7d16:	7f 92       	push	r7
    7d18:	8f 92       	push	r8
    7d1a:	9f 92       	push	r9
    7d1c:	af 92       	push	r10
    7d1e:	bf 92       	push	r11
    7d20:	cf 92       	push	r12
    7d22:	df 92       	push	r13
    7d24:	ef 92       	push	r14
    7d26:	ff 92       	push	r15
    7d28:	0f 93       	push	r16
    7d2a:	1f 93       	push	r17
    7d2c:	cf 93       	push	r28
    7d2e:	df 93       	push	r29
    7d30:	c7 ec       	ldi	r28, 0xC7	; 199
    7d32:	da e0       	ldi	r29, 0x0A	; 10
    7d34:	04 e4       	ldi	r16, 0x44	; 68
    7d36:	1a e0       	ldi	r17, 0x0A	; 10
    7d38:	d8 01       	movw	r26, r16
    7d3a:	9e 01       	movw	r18, r28
    7d3c:	40 e0       	ldi	r20, 0x00	; 0
    7d3e:	50 e0       	ldi	r21, 0x00	; 0
    7d40:	ca 01       	movw	r24, r20
    7d42:	89 53       	subi	r24, 0x39	; 57
    7d44:	95 4f       	sbci	r25, 0xF5	; 245
    7d46:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7d48:	fc 01       	movw	r30, r24
    7d4a:	87 85       	ldd	r24, Z+15	; 0x0f
    7d4c:	88 23       	and	r24, r24
    7d4e:	91 f0       	breq	.+36     	; 0x7d74 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7d50:	66 85       	ldd	r22, Z+14	; 0x0e
    7d52:	99 27       	eor	r25, r25
    7d54:	87 fd       	sbrc	r24, 7
    7d56:	90 95       	com	r25
    7d58:	86 0f       	add	r24, r22
    7d5a:	91 1d       	adc	r25, r1
    7d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    7d5e:	91 05       	cpc	r25, r1
    7d60:	19 f0       	breq	.+6      	; 0x7d68 <ProcessMusic+0x54>
    7d62:	14 f0       	brlt	.+4      	; 0x7d68 <ProcessMusic+0x54>
    7d64:	8f ef       	ldi	r24, 0xFF	; 255
    7d66:	90 e0       	ldi	r25, 0x00	; 0
    7d68:	97 ff       	sbrs	r25, 7
    7d6a:	02 c0       	rjmp	.+4      	; 0x7d70 <ProcessMusic+0x5c>
    7d6c:	80 e0       	ldi	r24, 0x00	; 0
    7d6e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7d70:	f6 01       	movw	r30, r12
    7d72:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7d74:	f9 01       	movw	r30, r18
    7d76:	f0 80       	ld	r15, Z
    7d78:	f3 fe       	sbrs	r15, 3
    7d7a:	2a c0       	rjmp	.+84     	; 0x7dd0 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7d7c:	65 81       	ldd	r22, Z+5	; 0x05
    7d7e:	76 81       	ldd	r23, Z+6	; 0x06
    7d80:	11 96       	adiw	r26, 0x01	; 1
    7d82:	8d 91       	ld	r24, X+
    7d84:	9c 91       	ld	r25, X
    7d86:	12 97       	sbiw	r26, 0x02	; 2
    7d88:	86 0f       	add	r24, r22
    7d8a:	97 1f       	adc	r25, r23
    7d8c:	12 96       	adiw	r26, 0x02	; 2
    7d8e:	9c 93       	st	X, r25
    7d90:	8e 93       	st	-X, r24
    7d92:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7d94:	f6 01       	movw	r30, r12
    7d96:	e7 80       	ldd	r14, Z+7	; 0x07
    7d98:	ee 2d       	mov	r30, r14
    7d9a:	f0 e0       	ldi	r31, 0x00	; 0
    7d9c:	ee 0f       	add	r30, r30
    7d9e:	ff 1f       	adc	r31, r31
    7da0:	e8 5f       	subi	r30, 0xF8	; 248
    7da2:	fd 47       	sbci	r31, 0x7D	; 125
    7da4:	c5 90       	lpm	r12, Z+
    7da6:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7da8:	16 16       	cp	r1, r22
    7daa:	17 06       	cpc	r1, r23
    7dac:	24 f4       	brge	.+8      	; 0x7db6 <ProcessMusic+0xa2>
    7dae:	8c 15       	cp	r24, r12
    7db0:	9d 05       	cpc	r25, r13
    7db2:	30 f4       	brcc	.+12     	; 0x7dc0 <ProcessMusic+0xac>
    7db4:	0d c0       	rjmp	.+26     	; 0x7dd0 <ProcessMusic+0xbc>
    7db6:	67 2b       	or	r22, r23
    7db8:	59 f0       	breq	.+22     	; 0x7dd0 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7dba:	c8 16       	cp	r12, r24
    7dbc:	d9 06       	cpc	r13, r25
    7dbe:	40 f0       	brcs	.+16     	; 0x7dd0 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7dc0:	12 96       	adiw	r26, 0x02	; 2
    7dc2:	dc 92       	st	X, r13
    7dc4:	ce 92       	st	-X, r12
    7dc6:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7dc8:	8f 2d       	mov	r24, r15
    7dca:	87 7f       	andi	r24, 0xF7	; 247
    7dcc:	f9 01       	movw	r30, r18
    7dce:	80 83       	st	Z, r24
    7dd0:	49 5e       	subi	r20, 0xE9	; 233
    7dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    7dd4:	29 5e       	subi	r18, 0xE9	; 233
    7dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7dd8:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7dda:	4c 35       	cpi	r20, 0x5C	; 92
    7ddc:	51 05       	cpc	r21, r1
    7dde:	09 f0       	breq	.+2      	; 0x7de2 <ProcessMusic+0xce>
    7de0:	af cf       	rjmp	.-162    	; 0x7d40 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7de2:	80 91 42 0a 	lds	r24, 0x0A42
    7de6:	88 23       	and	r24, r24
    7de8:	09 f4       	brne	.+2      	; 0x7dec <ProcessMusic+0xd8>
    7dea:	cc c0       	rjmp	.+408    	; 0x7f84 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7dec:	57 e1       	ldi	r21, 0x17	; 23
    7dee:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7df0:	80 91 23 0b 	lds	r24, 0x0B23
    7df4:	90 91 24 0b 	lds	r25, 0x0B24
    7df8:	20 91 29 0b 	lds	r18, 0x0B29
    7dfc:	30 91 2a 0b 	lds	r19, 0x0B2A
    7e00:	82 17       	cp	r24, r18
    7e02:	93 07       	cpc	r25, r19
    7e04:	09 f0       	breq	.+2      	; 0x7e08 <ProcessMusic+0xf4>
    7e06:	b9 c0       	rjmp	.+370    	; 0x7f7a <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7e08:	20 91 2c 0b 	lds	r18, 0x0B2C
    7e0c:	30 91 2d 0b 	lds	r19, 0x0B2D
    7e10:	b9 01       	movw	r22, r18
    7e12:	6f 5f       	subi	r22, 0xFF	; 255
    7e14:	7f 4f       	sbci	r23, 0xFF	; 255
    7e16:	70 93 2d 0b 	sts	0x0B2D, r23
    7e1a:	60 93 2c 0b 	sts	0x0B2C, r22
    7e1e:	f9 01       	movw	r30, r18
    7e20:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7e22:	4f 3f       	cpi	r20, 0xFF	; 255
    7e24:	79 f5       	brne	.+94     	; 0x7e84 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7e26:	a9 01       	movw	r20, r18
    7e28:	4e 5f       	subi	r20, 0xFE	; 254
    7e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7e2c:	50 93 2d 0b 	sts	0x0B2D, r21
    7e30:	40 93 2c 0b 	sts	0x0B2C, r20
    7e34:	fb 01       	movw	r30, r22
    7e36:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7e38:	6f 32       	cpi	r22, 0x2F	; 47
    7e3a:	19 f4       	brne	.+6      	; 0x7e42 <ProcessMusic+0x12e>
						playSong=false;
    7e3c:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    7e40:	9c c0       	rjmp	.+312    	; 0x7f7a <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7e42:	66 30       	cpi	r22, 0x06	; 6
    7e44:	09 f0       	breq	.+2      	; 0x7e48 <ProcessMusic+0x134>
    7e46:	8c c0       	rjmp	.+280    	; 0x7f60 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7e48:	fa 01       	movw	r30, r20
    7e4a:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7e4c:	c9 01       	movw	r24, r18
    7e4e:	04 96       	adiw	r24, 0x04	; 4
    7e50:	90 93 2d 0b 	sts	0x0B2D, r25
    7e54:	80 93 2c 0b 	sts	0x0B2C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7e58:	f9 01       	movw	r30, r18
    7e5a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7e5c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7e5e:	e3 35       	cpi	r30, 0x53	; 83
    7e60:	29 f4       	brne	.+10     	; 0x7e6c <ProcessMusic+0x158>
							loopStart=songPos;
    7e62:	90 93 2f 0b 	sts	0x0B2F, r25
    7e66:	80 93 2e 0b 	sts	0x0B2E, r24
    7e6a:	7a c0       	rjmp	.+244    	; 0x7f60 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7e6c:	e5 34       	cpi	r30, 0x45	; 69
    7e6e:	09 f0       	breq	.+2      	; 0x7e72 <ProcessMusic+0x15e>
    7e70:	77 c0       	rjmp	.+238    	; 0x7f60 <ProcessMusic+0x24c>
							songPos=loopStart;
    7e72:	80 91 2e 0b 	lds	r24, 0x0B2E
    7e76:	90 91 2f 0b 	lds	r25, 0x0B2F
    7e7a:	90 93 2d 0b 	sts	0x0B2D, r25
    7e7e:	80 93 2c 0b 	sts	0x0B2C, r24
    7e82:	6e c0       	rjmp	.+220    	; 0x7f60 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7e84:	47 fd       	sbrc	r20, 7
    7e86:	40 93 27 0b 	sts	0x0B27, r20
					channel=lastStatus&0x0f;
    7e8a:	90 91 27 0b 	lds	r25, 0x0B27
    7e8e:	89 2f       	mov	r24, r25
    7e90:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7e92:	47 ff       	sbrs	r20, 7
    7e94:	08 c0       	rjmp	.+16     	; 0x7ea6 <ProcessMusic+0x192>
    7e96:	2e 5f       	subi	r18, 0xFE	; 254
    7e98:	3f 4f       	sbci	r19, 0xFF	; 255
    7e9a:	30 93 2d 0b 	sts	0x0B2D, r19
    7e9e:	20 93 2c 0b 	sts	0x0B2C, r18
    7ea2:	fb 01       	movw	r30, r22
    7ea4:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7ea6:	90 7f       	andi	r25, 0xF0	; 240
    7ea8:	90 3b       	cpi	r25, 0xB0	; 176
    7eaa:	e1 f0       	breq	.+56     	; 0x7ee4 <ProcessMusic+0x1d0>
    7eac:	90 3c       	cpi	r25, 0xC0	; 192
    7eae:	09 f4       	brne	.+2      	; 0x7eb2 <ProcessMusic+0x19e>
    7eb0:	51 c0       	rjmp	.+162    	; 0x7f54 <ProcessMusic+0x240>
    7eb2:	90 39       	cpi	r25, 0x90	; 144
    7eb4:	09 f0       	breq	.+2      	; 0x7eb8 <ProcessMusic+0x1a4>
    7eb6:	54 c0       	rjmp	.+168    	; 0x7f60 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7eb8:	e0 91 2c 0b 	lds	r30, 0x0B2C
    7ebc:	f0 91 2d 0b 	lds	r31, 0x0B2D
    7ec0:	9f 01       	movw	r18, r30
    7ec2:	2f 5f       	subi	r18, 0xFF	; 255
    7ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ec6:	30 93 2d 0b 	sts	0x0B2D, r19
    7eca:	20 93 2c 0b 	sts	0x0B2C, r18
    7ece:	24 91       	lpm	r18, Z
    7ed0:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7ed2:	f8 9e       	mul	r15, r24
    7ed4:	f0 01       	movw	r30, r0
    7ed6:	11 24       	eor	r1, r1
    7ed8:	e9 53       	subi	r30, 0x39	; 57
    7eda:	f5 4f       	sbci	r31, 0xF5	; 245
    7edc:	60 89       	ldd	r22, Z+16	; 0x10
    7ede:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <TriggerNote>
    7ee2:	3e c0       	rjmp	.+124    	; 0x7f60 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7ee4:	e0 91 2c 0b 	lds	r30, 0x0B2C
    7ee8:	f0 91 2d 0b 	lds	r31, 0x0B2D
    7eec:	9f 01       	movw	r18, r30
    7eee:	2f 5f       	subi	r18, 0xFF	; 255
    7ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef2:	30 93 2d 0b 	sts	0x0B2D, r19
    7ef6:	20 93 2c 0b 	sts	0x0B2C, r18
    7efa:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7efc:	47 30       	cpi	r20, 0x07	; 7
    7efe:	49 f4       	brne	.+18     	; 0x7f12 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7f00:	f8 9e       	mul	r15, r24
    7f02:	d0 01       	movw	r26, r0
    7f04:	11 24       	eor	r1, r1
    7f06:	a9 53       	subi	r26, 0x39	; 57
    7f08:	b5 4f       	sbci	r27, 0xF5	; 245
    7f0a:	ee 0f       	add	r30, r30
    7f0c:	1c 96       	adiw	r26, 0x0c	; 12
    7f0e:	ec 93       	st	X, r30
    7f10:	27 c0       	rjmp	.+78     	; 0x7f60 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7f12:	4b 30       	cpi	r20, 0x0B	; 11
    7f14:	49 f4       	brne	.+18     	; 0x7f28 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7f16:	f8 9e       	mul	r15, r24
    7f18:	d0 01       	movw	r26, r0
    7f1a:	11 24       	eor	r1, r1
    7f1c:	a9 53       	subi	r26, 0x39	; 57
    7f1e:	b5 4f       	sbci	r27, 0xF5	; 245
    7f20:	ee 0f       	add	r30, r30
    7f22:	13 96       	adiw	r26, 0x03	; 3
    7f24:	ec 93       	st	X, r30
    7f26:	1c c0       	rjmp	.+56     	; 0x7f60 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7f28:	4c 35       	cpi	r20, 0x5C	; 92
    7f2a:	49 f4       	brne	.+18     	; 0x7f3e <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7f2c:	f8 9e       	mul	r15, r24
    7f2e:	d0 01       	movw	r26, r0
    7f30:	11 24       	eor	r1, r1
    7f32:	a9 53       	subi	r26, 0x39	; 57
    7f34:	b5 4f       	sbci	r27, 0xF5	; 245
    7f36:	ee 0f       	add	r30, r30
    7f38:	1a 96       	adiw	r26, 0x0a	; 10
    7f3a:	ec 93       	st	X, r30
    7f3c:	11 c0       	rjmp	.+34     	; 0x7f60 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7f3e:	44 36       	cpi	r20, 0x64	; 100
    7f40:	79 f4       	brne	.+30     	; 0x7f60 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7f42:	f8 9e       	mul	r15, r24
    7f44:	d0 01       	movw	r26, r0
    7f46:	11 24       	eor	r1, r1
    7f48:	a9 53       	subi	r26, 0x39	; 57
    7f4a:	b5 4f       	sbci	r27, 0xF5	; 245
    7f4c:	ee 0f       	add	r30, r30
    7f4e:	1b 96       	adiw	r26, 0x0b	; 11
    7f50:	ec 93       	st	X, r30
    7f52:	06 c0       	rjmp	.+12     	; 0x7f60 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7f54:	f8 9e       	mul	r15, r24
    7f56:	f0 01       	movw	r30, r0
    7f58:	11 24       	eor	r1, r1
    7f5a:	e9 53       	subi	r30, 0x39	; 57
    7f5c:	f5 4f       	sbci	r31, 0xF5	; 245
    7f5e:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7f60:	8c e2       	ldi	r24, 0x2C	; 44
    7f62:	9b e0       	ldi	r25, 0x0B	; 11
    7f64:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <ReadVarLen>
    7f68:	90 93 2a 0b 	sts	0x0B2A, r25
    7f6c:	80 93 29 0b 	sts	0x0B29, r24
				currDeltaTime=0;
    7f70:	10 92 24 0b 	sts	0x0B24, r1
    7f74:	10 92 23 0b 	sts	0x0B23, r1
    7f78:	3b cf       	rjmp	.-394    	; 0x7df0 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7f7a:	01 96       	adiw	r24, 0x01	; 1
    7f7c:	90 93 24 0b 	sts	0x0B24, r25
    7f80:	80 93 23 0b 	sts	0x0B23, r24
    7f84:	90 ed       	ldi	r25, 0xD0	; 208
    7f86:	a9 2e       	mov	r10, r25
    7f88:	9a e0       	ldi	r25, 0x0A	; 10
    7f8a:	b9 2e       	mov	r11, r25
    7f8c:	2a ed       	ldi	r18, 0xDA	; 218
    7f8e:	c2 2e       	mov	r12, r18
    7f90:	2a e0       	ldi	r18, 0x0A	; 10
    7f92:	d2 2e       	mov	r13, r18
    7f94:	3b ed       	ldi	r19, 0xDB	; 219
    7f96:	e3 2e       	mov	r14, r19
    7f98:	3a e0       	ldi	r19, 0x0A	; 10
    7f9a:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f9c:	66 24       	eor	r6, r6
    7f9e:	6a 94       	dec	r6
    7fa0:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7fa2:	88 81       	ld	r24, Y
    7fa4:	85 ff       	sbrs	r24, 5
    7fa6:	42 c0       	rjmp	.+132    	; 0x802c <ProcessMusic+0x318>
    7fa8:	2d 89       	ldd	r18, Y+21	; 0x15
    7faa:	3e 89       	ldd	r19, Y+22	; 0x16
    7fac:	23 2b       	or	r18, r19
    7fae:	09 f4       	brne	.+2      	; 0x7fb2 <ProcessMusic+0x29e>
    7fb0:	3d c0       	rjmp	.+122    	; 0x802c <ProcessMusic+0x318>
    7fb2:	86 fd       	sbrc	r24, 6
    7fb4:	3b c0       	rjmp	.+118    	; 0x802c <ProcessMusic+0x318>
    7fb6:	47 01       	movw	r8, r14
    7fb8:	f2 e0       	ldi	r31, 0x02	; 2
    7fba:	8f 1a       	sub	r8, r31
    7fbc:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7fbe:	d6 01       	movw	r26, r12
    7fc0:	9c 91       	ld	r25, X
    7fc2:	f4 01       	movw	r30, r8
    7fc4:	80 81       	ld	r24, Z
    7fc6:	98 13       	cpse	r25, r24
    7fc8:	2e c0       	rjmp	.+92     	; 0x8026 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7fca:	ed 89       	ldd	r30, Y+21	; 0x15
    7fcc:	fe 89       	ldd	r31, Y+22	; 0x16
    7fce:	bf 01       	movw	r22, r30
    7fd0:	6f 5f       	subi	r22, 0xFF	; 255
    7fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fd4:	7e 8b       	std	Y+22, r23	; 0x16
    7fd6:	6d 8b       	std	Y+21, r22	; 0x15
    7fd8:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7fda:	8f 3f       	cpi	r24, 0xFF	; 255
    7fdc:	31 f4       	brne	.+12     	; 0x7fea <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7fde:	88 81       	ld	r24, Y
    7fe0:	8f 77       	andi	r24, 0x7F	; 127
    7fe2:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7fe4:	1e 8a       	std	Y+22, r1	; 0x16
    7fe6:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7fe8:	1e c0       	rjmp	.+60     	; 0x8026 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7fea:	9f 01       	movw	r18, r30
    7fec:	2e 5f       	subi	r18, 0xFE	; 254
    7fee:	3f 4f       	sbci	r19, 0xFF	; 255
    7ff0:	3e 8b       	std	Y+22, r19	; 0x16
    7ff2:	2d 8b       	std	Y+21, r18	; 0x15
    7ff4:	fb 01       	movw	r30, r22
    7ff6:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7ff8:	e8 2f       	mov	r30, r24
    7ffa:	f0 e0       	ldi	r31, 0x00	; 0
    7ffc:	ee 0f       	add	r30, r30
    7ffe:	ff 1f       	adc	r31, r31
    8000:	e2 54       	subi	r30, 0x42	; 66
    8002:	ff 4f       	sbci	r31, 0xFF	; 255
    8004:	25 91       	lpm	r18, Z+
    8006:	34 91       	lpm	r19, Z
    8008:	ce 01       	movw	r24, r28
    800a:	f9 01       	movw	r30, r18
    800c:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    800e:	ed 89       	ldd	r30, Y+21	; 0x15
    8010:	fe 89       	ldd	r31, Y+22	; 0x16
    8012:	cf 01       	movw	r24, r30
    8014:	01 96       	adiw	r24, 0x01	; 1
    8016:	9e 8b       	std	Y+22, r25	; 0x16
    8018:	8d 8b       	std	Y+21, r24	; 0x15
    801a:	e4 91       	lpm	r30, Z
    801c:	d4 01       	movw	r26, r8
    801e:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8020:	f6 01       	movw	r30, r12
    8022:	10 82       	st	Z, r1
    8024:	cc cf       	rjmp	.-104    	; 0x7fbe <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8026:	9f 5f       	subi	r25, 0xFF	; 255
    8028:	d6 01       	movw	r26, r12
    802a:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    802c:	98 81       	ld	r25, Y
    802e:	95 ff       	sbrs	r25, 5
    8030:	6c c0       	rjmp	.+216    	; 0x810a <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8032:	f7 01       	movw	r30, r14
    8034:	80 81       	ld	r24, Z
    8036:	8f 3f       	cpi	r24, 0xFF	; 255
    8038:	11 f0       	breq	.+4      	; 0x803e <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    803a:	8f 5f       	subi	r24, 0xFF	; 255
    803c:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    803e:	97 fd       	sbrc	r25, 7
    8040:	04 c0       	rjmp	.+8      	; 0x804a <ProcessMusic+0x336>
    8042:	f7 01       	movw	r30, r14
    8044:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8046:	90 81       	ld	r25, Z
    8048:	01 c0       	rjmp	.+2      	; 0x804c <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    804a:	9f ef       	ldi	r25, 0xFF	; 255
    804c:	f7 01       	movw	r30, r14
    804e:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8050:	80 81       	ld	r24, Z
    8052:	88 23       	and	r24, r24
    8054:	09 f4       	brne	.+2      	; 0x8058 <ProcessMusic+0x344>
    8056:	4e c0       	rjmp	.+156    	; 0x80f4 <ProcessMusic+0x3e0>
    8058:	31 96       	adiw	r30, 0x01	; 1
    805a:	50 81       	ld	r21, Z
    805c:	55 23       	and	r21, r21
    805e:	09 f4       	brne	.+2      	; 0x8062 <ProcessMusic+0x34e>
    8060:	49 c0       	rjmp	.+146    	; 0x80f4 <ProcessMusic+0x3e0>
    8062:	99 23       	and	r25, r25
    8064:	09 f4       	brne	.+2      	; 0x8068 <ProcessMusic+0x354>
    8066:	46 c0       	rjmp	.+140    	; 0x80f4 <ProcessMusic+0x3e0>
    8068:	40 91 28 0b 	lds	r20, 0x0B28
    806c:	44 23       	and	r20, r20
    806e:	09 f4       	brne	.+2      	; 0x8072 <ProcessMusic+0x35e>
    8070:	41 c0       	rjmp	.+130    	; 0x80f4 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8072:	89 9f       	mul	r24, r25
    8074:	c0 01       	movw	r24, r0
    8076:	11 24       	eor	r1, r1
    8078:	93 95       	inc	r25
				uVol>>=8;
    807a:	89 2f       	mov	r24, r25
    807c:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    807e:	58 9f       	mul	r21, r24
    8080:	90 01       	movw	r18, r0
    8082:	59 9f       	mul	r21, r25
    8084:	30 0d       	add	r19, r0
    8086:	11 24       	eor	r1, r1
    8088:	c9 01       	movw	r24, r18
    808a:	93 95       	inc	r25
				uVol>>=8;
    808c:	89 2f       	mov	r24, r25
    808e:	99 27       	eor	r25, r25
    8090:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8092:	50 81       	ld	r21, Z
    8094:	58 9f       	mul	r21, r24
    8096:	90 01       	movw	r18, r0
    8098:	59 9f       	mul	r21, r25
    809a:	30 0d       	add	r19, r0
    809c:	11 24       	eor	r1, r1
    809e:	33 95       	inc	r19
					uVol>>=8;
    80a0:	23 2f       	mov	r18, r19
    80a2:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    80a4:	42 9f       	mul	r20, r18
    80a6:	c0 01       	movw	r24, r0
    80a8:	43 9f       	mul	r20, r19
    80aa:	90 0d       	add	r25, r0
    80ac:	11 24       	eor	r1, r1
    80ae:	93 95       	inc	r25
				uVol>>=8;
    80b0:	89 2f       	mov	r24, r25
    80b2:	99 27       	eor	r25, r25
    80b4:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    80b6:	20 81       	ld	r18, Z
    80b8:	22 23       	and	r18, r18
    80ba:	f1 f0       	breq	.+60     	; 0x80f8 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    80bc:	d5 01       	movw	r26, r10
    80be:	ec 91       	ld	r30, X
    80c0:	f0 e0       	ldi	r31, 0x00	; 0
    80c2:	e0 50       	subi	r30, 0x00	; 0
    80c4:	fc 47       	sbci	r31, 0x7C	; 124
    80c6:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    80c8:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    80ca:	2e 9f       	mul	r18, r30
    80cc:	f0 01       	movw	r30, r0
    80ce:	11 24       	eor	r1, r1
    80d0:	f3 95       	inc	r31
					tVol>>=8;
    80d2:	ef 2f       	mov	r30, r31
    80d4:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    80d6:	a3 01       	movw	r20, r6
    80d8:	4e 1b       	sub	r20, r30
    80da:	5f 0b       	sbc	r21, r31
    80dc:	48 9f       	mul	r20, r24
    80de:	90 01       	movw	r18, r0
    80e0:	49 9f       	mul	r20, r25
    80e2:	30 0d       	add	r19, r0
    80e4:	58 9f       	mul	r21, r24
    80e6:	30 0d       	add	r19, r0
    80e8:	11 24       	eor	r1, r1
    80ea:	c9 01       	movw	r24, r18
    80ec:	93 95       	inc	r25
					uVol>>=8;
    80ee:	89 2f       	mov	r24, r25
    80f0:	99 27       	eor	r25, r25
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    80f4:	80 e0       	ldi	r24, 0x00	; 0
    80f6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    80f8:	f5 01       	movw	r30, r10
    80fa:	30 81       	ld	r19, Z
    80fc:	f7 01       	movw	r30, r14
    80fe:	39 97       	sbiw	r30, 0x09	; 9
    8100:	20 81       	ld	r18, Z
    8102:	23 0f       	add	r18, r19
    8104:	d5 01       	movw	r26, r10
    8106:	2c 93       	st	X, r18
    8108:	02 c0       	rjmp	.+4      	; 0x810e <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    810a:	80 e0       	ldi	r24, 0x00	; 0
    810c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    810e:	f8 01       	movw	r30, r16
    8110:	80 83       	st	Z, r24
    8112:	67 96       	adiw	r28, 0x17	; 23
    8114:	0a 5f       	subi	r16, 0xFA	; 250
    8116:	1f 4f       	sbci	r17, 0xFF	; 255
    8118:	f7 e1       	ldi	r31, 0x17	; 23
    811a:	af 0e       	add	r10, r31
    811c:	b1 1c       	adc	r11, r1
    811e:	87 e1       	ldi	r24, 0x17	; 23
    8120:	c8 0e       	add	r12, r24
    8122:	d1 1c       	adc	r13, r1
    8124:	97 e1       	ldi	r25, 0x17	; 23
    8126:	e9 0e       	add	r14, r25
    8128:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    812a:	ab e0       	ldi	r26, 0x0B	; 11
    812c:	c3 32       	cpi	r28, 0x23	; 35
    812e:	da 07       	cpc	r29, r26
    8130:	09 f0       	breq	.+2      	; 0x8134 <ProcessMusic+0x420>
    8132:	37 cf       	rjmp	.-402    	; 0x7fa2 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8134:	df 91       	pop	r29
    8136:	cf 91       	pop	r28
    8138:	1f 91       	pop	r17
    813a:	0f 91       	pop	r16
    813c:	ff 90       	pop	r15
    813e:	ef 90       	pop	r14
    8140:	df 90       	pop	r13
    8142:	cf 90       	pop	r12
    8144:	bf 90       	pop	r11
    8146:	af 90       	pop	r10
    8148:	9f 90       	pop	r9
    814a:	8f 90       	pop	r8
    814c:	7f 90       	pop	r7
    814e:	6f 90       	pop	r6
    8150:	08 95       	ret

00008152 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8152:	80 93 28 0b 	sts	0x0B28, r24
    8156:	08 95       	ret

00008158 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8158:	99 27       	eor	r25, r25
	clr r23
    815a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    815c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    815e:	09 f4       	brne	.+2      	; 0x8162 <set_note_waves>
		ret
    8160:	08 95       	ret

00008162 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8162:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8164:	f2 e8       	ldi	r31, 0x82	; 130
	lsl r22
    8166:	66 0f       	add	r22, r22
	rol r23
    8168:	77 1f       	adc	r23, r23
	add ZL,r22
    816a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    816c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    816e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8170:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8172:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8174:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8176:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8178:	28 9f       	mul	r18, r24
	add ZL,r0
    817a:	e0 0d       	add	r30, r0
	adc ZH,r1
    817c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    817e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8180:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8182:	11 24       	eor	r1, r1
	

	ret
    8184:	08 95       	ret

00008186 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8186:	99 27       	eor	r25, r25
	clr r23
    8188:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    818a:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    818c:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    818e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8190:	28 9f       	mul	r18, r24
	add ZL,r0
    8192:	e0 0d       	add	r30, r0
	adc ZH,r1
    8194:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8196:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8198:	31 f4       	brne	.+12     	; 0x81a6 <smw1>
	lds r22,tr4_params
    819a:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    819e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    81a0:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    81a4:	0b c0       	rjmp	.+22     	; 0x81bc <esmw>

000081a6 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    81a6:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    81a8:	31 f4       	brne	.+12     	; 0x81b6 <smw2>
	lds r22,tr4_params
    81aa:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    81ae:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    81b0:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    81b4:	03 c0       	rjmp	.+6      	; 0x81bc <esmw>

000081b6 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    81b6:	74 e8       	ldi	r23, 0x84	; 132
	add r23,r22
    81b8:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    81ba:	75 83       	std	Z+5, r23	; 0x05

000081bc <esmw>:

esmw:
	clr r1	
    81bc:	11 24       	eor	r1, r1
	ret
    81be:	08 95       	ret
	...

00008200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8202:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8206:	08 95       	ret

00008208 <steptable>:
    8208:	22 00       	.word	0x0022	; ????
    820a:	24 00       	.word	0x0024	; ????
    820c:	26 00       	.word	0x0026	; ????
    820e:	28 00       	.word	0x0028	; ????
    8210:	2b 00       	.word	0x002b	; ????
    8212:	2d 00       	.word	0x002d	; ????
    8214:	30 00       	.word	0x0030	; ????
    8216:	33 00       	.word	0x0033	; ????
    8218:	36 00       	.word	0x0036	; ????
    821a:	39 00       	.word	0x0039	; ????
    821c:	3d 00       	.word	0x003d	; ????
    821e:	40 00       	.word	0x0040	; ????
    8220:	44 00       	.word	0x0044	; ????
    8222:	48 00       	.word	0x0048	; ????
    8224:	4c 00       	.word	0x004c	; ????
    8226:	51 00       	.word	0x0051	; ????
    8228:	56 00       	.word	0x0056	; ????
    822a:	5b 00       	.word	0x005b	; ????
    822c:	60 00       	.word	0x0060	; ????
    822e:	66 00       	.word	0x0066	; ????
    8230:	6c 00       	.word	0x006c	; ????
    8232:	73 00       	.word	0x0073	; ????
    8234:	79 00       	.word	0x0079	; ????
    8236:	81 00       	.word	0x0081	; ????
    8238:	88 00       	.word	0x0088	; ????
    823a:	90 00       	.word	0x0090	; ????
    823c:	99 00       	.word	0x0099	; ????
    823e:	a2 00       	.word	0x00a2	; ????
    8240:	ac 00       	.word	0x00ac	; ????
    8242:	b6 00       	.word	0x00b6	; ????
    8244:	c1 00       	.word	0x00c1	; ????
    8246:	cc 00       	.word	0x00cc	; ????
    8248:	d8 00       	.word	0x00d8	; ????
    824a:	e5 00       	.word	0x00e5	; ????
    824c:	f3 00       	.word	0x00f3	; ????
    824e:	01 01       	movw	r0, r2
    8250:	10 01       	movw	r2, r0
    8252:	21 01       	movw	r4, r2
    8254:	32 01       	movw	r6, r4
    8256:	44 01       	movw	r8, r8
    8258:	57 01       	movw	r10, r14
    825a:	6c 01       	movw	r12, r24
    825c:	81 01       	movw	r16, r2
    825e:	98 01       	movw	r18, r16
    8260:	b0 01       	movw	r22, r0
    8262:	ca 01       	movw	r24, r20
    8264:	e5 01       	movw	r28, r10
    8266:	02 02       	muls	r16, r18
    8268:	21 02       	muls	r18, r17
    826a:	41 02       	muls	r20, r17
    826c:	64 02       	muls	r22, r20
    826e:	88 02       	muls	r24, r24
    8270:	ae 02       	muls	r26, r30
    8272:	d7 02       	muls	r29, r23
    8274:	03 03       	mulsu	r16, r19
    8276:	30 03       	mulsu	r19, r16
    8278:	61 03       	mulsu	r22, r17
    827a:	94 03       	fmuls	r17, r20
    827c:	cb 03       	fmulsu	r20, r19
    827e:	05 04       	cpc	r0, r5
    8280:	42 04       	cpc	r4, r2
    8282:	83 04       	cpc	r8, r3
    8284:	c7 04       	cpc	r12, r7
    8286:	10 05       	cpc	r17, r0
    8288:	5d 05       	cpc	r21, r13
    828a:	af 05       	cpc	r26, r15
    828c:	05 06       	cpc	r0, r21
    828e:	61 06       	cpc	r6, r17
    8290:	c2 06       	cpc	r12, r18
    8292:	29 07       	cpc	r18, r25
    8294:	96 07       	cpc	r25, r22
    8296:	09 08       	sbc	r0, r9
    8298:	83 08       	sbc	r8, r3
    829a:	05 09       	sbc	r16, r5
    829c:	8e 09       	sbc	r24, r14
    829e:	20 0a       	sbc	r2, r16
    82a0:	ba 0a       	sbc	r11, r26
    82a2:	5d 0b       	sbc	r21, r29
    82a4:	0a 0c       	add	r0, r10
    82a6:	c1 0c       	add	r12, r1
    82a8:	84 0d       	add	r24, r4
    82aa:	51 0e       	add	r5, r17
    82ac:	2b 0f       	add	r18, r27
    82ae:	12 10       	cpse	r1, r2
    82b0:	07 11       	cpse	r16, r7
    82b2:	0a 12       	cpse	r0, r26
    82b4:	1d 13       	cpse	r17, r29
    82b6:	40 14       	cp	r4, r0
    82b8:	74 15       	cp	r23, r4
    82ba:	ba 16       	cp	r11, r26
    82bc:	14 18       	sub	r1, r4
    82be:	83 19       	sub	r24, r3
    82c0:	07 1b       	sub	r16, r23
    82c2:	a3 1c       	adc	r10, r3
    82c4:	57 1e       	adc	r5, r23
    82c6:	24 20       	and	r2, r4
    82c8:	0e 22       	and	r0, r30
    82ca:	14 24       	eor	r1, r4
    82cc:	39 26       	eor	r3, r25
    82ce:	7f 28       	or	r7, r15
    82d0:	e8 2a       	or	r14, r24
    82d2:	75 2d       	mov	r23, r5
    82d4:	29 30       	cpi	r18, 0x09	; 9
    82d6:	06 33       	cpi	r16, 0x36	; 54
    82d8:	0f 36       	cpi	r16, 0x6F	; 111
    82da:	45 39       	cpi	r20, 0x95	; 149
    82dc:	ad 3c       	cpi	r26, 0xCD	; 205
    82de:	49 40       	sbci	r20, 0x09	; 9
    82e0:	1b 44       	sbci	r17, 0x4B	; 75
    82e2:	28 48       	sbci	r18, 0x88	; 136
    82e4:	73 4c       	sbci	r23, 0xC3	; 195
    82e6:	fe 50       	subi	r31, 0x0E	; 14
    82e8:	cf 55       	subi	r28, 0x5F	; 95
    82ea:	ea 5a       	subi	r30, 0xAA	; 170
    82ec:	51 60       	ori	r21, 0x01	; 1
    82ee:	0c 66       	ori	r16, 0x6C	; 108
    82f0:	1d 6c       	ori	r17, 0xCD	; 205
    82f2:	8b 72       	andi	r24, 0x2B	; 43
    82f4:	5a 79       	andi	r21, 0x9A	; 154
    82f6:	92 80       	ldd	r9, Z+2	; 0x02
    82f8:	37 88       	ldd	r3, Z+23	; 0x17
    82fa:	50 90 e5 98 	lds	r5, 0x98E5
    82fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8300:	9f ab       	std	Y+55, r25	; 0x37
    8302:	d3 b5       	in	r29, 0x23	; 35
    8304:	a3 c0       	rjmp	.+326    	; 0x844c <waves+0x4c>
	...

00008400 <waves>:
    8400:	00 03       	mulsu	r16, r16
    8402:	06 09       	sbc	r16, r6
    8404:	0c 10       	cpse	r0, r12
    8406:	13 16       	cp	r1, r19
    8408:	19 1c       	adc	r1, r9
    840a:	1f 22       	and	r1, r31
    840c:	25 28       	or	r2, r5
    840e:	2b 2e       	mov	r2, r27
    8410:	31 33       	cpi	r19, 0x31	; 49
    8412:	36 39       	cpi	r19, 0x96	; 150
    8414:	3c 3f       	cpi	r19, 0xFC	; 252
    8416:	41 44       	sbci	r20, 0x41	; 65
    8418:	47 49       	sbci	r20, 0x97	; 151
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	51 53       	subi	r21, 0x31	; 49
    841e:	55 58       	subi	r21, 0x85	; 133
    8420:	5a 5c       	subi	r21, 0xCA	; 202
    8422:	5e 60       	ori	r21, 0x0E	; 14
    8424:	62 64       	ori	r22, 0x42	; 66
    8426:	66 68       	ori	r22, 0x86	; 134
    8428:	6a 6b       	ori	r22, 0xBA	; 186
    842a:	6d 6f       	ori	r22, 0xFD	; 253
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 76       	andi	r23, 0x65	; 101
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7a       	andi	r23, 0xAA	; 170
    8436:	7b 7c       	andi	r23, 0xCB	; 203
    8438:	7d 7d       	andi	r23, 0xDD	; 221
    843a:	7e 7e       	andi	r23, 0xEE	; 238
    843c:	7e 7f       	andi	r23, 0xFE	; 254
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7e 7e       	andi	r23, 0xEE	; 238
    8446:	7e 7d       	andi	r23, 0xDE	; 222
    8448:	7d 7c       	andi	r23, 0xCD	; 205
    844a:	7b 7a       	andi	r23, 0xAB	; 171
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 76       	andi	r23, 0x68	; 104
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6f       	ori	r23, 0xF0	; 240
    8456:	6d 6b       	ori	r22, 0xBD	; 189
    8458:	6a 68       	ori	r22, 0x8A	; 138
    845a:	66 64       	ori	r22, 0x46	; 70
    845c:	62 60       	ori	r22, 0x02	; 2
    845e:	5e 5c       	subi	r21, 0xCE	; 206
    8460:	5a 58       	subi	r21, 0x8A	; 138
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	51 4e       	sbci	r21, 0xE1	; 225
    8466:	4c 49       	sbci	r20, 0x9C	; 156
    8468:	47 44       	sbci	r20, 0x47	; 71
    846a:	41 3f       	cpi	r20, 0xF1	; 241
    846c:	3c 39       	cpi	r19, 0x9C	; 156
    846e:	36 33       	cpi	r19, 0x36	; 54
    8470:	31 2e       	mov	r3, r17
    8472:	2b 28       	or	r2, r11
    8474:	25 22       	and	r2, r21
    8476:	1f 1c       	adc	r1, r15
    8478:	19 16       	cp	r1, r25
    847a:	13 10       	cpse	r1, r3
    847c:	0c 09       	sbc	r16, r12
    847e:	06 03       	mulsu	r16, r22
    8480:	00 fd       	sbrc	r16, 0
    8482:	fa f7       	brpl	.-2      	; 0x8482 <waves+0x82>
    8484:	f4 f0       	brlt	.+60     	; 0x84c2 <waves+0xc2>
    8486:	ed ea       	ldi	r30, 0xAD	; 173
    8488:	e7 e4       	ldi	r30, 0x47	; 71
    848a:	e1 de       	rcall	.-574    	; 0x824e <steptable+0x46>
    848c:	db d8       	rcall	.-3658   	; 0x7644 <ReadButtons+0x54>
    848e:	d5 d2       	rcall	.+1450   	; 0x8a3a <waves+0x63a>
    8490:	cf cd       	rjmp	.-1122   	; 0x8030 <ProcessMusic+0x31c>
    8492:	ca c7       	rjmp	.+3988   	; 0x9428 <LBGetJoyPadState+0x6a>
    8494:	c4 c1       	rjmp	.+904    	; 0x881e <waves+0x41e>
    8496:	bf bc       	out	0x2f, r11	; 47
    8498:	b9 b7       	in	r27, 0x39	; 57
    849a:	b4 b2       	in	r11, 0x14	; 20
    849c:	af ad       	ldd	r26, Y+63	; 0x3f
    849e:	ab a8       	ldd	r10, Y+51	; 0x33
    84a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    84a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    84a4:	9e 9c       	mul	r9, r14
    84a6:	9a 98       	cbi	0x13, 2	; 19
    84a8:	96 95       	lsr	r25
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	88 87       	std	Y+8, r24	; 0x08
    84b4:	86 86       	std	Z+14, r8	; 0x0e
    84b6:	85 84       	ldd	r8, Z+13	; 0x0d
    84b8:	83 83       	std	Z+3, r24	; 0x03
    84ba:	82 82       	std	Z+2, r8	; 0x02
    84bc:	82 81       	ldd	r24, Z+2	; 0x02
    84be:	81 81       	ldd	r24, Z+1	; 0x01
    84c0:	81 81       	ldd	r24, Z+1	; 0x01
    84c2:	81 81       	ldd	r24, Z+1	; 0x01
    84c4:	82 82       	std	Z+2, r8	; 0x02
    84c6:	82 83       	std	Z+2, r24	; 0x02
    84c8:	83 84       	ldd	r8, Z+11	; 0x0b
    84ca:	85 86       	std	Z+13, r8	; 0x0d
    84cc:	86 87       	std	Z+14, r24	; 0x0e
    84ce:	88 8a       	std	Y+16, r8	; 0x10
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 95 	lds	r25, 0x9593
    84d8:	96 98       	cbi	0x12, 6	; 18
    84da:	9a 9c       	mul	r9, r10
    84dc:	9e a0       	ldd	r9, Y+38	; 0x26
    84de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    84e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    84e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e4:	af b2       	in	r10, 0x1f	; 31
    84e6:	b4 b7       	in	r27, 0x34	; 52
    84e8:	b9 bc       	out	0x29, r11	; 41
    84ea:	bf c1       	rjmp	.+894    	; 0x886a <waves+0x46a>
    84ec:	c4 c7       	rjmp	.+3976   	; 0x9476 <LBPrintStr+0x22>
    84ee:	ca cd       	rjmp	.-1132   	; 0x8084 <ProcessMusic+0x370>
    84f0:	cf d2       	rcall	.+1438   	; 0x8a90 <waves+0x690>
    84f2:	d5 d8       	rcall	.-3670   	; 0x769e <FormatEeprom+0x22>
    84f4:	db de       	rcall	.-586    	; 0x82ac <steptable+0xa4>
    84f6:	e1 e4       	ldi	r30, 0x41	; 65
    84f8:	e7 ea       	ldi	r30, 0xA7	; 167
    84fa:	ed f0       	brhs	.+58     	; 0x8536 <waves+0x136>
    84fc:	f4 f7       	brge	.-4      	; 0x84fa <waves+0xfa>
    84fe:	fa fd       	.word	0xfdfa	; ????
    8500:	80 81       	ld	r24, Z
    8502:	82 83       	std	Z+2, r24	; 0x02
    8504:	84 85       	ldd	r24, Z+12	; 0x0c
    8506:	86 87       	std	Z+14, r24	; 0x0e
    8508:	88 89       	ldd	r24, Y+16	; 0x10
    850a:	8a 8b       	std	Y+18, r24	; 0x12
    850c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    850e:	8e 8f       	std	Y+30, r24	; 0x1e
    8510:	90 91 92 93 	lds	r25, 0x9392
    8514:	94 95       	.word	0x9594	; ????
    8516:	96 97       	sbiw	r26, 0x26	; 38
    8518:	98 99       	sbic	0x13, 0	; 19
    851a:	9a 9b       	sbis	0x13, 2	; 19
    851c:	9c 9d       	mul	r25, r12
    851e:	9e 9f       	mul	r25, r30
    8520:	a0 a1       	ldd	r26, Z+32	; 0x20
    8522:	a2 a3       	std	Z+34, r26	; 0x22
    8524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8526:	a6 a7       	std	Z+46, r26	; 0x2e
    8528:	a8 a9       	ldd	r26, Y+48	; 0x30
    852a:	aa ab       	std	Y+50, r26	; 0x32
    852c:	ac ad       	ldd	r26, Y+60	; 0x3c
    852e:	ae af       	std	Y+62, r26	; 0x3e
    8530:	b0 b1       	in	r27, 0x00	; 0
    8532:	b2 b3       	in	r27, 0x12	; 18
    8534:	b4 b5       	in	r27, 0x24	; 36
    8536:	b6 b7       	in	r27, 0x36	; 54
    8538:	b8 b9       	out	0x08, r27	; 8
    853a:	ba bb       	out	0x1a, r27	; 26
    853c:	bc bd       	out	0x2c, r27	; 44
    853e:	be bf       	out	0x3e, r27	; 62
    8540:	c0 c1       	rjmp	.+896    	; 0x88c2 <waves+0x4c2>
    8542:	c2 c3       	rjmp	.+1924   	; 0x8cc8 <waves+0x8c8>
    8544:	c4 c5       	rjmp	.+2952   	; 0x90ce <MoveSprite+0x2a>
    8546:	c6 c7       	rjmp	.+3980   	; 0x94d4 <LBCollides+0x1e>
    8548:	c8 c9       	rjmp	.-3184   	; 0x78da <UartSendChar+0xa>
    854a:	ca cb       	rjmp	.-2156   	; 0x7ce0 <TriggerNote+0x4c>
    854c:	cc cd       	rjmp	.-1128   	; 0x80e6 <ProcessMusic+0x3d2>
    854e:	ce cf       	rjmp	.-100    	; 0x84ec <waves+0xec>
    8550:	d0 d1       	rcall	.+928    	; 0x88f2 <waves+0x4f2>
    8552:	d2 d3       	rcall	.+1956   	; 0x8cf8 <waves+0x8f8>
    8554:	d4 d5       	rcall	.+2984   	; 0x90fe <InitializeVideoMode+0xe>
    8556:	d6 d7       	rcall	.+4012   	; 0x9504 <LBCollides+0x4e>
    8558:	d8 d9       	rcall	.-3152   	; 0x790a <GetPrngNumber+0x8>
    855a:	da db       	rcall	.-2124   	; 0x7d10 <TriggerNote+0x7c>
    855c:	dc dd       	rcall	.-1096   	; 0x8116 <ProcessMusic+0x402>
    855e:	de df       	rcall	.-68     	; 0x851c <waves+0x11c>
    8560:	e0 e1       	ldi	r30, 0x10	; 16
    8562:	e2 e3       	ldi	r30, 0x32	; 50
    8564:	e4 e5       	ldi	r30, 0x54	; 84
    8566:	e6 e7       	ldi	r30, 0x76	; 118
    8568:	e8 e9       	ldi	r30, 0x98	; 152
    856a:	ea eb       	ldi	r30, 0xBA	; 186
    856c:	ec ed       	ldi	r30, 0xDC	; 220
    856e:	ee ef       	ldi	r30, 0xFE	; 254
    8570:	f0 f1       	brcs	.+124    	; 0x85ee <waves+0x1ee>
    8572:	f2 f3       	brmi	.-4      	; 0x8570 <waves+0x170>
    8574:	f4 f5       	brge	.+124    	; 0x85f2 <waves+0x1f2>
    8576:	f6 f7       	brtc	.-4      	; 0x8574 <waves+0x174>
    8578:	f8 f9       	.word	0xf9f8	; ????
    857a:	fa fb       	.word	0xfbfa	; ????
    857c:	fc fd       	.word	0xfdfc	; ????
    857e:	fe ff       	.word	0xfffe	; ????
    8580:	00 01       	movw	r0, r0
    8582:	02 03       	mulsu	r16, r18
    8584:	04 05       	cpc	r16, r4
    8586:	06 07       	cpc	r16, r22
    8588:	08 09       	sbc	r16, r8
    858a:	0a 0b       	sbc	r16, r26
    858c:	0c 0d       	add	r16, r12
    858e:	0e 0f       	add	r16, r30
    8590:	10 11       	cpse	r17, r0
    8592:	12 13       	cpse	r17, r18
    8594:	14 15       	cp	r17, r4
    8596:	16 17       	cp	r17, r22
    8598:	18 19       	sub	r17, r8
    859a:	1a 1b       	sub	r17, r26
    859c:	1c 1d       	adc	r17, r12
    859e:	1e 1f       	adc	r17, r30
    85a0:	20 21       	and	r18, r0
    85a2:	22 23       	and	r18, r18
    85a4:	24 25       	eor	r18, r4
    85a6:	26 27       	eor	r18, r22
    85a8:	28 29       	or	r18, r8
    85aa:	2a 2b       	or	r18, r26
    85ac:	2c 2d       	mov	r18, r12
    85ae:	2e 2f       	mov	r18, r30
    85b0:	30 31       	cpi	r19, 0x10	; 16
    85b2:	32 33       	cpi	r19, 0x32	; 50
    85b4:	34 35       	cpi	r19, 0x54	; 84
    85b6:	36 37       	cpi	r19, 0x76	; 118
    85b8:	38 39       	cpi	r19, 0x98	; 152
    85ba:	3a 3b       	cpi	r19, 0xBA	; 186
    85bc:	3c 3d       	cpi	r19, 0xDC	; 220
    85be:	3e 3f       	cpi	r19, 0xFE	; 254
    85c0:	40 41       	sbci	r20, 0x10	; 16
    85c2:	42 43       	sbci	r20, 0x32	; 50
    85c4:	44 45       	sbci	r20, 0x54	; 84
    85c6:	46 47       	sbci	r20, 0x76	; 118
    85c8:	48 49       	sbci	r20, 0x98	; 152
    85ca:	4a 4b       	sbci	r20, 0xBA	; 186
    85cc:	4c 4d       	sbci	r20, 0xDC	; 220
    85ce:	4e 4f       	sbci	r20, 0xFE	; 254
    85d0:	50 51       	subi	r21, 0x10	; 16
    85d2:	52 53       	subi	r21, 0x32	; 50
    85d4:	54 55       	subi	r21, 0x54	; 84
    85d6:	56 57       	subi	r21, 0x76	; 118
    85d8:	58 59       	subi	r21, 0x98	; 152
    85da:	5a 5b       	subi	r21, 0xBA	; 186
    85dc:	5c 5d       	subi	r21, 0xDC	; 220
    85de:	5e 5f       	subi	r21, 0xFE	; 254
    85e0:	60 61       	ori	r22, 0x10	; 16
    85e2:	62 63       	ori	r22, 0x32	; 50
    85e4:	64 65       	ori	r22, 0x54	; 84
    85e6:	66 67       	ori	r22, 0x76	; 118
    85e8:	68 69       	ori	r22, 0x98	; 152
    85ea:	6a 6b       	ori	r22, 0xBA	; 186
    85ec:	6c 6d       	ori	r22, 0xDC	; 220
    85ee:	6e 6f       	ori	r22, 0xFE	; 254
    85f0:	70 71       	andi	r23, 0x10	; 16
    85f2:	72 73       	andi	r23, 0x32	; 50
    85f4:	74 75       	andi	r23, 0x54	; 84
    85f6:	76 77       	andi	r23, 0x76	; 118
    85f8:	78 79       	andi	r23, 0x98	; 152
    85fa:	7a 7b       	andi	r23, 0xBA	; 186
    85fc:	7c 7d       	andi	r23, 0xDC	; 220
    85fe:	7e 7f       	andi	r23, 0xFE	; 254
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <steptable+0x48>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <PatchCommand08+0x8>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <PrintChar+0x2>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <waves+0x63e>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <steptable+0x30>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <PatchCommand04>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <Print+0x20>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <waves+0x626>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <waves+0x862>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <LBPrintStr+0x18>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <TriggerFx+0x72>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <waves+0x88a>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <LBPrintStr+0x40>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <TriggerNote+0xa>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	80 80       	ld	r8, Z
    8742:	80 80       	ld	r8, Z
    8744:	80 80       	ld	r8, Z
    8746:	80 80       	ld	r8, Z
    8748:	80 80       	ld	r8, Z
    874a:	80 80       	ld	r8, Z
    874c:	80 80       	ld	r8, Z
    874e:	80 80       	ld	r8, Z
    8750:	80 80       	ld	r8, Z
    8752:	80 80       	ld	r8, Z
    8754:	80 80       	ld	r8, Z
    8756:	80 80       	ld	r8, Z
    8758:	80 80       	ld	r8, Z
    875a:	80 80       	ld	r8, Z
    875c:	80 80       	ld	r8, Z
    875e:	80 80       	ld	r8, Z
    8760:	80 80       	ld	r8, Z
    8762:	80 80       	ld	r8, Z
    8764:	80 80       	ld	r8, Z
    8766:	80 80       	ld	r8, Z
    8768:	80 80       	ld	r8, Z
    876a:	80 80       	ld	r8, Z
    876c:	80 80       	ld	r8, Z
    876e:	80 80       	ld	r8, Z
    8770:	80 80       	ld	r8, Z
    8772:	80 80       	ld	r8, Z
    8774:	80 80       	ld	r8, Z
    8776:	80 80       	ld	r8, Z
    8778:	80 80       	ld	r8, Z
    877a:	80 80       	ld	r8, Z
    877c:	80 80       	ld	r8, Z
    877e:	80 80       	ld	r8, Z
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	7f 7f       	andi	r23, 0xFF	; 255
    8982:	7f 7f       	andi	r23, 0xFF	; 255
    8984:	7f 7f       	andi	r23, 0xFF	; 255
    8986:	7f 7f       	andi	r23, 0xFF	; 255
    8988:	7f 7f       	andi	r23, 0xFF	; 255
    898a:	7f 7f       	andi	r23, 0xFF	; 255
    898c:	7f 7f       	andi	r23, 0xFF	; 255
    898e:	7f 7f       	andi	r23, 0xFF	; 255
    8990:	7f 7f       	andi	r23, 0xFF	; 255
    8992:	7f 7f       	andi	r23, 0xFF	; 255
    8994:	7f 7f       	andi	r23, 0xFF	; 255
    8996:	7f 7f       	andi	r23, 0xFF	; 255
    8998:	7f 7f       	andi	r23, 0xFF	; 255
    899a:	7f 7f       	andi	r23, 0xFF	; 255
    899c:	7f 7f       	andi	r23, 0xFF	; 255
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7f       	andi	r23, 0xFF	; 255
    89a2:	7f 7f       	andi	r23, 0xFF	; 255
    89a4:	7f 7f       	andi	r23, 0xFF	; 255
    89a6:	7f 7f       	andi	r23, 0xFF	; 255
    89a8:	7f 7f       	andi	r23, 0xFF	; 255
    89aa:	7f 7f       	andi	r23, 0xFF	; 255
    89ac:	7f 7f       	andi	r23, 0xFF	; 255
    89ae:	7f 7f       	andi	r23, 0xFF	; 255
    89b0:	7f 7f       	andi	r23, 0xFF	; 255
    89b2:	7f 7f       	andi	r23, 0xFF	; 255
    89b4:	7f 7f       	andi	r23, 0xFF	; 255
    89b6:	7f 7f       	andi	r23, 0xFF	; 255
    89b8:	7f 7f       	andi	r23, 0xFF	; 255
    89ba:	7f 7f       	andi	r23, 0xFF	; 255
    89bc:	7f 7f       	andi	r23, 0xFF	; 255
    89be:	7f 7f       	andi	r23, 0xFF	; 255
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	03 09       	sbc	r16, r3
    8a02:	13 1e       	adc	r1, r19
    8a04:	28 31       	cpi	r18, 0x18	; 24
    8a06:	3a 40       	sbci	r19, 0x0A	; 10
    8a08:	46 4c       	sbci	r20, 0xC6	; 198
    8a0a:	50 54       	subi	r21, 0x40	; 64
    8a0c:	58 5b       	subi	r21, 0xB8	; 184
    8a0e:	5e 61       	ori	r21, 0x1E	; 30
    8a10:	63 65       	ori	r22, 0x53	; 83
    8a12:	67 69       	ori	r22, 0x97	; 151
    8a14:	6b 6c       	ori	r22, 0xCB	; 203
    8a16:	6e 6f       	ori	r22, 0xFE	; 254
    8a18:	70 71       	andi	r23, 0x10	; 16
    8a1a:	72 73       	andi	r23, 0x32	; 50
    8a1c:	74 75       	andi	r23, 0x54	; 84
    8a1e:	76 77       	andi	r23, 0x76	; 118
    8a20:	77 78       	andi	r23, 0x87	; 135
    8a22:	79 79       	andi	r23, 0x99	; 153
    8a24:	7a 7a       	andi	r23, 0xAA	; 170
    8a26:	7b 7b       	andi	r23, 0xBB	; 187
    8a28:	7c 7c       	andi	r23, 0xCC	; 204
    8a2a:	7c 7d       	andi	r23, 0xDC	; 220
    8a2c:	7d 7d       	andi	r23, 0xDD	; 221
    8a2e:	7e 7e       	andi	r23, 0xEE	; 238
    8a30:	7e 7e       	andi	r23, 0xEE	; 238
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7e       	andi	r23, 0xEF	; 239
    8a4e:	7e 7e       	andi	r23, 0xEE	; 238
    8a50:	7e 7d       	andi	r23, 0xDE	; 222
    8a52:	7d 7d       	andi	r23, 0xDD	; 221
    8a54:	7c 7c       	andi	r23, 0xCC	; 204
    8a56:	7c 7b       	andi	r23, 0xBC	; 188
    8a58:	7b 7a       	andi	r23, 0xAB	; 171
    8a5a:	7a 79       	andi	r23, 0x9A	; 154
    8a5c:	79 78       	andi	r23, 0x89	; 137
    8a5e:	77 77       	andi	r23, 0x77	; 119
    8a60:	76 75       	andi	r23, 0x56	; 86
    8a62:	74 73       	andi	r23, 0x34	; 52
    8a64:	72 71       	andi	r23, 0x12	; 18
    8a66:	70 6f       	ori	r23, 0xF0	; 240
    8a68:	6e 6c       	ori	r22, 0xCE	; 206
    8a6a:	6b 69       	ori	r22, 0x9B	; 155
    8a6c:	67 65       	ori	r22, 0x57	; 87
    8a6e:	63 61       	ori	r22, 0x13	; 19
    8a70:	5e 5b       	subi	r21, 0xBE	; 190
    8a72:	58 54       	subi	r21, 0x48	; 72
    8a74:	50 4c       	sbci	r21, 0xC0	; 192
    8a76:	46 40       	sbci	r20, 0x06	; 6
    8a78:	3a 31       	cpi	r19, 0x1A	; 26
    8a7a:	28 1e       	adc	r2, r24
    8a7c:	13 09       	sbc	r17, r3
    8a7e:	03 00       	.word	0x0003	; ????
    8a80:	c6 cc       	rjmp	.-1652   	; 0x840e <waves+0xe>
    8a82:	d5 db       	rcall	.-2134   	; 0x822e <steptable+0x26>
    8a84:	df e3       	ldi	r29, 0x3F	; 63
    8a86:	e5 e7       	ldi	r30, 0x75	; 117
    8a88:	e9 ea       	ldi	r30, 0xA9	; 169
    8a8a:	eb ec       	ldi	r30, 0xCB	; 203
    8a8c:	ed ee       	ldi	r30, 0xED	; 237
    8a8e:	ef ef       	ldi	r30, 0xFF	; 255
    8a90:	f0 f0       	brcs	.+60     	; 0x8ace <waves+0x6ce>
    8a92:	f0 f1       	brcs	.+124    	; 0x8b10 <waves+0x710>
    8a94:	f1 f1       	breq	.+124    	; 0x8b12 <waves+0x712>
    8a96:	f1 f2       	breq	.-68     	; 0x8a54 <waves+0x654>
    8a98:	f2 f2       	brmi	.-68     	; 0x8a56 <waves+0x656>
    8a9a:	f2 f2       	brmi	.-68     	; 0x8a58 <waves+0x658>
    8a9c:	f2 f2       	brmi	.-68     	; 0x8a5a <waves+0x65a>
    8a9e:	f2 f3       	brmi	.-4      	; 0x8a9c <waves+0x69c>
    8aa0:	f3 f3       	brvs	.-4      	; 0x8a9e <waves+0x69e>
    8aa2:	f3 f3       	brvs	.-4      	; 0x8aa0 <waves+0x6a0>
    8aa4:	f3 f3       	brvs	.-4      	; 0x8aa2 <waves+0x6a2>
    8aa6:	f3 f3       	brvs	.-4      	; 0x8aa4 <waves+0x6a4>
    8aa8:	f3 f3       	brvs	.-4      	; 0x8aa6 <waves+0x6a6>
    8aaa:	f3 f3       	brvs	.-4      	; 0x8aa8 <waves+0x6a8>
    8aac:	f3 f3       	brvs	.-4      	; 0x8aaa <waves+0x6aa>
    8aae:	f3 f3       	brvs	.-4      	; 0x8aac <waves+0x6ac>
    8ab0:	f3 f3       	brvs	.-4      	; 0x8aae <waves+0x6ae>
    8ab2:	f3 f3       	brvs	.-4      	; 0x8ab0 <waves+0x6b0>
    8ab4:	f3 f3       	brvs	.-4      	; 0x8ab2 <waves+0x6b2>
    8ab6:	f3 f3       	brvs	.-4      	; 0x8ab4 <waves+0x6b4>
    8ab8:	f3 f3       	brvs	.-4      	; 0x8ab6 <waves+0x6b6>
    8aba:	f3 f3       	brvs	.-4      	; 0x8ab8 <waves+0x6b8>
    8abc:	f3 f3       	brvs	.-4      	; 0x8aba <waves+0x6ba>
    8abe:	f3 f3       	brvs	.-4      	; 0x8abc <waves+0x6bc>
    8ac0:	f3 f3       	brvs	.-4      	; 0x8abe <waves+0x6be>
    8ac2:	f3 f3       	brvs	.-4      	; 0x8ac0 <waves+0x6c0>
    8ac4:	f3 f3       	brvs	.-4      	; 0x8ac2 <waves+0x6c2>
    8ac6:	f3 f3       	brvs	.-4      	; 0x8ac4 <waves+0x6c4>
    8ac8:	f3 f3       	brvs	.-4      	; 0x8ac6 <waves+0x6c6>
    8aca:	f3 f3       	brvs	.-4      	; 0x8ac8 <waves+0x6c8>
    8acc:	f3 f3       	brvs	.-4      	; 0x8aca <waves+0x6ca>
    8ace:	f3 f3       	brvs	.-4      	; 0x8acc <waves+0x6cc>
    8ad0:	f3 f3       	brvs	.-4      	; 0x8ace <waves+0x6ce>
    8ad2:	f3 f3       	brvs	.-4      	; 0x8ad0 <waves+0x6d0>
    8ad4:	f3 f3       	brvs	.-4      	; 0x8ad2 <waves+0x6d2>
    8ad6:	f3 f3       	brvs	.-4      	; 0x8ad4 <waves+0x6d4>
    8ad8:	f3 f3       	brvs	.-4      	; 0x8ad6 <waves+0x6d6>
    8ada:	f3 f3       	brvs	.-4      	; 0x8ad8 <waves+0x6d8>
    8adc:	f3 f3       	brvs	.-4      	; 0x8ada <waves+0x6da>
    8ade:	f3 f3       	brvs	.-4      	; 0x8adc <waves+0x6dc>
    8ae0:	f2 f2       	brmi	.-68     	; 0x8a9e <waves+0x69e>
    8ae2:	f2 f2       	brmi	.-68     	; 0x8aa0 <waves+0x6a0>
    8ae4:	f2 f2       	brmi	.-68     	; 0x8aa2 <waves+0x6a2>
    8ae6:	f2 f2       	brmi	.-68     	; 0x8aa4 <waves+0x6a4>
    8ae8:	f1 f1       	breq	.+124    	; 0x8b66 <waves+0x766>
    8aea:	f1 f1       	breq	.+124    	; 0x8b68 <waves+0x768>
    8aec:	f0 f0       	brcs	.+60     	; 0x8b2a <waves+0x72a>
    8aee:	f0 ef       	ldi	r31, 0xF0	; 240
    8af0:	ef ee       	ldi	r30, 0xEF	; 239
    8af2:	ed ec       	ldi	r30, 0xCD	; 205
    8af4:	eb ea       	ldi	r30, 0xAB	; 171
    8af6:	e9 e7       	ldi	r30, 0x79	; 121
    8af8:	e5 e3       	ldi	r30, 0x35	; 53
    8afa:	df db       	rcall	.-2114   	; 0x82ba <steptable+0xb2>
    8afc:	d5 cc       	rjmp	.-1622   	; 0x84a8 <waves+0xa8>
    8afe:	c6 00       	.word	0x00c6	; ????
    8b00:	00 28       	or	r0, r0
    8b02:	3d 42       	sbci	r19, 0x2D	; 45
    8b04:	30 2d       	mov	r19, r0
    8b06:	2c 2b       	or	r18, r28
    8b08:	2c 2d       	mov	r18, r12
    8b0a:	2e 2f       	mov	r18, r30
    8b0c:	30 32       	cpi	r19, 0x20	; 32
    8b0e:	33 35       	cpi	r19, 0x53	; 83
    8b10:	37 39       	cpi	r19, 0x97	; 151
    8b12:	3b 3d       	cpi	r19, 0xDB	; 219
    8b14:	3f 41       	sbci	r19, 0x1F	; 31
    8b16:	43 45       	sbci	r20, 0x53	; 83
    8b18:	48 4a       	sbci	r20, 0xA8	; 168
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	50 53       	subi	r21, 0x30	; 48
    8b1e:	55 57       	subi	r21, 0x75	; 117
    8b20:	59 5b       	subi	r21, 0xB9	; 185
    8b22:	5d 5f       	subi	r21, 0xFD	; 253
    8b24:	61 63       	ori	r22, 0x31	; 49
    8b26:	65 67       	ori	r22, 0x75	; 117
    8b28:	69 6b       	ori	r22, 0xB9	; 185
    8b2a:	6c 6e       	ori	r22, 0xEC	; 236
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 77       	andi	r23, 0x75	; 117
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7b       	andi	r23, 0xBA	; 186
    8b36:	7c 7d       	andi	r23, 0xDC	; 220
    8b38:	7d 7e       	andi	r23, 0xED	; 237
    8b3a:	7e 7f       	andi	r23, 0xFE	; 254
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7e 7e       	andi	r23, 0xEE	; 238
    8b48:	7d 7d       	andi	r23, 0xDD	; 221
    8b4a:	7c 7b       	andi	r23, 0xBC	; 188
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 77       	andi	r23, 0x78	; 120
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6e       	ori	r23, 0xE0	; 224
    8b56:	6c 6b       	ori	r22, 0xBC	; 188
    8b58:	69 67       	ori	r22, 0x79	; 121
    8b5a:	65 63       	ori	r22, 0x35	; 53
    8b5c:	61 5f       	subi	r22, 0xF1	; 241
    8b5e:	5d 5b       	subi	r21, 0xBD	; 189
    8b60:	59 57       	subi	r21, 0x79	; 121
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	50 4e       	sbci	r21, 0xE0	; 224
    8b66:	4c 4a       	sbci	r20, 0xAC	; 172
    8b68:	48 45       	sbci	r20, 0x58	; 88
    8b6a:	43 41       	sbci	r20, 0x13	; 19
    8b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8b6e:	3b 39       	cpi	r19, 0x9B	; 155
    8b70:	37 35       	cpi	r19, 0x57	; 87
    8b72:	33 32       	cpi	r19, 0x23	; 35
    8b74:	30 2f       	mov	r19, r16
    8b76:	2e 2d       	mov	r18, r14
    8b78:	2c 2b       	or	r18, r28
    8b7a:	2c 2d       	mov	r18, r12
    8b7c:	30 42       	sbci	r19, 0x20	; 32
    8b7e:	3d 28       	or	r3, r13
    8b80:	00 e9       	ldi	r16, 0x90	; 144
    8b82:	e5 fe       	sbrs	r14, 5
    8b84:	d4 d7       	rcall	.+4008   	; 0x9b2e <init_scope_animation+0x4>
    8b86:	d7 d7       	rcall	.+4014   	; 0x9b36 <init_scope_animation+0xc>
    8b88:	d6 d4       	rcall	.+2476   	; 0x9536 <LBRandom+0x30>
    8b8a:	d2 d0       	rcall	.+420    	; 0x8d30 <waves+0x930>
    8b8c:	ce cc       	rjmp	.-1636   	; 0x852a <waves+0x12a>
    8b8e:	ca c8       	rjmp	.-3692   	; 0x7d24 <ProcessMusic+0x10>
    8b90:	c6 c3       	rjmp	.+1932   	; 0x931e <LBGetNextFrame+0x2>
    8b92:	c1 bf       	out	0x31, r28	; 49
    8b94:	bd ba       	out	0x1d, r11	; 29
    8b96:	b8 b6       	in	r11, 0x38	; 56
    8b98:	b4 b1       	in	r27, 0x04	; 4
    8b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ba2:	9f 9e       	mul	r9, r31
    8ba4:	9c 9a       	sbi	0x13, 4	; 19
    8ba6:	99 97       	sbiw	r26, 0x29	; 41
    8ba8:	95 94       	asr	r9
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	89 88       	ldd	r8, Y+17	; 0x11
    8bb4:	88 87       	std	Y+8, r24	; 0x08
    8bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8bba:	84 84       	ldd	r8, Z+12	; 0x0c
    8bbc:	83 83       	std	Z+3, r24	; 0x03
    8bbe:	83 83       	std	Z+3, r24	; 0x03
    8bc0:	83 83       	std	Z+3, r24	; 0x03
    8bc2:	83 83       	std	Z+3, r24	; 0x03
    8bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8bca:	86 87       	std	Z+14, r24	; 0x0e
    8bcc:	88 88       	ldd	r8, Y+16	; 0x10
    8bce:	89 8a       	std	Y+17, r8	; 0x11
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 94 	lds	r25, 0x9493
    8bd8:	95 97       	sbiw	r26, 0x25	; 37
    8bda:	99 9a       	sbi	0x13, 1	; 19
    8bdc:	9c 9e       	mul	r9, r28
    8bde:	9f a1       	ldd	r25, Y+39	; 0x27
    8be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be6:	af b1       	in	r26, 0x0f	; 15
    8be8:	b4 b6       	in	r11, 0x34	; 52
    8bea:	b8 ba       	out	0x18, r11	; 24
    8bec:	bd bf       	out	0x3d, r27	; 61
    8bee:	c1 c3       	rjmp	.+1922   	; 0x9372 <LBGetNextFrameReverse+0xc>
    8bf0:	c6 c8       	rjmp	.-3700   	; 0x7d7e <ProcessMusic+0x6a>
    8bf2:	ca cc       	rjmp	.-1644   	; 0x8588 <waves+0x188>
    8bf4:	ce d0       	rcall	.+412    	; 0x8d92 <waves+0x992>
    8bf6:	d2 d4       	rcall	.+2468   	; 0x959c <wifiSendP+0x14>
    8bf8:	d6 d7       	rcall	.+4012   	; 0x9ba6 <init_shot_state+0x24>
    8bfa:	d7 d7       	rcall	.+4014   	; 0x9baa <init_shot_state+0x28>
    8bfc:	d4 fe       	sbrs	r13, 4
    8bfe:	e5 e9       	ldi	r30, 0x95	; 149
    8c00:	f9 f8       	.word	0xf8f9	; ????
    8c02:	f9 f5       	brne	.+126    	; 0x8c82 <waves+0x882>
    8c04:	eb e1       	ldi	r30, 0x1B	; 27
    8c06:	dd de       	rcall	.-582    	; 0x89c2 <waves+0x5c2>
    8c08:	e0 e2       	ldi	r30, 0x20	; 32
    8c0a:	e4 e5       	ldi	r30, 0x54	; 84
    8c0c:	e6 e5       	ldi	r30, 0x56	; 86
    8c0e:	e4 e2       	ldi	r30, 0x24	; 36
    8c10:	de d9       	rcall	.-3140   	; 0x7fce <ProcessMusic+0x2ba>
    8c12:	d2 ca       	rjmp	.-2652   	; 0x81b8 <smw2+0x2>
    8c14:	c1 b7       	in	r28, 0x31	; 49
    8c16:	ac a2       	std	Y+36, r10	; 0x24
    8c18:	99 91       	ld	r25, Y+
    8c1a:	8a 86       	std	Y+10, r8	; 0x0a
    8c1c:	83 81       	ldd	r24, Z+3	; 0x03
    8c1e:	80 80       	ld	r8, Z
    8c20:	81 82       	std	Z+1, r8	; 0x01
    8c22:	83 85       	ldd	r24, Z+11	; 0x0b
    8c24:	86 88       	ldd	r8, Z+22	; 0x16
    8c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8c28:	8d 8f       	std	Y+29, r24	; 0x1d
    8c2a:	90 92 93 95 	sts	0x9593, r9
    8c2e:	96 97       	sbiw	r26, 0x26	; 38
    8c30:	98 99       	sbic	0x13, 0	; 19
    8c32:	9a 9b       	sbis	0x13, 2	; 19
    8c34:	9b 9c       	mul	r9, r11
    8c36:	9d 9d       	mul	r25, r13
    8c38:	9d 9e       	mul	r9, r29
    8c3a:	9e 9e       	mul	r9, r30
    8c3c:	9f 9f       	mul	r25, r31
    8c3e:	9f 9f       	mul	r25, r31
    8c40:	9f 9f       	mul	r25, r31
    8c42:	9f 9e       	mul	r9, r31
    8c44:	9e 9e       	mul	r9, r30
    8c46:	9d 9d       	mul	r25, r13
    8c48:	9d 9c       	mul	r9, r13
    8c4a:	9b 9b       	sbis	0x13, 3	; 19
    8c4c:	9a 99       	sbic	0x13, 2	; 19
    8c4e:	98 97       	sbiw	r26, 0x28	; 40
    8c50:	96 95       	lsr	r25
    8c52:	93 92       	.word	0x9293	; ????
    8c54:	90 8f       	std	Z+24, r25	; 0x18
    8c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8c58:	8a 88       	ldd	r8, Y+18	; 0x12
    8c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8c5c:	83 82       	std	Z+3, r8	; 0x03
    8c5e:	81 80       	ldd	r8, Z+1	; 0x01
    8c60:	80 81       	ld	r24, Z
    8c62:	83 86       	std	Z+11, r8	; 0x0b
    8c64:	8a 91       	ld	r24, -Y
    8c66:	99 a2       	std	Y+33, r9	; 0x21
    8c68:	ac b7       	in	r26, 0x3c	; 60
    8c6a:	c1 ca       	rjmp	.-2686   	; 0x81ee <esmw+0x32>
    8c6c:	d2 d9       	rcall	.-3164   	; 0x8012 <ProcessMusic+0x2fe>
    8c6e:	de e2       	ldi	r29, 0x2E	; 46
    8c70:	e4 e5       	ldi	r30, 0x54	; 84
    8c72:	e6 e5       	ldi	r30, 0x56	; 86
    8c74:	e4 e2       	ldi	r30, 0x24	; 36
    8c76:	e0 de       	rcall	.-576    	; 0x8a38 <waves+0x638>
    8c78:	dd e1       	ldi	r29, 0x1D	; 29
    8c7a:	eb f5       	brvc	.+122    	; 0x8cf6 <waves+0x8f6>
    8c7c:	f9 f8       	.word	0xf8f9	; ????
    8c7e:	f9 00       	.word	0x00f9	; ????
    8c80:	07 08       	sbc	r0, r7
    8c82:	07 0b       	sbc	r16, r23
    8c84:	15 1f       	adc	r17, r21
    8c86:	23 22       	and	r2, r19
    8c88:	20 1e       	adc	r2, r16
    8c8a:	1c 1b       	sub	r17, r28
    8c8c:	1a 1b       	sub	r17, r26
    8c8e:	1c 1e       	adc	r1, r28
    8c90:	22 27       	eor	r18, r18
    8c92:	2e 36       	cpi	r18, 0x6E	; 110
    8c94:	3f 49       	sbci	r19, 0x9F	; 159
    8c96:	54 5e       	subi	r21, 0xE4	; 228
    8c98:	67 6f       	ori	r22, 0xF7	; 247
    8c9a:	76 7a       	andi	r23, 0xA6	; 166
    8c9c:	7e 7f       	andi	r23, 0xFE	; 254
    8c9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ca0:	7f 7e       	andi	r23, 0xEF	; 239
    8ca2:	7d 7b       	andi	r23, 0xBD	; 189
    8ca4:	7a 78       	andi	r23, 0x8A	; 138
    8ca6:	76 74       	andi	r23, 0x46	; 70
    8ca8:	73 71       	andi	r23, 0x13	; 19
    8caa:	70 6e       	ori	r23, 0xE0	; 224
    8cac:	6d 6b       	ori	r22, 0xBD	; 189
    8cae:	6a 69       	ori	r22, 0x9A	; 154
    8cb0:	68 67       	ori	r22, 0x78	; 120
    8cb2:	66 65       	ori	r22, 0x56	; 86
    8cb4:	65 64       	ori	r22, 0x45	; 69
    8cb6:	64 63       	ori	r22, 0x34	; 52
    8cb8:	63 62       	ori	r22, 0x23	; 35
    8cba:	62 62       	ori	r22, 0x22	; 34
    8cbc:	61 61       	ori	r22, 0x11	; 17
    8cbe:	61 61       	ori	r22, 0x11	; 17
    8cc0:	61 61       	ori	r22, 0x11	; 17
    8cc2:	61 62       	ori	r22, 0x21	; 33
    8cc4:	62 62       	ori	r22, 0x22	; 34
    8cc6:	63 63       	ori	r22, 0x33	; 51
    8cc8:	63 64       	ori	r22, 0x43	; 67
    8cca:	65 65       	ori	r22, 0x55	; 85
    8ccc:	66 67       	ori	r22, 0x76	; 118
    8cce:	68 69       	ori	r22, 0x98	; 152
    8cd0:	6a 6b       	ori	r22, 0xBA	; 186
    8cd2:	6d 6e       	ori	r22, 0xED	; 237
    8cd4:	70 71       	andi	r23, 0x10	; 16
    8cd6:	73 74       	andi	r23, 0x43	; 67
    8cd8:	76 78       	andi	r23, 0x86	; 134
    8cda:	7a 7b       	andi	r23, 0xBA	; 186
    8cdc:	7d 7e       	andi	r23, 0xED	; 237
    8cde:	7f 7f       	andi	r23, 0xFF	; 255
    8ce0:	7f 7f       	andi	r23, 0xFF	; 255
    8ce2:	7e 7a       	andi	r23, 0xAE	; 174
    8ce4:	76 6f       	ori	r23, 0xF6	; 246
    8ce6:	67 5e       	subi	r22, 0xE7	; 231
    8ce8:	54 49       	sbci	r21, 0x94	; 148
    8cea:	3f 36       	cpi	r19, 0x6F	; 111
    8cec:	2e 27       	eor	r18, r30
    8cee:	22 1e       	adc	r2, r18
    8cf0:	1c 1b       	sub	r17, r28
    8cf2:	1a 1b       	sub	r17, r26
    8cf4:	1c 1e       	adc	r1, r28
    8cf6:	20 22       	and	r2, r16
    8cf8:	23 1f       	adc	r18, r19
    8cfa:	15 0b       	sbc	r17, r21
    8cfc:	07 08       	sbc	r0, r7
    8cfe:	07 00       	.word	0x0007	; ????
    8d00:	1f 31       	cpi	r17, 0x1F	; 31
    8d02:	3d 44       	sbci	r19, 0x4D	; 77
    8d04:	4e 53       	subi	r20, 0x3E	; 62
    8d06:	54 56       	subi	r21, 0x64	; 100
    8d08:	5a 5f       	subi	r21, 0xFA	; 250
    8d0a:	64 69       	ori	r22, 0x94	; 148
    8d0c:	6e 74       	andi	r22, 0x4E	; 78
    8d0e:	76 79       	andi	r23, 0x96	; 150
    8d10:	7c 7f       	andi	r23, 0xFC	; 252
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7c       	andi	r23, 0xCF	; 207
    8d7c:	78 71       	andi	r23, 0x18	; 24
    8d7e:	68 4c       	sbci	r22, 0xC8	; 200
    8d80:	2c 1c       	adc	r2, r12
    8d82:	12 0c       	add	r1, r2
    8d84:	0a 0b       	sbc	r16, r26
    8d86:	0a 05       	cpc	r16, r10
    8d88:	fd f3       	brhs	.-2      	; 0x8d88 <waves+0x988>
    8d8a:	e9 df       	rcall	.-46     	; 0x8d5e <waves+0x95e>
    8d8c:	d4 ca       	rjmp	.-2648   	; 0x8336 <steptable+0x12e>
    8d8e:	c0 b7       	in	r28, 0x30	; 48
    8d90:	ae a6       	std	Y+46, r10	; 0x2e
    8d92:	9e 97       	sbiw	r26, 0x2e	; 46
    8d94:	91 8b       	std	Z+17, r25	; 0x11
    8d96:	86 85       	ldd	r24, Z+14	; 0x0e
    8d98:	82 80       	ldd	r8, Z+2	; 0x02
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 87       	std	Z+8, r24	; 0x08
    8df6:	91 9d       	mul	r25, r1
    8df8:	ac c4       	rjmp	.+2392   	; 0x9752 <wifiGetPBT+0x4e>
    8dfa:	cb d4       	rcall	.+2454   	; 0x9792 <wifiRequestP+0x1a>
    8dfc:	dd f2       	brhs	.-74     	; 0x8db4 <waves+0x9b4>
    8dfe:	fa fa       	.word	0xfafa	; ????

00008e00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8e00:	2f 92       	push	r2
    8e02:	3f 92       	push	r3
    8e04:	4f 92       	push	r4
    8e06:	5f 92       	push	r5
    8e08:	6f 92       	push	r6
    8e0a:	7f 92       	push	r7
    8e0c:	8f 92       	push	r8
    8e0e:	9f 92       	push	r9
    8e10:	af 92       	push	r10
    8e12:	bf 92       	push	r11
    8e14:	cf 92       	push	r12
    8e16:	df 92       	push	r13
    8e18:	ef 92       	push	r14
    8e1a:	ff 92       	push	r15
    8e1c:	0f 93       	push	r16
    8e1e:	1f 93       	push	r17
    8e20:	cf 93       	push	r28
    8e22:	df 93       	push	r29
    8e24:	00 d0       	rcall	.+0      	; 0x8e26 <ProcessSprites+0x26>
    8e26:	00 d0       	rcall	.+0      	; 0x8e28 <ProcessSprites+0x28>
    8e28:	00 d0       	rcall	.+0      	; 0x8e2a <ProcessSprites+0x2a>
    8e2a:	cd b7       	in	r28, 0x3d	; 61
    8e2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8e2e:	80 91 00 01 	lds	r24, 0x0100
    8e32:	88 23       	and	r24, r24
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <ProcessSprites+0x38>
    8e36:	cb c0       	rjmp	.+406    	; 0x8fce <ProcessSprites+0x1ce>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8e38:	80 91 0e 0a 	lds	r24, 0x0A0E
    8e3c:	80 93 0d 0a 	sts	0x0A0D, r24
	free_tile_index = user_ram_tiles_c;
    8e40:	80 93 0c 0a 	sts	0x0A0C, r24
    8e44:	00 e0       	ldi	r16, 0x00	; 0
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	f8 01       	movw	r30, r16
    8e4a:	e8 55       	subi	r30, 0x58	; 88
    8e4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8e4e:	81 81       	ldd	r24, Z+1	; 0x01
    8e50:	90 81       	ld	r25, Z
    8e52:	32 81       	ldd	r19, Z+2	; 0x02
    8e54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8e56:	28 e0       	ldi	r18, 0x08	; 8
    8e58:	29 0f       	add	r18, r25
    8e5a:	26 95       	lsr	r18
    8e5c:	26 95       	lsr	r18
    8e5e:	26 95       	lsr	r18
    8e60:	33 24       	eor	r3, r3
    8e62:	3a 94       	dec	r3
    8e64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8e66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8e68:	19 f0       	breq	.+6      	; 0x8e70 <ProcessSprites+0x70>
    8e6a:	e2 e0       	ldi	r30, 0x02	; 2
    8e6c:	2e 2e       	mov	r2, r30
    8e6e:	02 c0       	rjmp	.+4      	; 0x8e74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8e70:	22 24       	eor	r2, r2
    8e72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8e74:	28 e0       	ldi	r18, 0x08	; 8
    8e76:	28 0f       	add	r18, r24
    8e78:	52 2e       	mov	r5, r18
    8e7a:	56 94       	lsr	r5
    8e7c:	56 94       	lsr	r5
    8e7e:	56 94       	lsr	r5
    8e80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8e82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8e84:	19 f0       	breq	.+6      	; 0x8e8c <ProcessSprites+0x8c>
    8e86:	22 e0       	ldi	r18, 0x02	; 2
    8e88:	29 83       	std	Y+1, r18	; 0x01
    8e8a:	02 c0       	rjmp	.+4      	; 0x8e90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8e8c:	e1 e0       	ldi	r30, 0x01	; 1
    8e8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8e90:	68 2e       	mov	r6, r24
    8e92:	71 2c       	mov	r7, r1
    8e94:	76 2c       	mov	r7, r6
    8e96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8e98:	69 0e       	add	r6, r25
    8e9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8e9c:	50 e0       	ldi	r21, 0x00	; 0
    8e9e:	54 2f       	mov	r21, r20
    8ea0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8ea2:	ca 01       	movw	r24, r20
    8ea4:	83 0f       	add	r24, r19
    8ea6:	91 1d       	adc	r25, r1
    8ea8:	9b 83       	std	Y+3, r25	; 0x03
    8eaa:	8a 83       	std	Y+2, r24	; 0x02
    8eac:	e1 2c       	mov	r14, r1
    8eae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8eb0:	9e e1       	ldi	r25, 0x1E	; 30
    8eb2:	59 9e       	mul	r5, r25
    8eb4:	50 01       	movw	r10, r0
    8eb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8eb8:	9e 2c       	mov	r9, r14
    8eba:	88 24       	eor	r8, r8
    8ebc:	43 2c       	mov	r4, r3
    8ebe:	c1 2c       	mov	r12, r1
    8ec0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8ec2:	ed e1       	ldi	r30, 0x1D	; 29
    8ec4:	e4 15       	cp	r30, r4
    8ec6:	08 f4       	brcc	.+2      	; 0x8eca <ProcessSprites+0xca>
    8ec8:	53 c0       	rjmp	.+166    	; 0x8f70 <ProcessSprites+0x170>
    8eca:	fb e1       	ldi	r31, 0x1B	; 27
    8ecc:	f5 15       	cp	r31, r5
    8ece:	08 f4       	brcc	.+2      	; 0x8ed2 <ProcessSprites+0xd2>
    8ed0:	4f c0       	rjmp	.+158    	; 0x8f70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	84 0d       	add	r24, r4
    8ed6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8ed8:	9c 01       	movw	r18, r24
    8eda:	20 5a       	subi	r18, 0xA0	; 160
    8edc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ede:	3e 83       	std	Y+6, r19	; 0x06
    8ee0:	2d 83       	std	Y+5, r18	; 0x05
    8ee2:	f9 01       	movw	r30, r18
    8ee4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8ee6:	81 e0       	ldi	r24, 0x01	; 1
    8ee8:	94 31       	cpi	r25, 0x14	; 20
    8eea:	08 f4       	brcc	.+2      	; 0x8eee <ProcessSprites+0xee>
    8eec:	80 e0       	ldi	r24, 0x00	; 0
    8eee:	21 e0       	ldi	r18, 0x01	; 1
    8ef0:	30 91 0d 0a 	lds	r19, 0x0A0D
    8ef4:	93 17       	cp	r25, r19
    8ef6:	18 f0       	brcs	.+6      	; 0x8efe <ProcessSprites+0xfe>
    8ef8:	20 e0       	ldi	r18, 0x00	; 0
    8efa:	88 23       	and	r24, r24
    8efc:	61 f1       	breq	.+88     	; 0x8f56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8efe:	60 91 0c 0a 	lds	r22, 0x0A0C
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    8f02:	64 31       	cpi	r22, 0x14	; 20
    8f04:	30 f5       	brcc	.+76     	; 0x8f52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    8f06:	88 23       	and	r24, r24
    8f08:	31 f0       	breq	.+12     	; 0x8f16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    8f0a:	8c ee       	ldi	r24, 0xEC	; 236
    8f0c:	89 0f       	add	r24, r25
    8f0e:	9c 83       	std	Y+4, r25	; 0x04
    8f10:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <CopyFlashTile>
    8f14:	06 c0       	rjmp	.+12     	; 0x8f22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    8f16:	22 23       	and	r18, r18
    8f18:	29 f0       	breq	.+10     	; 0x8f24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    8f1a:	89 2f       	mov	r24, r25
    8f1c:	9c 83       	std	Y+4, r25	; 0x04
    8f1e:	0e 94 83 37 	call	0x6f06	; 0x6f06 <CopyRamTile>
    8f22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    8f24:	80 91 0c 0a 	lds	r24, 0x0A0C
    8f28:	e8 2f       	mov	r30, r24
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	9f 01       	movw	r18, r30
    8f2e:	22 0f       	add	r18, r18
    8f30:	33 1f       	adc	r19, r19
    8f32:	e2 0f       	add	r30, r18
    8f34:	f3 1f       	adc	r31, r19
    8f36:	e0 53       	subi	r30, 0x30	; 48
    8f38:	f6 4f       	sbci	r31, 0xF6	; 246
    8f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    8f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    8f3e:	31 83       	std	Z+1, r19	; 0x01
    8f40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    8f42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    8f44:	f9 01       	movw	r30, r18
    8f46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    8f48:	91 e0       	ldi	r25, 0x01	; 1
    8f4a:	98 0f       	add	r25, r24
    8f4c:	90 93 0c 0a 	sts	0x0A0C, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    8f50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    8f52:	94 31       	cpi	r25, 0x14	; 20
    8f54:	68 f4       	brcc	.+26     	; 0x8f70 <ProcessSprites+0x170>
    8f56:	80 91 0d 0a 	lds	r24, 0x0A0D
    8f5a:	98 17       	cp	r25, r24
    8f5c:	48 f0       	brcs	.+18     	; 0x8f70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8f5e:	93 01       	movw	r18, r6
    8f60:	a6 01       	movw	r20, r12
    8f62:	48 0d       	add	r20, r8
    8f64:	59 1d       	adc	r21, r9
    8f66:	6a 81       	ldd	r22, Y+2	; 0x02
    8f68:	7b 81       	ldd	r23, Y+3	; 0x03
    8f6a:	89 2f       	mov	r24, r25
    8f6c:	0e 94 23 38 	call	0x7046	; 0x7046 <BlitSpritePart>
    8f70:	ff ef       	ldi	r31, 0xFF	; 255
    8f72:	cf 1a       	sub	r12, r31
    8f74:	df 0a       	sbc	r13, r31
    8f76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    8f78:	c2 14       	cp	r12, r2
    8f7a:	08 f4       	brcc	.+2      	; 0x8f7e <ProcessSprites+0x17e>
    8f7c:	a2 cf       	rjmp	.-188    	; 0x8ec2 <ProcessSprites+0xc2>
    8f7e:	2f ef       	ldi	r18, 0xFF	; 255
    8f80:	e2 1a       	sub	r14, r18
    8f82:	f2 0a       	sbc	r15, r18
    8f84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    8f86:	99 81       	ldd	r25, Y+1	; 0x01
    8f88:	e9 16       	cp	r14, r25
    8f8a:	08 f4       	brcc	.+2      	; 0x8f8e <ProcessSprites+0x18e>
    8f8c:	91 cf       	rjmp	.-222    	; 0x8eb0 <ProcessSprites+0xb0>
    8f8e:	0c 5f       	subi	r16, 0xFC	; 252
    8f90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    8f92:	08 32       	cpi	r16, 0x28	; 40
    8f94:	11 05       	cpc	r17, r1
    8f96:	09 f0       	breq	.+2      	; 0x8f9a <ProcessSprites+0x19a>
    8f98:	57 cf       	rjmp	.-338    	; 0x8e48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    8f9a:	26 96       	adiw	r28, 0x06	; 6
    8f9c:	0f b6       	in	r0, 0x3f	; 63
    8f9e:	f8 94       	cli
    8fa0:	de bf       	out	0x3e, r29	; 62
    8fa2:	0f be       	out	0x3f, r0	; 63
    8fa4:	cd bf       	out	0x3d, r28	; 61
    8fa6:	df 91       	pop	r29
    8fa8:	cf 91       	pop	r28
    8faa:	1f 91       	pop	r17
    8fac:	0f 91       	pop	r16
    8fae:	ff 90       	pop	r15
    8fb0:	ef 90       	pop	r14
    8fb2:	df 90       	pop	r13
    8fb4:	cf 90       	pop	r12
    8fb6:	bf 90       	pop	r11
    8fb8:	af 90       	pop	r10
    8fba:	9f 90       	pop	r9
    8fbc:	8f 90       	pop	r8
    8fbe:	7f 90       	pop	r7
    8fc0:	6f 90       	pop	r6
    8fc2:	5f 90       	pop	r5
    8fc4:	4f 90       	pop	r4
    8fc6:	3f 90       	pop	r3
    8fc8:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    8fca:	0c 94 10 38 	jmp	0x7020	; 0x7020 <RestoreBackground>
	#endif

}
    8fce:	26 96       	adiw	r28, 0x06	; 6
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	f8 94       	cli
    8fd4:	de bf       	out	0x3e, r29	; 62
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	df 90       	pop	r13
    8fe8:	cf 90       	pop	r12
    8fea:	bf 90       	pop	r11
    8fec:	af 90       	pop	r10
    8fee:	9f 90       	pop	r9
    8ff0:	8f 90       	pop	r8
    8ff2:	7f 90       	pop	r7
    8ff4:	6f 90       	pop	r6
    8ff6:	5f 90       	pop	r5
    8ff8:	4f 90       	pop	r4
    8ffa:	3f 90       	pop	r3
    8ffc:	2f 90       	pop	r2
    8ffe:	08 95       	ret

00009000 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9000:	df 92       	push	r13
    9002:	ef 92       	push	r14
    9004:	ff 92       	push	r15
    9006:	0f 93       	push	r16
    9008:	1f 93       	push	r17
    900a:	cf 93       	push	r28
    900c:	df 93       	push	r29
    900e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9010:	fb 01       	movw	r30, r22
    9012:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9014:	31 96       	adiw	r30, 0x01	; 1
    9016:	64 91       	lpm	r22, Z
    9018:	5f ef       	ldi	r21, 0xFF	; 255
    901a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    901c:	24 2f       	mov	r18, r20
    901e:	21 70       	andi	r18, 0x01	; 1
    9020:	40 ff       	sbrs	r20, 0
    9022:	04 c0       	rjmp	.+8      	; 0x902c <MapSprite2+0x2c>
			x=(mapWidth-1);
    9024:	95 2f       	mov	r25, r21
			dx=-1;
    9026:	ff 24       	eor	r15, r15
    9028:	fa 94       	dec	r15
    902a:	03 c0       	rjmp	.+6      	; 0x9032 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    902c:	ff 24       	eor	r15, r15
    902e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9030:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9032:	41 ff       	sbrs	r20, 1
    9034:	05 c0       	rjmp	.+10     	; 0x9040 <MapSprite2+0x40>
			y=(mapHeight-1);
    9036:	7f ef       	ldi	r23, 0xFF	; 255
    9038:	76 0f       	add	r23, r22
			dy=-1;
    903a:	ee 24       	eor	r14, r14
    903c:	ea 94       	dec	r14
    903e:	03 c0       	rjmp	.+6      	; 0x9046 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9040:	ee 24       	eor	r14, r14
    9042:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9044:	70 e0       	ldi	r23, 0x00	; 0
    9046:	21 11       	cpse	r18, r1
    9048:	01 c0       	rjmp	.+2      	; 0x904c <MapSprite2+0x4c>
    904a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    904c:	00 e0       	ldi	r16, 0x00	; 0
    904e:	06 17       	cp	r16, r22
    9050:	09 f1       	breq	.+66     	; 0x9094 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9052:	71 03       	mulsu	r23, r17
    9054:	e0 01       	movw	r28, r0
    9056:	11 24       	eor	r1, r1
    9058:	d8 2e       	mov	r13, r24
    905a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    905c:	8d 15       	cp	r24, r13
    905e:	b1 f0       	breq	.+44     	; 0x908c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9060:	9e 01       	movw	r18, r28
    9062:	29 0f       	add	r18, r25
    9064:	31 1d       	adc	r19, r1
    9066:	97 fd       	sbrc	r25, 7
    9068:	3a 95       	dec	r19
    906a:	2e 5f       	subi	r18, 0xFE	; 254
    906c:	3f 4f       	sbci	r19, 0xFF	; 255
    906e:	fd 01       	movw	r30, r26
    9070:	e2 0f       	add	r30, r18
    9072:	f3 1f       	adc	r31, r19
    9074:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9076:	34 e0       	ldi	r19, 0x04	; 4
    9078:	83 9f       	mul	r24, r19
    907a:	f0 01       	movw	r30, r0
    907c:	11 24       	eor	r1, r1
    907e:	e8 55       	subi	r30, 0x58	; 88
    9080:	fb 4f       	sbci	r31, 0xFB	; 251
    9082:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9084:	8f 5f       	subi	r24, 0xFF	; 255
    9086:	43 83       	std	Z+3, r20	; 0x03
    9088:	9f 0d       	add	r25, r15
    908a:	e8 cf       	rjmp	.-48     	; 0x905c <MapSprite2+0x5c>
    908c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    908e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9090:	95 2f       	mov	r25, r21
    9092:	dd cf       	rjmp	.-70     	; 0x904e <MapSprite2+0x4e>
	    }
	}
    9094:	df 91       	pop	r29
    9096:	cf 91       	pop	r28
    9098:	1f 91       	pop	r17
    909a:	0f 91       	pop	r16
    909c:	ff 90       	pop	r15
    909e:	ef 90       	pop	r14
    90a0:	df 90       	pop	r13
    90a2:	08 95       	ret

000090a4 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    90a4:	0f 93       	push	r16
    90a6:	cf 93       	push	r28
    90a8:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    90aa:	30 e0       	ldi	r19, 0x00	; 0
    90ac:	30 17       	cp	r19, r16
    90ae:	e1 f0       	breq	.+56     	; 0x90e8 <MoveSprite+0x44>
    90b0:	b4 2f       	mov	r27, r20
    90b2:	a0 e2       	ldi	r26, 0x20	; 32
    90b4:	a4 0f       	add	r26, r20
    90b6:	78 2f       	mov	r23, r24
    90b8:	72 0f       	add	r23, r18
    90ba:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    90bc:	87 17       	cp	r24, r23
    90be:	81 f0       	breq	.+32     	; 0x90e0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    90c0:	c4 e0       	ldi	r28, 0x04	; 4
    90c2:	8c 9f       	mul	r24, r28
    90c4:	f0 01       	movw	r30, r0
    90c6:	11 24       	eor	r1, r1
    90c8:	e8 55       	subi	r30, 0x58	; 88
    90ca:	fb 4f       	sbci	r31, 0xFB	; 251
    90cc:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    90ce:	41 3e       	cpi	r20, 0xE1	; 225
    90d0:	51 05       	cpc	r21, r1
    90d2:	14 f0       	brlt	.+4      	; 0x90d8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    90d4:	a1 83       	std	Z+1, r26	; 0x01
    90d6:	01 c0       	rjmp	.+2      	; 0x90da <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    90d8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    90da:	8f 5f       	subi	r24, 0xFF	; 255
    90dc:	98 5f       	subi	r25, 0xF8	; 248
    90de:	ee cf       	rjmp	.-36     	; 0x90bc <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    90e0:	3f 5f       	subi	r19, 0xFF	; 255
    90e2:	48 5f       	subi	r20, 0xF8	; 248
    90e4:	5f 4f       	sbci	r21, 0xFF	; 255
    90e6:	e2 cf       	rjmp	.-60     	; 0x90ac <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    90e8:	cf 91       	pop	r28
    90ea:	0f 91       	pop	r16
    90ec:	08 95       	ret

000090ee <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    90ee:	08 95       	ret

000090f0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    90f0:	e8 ea       	ldi	r30, 0xA8	; 168
    90f2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    90f4:	80 ef       	ldi	r24, 0xF0	; 240
    90f6:	80 83       	st	Z, r24
    90f8:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    90fa:	94 e0       	ldi	r25, 0x04	; 4
    90fc:	e0 3d       	cpi	r30, 0xD0	; 208
    90fe:	f9 07       	cpc	r31, r25
    9100:	d1 f7       	brne	.-12     	; 0x90f6 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9102:	10 92 0c 0a 	sts	0x0A0C, r1
		user_ram_tiles_c_tmp = 0U;
    9106:	10 92 0e 0a 	sts	0x0A0E, r1
    910a:	08 95       	ret

0000910c <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    910c:	4f 92       	push	r4
    910e:	5f 92       	push	r5
    9110:	6f 92       	push	r6
    9112:	7f 92       	push	r7
    9114:	8f 92       	push	r8
    9116:	9f 92       	push	r9
    9118:	af 92       	push	r10
    911a:	bf 92       	push	r11
    911c:	cf 92       	push	r12
    911e:	df 92       	push	r13
    9120:	ef 92       	push	r14
    9122:	ff 92       	push	r15
    9124:	0f 93       	push	r16
    9126:	1f 93       	push	r17
    9128:	cf 93       	push	r28
    912a:	df 93       	push	r29
    912c:	68 2e       	mov	r6, r24
    912e:	56 2e       	mov	r5, r22
    9130:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9132:	fa 01       	movw	r30, r20
    9134:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9136:	31 96       	adiw	r30, 0x01	; 1
    9138:	84 90       	lpm	r8, Z
    913a:	c7 2c       	mov	r12, r7
    913c:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    913e:	00 e0       	ldi	r16, 0x00	; 0
    9140:	10 e0       	ldi	r17, 0x00	; 0
    9142:	91 2c       	mov	r9, r1
    9144:	98 14       	cp	r9, r8
    9146:	f1 f0       	breq	.+60     	; 0x9184 <DrawMap+0x78>
    9148:	c0 e0       	ldi	r28, 0x00	; 0
    914a:	d0 e0       	ldi	r29, 0x00	; 0
    914c:	58 01       	movw	r10, r16
    914e:	f2 e0       	ldi	r31, 0x02	; 2
    9150:	af 0e       	add	r10, r31
    9152:	b1 1c       	adc	r11, r1
    9154:	49 2c       	mov	r4, r9
    9156:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9158:	c7 15       	cp	r28, r7
    915a:	80 f4       	brcc	.+32     	; 0x917c <DrawMap+0x70>
    915c:	95 01       	movw	r18, r10
    915e:	2c 0f       	add	r18, r28
    9160:	3d 1f       	adc	r19, r29
    9162:	f7 01       	movw	r30, r14
    9164:	e2 0f       	add	r30, r18
    9166:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9168:	24 91       	lpm	r18, Z
    916a:	42 2f       	mov	r20, r18
    916c:	50 e0       	ldi	r21, 0x00	; 0
    916e:	64 2d       	mov	r22, r4
    9170:	8c 2f       	mov	r24, r28
    9172:	86 0d       	add	r24, r6
    9174:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
    9178:	21 96       	adiw	r28, 0x01	; 1
    917a:	ee cf       	rjmp	.-36     	; 0x9158 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    917c:	93 94       	inc	r9
    917e:	0c 0d       	add	r16, r12
    9180:	1d 1d       	adc	r17, r13
    9182:	e0 cf       	rjmp	.-64     	; 0x9144 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9184:	df 91       	pop	r29
    9186:	cf 91       	pop	r28
    9188:	1f 91       	pop	r17
    918a:	0f 91       	pop	r16
    918c:	ff 90       	pop	r15
    918e:	ef 90       	pop	r14
    9190:	df 90       	pop	r13
    9192:	cf 90       	pop	r12
    9194:	bf 90       	pop	r11
    9196:	af 90       	pop	r10
    9198:	9f 90       	pop	r9
    919a:	8f 90       	pop	r8
    919c:	7f 90       	pop	r7
    919e:	6f 90       	pop	r6
    91a0:	5f 90       	pop	r5
    91a2:	4f 90       	pop	r4
    91a4:	08 95       	ret

000091a6 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    91a6:	df 92       	push	r13
    91a8:	ef 92       	push	r14
    91aa:	ff 92       	push	r15
    91ac:	0f 93       	push	r16
    91ae:	1f 93       	push	r17
    91b0:	cf 93       	push	r28
    91b2:	df 93       	push	r29
    91b4:	f6 2e       	mov	r15, r22
    91b6:	04 2f       	mov	r16, r20
    91b8:	d2 2e       	mov	r13, r18
    91ba:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    91bc:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    91be:	8a e0       	ldi	r24, 0x0A	; 10
    91c0:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    91c2:	01 11       	cpse	r16, r1
    91c4:	02 c0       	rjmp	.+4      	; 0x91ca <PrintByte+0x24>
    91c6:	11 11       	cpse	r17, r1
    91c8:	07 c0       	rjmp	.+14     	; 0x91d8 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    91ca:	80 2f       	mov	r24, r16
    91cc:	6e 2d       	mov	r22, r14
    91ce:	0e 94 63 70 	call	0xe0c6	; 0xe0c6 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    91d2:	40 e1       	ldi	r20, 0x10	; 16
    91d4:	49 0f       	add	r20, r25
    91d6:	05 c0       	rjmp	.+10     	; 0x91e2 <PrintByte+0x3c>
		}else{
			if(zeropad){
    91d8:	dd 20       	and	r13, r13
    91da:	11 f0       	breq	.+4      	; 0x91e0 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    91dc:	40 e1       	ldi	r20, 0x10	; 16
    91de:	01 c0       	rjmp	.+2      	; 0x91e2 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    91e0:	40 e0       	ldi	r20, 0x00	; 0
    91e2:	6f 2d       	mov	r22, r15
    91e4:	8c 2f       	mov	r24, r28
    91e6:	0e 94 4a 3a 	call	0x7494	; 0x7494 <SetFont>
			}
		}
		val=val/10;
    91ea:	80 2f       	mov	r24, r16
    91ec:	6e 2d       	mov	r22, r14
    91ee:	0e 94 63 70 	call	0xe0c6	; 0xe0c6 <__udivmodqi4>
    91f2:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    91f4:	1f 5f       	subi	r17, 0xFF	; 255
    91f6:	21 97       	sbiw	r28, 0x01	; 1
    91f8:	13 30       	cpi	r17, 0x03	; 3
    91fa:	19 f7       	brne	.-58     	; 0x91c2 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    91fc:	df 91       	pop	r29
    91fe:	cf 91       	pop	r28
    9200:	1f 91       	pop	r17
    9202:	0f 91       	pop	r16
    9204:	ff 90       	pop	r15
    9206:	ef 90       	pop	r14
    9208:	df 90       	pop	r13
    920a:	08 95       	ret

0000920c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    920c:	0f 93       	push	r16
    920e:	1f 93       	push	r17
    9210:	cf 93       	push	r28
    9212:	df 93       	push	r29
    9214:	06 2f       	mov	r16, r22
    9216:	c4 2f       	mov	r28, r20
    9218:	d5 2f       	mov	r29, r21
    921a:	18 2f       	mov	r17, r24
    921c:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    921e:	fe 01       	movw	r30, r28
    9220:	44 91       	lpm	r20, Z
		if(c!=0){
    9222:	44 23       	and	r20, r20
    9224:	49 f0       	breq	.+18     	; 0x9238 <Print+0x2c>
			c=((c&127)-32);			
    9226:	4f 77       	andi	r20, 0x7F	; 127
    9228:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    922a:	60 2f       	mov	r22, r16
    922c:	8c 2f       	mov	r24, r28
    922e:	81 0f       	add	r24, r17
    9230:	0e 94 4a 3a 	call	0x7494	; 0x7494 <SetFont>
    9234:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9236:	f3 cf       	rjmp	.-26     	; 0x921e <Print+0x12>
	
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
    923c:	1f 91       	pop	r17
    923e:	0f 91       	pop	r16
    9240:	08 95       	ret

00009242 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9242:	40 52       	subi	r20, 0x20	; 32
    9244:	0c 94 4a 3a 	jmp	0x7494	; 0x7494 <SetFont>

00009248 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9248:	0f 93       	push	r16
    924a:	1f 93       	push	r17
    924c:	cf 93       	push	r28
    924e:	df 93       	push	r29
    9250:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9252:	c0 e0       	ldi	r28, 0x00	; 0
    9254:	d0 e0       	ldi	r29, 0x00	; 0
    9256:	c0 17       	cp	r28, r16
    9258:	d1 07       	cpc	r29, r17
    925a:	44 f4       	brge	.+16     	; 0x926c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    925c:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <GetVsyncFlag>
    9260:	88 23       	and	r24, r24
    9262:	e1 f3       	breq	.-8      	; 0x925c <WaitVsync+0x14>
		ClearVsyncFlag();		
    9264:	0e 94 68 3a 	call	0x74d0	; 0x74d0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9268:	21 96       	adiw	r28, 0x01	; 1
    926a:	f5 cf       	rjmp	.-22     	; 0x9256 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    926c:	df 91       	pop	r29
    926e:	cf 91       	pop	r28
    9270:	1f 91       	pop	r17
    9272:	0f 91       	pop	r16
    9274:	08 95       	ret

00009276 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9276:	80 93 31 0b 	sts	0x0B31, r24
	currFadeFrame=0;
    927a:	10 92 34 0b 	sts	0x0B34, r1
	fadeActive=true;
    927e:	81 e0       	ldi	r24, 0x01	; 1
    9280:	80 93 33 0b 	sts	0x0B33, r24
		
	if(blocking){
    9284:	66 23       	and	r22, r22
    9286:	21 f0       	breq	.+8      	; 0x9290 <doFade+0x1a>
		while(fadeActive==true);
    9288:	80 91 33 0b 	lds	r24, 0x0B33
    928c:	81 11       	cpse	r24, r1
    928e:	fc cf       	rjmp	.-8      	; 0x9288 <doFade+0x12>
    9290:	08 95       	ret

00009292 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9292:	81 11       	cpse	r24, r1
    9294:	03 c0       	rjmp	.+6      	; 0x929c <FadeIn+0xa>
		DDRC=0xff;
    9296:	8f ef       	ldi	r24, 0xFF	; 255
    9298:	87 b9       	out	0x07, r24	; 7
		return;
    929a:	08 95       	ret
	}
	fadeStep=1;
    929c:	91 e0       	ldi	r25, 0x01	; 1
    929e:	90 93 35 0b 	sts	0x0B35, r25
	fadeDir=1;
    92a2:	90 93 32 0b 	sts	0x0B32, r25
	doFade(speed,blocking);
    92a6:	0c 94 3b 49 	jmp	0x9276	; 0x9276 <doFade>

000092aa <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    92aa:	81 11       	cpse	r24, r1
    92ac:	02 c0       	rjmp	.+4      	; 0x92b2 <FadeOut+0x8>
		DDRC=0;
    92ae:	17 b8       	out	0x07, r1	; 7
		return;
    92b0:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    92b2:	9c e0       	ldi	r25, 0x0C	; 12
    92b4:	90 93 35 0b 	sts	0x0B35, r25
	fadeDir=-1;
    92b8:	9f ef       	ldi	r25, 0xFF	; 255
    92ba:	90 93 32 0b 	sts	0x0B32, r25
	doFade(speed,blocking);
    92be:	0c 94 3b 49 	jmp	0x9276	; 0x9276 <doFade>

000092c2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    92c2:	80 91 33 0b 	lds	r24, 0x0B33
    92c6:	88 23       	and	r24, r24
    92c8:	01 f1       	breq	.+64     	; 0x930a <ProcessFading+0x48>
		if(currFadeFrame==0){
    92ca:	80 91 34 0b 	lds	r24, 0x0B34
    92ce:	81 11       	cpse	r24, r1
    92d0:	19 c0       	rjmp	.+50     	; 0x9304 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    92d2:	80 91 31 0b 	lds	r24, 0x0B31
    92d6:	80 93 34 0b 	sts	0x0B34, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    92da:	e0 91 35 0b 	lds	r30, 0x0B35
    92de:	f0 e0       	ldi	r31, 0x00	; 0
    92e0:	e5 52       	subi	r30, 0x25	; 37
    92e2:	ff 4f       	sbci	r31, 0xFF	; 255
    92e4:	e4 91       	lpm	r30, Z
    92e6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    92e8:	90 91 32 0b 	lds	r25, 0x0B32
    92ec:	80 91 35 0b 	lds	r24, 0x0B35
    92f0:	89 0f       	add	r24, r25
    92f2:	80 93 35 0b 	sts	0x0B35, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    92f6:	88 23       	and	r24, r24
    92f8:	11 f0       	breq	.+4      	; 0x92fe <ProcessFading+0x3c>
    92fa:	8d 30       	cpi	r24, 0x0D	; 13
    92fc:	31 f4       	brne	.+12     	; 0x930a <ProcessFading+0x48>
				fadeActive=false;
    92fe:	10 92 33 0b 	sts	0x0B33, r1
    9302:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9304:	81 50       	subi	r24, 0x01	; 1
    9306:	80 93 34 0b 	sts	0x0B34, r24
    930a:	08 95       	ret

0000930c <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    930c:	0e 94 61 49 	call	0x92c2	; 0x92c2 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    9310:	0c 94 00 47 	jmp	0x8e00	; 0x8e00 <ProcessSprites>

00009314 <LBPlaySound.part.2>:
void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    9314:	41 e0       	ldi	r20, 0x01	; 1
    9316:	6f ef       	ldi	r22, 0xFF	; 255
    9318:	0c 94 02 3e 	jmp	0x7c04	; 0x7c04 <TriggerFx>

0000931c <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    931c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    931e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9320:	93 81       	ldd	r25, Z+3	; 0x03
    9322:	9f 5f       	subi	r25, 0xFF	; 255
    9324:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9326:	22 81       	ldd	r18, Z+2	; 0x02
    9328:	80 81       	ld	r24, Z
    932a:	92 17       	cp	r25, r18
    932c:	38 f4       	brcc	.+14     	; 0x933c <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    932e:	e8 0f       	add	r30, r24
    9330:	f1 1d       	adc	r31, r1
    9332:	e8 0f       	add	r30, r24
    9334:	f1 1d       	adc	r31, r1
    9336:	86 81       	ldd	r24, Z+6	; 0x06
    9338:	97 81       	ldd	r25, Z+7	; 0x07
    933a:	08 95       	ret
	}
	anim->frame_count = 0;
    933c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	01 96       	adiw	r24, 0x01	; 1
    9342:	61 81       	ldd	r22, Z+1	; 0x01
    9344:	70 e0       	ldi	r23, 0x00	; 0
    9346:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    934a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    934c:	81 11       	cpse	r24, r1
    934e:	02 c0       	rjmp	.+4      	; 0x9354 <LBGetNextFrame+0x38>
    9350:	21 e0       	ldi	r18, 0x01	; 1
    9352:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9354:	99 27       	eor	r25, r25
    9356:	03 96       	adiw	r24, 0x03	; 3
    9358:	88 0f       	add	r24, r24
    935a:	99 1f       	adc	r25, r25
    935c:	e8 0f       	add	r30, r24
    935e:	f9 1f       	adc	r31, r25
    9360:	80 81       	ld	r24, Z
    9362:	91 81       	ldd	r25, Z+1	; 0x01
}
    9364:	08 95       	ret

00009366 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    9366:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9368:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    936a:	93 81       	ldd	r25, Z+3	; 0x03
    936c:	9f 5f       	subi	r25, 0xFF	; 255
    936e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9370:	22 81       	ldd	r18, Z+2	; 0x02
    9372:	80 81       	ld	r24, Z
    9374:	92 17       	cp	r25, r18
    9376:	e0 f0       	brcs	.+56     	; 0x93b0 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    9378:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    937a:	95 81       	ldd	r25, Z+5	; 0x05
    937c:	99 23       	and	r25, r25
    937e:	49 f0       	breq	.+18     	; 0x9392 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9380:	81 50       	subi	r24, 0x01	; 1
    9382:	10 f0       	brcs	.+4      	; 0x9388 <LBGetNextFrameReverse+0x22>
    9384:	80 83       	st	Z, r24
    9386:	13 c0       	rjmp	.+38     	; 0x93ae <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    9388:	10 82       	st	Z, r1
			anim->looped = 1;
    938a:	81 e0       	ldi	r24, 0x01	; 1
    938c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    938e:	15 82       	std	Z+5, r1	; 0x05
    9390:	0e c0       	rjmp	.+28     	; 0x93ae <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9392:	21 81       	ldd	r18, Z+1	; 0x01
    9394:	90 e0       	ldi	r25, 0x00	; 0
    9396:	01 96       	adiw	r24, 0x01	; 1
    9398:	62 2f       	mov	r22, r18
    939a:	70 e0       	ldi	r23, 0x00	; 0
    939c:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    93a0:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    93a2:	81 11       	cpse	r24, r1
    93a4:	04 c0       	rjmp	.+8      	; 0x93ae <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    93a6:	81 e0       	ldi	r24, 0x01	; 1
    93a8:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    93aa:	21 50       	subi	r18, 0x01	; 1
    93ac:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    93ae:	80 81       	ld	r24, Z
    93b0:	e8 0f       	add	r30, r24
    93b2:	f1 1d       	adc	r31, r1
    93b4:	e8 0f       	add	r30, r24
    93b6:	f1 1d       	adc	r31, r1
    93b8:	86 81       	ldd	r24, Z+6	; 0x06
    93ba:	97 81       	ldd	r25, Z+7	; 0x07
}
    93bc:	08 95       	ret

000093be <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    93be:	0f 93       	push	r16
    93c0:	1f 93       	push	r17
    93c2:	cf 93       	push	r28
    93c4:	df 93       	push	r29
    93c6:	1f 92       	push	r1
    93c8:	cd b7       	in	r28, 0x3d	; 61
    93ca:	de b7       	in	r29, 0x3e	; 62
    93cc:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    93ce:	86 2f       	mov	r24, r22
    93d0:	69 83       	std	Y+1, r22	; 0x01
    93d2:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <ReadJoypad>
    93d6:	d8 01       	movw	r26, r16
    93d8:	15 96       	adiw	r26, 0x05	; 5
    93da:	9c 93       	st	X, r25
    93dc:	8e 93       	st	-X, r24
    93de:	14 97       	sbiw	r26, 0x04	; 4
    93e0:	69 81       	ldd	r22, Y+1	; 0x01
    93e2:	e6 2f       	mov	r30, r22
    93e4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    93e6:	00 97       	sbiw	r24, 0x00	; 0
    93e8:	51 f0       	breq	.+20     	; 0x93fe <LBGetJoyPadState+0x40>
    93ea:	df 01       	movw	r26, r30
    93ec:	aa 0f       	add	r26, r26
    93ee:	bb 1f       	adc	r27, r27
    93f0:	a4 5a       	subi	r26, 0xA4	; 164
    93f2:	b5 4f       	sbci	r27, 0xF5	; 245
    93f4:	2d 91       	ld	r18, X+
    93f6:	3c 91       	ld	r19, X
    93f8:	82 17       	cp	r24, r18
    93fa:	93 07       	cpc	r25, r19
    93fc:	21 f0       	breq	.+8      	; 0x9406 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    93fe:	d8 01       	movw	r26, r16
    9400:	16 96       	adiw	r26, 0x06	; 6
    9402:	1c 92       	st	X, r1
    9404:	07 c0       	rjmp	.+14     	; 0x9414 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9406:	d8 01       	movw	r26, r16
    9408:	16 96       	adiw	r26, 0x06	; 6
    940a:	2c 91       	ld	r18, X
    940c:	16 97       	sbiw	r26, 0x06	; 6
    940e:	2f 5f       	subi	r18, 0xFF	; 255
    9410:	16 96       	adiw	r26, 0x06	; 6
    9412:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9414:	ee 0f       	add	r30, r30
    9416:	ff 1f       	adc	r31, r31
    9418:	e4 5a       	subi	r30, 0xA4	; 164
    941a:	f5 4f       	sbci	r31, 0xF5	; 245
    941c:	20 81       	ld	r18, Z
    941e:	31 81       	ldd	r19, Z+1	; 0x01
    9420:	a9 01       	movw	r20, r18
    9422:	40 95       	com	r20
    9424:	50 95       	com	r21
    9426:	48 23       	and	r20, r24
    9428:	59 23       	and	r21, r25
    942a:	d8 01       	movw	r26, r16
    942c:	11 96       	adiw	r26, 0x01	; 1
    942e:	5c 93       	st	X, r21
    9430:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9432:	ac 01       	movw	r20, r24
    9434:	40 95       	com	r20
    9436:	50 95       	com	r21
    9438:	24 23       	and	r18, r20
    943a:	35 23       	and	r19, r21
    943c:	13 96       	adiw	r26, 0x03	; 3
    943e:	3c 93       	st	X, r19
    9440:	2e 93       	st	-X, r18
    9442:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9444:	91 83       	std	Z+1, r25	; 0x01
    9446:	80 83       	st	Z, r24
}
    9448:	0f 90       	pop	r0
    944a:	df 91       	pop	r29
    944c:	cf 91       	pop	r28
    944e:	1f 91       	pop	r17
    9450:	0f 91       	pop	r16
    9452:	08 95       	ret

00009454 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    9454:	af 92       	push	r10
    9456:	bf 92       	push	r11
    9458:	cf 92       	push	r12
    945a:	df 92       	push	r13
    945c:	ef 92       	push	r14
    945e:	ff 92       	push	r15
    9460:	0f 93       	push	r16
    9462:	1f 93       	push	r17
    9464:	cf 93       	push	r28
    9466:	df 93       	push	r29
    9468:	1f 92       	push	r1
    946a:	cd b7       	in	r28, 0x3d	; 61
    946c:	de b7       	in	r29, 0x3e	; 62
    946e:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9470:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9472:	c6 2e       	mov	r12, r22
    9474:	d1 2c       	mov	r13, r1
    9476:	90 e0       	ldi	r25, 0x00	; 0
    9478:	5c 01       	movw	r10, r24
    947a:	a4 1a       	sub	r10, r20
    947c:	b5 0a       	sbc	r11, r21
    947e:	80 2f       	mov	r24, r16
    9480:	8e 19       	sub	r24, r14
	p_prev[index] = p->held;
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    9482:	82 17       	cp	r24, r18
    9484:	60 f4       	brcc	.+24     	; 0x949e <LBPrintStr+0x4a>
    9486:	c5 01       	movw	r24, r10
    9488:	80 0f       	add	r24, r16
    948a:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    948c:	f8 01       	movw	r30, r16
    948e:	41 91       	ld	r20, Z+
    9490:	8f 01       	movw	r16, r30
    9492:	b6 01       	movw	r22, r12
    9494:	29 83       	std	Y+1, r18	; 0x01
    9496:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    949a:	29 81       	ldd	r18, Y+1	; 0x01
    949c:	f0 cf       	rjmp	.-32     	; 0x947e <LBPrintStr+0x2a>
	}
}
    949e:	0f 90       	pop	r0
    94a0:	df 91       	pop	r29
    94a2:	cf 91       	pop	r28
    94a4:	1f 91       	pop	r17
    94a6:	0f 91       	pop	r16
    94a8:	ff 90       	pop	r15
    94aa:	ef 90       	pop	r14
    94ac:	df 90       	pop	r13
    94ae:	cf 90       	pop	r12
    94b0:	bf 90       	pop	r11
    94b2:	af 90       	pop	r10
    94b4:	08 95       	ret

000094b6 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
    94b6:	af 92       	push	r10
    94b8:	bf 92       	push	r11
    94ba:	cf 92       	push	r12
    94bc:	df 92       	push	r13
    94be:	ef 92       	push	r14
    94c0:	ff 92       	push	r15
    94c2:	0f 93       	push	r16
    94c4:	1f 93       	push	r17
    94c6:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    94c8:	26 0f       	add	r18, r22
    94ca:	37 1f       	adc	r19, r23
    94cc:	e2 16       	cp	r14, r18
    94ce:	f3 06       	cpc	r15, r19
    94d0:	80 f4       	brcc	.+32     	; 0x94f2 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    94d2:	ae 0c       	add	r10, r14
    94d4:	bf 1c       	adc	r11, r15
    94d6:	6a 15       	cp	r22, r10
    94d8:	7b 05       	cpc	r23, r11
    94da:	58 f4       	brcc	.+22     	; 0x94f2 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    94dc:	48 0f       	add	r20, r24
    94de:	59 1f       	adc	r21, r25
    94e0:	04 17       	cp	r16, r20
    94e2:	15 07       	cpc	r17, r21
    94e4:	30 f4       	brcc	.+12     	; 0x94f2 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    94e6:	c0 0e       	add	r12, r16
    94e8:	d1 1e       	adc	r13, r17
    94ea:	81 e0       	ldi	r24, 0x01	; 1
    94ec:	ec 15       	cp	r30, r12
    94ee:	fd 05       	cpc	r31, r13
    94f0:	08 f0       	brcs	.+2      	; 0x94f4 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
	if (y1 + height1 <= y2) return 0;
    94f2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    94f4:	1f 91       	pop	r17
    94f6:	0f 91       	pop	r16
    94f8:	ff 90       	pop	r15
    94fa:	ef 90       	pop	r14
    94fc:	df 90       	pop	r13
    94fe:	cf 90       	pop	r12
    9500:	bf 90       	pop	r11
    9502:	af 90       	pop	r10
    9504:	08 95       	ret

00009506 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9506:	1f 93       	push	r17
    9508:	cf 93       	push	r28
    950a:	df 93       	push	r29
    950c:	1f 92       	push	r1
    950e:	cd b7       	in	r28, 0x3d	; 61
    9510:	de b7       	in	r29, 0x3e	; 62
    9512:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    9514:	80 e0       	ldi	r24, 0x00	; 0
    9516:	90 e0       	ldi	r25, 0x00	; 0
    9518:	69 83       	std	Y+1, r22	; 0x01
    951a:	0e 94 81 3c 	call	0x7902	; 0x7902 <GetPrngNumber>
    951e:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9520:	69 81       	ldd	r22, Y+1	; 0x01
    9522:	70 e0       	ldi	r23, 0x00	; 0
    9524:	61 1b       	sub	r22, r17
    9526:	71 09       	sbc	r23, r1
    9528:	6f 5f       	subi	r22, 0xFF	; 255
    952a:	7f 4f       	sbci	r23, 0xFF	; 255
    952c:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
}
    9530:	81 0f       	add	r24, r17
    9532:	0f 90       	pop	r0
    9534:	df 91       	pop	r29
    9536:	cf 91       	pop	r28
    9538:	1f 91       	pop	r17
    953a:	08 95       	ret

0000953c <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    953c:	cf 93       	push	r28
    953e:	df 93       	push	r29
    9540:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9542:	c0 e0       	ldi	r28, 0x00	; 0
    9544:	cd 17       	cp	r28, r29
    9546:	31 f0       	breq	.+12     	; 0x9554 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    9548:	8f ef       	ldi	r24, 0xFF	; 255
    954a:	9f ef       	ldi	r25, 0xFF	; 255
    954c:	0e 94 84 3a 	call	0x7508	; 0x7508 <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9550:	cf 5f       	subi	r28, 0xFF	; 255
    9552:	f8 cf       	rjmp	.-16     	; 0x9544 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    9554:	df 91       	pop	r29
    9556:	cf 91       	pop	r28
    9558:	08 95       	ret

0000955a <LBHideAllSprites>:

void LBHideAllSprites()
{
    955a:	e8 ea       	ldi	r30, 0xA8	; 168
    955c:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = OFF_SCREEN;
    955e:	80 ef       	ldi	r24, 0xF0	; 240
    9560:	80 83       	st	Z, r24
    9562:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    9564:	94 e0       	ldi	r25, 0x04	; 4
    9566:	e0 3d       	cpi	r30, 0xD0	; 208
    9568:	f9 07       	cpc	r31, r25
    956a:	d1 f7       	brne	.-12     	; 0x9560 <LBHideAllSprites+0x6>
	{
		sprites[i].x = OFF_SCREEN;
	}
}
    956c:	08 95       	ret

0000956e <LBPlaySound>:


void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
    956e:	82 2f       	mov	r24, r18
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    9570:	26 30       	cpi	r18, 0x06	; 6
    9572:	11 f4       	brne	.+4      	; 0x9578 <LBPlaySound+0xa>
    9574:	0c 94 8a 49 	jmp	0x9314	; 0x9314 <LBPlaySound.part.2>
    9578:	46 2b       	or	r20, r22
	else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
    957a:	40 fd       	sbrc	r20, 0
    957c:	04 c0       	rjmp	.+8      	; 0x9586 <LBPlaySound+0x18>
    957e:	41 e0       	ldi	r20, 0x01	; 1
    9580:	6f ef       	ldi	r22, 0xFF	; 255
    9582:	0c 94 02 3e 	jmp	0x7c04	; 0x7c04 <TriggerFx>
    9586:	08 95       	ret

00009588 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    9588:	0f 93       	push	r16
    958a:	1f 93       	push	r17
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    9592:	20 97       	sbiw	r28, 0x00	; 0
    9594:	99 f0       	breq	.+38     	; 0x95bc <wifiSendP+0x34>
		c=pgm_read_byte(str);
    9596:	fe 01       	movw	r30, r28
    9598:	04 91       	lpm	r16, Z
		if(c==0)break;
    959a:	00 23       	and	r16, r16
    959c:	79 f0       	breq	.+30     	; 0x95bc <wifiSendP+0x34>
    959e:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    95a0:	80 2f       	mov	r24, r16
    95a2:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <UartSendChar>
    95a6:	8f 3f       	cpi	r24, 0xFF	; 255
    95a8:	39 f4       	brne	.+14     	; 0x95b8 <wifiSendP+0x30>
			WaitVsync(1);
    95aa:	81 e0       	ldi	r24, 0x01	; 1
    95ac:	90 e0       	ldi	r25, 0x00	; 0
    95ae:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    95b2:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    95b4:	a9 f7       	brne	.-22     	; 0x95a0 <wifiSendP+0x18>
    95b6:	02 c0       	rjmp	.+4      	; 0x95bc <wifiSendP+0x34>
		}
		counter = 0;
		str++;
    95b8:	21 96       	adiw	r28, 0x01	; 1
    95ba:	eb cf       	rjmp	.-42     	; 0x9592 <wifiSendP+0xa>
	};

	return WIFI_OK;
}
    95bc:	80 e0       	ldi	r24, 0x00	; 0
    95be:	df 91       	pop	r29
    95c0:	cf 91       	pop	r28
    95c2:	1f 91       	pop	r17
    95c4:	0f 91       	pop	r16
    95c6:	08 95       	ret

000095c8 <wifiSend>:

u8 wifiSend(char* str){
    95c8:	0f 93       	push	r16
    95ca:	1f 93       	push	r17
    95cc:	cf 93       	push	r28
    95ce:	df 93       	push	r29
    95d0:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    95d2:	20 97       	sbiw	r28, 0x00	; 0
    95d4:	79 f0       	breq	.+30     	; 0x95f4 <wifiSend+0x2c>
		c=*str;
    95d6:	09 91       	ld	r16, Y+
		if(c==0)break;
    95d8:	00 23       	and	r16, r16
    95da:	61 f0       	breq	.+24     	; 0x95f4 <wifiSend+0x2c>
    95dc:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    95de:	80 2f       	mov	r24, r16
    95e0:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <UartSendChar>
    95e4:	8f 3f       	cpi	r24, 0xFF	; 255
    95e6:	a9 f7       	brne	.-22     	; 0x95d2 <wifiSend+0xa>
			WaitVsync(1);
    95e8:	81 e0       	ldi	r24, 0x01	; 1
    95ea:	90 e0       	ldi	r25, 0x00	; 0
    95ec:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    95f0:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    95f2:	a9 f7       	brne	.-22     	; 0x95de <wifiSend+0x16>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    95f4:	80 e0       	ldi	r24, 0x00	; 0
    95f6:	df 91       	pop	r29
    95f8:	cf 91       	pop	r28
    95fa:	1f 91       	pop	r17
    95fc:	0f 91       	pop	r16
    95fe:	08 95       	ret

00009600 <wifiSendBinary>:

u8 wifiSendBinary(char* str, u8 sz){
    9600:	ff 92       	push	r15
    9602:	0f 93       	push	r16
    9604:	1f 93       	push	r17
    9606:	cf 93       	push	r28
    9608:	df 93       	push	r29
    960a:	c6 2f       	mov	r28, r22
    960c:	8c 01       	movw	r16, r24

	char c;
	u8 counter = 0;
	while(sz--){
    960e:	cc 23       	and	r28, r28
    9610:	91 f0       	breq	.+36     	; 0x9636 <wifiSendBinary+0x36>
		c=*str;
    9612:	f8 01       	movw	r30, r16
    9614:	f1 90       	ld	r15, Z+
    9616:	8f 01       	movw	r16, r30
		while(UartSendChar(c)==-1) {
    9618:	dc e3       	ldi	r29, 0x3C	; 60
    961a:	8f 2d       	mov	r24, r15
    961c:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <UartSendChar>
    9620:	8f 3f       	cpi	r24, 0xFF	; 255
    9622:	39 f4       	brne	.+14     	; 0x9632 <wifiSendBinary+0x32>
			WaitVsync(1);
    9624:	81 e0       	ldi	r24, 0x01	; 1
    9626:	90 e0       	ldi	r25, 0x00	; 0
    9628:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    962c:	d1 50       	subi	r29, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    962e:	a9 f7       	brne	.-22     	; 0x961a <wifiSendBinary+0x1a>
    9630:	02 c0       	rjmp	.+4      	; 0x9636 <wifiSendBinary+0x36>

u8 wifiSendBinary(char* str, u8 sz){

	char c;
	u8 counter = 0;
	while(sz--){
    9632:	c1 50       	subi	r28, 0x01	; 1
    9634:	ec cf       	rjmp	.-40     	; 0x960e <wifiSendBinary+0xe>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    9636:	80 e0       	ldi	r24, 0x00	; 0
    9638:	df 91       	pop	r29
    963a:	cf 91       	pop	r28
    963c:	1f 91       	pop	r17
    963e:	0f 91       	pop	r16
    9640:	ff 90       	pop	r15
    9642:	08 95       	ret

00009644 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(char* buffer, u8 expectedSize) {
    9644:	ef 92       	push	r14
    9646:	ff 92       	push	r15
    9648:	1f 93       	push	r17
    964a:	cf 93       	push	r28
    964c:	df 93       	push	r29
    964e:	00 d0       	rcall	.+0      	; 0x9650 <wifiGetIfAvailable+0xc>
    9650:	cd b7       	in	r28, 0x3d	; 61
    9652:	de b7       	in	r29, 0x3e	; 62
    9654:	18 2f       	mov	r17, r24
		*buffer = r&0xff;
		buffer++;
	}
	return WIFI_OK;*/
	s16 r = -1;
	if (UartUnreadCount() > 0) {
    9656:	69 83       	std	Y+1, r22	; 0x01
    9658:	9a 83       	std	Y+2, r25	; 0x02
    965a:	0e 94 46 3c 	call	0x788c	; 0x788c <UartUnreadCount>
    965e:	69 81       	ldd	r22, Y+1	; 0x01
    9660:	9a 81       	ldd	r25, Y+2	; 0x02
    9662:	88 23       	and	r24, r24
    9664:	89 f0       	breq	.+34     	; 0x9688 <wifiGetIfAvailable+0x44>
    9666:	e1 2e       	mov	r14, r17
    9668:	f9 2e       	mov	r15, r25
    966a:	16 0f       	add	r17, r22
		while (expectedSize--) {
    966c:	1e 15       	cp	r17, r14
    966e:	51 f0       	breq	.+20     	; 0x9684 <wifiGetIfAvailable+0x40>
			while(r == -1) r = UartReadChar();
    9670:	0e 94 4c 3c 	call	0x7898	; 0x7898 <UartReadChar>
    9674:	8f 3f       	cpi	r24, 0xFF	; 255
    9676:	2f ef       	ldi	r18, 0xFF	; 255
    9678:	92 07       	cpc	r25, r18
    967a:	d1 f3       	breq	.-12     	; 0x9670 <wifiGetIfAvailable+0x2c>
			*buffer = r&0xff;
    967c:	f7 01       	movw	r30, r14
    967e:	81 93       	st	Z+, r24
    9680:	7f 01       	movw	r14, r30
    9682:	f4 cf       	rjmp	.-24     	; 0x966c <wifiGetIfAvailable+0x28>
		buffer++;
	}
	return WIFI_OK;*/
	s16 r = -1;
	if (UartUnreadCount() > 0) {
		while (expectedSize--) {
    9684:	80 e0       	ldi	r24, 0x00	; 0
    9686:	01 c0       	rjmp	.+2      	; 0x968a <wifiGetIfAvailable+0x46>
			*buffer = r&0xff;
			buffer++;
			r = -1;
		}
	} else {
		return WIFI_NODATA;
    9688:	82 e0       	ldi	r24, 0x02	; 2
	}
	return WIFI_OK;
}
    968a:	0f 90       	pop	r0
    968c:	0f 90       	pop	r0
    968e:	df 91       	pop	r29
    9690:	cf 91       	pop	r28
    9692:	1f 91       	pop	r17
    9694:	ff 90       	pop	r15
    9696:	ef 90       	pop	r14
    9698:	08 95       	ret

0000969a <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    969a:	ef 92       	push	r14
    969c:	ff 92       	push	r15
    969e:	0f 93       	push	r16
    96a0:	1f 93       	push	r17
    96a2:	cf 93       	push	r28
    96a4:	df 93       	push	r29
    96a6:	f8 2e       	mov	r15, r24
    96a8:	e9 2e       	mov	r14, r25
    96aa:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    96ac:	0e 94 73 3a 	call	0x74e6	; 0x74e6 <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    96b0:	cf 2d       	mov	r28, r15
    96b2:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    96b4:	0e 94 4c 3c 	call	0x7898	; 0x7898 <UartReadChar>
		if(r!=-1){
    96b8:	8f 3f       	cpi	r24, 0xFF	; 255
    96ba:	ef ef       	ldi	r30, 0xFF	; 255
    96bc:	9e 07       	cpc	r25, r30
    96be:	99 f0       	breq	.+38     	; 0x96e6 <wifiGetPB+0x4c>

			c=r&(0xff);
    96c0:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    96c2:	01 15       	cp	r16, r1
    96c4:	11 05       	cpc	r17, r1
    96c6:	19 f0       	breq	.+6      	; 0x96ce <wifiGetPB+0x34>
				*buf=c;
    96c8:	f8 01       	movw	r30, r16
    96ca:	81 93       	st	Z+, r24
    96cc:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    96ce:	fe 01       	movw	r30, r28
    96d0:	84 91       	lpm	r24, Z
    96d2:	28 13       	cpse	r18, r24
    96d4:	06 c0       	rjmp	.+12     	; 0x96e2 <wifiGetPB+0x48>
				p++;
    96d6:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    96d8:	fe 01       	movw	r30, r28
    96da:	84 91       	lpm	r24, Z
    96dc:	81 11       	cpse	r24, r1
    96de:	03 c0       	rjmp	.+6      	; 0x96e6 <wifiGetPB+0x4c>
    96e0:	09 c0       	rjmp	.+18     	; 0x96f4 <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    96e2:	cf 2d       	mov	r28, r15
    96e4:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    96e6:	0e 94 6e 3a 	call	0x74dc	; 0x74dc <GetVsyncCounter>
    96ea:	89 35       	cpi	r24, 0x59	; 89
    96ec:	92 40       	sbci	r25, 0x02	; 2
    96ee:	10 f3       	brcs	.-60     	; 0x96b4 <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    96f0:	81 e0       	ldi	r24, 0x01	; 1
    96f2:	01 c0       	rjmp	.+2      	; 0x96f6 <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    96f4:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    96f6:	df 91       	pop	r29
    96f8:	cf 91       	pop	r28
    96fa:	1f 91       	pop	r17
    96fc:	0f 91       	pop	r16
    96fe:	ff 90       	pop	r15
    9700:	ef 90       	pop	r14
    9702:	08 95       	ret

00009704 <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    9704:	cf 92       	push	r12
    9706:	df 92       	push	r13
    9708:	ef 92       	push	r14
    970a:	ff 92       	push	r15
    970c:	0f 93       	push	r16
    970e:	1f 93       	push	r17
    9710:	cf 93       	push	r28
    9712:	df 93       	push	r29
    9714:	f8 2e       	mov	r15, r24
    9716:	e9 2e       	mov	r14, r25
    9718:	8b 01       	movw	r16, r22
    971a:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    971c:	0e 94 73 3a 	call	0x74e6	; 0x74e6 <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    9720:	cf 2d       	mov	r28, r15
    9722:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    9724:	0e 94 4c 3c 	call	0x7898	; 0x7898 <UartReadChar>
        if(r!=-1){
    9728:	8f 3f       	cpi	r24, 0xFF	; 255
    972a:	ef ef       	ldi	r30, 0xFF	; 255
    972c:	9e 07       	cpc	r25, r30
    972e:	99 f0       	breq	.+38     	; 0x9756 <wifiGetPBT+0x52>

            c=r&(0xff);
    9730:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    9732:	01 15       	cp	r16, r1
    9734:	11 05       	cpc	r17, r1
    9736:	19 f0       	breq	.+6      	; 0x973e <wifiGetPBT+0x3a>
                *buf=c;
    9738:	f8 01       	movw	r30, r16
    973a:	81 93       	st	Z+, r24
    973c:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    973e:	fe 01       	movw	r30, r28
    9740:	84 91       	lpm	r24, Z
    9742:	28 13       	cpse	r18, r24
    9744:	06 c0       	rjmp	.+12     	; 0x9752 <wifiGetPBT+0x4e>
                p++;
    9746:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    9748:	fe 01       	movw	r30, r28
    974a:	84 91       	lpm	r24, Z
    974c:	81 11       	cpse	r24, r1
    974e:	03 c0       	rjmp	.+6      	; 0x9756 <wifiGetPBT+0x52>
    9750:	09 c0       	rjmp	.+18     	; 0x9764 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    9752:	cf 2d       	mov	r28, r15
    9754:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    9756:	0e 94 6e 3a 	call	0x74dc	; 0x74dc <GetVsyncCounter>
    975a:	c8 16       	cp	r12, r24
    975c:	d9 06       	cpc	r13, r25
    975e:	10 f7       	brcc	.-60     	; 0x9724 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    9760:	81 e0       	ldi	r24, 0x01	; 1
    9762:	01 c0       	rjmp	.+2      	; 0x9766 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    9764:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    9766:	df 91       	pop	r29
    9768:	cf 91       	pop	r28
    976a:	1f 91       	pop	r17
    976c:	0f 91       	pop	r16
    976e:	ff 90       	pop	r15
    9770:	ef 90       	pop	r14
    9772:	df 90       	pop	r13
    9774:	cf 90       	pop	r12
    9776:	08 95       	ret

00009778 <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    9778:	cf 93       	push	r28
    977a:	df 93       	push	r29
    977c:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    977e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    9782:	60 e0       	ldi	r22, 0x00	; 0
    9784:	70 e0       	ldi	r23, 0x00	; 0
    9786:	ce 01       	movw	r24, r28
    9788:	0e 94 4d 4b 	call	0x969a	; 0x969a <wifiGetPB>
    978c:	91 e0       	ldi	r25, 0x01	; 1
    978e:	81 30       	cpi	r24, 0x01	; 1
    9790:	09 f0       	breq	.+2      	; 0x9794 <wifiRequestP+0x1c>
    9792:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9794:	89 2f       	mov	r24, r25
    9796:	df 91       	pop	r29
    9798:	cf 91       	pop	r28
    979a:	08 95       	ret

0000979c <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    979c:	cf 93       	push	r28
    979e:	df 93       	push	r29
    97a0:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    97a2:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    97a6:	60 e0       	ldi	r22, 0x00	; 0
    97a8:	70 e0       	ldi	r23, 0x00	; 0
    97aa:	ce 01       	movw	r24, r28
    97ac:	0e 94 4d 4b 	call	0x969a	; 0x969a <wifiGetPB>
    97b0:	91 e0       	ldi	r25, 0x01	; 1
    97b2:	81 30       	cpi	r24, 0x01	; 1
    97b4:	09 f0       	breq	.+2      	; 0x97b8 <wifiRequest+0x1c>
    97b6:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    97b8:	89 2f       	mov	r24, r25
    97ba:	df 91       	pop	r29
    97bc:	cf 91       	pop	r28
    97be:	08 95       	ret

000097c0 <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    97c0:	0f 93       	push	r16
    97c2:	1f 93       	push	r17
    97c4:	cf 93       	push	r28
    97c6:	df 93       	push	r29
    97c8:	00 d0       	rcall	.+0      	; 0x97ca <wifiRequestPT+0xa>
    97ca:	cd b7       	in	r28, 0x3d	; 61
    97cc:	de b7       	in	r29, 0x3e	; 62
    97ce:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    97d0:	49 83       	std	Y+1, r20	; 0x01
    97d2:	5a 83       	std	Y+2, r21	; 0x02
    97d4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    97d8:	49 81       	ldd	r20, Y+1	; 0x01
    97da:	5a 81       	ldd	r21, Y+2	; 0x02
    97dc:	60 e0       	ldi	r22, 0x00	; 0
    97de:	70 e0       	ldi	r23, 0x00	; 0
    97e0:	c8 01       	movw	r24, r16
    97e2:	0e 94 82 4b 	call	0x9704	; 0x9704 <wifiGetPBT>
    97e6:	91 e0       	ldi	r25, 0x01	; 1
    97e8:	81 30       	cpi	r24, 0x01	; 1
    97ea:	09 f0       	breq	.+2      	; 0x97ee <wifiRequestPT+0x2e>
    97ec:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    97ee:	89 2f       	mov	r24, r25
    97f0:	0f 90       	pop	r0
    97f2:	0f 90       	pop	r0
    97f4:	df 91       	pop	r29
    97f6:	cf 91       	pop	r28
    97f8:	1f 91       	pop	r17
    97fa:	0f 91       	pop	r16
    97fc:	08 95       	ret

000097fe <cleanupWifi>:

u8 cleanupWifi()
{
	u8 counter = 0;
	wifiSendP(PSTR("+++"));
    97fe:	85 e8       	ldi	r24, 0x85	; 133
    9800:	92 e0       	ldi	r25, 0x02	; 2
    9802:	0e 94 c4 4a 	call	0x9588	; 0x9588 <wifiSendP>
	WaitVsync(60);
    9806:	8c e3       	ldi	r24, 0x3C	; 60
    9808:	90 e0       	ldi	r25, 0x00	; 0
    980a:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
	wifiRequestPT(PSTR("AT+CIPMODE=0\r\n"),PSTR("OK\r\n"), 30);
    980e:	4e e1       	ldi	r20, 0x1E	; 30
    9810:	50 e0       	ldi	r21, 0x00	; 0
    9812:	60 e8       	ldi	r22, 0x80	; 128
    9814:	72 e0       	ldi	r23, 0x02	; 2
    9816:	81 e7       	ldi	r24, 0x71	; 113
    9818:	92 e0       	ldi	r25, 0x02	; 2
    981a:	0e 94 e0 4b 	call	0x97c0	; 0x97c0 <wifiRequestPT>
	wifiRequestPT(PSTR("AT+CIPCLOSE\r\n"),PSTR("OK\r\n"),  30);
    981e:	4e e1       	ldi	r20, 0x1E	; 30
    9820:	50 e0       	ldi	r21, 0x00	; 0
    9822:	6c e6       	ldi	r22, 0x6C	; 108
    9824:	72 e0       	ldi	r23, 0x02	; 2
    9826:	8e e5       	ldi	r24, 0x5E	; 94
    9828:	92 e0       	ldi	r25, 0x02	; 2
    982a:	0e 94 e0 4b 	call	0x97c0	; 0x97c0 <wifiRequestPT>
	InitUartRxBuffer();
    982e:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <InitUartRxBuffer>
	InitUartTxBuffer();
    9832:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <InitUartTxBuffer>
	return WIFI_OK;
}
    9836:	80 e0       	ldi	r24, 0x00	; 0
    9838:	08 95       	ret

0000983a <wifiHWReset>:
void wifiHWReset()
{
    //reset module
	
	// Set Direction of port D to output
	DDRD|=(1<<PD3);
    983a:	53 9a       	sbi	0x0a, 3	; 10
	
	// SET Pin PD3 low on port D and wait 3 seconds
    PORTD&=~(1<<PD3);
    983c:	5b 98       	cbi	0x0b, 3	; 11
	WaitVsync(180);
    983e:	84 eb       	ldi	r24, 0xB4	; 180
    9840:	90 e0       	ldi	r25, 0x00	; 0
    9842:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
	
	// SET Pin PD3 high on port D and wait 3 seconds
    PORTD|=(1<<PD3);
    9846:	5b 9a       	sbi	0x0b, 3	; 11
    9848:	08 95       	ret

0000984a <initWifi>:
    76800  22      1.3
    115200 15      3.0
*/

const u16 bauds[] PROGMEM = {185,123,92,61,46,30,22,15};
u8 initWifi(){
    984a:	1f 93       	push	r17
    984c:	cf 93       	push	r28
    984e:	df 93       	push	r29
    s8 i = 0;
    u8 result;
	wifiHWReset();
    9850:	0e 94 1d 4c 	call	0x983a	; 0x983a <wifiHWReset>
    //UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    9854:	86 e0       	ldi	r24, 0x06	; 6
    9856:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    985a:	88 e1       	ldi	r24, 0x18	; 24
    985c:	80 93 c1 00 	sts	0x00C1, r24
    9860:	c9 e8       	ldi	r28, 0x89	; 137
    9862:	d2 e0       	ldi	r29, 0x02	; 2
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i])));
    9864:	fe 01       	movw	r30, r28
    9866:	84 91       	lpm	r24, Z
    9868:	80 93 c4 00 	sts	0x00C4, r24
    986c:	31 96       	adiw	r30, 0x01	; 1
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i]))+1);
    986e:	e4 91       	lpm	r30, Z
    9870:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    9874:	81 e0       	ldi	r24, 0x01	; 1
    9876:	90 e0       	ldi	r25, 0x00	; 0
    9878:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    987c:	4e e1       	ldi	r20, 0x1E	; 30
    987e:	50 e0       	ldi	r21, 0x00	; 0
    9880:	69 e5       	ldi	r22, 0x59	; 89
    9882:	72 e0       	ldi	r23, 0x02	; 2
    9884:	84 e5       	ldi	r24, 0x54	; 84
    9886:	92 e0       	ldi	r25, 0x02	; 2
    9888:	0e 94 e0 4b 	call	0x97c0	; 0x97c0 <wifiRequestPT>
    988c:	18 2f       	mov	r17, r24
        i++;
    } while ((result != WIFI_OK) && (i < 8));
    988e:	88 23       	and	r24, r24
    9890:	31 f0       	breq	.+12     	; 0x989e <initWifi+0x54>
    9892:	22 96       	adiw	r28, 0x02	; 2
    9894:	f2 e0       	ldi	r31, 0x02	; 2
    9896:	c9 39       	cpi	r28, 0x99	; 153
    9898:	df 07       	cpc	r29, r31
    989a:	21 f7       	brne	.-56     	; 0x9864 <initWifi+0x1a>
    989c:	19 c0       	rjmp	.+50     	; 0x98d0 <initWifi+0x86>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=19200,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    989e:	48 e7       	ldi	r20, 0x78	; 120
    98a0:	50 e0       	ldi	r21, 0x00	; 0
    98a2:	6f e4       	ldi	r22, 0x4F	; 79
    98a4:	72 e0       	ldi	r23, 0x02	; 2
    98a6:	83 e3       	ldi	r24, 0x33	; 51
    98a8:	92 e0       	ldi	r25, 0x02	; 2
    98aa:	0e 94 e0 4b 	call	0x97c0	; 0x97c0 <wifiRequestPT>
    98ae:	18 2f       	mov	r17, r24
        if (result == WIFI_OK) {
    98b0:	81 11       	cpse	r24, r1
    98b2:	0e c0       	rjmp	.+28     	; 0x98d0 <initWifi+0x86>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[2])));
    98b4:	ed e8       	ldi	r30, 0x8D	; 141
    98b6:	f2 e0       	ldi	r31, 0x02	; 2
    98b8:	e4 91       	lpm	r30, Z
    98ba:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[2]))+1); 
    98be:	ee e8       	ldi	r30, 0x8E	; 142
    98c0:	f2 e0       	ldi	r31, 0x02	; 2
    98c2:	e4 91       	lpm	r30, Z
    98c4:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    98c8:	81 e0       	ldi	r24, 0x01	; 1
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
        }
    }
    return result;
}
    98d0:	81 2f       	mov	r24, r17
    98d2:	df 91       	pop	r29
    98d4:	cf 91       	pop	r28
    98d6:	1f 91       	pop	r17
    98d8:	08 95       	ret

000098da <sendNetMessage>:
u8 activateNet() {
	return initWifi();
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSendBinary((char *) msg, sizeof(*msg));
    98da:	6b e1       	ldi	r22, 0x1B	; 27
    98dc:	0c 94 00 4b 	jmp	0x9600	; 0x9600 <wifiSendBinary>

000098e0 <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable((char*)msg, sizeof(*msg));
    98e0:	6b e1       	ldi	r22, 0x1B	; 27
    98e2:	0c 94 22 4b 	jmp	0x9644	; 0x9644 <wifiGetIfAvailable>

000098e6 <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    98e6:	ef 92       	push	r14
    98e8:	ff 92       	push	r15
    98ea:	0f 93       	push	r16
    98ec:	1f 93       	push	r17
    98ee:	cf 93       	push	r28
    98f0:	df 93       	push	r29
    98f2:	cd b7       	in	r28, 0x3d	; 61
    98f4:	de b7       	in	r29, 0x3e	; 62
    98f6:	c0 54       	subi	r28, 0x40	; 64
    98f8:	d1 09       	sbc	r29, r1
    98fa:	0f b6       	in	r0, 0x3f	; 63
    98fc:	f8 94       	cli
    98fe:	de bf       	out	0x3e, r29	; 62
    9900:	0f be       	out	0x3f, r0	; 63
    9902:	cd bf       	out	0x3d, r28	; 61
    9904:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9906:	6e e2       	ldi	r22, 0x2E	; 46
    9908:	72 e0       	ldi	r23, 0x02	; 2
    990a:	8c e1       	ldi	r24, 0x1C	; 28
    990c:	92 e0       	ldi	r25, 0x02	; 2
    990e:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9912:	81 11       	cpse	r24, r1
    9914:	42 c0       	rjmp	.+132    	; 0x999a <hostNetGame+0xb4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9916:	67 e1       	ldi	r22, 0x17	; 23
    9918:	72 e0       	ldi	r23, 0x02	; 2
    991a:	8a ef       	ldi	r24, 0xFA	; 250
    991c:	91 e0       	ldi	r25, 0x01	; 1
    991e:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9922:	81 11       	cpse	r24, r1
    9924:	3a c0       	rjmp	.+116    	; 0x999a <hostNetGame+0xb4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    9926:	87 ee       	ldi	r24, 0xE7	; 231
    9928:	91 e0       	ldi	r25, 0x01	; 1
    992a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    992e:	ce 01       	movw	r24, r28
    9930:	01 96       	adiw	r24, 0x01	; 1
    9932:	7c 01       	movw	r14, r24
    9934:	bc 01       	movw	r22, r24
    9936:	82 ee       	ldi	r24, 0xE2	; 226
    9938:	91 e0       	ldi	r25, 0x01	; 1
    993a:	0e 94 4d 4b 	call	0x969a	; 0x969a <wifiGetPB>
    993e:	81 30       	cpi	r24, 0x01	; 1
    9940:	91 f0       	breq	.+36     	; 0x9966 <hostNetGame+0x80>
		ssid[0] = 'T';
    9942:	84 e5       	ldi	r24, 0x54	; 84
    9944:	f8 01       	movw	r30, r16
    9946:	80 83       	st	Z, r24
		ssid[1] = 'F';
    9948:	86 e4       	ldi	r24, 0x46	; 70
    994a:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    994c:	8c a5       	ldd	r24, Y+44	; 0x2c
    994e:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    9950:	8d a5       	ldd	r24, Y+45	; 0x2d
    9952:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9954:	8f a5       	ldd	r24, Y+47	; 0x2f
    9956:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    9958:	88 a9       	ldd	r24, Y+48	; 0x30
    995a:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    995c:	8a a9       	ldd	r24, Y+50	; 0x32
    995e:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    9960:	8b a9       	ldd	r24, Y+51	; 0x33
    9962:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    9964:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    9966:	c8 01       	movw	r24, r16
    9968:	0e 94 ab 70 	call	0xe156	; 0xe156 <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    996c:	9f 93       	push	r25
    996e:	8f 93       	push	r24
    9970:	8d e0       	ldi	r24, 0x0D	; 13
    9972:	91 e0       	ldi	r25, 0x01	; 1
    9974:	9f 93       	push	r25
    9976:	8f 93       	push	r24
    9978:	ff 92       	push	r15
    997a:	ef 92       	push	r14
    997c:	0e 94 b5 70 	call	0xe16a	; 0xe16a <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9980:	6d ed       	ldi	r22, 0xDD	; 221
    9982:	71 e0       	ldi	r23, 0x01	; 1
    9984:	c7 01       	movw	r24, r14
    9986:	0e 94 ce 4b 	call	0x979c	; 0x979c <wifiRequest>
    998a:	0f 90       	pop	r0
    998c:	0f 90       	pop	r0
    998e:	0f 90       	pop	r0
    9990:	0f 90       	pop	r0
    9992:	0f 90       	pop	r0
    9994:	0f 90       	pop	r0
    9996:	88 23       	and	r24, r24
    9998:	11 f0       	breq	.+4      	; 0x999e <hostNetGame+0xb8>
    999a:	91 e0       	ldi	r25, 0x01	; 1
    999c:	1a c0       	rjmp	.+52     	; 0x99d2 <hostNetGame+0xec>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    999e:	68 ed       	ldi	r22, 0xD8	; 216
    99a0:	71 e0       	ldi	r23, 0x01	; 1
    99a2:	8a ea       	ldi	r24, 0xAA	; 170
    99a4:	91 e0       	ldi	r25, 0x01	; 1
    99a6:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    99aa:	81 11       	cpse	r24, r1
    99ac:	f6 cf       	rjmp	.-20     	; 0x999a <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    99ae:	65 ea       	ldi	r22, 0xA5	; 165
    99b0:	71 e0       	ldi	r23, 0x01	; 1
    99b2:	86 e9       	ldi	r24, 0x96	; 150
    99b4:	91 e0       	ldi	r25, 0x01	; 1
    99b6:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    99ba:	81 11       	cpse	r24, r1
    99bc:	ee cf       	rjmp	.-36     	; 0x999a <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    99be:	6e e8       	ldi	r22, 0x8E	; 142
    99c0:	71 e0       	ldi	r23, 0x01	; 1
    99c2:	81 e8       	ldi	r24, 0x81	; 129
    99c4:	91 e0       	ldi	r25, 0x01	; 1
    99c6:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    99ca:	91 e0       	ldi	r25, 0x01	; 1
    99cc:	81 11       	cpse	r24, r1
    99ce:	01 c0       	rjmp	.+2      	; 0x99d2 <hostNetGame+0xec>
    99d0:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    99d2:	89 2f       	mov	r24, r25
    99d4:	c0 5c       	subi	r28, 0xC0	; 192
    99d6:	df 4f       	sbci	r29, 0xFF	; 255
    99d8:	0f b6       	in	r0, 0x3f	; 63
    99da:	f8 94       	cli
    99dc:	de bf       	out	0x3e, r29	; 62
    99de:	0f be       	out	0x3f, r0	; 63
    99e0:	cd bf       	out	0x3d, r28	; 61
    99e2:	df 91       	pop	r29
    99e4:	cf 91       	pop	r28
    99e6:	1f 91       	pop	r17
    99e8:	0f 91       	pop	r16
    99ea:	ff 90       	pop	r15
    99ec:	ef 90       	pop	r14
    99ee:	08 95       	ret

000099f0 <joinNetGame>:

u8 joinNetGame(char* ssid) {
    99f0:	0f 93       	push	r16
    99f2:	1f 93       	push	r17
    99f4:	cf 93       	push	r28
    99f6:	df 93       	push	r29
    99f8:	cd b7       	in	r28, 0x3d	; 61
    99fa:	de b7       	in	r29, 0x3e	; 62
    99fc:	a6 97       	sbiw	r28, 0x26	; 38
    99fe:	0f b6       	in	r0, 0x3f	; 63
    9a00:	f8 94       	cli
    9a02:	de bf       	out	0x3e, r29	; 62
    9a04:	0f be       	out	0x3f, r0	; 63
    9a06:	cd bf       	out	0x3d, r28	; 61
	char buf[38];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    9a08:	9f 93       	push	r25
    9a0a:	8f 93       	push	r24
    9a0c:	83 e3       	ldi	r24, 0x33	; 51
    9a0e:	91 e0       	ldi	r25, 0x01	; 1
    9a10:	9f 93       	push	r25
    9a12:	8f 93       	push	r24
    9a14:	8e 01       	movw	r16, r28
    9a16:	0f 5f       	subi	r16, 0xFF	; 255
    9a18:	1f 4f       	sbci	r17, 0xFF	; 255
    9a1a:	1f 93       	push	r17
    9a1c:	0f 93       	push	r16
    9a1e:	0e 94 b5 70 	call	0xe16a	; 0xe16a <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a22:	6c e7       	ldi	r22, 0x7C	; 124
    9a24:	71 e0       	ldi	r23, 0x01	; 1
    9a26:	8a e6       	ldi	r24, 0x6A	; 106
    9a28:	91 e0       	ldi	r25, 0x01	; 1
    9a2a:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9a2e:	0f 90       	pop	r0
    9a30:	0f 90       	pop	r0
    9a32:	0f 90       	pop	r0
    9a34:	0f 90       	pop	r0
    9a36:	0f 90       	pop	r0
    9a38:	0f 90       	pop	r0
    9a3a:	88 23       	and	r24, r24
    9a3c:	11 f0       	breq	.+4      	; 0x9a42 <joinNetGame+0x52>
    9a3e:	91 e0       	ldi	r25, 0x01	; 1
    9a40:	29 c0       	rjmp	.+82     	; 0x9a94 <joinNetGame+0xa4>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a42:	65 e6       	ldi	r22, 0x65	; 101
    9a44:	71 e0       	ldi	r23, 0x01	; 1
    9a46:	c8 01       	movw	r24, r16
    9a48:	0e 94 ce 4b 	call	0x979c	; 0x979c <wifiRequest>
    9a4c:	81 11       	cpse	r24, r1
    9a4e:	f7 cf       	rjmp	.-18     	; 0x9a3e <joinNetGame+0x4e>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a50:	60 e6       	ldi	r22, 0x60	; 96
    9a52:	71 e0       	ldi	r23, 0x01	; 1
    9a54:	82 e4       	ldi	r24, 0x42	; 66
    9a56:	91 e0       	ldi	r25, 0x01	; 1
    9a58:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9a5c:	81 11       	cpse	r24, r1
    9a5e:	ef cf       	rjmp	.-34     	; 0x9a3e <joinNetGame+0x4e>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a60:	6d e3       	ldi	r22, 0x3D	; 61
    9a62:	71 e0       	ldi	r23, 0x01	; 1
    9a64:	81 e1       	ldi	r24, 0x11	; 17
    9a66:	91 e0       	ldi	r25, 0x01	; 1
    9a68:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9a6c:	81 11       	cpse	r24, r1
    9a6e:	e7 cf       	rjmp	.-50     	; 0x9a3e <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a70:	6c e0       	ldi	r22, 0x0C	; 12
    9a72:	71 e0       	ldi	r23, 0x01	; 1
    9a74:	8d ef       	ldi	r24, 0xFD	; 253
    9a76:	90 e0       	ldi	r25, 0x00	; 0
    9a78:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9a7c:	81 11       	cpse	r24, r1
    9a7e:	df cf       	rjmp	.-66     	; 0x9a3e <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    9a80:	65 ef       	ldi	r22, 0xF5	; 245
    9a82:	70 e0       	ldi	r23, 0x00	; 0
    9a84:	88 ee       	ldi	r24, 0xE8	; 232
    9a86:	90 e0       	ldi	r25, 0x00	; 0
    9a88:	0e 94 bc 4b 	call	0x9778	; 0x9778 <wifiRequestP>
    9a8c:	91 e0       	ldi	r25, 0x01	; 1
    9a8e:	81 11       	cpse	r24, r1
    9a90:	01 c0       	rjmp	.+2      	; 0x9a94 <joinNetGame+0xa4>
    9a92:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    9a94:	89 2f       	mov	r24, r25
    9a96:	a6 96       	adiw	r28, 0x26	; 38
    9a98:	0f b6       	in	r0, 0x3f	; 63
    9a9a:	f8 94       	cli
    9a9c:	de bf       	out	0x3e, r29	; 62
    9a9e:	0f be       	out	0x3f, r0	; 63
    9aa0:	cd bf       	out	0x3d, r28	; 61
    9aa2:	df 91       	pop	r29
    9aa4:	cf 91       	pop	r28
    9aa6:	1f 91       	pop	r17
    9aa8:	0f 91       	pop	r16
    9aaa:	08 95       	ret

00009aac <init_scores>:
struct EepromBlockStruct scores;

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9aac:	2b e8       	ldi	r18, 0x8B	; 139
    9aae:	30 e0       	ldi	r19, 0x00	; 0
    9ab0:	fc 01       	movw	r30, r24
    9ab2:	21 93       	st	Z+, r18
    9ab4:	31 93       	st	Z+, r19
    9ab6:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9ab8:	4e e1       	ldi	r20, 0x1E	; 30
    9aba:	50 e0       	ldi	r21, 0x00	; 0
    9abc:	6e ef       	ldi	r22, 0xFE	; 254
    9abe:	72 e0       	ldi	r23, 0x02	; 2
    9ac0:	0c 94 97 70 	jmp	0xe12e	; 0xe12e <memcpy_P>

00009ac4 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9ac4:	2a e8       	ldi	r18, 0x8A	; 138
    9ac6:	30 e0       	ldi	r19, 0x00	; 0
    9ac8:	fc 01       	movw	r30, r24
    9aca:	21 93       	st	Z+, r18
    9acc:	31 93       	st	Z+, r19
    9ace:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9ad0:	4e e1       	ldi	r20, 0x1E	; 30
    9ad2:	50 e0       	ldi	r21, 0x00	; 0
    9ad4:	6c e1       	ldi	r22, 0x1C	; 28
    9ad6:	73 e0       	ldi	r23, 0x03	; 3
    9ad8:	0c 94 97 70 	jmp	0xe12e	; 0xe12e <memcpy_P>

00009adc <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9adc:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9ade:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9ae0:	16 86       	std	Z+14, r1	; 0x0e
    9ae2:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9ae4:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9ae6:	73 e0       	ldi	r23, 0x03	; 3
    9ae8:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9aea:	65 e0       	ldi	r22, 0x05	; 5
    9aec:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9aee:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9af0:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9af2:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9af4:	48 eb       	ldi	r20, 0xB8	; 184
    9af6:	5a e6       	ldi	r21, 0x6A	; 106
    9af8:	50 87       	std	Z+8, r21	; 0x08
    9afa:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9afc:	25 eb       	ldi	r18, 0xB5	; 181
    9afe:	3a e6       	ldi	r19, 0x6A	; 106
    9b00:	32 87       	std	Z+10, r19	; 0x0a
    9b02:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9b04:	82 eb       	ldi	r24, 0xB2	; 178
    9b06:	9a e6       	ldi	r25, 0x6A	; 106
    9b08:	94 87       	std	Z+12, r25	; 0x0c
    9b0a:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9b0c:	14 8e       	std	Z+28, r1	; 0x1c
    9b0e:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9b10:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9b12:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9b14:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9b16:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9b18:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9b1a:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9b1c:	56 8b       	std	Z+22, r21	; 0x16
    9b1e:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9b20:	30 8f       	std	Z+24, r19	; 0x18
    9b22:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9b24:	92 8f       	std	Z+26, r25	; 0x1a
    9b26:	81 8f       	std	Z+25, r24	; 0x19
    9b28:	08 95       	ret

00009b2a <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9b2a:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9b2c:	15 86       	std	Z+13, r1	; 0x0d
    9b2e:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9b30:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9b32:	83 e0       	ldi	r24, 0x03	; 3
    9b34:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9b36:	8e e1       	ldi	r24, 0x1E	; 30
    9b38:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9b3a:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9b3c:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9b3e:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9b40:	8e e8       	ldi	r24, 0x8E	; 142
    9b42:	9a e6       	ldi	r25, 0x6A	; 106
    9b44:	97 83       	std	Z+7, r25	; 0x07
    9b46:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9b48:	8b e8       	ldi	r24, 0x8B	; 139
    9b4a:	9a e6       	ldi	r25, 0x6A	; 106
    9b4c:	91 87       	std	Z+9, r25	; 0x09
    9b4e:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9b50:	88 e8       	ldi	r24, 0x88	; 136
    9b52:	9a e6       	ldi	r25, 0x6A	; 106
    9b54:	93 87       	std	Z+11, r25	; 0x0b
    9b56:	82 87       	std	Z+10, r24	; 0x0a
    9b58:	08 95       	ret

00009b5a <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9b5a:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9b5c:	15 86       	std	Z+13, r1	; 0x0d
    9b5e:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9b60:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9b62:	82 e0       	ldi	r24, 0x02	; 2
    9b64:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9b66:	8c e3       	ldi	r24, 0x3C	; 60
    9b68:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9b6a:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9b6c:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9b6e:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9b70:	8c e1       	ldi	r24, 0x1C	; 28
    9b72:	98 e6       	ldi	r25, 0x68	; 104
    9b74:	97 83       	std	Z+7, r25	; 0x07
    9b76:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9b78:	82 e5       	ldi	r24, 0x52	; 82
    9b7a:	99 e6       	ldi	r25, 0x69	; 105
    9b7c:	91 87       	std	Z+9, r25	; 0x09
    9b7e:	80 87       	std	Z+8, r24	; 0x08
    9b80:	08 95       	ret

00009b82 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9b82:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9b84:	80 ee       	ldi	r24, 0xE0	; 224
    9b86:	9e e2       	ldi	r25, 0x2E	; 46
    9b88:	92 83       	std	Z+2, r25	; 0x02
    9b8a:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9b8c:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9b8e:	13 82       	std	Z+3, r1	; 0x03
	s->active = 0;
    9b90:	13 86       	std	Z+11, r1	; 0x0b
	s->distance = 0;
    9b92:	15 86       	std	Z+13, r1	; 0x0d
    9b94:	14 86       	std	Z+12, r1	; 0x0c
	s->shot_type = shot_type;
    9b96:	60 87       	std	Z+8, r22	; 0x08
	s->rebounds = SHOT_REBOUNDS;
    9b98:	84 e0       	ldi	r24, 0x04	; 4
    9b9a:	82 87       	std	Z+10, r24	; 0x0a
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9b9c:	66 23       	and	r22, r22
    9b9e:	11 f0       	breq	.+4      	; 0x9ba4 <init_shot_state+0x22>
    9ba0:	85 e0       	ldi	r24, 0x05	; 5
    9ba2:	01 c0       	rjmp	.+2      	; 0x9ba6 <init_shot_state+0x24>
    9ba4:	81 e0       	ldi	r24, 0x01	; 1
    9ba6:	81 87       	std	Z+9, r24	; 0x09
	s->shared.x = OFF_SCREEN*100;
    9ba8:	80 ec       	ldi	r24, 0xC0	; 192
    9baa:	9d e5       	ldi	r25, 0x5D	; 93
    9bac:	95 83       	std	Z+5, r25	; 0x05
    9bae:	84 83       	std	Z+4, r24	; 0x04
	s->shared.y = 0;
    9bb0:	17 82       	std	Z+7, r1	; 0x07
    9bb2:	16 82       	std	Z+6, r1	; 0x06
    9bb4:	08 95       	ret

00009bb6 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9bb6:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9bb8:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    9bba:	82 e0       	ldi	r24, 0x02	; 2
    9bbc:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9bbe:	85 e0       	ldi	r24, 0x05	; 5
    9bc0:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    9bc2:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.looped = 0;
    9bc4:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.reversing = 0;
    9bc6:	13 8a       	std	Z+19, r1	; 0x13
	if (shot_type == BASIC_SHOT)
    9bc8:	61 11       	cpse	r22, r1
    9bca:	03 c0       	rjmp	.+6      	; 0x9bd2 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9bcc:	86 e2       	ldi	r24, 0x26	; 38
    9bce:	91 e3       	ldi	r25, 0x31	; 49
    9bd0:	13 c0       	rjmp	.+38     	; 0x9bf8 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9bd2:	61 30       	cpi	r22, 0x01	; 1
    9bd4:	79 f4       	brne	.+30     	; 0x9bf4 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9bd6:	83 e2       	ldi	r24, 0x23	; 35
    9bd8:	91 e3       	ldi	r25, 0x31	; 49
    9bda:	95 8b       	std	Z+21, r25	; 0x15
    9bdc:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9bde:	80 e2       	ldi	r24, 0x20	; 32
    9be0:	91 e3       	ldi	r25, 0x31	; 49
    9be2:	97 8b       	std	Z+23, r25	; 0x17
    9be4:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9be6:	8d e1       	ldi	r24, 0x1D	; 29
    9be8:	91 e3       	ldi	r25, 0x31	; 49
    9bea:	91 a3       	std	Z+33, r25	; 0x21
    9bec:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9bee:	8a e1       	ldi	r24, 0x1A	; 26
    9bf0:	91 e3       	ldi	r25, 0x31	; 49
    9bf2:	08 c0       	rjmp	.+16     	; 0x9c04 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9bf4:	8e e0       	ldi	r24, 0x0E	; 14
    9bf6:	91 e3       	ldi	r25, 0x31	; 49
    9bf8:	95 8b       	std	Z+21, r25	; 0x15
    9bfa:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9bfc:	97 8b       	std	Z+23, r25	; 0x17
    9bfe:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9c00:	91 a3       	std	Z+33, r25	; 0x21
    9c02:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9c04:	93 a3       	std	Z+35, r25	; 0x23
    9c06:	82 a3       	std	Z+34, r24	; 0x22
	}
	s->up_anim.current_anim = 0;
    9c08:	16 86       	std	Z+14, r1	; 0x0e
	s->right_anim.anim_count = 2;
    9c0a:	82 e0       	ldi	r24, 0x02	; 2
    9c0c:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9c0e:	85 e0       	ldi	r24, 0x05	; 5
    9c10:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    9c12:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.looped = 0;
    9c14:	16 8e       	std	Z+30, r1	; 0x1e
	s->right_anim.reversing = 0;
    9c16:	17 8e       	std	Z+31, r1	; 0x1f
    9c18:	08 95       	ret

00009c1a <init_turret>:
}

void init_turret(Turret* t, u16 x, u16 y)
{
    9c1a:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9c1c:	85 e0       	ldi	r24, 0x05	; 5
    9c1e:	80 87       	std	Z+8, r24	; 0x08
	t->shared.direction = D_LEFT;
    9c20:	83 e0       	ldi	r24, 0x03	; 3
    9c22:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9c24:	13 82       	std	Z+3, r1	; 0x03
	t->shared.speed = BOSS_TURRET_SPEED;
    9c26:	88 e2       	ldi	r24, 0x28	; 40
    9c28:	93 e2       	ldi	r25, 0x23	; 35
    9c2a:	92 83       	std	Z+2, r25	; 0x02
    9c2c:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9c2e:	75 83       	std	Z+5, r23	; 0x05
    9c30:	64 83       	std	Z+4, r22	; 0x04
	t->shared.y = y;
    9c32:	57 83       	std	Z+7, r21	; 0x07
    9c34:	46 83       	std	Z+6, r20	; 0x06
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9c36:	88 ea       	ldi	r24, 0xA8	; 168
    9c38:	91 e6       	ldi	r25, 0x61	; 97
    9c3a:	93 87       	std	Z+11, r25	; 0x0b
    9c3c:	82 87       	std	Z+10, r24	; 0x0a
		t->shot[i].shared.direction = D_DOWN;
    9c3e:	82 e0       	ldi	r24, 0x02	; 2
    9c40:	81 87       	std	Z+9, r24	; 0x09
		t->shot[i].shared.recoiled = 0;
    9c42:	14 86       	std	Z+12, r1	; 0x0c
		t->shot[i].shared.x = OFF_SCREEN*100;
    9c44:	20 ec       	ldi	r18, 0xC0	; 192
    9c46:	3d e5       	ldi	r19, 0x5D	; 93
    9c48:	36 87       	std	Z+14, r19	; 0x0e
    9c4a:	25 87       	std	Z+13, r18	; 0x0d
		t->shot[i].shared.y = 0;
    9c4c:	10 8a       	std	Z+16, r1	; 0x10
    9c4e:	17 86       	std	Z+15, r1	; 0x0f
		t->shot[i].active = 0;
    9c50:	14 8a       	std	Z+20, r1	; 0x14
		t->shot[i].distance = 10000;
    9c52:	20 e1       	ldi	r18, 0x10	; 16
    9c54:	37 e2       	ldi	r19, 0x27	; 39
    9c56:	36 8b       	std	Z+22, r19	; 0x16
    9c58:	25 8b       	std	Z+21, r18	; 0x15
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9c5a:	81 8b       	std	Z+17, r24	; 0x11
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9c5c:	84 e0       	ldi	r24, 0x04	; 4
    9c5e:	83 8b       	std	Z+19, r24	; 0x13
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9c60:	81 e0       	ldi	r24, 0x01	; 1
    9c62:	82 8b       	std	Z+18, r24	; 0x12
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9c64:	62 e0       	ldi	r22, 0x02	; 2
    9c66:	cf 01       	movw	r24, r30
    9c68:	09 96       	adiw	r24, 0x09	; 9
    9c6a:	0c 94 db 4d 	jmp	0x9bb6	; 0x9bb6 <set_shot_animations>

00009c6e <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9c6e:	0f 93       	push	r16
    9c70:	1f 93       	push	r17
    9c72:	cf 93       	push	r28
    9c74:	df 93       	push	r29
    9c76:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9c78:	88 e7       	ldi	r24, 0x78	; 120
    9c7a:	8b 87       	std	Y+11, r24	; 0x0b
	p->netMessage.score = 0;
    9c7c:	fe 01       	movw	r30, r28
    9c7e:	e0 59       	subi	r30, 0x90	; 144
    9c80:	ff 4f       	sbci	r31, 0xFF	; 255
    9c82:	10 82       	st	Z, r1
	p->netMessage.level_score = 0;
    9c84:	31 96       	adiw	r30, 0x01	; 1
    9c86:	10 82       	st	Z, r1
	p->netMessage.shared.direction = D_UP;
    9c88:	31 96       	adiw	r30, 0x01	; 1
    9c8a:	10 82       	st	Z, r1
	p->netMessage.shared.speed = 0;
    9c8c:	31 96       	adiw	r30, 0x01	; 1
    9c8e:	11 82       	std	Z+1, r1	; 0x01
    9c90:	10 82       	st	Z, r1
	p->netMessage.shared.recoiled = 0;
    9c92:	32 96       	adiw	r30, 0x02	; 2
    9c94:	10 82       	st	Z, r1
	p->old_level_score = 0;
    9c96:	1b 8a       	std	Y+19, r1	; 0x13
	p->max_speed = MAX_SPEED;
    9c98:	88 e8       	ldi	r24, 0x88	; 136
    9c9a:	93 e1       	ldi	r25, 0x13	; 19
    9c9c:	9d 87       	std	Y+13, r25	; 0x0d
    9c9e:	8c 87       	std	Y+12, r24	; 0x0c
	p->has_over_speed = false;
    9ca0:	1f 86       	std	Y+15, r1	; 0x0f
	p->has_rocket = false;
    9ca2:	1e 86       	std	Y+14, r1	; 0x0e
	p->flags = 0;
    9ca4:	1a 86       	std	Y+10, r1	; 0x0a

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9ca6:	bd 97       	sbiw	r30, 0x2d	; 45
    9ca8:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9caa:	31 96       	adiw	r30, 0x01	; 1
    9cac:	91 e0       	ldi	r25, 0x01	; 1
    9cae:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cb0:	31 96       	adiw	r30, 0x01	; 1
    9cb2:	85 e0       	ldi	r24, 0x05	; 5
    9cb4:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9cb6:	31 96       	adiw	r30, 0x01	; 1
    9cb8:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9cba:	31 96       	adiw	r30, 0x01	; 1
    9cbc:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9cbe:	31 96       	adiw	r30, 0x01	; 1
    9cc0:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9cc2:	31 96       	adiw	r30, 0x01	; 1
    9cc4:	71 83       	std	Z+1, r23	; 0x01
    9cc6:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9cc8:	36 96       	adiw	r30, 0x06	; 6
    9cca:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9ccc:	31 96       	adiw	r30, 0x01	; 1
    9cce:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cd0:	31 96       	adiw	r30, 0x01	; 1
    9cd2:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9cd4:	31 96       	adiw	r30, 0x01	; 1
    9cd6:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9cd8:	31 96       	adiw	r30, 0x01	; 1
    9cda:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9cdc:	31 96       	adiw	r30, 0x01	; 1
    9cde:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9ce0:	31 96       	adiw	r30, 0x01	; 1
    9ce2:	51 83       	std	Z+1, r21	; 0x01
    9ce4:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9ce6:	36 96       	adiw	r30, 0x06	; 6
    9ce8:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9cea:	31 96       	adiw	r30, 0x01	; 1
    9cec:	93 e0       	ldi	r25, 0x03	; 3
    9cee:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cf0:	31 96       	adiw	r30, 0x01	; 1
    9cf2:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9cf4:	31 96       	adiw	r30, 0x01	; 1
    9cf6:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9cf8:	31 96       	adiw	r30, 0x01	; 1
    9cfa:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9cfc:	31 96       	adiw	r30, 0x01	; 1
    9cfe:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9d00:	31 96       	adiw	r30, 0x01	; 1
    9d02:	85 e3       	ldi	r24, 0x35	; 53
    9d04:	91 e3       	ldi	r25, 0x31	; 49
    9d06:	91 83       	std	Z+1, r25	; 0x01
    9d08:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9d0a:	32 96       	adiw	r30, 0x02	; 2
    9d0c:	8f e2       	ldi	r24, 0x2F	; 47
    9d0e:	91 e3       	ldi	r25, 0x31	; 49
    9d10:	91 83       	std	Z+1, r25	; 0x01
    9d12:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9d14:	32 96       	adiw	r30, 0x02	; 2
    9d16:	89 e2       	ldi	r24, 0x29	; 41
    9d18:	91 e3       	ldi	r25, 0x31	; 49
    9d1a:	91 83       	std	Z+1, r25	; 0x01
    9d1c:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9d1e:	1c 82       	std	Y+4, r1	; 0x04
	p->old_active_shots = 0;
    9d20:	1d 82       	std	Y+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9d22:	8e 01       	movw	r16, r28
    9d24:	0e 5d       	subi	r16, 0xDE	; 222
    9d26:	1f 4f       	sbci	r17, 0xFF	; 255
    9d28:	60 e0       	ldi	r22, 0x00	; 0
    9d2a:	c8 01       	movw	r24, r16
    9d2c:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9d30:	60 e0       	ldi	r22, 0x00	; 0
    9d32:	c8 01       	movw	r24, r16
    9d34:	0e 94 db 4d 	call	0x9bb6	; 0x9bb6 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9d38:	18 8a       	std	Y+16, r1	; 0x10
	p->goal_direction = 0;
    9d3a:	1d 8a       	std	Y+21, r1	; 0x15
    9d3c:	1c 8a       	std	Y+20, r1	; 0x14
	p->goal = 0;
    9d3e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_reached = 0;
    9d40:	1b 8e       	std	Y+27, r1	; 0x1b
	p->old_x = 0;
    9d42:	1f 8e       	std	Y+31, r1	; 0x1f
    9d44:	1e 8e       	std	Y+30, r1	; 0x1e
	p->old_y = 0;
    9d46:	19 a2       	std	Y+33, r1	; 0x21
    9d48:	18 a2       	std	Y+32, r1	; 0x20
	p->deadlock_count_x = 0;
    9d4a:	1f 8a       	std	Y+23, r1	; 0x17
    9d4c:	1e 8a       	std	Y+22, r1	; 0x16
	p->deadlock_count_y = 0;
    9d4e:	19 8e       	std	Y+25, r1	; 0x19
    9d50:	18 8e       	std	Y+24, r1	; 0x18
}
    9d52:	df 91       	pop	r29
    9d54:	cf 91       	pop	r28
    9d56:	1f 91       	pop	r17
    9d58:	0f 91       	pop	r16
    9d5a:	08 95       	ret

00009d5c <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9d5c:	fc 01       	movw	r30, r24
    9d5e:	14 82       	std	Z+4, r1	; 0x04
	player->old_active_shots = 0;
    9d60:	15 82       	std	Z+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9d62:	60 e0       	ldi	r22, 0x00	; 0
    9d64:	82 96       	adiw	r24, 0x22	; 34
    9d66:	0c 94 c1 4d 	jmp	0x9b82	; 0x9b82 <init_shot_state>

00009d6a <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9d6a:	e6 e7       	ldi	r30, 0x76	; 118
    9d6c:	fb e0       	ldi	r31, 0x0B	; 11
    9d6e:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9d70:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9d72:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9d74:	14 86       	std	Z+12, r1	; 0x0c
    9d76:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9d78:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9d7a:	10 8a       	std	Z+16, r1	; 0x10
    9d7c:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9d7e:	12 8a       	std	Z+18, r1	; 0x12
    9d80:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9d82:	82 e0       	ldi	r24, 0x02	; 2
    9d84:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9d86:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9d88:	84 e1       	ldi	r24, 0x14	; 20
    9d8a:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9d8c:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9d8e:	12 86       	std	Z+10, r1	; 0x0a
    9d90:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9d92:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9d94:	16 86       	std	Z+14, r1	; 0x0e
    9d96:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9d98:	47 e4       	ldi	r20, 0x47	; 71
    9d9a:	51 e3       	ldi	r21, 0x31	; 49
    9d9c:	6d e4       	ldi	r22, 0x4D	; 77
    9d9e:	71 e3       	ldi	r23, 0x31	; 49
    9da0:	88 ea       	ldi	r24, 0xA8	; 168
    9da2:	9b e0       	ldi	r25, 0x0B	; 11
    9da4:	0e 94 37 4e 	call	0x9c6e	; 0x9c6e <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9da8:	4b e3       	ldi	r20, 0x3B	; 59
    9daa:	51 e3       	ldi	r21, 0x31	; 49
    9dac:	61 e4       	ldi	r22, 0x41	; 65
    9dae:	71 e3       	ldi	r23, 0x31	; 49
    9db0:	8e e1       	ldi	r24, 0x1E	; 30
    9db2:	9f e0       	ldi	r25, 0x0F	; 15
    9db4:	0c 94 37 4e 	jmp	0x9c6e	; 0x9c6e <init_player>

00009db8 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9db8:	cf 93       	push	r28
    9dba:	df 93       	push	r29
    9dbc:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9dbe:	1b 86       	std	Y+11, r1	; 0x0b
	player->netMessage.shared.x = player->spawn_x;
    9dc0:	fc 01       	movw	r30, r24
    9dc2:	ea 58       	subi	r30, 0x8A	; 138
    9dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    9dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    9dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    9dca:	91 83       	std	Z+1, r25	; 0x01
    9dcc:	80 83       	st	Z, r24
	player->netMessage.shared.y = player->spawn_y;
    9dce:	32 96       	adiw	r30, 0x02	; 2
    9dd0:	88 85       	ldd	r24, Y+8	; 0x08
    9dd2:	99 85       	ldd	r25, Y+9	; 0x09
    9dd4:	91 83       	std	Z+1, r25	; 0x01
    9dd6:	80 83       	st	Z, r24
	player->netMessage.shared.direction = D_UP;
    9dd8:	36 97       	sbiw	r30, 0x06	; 6
    9dda:	10 82       	st	Z, r1
	player->netMessage.shared.speed = 0;
    9ddc:	31 96       	adiw	r30, 0x01	; 1
    9dde:	11 82       	std	Z+1, r1	; 0x01
    9de0:	10 82       	st	Z, r1
	player->netMessage.shared.recoiled = 0;
    9de2:	32 96       	adiw	r30, 0x02	; 2
    9de4:	10 82       	st	Z, r1
	player->tank_tactic = LBRandom(0, 2);
    9de6:	62 e0       	ldi	r22, 0x02	; 2
    9de8:	80 e0       	ldi	r24, 0x00	; 0
    9dea:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    9dee:	89 8b       	std	Y+17, r24	; 0x11
	player->shot_tactic = LBRandom(0, 2);
    9df0:	62 e0       	ldi	r22, 0x02	; 2
    9df2:	80 e0       	ldi	r24, 0x00	; 0
    9df4:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    9df8:	8a 8b       	std	Y+18, r24	; 0x12
	
}
    9dfa:	df 91       	pop	r29
    9dfc:	cf 91       	pop	r28
    9dfe:	08 95       	ret

00009e00 <waitForVSync>:

void waitForVSync()
{
    //ProcessSprites();
    WaitVsync(1);
    9e00:	81 e0       	ldi	r24, 0x01	; 1
    9e02:	90 e0       	ldi	r25, 0x00	; 0
    9e04:	0c 94 24 49 	jmp	0x9248	; 0x9248 <WaitVsync>

00009e08 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9e08:	cf 93       	push	r28
    9e0a:	df 93       	push	r29
    9e0c:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9e0e:	bc 01       	movw	r22, r24
    9e10:	88 81       	ld	r24, Y
    9e12:	99 81       	ldd	r25, Y+1	; 0x01
    9e14:	0e 94 13 3c 	call	0x7826	; 0x7826 <EepromReadBlock>
	if (status == 0x03)
    9e18:	83 30       	cpi	r24, 0x03	; 3
    9e1a:	29 f4       	brne	.+10     	; 0x9e26 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9e1c:	ce 01       	movw	r24, r28
	}
}
    9e1e:	df 91       	pop	r29
    9e20:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9e22:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <EepromWriteBlock>
	}
}
    9e26:	df 91       	pop	r29
    9e28:	cf 91       	pop	r28
    9e2a:	08 95       	ret

00009e2c <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9e2c:	61 e0       	ldi	r22, 0x01	; 1
    9e2e:	83 e0       	ldi	r24, 0x03	; 3
    9e30:	0e 94 55 49 	call	0x92aa	; 0x92aa <FadeOut>
	ClearVram();
    9e34:	0e 94 40 3a 	call	0x7480	; 0x7480 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9e38:	60 e0       	ldi	r22, 0x00	; 0
    9e3a:	83 e0       	ldi	r24, 0x03	; 3
    9e3c:	0c 94 49 49 	jmp	0x9292	; 0x9292 <FadeIn>

00009e40 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9e40:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9e42:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9e44:	40 e0       	ldi	r20, 0x00	; 0
    9e46:	69 e5       	ldi	r22, 0x59	; 89
    9e48:	71 e3       	ldi	r23, 0x31	; 49
    9e4a:	8c 2f       	mov	r24, r28
    9e4c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
    9e50:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9e52:	ca 30       	cpi	r28, 0x0A	; 10
    9e54:	b9 f7       	brne	.-18     	; 0x9e44 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9e56:	cf 91       	pop	r28
    9e58:	08 95       	ret

00009e5a <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9e5a:	8f 92       	push	r8
    9e5c:	9f 92       	push	r9
    9e5e:	bf 92       	push	r11
    9e60:	cf 92       	push	r12
    9e62:	df 92       	push	r13
    9e64:	ef 92       	push	r14
    9e66:	ff 92       	push	r15
    9e68:	0f 93       	push	r16
    9e6a:	1f 93       	push	r17
    9e6c:	cf 93       	push	r28
    9e6e:	df 93       	push	r29
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
    9e70:	90 91 18 0c 	lds	r25, 0x0C18
    9e74:	80 91 8e 0f 	lds	r24, 0x0F8E
    9e78:	98 17       	cp	r25, r24
    9e7a:	28 f4       	brcc	.+10     	; 0x9e86 <save_score+0x2c>
	{
		p_win = &player2;
		p_lose = &player1;
    9e7c:	e8 ea       	ldi	r30, 0xA8	; 168
    9e7e:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
    9e80:	ae e1       	ldi	r26, 0x1E	; 30
    9e82:	bf e0       	ldi	r27, 0x0F	; 15
    9e84:	04 c0       	rjmp	.+8      	; 0x9e8e <save_score+0x34>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9e86:	ee e1       	ldi	r30, 0x1E	; 30
    9e88:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9e8a:	a8 ea       	ldi	r26, 0xA8	; 168
    9e8c:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9e8e:	1c 91       	ld	r17, X
	save_score[1] = p_lose->handle_id;
    9e90:	70 81       	ld	r23, Z
	save_score[2] = p_win->netMessage.score;
    9e92:	a0 59       	subi	r26, 0x90	; 144
    9e94:	bf 4f       	sbci	r27, 0xFF	; 255
    9e96:	6c 91       	ld	r22, X
	save_score[3] = p_lose->netMessage.score;
    9e98:	e0 59       	subi	r30, 0x90	; 144
    9e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    9e9c:	50 81       	ld	r21, Z
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    9e9e:	41 e0       	ldi	r20, 0x01	; 1
    9ea0:	80 91 79 0b 	lds	r24, 0x0B79
    9ea4:	88 30       	cpi	r24, 0x08	; 8
    9ea6:	09 f0       	breq	.+2      	; 0x9eaa <save_score+0x50>
    9ea8:	40 e0       	ldi	r20, 0x00	; 0
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;
    9eaa:	d6 2e       	mov	r13, r22
    9eac:	d5 1a       	sub	r13, r21
    9eae:	28 e3       	ldi	r18, 0x38	; 56
    9eb0:	3b e0       	ldi	r19, 0x0B	; 11
    9eb2:	89 e3       	ldi	r24, 0x39	; 57
    9eb4:	9b e0       	ldi	r25, 0x0B	; 11
    9eb6:	ea e3       	ldi	r30, 0x3A	; 58
    9eb8:	fb e0       	ldi	r31, 0x0B	; 11
    9eba:	cb e3       	ldi	r28, 0x3B	; 59
    9ebc:	db e0       	ldi	r29, 0x0B	; 11
    9ebe:	ac e3       	ldi	r26, 0x3C	; 60
    9ec0:	8a 2e       	mov	r8, r26
    9ec2:	ab e0       	ldi	r26, 0x0B	; 11
    9ec4:	9a 2e       	mov	r9, r26
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    9ec6:	00 e0       	ldi	r16, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    9ec8:	00 23       	and	r16, r16
    9eca:	a1 f0       	breq	.+40     	; 0x9ef4 <save_score+0x9a>
		{
			memcpy(tmp_score, &scores.data[i], 5);
    9ecc:	d9 01       	movw	r26, r18
    9ece:	0c 91       	ld	r16, X
    9ed0:	dc 01       	movw	r26, r24
    9ed2:	fc 90       	ld	r15, X
    9ed4:	e0 80       	ld	r14, Z
    9ed6:	c8 80       	ld	r12, Y
    9ed8:	d4 01       	movw	r26, r8
    9eda:	bc 90       	ld	r11, X
			memcpy(&scores.data[i], save_score, 5);
    9edc:	d9 01       	movw	r26, r18
    9ede:	1c 93       	st	X, r17
    9ee0:	dc 01       	movw	r26, r24
    9ee2:	7c 93       	st	X, r23
    9ee4:	60 83       	st	Z, r22
    9ee6:	58 83       	st	Y, r21
    9ee8:	d4 01       	movw	r26, r8
    9eea:	4c 93       	st	X, r20
			memcpy(save_score, tmp_score, 5);
    9eec:	4b 2d       	mov	r20, r11
    9eee:	5c 2d       	mov	r21, r12
    9ef0:	b7 01       	movw	r22, r14
    9ef2:	18 c0       	rjmp	.+48     	; 0x9f24 <save_score+0xca>
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    9ef4:	f0 80       	ld	r15, Z
    9ef6:	e8 80       	ld	r14, Y
    9ef8:	cf 2c       	mov	r12, r15
    9efa:	ce 18       	sub	r12, r14
			if (save_delta > cur_delta)
    9efc:	cd 14       	cp	r12, r13
    9efe:	a0 f4       	brcc	.+40     	; 0x9f28 <save_score+0xce>
			{
				memcpy(tmp_score, &scores.data[i], 5);
    9f00:	d9 01       	movw	r26, r18
    9f02:	0c 91       	ld	r16, X
    9f04:	dc 01       	movw	r26, r24
    9f06:	cc 90       	ld	r12, X
    9f08:	d4 01       	movw	r26, r8
    9f0a:	bc 90       	ld	r11, X
				memcpy(&scores.data[i], save_score, 5);
    9f0c:	d9 01       	movw	r26, r18
    9f0e:	1c 93       	st	X, r17
    9f10:	dc 01       	movw	r26, r24
    9f12:	7c 93       	st	X, r23
    9f14:	60 83       	st	Z, r22
    9f16:	58 83       	st	Y, r21
    9f18:	d4 01       	movw	r26, r8
    9f1a:	4c 93       	st	X, r20
				memcpy(save_score, tmp_score, 5);
    9f1c:	4b 2d       	mov	r20, r11
    9f1e:	5e 2d       	mov	r21, r14
    9f20:	6f 2d       	mov	r22, r15
    9f22:	7c 2d       	mov	r23, r12
    9f24:	10 2f       	mov	r17, r16
				saved = 1;
    9f26:	01 e0       	ldi	r16, 0x01	; 1
    9f28:	2b 5f       	subi	r18, 0xFB	; 251
    9f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    9f2c:	05 96       	adiw	r24, 0x05	; 5
    9f2e:	35 96       	adiw	r30, 0x05	; 5
    9f30:	25 96       	adiw	r28, 0x05	; 5
    9f32:	b5 e0       	ldi	r27, 0x05	; 5
    9f34:	8b 0e       	add	r8, r27
    9f36:	91 1c       	adc	r9, r1
	save_score[2] = p_win->netMessage.score;
	save_score[3] = p_lose->netMessage.score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
    9f38:	ab e0       	ldi	r26, 0x0B	; 11
    9f3a:	e8 35       	cpi	r30, 0x58	; 88
    9f3c:	fa 07       	cpc	r31, r26
    9f3e:	21 f6       	brne	.-120    	; 0x9ec8 <save_score+0x6e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9f40:	86 e3       	ldi	r24, 0x36	; 54
    9f42:	9b e0       	ldi	r25, 0x0B	; 11
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9f44:	df 91       	pop	r29
    9f46:	cf 91       	pop	r28
    9f48:	1f 91       	pop	r17
    9f4a:	0f 91       	pop	r16
    9f4c:	ff 90       	pop	r15
    9f4e:	ef 90       	pop	r14
    9f50:	df 90       	pop	r13
    9f52:	cf 90       	pop	r12
    9f54:	bf 90       	pop	r11
    9f56:	9f 90       	pop	r9
    9f58:	8f 90       	pop	r8
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9f5a:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <EepromWriteBlock>

00009f5e <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9f5e:	db 01       	movw	r26, r22
	switch (shot->shared.direction)
    9f60:	2c 91       	ld	r18, X
    9f62:	21 30       	cpi	r18, 0x01	; 1
    9f64:	a9 f0       	breq	.+42     	; 0x9f90 <position_shot+0x32>
    9f66:	28 f0       	brcs	.+10     	; 0x9f72 <position_shot+0x14>
    9f68:	22 30       	cpi	r18, 0x02	; 2
    9f6a:	d1 f0       	breq	.+52     	; 0x9fa0 <position_shot+0x42>
    9f6c:	23 30       	cpi	r18, 0x03	; 3
    9f6e:	49 f1       	breq	.+82     	; 0x9fc2 <position_shot+0x64>
    9f70:	08 95       	ret
	{
		case D_UP:
			shot->shared.x = player->netMessage.shared.x + 400;
    9f72:	fc 01       	movw	r30, r24
    9f74:	ea 58       	subi	r30, 0x8A	; 138
    9f76:	ff 4f       	sbci	r31, 0xFF	; 255
    9f78:	20 81       	ld	r18, Z
    9f7a:	31 81       	ldd	r19, Z+1	; 0x01
    9f7c:	20 57       	subi	r18, 0x70	; 112
    9f7e:	3e 4f       	sbci	r19, 0xFE	; 254
    9f80:	15 96       	adiw	r26, 0x05	; 5
    9f82:	3c 93       	st	X, r19
    9f84:	2e 93       	st	-X, r18
    9f86:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y;
    9f88:	32 96       	adiw	r30, 0x02	; 2
    9f8a:	80 81       	ld	r24, Z
    9f8c:	91 81       	ldd	r25, Z+1	; 0x01
    9f8e:	27 c0       	rjmp	.+78     	; 0x9fde <position_shot+0x80>
			break;
		case D_RIGHT:
			shot->shared.x = player->netMessage.shared.x + 800;
    9f90:	fc 01       	movw	r30, r24
    9f92:	ea 58       	subi	r30, 0x8A	; 138
    9f94:	ff 4f       	sbci	r31, 0xFF	; 255
    9f96:	20 81       	ld	r18, Z
    9f98:	31 81       	ldd	r19, Z+1	; 0x01
    9f9a:	20 5e       	subi	r18, 0xE0	; 224
    9f9c:	3c 4f       	sbci	r19, 0xFC	; 252
    9f9e:	16 c0       	rjmp	.+44     	; 0x9fcc <position_shot+0x6e>
			shot->shared.y = player->netMessage.shared.y + 400;
			break;
		case D_DOWN:
			shot->shared.x = player->netMessage.shared.x + 400;
    9fa0:	fc 01       	movw	r30, r24
    9fa2:	ea 58       	subi	r30, 0x8A	; 138
    9fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    9fa6:	20 81       	ld	r18, Z
    9fa8:	31 81       	ldd	r19, Z+1	; 0x01
    9faa:	20 57       	subi	r18, 0x70	; 112
    9fac:	3e 4f       	sbci	r19, 0xFE	; 254
    9fae:	15 96       	adiw	r26, 0x05	; 5
    9fb0:	3c 93       	st	X, r19
    9fb2:	2e 93       	st	-X, r18
    9fb4:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 800;
    9fb6:	32 96       	adiw	r30, 0x02	; 2
    9fb8:	80 81       	ld	r24, Z
    9fba:	91 81       	ldd	r25, Z+1	; 0x01
    9fbc:	80 5e       	subi	r24, 0xE0	; 224
    9fbe:	9c 4f       	sbci	r25, 0xFC	; 252
    9fc0:	0e c0       	rjmp	.+28     	; 0x9fde <position_shot+0x80>
			break;
		case D_LEFT:
			shot->shared.x = player->netMessage.shared.x;
    9fc2:	fc 01       	movw	r30, r24
    9fc4:	ea 58       	subi	r30, 0x8A	; 138
    9fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    9fc8:	20 81       	ld	r18, Z
    9fca:	31 81       	ldd	r19, Z+1	; 0x01
    9fcc:	15 96       	adiw	r26, 0x05	; 5
    9fce:	3c 93       	st	X, r19
    9fd0:	2e 93       	st	-X, r18
    9fd2:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 400;
    9fd4:	32 96       	adiw	r30, 0x02	; 2
    9fd6:	80 81       	ld	r24, Z
    9fd8:	91 81       	ldd	r25, Z+1	; 0x01
    9fda:	80 57       	subi	r24, 0x70	; 112
    9fdc:	9e 4f       	sbci	r25, 0xFE	; 254
    9fde:	17 96       	adiw	r26, 0x07	; 7
    9fe0:	9c 93       	st	X, r25
    9fe2:	8e 93       	st	-X, r24
    9fe4:	16 97       	sbiw	r26, 0x06	; 6
    9fe6:	08 95       	ret

00009fe8 <print_level_score>:
			break;
	}
}

void print_level_score(Player* winner, Player* loser)
{
    9fe8:	0f 93       	push	r16
    9fea:	1f 93       	push	r17
    9fec:	cf 93       	push	r28
    9fee:	df 93       	push	r29
    9ff0:	8c 01       	movw	r16, r24
    9ff2:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9ff4:	ac 01       	movw	r20, r24
    9ff6:	4f 5f       	subi	r20, 0xFF	; 255
    9ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    9ffa:	23 e0       	ldi	r18, 0x03	; 3
    9ffc:	6e e0       	ldi	r22, 0x0E	; 14
    9ffe:	84 e0       	ldi	r24, 0x04	; 4
    a000:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a004:	47 e1       	ldi	r20, 0x17	; 23
    a006:	54 e0       	ldi	r21, 0x04	; 4
    a008:	6e e0       	ldi	r22, 0x0E	; 14
    a00a:	70 e0       	ldi	r23, 0x00	; 0
    a00c:	88 e0       	ldi	r24, 0x08	; 8
    a00e:	90 e0       	ldi	r25, 0x00	; 0
    a010:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a014:	ae 01       	movw	r20, r28
    a016:	4f 5f       	subi	r20, 0xFF	; 255
    a018:	5f 4f       	sbci	r21, 0xFF	; 255
    a01a:	23 e0       	ldi	r18, 0x03	; 3
    a01c:	6e e0       	ldi	r22, 0x0E	; 14
    a01e:	8d e0       	ldi	r24, 0x0D	; 13
    a020:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a024:	44 e1       	ldi	r20, 0x14	; 20
    a026:	54 e0       	ldi	r21, 0x04	; 4
    a028:	6e e0       	ldi	r22, 0x0E	; 14
    a02a:	70 e0       	ldi	r23, 0x00	; 0
    a02c:	81 e1       	ldi	r24, 0x11	; 17
    a02e:	90 e0       	ldi	r25, 0x00	; 0
    a030:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	PrintByte(22, 14, winner->netMessage.level_score ,true);
    a034:	f8 01       	movw	r30, r16
    a036:	ef 58       	subi	r30, 0x8F	; 143
    a038:	ff 4f       	sbci	r31, 0xFF	; 255
    a03a:	21 e0       	ldi	r18, 0x01	; 1
    a03c:	40 81       	ld	r20, Z
    a03e:	6e e0       	ldi	r22, 0x0E	; 14
    a040:	70 e0       	ldi	r23, 0x00	; 0
    a042:	86 e1       	ldi	r24, 0x16	; 22
    a044:	90 e0       	ldi	r25, 0x00	; 0
    a046:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	PrintChar(23, 14, '-');
    a04a:	4d e2       	ldi	r20, 0x2D	; 45
    a04c:	6e e0       	ldi	r22, 0x0E	; 14
    a04e:	70 e0       	ldi	r23, 0x00	; 0
    a050:	87 e1       	ldi	r24, 0x17	; 23
    a052:	90 e0       	ldi	r25, 0x00	; 0
    a054:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a058:	cf 58       	subi	r28, 0x8F	; 143
    a05a:	df 4f       	sbci	r29, 0xFF	; 255
    a05c:	21 e0       	ldi	r18, 0x01	; 1
    a05e:	48 81       	ld	r20, Y
    a060:	6e e0       	ldi	r22, 0x0E	; 14
    a062:	70 e0       	ldi	r23, 0x00	; 0
    a064:	8a e1       	ldi	r24, 0x1A	; 26
    a066:	90 e0       	ldi	r25, 0x00	; 0
}
    a068:	df 91       	pop	r29
    a06a:	cf 91       	pop	r28
    a06c:	1f 91       	pop	r17
    a06e:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->netMessage.level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a070:	0c 94 d3 48 	jmp	0x91a6	; 0x91a6 <PrintByte>

0000a074 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a074:	0f 93       	push	r16
    a076:	1f 93       	push	r17
    a078:	cf 93       	push	r28
    a07a:	df 93       	push	r29
    a07c:	8c 01       	movw	r16, r24
    a07e:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a080:	48 e0       	ldi	r20, 0x08	; 8
    a082:	54 e0       	ldi	r21, 0x04	; 4
    a084:	6c e0       	ldi	r22, 0x0C	; 12
    a086:	70 e0       	ldi	r23, 0x00	; 0
    a088:	89 e0       	ldi	r24, 0x09	; 9
    a08a:	90 e0       	ldi	r25, 0x00	; 0
    a08c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a090:	a8 01       	movw	r20, r16
    a092:	4f 5f       	subi	r20, 0xFF	; 255
    a094:	5f 4f       	sbci	r21, 0xFF	; 255
    a096:	23 e0       	ldi	r18, 0x03	; 3
    a098:	6e e0       	ldi	r22, 0x0E	; 14
    a09a:	84 e0       	ldi	r24, 0x04	; 4
    a09c:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a0a0:	47 e1       	ldi	r20, 0x17	; 23
    a0a2:	54 e0       	ldi	r21, 0x04	; 4
    a0a4:	6e e0       	ldi	r22, 0x0E	; 14
    a0a6:	70 e0       	ldi	r23, 0x00	; 0
    a0a8:	88 e0       	ldi	r24, 0x08	; 8
    a0aa:	90 e0       	ldi	r25, 0x00	; 0
    a0ac:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a0b0:	ae 01       	movw	r20, r28
    a0b2:	4f 5f       	subi	r20, 0xFF	; 255
    a0b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a0b6:	23 e0       	ldi	r18, 0x03	; 3
    a0b8:	6e e0       	ldi	r22, 0x0E	; 14
    a0ba:	8d e0       	ldi	r24, 0x0D	; 13
    a0bc:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a0c0:	44 e1       	ldi	r20, 0x14	; 20
    a0c2:	54 e0       	ldi	r21, 0x04	; 4
    a0c4:	6e e0       	ldi	r22, 0x0E	; 14
    a0c6:	70 e0       	ldi	r23, 0x00	; 0
    a0c8:	81 e1       	ldi	r24, 0x11	; 17
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    PrintByte(22, 14, winner->netMessage.score ,true);
    a0d0:	f8 01       	movw	r30, r16
    a0d2:	e0 59       	subi	r30, 0x90	; 144
    a0d4:	ff 4f       	sbci	r31, 0xFF	; 255
    a0d6:	21 e0       	ldi	r18, 0x01	; 1
    a0d8:	40 81       	ld	r20, Z
    a0da:	6e e0       	ldi	r22, 0x0E	; 14
    a0dc:	70 e0       	ldi	r23, 0x00	; 0
    a0de:	86 e1       	ldi	r24, 0x16	; 22
    a0e0:	90 e0       	ldi	r25, 0x00	; 0
    a0e2:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
    PrintChar(23, 14, '-');
    a0e6:	4d e2       	ldi	r20, 0x2D	; 45
    a0e8:	6e e0       	ldi	r22, 0x0E	; 14
    a0ea:	70 e0       	ldi	r23, 0x00	; 0
    a0ec:	87 e1       	ldi	r24, 0x17	; 23
    a0ee:	90 e0       	ldi	r25, 0x00	; 0
    a0f0:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    PrintByte(26, 14, loser->netMessage.score ,true);
    a0f4:	c0 59       	subi	r28, 0x90	; 144
    a0f6:	df 4f       	sbci	r29, 0xFF	; 255
    a0f8:	21 e0       	ldi	r18, 0x01	; 1
    a0fa:	48 81       	ld	r20, Y
    a0fc:	6e e0       	ldi	r22, 0x0E	; 14
    a0fe:	70 e0       	ldi	r23, 0x00	; 0
    a100:	8a e1       	ldi	r24, 0x1A	; 26
    a102:	90 e0       	ldi	r25, 0x00	; 0
    a104:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a108:	80 91 79 0b 	lds	r24, 0x0B79
    a10c:	88 30       	cpi	r24, 0x08	; 8
    a10e:	59 f4       	brne	.+22     	; 0xa126 <print_final_score+0xb2>
	{
		PrintChar(28, 14, '*');
    a110:	4a e2       	ldi	r20, 0x2A	; 42
    a112:	6e e0       	ldi	r22, 0x0E	; 14
    a114:	70 e0       	ldi	r23, 0x00	; 0
    a116:	8c e1       	ldi	r24, 0x1C	; 28
    a118:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a11a:	df 91       	pop	r29
    a11c:	cf 91       	pop	r28
    a11e:	1f 91       	pop	r17
    a120:	0f 91       	pop	r16
    PrintByte(22, 14, winner->netMessage.score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->netMessage.score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a122:	0c 94 21 49 	jmp	0x9242	; 0x9242 <PrintChar>
	}
}
    a126:	df 91       	pop	r29
    a128:	cf 91       	pop	r28
    a12a:	1f 91       	pop	r17
    a12c:	0f 91       	pop	r16
    a12e:	08 95       	ret

0000a130 <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a130:	fc 01       	movw	r30, r24
    a132:	20 81       	ld	r18, Z
    a134:	31 81       	ldd	r19, Z+1	; 0x01
    a136:	21 70       	andi	r18, 0x01	; 1
    a138:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a13a:	81 e0       	ldi	r24, 0x01	; 1
    a13c:	23 2b       	or	r18, r19
    a13e:	09 f4       	brne	.+2      	; 0xa142 <shoot_pressed+0x12>
    a140:	80 e0       	ldi	r24, 0x00	; 0
}
    a142:	08 95       	ret

0000a144 <get_delta>:

u16 get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a144:	fc 01       	movw	r30, r24
    a146:	22 8d       	ldd	r18, Z+26	; 0x1a
    a148:	fb 01       	movw	r30, r22
    a14a:	81 81       	ldd	r24, Z+1	; 0x01
    a14c:	92 81       	ldd	r25, Z+2	; 0x02
    a14e:	22 23       	and	r18, r18
    a150:	29 f0       	breq	.+10     	; 0xa15c <get_delta+0x18>
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
    a152:	9c 01       	movw	r18, r24
    a154:	36 95       	lsr	r19
    a156:	27 95       	ror	r18
    a158:	82 0f       	add	r24, r18
    a15a:	93 1f       	adc	r25, r19
    a15c:	6c e3       	ldi	r22, 0x3C	; 60
    a15e:	70 e0       	ldi	r23, 0x00	; 0
    a160:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
}
    a164:	cb 01       	movw	r24, r22
    a166:	08 95       	ret

0000a168 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a168:	cf 93       	push	r28
    a16a:	df 93       	push	r29
    a16c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a16e:	ac 01       	movw	r20, r24
    a170:	4f 5f       	subi	r20, 0xFF	; 255
    a172:	5f 4f       	sbci	r21, 0xFF	; 255
    a174:	23 e0       	ldi	r18, 0x03	; 3
    a176:	60 e0       	ldi	r22, 0x00	; 0
    a178:	8a e0       	ldi	r24, 0x0A	; 10
    a17a:	8c 0f       	add	r24, r28
    a17c:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a180:	d0 e0       	ldi	r29, 0x00	; 0
    a182:	41 e0       	ldi	r20, 0x01	; 1
    a184:	54 e0       	ldi	r21, 0x04	; 4
    a186:	60 e0       	ldi	r22, 0x00	; 0
    a188:	70 e0       	ldi	r23, 0x00	; 0
    a18a:	ce 01       	movw	r24, r28
    a18c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(x, 1, (char*) strTotal);
    a190:	4a ef       	ldi	r20, 0xFA	; 250
    a192:	53 e0       	ldi	r21, 0x03	; 3
    a194:	61 e0       	ldi	r22, 0x01	; 1
    a196:	70 e0       	ldi	r23, 0x00	; 0
    a198:	ce 01       	movw	r24, r28
	
}
    a19a:	df 91       	pop	r29
    a19c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a19e:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000a1a2 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a1a2:	0f 93       	push	r16
    a1a4:	1f 93       	push	r17
    a1a6:	cf 93       	push	r28
    a1a8:	df 93       	push	r29
    a1aa:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->netMessage.level_score, false);
    a1ac:	c6 2f       	mov	r28, r22
    a1ae:	d0 e0       	ldi	r29, 0x00	; 0
    a1b0:	28 96       	adiw	r28, 0x08	; 8
    a1b2:	fc 01       	movw	r30, r24
    a1b4:	ef 58       	subi	r30, 0x8F	; 143
    a1b6:	ff 4f       	sbci	r31, 0xFF	; 255
    a1b8:	20 e0       	ldi	r18, 0x00	; 0
    a1ba:	40 81       	ld	r20, Z
    a1bc:	60 e0       	ldi	r22, 0x00	; 0
    a1be:	70 e0       	ldi	r23, 0x00	; 0
    a1c0:	ce 01       	movw	r24, r28
    a1c2:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	PrintByte(x+8, 1, player->netMessage.score, false);
    a1c6:	f8 01       	movw	r30, r16
    a1c8:	e0 59       	subi	r30, 0x90	; 144
    a1ca:	ff 4f       	sbci	r31, 0xFF	; 255
    a1cc:	20 e0       	ldi	r18, 0x00	; 0
    a1ce:	40 81       	ld	r20, Z
    a1d0:	61 e0       	ldi	r22, 0x01	; 1
    a1d2:	70 e0       	ldi	r23, 0x00	; 0
    a1d4:	ce 01       	movw	r24, r28
}
    a1d6:	df 91       	pop	r29
    a1d8:	cf 91       	pop	r28
    a1da:	1f 91       	pop	r17
    a1dc:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->netMessage.level_score, false);
	PrintByte(x+8, 1, player->netMessage.score, false);
    a1de:	0c 94 d3 48 	jmp	0x91a6	; 0x91a6 <PrintByte>

0000a1e2 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a1e2:	0f 93       	push	r16
    a1e4:	1f 93       	push	r17
    a1e6:	cf 93       	push	r28
    a1e8:	df 93       	push	r29
    a1ea:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->netMessage.shared.x / 100, player->netMessage.shared.y / 100, 2, 2);
    a1ec:	fc 01       	movw	r30, r24
    a1ee:	e8 58       	subi	r30, 0x88	; 136
    a1f0:	ff 4f       	sbci	r31, 0xFF	; 255
    a1f2:	80 81       	ld	r24, Z
    a1f4:	91 81       	ldd	r25, Z+1	; 0x01
    a1f6:	c4 e6       	ldi	r28, 0x64	; 100
    a1f8:	d0 e0       	ldi	r29, 0x00	; 0
    a1fa:	be 01       	movw	r22, r28
    a1fc:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a200:	46 2f       	mov	r20, r22
    a202:	32 97       	sbiw	r30, 0x02	; 2
    a204:	80 81       	ld	r24, Z
    a206:	91 81       	ldd	r25, Z+1	; 0x01
    a208:	be 01       	movw	r22, r28
    a20a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a20e:	02 e0       	ldi	r16, 0x02	; 2
    a210:	22 e0       	ldi	r18, 0x02	; 2
    a212:	81 2f       	mov	r24, r17
    a214:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    a218:	df 91       	pop	r29
    a21a:	cf 91       	pop	r28
    a21c:	1f 91       	pop	r17
    a21e:	0f 91       	pop	r16
    a220:	08 95       	ret

0000a222 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a222:	0f 93       	push	r16
    a224:	cf 93       	push	r28
    a226:	df 93       	push	r29
    a228:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a22a:	84 81       	ldd	r24, Z+4	; 0x04
    a22c:	88 23       	and	r24, r24
    a22e:	99 f0       	breq	.+38     	; 0xa256 <render_shot+0x34>
    a230:	36 2f       	mov	r19, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x / 100, player->shot[i].shared.y / 100, 1, 1);
    a232:	80 a5       	ldd	r24, Z+40	; 0x28
    a234:	91 a5       	ldd	r25, Z+41	; 0x29
    a236:	c4 e6       	ldi	r28, 0x64	; 100
    a238:	d0 e0       	ldi	r29, 0x00	; 0
    a23a:	be 01       	movw	r22, r28
    a23c:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a240:	46 2f       	mov	r20, r22
    a242:	86 a1       	ldd	r24, Z+38	; 0x26
    a244:	97 a1       	ldd	r25, Z+39	; 0x27
    a246:	be 01       	movw	r22, r28
    a248:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a24c:	01 e0       	ldi	r16, 0x01	; 1
    a24e:	21 e0       	ldi	r18, 0x01	; 1
    a250:	83 2f       	mov	r24, r19
    a252:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
			sprite_index++;
		}
	}
}
    a256:	df 91       	pop	r29
    a258:	cf 91       	pop	r28
    a25a:	0f 91       	pop	r16
    a25c:	08 95       	ret

0000a25e <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a25e:	ef 92       	push	r14
    a260:	ff 92       	push	r15
    a262:	0f 93       	push	r16
    a264:	1f 93       	push	r17
    a266:	cf 93       	push	r28
    a268:	df 93       	push	r29
    a26a:	ec 01       	movw	r28, r24
    a26c:	25 96       	adiw	r28, 0x05	; 5
    a26e:	8c 01       	movw	r16, r24
    a270:	0f 5d       	subi	r16, 0xDF	; 223
    a272:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a274:	8e e1       	ldi	r24, 0x1E	; 30
    a276:	e8 2e       	mov	r14, r24
    a278:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a27a:	88 85       	ldd	r24, Y+8	; 0x08
    a27c:	99 85       	ldd	r25, Y+9	; 0x09
    a27e:	89 2b       	or	r24, r25
    a280:	c1 f0       	breq	.+48     	; 0xa2b2 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a282:	ce 01       	movw	r24, r28
    a284:	04 97       	sbiw	r24, 0x04	; 4
    a286:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a28a:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a28c:	48 81       	ld	r20, Y
    a28e:	88 85       	ldd	r24, Y+8	; 0x08
    a290:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a292:	b7 01       	movw	r22, r14
    a294:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    a298:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a29a:	44 23       	and	r20, r20
    a29c:	39 f0       	breq	.+14     	; 0xa2ac <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a29e:	40 e0       	ldi	r20, 0x00	; 0
    a2a0:	50 e0       	ldi	r21, 0x00	; 0
    a2a2:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
				ta->anims[i].tile_index = 0;
    a2a6:	19 86       	std	Y+9, r1	; 0x09
    a2a8:	18 86       	std	Y+8, r1	; 0x08
    a2aa:	03 c0       	rjmp	.+6      	; 0xa2b2 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a2ac:	a9 01       	movw	r20, r18
    a2ae:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    a2b2:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a2b4:	c0 17       	cp	r28, r16
    a2b6:	d1 07       	cpc	r29, r17
    a2b8:	01 f7       	brne	.-64     	; 0xa27a <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a2ba:	df 91       	pop	r29
    a2bc:	cf 91       	pop	r28
    a2be:	1f 91       	pop	r17
    a2c0:	0f 91       	pop	r16
    a2c2:	ff 90       	pop	r15
    a2c4:	ef 90       	pop	r14
    a2c6:	08 95       	ret

0000a2c8 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a2c8:	cf 93       	push	r28
    a2ca:	df 93       	push	r29
    a2cc:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a2ce:	0e 94 b3 49 	call	0x9366	; 0x9366 <LBGetNextFrameReverse>
    a2d2:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a2d4:	4c 81       	ldd	r20, Y+4	; 0x04
    a2d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    a2d8:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a2da:	6e e1       	ldi	r22, 0x1E	; 30
    a2dc:	70 e0       	ldi	r23, 0x00	; 0
    a2de:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    a2e2:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a2e4:	44 23       	and	r20, r20
    a2e6:	19 f0       	breq	.+6      	; 0xa2ee <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a2e8:	43 ea       	ldi	r20, 0xA3	; 163
    a2ea:	5a e6       	ldi	r21, 0x6A	; 106
    a2ec:	01 c0       	rjmp	.+2      	; 0xa2f0 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a2ee:	a9 01       	movw	r20, r18
    a2f0:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	}
	return ta->anim.looped;
}
    a2f4:	8c 81       	ldd	r24, Y+4	; 0x04
    a2f6:	df 91       	pop	r29
    a2f8:	cf 91       	pop	r28
    a2fa:	08 95       	ret

0000a2fc <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a2fc:	1f 93       	push	r17
    a2fe:	cf 93       	push	r28
    a300:	df 93       	push	r29
    a302:	ec 01       	movw	r28, r24
    a304:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    a306:	8a 85       	ldd	r24, Y+10	; 0x0a
    a308:	80 ff       	sbrs	r24, 0
    a30a:	17 c0       	rjmp	.+46     	; 0xa33a <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a30c:	ce 01       	movw	r24, r28
    a30e:	80 5a       	subi	r24, 0xA0	; 160
    a310:	9f 4f       	sbci	r25, 0xFF	; 255
    a312:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a316:	fe 01       	movw	r30, r28
    a318:	ec 59       	subi	r30, 0x9C	; 156
    a31a:	ff 4f       	sbci	r31, 0xFF	; 255
    a31c:	20 81       	ld	r18, Z
    a31e:	22 23       	and	r18, r18
    a320:	09 f4       	brne	.+2      	; 0xa324 <tank_map+0x28>
    a322:	4d c0       	rjmp	.+154    	; 0xa3be <tank_map+0xc2>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a324:	8a 85       	ldd	r24, Y+10	; 0x0a
    a326:	91 e0       	ldi	r25, 0x01	; 1
    a328:	98 27       	eor	r25, r24
    a32a:	9a 87       	std	Y+10, r25	; 0x0a
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a32c:	ce 01       	movw	r24, r28
    a32e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a332:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a334:	83 e5       	ldi	r24, 0x53	; 83
    a336:	91 e3       	ldi	r25, 0x31	; 49
    a338:	43 c0       	rjmp	.+134    	; 0xa3c0 <tank_map+0xc4>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a33a:	9b 85       	ldd	r25, Y+11	; 0x0b
    a33c:	98 37       	cpi	r25, 0x78	; 120
    a33e:	11 f0       	breq	.+4      	; 0xa344 <tank_map+0x48>
		{
			player->grace_frame++;
    a340:	9f 5f       	subi	r25, 0xFF	; 255
    a342:	9b 87       	std	Y+11, r25	; 0x0b
		}
		switch (player->netMessage.shared.direction)
    a344:	fe 01       	movw	r30, r28
    a346:	ee 58       	subi	r30, 0x8E	; 142
    a348:	ff 4f       	sbci	r31, 0xFF	; 255
    a34a:	90 81       	ld	r25, Z
    a34c:	91 30       	cpi	r25, 0x01	; 1
    a34e:	61 f0       	breq	.+24     	; 0xa368 <tank_map+0x6c>
    a350:	b0 f0       	brcs	.+44     	; 0xa37e <tank_map+0x82>
    a352:	92 30       	cpi	r25, 0x02	; 2
    a354:	69 f0       	breq	.+26     	; 0xa370 <tank_map+0x74>
    a356:	93 30       	cpi	r25, 0x03	; 3
    a358:	91 f4       	brne	.+36     	; 0xa37e <tank_map+0x82>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a35a:	ce 01       	movw	r24, r28
    a35c:	8c 5a       	subi	r24, 0xAC	; 172
    a35e:	9f 4f       	sbci	r25, 0xFF	; 255
    a360:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a364:	41 e0       	ldi	r20, 0x01	; 1
    a366:	11 c0       	rjmp	.+34     	; 0xa38a <tank_map+0x8e>
			player->grace_frame++;
		}
		switch (player->netMessage.shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a368:	ce 01       	movw	r24, r28
    a36a:	8c 5a       	subi	r24, 0xAC	; 172
    a36c:	9f 4f       	sbci	r25, 0xFF	; 255
    a36e:	0a c0       	rjmp	.+20     	; 0xa384 <tank_map+0x88>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a370:	ce 01       	movw	r24, r28
    a372:	88 5b       	subi	r24, 0xB8	; 184
    a374:	9f 4f       	sbci	r25, 0xFF	; 255
    a376:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a37a:	42 e0       	ldi	r20, 0x02	; 2
    a37c:	06 c0       	rjmp	.+12     	; 0xa38a <tank_map+0x8e>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a37e:	ce 01       	movw	r24, r28
    a380:	88 5b       	subi	r24, 0xB8	; 184
    a382:	9f 4f       	sbci	r25, 0xFF	; 255
    a384:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a388:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a38a:	2b 85       	ldd	r18, Y+11	; 0x0b
    a38c:	28 37       	cpi	r18, 0x78	; 120
    a38e:	31 f0       	breq	.+12     	; 0xa39c <tank_map+0xa0>
    a390:	20 91 7d 0b 	lds	r18, 0x0B7D
    a394:	22 23       	and	r18, r18
    a396:	11 f0       	breq	.+4      	; 0xa39c <tank_map+0xa0>
		{
			t_map = (char*) map_tank_blank;
    a398:	83 e5       	ldi	r24, 0x53	; 83
    a39a:	91 e3       	ldi	r25, 0x31	; 49
		}
		game.toggle_counter--;
    a39c:	20 91 7c 0b 	lds	r18, 0x0B7C
    a3a0:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a3a2:	19 f0       	breq	.+6      	; 0xa3aa <tank_map+0xae>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a3a4:	20 93 7c 0b 	sts	0x0B7C, r18
    a3a8:	0b c0       	rjmp	.+22     	; 0xa3c0 <tank_map+0xc4>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a3aa:	24 e1       	ldi	r18, 0x14	; 20
    a3ac:	20 93 7c 0b 	sts	0x0B7C, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a3b0:	30 91 7d 0b 	lds	r19, 0x0B7D
    a3b4:	21 e0       	ldi	r18, 0x01	; 1
    a3b6:	23 27       	eor	r18, r19
    a3b8:	20 93 7d 0b 	sts	0x0B7D, r18
    a3bc:	01 c0       	rjmp	.+2      	; 0xa3c0 <tank_map+0xc4>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a3be:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a3c0:	bc 01       	movw	r22, r24
    a3c2:	81 2f       	mov	r24, r17
    a3c4:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a3c8:	84 e0       	ldi	r24, 0x04	; 4
    a3ca:	81 0f       	add	r24, r17
    a3cc:	df 91       	pop	r29
    a3ce:	cf 91       	pop	r28
    a3d0:	1f 91       	pop	r17
    a3d2:	08 95       	ret

0000a3d4 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a3d4:	cf 93       	push	r28
    a3d6:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a3d8:	fc 01       	movw	r30, r24
    a3da:	25 a5       	ldd	r18, Z+45	; 0x2d
    a3dc:	22 23       	and	r18, r18
    a3de:	c9 f0       	breq	.+50     	; 0xa412 <shot_map+0x3e>
		{
			switch (shot->shared.direction)
    a3e0:	22 a1       	ldd	r18, Z+34	; 0x22
    a3e2:	21 30       	cpi	r18, 0x01	; 1
    a3e4:	51 f0       	breq	.+20     	; 0xa3fa <shot_map+0x26>
    a3e6:	98 f0       	brcs	.+38     	; 0xa40e <shot_map+0x3a>
    a3e8:	22 30       	cpi	r18, 0x02	; 2
    a3ea:	61 f0       	breq	.+24     	; 0xa404 <shot_map+0x30>
    a3ec:	23 30       	cpi	r18, 0x03	; 3
    a3ee:	79 f4       	brne	.+30     	; 0xa40e <shot_map+0x3a>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a3f0:	cc 96       	adiw	r24, 0x3c	; 60
    a3f2:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a3f6:	41 e0       	ldi	r20, 0x01	; 1
    a3f8:	0f c0       	rjmp	.+30     	; 0xa418 <shot_map+0x44>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a3fa:	cc 96       	adiw	r24, 0x3c	; 60
    a3fc:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a400:	40 e0       	ldi	r20, 0x00	; 0
    a402:	0a c0       	rjmp	.+20     	; 0xa418 <shot_map+0x44>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a404:	c0 96       	adiw	r24, 0x30	; 48
    a406:	0e 94 8e 49 	call	0x931c	; 0x931c <LBGetNextFrame>
    a40a:	42 e0       	ldi	r20, 0x02	; 2
    a40c:	05 c0       	rjmp	.+10     	; 0xa418 <shot_map+0x44>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a40e:	c0 96       	adiw	r24, 0x30	; 48
    a410:	f5 cf       	rjmp	.-22     	; 0xa3fc <shot_map+0x28>
    a412:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a414:	83 e5       	ldi	r24, 0x53	; 83
    a416:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a418:	bc 01       	movw	r22, r24
    a41a:	8c 2f       	mov	r24, r28
    a41c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a420:	81 e0       	ldi	r24, 0x01	; 1
    a422:	8c 0f       	add	r24, r28
    a424:	cf 91       	pop	r28
    a426:	08 95       	ret

0000a428 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a428:	fc 01       	movw	r30, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a42a:	80 81       	ld	r24, Z
    a42c:	81 11       	cpse	r24, r1
    a42e:	11 c0       	rjmp	.+34     	; 0xa452 <recoil_sprite+0x2a>
	{
		tile = (sprite->y / 800) + 1;
    a430:	86 81       	ldd	r24, Z+6	; 0x06
    a432:	97 81       	ldd	r25, Z+7	; 0x07
    a434:	20 e2       	ldi	r18, 0x20	; 32
    a436:	33 e0       	ldi	r19, 0x03	; 3
    a438:	b9 01       	movw	r22, r18
    a43a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a43e:	81 e0       	ldi	r24, 0x01	; 1
    a440:	86 0f       	add	r24, r22
		sprite->y = tile * 800;
    a442:	82 9f       	mul	r24, r18
    a444:	a0 01       	movw	r20, r0
    a446:	83 9f       	mul	r24, r19
    a448:	50 0d       	add	r21, r0
    a44a:	11 24       	eor	r1, r1
    a44c:	57 83       	std	Z+7, r21	; 0x07
    a44e:	46 83       	std	Z+6, r20	; 0x06
    a450:	36 c0       	rjmp	.+108    	; 0xa4be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_RIGHT)
    a452:	81 30       	cpi	r24, 0x01	; 1
    a454:	89 f4       	brne	.+34     	; 0xa478 <recoil_sprite+0x50>
	{
		tile = sprite->x / 800;
    a456:	84 81       	ldd	r24, Z+4	; 0x04
    a458:	95 81       	ldd	r25, Z+5	; 0x05
    a45a:	20 e2       	ldi	r18, 0x20	; 32
    a45c:	33 e0       	ldi	r19, 0x03	; 3
    a45e:	b9 01       	movw	r22, r18
    a460:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
		sprite->x = tile * 800;
    a464:	62 9f       	mul	r22, r18
    a466:	c0 01       	movw	r24, r0
    a468:	63 9f       	mul	r22, r19
    a46a:	90 0d       	add	r25, r0
    a46c:	72 9f       	mul	r23, r18
    a46e:	90 0d       	add	r25, r0
    a470:	11 24       	eor	r1, r1
    a472:	95 83       	std	Z+5, r25	; 0x05
    a474:	84 83       	std	Z+4, r24	; 0x04
    a476:	23 c0       	rjmp	.+70     	; 0xa4be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_DOWN)
    a478:	82 30       	cpi	r24, 0x02	; 2
    a47a:	89 f4       	brne	.+34     	; 0xa49e <recoil_sprite+0x76>
	{
		tile = sprite->y / 800;
    a47c:	86 81       	ldd	r24, Z+6	; 0x06
    a47e:	97 81       	ldd	r25, Z+7	; 0x07
    a480:	20 e2       	ldi	r18, 0x20	; 32
    a482:	33 e0       	ldi	r19, 0x03	; 3
    a484:	b9 01       	movw	r22, r18
    a486:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
		sprite->y = tile * 800;
    a48a:	62 9f       	mul	r22, r18
    a48c:	c0 01       	movw	r24, r0
    a48e:	63 9f       	mul	r22, r19
    a490:	90 0d       	add	r25, r0
    a492:	72 9f       	mul	r23, r18
    a494:	90 0d       	add	r25, r0
    a496:	11 24       	eor	r1, r1
    a498:	97 83       	std	Z+7, r25	; 0x07
    a49a:	86 83       	std	Z+6, r24	; 0x06
    a49c:	10 c0       	rjmp	.+32     	; 0xa4be <recoil_sprite+0x96>
	}
	else
	{
		tile = (sprite->x / 800) + 1;
    a49e:	84 81       	ldd	r24, Z+4	; 0x04
    a4a0:	95 81       	ldd	r25, Z+5	; 0x05
    a4a2:	20 e2       	ldi	r18, 0x20	; 32
    a4a4:	33 e0       	ldi	r19, 0x03	; 3
    a4a6:	b9 01       	movw	r22, r18
    a4a8:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    a4ac:	81 e0       	ldi	r24, 0x01	; 1
    a4ae:	86 0f       	add	r24, r22
		sprite->x = tile * 800;
    a4b0:	82 9f       	mul	r24, r18
    a4b2:	a0 01       	movw	r20, r0
    a4b4:	83 9f       	mul	r24, r19
    a4b6:	50 0d       	add	r21, r0
    a4b8:	11 24       	eor	r1, r1
    a4ba:	55 83       	std	Z+5, r21	; 0x05
    a4bc:	44 83       	std	Z+4, r20	; 0x04
	}
	sprite->recoiled = 1;
    a4be:	81 e0       	ldi	r24, 0x01	; 1
    a4c0:	83 83       	std	Z+3, r24	; 0x03
    a4c2:	08 95       	ret

0000a4c4 <recoil_sprite_fine>:
}

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a4c4:	cf 93       	push	r28
    a4c6:	df 93       	push	r29
    a4c8:	eb 01       	movw	r28, r22
	u16 speed = get_delta(p, sprite);
    a4ca:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
	
	if (sprite->direction == D_UP)
    a4ce:	28 81       	ld	r18, Y
    a4d0:	21 11       	cpse	r18, r1
    a4d2:	05 c0       	rjmp	.+10     	; 0xa4de <recoil_sprite_fine+0x1a>
	{
		sprite->y += speed;
    a4d4:	2e 81       	ldd	r18, Y+6	; 0x06
    a4d6:	3f 81       	ldd	r19, Y+7	; 0x07
    a4d8:	82 0f       	add	r24, r18
    a4da:	93 1f       	adc	r25, r19
    a4dc:	11 c0       	rjmp	.+34     	; 0xa500 <recoil_sprite_fine+0x3c>
	}
	else if (sprite->direction == D_RIGHT)
    a4de:	21 30       	cpi	r18, 0x01	; 1
    a4e0:	39 f4       	brne	.+14     	; 0xa4f0 <recoil_sprite_fine+0x2c>
	{
		sprite->x -= speed;
    a4e2:	2c 81       	ldd	r18, Y+4	; 0x04
    a4e4:	3d 81       	ldd	r19, Y+5	; 0x05
    a4e6:	a9 01       	movw	r20, r18
    a4e8:	48 1b       	sub	r20, r24
    a4ea:	59 0b       	sbc	r21, r25
    a4ec:	ca 01       	movw	r24, r20
    a4ee:	0f c0       	rjmp	.+30     	; 0xa50e <recoil_sprite_fine+0x4a>
	}
	else if (sprite->direction == D_DOWN)
    a4f0:	22 30       	cpi	r18, 0x02	; 2
    a4f2:	49 f4       	brne	.+18     	; 0xa506 <recoil_sprite_fine+0x42>
	{
		sprite->y -= speed;
    a4f4:	2e 81       	ldd	r18, Y+6	; 0x06
    a4f6:	3f 81       	ldd	r19, Y+7	; 0x07
    a4f8:	a9 01       	movw	r20, r18
    a4fa:	48 1b       	sub	r20, r24
    a4fc:	59 0b       	sbc	r21, r25
    a4fe:	ca 01       	movw	r24, r20
    a500:	9f 83       	std	Y+7, r25	; 0x07
    a502:	8e 83       	std	Y+6, r24	; 0x06
    a504:	06 c0       	rjmp	.+12     	; 0xa512 <recoil_sprite_fine+0x4e>
	}
	else
	{
		sprite->x += speed;
    a506:	2c 81       	ldd	r18, Y+4	; 0x04
    a508:	3d 81       	ldd	r19, Y+5	; 0x05
    a50a:	82 0f       	add	r24, r18
    a50c:	93 1f       	adc	r25, r19
    a50e:	9d 83       	std	Y+5, r25	; 0x05
    a510:	8c 83       	std	Y+4, r24	; 0x04
	}
	sprite->recoiled = 1;
    a512:	81 e0       	ldi	r24, 0x01	; 1
    a514:	8b 83       	std	Y+3, r24	; 0x03
}
    a516:	df 91       	pop	r29
    a518:	cf 91       	pop	r28
    a51a:	08 95       	ret

0000a51c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a51c:	81 5d       	subi	r24, 0xD1	; 209
    a51e:	93 4f       	sbci	r25, 0xF3	; 243
    a520:	fc 01       	movw	r30, r24
    a522:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a524:	81 30       	cpi	r24, 0x01	; 1
    a526:	31 f0       	breq	.+12     	; 0xa534 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a528:	82 30       	cpi	r24, 0x02	; 2
    a52a:	31 f0       	breq	.+12     	; 0xa538 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a52c:	87 33       	cpi	r24, 0x37	; 55
    a52e:	31 f0       	breq	.+12     	; 0xa53c <solid_square_tile+0x20>

	return 0;
    a530:	80 e0       	ldi	r24, 0x00	; 0
    a532:	08 95       	ret
    a534:	81 e0       	ldi	r24, 0x01	; 1
    a536:	08 95       	ret
    a538:	82 e0       	ldi	r24, 0x02	; 2
    a53a:	08 95       	ret
    a53c:	87 e3       	ldi	r24, 0x37	; 55
}
    a53e:	08 95       	ret

0000a540 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a540:	81 5d       	subi	r24, 0xD1	; 209
    a542:	93 4f       	sbci	r25, 0xF3	; 243
    a544:	fc 01       	movw	r30, r24
    a546:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a548:	83 30       	cpi	r24, 0x03	; 3
    a54a:	41 f0       	breq	.+16     	; 0xa55c <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a54c:	86 30       	cpi	r24, 0x06	; 6
    a54e:	41 f0       	breq	.+16     	; 0xa560 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a550:	84 30       	cpi	r24, 0x04	; 4
    a552:	41 f0       	breq	.+16     	; 0xa564 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a554:	85 30       	cpi	r24, 0x05	; 5
    a556:	41 f0       	breq	.+16     	; 0xa568 <solid_directional_tile+0x28>
	
	return 0;
    a558:	80 e0       	ldi	r24, 0x00	; 0
    a55a:	08 95       	ret
    a55c:	83 e0       	ldi	r24, 0x03	; 3
    a55e:	08 95       	ret
    a560:	86 e0       	ldi	r24, 0x06	; 6
    a562:	08 95       	ret
    a564:	84 e0       	ldi	r24, 0x04	; 4
    a566:	08 95       	ret
    a568:	85 e0       	ldi	r24, 0x05	; 5
}
    a56a:	08 95       	ret

0000a56c <solid_tile>:

u8 solid_tile(int tile_index)
{
    a56c:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a56e:	fc 01       	movw	r30, r24
    a570:	e1 5d       	subi	r30, 0xD1	; 209
    a572:	f3 4f       	sbci	r31, 0xF3	; 243
    a574:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a576:	91 30       	cpi	r25, 0x01	; 1
    a578:	39 f0       	breq	.+14     	; 0xa588 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a57a:	92 30       	cpi	r25, 0x02	; 2
    a57c:	39 f0       	breq	.+14     	; 0xa58c <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a57e:	97 33       	cpi	r25, 0x37	; 55
    a580:	39 f0       	breq	.+14     	; 0xa590 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a582:	c9 01       	movw	r24, r18
    a584:	0c 94 a0 52 	jmp	0xa540	; 0xa540 <solid_directional_tile>
    a588:	81 e0       	ldi	r24, 0x01	; 1
    a58a:	08 95       	ret
    a58c:	82 e0       	ldi	r24, 0x02	; 2
    a58e:	08 95       	ret
    a590:	87 e3       	ldi	r24, 0x37	; 55
}
    a592:	08 95       	ret

0000a594 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u16 x, u16 y, u16 width, u16 height)
{
    a594:	af 92       	push	r10
    a596:	bf 92       	push	r11
    a598:	cf 92       	push	r12
    a59a:	df 92       	push	r13
    a59c:	ef 92       	push	r14
    a59e:	ff 92       	push	r15
    a5a0:	0f 93       	push	r16
    a5a2:	1f 93       	push	r17
    a5a4:	cf 93       	push	r28
    a5a6:	df 93       	push	r29
    a5a8:	eb 01       	movw	r28, r22
    a5aa:	7a 01       	movw	r14, r20
	u8 tile = level.level_map[tile_index];
    a5ac:	fc 01       	movw	r30, r24
    a5ae:	e1 5d       	subi	r30, 0xD1	; 209
    a5b0:	f3 4f       	sbci	r31, 0xF3	; 243
    a5b2:	d1 80       	ldd	r13, Z+1	; 0x01
	u16 tile_x = (tile_index % 30) * 800;
    a5b4:	6e e1       	ldi	r22, 0x1E	; 30
    a5b6:	70 e0       	ldi	r23, 0x00	; 0
    a5b8:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    a5bc:	40 e2       	ldi	r20, 0x20	; 32
    a5be:	53 e0       	ldi	r21, 0x03	; 3
    a5c0:	84 9f       	mul	r24, r20
    a5c2:	f0 01       	movw	r30, r0
    a5c4:	85 9f       	mul	r24, r21
    a5c6:	f0 0d       	add	r31, r0
    a5c8:	94 9f       	mul	r25, r20
    a5ca:	f0 0d       	add	r31, r0
    a5cc:	11 24       	eor	r1, r1
	u16 tile_y = (tile_index / 30 + 3) * 800;
    a5ce:	6d 5f       	subi	r22, 0xFD	; 253
    a5d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a5d2:	64 9f       	mul	r22, r20
    a5d4:	c0 01       	movw	r24, r0
    a5d6:	65 9f       	mul	r22, r21
    a5d8:	90 0d       	add	r25, r0
    a5da:	74 9f       	mul	r23, r20
    a5dc:	90 0d       	add	r25, r0
    a5de:	11 24       	eor	r1, r1
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x+width-1, y, x+width-1, y+height-1)) return tile;
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x, y+height-1, x+width-1, y+height-1)) return tile;
	}
	
	return 0;*/
	if (tile == L_TR)
    a5e0:	64 e0       	ldi	r22, 0x04	; 4
    a5e2:	d6 12       	cpse	r13, r22
    a5e4:	3a c0       	rjmp	.+116    	; 0xa65a <collides_directional_tile+0xc6>
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a5e6:	2c 0f       	add	r18, r28
    a5e8:	3d 1f       	adc	r19, r29
    a5ea:	a9 01       	movw	r20, r18
    a5ec:	41 50       	subi	r20, 0x01	; 1
    a5ee:	51 09       	sbc	r21, r1
    a5f0:	bf 01       	movw	r22, r30
    a5f2:	60 5e       	subi	r22, 0xE0	; 224
    a5f4:	7c 4f       	sbci	r23, 0xFC	; 252
    a5f6:	46 17       	cp	r20, r22
    a5f8:	57 07       	cpc	r21, r23
    a5fa:	08 f0       	brcs	.+2      	; 0xa5fe <collides_directional_tile+0x6a>
    a5fc:	34 c1       	rjmp	.+616    	; 0xa866 <collides_directional_tile+0x2d2>
    a5fe:	4e 17       	cp	r20, r30
    a600:	5f 07       	cpc	r21, r31
    a602:	08 f4       	brcc	.+2      	; 0xa606 <collides_directional_tile+0x72>
    a604:	30 c1       	rjmp	.+608    	; 0xa866 <collides_directional_tile+0x2d2>
    a606:	e8 16       	cp	r14, r24
    a608:	f9 06       	cpc	r15, r25
    a60a:	30 f0       	brcs	.+12     	; 0xa618 <collides_directional_tile+0x84>
    a60c:	dc 01       	movw	r26, r24
    a60e:	a0 5e       	subi	r26, 0xE0	; 224
    a610:	bc 4f       	sbci	r27, 0xFC	; 252
    a612:	ea 16       	cp	r14, r26
    a614:	fb 06       	cpc	r15, r27
    a616:	b8 f0       	brcs	.+46     	; 0xa646 <collides_directional_tile+0xb2>
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a618:	ce 17       	cp	r28, r30
    a61a:	df 07       	cpc	r29, r31
    a61c:	08 f4       	brcc	.+2      	; 0xa620 <collides_directional_tile+0x8c>
    a61e:	0e c1       	rjmp	.+540    	; 0xa83c <collides_directional_tile+0x2a8>
    a620:	c6 17       	cp	r28, r22
    a622:	d7 07       	cpc	r29, r23
    a624:	08 f0       	brcs	.+2      	; 0xa628 <collides_directional_tile+0x94>
    a626:	0a c1       	rjmp	.+532    	; 0xa83c <collides_directional_tile+0x2a8>
    a628:	e8 16       	cp	r14, r24
    a62a:	f9 06       	cpc	r15, r25
    a62c:	08 f4       	brcc	.+2      	; 0xa630 <collides_directional_tile+0x9c>
    a62e:	fe c0       	rjmp	.+508    	; 0xa82c <collides_directional_tile+0x298>
    a630:	dc 01       	movw	r26, r24
    a632:	a0 5e       	subi	r26, 0xE0	; 224
    a634:	bc 4f       	sbci	r27, 0xFC	; 252
    a636:	ea 16       	cp	r14, r26
    a638:	fb 06       	cpc	r15, r27
    a63a:	08 f0       	brcs	.+2      	; 0xa63e <collides_directional_tile+0xaa>
    a63c:	f7 c0       	rjmp	.+494    	; 0xa82c <collides_directional_tile+0x298>
		{
			if (x+width >= tile_x+800) return 1;
    a63e:	26 17       	cp	r18, r22
    a640:	37 07       	cpc	r19, r23
    a642:	08 f0       	brcs	.+2      	; 0xa646 <collides_directional_tile+0xb2>
    a644:	0e c1       	rjmp	.+540    	; 0xa862 <collides_directional_tile+0x2ce>
    a646:	8e 1b       	sub	r24, r30
    a648:	9f 0b       	sbc	r25, r31
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y <= tile_y) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a64a:	48 0f       	add	r20, r24
    a64c:	59 1f       	adc	r21, r25
    a64e:	81 e0       	ldi	r24, 0x01	; 1
    a650:	4e 15       	cp	r20, r14
    a652:	5f 05       	cpc	r21, r15
    a654:	08 f0       	brcs	.+2      	; 0xa658 <collides_directional_tile+0xc4>
    a656:	5c c1       	rjmp	.+696    	; 0xa910 <collides_directional_tile+0x37c>
    a658:	5a c1       	rjmp	.+692    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_TL)
    a65a:	63 e0       	ldi	r22, 0x03	; 3
    a65c:	d6 12       	cpse	r13, r22
    a65e:	55 c0       	rjmp	.+170    	; 0xa70a <collides_directional_tile+0x176>
    a660:	bf 01       	movw	r22, r30
    a662:	60 5e       	subi	r22, 0xE0	; 224
    a664:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a666:	ce 17       	cp	r28, r30
    a668:	df 07       	cpc	r29, r31
    a66a:	88 f0       	brcs	.+34     	; 0xa68e <collides_directional_tile+0xfa>
    a66c:	c6 17       	cp	r28, r22
    a66e:	d7 07       	cpc	r29, r23
    a670:	70 f4       	brcc	.+28     	; 0xa68e <collides_directional_tile+0xfa>
    a672:	e8 16       	cp	r14, r24
    a674:	f9 06       	cpc	r15, r25
    a676:	58 f0       	brcs	.+22     	; 0xa68e <collides_directional_tile+0xfa>
    a678:	dc 01       	movw	r26, r24
    a67a:	a0 5e       	subi	r26, 0xE0	; 224
    a67c:	bc 4f       	sbci	r27, 0xFC	; 252
    a67e:	ea 16       	cp	r14, r26
    a680:	fb 06       	cpc	r15, r27
    a682:	28 f4       	brcc	.+10     	; 0xa68e <collides_directional_tile+0xfa>
    a684:	4c 1b       	sub	r20, r28
    a686:	5d 0b       	sbc	r21, r29
    a688:	e4 0f       	add	r30, r20
    a68a:	f5 1f       	adc	r31, r21
    a68c:	36 c0       	rjmp	.+108    	; 0xa6fa <collides_directional_tile+0x166>
    a68e:	21 50       	subi	r18, 0x01	; 1
    a690:	31 09       	sbc	r19, r1
		{
			if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a692:	2c 0f       	add	r18, r28
    a694:	3d 1f       	adc	r19, r29
    a696:	26 17       	cp	r18, r22
    a698:	37 07       	cpc	r19, r23
    a69a:	80 f4       	brcc	.+32     	; 0xa6bc <collides_directional_tile+0x128>
    a69c:	2e 17       	cp	r18, r30
    a69e:	3f 07       	cpc	r19, r31
    a6a0:	68 f0       	brcs	.+26     	; 0xa6bc <collides_directional_tile+0x128>
    a6a2:	e8 16       	cp	r14, r24
    a6a4:	f9 06       	cpc	r15, r25
    a6a6:	50 f0       	brcs	.+20     	; 0xa6bc <collides_directional_tile+0x128>
    a6a8:	9c 01       	movw	r18, r24
    a6aa:	20 5e       	subi	r18, 0xE0	; 224
    a6ac:	3c 4f       	sbci	r19, 0xFC	; 252
    a6ae:	e2 16       	cp	r14, r18
    a6b0:	f3 06       	cpc	r15, r19
    a6b2:	20 f4       	brcc	.+8      	; 0xa6bc <collides_directional_tile+0x128>
		{
			if (x <= tile_x) return 1;
    a6b4:	ec 17       	cp	r30, r28
    a6b6:	fd 07       	cpc	r31, r29
    a6b8:	e0 f0       	brcs	.+56     	; 0xa6f2 <collides_directional_tile+0x15e>
    a6ba:	d3 c0       	rjmp	.+422    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a6bc:	ce 17       	cp	r28, r30
    a6be:	df 07       	cpc	r29, r31
    a6c0:	08 f4       	brcc	.+2      	; 0xa6c4 <collides_directional_tile+0x130>
    a6c2:	25 c1       	rjmp	.+586    	; 0xa90e <collides_directional_tile+0x37a>
    a6c4:	c6 17       	cp	r28, r22
    a6c6:	d7 07       	cpc	r29, r23
    a6c8:	08 f0       	brcs	.+2      	; 0xa6cc <collides_directional_tile+0x138>
    a6ca:	21 c1       	rjmp	.+578    	; 0xa90e <collides_directional_tile+0x37a>
    a6cc:	01 50       	subi	r16, 0x01	; 1
    a6ce:	11 09       	sbc	r17, r1
    a6d0:	0e 0d       	add	r16, r14
    a6d2:	1f 1d       	adc	r17, r15
    a6d4:	08 17       	cp	r16, r24
    a6d6:	19 07       	cpc	r17, r25
    a6d8:	08 f4       	brcc	.+2      	; 0xa6dc <collides_directional_tile+0x148>
    a6da:	19 c1       	rjmp	.+562    	; 0xa90e <collides_directional_tile+0x37a>
    a6dc:	9c 01       	movw	r18, r24
    a6de:	20 5e       	subi	r18, 0xE0	; 224
    a6e0:	3c 4f       	sbci	r19, 0xFC	; 252
    a6e2:	02 17       	cp	r16, r18
    a6e4:	13 07       	cpc	r17, r19
    a6e6:	08 f0       	brcs	.+2      	; 0xa6ea <collides_directional_tile+0x156>
    a6e8:	12 c1       	rjmp	.+548    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a6ea:	8e 15       	cp	r24, r14
    a6ec:	9f 05       	cpc	r25, r15
    a6ee:	08 f0       	brcs	.+2      	; 0xa6f2 <collides_directional_tile+0x15e>
    a6f0:	b8 c0       	rjmp	.+368    	; 0xa862 <collides_directional_tile+0x2ce>
    a6f2:	ec 1b       	sub	r30, r28
    a6f4:	fd 0b       	sbc	r31, r29
    a6f6:	e0 5e       	subi	r30, 0xE0	; 224
    a6f8:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y < tile_y+(tile_x+800-x)) return 1;
    a6fa:	e8 0f       	add	r30, r24
    a6fc:	f9 1f       	adc	r31, r25
    a6fe:	81 e0       	ldi	r24, 0x01	; 1
    a700:	ee 16       	cp	r14, r30
    a702:	ff 06       	cpc	r15, r31
    a704:	08 f4       	brcc	.+2      	; 0xa708 <collides_directional_tile+0x174>
    a706:	04 c1       	rjmp	.+520    	; 0xa910 <collides_directional_tile+0x37c>
    a708:	02 c1       	rjmp	.+516    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BL)
    a70a:	65 e0       	ldi	r22, 0x05	; 5
    a70c:	d6 12       	cpse	r13, r22
    a70e:	5f c0       	rjmp	.+190    	; 0xa7ce <collides_directional_tile+0x23a>
	{
		if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a710:	ce 17       	cp	r28, r30
    a712:	df 07       	cpc	r29, r31
    a714:	80 f1       	brcs	.+96     	; 0xa776 <collides_directional_tile+0x1e2>
    a716:	af 01       	movw	r20, r30
    a718:	40 5e       	subi	r20, 0xE0	; 224
    a71a:	5c 4f       	sbci	r21, 0xFC	; 252
    a71c:	c4 17       	cp	r28, r20
    a71e:	d5 07       	cpc	r29, r21
    a720:	50 f5       	brcc	.+84     	; 0xa776 <collides_directional_tile+0x1e2>
    a722:	a8 01       	movw	r20, r16
    a724:	41 50       	subi	r20, 0x01	; 1
    a726:	51 09       	sbc	r21, r1
    a728:	4e 0d       	add	r20, r14
    a72a:	5f 1d       	adc	r21, r15
    a72c:	48 17       	cp	r20, r24
    a72e:	59 07       	cpc	r21, r25
    a730:	80 f0       	brcs	.+32     	; 0xa752 <collides_directional_tile+0x1be>
    a732:	bc 01       	movw	r22, r24
    a734:	60 5e       	subi	r22, 0xE0	; 224
    a736:	7c 4f       	sbci	r23, 0xFC	; 252
    a738:	46 17       	cp	r20, r22
    a73a:	57 07       	cpc	r21, r23
    a73c:	50 f4       	brcc	.+20     	; 0xa752 <collides_directional_tile+0x1be>
    a73e:	8e 1b       	sub	r24, r30
    a740:	9f 0b       	sbc	r25, r31
		{
			if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a742:	c8 0f       	add	r28, r24
    a744:	d9 1f       	adc	r29, r25
    a746:	81 e0       	ldi	r24, 0x01	; 1
    a748:	4c 17       	cp	r20, r28
    a74a:	5d 07       	cpc	r21, r29
    a74c:	08 f0       	brcs	.+2      	; 0xa750 <collides_directional_tile+0x1bc>
    a74e:	e0 c0       	rjmp	.+448    	; 0xa910 <collides_directional_tile+0x37c>
    a750:	de c0       	rjmp	.+444    	; 0xa90e <collides_directional_tile+0x37a>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a752:	e8 16       	cp	r14, r24
    a754:	f9 06       	cpc	r15, r25
    a756:	78 f0       	brcs	.+30     	; 0xa776 <collides_directional_tile+0x1e2>
    a758:	ac 01       	movw	r20, r24
    a75a:	40 5e       	subi	r20, 0xE0	; 224
    a75c:	5c 4f       	sbci	r21, 0xFC	; 252
    a75e:	e4 16       	cp	r14, r20
    a760:	f5 06       	cpc	r15, r21
    a762:	48 f4       	brcc	.+18     	; 0xa776 <collides_directional_tile+0x1e2>
		{
			if (y+height >= tile_y+800) return 1;
    a764:	0e 0d       	add	r16, r14
    a766:	1f 1d       	adc	r17, r15
    a768:	04 17       	cp	r16, r20
    a76a:	15 07       	cpc	r17, r21
    a76c:	08 f0       	brcs	.+2      	; 0xa770 <collides_directional_tile+0x1dc>
    a76e:	79 c0       	rjmp	.+242    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a770:	01 50       	subi	r16, 0x01	; 1
    a772:	11 09       	sbc	r17, r1
    a774:	22 c0       	rjmp	.+68     	; 0xa7ba <collides_directional_tile+0x226>
    a776:	21 50       	subi	r18, 0x01	; 1
    a778:	31 09       	sbc	r19, r1
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a77a:	2c 0f       	add	r18, r28
    a77c:	3d 1f       	adc	r19, r29
    a77e:	2e 17       	cp	r18, r30
    a780:	3f 07       	cpc	r19, r31
    a782:	08 f4       	brcc	.+2      	; 0xa786 <collides_directional_tile+0x1f2>
    a784:	c4 c0       	rjmp	.+392    	; 0xa90e <collides_directional_tile+0x37a>
    a786:	af 01       	movw	r20, r30
    a788:	40 5e       	subi	r20, 0xE0	; 224
    a78a:	5c 4f       	sbci	r21, 0xFC	; 252
    a78c:	24 17       	cp	r18, r20
    a78e:	35 07       	cpc	r19, r21
    a790:	08 f0       	brcs	.+2      	; 0xa794 <collides_directional_tile+0x200>
    a792:	bd c0       	rjmp	.+378    	; 0xa90e <collides_directional_tile+0x37a>
    a794:	01 50       	subi	r16, 0x01	; 1
    a796:	11 09       	sbc	r17, r1
    a798:	0e 0d       	add	r16, r14
    a79a:	1f 1d       	adc	r17, r15
    a79c:	08 17       	cp	r16, r24
    a79e:	19 07       	cpc	r17, r25
    a7a0:	08 f4       	brcc	.+2      	; 0xa7a4 <collides_directional_tile+0x210>
    a7a2:	b5 c0       	rjmp	.+362    	; 0xa90e <collides_directional_tile+0x37a>
    a7a4:	9c 01       	movw	r18, r24
    a7a6:	20 5e       	subi	r18, 0xE0	; 224
    a7a8:	3c 4f       	sbci	r19, 0xFC	; 252
    a7aa:	02 17       	cp	r16, r18
    a7ac:	13 07       	cpc	r17, r19
    a7ae:	08 f0       	brcs	.+2      	; 0xa7b2 <collides_directional_tile+0x21e>
    a7b0:	ae c0       	rjmp	.+348    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (x < tile_x) return 1;
    a7b2:	ce 17       	cp	r28, r30
    a7b4:	df 07       	cpc	r29, r31
    a7b6:	08 f4       	brcc	.+2      	; 0xa7ba <collides_directional_tile+0x226>
    a7b8:	54 c0       	rjmp	.+168    	; 0xa862 <collides_directional_tile+0x2ce>
    a7ba:	8e 1b       	sub	r24, r30
    a7bc:	9f 0b       	sbc	r25, r31
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a7be:	c8 0f       	add	r28, r24
    a7c0:	d9 1f       	adc	r29, r25
    a7c2:	81 e0       	ldi	r24, 0x01	; 1
    a7c4:	0c 17       	cp	r16, r28
    a7c6:	1d 07       	cpc	r17, r29
    a7c8:	08 f0       	brcs	.+2      	; 0xa7cc <collides_directional_tile+0x238>
    a7ca:	a2 c0       	rjmp	.+324    	; 0xa910 <collides_directional_tile+0x37c>
    a7cc:	a0 c0       	rjmp	.+320    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BR)
    a7ce:	66 e0       	ldi	r22, 0x06	; 6
    a7d0:	d6 12       	cpse	r13, r22
    a7d2:	9d c0       	rjmp	.+314    	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a7d4:	2c 0f       	add	r18, r28
    a7d6:	3d 1f       	adc	r19, r29
    a7d8:	d9 01       	movw	r26, r18
    a7da:	11 97       	sbiw	r26, 0x01	; 1
    a7dc:	ae 17       	cp	r26, r30
    a7de:	bf 07       	cpc	r27, r31
    a7e0:	08 f4       	brcc	.+2      	; 0xa7e4 <collides_directional_tile+0x250>
    a7e2:	91 c0       	rjmp	.+290    	; 0xa906 <collides_directional_tile+0x372>
    a7e4:	bf 01       	movw	r22, r30
    a7e6:	60 5e       	subi	r22, 0xE0	; 224
    a7e8:	7c 4f       	sbci	r23, 0xFC	; 252
    a7ea:	a6 17       	cp	r26, r22
    a7ec:	b7 07       	cpc	r27, r23
    a7ee:	08 f0       	brcs	.+2      	; 0xa7f2 <collides_directional_tile+0x25e>
    a7f0:	8a c0       	rjmp	.+276    	; 0xa906 <collides_directional_tile+0x372>
    a7f2:	b8 01       	movw	r22, r16
    a7f4:	61 50       	subi	r22, 0x01	; 1
    a7f6:	71 09       	sbc	r23, r1
    a7f8:	5b 01       	movw	r10, r22
    a7fa:	ae 0c       	add	r10, r14
    a7fc:	bf 1c       	adc	r11, r15
    a7fe:	a8 16       	cp	r10, r24
    a800:	b9 06       	cpc	r11, r25
    a802:	d0 f1       	brcs	.+116    	; 0xa878 <collides_directional_tile+0x2e4>
    a804:	6c 01       	movw	r12, r24
    a806:	60 ee       	ldi	r22, 0xE0	; 224
    a808:	c6 1a       	sub	r12, r22
    a80a:	6c ef       	ldi	r22, 0xFC	; 252
    a80c:	d6 0a       	sbc	r13, r22
    a80e:	ac 14       	cp	r10, r12
    a810:	bd 04       	cpc	r11, r13
    a812:	90 f5       	brcc	.+100    	; 0xa878 <collides_directional_tile+0x2e4>
    a814:	42 1b       	sub	r20, r18
    a816:	53 0b       	sbc	r21, r19
    a818:	e4 0f       	add	r30, r20
    a81a:	f5 1f       	adc	r31, r21
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a81c:	e8 0f       	add	r30, r24
    a81e:	f9 1f       	adc	r31, r25
    a820:	81 e0       	ldi	r24, 0x01	; 1
    a822:	ae 16       	cp	r10, r30
    a824:	bf 06       	cpc	r11, r31
    a826:	08 f0       	brcs	.+2      	; 0xa82a <collides_directional_tile+0x296>
    a828:	73 c0       	rjmp	.+230    	; 0xa910 <collides_directional_tile+0x37c>
    a82a:	71 c0       	rjmp	.+226    	; 0xa90e <collides_directional_tile+0x37a>
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
		{
			if (x+width >= tile_x+800) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a82c:	46 17       	cp	r20, r22
    a82e:	57 07       	cpc	r21, r23
    a830:	08 f0       	brcs	.+2      	; 0xa834 <collides_directional_tile+0x2a0>
    a832:	6d c0       	rjmp	.+218    	; 0xa90e <collides_directional_tile+0x37a>
    a834:	4e 17       	cp	r20, r30
    a836:	5f 07       	cpc	r21, r31
    a838:	08 f4       	brcc	.+2      	; 0xa83c <collides_directional_tile+0x2a8>
    a83a:	69 c0       	rjmp	.+210    	; 0xa90e <collides_directional_tile+0x37a>
    a83c:	01 50       	subi	r16, 0x01	; 1
    a83e:	11 09       	sbc	r17, r1
    a840:	0e 0d       	add	r16, r14
    a842:	1f 1d       	adc	r17, r15
    a844:	08 17       	cp	r16, r24
    a846:	19 07       	cpc	r17, r25
    a848:	08 f4       	brcc	.+2      	; 0xa84c <collides_directional_tile+0x2b8>
    a84a:	61 c0       	rjmp	.+194    	; 0xa90e <collides_directional_tile+0x37a>
    a84c:	9c 01       	movw	r18, r24
    a84e:	20 5e       	subi	r18, 0xE0	; 224
    a850:	3c 4f       	sbci	r19, 0xFC	; 252
    a852:	02 17       	cp	r16, r18
    a854:	13 07       	cpc	r17, r19
    a856:	08 f0       	brcs	.+2      	; 0xa85a <collides_directional_tile+0x2c6>
    a858:	5a c0       	rjmp	.+180    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a85a:	8e 15       	cp	r24, r14
    a85c:	9f 05       	cpc	r25, r15
    a85e:	08 f4       	brcc	.+2      	; 0xa862 <collides_directional_tile+0x2ce>
    a860:	f2 ce       	rjmp	.-540    	; 0xa646 <collides_directional_tile+0xb2>
	return 0;*/
	if (tile == L_TR)
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a862:	81 e0       	ldi	r24, 0x01	; 1
    a864:	55 c0       	rjmp	.+170    	; 0xa910 <collides_directional_tile+0x37c>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a866:	ce 17       	cp	r28, r30
    a868:	df 07       	cpc	r29, r31
    a86a:	08 f4       	brcc	.+2      	; 0xa86e <collides_directional_tile+0x2da>
    a86c:	50 c0       	rjmp	.+160    	; 0xa90e <collides_directional_tile+0x37a>
    a86e:	c6 17       	cp	r28, r22
    a870:	d7 07       	cpc	r29, r23
    a872:	08 f4       	brcc	.+2      	; 0xa876 <collides_directional_tile+0x2e2>
    a874:	d9 ce       	rjmp	.-590    	; 0xa628 <collides_directional_tile+0x94>
    a876:	4b c0       	rjmp	.+150    	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a878:	ce 17       	cp	r28, r30
    a87a:	df 07       	cpc	r29, r31
    a87c:	40 f1       	brcs	.+80     	; 0xa8ce <collides_directional_tile+0x33a>
    a87e:	bf 01       	movw	r22, r30
    a880:	60 5e       	subi	r22, 0xE0	; 224
    a882:	7c 4f       	sbci	r23, 0xFC	; 252
    a884:	c6 17       	cp	r28, r22
    a886:	d7 07       	cpc	r29, r23
    a888:	e0 f4       	brcc	.+56     	; 0xa8c2 <collides_directional_tile+0x32e>
    a88a:	a8 01       	movw	r20, r16
    a88c:	41 50       	subi	r20, 0x01	; 1
    a88e:	51 09       	sbc	r21, r1
    a890:	4e 0d       	add	r20, r14
    a892:	5f 1d       	adc	r21, r15
    a894:	48 17       	cp	r20, r24
    a896:	59 07       	cpc	r21, r25
    a898:	a0 f0       	brcs	.+40     	; 0xa8c2 <collides_directional_tile+0x32e>
    a89a:	ec 01       	movw	r28, r24
    a89c:	c0 5e       	subi	r28, 0xE0	; 224
    a89e:	dc 4f       	sbci	r29, 0xFC	; 252
    a8a0:	4c 17       	cp	r20, r28
    a8a2:	5d 07       	cpc	r21, r29
    a8a4:	70 f4       	brcc	.+28     	; 0xa8c2 <collides_directional_tile+0x32e>
		{
			if (x+width >= tile_x+800) return 1;
    a8a6:	26 17       	cp	r18, r22
    a8a8:	37 07       	cpc	r19, r23
    a8aa:	d8 f6       	brcc	.-74     	; 0xa862 <collides_directional_tile+0x2ce>
    a8ac:	e2 1b       	sub	r30, r18
    a8ae:	f3 0b       	sbc	r31, r19
    a8b0:	e0 5e       	subi	r30, 0xE0	; 224
    a8b2:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a8b4:	e8 0f       	add	r30, r24
    a8b6:	f9 1f       	adc	r31, r25
    a8b8:	81 e0       	ldi	r24, 0x01	; 1
    a8ba:	4e 17       	cp	r20, r30
    a8bc:	5f 07       	cpc	r21, r31
    a8be:	40 f5       	brcc	.+80     	; 0xa910 <collides_directional_tile+0x37c>
    a8c0:	26 c0       	rjmp	.+76     	; 0xa90e <collides_directional_tile+0x37a>
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y >= tile_y && y < tile_y+800)
    a8c2:	ae 17       	cp	r26, r30
    a8c4:	bf 07       	cpc	r27, r31
    a8c6:	18 f1       	brcs	.+70     	; 0xa90e <collides_directional_tile+0x37a>
    a8c8:	a6 17       	cp	r26, r22
    a8ca:	b7 07       	cpc	r27, r23
    a8cc:	00 f5       	brcc	.+64     	; 0xa90e <collides_directional_tile+0x37a>
    a8ce:	e8 16       	cp	r14, r24
    a8d0:	f9 06       	cpc	r15, r25
    a8d2:	e8 f0       	brcs	.+58     	; 0xa90e <collides_directional_tile+0x37a>
    a8d4:	ac 01       	movw	r20, r24
    a8d6:	40 5e       	subi	r20, 0xE0	; 224
    a8d8:	5c 4f       	sbci	r21, 0xFC	; 252
    a8da:	e4 16       	cp	r14, r20
    a8dc:	f5 06       	cpc	r15, r21
    a8de:	b8 f4       	brcc	.+46     	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y+height >= tile_y+800) return 1;
    a8e0:	0e 0d       	add	r16, r14
    a8e2:	1f 1d       	adc	r17, r15
    a8e4:	04 17       	cp	r16, r20
    a8e6:	15 07       	cpc	r17, r21
    a8e8:	08 f0       	brcs	.+2      	; 0xa8ec <collides_directional_tile+0x358>
    a8ea:	bb cf       	rjmp	.-138    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a8ec:	01 50       	subi	r16, 0x01	; 1
    a8ee:	11 09       	sbc	r17, r1
    a8f0:	e2 1b       	sub	r30, r18
    a8f2:	f3 0b       	sbc	r31, r19
    a8f4:	e0 5e       	subi	r30, 0xE0	; 224
    a8f6:	fc 4f       	sbci	r31, 0xFC	; 252
    a8f8:	e8 0f       	add	r30, r24
    a8fa:	f9 1f       	adc	r31, r25
    a8fc:	81 e0       	ldi	r24, 0x01	; 1
    a8fe:	0e 17       	cp	r16, r30
    a900:	1f 07       	cpc	r17, r31
    a902:	30 f4       	brcc	.+12     	; 0xa910 <collides_directional_tile+0x37c>
    a904:	04 c0       	rjmp	.+8      	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a906:	ce 17       	cp	r28, r30
    a908:	df 07       	cpc	r29, r31
    a90a:	08 f0       	brcs	.+2      	; 0xa90e <collides_directional_tile+0x37a>
    a90c:	b8 cf       	rjmp	.-144    	; 0xa87e <collides_directional_tile+0x2ea>
		{
			if (y+height >= tile_y+800) return 1;
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
	}
	return 0;
    a90e:	80 e0       	ldi	r24, 0x00	; 0
}
    a910:	df 91       	pop	r29
    a912:	cf 91       	pop	r28
    a914:	1f 91       	pop	r17
    a916:	0f 91       	pop	r16
    a918:	ff 90       	pop	r15
    a91a:	ef 90       	pop	r14
    a91c:	df 90       	pop	r13
    a91e:	cf 90       	pop	r12
    a920:	bf 90       	pop	r11
    a922:	af 90       	pop	r10
    a924:	08 95       	ret

0000a926 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a926:	8f 92       	push	r8
    a928:	9f 92       	push	r9
    a92a:	af 92       	push	r10
    a92c:	bf 92       	push	r11
    a92e:	cf 92       	push	r12
    a930:	df 92       	push	r13
    a932:	ef 92       	push	r14
    a934:	ff 92       	push	r15
    a936:	0f 93       	push	r16
    a938:	1f 93       	push	r17
    a93a:	cf 93       	push	r28
    a93c:	df 93       	push	r29
    a93e:	4c 01       	movw	r8, r24
    a940:	eb 01       	movw	r28, r22
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    a942:	ee 80       	ldd	r14, Y+6	; 0x06
    a944:	ff 80       	ldd	r15, Y+7	; 0x07
    a946:	88 ec       	ldi	r24, 0xC8	; 200
    a948:	e8 0e       	add	r14, r24
    a94a:	f1 1c       	adc	r15, r1
    a94c:	0c 81       	ldd	r16, Y+4	; 0x04
    a94e:	1d 81       	ldd	r17, Y+5	; 0x05
    a950:	08 53       	subi	r16, 0x38	; 56
    a952:	1f 4f       	sbci	r17, 0xFF	; 255
    a954:	f4 01       	movw	r30, r8
    a956:	e8 58       	subi	r30, 0x88	; 136
    a958:	ff 4f       	sbci	r31, 0xFF	; 255
    a95a:	60 81       	ld	r22, Z
    a95c:	71 81       	ldd	r23, Z+1	; 0x01
    a95e:	6c 59       	subi	r22, 0x9C	; 156
    a960:	7f 4f       	sbci	r23, 0xFF	; 255
    a962:	32 97       	sbiw	r30, 0x02	; 2
    a964:	80 81       	ld	r24, Z
    a966:	91 81       	ldd	r25, Z+1	; 0x01
    a968:	20 e9       	ldi	r18, 0x90	; 144
    a96a:	a2 2e       	mov	r10, r18
    a96c:	bb 24       	eor	r11, r11
    a96e:	b3 94       	inc	r11
    a970:	30 e9       	ldi	r19, 0x90	; 144
    a972:	c3 2e       	mov	r12, r19
    a974:	dd 24       	eor	r13, r13
    a976:	d3 94       	inc	r13
    a978:	28 e7       	ldi	r18, 0x78	; 120
    a97a:	35 e0       	ldi	r19, 0x05	; 5
    a97c:	48 e7       	ldi	r20, 0x78	; 120
    a97e:	55 e0       	ldi	r21, 0x05	; 5
    a980:	8c 59       	subi	r24, 0x9C	; 156
    a982:	9f 4f       	sbci	r25, 0xFF	; 255
    a984:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a988:	88 23       	and	r24, r24
    a98a:	51 f0       	breq	.+20     	; 0xa9a0 <player_shot+0x7a>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    a98c:	f4 01       	movw	r30, r8
    a98e:	83 85       	ldd	r24, Z+11	; 0x0b
    a990:	88 37       	cpi	r24, 0x78	; 120
    a992:	31 f4       	brne	.+12     	; 0xa9a0 <player_shot+0x7a>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a994:	81 e0       	ldi	r24, 0x01	; 1
    a996:	2c 85       	ldd	r18, Y+12	; 0x0c
    a998:	3d 85       	ldd	r19, Y+13	; 0x0d
    a99a:	21 32       	cpi	r18, 0x21	; 33
    a99c:	33 40       	sbci	r19, 0x03	; 3
    a99e:	08 f4       	brcc	.+2      	; 0xa9a2 <player_shot+0x7c>
    a9a0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a9a2:	df 91       	pop	r29
    a9a4:	cf 91       	pop	r28
    a9a6:	1f 91       	pop	r17
    a9a8:	0f 91       	pop	r16
    a9aa:	ff 90       	pop	r15
    a9ac:	ef 90       	pop	r14
    a9ae:	df 90       	pop	r13
    a9b0:	cf 90       	pop	r12
    a9b2:	bf 90       	pop	r11
    a9b4:	af 90       	pop	r10
    a9b6:	9f 90       	pop	r9
    a9b8:	8f 90       	pop	r8
    a9ba:	08 95       	ret

0000a9bc <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    a9bc:	af 92       	push	r10
    a9be:	bf 92       	push	r11
    a9c0:	cf 92       	push	r12
    a9c2:	df 92       	push	r13
    a9c4:	ef 92       	push	r14
    a9c6:	ff 92       	push	r15
    a9c8:	0f 93       	push	r16
    a9ca:	1f 93       	push	r17
    a9cc:	cf 93       	push	r28
    a9ce:	df 93       	push	r29
    a9d0:	ec 01       	movw	r28, r24
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
    a9d2:	fb 01       	movw	r30, r22
    a9d4:	e6 80       	ldd	r14, Z+6	; 0x06
    a9d6:	f7 80       	ldd	r15, Z+7	; 0x07
    a9d8:	f8 ec       	ldi	r31, 0xC8	; 200
    a9da:	ef 0e       	add	r14, r31
    a9dc:	f1 1c       	adc	r15, r1
    a9de:	fb 01       	movw	r30, r22
    a9e0:	04 81       	ldd	r16, Z+4	; 0x04
    a9e2:	15 81       	ldd	r17, Z+5	; 0x05
    a9e4:	08 53       	subi	r16, 0x38	; 56
    a9e6:	1f 4f       	sbci	r17, 0xFF	; 255
    a9e8:	6e 81       	ldd	r22, Y+6	; 0x06
    a9ea:	7f 81       	ldd	r23, Y+7	; 0x07
    a9ec:	80 e9       	ldi	r24, 0x90	; 144
    a9ee:	a8 2e       	mov	r10, r24
    a9f0:	bb 24       	eor	r11, r11
    a9f2:	b3 94       	inc	r11
    a9f4:	90 e9       	ldi	r25, 0x90	; 144
    a9f6:	c9 2e       	mov	r12, r25
    a9f8:	dd 24       	eor	r13, r13
    a9fa:	d3 94       	inc	r13
    a9fc:	20 e2       	ldi	r18, 0x20	; 32
    a9fe:	33 e0       	ldi	r19, 0x03	; 3
    aa00:	40 e2       	ldi	r20, 0x20	; 32
    aa02:	53 e0       	ldi	r21, 0x03	; 3
    aa04:	8c 81       	ldd	r24, Y+4	; 0x04
    aa06:	9d 81       	ldd	r25, Y+5	; 0x05
    aa08:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
    aa0c:	88 23       	and	r24, r24
    aa0e:	39 f0       	breq	.+14     	; 0xaa1e <turret_shot+0x62>
    aa10:	91 e0       	ldi	r25, 0x01	; 1
    aa12:	88 85       	ldd	r24, Y+8	; 0x08
    aa14:	81 11       	cpse	r24, r1
    aa16:	01 c0       	rjmp	.+2      	; 0xaa1a <turret_shot+0x5e>
    aa18:	90 e0       	ldi	r25, 0x00	; 0
    aa1a:	89 2f       	mov	r24, r25
    aa1c:	01 c0       	rjmp	.+2      	; 0xaa20 <turret_shot+0x64>
    aa1e:	80 e0       	ldi	r24, 0x00	; 0
}
    aa20:	df 91       	pop	r29
    aa22:	cf 91       	pop	r28
    aa24:	1f 91       	pop	r17
    aa26:	0f 91       	pop	r16
    aa28:	ff 90       	pop	r15
    aa2a:	ef 90       	pop	r14
    aa2c:	df 90       	pop	r13
    aa2e:	cf 90       	pop	r12
    aa30:	bf 90       	pop	r11
    aa32:	af 90       	pop	r10
    aa34:	08 95       	ret

0000aa36 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    aa36:	fc 01       	movw	r30, r24
    aa38:	24 81       	ldd	r18, Z+4	; 0x04
    aa3a:	35 81       	ldd	r19, Z+5	; 0x05
    aa3c:	20 5e       	subi	r18, 0xE0	; 224
    aa3e:	3c 4f       	sbci	r19, 0xFC	; 252
    aa40:	21 3c       	cpi	r18, 0xC1	; 193
    aa42:	3d 45       	sbci	r19, 0x5D	; 93
    aa44:	80 f4       	brcc	.+32     	; 0xaa66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    aa46:	fc 01       	movw	r30, r24
    aa48:	86 81       	ldd	r24, Z+6	; 0x06
    aa4a:	97 81       	ldd	r25, Z+7	; 0x07
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    aa4c:	80 36       	cpi	r24, 0x60	; 96
    aa4e:	f9 e0       	ldi	r31, 0x09	; 9
    aa50:	9f 07       	cpc	r25, r31
    aa52:	48 f0       	brcs	.+18     	; 0xaa66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    aa54:	9c 01       	movw	r18, r24
    aa56:	20 5e       	subi	r18, 0xE0	; 224
    aa58:	3c 4f       	sbci	r19, 0xFC	; 252
    aa5a:	81 e0       	ldi	r24, 0x01	; 1
    aa5c:	21 38       	cpi	r18, 0x81	; 129
    aa5e:	37 45       	sbci	r19, 0x57	; 87
    aa60:	18 f4       	brcc	.+6      	; 0xaa68 <collision_detect_boundries+0x32>
    aa62:	80 e0       	ldi	r24, 0x00	; 0
    aa64:	08 95       	ret
	{
		return 1;
    aa66:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    aa68:	08 95       	ret

0000aa6a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aa6a:	1f 93       	push	r17
    aa6c:	cf 93       	push	r28
    aa6e:	df 93       	push	r29
    aa70:	9c 01       	movw	r18, r24
    aa72:	fb 01       	movw	r30, r22
    aa74:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    aa76:	6e e1       	ldi	r22, 0x1E	; 30
    aa78:	70 e0       	ldi	r23, 0x00	; 0
    aa7a:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    aa7e:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    aa80:	63 e0       	ldi	r22, 0x03	; 3
    aa82:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    aa84:	e9 01       	movw	r28, r18
    aa86:	c1 5d       	subi	r28, 0xD1	; 209
    aa88:	d3 4f       	sbci	r29, 0xF3	; 243
    aa8a:	49 81       	ldd	r20, Y+1	; 0x01
    aa8c:	44 23       	and	r20, r20
    aa8e:	71 f0       	breq	.+28     	; 0xaaac <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    aa90:	e9 01       	movw	r28, r18
    aa92:	c0 5d       	subi	r28, 0xD0	; 208
    aa94:	d3 4f       	sbci	r29, 0xF3	; 243
    aa96:	49 81       	ldd	r20, Y+1	; 0x01
    aa98:	44 23       	and	r20, r20
    aa9a:	91 f0       	breq	.+36     	; 0xaac0 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aa9c:	e9 01       	movw	r28, r18
    aa9e:	c3 5b       	subi	r28, 0xB3	; 179
    aaa0:	d3 4f       	sbci	r29, 0xF3	; 243
    aaa2:	49 81       	ldd	r20, Y+1	; 0x01
    aaa4:	41 11       	cpse	r20, r1
    aaa6:	04 c0       	rjmp	.+8      	; 0xaab0 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    aaa8:	64 e0       	ldi	r22, 0x04	; 4
    aaaa:	69 0f       	add	r22, r25
    aaac:	af 01       	movw	r20, r30
    aaae:	0a c0       	rjmp	.+20     	; 0xaac4 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    aab0:	e9 01       	movw	r28, r18
    aab2:	c2 5b       	subi	r28, 0xB2	; 178
    aab4:	d3 4f       	sbci	r29, 0xF3	; 243
    aab6:	29 81       	ldd	r18, Y+1	; 0x01
    aab8:	21 11       	cpse	r18, r1
    aaba:	07 c0       	rjmp	.+14     	; 0xaaca <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    aabc:	64 e0       	ldi	r22, 0x04	; 4
    aabe:	69 0f       	add	r22, r25
    aac0:	af 01       	movw	r20, r30
    aac2:	8f 5f       	subi	r24, 0xFF	; 255
    aac4:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		level.level_map[tile_index+31] = item_type;
    aac8:	19 83       	std	Y+1, r17	; 0x01
	}
}
    aaca:	df 91       	pop	r29
    aacc:	cf 91       	pop	r28
    aace:	1f 91       	pop	r17
    aad0:	08 95       	ret

0000aad2 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    aad2:	ef 92       	push	r14
    aad4:	ff 92       	push	r15
    aad6:	0f 93       	push	r16
    aad8:	1f 93       	push	r17
    aada:	cf 93       	push	r28
    aadc:	df 93       	push	r29
    aade:	1f 92       	push	r1
    aae0:	cd b7       	in	r28, 0x3d	; 61
    aae2:	de b7       	in	r29, 0x3e	; 62
    aae4:	7c 01       	movw	r14, r24
    aae6:	36 2f       	mov	r19, r22
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    aae8:	fc 01       	movw	r30, r24
    aaea:	e8 58       	subi	r30, 0x88	; 136
    aaec:	ff 4f       	sbci	r31, 0xFF	; 255
    aaee:	80 81       	ld	r24, Z
    aaf0:	91 81       	ldd	r25, Z+1	; 0x01
    aaf2:	e0 e2       	ldi	r30, 0x20	; 32
    aaf4:	f3 e0       	ldi	r31, 0x03	; 3
    aaf6:	bf 01       	movw	r22, r30
    aaf8:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    aafc:	2d ef       	ldi	r18, 0xFD	; 253
    aafe:	26 0f       	add	r18, r22
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->netMessage.shared.x / 800;
    ab00:	d7 01       	movw	r26, r14
    ab02:	aa 58       	subi	r26, 0x8A	; 138
    ab04:	bf 4f       	sbci	r27, 0xFF	; 255
    ab06:	8d 91       	ld	r24, X+
    ab08:	9c 91       	ld	r25, X
    ab0a:	bf 01       	movw	r22, r30
    ab0c:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
	u8 y = player->netMessage.shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    ab10:	8b 01       	movw	r16, r22
    ab12:	8e e1       	ldi	r24, 0x1E	; 30
    ab14:	28 9f       	mul	r18, r24
    ab16:	00 0d       	add	r16, r0
    ab18:	11 1d       	adc	r17, r1
    ab1a:	11 24       	eor	r1, r1

	if (player->has_over_speed)
    ab1c:	f7 01       	movw	r30, r14
    ab1e:	87 85       	ldd	r24, Z+15	; 0x0f
    ab20:	88 23       	and	r24, r24
    ab22:	a1 f0       	breq	.+40     	; 0xab4c <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ab24:	40 e0       	ldi	r20, 0x00	; 0
    ab26:	50 e0       	ldi	r21, 0x00	; 0
    ab28:	61 e0       	ldi	r22, 0x01	; 1
    ab2a:	8a e0       	ldi	r24, 0x0A	; 10
    ab2c:	83 0f       	add	r24, r19
    ab2e:	39 83       	std	Y+1, r19	; 0x01
    ab30:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ab34:	47 e0       	ldi	r20, 0x07	; 7
    ab36:	61 ec       	ldi	r22, 0xC1	; 193
    ab38:	7a e6       	ldi	r23, 0x6A	; 106
    ab3a:	c8 01       	movw	r24, r16
    ab3c:	0e 94 35 55 	call	0xaa6a	; 0xaa6a <drop_item>
		player->max_speed = MAX_SPEED;
    ab40:	88 e8       	ldi	r24, 0x88	; 136
    ab42:	93 e1       	ldi	r25, 0x13	; 19
    ab44:	f7 01       	movw	r30, r14
    ab46:	95 87       	std	Z+13, r25	; 0x0d
    ab48:	84 87       	std	Z+12, r24	; 0x0c
    ab4a:	39 81       	ldd	r19, Y+1	; 0x01
	}
	if (player->has_rocket)
    ab4c:	f7 01       	movw	r30, r14
    ab4e:	86 85       	ldd	r24, Z+14	; 0x0e
    ab50:	88 23       	and	r24, r24
    ab52:	69 f0       	breq	.+26     	; 0xab6e <kill_player+0x9c>
	{
		SetTile(hud_x+11, 1, 0);
    ab54:	40 e0       	ldi	r20, 0x00	; 0
    ab56:	50 e0       	ldi	r21, 0x00	; 0
    ab58:	61 e0       	ldi	r22, 0x01	; 1
    ab5a:	8b e0       	ldi	r24, 0x0B	; 11
    ab5c:	83 0f       	add	r24, r19
    ab5e:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ab62:	49 e0       	ldi	r20, 0x09	; 9
    ab64:	6b eb       	ldi	r22, 0xBB	; 187
    ab66:	7a e6       	ldi	r23, 0x6A	; 106
    ab68:	c8 01       	movw	r24, r16
    ab6a:	0e 94 35 55 	call	0xaa6a	; 0xaa6a <drop_item>
	}
	player->has_over_speed = false;
    ab6e:	f7 01       	movw	r30, r14
    ab70:	17 86       	std	Z+15, r1	; 0x0f
	player->has_rocket = false;
    ab72:	16 86       	std	Z+14, r1	; 0x0e
	player->flags = player->flags | EXPLODING_FLAG;
    ab74:	82 85       	ldd	r24, Z+10	; 0x0a
    ab76:	81 60       	ori	r24, 0x01	; 1
    ab78:	82 87       	std	Z+10, r24	; 0x0a
}
    ab7a:	0f 90       	pop	r0
    ab7c:	df 91       	pop	r29
    ab7e:	cf 91       	pop	r28
    ab80:	1f 91       	pop	r17
    ab82:	0f 91       	pop	r16
    ab84:	ff 90       	pop	r15
    ab86:	ef 90       	pop	r14
    ab88:	08 95       	ret

0000ab8a <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ab8a:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ab8c:	70 e0       	ldi	r23, 0x00	; 0
    ab8e:	8e e1       	ldi	r24, 0x1E	; 30
    ab90:	48 9f       	mul	r20, r24
    ab92:	60 0d       	add	r22, r0
    ab94:	71 1d       	adc	r23, r1
    ab96:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ab98:	21 11       	cpse	r18, r1
    ab9a:	05 c0       	rjmp	.+10     	; 0xaba6 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    ab9c:	71 83       	std	Z+1, r23	; 0x01
    ab9e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    aba0:	6f 5f       	subi	r22, 0xFF	; 255
    aba2:	7f 4f       	sbci	r23, 0xFF	; 255
    aba4:	0c c0       	rjmp	.+24     	; 0xabbe <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    aba6:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    aba8:	21 30       	cpi	r18, 0x01	; 1
    abaa:	11 f4       	brne	.+4      	; 0xabb0 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    abac:	01 96       	adiw	r24, 0x01	; 1
    abae:	03 c0       	rjmp	.+6      	; 0xabb6 <get_interesting_tile_indexes_shot+0x2c>
    abb0:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    abb2:	22 30       	cpi	r18, 0x02	; 2
    abb4:	39 f4       	brne	.+14     	; 0xabc4 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    abb6:	91 83       	std	Z+1, r25	; 0x01
    abb8:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    abba:	61 5e       	subi	r22, 0xE1	; 225
    abbc:	7f 4f       	sbci	r23, 0xFF	; 255
    abbe:	73 83       	std	Z+3, r23	; 0x03
    abc0:	62 83       	std	Z+2, r22	; 0x02
    abc2:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    abc4:	71 83       	std	Z+1, r23	; 0x01
    abc6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    abc8:	93 83       	std	Z+3, r25	; 0x03
    abca:	82 83       	std	Z+2, r24	; 0x02
    abcc:	08 95       	ret

0000abce <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    abce:	ef 92       	push	r14
    abd0:	ff 92       	push	r15
    abd2:	0f 93       	push	r16
    abd4:	1f 93       	push	r17
    abd6:	cf 93       	push	r28
    abd8:	df 93       	push	r29
    abda:	ec 01       	movw	r28, r24
    abdc:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    abde:	8e e1       	ldi	r24, 0x1E	; 30
    abe0:	e8 2e       	mov	r14, r24
    abe2:	f1 2c       	mov	r15, r1
    abe4:	cb 01       	movw	r24, r22
    abe6:	b7 01       	movw	r22, r14
    abe8:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    abec:	6d 5f       	subi	r22, 0xFD	; 253
    abee:	40 e0       	ldi	r20, 0x00	; 0
    abf0:	50 e0       	ldi	r21, 0x00	; 0
    abf2:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    abf6:	88 81       	ld	r24, Y
    abf8:	fe 01       	movw	r30, r28
    abfa:	9e e0       	ldi	r25, 0x0E	; 14
    abfc:	89 9f       	mul	r24, r25
    abfe:	e0 0d       	add	r30, r0
    ac00:	f1 1d       	adc	r31, r1
    ac02:	11 24       	eor	r1, r1
    ac04:	85 85       	ldd	r24, Z+13	; 0x0d
    ac06:	96 85       	ldd	r25, Z+14	; 0x0e
    ac08:	00 97       	sbiw	r24, 0x00	; 0
    ac0a:	41 f0       	breq	.+16     	; 0xac1c <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ac0c:	b7 01       	movw	r22, r14
    ac0e:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    ac12:	6d 5f       	subi	r22, 0xFD	; 253
    ac14:	40 e0       	ldi	r20, 0x00	; 0
    ac16:	50 e0       	ldi	r21, 0x00	; 0
    ac18:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    ac1c:	88 81       	ld	r24, Y
    ac1e:	fe 01       	movw	r30, r28
    ac20:	9e e0       	ldi	r25, 0x0E	; 14
    ac22:	89 9f       	mul	r24, r25
    ac24:	e0 0d       	add	r30, r0
    ac26:	f1 1d       	adc	r31, r1
    ac28:	11 24       	eor	r1, r1
    ac2a:	16 87       	std	Z+14, r17	; 0x0e
    ac2c:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    ac2e:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    ac30:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    ac32:	82 30       	cpi	r24, 0x02	; 2
    ac34:	11 f0       	breq	.+4      	; 0xac3a <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    ac36:	88 83       	st	Y, r24
    ac38:	01 c0       	rjmp	.+2      	; 0xac3c <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    ac3a:	18 82       	st	Y, r1
	}
}
    ac3c:	df 91       	pop	r29
    ac3e:	cf 91       	pop	r28
    ac40:	1f 91       	pop	r17
    ac42:	0f 91       	pop	r16
    ac44:	ff 90       	pop	r15
    ac46:	ef 90       	pop	r14
    ac48:	08 95       	ret

0000ac4a <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    ac4a:	fb 01       	movw	r30, r22
	switch (tile_type)
    ac4c:	84 30       	cpi	r24, 0x04	; 4
    ac4e:	71 f0       	breq	.+28     	; 0xac6c <richochet+0x22>
    ac50:	18 f4       	brcc	.+6      	; 0xac58 <richochet+0xe>
    ac52:	83 30       	cpi	r24, 0x03	; 3
    ac54:	31 f0       	breq	.+12     	; 0xac62 <richochet+0x18>
    ac56:	08 95       	ret
    ac58:	85 30       	cpi	r24, 0x05	; 5
    ac5a:	99 f0       	breq	.+38     	; 0xac82 <richochet+0x38>
    ac5c:	86 30       	cpi	r24, 0x06	; 6
    ac5e:	59 f0       	breq	.+22     	; 0xac76 <richochet+0x2c>
    ac60:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac62:	80 81       	ld	r24, Z
    ac64:	8d 7f       	andi	r24, 0xFD	; 253
    ac66:	29 f4       	brne	.+10     	; 0xac72 <richochet+0x28>
				sprite->direction = D_RIGHT;
    ac68:	81 e0       	ldi	r24, 0x01	; 1
    ac6a:	09 c0       	rjmp	.+18     	; 0xac7e <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac6c:	80 81       	ld	r24, Z
    ac6e:	8d 7f       	andi	r24, 0xFD	; 253
    ac70:	29 f0       	breq	.+10     	; 0xac7c <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ac72:	82 e0       	ldi	r24, 0x02	; 2
    ac74:	04 c0       	rjmp	.+8      	; 0xac7e <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac76:	80 81       	ld	r24, Z
    ac78:	8d 7f       	andi	r24, 0xFD	; 253
    ac7a:	31 f4       	brne	.+12     	; 0xac88 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ac7c:	83 e0       	ldi	r24, 0x03	; 3
    ac7e:	80 83       	st	Z, r24
    ac80:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac82:	80 81       	ld	r24, Z
    ac84:	8d 7f       	andi	r24, 0xFD	; 253
    ac86:	81 f3       	breq	.-32     	; 0xac68 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ac88:	10 82       	st	Z, r1
    ac8a:	08 95       	ret

0000ac8c <get_interesting_tile_indexes>:
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ac8c:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ac8e:	70 e0       	ldi	r23, 0x00	; 0
    ac90:	8e e1       	ldi	r24, 0x1E	; 30
    ac92:	48 9f       	mul	r20, r24
    ac94:	60 0d       	add	r22, r0
    ac96:	71 1d       	adc	r23, r1
    ac98:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac9a:	21 11       	cpse	r18, r1
    ac9c:	09 c0       	rjmp	.+18     	; 0xacb0 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ac9e:	71 83       	std	Z+1, r23	; 0x01
    aca0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    aca2:	cb 01       	movw	r24, r22
    aca4:	01 96       	adiw	r24, 0x01	; 1
    aca6:	93 83       	std	Z+3, r25	; 0x03
    aca8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    acaa:	6e 5f       	subi	r22, 0xFE	; 254
    acac:	7f 4f       	sbci	r23, 0xFF	; 255
    acae:	12 c0       	rjmp	.+36     	; 0xacd4 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    acb0:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    acb2:	21 30       	cpi	r18, 0x01	; 1
    acb4:	29 f4       	brne	.+10     	; 0xacc0 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    acb6:	02 96       	adiw	r24, 0x02	; 2
    acb8:	91 83       	std	Z+1, r25	; 0x01
    acba:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    acbc:	4e 96       	adiw	r24, 0x1e	; 30
    acbe:	06 c0       	rjmp	.+12     	; 0xaccc <get_interesting_tile_indexes+0x40>
    acc0:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    acc2:	22 30       	cpi	r18, 0x02	; 2
    acc4:	51 f4       	brne	.+20     	; 0xacda <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    acc6:	91 83       	std	Z+1, r25	; 0x01
    acc8:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    acca:	01 96       	adiw	r24, 0x01	; 1
    accc:	93 83       	std	Z+3, r25	; 0x03
    acce:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    acd0:	62 5c       	subi	r22, 0xC2	; 194
    acd2:	7f 4f       	sbci	r23, 0xFF	; 255
    acd4:	75 83       	std	Z+5, r23	; 0x05
    acd6:	64 83       	std	Z+4, r22	; 0x04
    acd8:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    acda:	71 83       	std	Z+1, r23	; 0x01
    acdc:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    acde:	62 5e       	subi	r22, 0xE2	; 226
    ace0:	7f 4f       	sbci	r23, 0xFF	; 255
    ace2:	73 83       	std	Z+3, r23	; 0x03
    ace4:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    ace6:	95 83       	std	Z+5, r25	; 0x05
    ace8:	84 83       	std	Z+4, r24	; 0x04
    acea:	08 95       	ret

0000acec <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    acec:	1f 93       	push	r17
    acee:	cf 93       	push	r28
    acf0:	df 93       	push	r29
	if (!(other_player->flags & EXPLODING_FLAG))
    acf2:	fb 01       	movw	r30, r22
    acf4:	32 85       	ldd	r19, Z+10	; 0x0a
    acf6:	30 fd       	sbrc	r19, 0
    acf8:	19 c0       	rjmp	.+50     	; 0xad2c <explode_player+0x40>
    acfa:	12 2f       	mov	r17, r18
    acfc:	eb 01       	movw	r28, r22
	{
		player->netMessage.level_score++;
    acfe:	fc 01       	movw	r30, r24
    ad00:	ef 58       	subi	r30, 0x8F	; 143
    ad02:	ff 4f       	sbci	r31, 0xFF	; 255
    ad04:	20 81       	ld	r18, Z
    ad06:	2f 5f       	subi	r18, 0xFF	; 255
    ad08:	20 83       	st	Z, r18
		player->netMessage.score++;
    ad0a:	31 97       	sbiw	r30, 0x01	; 1
    ad0c:	20 81       	ld	r18, Z
    ad0e:	2f 5f       	subi	r18, 0xFF	; 255
    ad10:	20 83       	st	Z, r18
		render_score(player, hud_x);
    ad12:	64 2f       	mov	r22, r20
    ad14:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
		kill_player(other_player, other_player_hud_x);
    ad18:	61 2f       	mov	r22, r17
    ad1a:	ce 01       	movw	r24, r28
    ad1c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    ad20:	86 e0       	ldi	r24, 0x06	; 6
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
	}
}
    ad22:	df 91       	pop	r29
    ad24:	cf 91       	pop	r28
    ad26:	1f 91       	pop	r17
    ad28:	0c 94 8a 49 	jmp	0x9314	; 0x9314 <LBPlaySound.part.2>
    ad2c:	df 91       	pop	r29
    ad2e:	cf 91       	pop	r28
    ad30:	1f 91       	pop	r17
    ad32:	08 95       	ret

0000ad34 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    ad34:	9c 01       	movw	r18, r24
    ad36:	e6 2f       	mov	r30, r22
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
    ad38:	dc 01       	movw	r26, r24
    ad3a:	ae 58       	subi	r26, 0x8E	; 142
    ad3c:	bf 4f       	sbci	r27, 0xFF	; 255
    ad3e:	9c 91       	ld	r25, X
    ad40:	9d 7f       	andi	r25, 0xFD	; 253
    ad42:	d9 f4       	brne	.+54     	; 0xad7a <slide+0x46>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
    ad44:	ca 01       	movw	r24, r20
    ad46:	6e e1       	ldi	r22, 0x1E	; 30
    ad48:	70 e0       	ldi	r23, 0x00	; 0
    ad4a:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    ad4e:	60 e2       	ldi	r22, 0x20	; 32
    ad50:	73 e0       	ldi	r23, 0x03	; 3
    ad52:	86 9f       	mul	r24, r22
    ad54:	a0 01       	movw	r20, r0
    ad56:	87 9f       	mul	r24, r23
    ad58:	50 0d       	add	r21, r0
    ad5a:	96 9f       	mul	r25, r22
    ad5c:	50 0d       	add	r21, r0
    ad5e:	11 24       	eor	r1, r1
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->netMessage.shared.x - tile_x) > 400))
    ad60:	e1 11       	cpse	r30, r1
    ad62:	04 c0       	rjmp	.+8      	; 0xad6c <slide+0x38>
    ad64:	f9 01       	movw	r30, r18
    ad66:	ea 58       	subi	r30, 0x8A	; 138
    ad68:	ff 4f       	sbci	r31, 0xFF	; 255
    ad6a:	1c c0       	rjmp	.+56     	; 0xada4 <slide+0x70>
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 + 100;
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
    ad6c:	e2 30       	cpi	r30, 0x02	; 2
    ad6e:	09 f0       	breq	.+2      	; 0xad72 <slide+0x3e>
    ad70:	48 c0       	rjmp	.+144    	; 0xae02 <slide+0xce>
    ad72:	f9 01       	movw	r30, r18
    ad74:	ea 58       	subi	r30, 0x8A	; 138
    ad76:	ff 4f       	sbci	r31, 0xFF	; 255
    ad78:	2f c0       	rjmp	.+94     	; 0xadd8 <slide+0xa4>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
    ad7a:	ca 01       	movw	r24, r20
    ad7c:	6e e1       	ldi	r22, 0x1E	; 30
    ad7e:	70 e0       	ldi	r23, 0x00	; 0
    ad80:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    ad84:	6d 5f       	subi	r22, 0xFD	; 253
    ad86:	7f 4f       	sbci	r23, 0xFF	; 255
    ad88:	80 e2       	ldi	r24, 0x20	; 32
    ad8a:	93 e0       	ldi	r25, 0x03	; 3
    ad8c:	68 9f       	mul	r22, r24
    ad8e:	a0 01       	movw	r20, r0
    ad90:	69 9f       	mul	r22, r25
    ad92:	50 0d       	add	r21, r0
    ad94:	78 9f       	mul	r23, r24
    ad96:	50 0d       	add	r21, r0
    ad98:	11 24       	eor	r1, r1
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 - 100;
	}
	else
	{
		if (collision_tile == 0 && ((player->netMessage.shared.y - tile_y) > 400))
    ad9a:	e1 11       	cpse	r30, r1
    ad9c:	18 c0       	rjmp	.+48     	; 0xadce <slide+0x9a>
    ad9e:	f9 01       	movw	r30, r18
    ada0:	e8 58       	subi	r30, 0x88	; 136
    ada2:	ff 4f       	sbci	r31, 0xFF	; 255
    ada4:	80 81       	ld	r24, Z
    ada6:	91 81       	ldd	r25, Z+1	; 0x01
    ada8:	9c 01       	movw	r18, r24
    adaa:	24 1b       	sub	r18, r20
    adac:	35 0b       	sbc	r19, r21
    adae:	21 39       	cpi	r18, 0x91	; 145
    adb0:	31 40       	sbci	r19, 0x01	; 1
    adb2:	38 f1       	brcs	.+78     	; 0xae02 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 + 100;
    adb4:	64 e6       	ldi	r22, 0x64	; 100
    adb6:	70 e0       	ldi	r23, 0x00	; 0
    adb8:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    adbc:	6f 5f       	subi	r22, 0xFF	; 255
    adbe:	7f 4f       	sbci	r23, 0xFF	; 255
    adc0:	24 e6       	ldi	r18, 0x64	; 100
    adc2:	26 9f       	mul	r18, r22
    adc4:	c0 01       	movw	r24, r0
    adc6:	27 9f       	mul	r18, r23
    adc8:	90 0d       	add	r25, r0
    adca:	11 24       	eor	r1, r1
    adcc:	18 c0       	rjmp	.+48     	; 0xadfe <slide+0xca>
		else if (collision_tile == 2 && ((tile_y - player->netMessage.shared.y) > 1200))
    adce:	e2 30       	cpi	r30, 0x02	; 2
    add0:	c1 f4       	brne	.+48     	; 0xae02 <slide+0xce>
    add2:	f9 01       	movw	r30, r18
    add4:	e8 58       	subi	r30, 0x88	; 136
    add6:	ff 4f       	sbci	r31, 0xFF	; 255
    add8:	80 81       	ld	r24, Z
    adda:	91 81       	ldd	r25, Z+1	; 0x01
    addc:	48 1b       	sub	r20, r24
    adde:	59 0b       	sbc	r21, r25
    ade0:	41 3b       	cpi	r20, 0xB1	; 177
    ade2:	54 40       	sbci	r21, 0x04	; 4
    ade4:	70 f0       	brcs	.+28     	; 0xae02 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
    ade6:	64 e6       	ldi	r22, 0x64	; 100
    ade8:	70 e0       	ldi	r23, 0x00	; 0
    adea:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    adee:	24 e6       	ldi	r18, 0x64	; 100
    adf0:	26 9f       	mul	r18, r22
    adf2:	c0 01       	movw	r24, r0
    adf4:	27 9f       	mul	r18, r23
    adf6:	90 0d       	add	r25, r0
    adf8:	11 24       	eor	r1, r1
    adfa:	84 56       	subi	r24, 0x64	; 100
    adfc:	91 09       	sbc	r25, r1
    adfe:	91 83       	std	Z+1, r25	; 0x01
    ae00:	80 83       	st	Z, r24
    ae02:	08 95       	ret

0000ae04 <load_level_tiles>:
	}
	return explode;
}

void load_level_tiles(u8 blank)
{
    ae04:	ef 92       	push	r14
    ae06:	ff 92       	push	r15
    ae08:	1f 93       	push	r17
    ae0a:	cf 93       	push	r28
    ae0c:	df 93       	push	r29
    ae0e:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    ae10:	c0 e0       	ldi	r28, 0x00	; 0
    ae12:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    ae14:	8e e1       	ldi	r24, 0x1E	; 30
    ae16:	e8 2e       	mov	r14, r24
    ae18:	f1 2c       	mov	r15, r1
    ae1a:	ce 01       	movw	r24, r28
    ae1c:	b7 01       	movw	r22, r14
    ae1e:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
		y = 3 + i / 30;
    ae22:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    ae24:	11 23       	and	r17, r17
    ae26:	19 f0       	breq	.+6      	; 0xae2e <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    ae28:	4e e5       	ldi	r20, 0x5E	; 94
    ae2a:	5b e6       	ldi	r21, 0x6B	; 107
    ae2c:	2d c0       	rjmp	.+90     	; 0xae88 <load_level_tiles+0x84>
    ae2e:	fe 01       	movw	r30, r28
    ae30:	e1 5d       	subi	r30, 0xD1	; 209
    ae32:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    ae34:	91 81       	ldd	r25, Z+1	; 0x01
    ae36:	97 30       	cpi	r25, 0x07	; 7
    ae38:	99 f1       	breq	.+102    	; 0xaea0 <load_level_tiles+0x9c>
    ae3a:	88 f4       	brcc	.+34     	; 0xae5e <load_level_tiles+0x5a>
    ae3c:	93 30       	cpi	r25, 0x03	; 3
    ae3e:	39 f1       	breq	.+78     	; 0xae8e <load_level_tiles+0x8a>
    ae40:	40 f4       	brcc	.+16     	; 0xae52 <load_level_tiles+0x4e>
    ae42:	91 30       	cpi	r25, 0x01	; 1
    ae44:	f9 f0       	breq	.+62     	; 0xae84 <load_level_tiles+0x80>
    ae46:	92 30       	cpi	r25, 0x02	; 2
    ae48:	09 f0       	breq	.+2      	; 0xae4c <load_level_tiles+0x48>
    ae4a:	3f c0       	rjmp	.+126    	; 0xaeca <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    ae4c:	44 ec       	ldi	r20, 0xC4	; 196
    ae4e:	5a e6       	ldi	r21, 0x6A	; 106
    ae50:	1b c0       	rjmp	.+54     	; 0xae88 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae52:	95 30       	cpi	r25, 0x05	; 5
    ae54:	f9 f0       	breq	.+62     	; 0xae94 <load_level_tiles+0x90>
    ae56:	08 f5       	brcc	.+66     	; 0xae9a <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    ae58:	49 ea       	ldi	r20, 0xA9	; 169
    ae5a:	5a e6       	ldi	r21, 0x6A	; 106
    ae5c:	15 c0       	rjmp	.+42     	; 0xae88 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae5e:	9c 32       	cpi	r25, 0x2C	; 44
    ae60:	59 f1       	breq	.+86     	; 0xaeb8 <load_level_tiles+0xb4>
    ae62:	38 f4       	brcc	.+14     	; 0xae72 <load_level_tiles+0x6e>
    ae64:	98 30       	cpi	r25, 0x08	; 8
    ae66:	f9 f0       	breq	.+62     	; 0xaea6 <load_level_tiles+0xa2>
    ae68:	99 30       	cpi	r25, 0x09	; 9
    ae6a:	79 f5       	brne	.+94     	; 0xaeca <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    ae6c:	4b eb       	ldi	r20, 0xBB	; 187
    ae6e:	5a e6       	ldi	r21, 0x6A	; 106
    ae70:	0b c0       	rjmp	.+22     	; 0xae88 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae72:	92 34       	cpi	r25, 0x42	; 66
    ae74:	d9 f0       	breq	.+54     	; 0xaeac <load_level_tiles+0xa8>
    ae76:	9d 34       	cpi	r25, 0x4D	; 77
    ae78:	e1 f0       	breq	.+56     	; 0xaeb2 <load_level_tiles+0xae>
    ae7a:	97 33       	cpi	r25, 0x37	; 55
    ae7c:	31 f5       	brne	.+76     	; 0xaeca <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    ae7e:	4d e9       	ldi	r20, 0x9D	; 157
    ae80:	5a e6       	ldi	r21, 0x6A	; 106
    ae82:	02 c0       	rjmp	.+4      	; 0xae88 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    ae84:	47 ec       	ldi	r20, 0xC7	; 199
    ae86:	5a e6       	ldi	r21, 0x6A	; 106
    ae88:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    ae8c:	22 c0       	rjmp	.+68     	; 0xaed2 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    ae8e:	4f ea       	ldi	r20, 0xAF	; 175
    ae90:	5a e6       	ldi	r21, 0x6A	; 106
    ae92:	fa cf       	rjmp	.-12     	; 0xae88 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    ae94:	46 ea       	ldi	r20, 0xA6	; 166
    ae96:	5a e6       	ldi	r21, 0x6A	; 106
    ae98:	f7 cf       	rjmp	.-18     	; 0xae88 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    ae9a:	4c ea       	ldi	r20, 0xAC	; 172
    ae9c:	5a e6       	ldi	r21, 0x6A	; 106
    ae9e:	f4 cf       	rjmp	.-24     	; 0xae88 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    aea0:	41 ec       	ldi	r20, 0xC1	; 193
    aea2:	5a e6       	ldi	r21, 0x6A	; 106
    aea4:	f1 cf       	rjmp	.-30     	; 0xae88 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    aea6:	4e eb       	ldi	r20, 0xBE	; 190
    aea8:	5a e6       	ldi	r21, 0x6A	; 106
    aeaa:	ee cf       	rjmp	.-36     	; 0xae88 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    aeac:	40 ea       	ldi	r20, 0xA0	; 160
    aeae:	5a e6       	ldi	r21, 0x6A	; 106
    aeb0:	eb cf       	rjmp	.-42     	; 0xae88 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    aeb2:	43 ea       	ldi	r20, 0xA3	; 163
    aeb4:	5a e6       	ldi	r21, 0x6A	; 106
    aeb6:	e8 cf       	rjmp	.-48     	; 0xae88 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    aeb8:	43 ea       	ldi	r20, 0xA3	; 163
    aeba:	5a e6       	ldi	r21, 0x6A	; 106
    aebc:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    aec0:	d0 93 c0 0f 	sts	0x0FC0, r29
    aec4:	c0 93 bf 0f 	sts	0x0FBF, r28
    aec8:	04 c0       	rjmp	.+8      	; 0xaed2 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    aeca:	40 e0       	ldi	r20, 0x00	; 0
    aecc:	50 e0       	ldi	r21, 0x00	; 0
    aece:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    aed2:	21 96       	adiw	r28, 0x01	; 1
    aed4:	ce 3e       	cpi	r28, 0xEE	; 238
    aed6:	82 e0       	ldi	r24, 0x02	; 2
    aed8:	d8 07       	cpc	r29, r24
    aeda:	09 f0       	breq	.+2      	; 0xaede <load_level_tiles+0xda>
    aedc:	9e cf       	rjmp	.-196    	; 0xae1a <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    aede:	df 91       	pop	r29
    aee0:	cf 91       	pop	r28
    aee2:	1f 91       	pop	r17
    aee4:	ff 90       	pop	r15
    aee6:	ef 90       	pop	r14
    aee8:	08 95       	ret

0000aeea <prep_player>:

void prep_player(Player* p, u16 x, u16 y)
{
    aeea:	cf 93       	push	r28
    aeec:	df 93       	push	r29
    aeee:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    aef0:	7f 83       	std	Y+7, r23	; 0x07
    aef2:	6e 83       	std	Y+6, r22	; 0x06
	p->spawn_y = y;
    aef4:	59 87       	std	Y+9, r21	; 0x09
    aef6:	48 87       	std	Y+8, r20	; 0x08
	p->netMessage.level_score = 0;
    aef8:	fc 01       	movw	r30, r24
    aefa:	ef 58       	subi	r30, 0x8F	; 143
    aefc:	ff 4f       	sbci	r31, 0xFF	; 255
    aefe:	10 82       	st	Z, r1
	p->old_level_score = 0;
    af00:	1b 8a       	std	Y+19, r1	; 0x13
	p->has_over_speed = false;
    af02:	1f 86       	std	Y+15, r1	; 0x0f
	p->has_rocket = false;
    af04:	1e 86       	std	Y+14, r1	; 0x0e
	p->max_speed = MAX_SPEED;
    af06:	88 e8       	ldi	r24, 0x88	; 136
    af08:	93 e1       	ldi	r25, 0x13	; 19
    af0a:	9d 87       	std	Y+13, r25	; 0x0d
    af0c:	8c 87       	std	Y+12, r24	; 0x0c
	player_init_shot_state(p);
    af0e:	ce 01       	movw	r24, r28
    af10:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <player_init_shot_state>
	player_spawn(p);
    af14:	ce 01       	movw	r24, r28
}
    af16:	df 91       	pop	r29
    af18:	cf 91       	pop	r28
	p->old_level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    af1a:	0c 94 dc 4e 	jmp	0x9db8	; 0x9db8 <player_spawn>

0000af1e <load_level>:
}

void load_level(int level_number)
{
    af1e:	4f 92       	push	r4
    af20:	5f 92       	push	r5
    af22:	6f 92       	push	r6
    af24:	7f 92       	push	r7
    af26:	8f 92       	push	r8
    af28:	9f 92       	push	r9
    af2a:	af 92       	push	r10
    af2c:	bf 92       	push	r11
    af2e:	cf 92       	push	r12
    af30:	df 92       	push	r13
    af32:	ef 92       	push	r14
    af34:	ff 92       	push	r15
    af36:	0f 93       	push	r16
    af38:	1f 93       	push	r17
    af3a:	cf 93       	push	r28
    af3c:	df 93       	push	r29
    af3e:	ec 01       	movw	r28, r24
    u16 level_start = level_number*30*25;
    af40:	8e ee       	ldi	r24, 0xEE	; 238
    af42:	92 e0       	ldi	r25, 0x02	; 2
    af44:	c8 9f       	mul	r28, r24
    af46:	20 01       	movw	r4, r0
    af48:	c9 9f       	mul	r28, r25
    af4a:	50 0c       	add	r5, r0
    af4c:	d8 9f       	mul	r29, r24
    af4e:	50 0c       	add	r5, r0
    af50:	11 24       	eor	r1, r1
	u16 x;
	u16 y;

	game.scope_counter = 0;
    af52:	10 92 82 0b 	sts	0x0B82, r1
    af56:	10 92 81 0b 	sts	0x0B81, r1
	init_tile_animations(&tile_animations);
    af5a:	8a e8       	ldi	r24, 0x8A	; 138
    af5c:	9b e0       	ldi	r25, 0x0B	; 11
    af5e:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <init_tile_animations>
	init_scope_animation(&scope_animation);
    af62:	83 eb       	ldi	r24, 0xB3	; 179
    af64:	9f e0       	ldi	r25, 0x0F	; 15
    af66:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <init_scope_animation>
	init_sub_animation(&sub_animation);
    af6a:	85 ea       	ldi	r24, 0xA5	; 165
    af6c:	9f e0       	ldi	r25, 0x0F	; 15
    af6e:	0e 94 ad 4d 	call	0x9b5a	; 0x9b5a <init_sub_animation>
	game.current_screen = LEVEL;
    af72:	83 e0       	ldi	r24, 0x03	; 3
    af74:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    af78:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	game.current_level = level_number;
    af7c:	c0 93 77 0b 	sts	0x0B77, r28
    af80:	00 e3       	ldi	r16, 0x30	; 48
    af82:	1c e0       	ldi	r17, 0x0C	; 12
	for (u16 i = 0; i < 30*25; i++)
    af84:	c0 e0       	ldi	r28, 0x00	; 0
    af86:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = (i % 30) * 800;
    af88:	8e e1       	ldi	r24, 0x1E	; 30
    af8a:	a8 2e       	mov	r10, r24
    af8c:	b1 2c       	mov	r11, r1
    af8e:	90 e2       	ldi	r25, 0x20	; 32
    af90:	c9 2e       	mov	r12, r25
    af92:	93 e0       	ldi	r25, 0x03	; 3
    af94:	d9 2e       	mov	r13, r25
    af96:	ce 01       	movw	r24, r28
    af98:	b5 01       	movw	r22, r10
    af9a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    af9e:	8c 9d       	mul	r24, r12
    afa0:	30 01       	movw	r6, r0
    afa2:	8d 9d       	mul	r24, r13
    afa4:	70 0c       	add	r7, r0
    afa6:	9c 9d       	mul	r25, r12
    afa8:	70 0c       	add	r7, r0
    afaa:	11 24       	eor	r1, r1
		y = (i / 30 + 3) * 800;
    afac:	6c 9d       	mul	r22, r12
    afae:	70 01       	movw	r14, r0
    afb0:	6d 9d       	mul	r22, r13
    afb2:	f0 0c       	add	r15, r0
    afb4:	7c 9d       	mul	r23, r12
    afb6:	f0 0c       	add	r15, r0
    afb8:	11 24       	eor	r1, r1
    afba:	a0 ea       	ldi	r26, 0xA0	; 160
    afbc:	ea 1a       	sub	r14, r26
    afbe:	a6 ef       	ldi	r26, 0xF6	; 246
    afc0:	fa 0a       	sbc	r15, r26
    afc2:	fe 01       	movw	r30, r28
    afc4:	e4 0d       	add	r30, r4
    afc6:	f5 1d       	adc	r31, r5
    afc8:	ef 56       	subi	r30, 0x6F	; 111
    afca:	f8 4f       	sbci	r31, 0xF8	; 248
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    afcc:	e4 91       	lpm	r30, Z
    afce:	48 01       	movw	r8, r16
    afd0:	d8 01       	movw	r26, r16
    afd2:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    afd4:	e8 35       	cpi	r30, 0x58	; 88
    afd6:	31 f4       	brne	.+12     	; 0xafe4 <load_level+0xc6>
		{
			prep_player(&player1, x, y);
    afd8:	a7 01       	movw	r20, r14
    afda:	b3 01       	movw	r22, r6
    afdc:	88 ea       	ldi	r24, 0xA8	; 168
    afde:	9b e0       	ldi	r25, 0x0B	; 11
    afe0:	0e 94 75 57 	call	0xaeea	; 0xaeea <prep_player>
    afe4:	0f 5f       	subi	r16, 0xFF	; 255
    afe6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (level.level_map[i] == L_P2_SPAWN)
    afe8:	f4 01       	movw	r30, r8
    afea:	80 81       	ld	r24, Z
    afec:	83 36       	cpi	r24, 0x63	; 99
    afee:	31 f4       	brne	.+12     	; 0xaffc <load_level+0xde>
		{
			prep_player(&player2, x, y);
    aff0:	a7 01       	movw	r20, r14
    aff2:	b3 01       	movw	r22, r6
    aff4:	8e e1       	ldi	r24, 0x1E	; 30
    aff6:	9f e0       	ldi	r25, 0x0F	; 15
    aff8:	0e 94 75 57 	call	0xaeea	; 0xaeea <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (u16 i = 0; i < 30*25; i++)
    affc:	21 96       	adiw	r28, 0x01	; 1
    affe:	ce 3e       	cpi	r28, 0xEE	; 238
    b000:	f2 e0       	ldi	r31, 0x02	; 2
    b002:	df 07       	cpc	r29, r31
    b004:	41 f6       	brne	.-112    	; 0xaf96 <load_level+0x78>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b006:	60 e0       	ldi	r22, 0x00	; 0
    b008:	88 ea       	ldi	r24, 0xA8	; 168
    b00a:	9b e0       	ldi	r25, 0x0B	; 11
    b00c:	0e 94 b4 50 	call	0xa168	; 0xa168 <render_hud>
	render_hud(&player2, 15);
    b010:	6f e0       	ldi	r22, 0x0F	; 15
    b012:	8e e1       	ldi	r24, 0x1E	; 30
    b014:	9f e0       	ldi	r25, 0x0F	; 15
    b016:	0e 94 b4 50 	call	0xa168	; 0xa168 <render_hud>
	render_score(&player1, 0);
    b01a:	60 e0       	ldi	r22, 0x00	; 0
    b01c:	88 ea       	ldi	r24, 0xA8	; 168
    b01e:	9b e0       	ldi	r25, 0x0B	; 11
    b020:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
	render_score(&player2, 15);
    b024:	6f e0       	ldi	r22, 0x0F	; 15
    b026:	8e e1       	ldi	r24, 0x1E	; 30
    b028:	9f e0       	ldi	r25, 0x0F	; 15
    b02a:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
	Print(14, 0, (char*) strVertSep);
    b02e:	41 e3       	ldi	r20, 0x31	; 49
    b030:	54 e0       	ldi	r21, 0x04	; 4
    b032:	60 e0       	ldi	r22, 0x00	; 0
    b034:	70 e0       	ldi	r23, 0x00	; 0
    b036:	8e e0       	ldi	r24, 0x0E	; 14
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(14, 1, (char*) strVertSep);
    b03e:	41 e3       	ldi	r20, 0x31	; 49
    b040:	54 e0       	ldi	r21, 0x04	; 4
    b042:	61 e0       	ldi	r22, 0x01	; 1
    b044:	70 e0       	ldi	r23, 0x00	; 0
    b046:	8e e0       	ldi	r24, 0x0E	; 14
    b048:	90 e0       	ldi	r25, 0x00	; 0
    b04a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(14, 2, (char*) strVertSep);
    b04e:	41 e3       	ldi	r20, 0x31	; 49
    b050:	54 e0       	ldi	r21, 0x04	; 4
    b052:	62 e0       	ldi	r22, 0x02	; 2
    b054:	70 e0       	ldi	r23, 0x00	; 0
    b056:	8e e0       	ldi	r24, 0x0E	; 14
    b058:	90 e0       	ldi	r25, 0x00	; 0
    b05a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	load_level_tiles(false);
    b05e:	80 e0       	ldi	r24, 0x00	; 0
}
    b060:	df 91       	pop	r29
    b062:	cf 91       	pop	r28
    b064:	1f 91       	pop	r17
    b066:	0f 91       	pop	r16
    b068:	ff 90       	pop	r15
    b06a:	ef 90       	pop	r14
    b06c:	df 90       	pop	r13
    b06e:	cf 90       	pop	r12
    b070:	bf 90       	pop	r11
    b072:	af 90       	pop	r10
    b074:	9f 90       	pop	r9
    b076:	8f 90       	pop	r8
    b078:	7f 90       	pop	r7
    b07a:	6f 90       	pop	r6
    b07c:	5f 90       	pop	r5
    b07e:	4f 90       	pop	r4
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b080:	0c 94 02 57 	jmp	0xae04	; 0xae04 <load_level_tiles>

0000b084 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b084:	cf 93       	push	r28
    b086:	df 93       	push	r29
    b088:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    b08a:	61 e0       	ldi	r22, 0x01	; 1
    b08c:	83 e0       	ldi	r24, 0x03	; 3
    b08e:	0e 94 55 49 	call	0x92aa	; 0x92aa <FadeOut>
	ClearVram();
    b092:	0e 94 40 3a 	call	0x7480	; 0x7480 <ClearVram>
	clear_sprites();
    b096:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b09a:	d0 e0       	ldi	r29, 0x00	; 0
    b09c:	ae 01       	movw	r20, r28
    b09e:	84 e0       	ldi	r24, 0x04	; 4
    b0a0:	44 0f       	add	r20, r20
    b0a2:	55 1f       	adc	r21, r21
    b0a4:	8a 95       	dec	r24
    b0a6:	e1 f7       	brne	.-8      	; 0xb0a0 <level_transition+0x1c>
    b0a8:	46 5c       	subi	r20, 0xC6	; 198
    b0aa:	5c 4f       	sbci	r21, 0xFC	; 252
    b0ac:	6c e0       	ldi	r22, 0x0C	; 12
    b0ae:	70 e0       	ldi	r23, 0x00	; 0
    b0b0:	88 e0       	ldi	r24, 0x08	; 8
    b0b2:	90 e0       	ldi	r25, 0x00	; 0
    b0b4:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	FadeIn(1, true);
    b0b8:	61 e0       	ldi	r22, 0x01	; 1
    b0ba:	81 e0       	ldi	r24, 0x01	; 1
    b0bc:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    b0c0:	84 e0       	ldi	r24, 0x04	; 4
    b0c2:	0e 94 9e 4a 	call	0x953c	; 0x953c <LBWaitSeconds>
	FadeOut(1, true);
    b0c6:	61 e0       	ldi	r22, 0x01	; 1
    b0c8:	81 e0       	ldi	r24, 0x01	; 1
    b0ca:	0e 94 55 49 	call	0x92aa	; 0x92aa <FadeOut>
	ClearVram();
    b0ce:	0e 94 40 3a 	call	0x7480	; 0x7480 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b0d2:	60 e0       	ldi	r22, 0x00	; 0
    b0d4:	83 e0       	ldi	r24, 0x03	; 3
    b0d6:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	load_level(index);
    b0da:	ce 01       	movw	r24, r28
}
    b0dc:	df 91       	pop	r29
    b0de:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b0e0:	0c 94 8f 57 	jmp	0xaf1e	; 0xaf1e <load_level>

0000b0e4 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b0e4:	83 eb       	ldi	r24, 0xB3	; 179
    b0e6:	9f e0       	ldi	r25, 0x0F	; 15
    b0e8:	0e 94 64 51 	call	0xa2c8	; 0xa2c8 <render_scope>
    b0ec:	88 23       	and	r24, r24
    b0ee:	61 f0       	breq	.+24     	; 0xb108 <render_boss_fight_scope_load+0x24>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b0f0:	82 e0       	ldi	r24, 0x02	; 2
    b0f2:	80 93 79 0b 	sts	0x0B79, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ALARM);
    b0f6:	27 e0       	ldi	r18, 0x07	; 7
    b0f8:	40 91 28 0f 	lds	r20, 0x0F28
    b0fc:	60 91 b2 0b 	lds	r22, 0x0BB2
    b100:	80 91 89 0b 	lds	r24, 0x0B89
    b104:	0c 94 b7 4a 	jmp	0x956e	; 0x956e <LBPlaySound>
    b108:	08 95       	ret

0000b10a <render_boss_fight_sub_load>:
}

void render_boss_fight_sub_load()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b10a:	85 ea       	ldi	r24, 0xA5	; 165
    b10c:	9f e0       	ldi	r25, 0x0F	; 15
    b10e:	0e 94 b3 49 	call	0x9366	; 0x9366 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b112:	ac 01       	movw	r20, r24
    b114:	64 e0       	ldi	r22, 0x04	; 4
    b116:	81 e0       	ldi	r24, 0x01	; 1
    b118:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	if (sub_animation.anim.reversing)
    b11c:	80 91 aa 0f 	lds	r24, 0x0FAA
    b120:	88 23       	and	r24, r24
    b122:	99 f0       	breq	.+38     	; 0xb14a <render_boss_fight_sub_load+0x40>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b124:	84 e0       	ldi	r24, 0x04	; 4
    b126:	80 93 79 0b 	sts	0x0B79, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 7200);
    b12a:	40 e2       	ldi	r20, 0x20	; 32
    b12c:	5c e1       	ldi	r21, 0x1C	; 28
    b12e:	60 e8       	ldi	r22, 0x80	; 128
    b130:	75 e2       	ldi	r23, 0x25	; 37
    b132:	80 ef       	ldi	r24, 0xF0	; 240
    b134:	9f e0       	ldi	r25, 0x0F	; 15
    b136:	0e 94 0d 4e 	call	0x9c1a	; 0x9c1a <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 7200);
    b13a:	40 e2       	ldi	r20, 0x20	; 32
    b13c:	5c e1       	ldi	r21, 0x1C	; 28
    b13e:	60 e0       	ldi	r22, 0x00	; 0
    b140:	7b e4       	ldi	r23, 0x4B	; 75
    b142:	81 ec       	ldi	r24, 0xC1	; 193
    b144:	9f e0       	ldi	r25, 0x0F	; 15
    b146:	0c 94 0d 4e 	jmp	0x9c1a	; 0x9c1a <init_turret>
    b14a:	08 95       	ret

0000b14c <render_boss_fight_sub_sinking>:
}

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b14c:	85 ea       	ldi	r24, 0xA5	; 165
    b14e:	9f e0       	ldi	r25, 0x0F	; 15
    b150:	0e 94 b3 49 	call	0x9366	; 0x9366 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b154:	20 91 a5 0f 	lds	r18, 0x0FA5
    b158:	21 11       	cpse	r18, r1
    b15a:	05 c0       	rjmp	.+10     	; 0xb166 <render_boss_fight_sub_sinking+0x1a>
    b15c:	ac 01       	movw	r20, r24
    b15e:	64 e0       	ldi	r22, 0x04	; 4
    b160:	81 e0       	ldi	r24, 0x01	; 1
    b162:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	if (sub_animation.anim.looped)
    b166:	80 91 a9 0f 	lds	r24, 0x0FA9
    b16a:	88 23       	and	r24, r24
    b16c:	19 f0       	breq	.+6      	; 0xb174 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b16e:	88 e0       	ldi	r24, 0x08	; 8
    b170:	80 93 79 0b 	sts	0x0B79, r24
    b174:	08 95       	ret

0000b176 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b176:	0f 93       	push	r16
    b178:	cf 93       	push	r28
    b17a:	fc 01       	movw	r30, r24
    b17c:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shared.x / 100, t->shared.y / 100, 1, 1);
    b17e:	86 81       	ldd	r24, Z+6	; 0x06
    b180:	97 81       	ldd	r25, Z+7	; 0x07
    b182:	24 e6       	ldi	r18, 0x64	; 100
    b184:	30 e0       	ldi	r19, 0x00	; 0
    b186:	b9 01       	movw	r22, r18
    b188:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b18c:	46 2f       	mov	r20, r22
    b18e:	84 81       	ldd	r24, Z+4	; 0x04
    b190:	95 81       	ldd	r25, Z+5	; 0x05
    b192:	b9 01       	movw	r22, r18
    b194:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b198:	01 e0       	ldi	r16, 0x01	; 1
    b19a:	21 e0       	ldi	r18, 0x01	; 1
    b19c:	8c 2f       	mov	r24, r28
    b19e:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    b1a2:	cf 91       	pop	r28
    b1a4:	0f 91       	pop	r16
    b1a6:	08 95       	ret

0000b1a8 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b1a8:	0f 93       	push	r16
    b1aa:	cf 93       	push	r28
    b1ac:	fc 01       	movw	r30, r24
    b1ae:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
    b1b0:	87 85       	ldd	r24, Z+15	; 0x0f
    b1b2:	90 89       	ldd	r25, Z+16	; 0x10
    b1b4:	24 e6       	ldi	r18, 0x64	; 100
    b1b6:	30 e0       	ldi	r19, 0x00	; 0
    b1b8:	b9 01       	movw	r22, r18
    b1ba:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b1be:	46 2f       	mov	r20, r22
    b1c0:	85 85       	ldd	r24, Z+13	; 0x0d
    b1c2:	96 85       	ldd	r25, Z+14	; 0x0e
    b1c4:	b9 01       	movw	r22, r18
    b1c6:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b1ca:	01 e0       	ldi	r16, 0x01	; 1
    b1cc:	21 e0       	ldi	r18, 0x01	; 1
    b1ce:	8c 2f       	mov	r24, r28
    b1d0:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    b1d4:	cf 91       	pop	r28
    b1d6:	0f 91       	pop	r16
    b1d8:	08 95       	ret

0000b1da <update_turret>:

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
    b1da:	cf 93       	push	r28
    b1dc:	df 93       	push	r29
    b1de:	fc 01       	movw	r30, r24
	u8 x = t->shared.x / 800;
    b1e0:	24 81       	ldd	r18, Z+4	; 0x04
    b1e2:	35 81       	ldd	r19, Z+5	; 0x05
	u8 y = t->shared.y / 800 - 3;
    b1e4:	86 81       	ldd	r24, Z+6	; 0x06
    b1e6:	97 81       	ldd	r25, Z+7	; 0x07
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b1e8:	a0 85       	ldd	r26, Z+8	; 0x08
    b1ea:	a1 11       	cpse	r26, r1
    b1ec:	1a c0       	rjmp	.+52     	; 0xb222 <update_turret+0x48>
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
	u8 y = t->shared.y / 800 - 3;
    b1ee:	e0 e2       	ldi	r30, 0x20	; 32
    b1f0:	f3 e0       	ldi	r31, 0x03	; 3
    b1f2:	bf 01       	movw	r22, r30
    b1f4:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b1f8:	4d ef       	ldi	r20, 0xFD	; 253
    b1fa:	46 0f       	add	r20, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
    b1fc:	c9 01       	movw	r24, r18
    b1fe:	bf 01       	movw	r22, r30
    b200:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
	u8 y = t->shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    b204:	eb 01       	movw	r28, r22
    b206:	8e e1       	ldi	r24, 0x1E	; 30
    b208:	48 9f       	mul	r20, r24
    b20a:	c0 0d       	add	r28, r0
    b20c:	d1 1d       	adc	r29, r1
    b20e:	11 24       	eor	r1, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b210:	be 01       	movw	r22, r28
    b212:	8a e8       	ldi	r24, 0x8A	; 138
    b214:	9b e0       	ldi	r25, 0x0B	; 11
    b216:	0e 94 e7 55 	call	0xabce	; 0xabce <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b21a:	c1 5d       	subi	r28, 0xD1	; 209
    b21c:	d3 4f       	sbci	r29, 0xF3	; 243
    b21e:	19 82       	std	Y+1, r1	; 0x01
    b220:	27 c0       	rjmp	.+78     	; 0xb270 <update_turret+0x96>
	}
	else if (t->shared.direction == D_LEFT)
    b222:	80 81       	ld	r24, Z
    b224:	83 30       	cpi	r24, 0x03	; 3
    b226:	71 f4       	brne	.+28     	; 0xb244 <update_turret+0x6a>
	{
		if (t->shared.x < left_limit)
    b228:	26 17       	cp	r18, r22
    b22a:	37 07       	cpc	r19, r23
    b22c:	10 f4       	brcc	.+4      	; 0xb232 <update_turret+0x58>
		{
			t->shared.direction = D_RIGHT;
    b22e:	81 e0       	ldi	r24, 0x01	; 1
    b230:	0f c0       	rjmp	.+30     	; 0xb250 <update_turret+0x76>
			t->shared.speed = BOSS_TURRET_SPEED;
		}
		else
		{
			t->shared.x -= t->shared.speed / FRAME_TIME_INVERTED;
    b232:	81 81       	ldd	r24, Z+1	; 0x01
    b234:	92 81       	ldd	r25, Z+2	; 0x02
    b236:	6c e3       	ldi	r22, 0x3C	; 60
    b238:	70 e0       	ldi	r23, 0x00	; 0
    b23a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b23e:	26 1b       	sub	r18, r22
    b240:	37 0b       	sbc	r19, r23
    b242:	14 c0       	rjmp	.+40     	; 0xb26c <update_turret+0x92>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b244:	81 30       	cpi	r24, 0x01	; 1
    b246:	a1 f4       	brne	.+40     	; 0xb270 <update_turret+0x96>
	{
		if (t->shared.x > right_limit)
    b248:	42 17       	cp	r20, r18
    b24a:	53 07       	cpc	r21, r19
    b24c:	38 f4       	brcc	.+14     	; 0xb25c <update_turret+0x82>
		{
			t->shared.direction = D_LEFT;
    b24e:	83 e0       	ldi	r24, 0x03	; 3
    b250:	80 83       	st	Z, r24
			t->shared.speed = BOSS_TURRET_SPEED;
    b252:	88 e2       	ldi	r24, 0x28	; 40
    b254:	93 e2       	ldi	r25, 0x23	; 35
    b256:	92 83       	std	Z+2, r25	; 0x02
    b258:	81 83       	std	Z+1, r24	; 0x01
    b25a:	0a c0       	rjmp	.+20     	; 0xb270 <update_turret+0x96>
		}
		else
		{
			t->shared.x += t->shared.speed / FRAME_TIME_INVERTED;
    b25c:	81 81       	ldd	r24, Z+1	; 0x01
    b25e:	92 81       	ldd	r25, Z+2	; 0x02
    b260:	6c e3       	ldi	r22, 0x3C	; 60
    b262:	70 e0       	ldi	r23, 0x00	; 0
    b264:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    b268:	26 0f       	add	r18, r22
    b26a:	37 1f       	adc	r19, r23
    b26c:	35 83       	std	Z+5, r19	; 0x05
    b26e:	24 83       	std	Z+4, r18	; 0x04
		}
	}
}
    b270:	df 91       	pop	r29
    b272:	cf 91       	pop	r28
    b274:	08 95       	ret

0000b276 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    b276:	10 92 76 0b 	sts	0x0B76, r1
	game.selection = PVCPU;
    b27a:	10 92 89 0b 	sts	0x0B89, r1
	clear_sprites();
    b27e:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	if (wifi_status == WIFI_OK)
    b282:	80 91 a7 0b 	lds	r24, 0x0BA7
    b286:	81 11       	cpse	r24, r1
    b288:	02 c0       	rjmp	.+4      	; 0xb28e <load_splash+0x18>
	{
		cleanupWifi();
    b28a:	0e 94 ff 4b 	call	0x97fe	; 0x97fe <cleanupWifi>
	}
	Print(7, 13, (char*) str1Player);
    b28e:	49 e3       	ldi	r20, 0x39	; 57
    b290:	55 e0       	ldi	r21, 0x05	; 5
    b292:	6d e0       	ldi	r22, 0x0D	; 13
    b294:	70 e0       	ldi	r23, 0x00	; 0
    b296:	87 e0       	ldi	r24, 0x07	; 7
    b298:	90 e0       	ldi	r25, 0x00	; 0
    b29a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(7, 14, (char*) str2Player);
    b29e:	48 e2       	ldi	r20, 0x28	; 40
    b2a0:	55 e0       	ldi	r21, 0x05	; 5
    b2a2:	6e e0       	ldi	r22, 0x0E	; 14
    b2a4:	70 e0       	ldi	r23, 0x00	; 0
    b2a6:	87 e0       	ldi	r24, 0x07	; 7
    b2a8:	90 e0       	ldi	r25, 0x00	; 0
    b2aa:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	if (wifi_status == WIFI_OK) {
    b2ae:	80 91 a7 0b 	lds	r24, 0x0BA7
    b2b2:	81 11       	cpse	r24, r1
    b2b4:	10 c0       	rjmp	.+32     	; 0xb2d6 <load_splash+0x60>
		Print(7, 15, (char*) strHostNetGame);
    b2b6:	4a e1       	ldi	r20, 0x1A	; 26
    b2b8:	55 e0       	ldi	r21, 0x05	; 5
    b2ba:	6f e0       	ldi	r22, 0x0F	; 15
    b2bc:	70 e0       	ldi	r23, 0x00	; 0
    b2be:	87 e0       	ldi	r24, 0x07	; 7
    b2c0:	90 e0       	ldi	r25, 0x00	; 0
    b2c2:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		Print(7, 16, (char*) strJoinNetGame);
    b2c6:	4c e0       	ldi	r20, 0x0C	; 12
    b2c8:	55 e0       	ldi	r21, 0x05	; 5
    b2ca:	60 e1       	ldi	r22, 0x10	; 16
    b2cc:	70 e0       	ldi	r23, 0x00	; 0
    b2ce:	87 e0       	ldi	r24, 0x07	; 7
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	}
	Print(7, 17, (char*) strHighscores);
    b2d6:	4b e4       	ldi	r20, 0x4B	; 75
    b2d8:	54 e0       	ldi	r21, 0x04	; 4
    b2da:	61 e1       	ldi	r22, 0x11	; 17
    b2dc:	70 e0       	ldi	r23, 0x00	; 0
    b2de:	87 e0       	ldi	r24, 0x07	; 7
    b2e0:	90 e0       	ldi	r25, 0x00	; 0
    b2e2:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 26, (char*) strCopyright);
    b2e6:	45 e5       	ldi	r20, 0x55	; 85
    b2e8:	54 e0       	ldi	r21, 0x04	; 4
    b2ea:	6a e1       	ldi	r22, 0x1A	; 26
    b2ec:	70 e0       	ldi	r23, 0x00	; 0
    b2ee:	85 e0       	ldi	r24, 0x05	; 5
    b2f0:	90 e0       	ldi	r25, 0x00	; 0
    b2f2:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	MapSprite2(0, map_right_arrow, 0);
    b2f6:	40 e0       	ldi	r20, 0x00	; 0
    b2f8:	67 e1       	ldi	r22, 0x17	; 23
    b2fa:	71 e3       	ldi	r23, 0x31	; 49
    b2fc:	80 e0       	ldi	r24, 0x00	; 0
    b2fe:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b302:	4a ec       	ldi	r20, 0xCA	; 202
    b304:	5a e6       	ldi	r21, 0x6A	; 106
    b306:	65 e0       	ldi	r22, 0x05	; 5
    b308:	84 e0       	ldi	r24, 0x04	; 4
    b30a:	0c 94 86 48 	jmp	0x910c	; 0x910c <DrawMap>

0000b30e <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b30e:	fc 01       	movw	r30, r24
    b310:	20 81       	ld	r18, Z
    b312:	31 81       	ldd	r19, Z+1	; 0x01
    b314:	28 70       	andi	r18, 0x08	; 8
    b316:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &player2.netMessage.joyPadState) return player1.netMessage.joyPadState.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b318:	81 e0       	ldi	r24, 0x01	; 1
    b31a:	23 2b       	or	r18, r19
    b31c:	09 f4       	brne	.+2      	; 0xb320 <select_pressed+0x12>
    b31e:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b320:	08 95       	ret

0000b322 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b322:	ff 92       	push	r15
    b324:	0f 93       	push	r16
    b326:	1f 93       	push	r17
    b328:	cf 93       	push	r28
    b32a:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b32c:	81 e0       	ldi	r24, 0x01	; 1
    b32e:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b332:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b336:	47 e9       	ldi	r20, 0x97	; 151
    b338:	5a e6       	ldi	r21, 0x6A	; 106
    b33a:	61 e0       	ldi	r22, 0x01	; 1
    b33c:	87 e0       	ldi	r24, 0x07	; 7
    b33e:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b342:	41 e9       	ldi	r20, 0x91	; 145
    b344:	5a e6       	ldi	r21, 0x6A	; 106
    b346:	61 e0       	ldi	r22, 0x01	; 1
    b348:	84 e1       	ldi	r24, 0x14	; 20
    b34a:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b34e:	4b e4       	ldi	r20, 0x4B	; 75
    b350:	54 e0       	ldi	r21, 0x04	; 4
    b352:	62 e0       	ldi	r22, 0x02	; 2
    b354:	70 e0       	ldi	r23, 0x00	; 0
    b356:	8a e0       	ldi	r24, 0x0A	; 10
    b358:	90 e0       	ldi	r25, 0x00	; 0
    b35a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b35e:	0c e3       	ldi	r16, 0x3C	; 60
    b360:	1b e0       	ldi	r17, 0x0B	; 11
    b362:	c7 e0       	ldi	r28, 0x07	; 7
    b364:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b366:	ff 24       	eor	r15, r15
    b368:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b36a:	20 e0       	ldi	r18, 0x00	; 0
    b36c:	4f 2d       	mov	r20, r15
    b36e:	be 01       	movw	r22, r28
    b370:	82 e0       	ldi	r24, 0x02	; 2
    b372:	90 e0       	ldi	r25, 0x00	; 0
    b374:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		PrintChar(3, y, '.');
    b378:	4e e2       	ldi	r20, 0x2E	; 46
    b37a:	be 01       	movw	r22, r28
    b37c:	83 e0       	ldi	r24, 0x03	; 3
    b37e:	90 e0       	ldi	r25, 0x00	; 0
    b380:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    b384:	f8 01       	movw	r30, r16
    b386:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b388:	80 81       	ld	r24, Z
    b38a:	93 e0       	ldi	r25, 0x03	; 3
    b38c:	89 9f       	mul	r24, r25
    b38e:	a0 01       	movw	r20, r0
    b390:	11 24       	eor	r1, r1
    b392:	48 5a       	subi	r20, 0xA8	; 168
    b394:	54 4f       	sbci	r21, 0xF4	; 244
    b396:	23 e0       	ldi	r18, 0x03	; 3
    b398:	6c 2f       	mov	r22, r28
    b39a:	85 e0       	ldi	r24, 0x05	; 5
    b39c:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b3a0:	47 e1       	ldi	r20, 0x17	; 23
    b3a2:	54 e0       	ldi	r21, 0x04	; 4
    b3a4:	be 01       	movw	r22, r28
    b3a6:	89 e0       	ldi	r24, 0x09	; 9
    b3a8:	90 e0       	ldi	r25, 0x00	; 0
    b3aa:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b3ae:	f8 01       	movw	r30, r16
    b3b0:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b3b2:	80 81       	ld	r24, Z
    b3b4:	e3 e0       	ldi	r30, 0x03	; 3
    b3b6:	8e 9f       	mul	r24, r30
    b3b8:	a0 01       	movw	r20, r0
    b3ba:	11 24       	eor	r1, r1
    b3bc:	48 5a       	subi	r20, 0xA8	; 168
    b3be:	54 4f       	sbci	r21, 0xF4	; 244
    b3c0:	23 e0       	ldi	r18, 0x03	; 3
    b3c2:	6c 2f       	mov	r22, r28
    b3c4:	8e e0       	ldi	r24, 0x0E	; 14
    b3c6:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
		Print(18, y, (char*) strBy);
    b3ca:	44 e1       	ldi	r20, 0x14	; 20
    b3cc:	54 e0       	ldi	r21, 0x04	; 4
    b3ce:	be 01       	movw	r22, r28
    b3d0:	82 e1       	ldi	r24, 0x12	; 18
    b3d2:	90 e0       	ldi	r25, 0x00	; 0
    b3d4:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b3d8:	21 e0       	ldi	r18, 0x01	; 1
    b3da:	f8 01       	movw	r30, r16
    b3dc:	32 97       	sbiw	r30, 0x02	; 2
    b3de:	40 81       	ld	r20, Z
    b3e0:	be 01       	movw	r22, r28
    b3e2:	87 e1       	ldi	r24, 0x17	; 23
    b3e4:	90 e0       	ldi	r25, 0x00	; 0
    b3e6:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		PrintChar(24, y, '-');
    b3ea:	4d e2       	ldi	r20, 0x2D	; 45
    b3ec:	be 01       	movw	r22, r28
    b3ee:	88 e1       	ldi	r24, 0x18	; 24
    b3f0:	90 e0       	ldi	r25, 0x00	; 0
    b3f2:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b3f6:	21 e0       	ldi	r18, 0x01	; 1
    b3f8:	f8 01       	movw	r30, r16
    b3fa:	31 97       	sbiw	r30, 0x01	; 1
    b3fc:	40 81       	ld	r20, Z
    b3fe:	be 01       	movw	r22, r28
    b400:	8b e1       	ldi	r24, 0x1B	; 27
    b402:	90 e0       	ldi	r25, 0x00	; 0
    b404:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		if (scores.data[i+4])
    b408:	f8 01       	movw	r30, r16
    b40a:	80 81       	ld	r24, Z
    b40c:	88 23       	and	r24, r24
    b40e:	11 f0       	breq	.+4      	; 0xb414 <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b410:	4a e2       	ldi	r20, 0x2A	; 42
    b412:	01 c0       	rjmp	.+2      	; 0xb416 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b414:	40 e2       	ldi	r20, 0x20	; 32
    b416:	be 01       	movw	r22, r28
    b418:	8d e1       	ldi	r24, 0x1D	; 29
    b41a:	90 e0       	ldi	r25, 0x00	; 0
    b41c:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		y += 3;
		rank += 1;
    b420:	f3 94       	inc	r15
    b422:	23 96       	adiw	r28, 0x03	; 3
    b424:	0b 5f       	subi	r16, 0xFB	; 251
    b426:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b428:	f6 e0       	ldi	r31, 0x06	; 6
    b42a:	ff 12       	cpse	r15, r31
    b42c:	9e cf       	rjmp	.-196    	; 0xb36a <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b42e:	44 e8       	ldi	r20, 0x84	; 132
    b430:	54 e0       	ldi	r21, 0x04	; 4
    b432:	66 e1       	ldi	r22, 0x16	; 22
    b434:	70 e0       	ldi	r23, 0x00	; 0
    b436:	83 e0       	ldi	r24, 0x03	; 3
    b438:	90 e0       	ldi	r25, 0x00	; 0
    b43a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(10, 24, (char*) strCancelHandle);
    b43e:	49 e7       	ldi	r20, 0x79	; 121
    b440:	54 e0       	ldi	r21, 0x04	; 4
    b442:	68 e1       	ldi	r22, 0x18	; 24
    b444:	70 e0       	ldi	r23, 0x00	; 0
    b446:	8a e0       	ldi	r24, 0x0A	; 10
    b448:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b44a:	df 91       	pop	r29
    b44c:	cf 91       	pop	r28
    b44e:	1f 91       	pop	r17
    b450:	0f 91       	pop	r16
    b452:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b454:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b458 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b458:	0e 94 2d 4f 	call	0x9e5a	; 0x9e5a <save_score>
	fade_through();
    b45c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
	init_game_state();
    b460:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <init_game_state>
	load_tank_rank();
    b464:	0c 94 91 59 	jmp	0xb322	; 0xb322 <load_tank_rank>

0000b468 <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    b468:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    b46a:	c0 91 77 0b 	lds	r28, 0x0B77
    b46e:	80 91 19 0c 	lds	r24, 0x0C19
    b472:	ca 30       	cpi	r28, 0x0A	; 10
    b474:	80 f5       	brcc	.+96     	; 0xb4d6 <resolve_scoring+0x6e>
	{
		if (player1.netMessage.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    b476:	82 30       	cpi	r24, 0x02	; 2
    b478:	70 f0       	brcs	.+28     	; 0xb496 <resolve_scoring+0x2e>
    b47a:	80 91 28 0f 	lds	r24, 0x0F28
    b47e:	80 fd       	sbrc	r24, 0
    b480:	0a c0       	rjmp	.+20     	; 0xb496 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b482:	0e 94 ad 4a 	call	0x955a	; 0x955a <LBHideAllSprites>
			load_level_tiles(true);
    b486:	81 e0       	ldi	r24, 0x01	; 1
    b488:	0e 94 02 57 	call	0xae04	; 0xae04 <load_level_tiles>
			print_level_score(&player1, &player2);
    b48c:	6e e1       	ldi	r22, 0x1E	; 30
    b48e:	7f e0       	ldi	r23, 0x0F	; 15
    b490:	88 ea       	ldi	r24, 0xA8	; 168
    b492:	9b e0       	ldi	r25, 0x0B	; 11
    b494:	12 c0       	rjmp	.+36     	; 0xb4ba <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.netMessage.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    b496:	80 91 8f 0f 	lds	r24, 0x0F8F
    b49a:	82 30       	cpi	r24, 0x02	; 2
    b49c:	08 f4       	brcc	.+2      	; 0xb4a0 <resolve_scoring+0x38>
    b49e:	a7 c0       	rjmp	.+334    	; 0xb5ee <resolve_scoring+0x186>
    b4a0:	80 91 b2 0b 	lds	r24, 0x0BB2
    b4a4:	80 fd       	sbrc	r24, 0
    b4a6:	a3 c0       	rjmp	.+326    	; 0xb5ee <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b4a8:	0e 94 ad 4a 	call	0x955a	; 0x955a <LBHideAllSprites>
			load_level_tiles(true);
    b4ac:	81 e0       	ldi	r24, 0x01	; 1
    b4ae:	0e 94 02 57 	call	0xae04	; 0xae04 <load_level_tiles>
			print_level_score(&player2, &player1);
    b4b2:	68 ea       	ldi	r22, 0xA8	; 168
    b4b4:	7b e0       	ldi	r23, 0x0B	; 11
    b4b6:	8e e1       	ldi	r24, 0x1E	; 30
    b4b8:	9f e0       	ldi	r25, 0x0F	; 15
    b4ba:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b4be:	84 e0       	ldi	r24, 0x04	; 4
    b4c0:	0e 94 9e 4a 	call	0x953c	; 0x953c <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    b4c4:	10 92 19 0c 	sts	0x0C19, r1
			player2.netMessage.level_score = 0;
    b4c8:	10 92 8f 0f 	sts	0x0F8F, r1
			level_transition(next_level);
    b4cc:	81 e0       	ldi	r24, 0x01	; 1
    b4ce:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    b4d0:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
    b4d2:	0c 94 42 58 	jmp	0xb084	; 0xb084 <level_transition>
		}
	}
	else
	{
		if ((player1.netMessage.level_score >= MAX_LEVEL_SCORE) || (player2.netMessage.level_score >= MAX_LEVEL_SCORE))
    b4d6:	82 30       	cpi	r24, 0x02	; 2
    b4d8:	28 f4       	brcc	.+10     	; 0xb4e4 <resolve_scoring+0x7c>
    b4da:	80 91 8f 0f 	lds	r24, 0x0F8F
    b4de:	82 30       	cpi	r24, 0x02	; 2
    b4e0:	08 f4       	brcc	.+2      	; 0xb4e4 <resolve_scoring+0x7c>
    b4e2:	85 c0       	rjmp	.+266    	; 0xb5ee <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.netMessage.score == player2.netMessage.score) return;
    b4e4:	90 91 18 0c 	lds	r25, 0x0C18
    b4e8:	80 91 8e 0f 	lds	r24, 0x0F8E
    b4ec:	98 17       	cp	r25, r24
    b4ee:	09 f4       	brne	.+2      	; 0xb4f2 <resolve_scoring+0x8a>
    b4f0:	7e c0       	rjmp	.+252    	; 0xb5ee <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    b4f2:	20 91 79 0b 	lds	r18, 0x0B79
    b4f6:	21 11       	cpse	r18, r1
    b4f8:	46 c0       	rjmp	.+140    	; 0xb586 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    b4fa:	c1 e0       	ldi	r28, 0x01	; 1
    b4fc:	c0 93 79 0b 	sts	0x0B79, r28
				if (player1.netMessage.score > player2.netMessage.score)
    b500:	89 17       	cp	r24, r25
    b502:	e8 f4       	brcc	.+58     	; 0xb53e <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    b504:	88 ea       	ldi	r24, 0xA8	; 168
    b506:	9b e0       	ldi	r25, 0x0B	; 11
    b508:	90 93 86 0b 	sts	0x0B86, r25
    b50c:	80 93 85 0b 	sts	0x0B85, r24
					game.boss_fight_joypad = &player1.netMessage.joyPadState;
    b510:	82 e2       	ldi	r24, 0x22	; 34
    b512:	9c e0       	ldi	r25, 0x0C	; 12
    b514:	90 93 88 0b 	sts	0x0B88, r25
    b518:	80 93 87 0b 	sts	0x0B87, r24
					game.boss_fight_player_hud = 0;
    b51c:	10 92 7a 0b 	sts	0x0B7A, r1
					kill_player(&player2, 15);
    b520:	6f e0       	ldi	r22, 0x0F	; 15
    b522:	8e e1       	ldi	r24, 0x1E	; 30
    b524:	9f e0       	ldi	r25, 0x0F	; 15
    b526:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
					player_spawn(&player2);
    b52a:	8e e1       	ldi	r24, 0x1E	; 30
    b52c:	9f e0       	ldi	r25, 0x0F	; 15
    b52e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    b532:	80 91 28 0f 	lds	r24, 0x0F28
    b536:	c8 27       	eor	r28, r24
    b538:	c0 93 28 0f 	sts	0x0F28, r28
    b53c:	1d c0       	rjmp	.+58     	; 0xb578 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    b53e:	8e e1       	ldi	r24, 0x1E	; 30
    b540:	9f e0       	ldi	r25, 0x0F	; 15
    b542:	90 93 86 0b 	sts	0x0B86, r25
    b546:	80 93 85 0b 	sts	0x0B85, r24
					game.boss_fight_joypad = &player2.netMessage.joyPadState;
    b54a:	88 e9       	ldi	r24, 0x98	; 152
    b54c:	9f e0       	ldi	r25, 0x0F	; 15
    b54e:	90 93 88 0b 	sts	0x0B88, r25
    b552:	80 93 87 0b 	sts	0x0B87, r24
					game.boss_fight_player_hud = 15;
    b556:	8f e0       	ldi	r24, 0x0F	; 15
    b558:	80 93 7a 0b 	sts	0x0B7A, r24
					kill_player(&player1, 0);
    b55c:	60 e0       	ldi	r22, 0x00	; 0
    b55e:	88 ea       	ldi	r24, 0xA8	; 168
    b560:	9b e0       	ldi	r25, 0x0B	; 11
    b562:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
					player_spawn(&player1);
    b566:	88 ea       	ldi	r24, 0xA8	; 168
    b568:	9b e0       	ldi	r25, 0x0B	; 11
    b56a:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    b56e:	80 91 b2 0b 	lds	r24, 0x0BB2
    b572:	c8 27       	eor	r28, r24
    b574:	c0 93 b2 0b 	sts	0x0BB2, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    b578:	85 ea       	ldi	r24, 0xA5	; 165
    b57a:	90 e0       	ldi	r25, 0x00	; 0
    b57c:	90 93 c0 0f 	sts	0x0FC0, r25
    b580:	80 93 bf 0f 	sts	0x0FBF, r24
				return;
    b584:	34 c0       	rjmp	.+104    	; 0xb5ee <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    b586:	0e 94 ad 4a 	call	0x955a	; 0x955a <LBHideAllSprites>
			load_level_tiles(true);
    b58a:	81 e0       	ldi	r24, 0x01	; 1
    b58c:	0e 94 02 57 	call	0xae04	; 0xae04 <load_level_tiles>
			if (player1.netMessage.level_score > player2.netMessage.level_score)
    b590:	90 91 19 0c 	lds	r25, 0x0C19
    b594:	80 91 8f 0f 	lds	r24, 0x0F8F
    b598:	89 17       	cp	r24, r25
    b59a:	28 f4       	brcc	.+10     	; 0xb5a6 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    b59c:	6e e1       	ldi	r22, 0x1E	; 30
    b59e:	7f e0       	ldi	r23, 0x0F	; 15
    b5a0:	88 ea       	ldi	r24, 0xA8	; 168
    b5a2:	9b e0       	ldi	r25, 0x0B	; 11
    b5a4:	04 c0       	rjmp	.+8      	; 0xb5ae <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    b5a6:	68 ea       	ldi	r22, 0xA8	; 168
    b5a8:	7b e0       	ldi	r23, 0x0B	; 11
    b5aa:	8e e1       	ldi	r24, 0x1E	; 30
    b5ac:	9f e0       	ldi	r25, 0x0F	; 15
    b5ae:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b5b2:	84 e0       	ldi	r24, 0x04	; 4
    b5b4:	0e 94 9e 4a 	call	0x953c	; 0x953c <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    b5b8:	10 92 19 0c 	sts	0x0C19, r1
			player2.netMessage.level_score = 0;
    b5bc:	10 92 8f 0f 	sts	0x0F8F, r1
			
			// Print game score and exit
			if (player1.netMessage.score > player2.netMessage.score)
    b5c0:	90 91 18 0c 	lds	r25, 0x0C18
    b5c4:	80 91 8e 0f 	lds	r24, 0x0F8E
    b5c8:	89 17       	cp	r24, r25
    b5ca:	28 f4       	brcc	.+10     	; 0xb5d6 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    b5cc:	6e e1       	ldi	r22, 0x1E	; 30
    b5ce:	7f e0       	ldi	r23, 0x0F	; 15
    b5d0:	88 ea       	ldi	r24, 0xA8	; 168
    b5d2:	9b e0       	ldi	r25, 0x0B	; 11
    b5d4:	04 c0       	rjmp	.+8      	; 0xb5de <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    b5d6:	68 ea       	ldi	r22, 0xA8	; 168
    b5d8:	7b e0       	ldi	r23, 0x0B	; 11
    b5da:	8e e1       	ldi	r24, 0x1E	; 30
    b5dc:	9f e0       	ldi	r25, 0x0F	; 15
    b5de:	0e 94 3a 50 	call	0xa074	; 0xa074 <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    b5e2:	84 e0       	ldi	r24, 0x04	; 4
    b5e4:	0e 94 9e 4a 	call	0x953c	; 0x953c <LBWaitSeconds>
			exit_game();
		}
	}
}
    b5e8:	cf 91       	pop	r28
			if (player1.netMessage.score > player2.netMessage.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b5ea:	0c 94 2c 5a 	jmp	0xb458	; 0xb458 <exit_game>
		}
	}
}
    b5ee:	cf 91       	pop	r28
    b5f0:	08 95       	ret

0000b5f2 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    b5f2:	cf 93       	push	r28
    b5f4:	df 93       	push	r29
    b5f6:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    b5f8:	88 81       	ld	r24, Y
    b5fa:	99 81       	ldd	r25, Y+1	; 0x01
    b5fc:	91 ff       	sbrs	r25, 1
    b5fe:	11 c0       	rjmp	.+34     	; 0xb622 <update_tank_rank+0x30>
	{
		game.tank_rank_counter = 0;
    b600:	10 92 84 0b 	sts	0x0B84, r1
    b604:	10 92 83 0b 	sts	0x0B83, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b608:	24 e0       	ldi	r18, 0x04	; 4
    b60a:	40 91 28 0f 	lds	r20, 0x0F28
    b60e:	60 91 b2 0b 	lds	r22, 0x0BB2
    b612:	80 91 89 0b 	lds	r24, 0x0B89
    b616:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    b61a:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_splash();
    b61e:	0e 94 3b 59 	call	0xb276	; 0xb276 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b622:	8c 81       	ldd	r24, Y+4	; 0x04
    b624:	9d 81       	ldd	r25, Y+5	; 0x05
    b626:	92 ff       	sbrs	r25, 2
    b628:	22 c0       	rjmp	.+68     	; 0xb66e <update_tank_rank+0x7c>
    b62a:	8e 81       	ldd	r24, Y+6	; 0x06
    b62c:	8f 3f       	cpi	r24, 0xFF	; 255
    b62e:	f9 f4       	brne	.+62     	; 0xb66e <update_tank_rank+0x7c>
	{
		game.tank_rank_counter = 0;
    b630:	10 92 84 0b 	sts	0x0B84, r1
    b634:	10 92 83 0b 	sts	0x0B83, r1
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b638:	24 e0       	ldi	r18, 0x04	; 4
    b63a:	40 91 28 0f 	lds	r20, 0x0F28
    b63e:	60 91 b2 0b 	lds	r22, 0x0BB2
    b642:	80 91 89 0b 	lds	r24, 0x0B89
    b646:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
	    init_scores(&scores);
    b64a:	86 e3       	ldi	r24, 0x36	; 54
    b64c:	9b e0       	ldi	r25, 0x0B	; 11
    b64e:	0e 94 56 4d 	call	0x9aac	; 0x9aac <init_scores>
	    init_handles(&handles);
    b652:	86 e5       	ldi	r24, 0x56	; 86
    b654:	9b e0       	ldi	r25, 0x0B	; 11
    b656:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b65a:	86 e3       	ldi	r24, 0x36	; 54
    b65c:	9b e0       	ldi	r25, 0x0B	; 11
    b65e:	0e 94 c9 3b 	call	0x7792	; 0x7792 <EepromWriteBlock>
    b662:	86 e5       	ldi	r24, 0x56	; 86
    b664:	9b e0       	ldi	r25, 0x0B	; 11
    b666:	0e 94 c9 3b 	call	0x7792	; 0x7792 <EepromWriteBlock>
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b66a:	0e 94 91 59 	call	0xb322	; 0xb322 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    b66e:	80 91 83 0b 	lds	r24, 0x0B83
    b672:	90 91 84 0b 	lds	r25, 0x0B84
    b676:	85 38       	cpi	r24, 0x85	; 133
    b678:	93 40       	sbci	r25, 0x03	; 3
    b67a:	88 f0       	brcs	.+34     	; 0xb69e <update_tank_rank+0xac>
	{
		game.tank_rank_counter = 0;
    b67c:	10 92 84 0b 	sts	0x0B84, r1
    b680:	10 92 83 0b 	sts	0x0B83, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b684:	24 e0       	ldi	r18, 0x04	; 4
    b686:	40 91 28 0f 	lds	r20, 0x0F28
    b68a:	60 91 b2 0b 	lds	r22, 0x0BB2
    b68e:	80 91 89 0b 	lds	r24, 0x0B89
    b692:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    b696:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_splash();
    b69a:	0e 94 3b 59 	call	0xb276	; 0xb276 <load_splash>
	}
	game.tank_rank_counter++;
    b69e:	80 91 83 0b 	lds	r24, 0x0B83
    b6a2:	90 91 84 0b 	lds	r25, 0x0B84
    b6a6:	01 96       	adiw	r24, 0x01	; 1
    b6a8:	90 93 84 0b 	sts	0x0B84, r25
    b6ac:	80 93 83 0b 	sts	0x0B83, r24
#endif
}
    b6b0:	df 91       	pop	r29
    b6b2:	cf 91       	pop	r28
    b6b4:	08 95       	ret

0000b6b6 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b6b6:	af 92       	push	r10
    b6b8:	bf 92       	push	r11
    b6ba:	cf 92       	push	r12
    b6bc:	df 92       	push	r13
    b6be:	ef 92       	push	r14
    b6c0:	ff 92       	push	r15
    b6c2:	0f 93       	push	r16
    b6c4:	1f 93       	push	r17
    b6c6:	cf 93       	push	r28
    b6c8:	df 93       	push	r29
    b6ca:	00 d0       	rcall	.+0      	; 0xb6cc <_handle_select_render_helper+0x16>
    b6cc:	1f 92       	push	r1
    b6ce:	cd b7       	in	r28, 0x3d	; 61
    b6d0:	de b7       	in	r29, 0x3e	; 62
    b6d2:	7c 01       	movw	r14, r24
    b6d4:	b4 2e       	mov	r11, r20
    b6d6:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b6d8:	80 e2       	ldi	r24, 0x20	; 32
    b6da:	89 83       	std	Y+1, r24	; 0x01
    b6dc:	8a 83       	std	Y+2, r24	; 0x02
    b6de:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b6e0:	f7 01       	movw	r30, r14
    b6e2:	85 81       	ldd	r24, Z+5	; 0x05
    b6e4:	81 11       	cpse	r24, r1
    b6e6:	1d c0       	rjmp	.+58     	; 0xb722 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b6e8:	40 e0       	ldi	r20, 0x00	; 0
    b6ea:	67 e1       	ldi	r22, 0x17	; 23
    b6ec:	71 e3       	ldi	r23, 0x31	; 49
    b6ee:	82 2f       	mov	r24, r18
    b6f0:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b6f4:	40 e0       	ldi	r20, 0x00	; 0
    b6f6:	69 e5       	ldi	r22, 0x59	; 89
    b6f8:	71 e3       	ldi	r23, 0x31	; 49
    b6fa:	81 e0       	ldi	r24, 0x01	; 1
    b6fc:	81 0f       	add	r24, r17
    b6fe:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b702:	f7 01       	movw	r30, r14
    b704:	40 81       	ld	r20, Z
    b706:	44 0f       	add	r20, r20
    b708:	44 0f       	add	r20, r20
    b70a:	44 0f       	add	r20, r20
    b70c:	40 5c       	subi	r20, 0xC0	; 192
    b70e:	01 e0       	ldi	r16, 0x01	; 1
    b710:	21 e0       	ldi	r18, 0x01	; 1
    b712:	6b 2d       	mov	r22, r11
    b714:	66 0f       	add	r22, r22
    b716:	66 0f       	add	r22, r22
    b718:	66 0f       	add	r22, r22
    b71a:	81 2f       	mov	r24, r17
    b71c:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
    b720:	6e c0       	rjmp	.+220    	; 0xb7fe <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    b722:	81 30       	cpi	r24, 0x01	; 1
    b724:	09 f0       	breq	.+2      	; 0xb728 <_handle_select_render_helper+0x72>
    b726:	43 c0       	rjmp	.+134    	; 0xb7ae <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b728:	40 e0       	ldi	r20, 0x00	; 0
    b72a:	64 e1       	ldi	r22, 0x14	; 20
    b72c:	71 e3       	ldi	r23, 0x31	; 49
    b72e:	82 2f       	mov	r24, r18
    b730:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b734:	aa 24       	eor	r10, r10
    b736:	a3 94       	inc	r10
    b738:	a1 0e       	add	r10, r17
    b73a:	40 e0       	ldi	r20, 0x00	; 0
    b73c:	61 e1       	ldi	r22, 0x11	; 17
    b73e:	71 e3       	ldi	r23, 0x31	; 49
    b740:	8a 2d       	mov	r24, r10
    b742:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b746:	cb 2c       	mov	r12, r11
    b748:	d1 2c       	mov	r13, r1
    b74a:	f5 e0       	ldi	r31, 0x05	; 5
    b74c:	cf 0e       	add	r12, r31
    b74e:	d1 1c       	adc	r13, r1
    b750:	f7 01       	movw	r30, r14
    b752:	40 81       	ld	r20, Z
    b754:	44 0f       	add	r20, r20
    b756:	44 0f       	add	r20, r20
    b758:	44 0f       	add	r20, r20
    b75a:	48 5c       	subi	r20, 0xC8	; 200
    b75c:	84 81       	ldd	r24, Z+4	; 0x04
    b75e:	b6 01       	movw	r22, r12
    b760:	68 0f       	add	r22, r24
    b762:	71 1d       	adc	r23, r1
    b764:	87 fd       	sbrc	r24, 7
    b766:	7a 95       	dec	r23
    b768:	66 0f       	add	r22, r22
    b76a:	66 0f       	add	r22, r22
    b76c:	66 0f       	add	r22, r22
    b76e:	01 e0       	ldi	r16, 0x01	; 1
    b770:	21 e0       	ldi	r18, 0x01	; 1
    b772:	81 2f       	mov	r24, r17
    b774:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b778:	f7 01       	movw	r30, r14
    b77a:	40 81       	ld	r20, Z
    b77c:	44 0f       	add	r20, r20
    b77e:	44 0f       	add	r20, r20
    b780:	44 0f       	add	r20, r20
    b782:	48 5b       	subi	r20, 0xB8	; 184
    b784:	84 81       	ldd	r24, Z+4	; 0x04
    b786:	c8 0e       	add	r12, r24
    b788:	d1 1c       	adc	r13, r1
    b78a:	87 fd       	sbrc	r24, 7
    b78c:	da 94       	dec	r13
    b78e:	6c 2d       	mov	r22, r12
    b790:	66 0f       	add	r22, r22
    b792:	66 0f       	add	r22, r22
    b794:	66 0f       	add	r22, r22
    b796:	21 e0       	ldi	r18, 0x01	; 1
    b798:	8a 2d       	mov	r24, r10
    b79a:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		memcpy(tmp, ps->handle, 3);
    b79e:	f7 01       	movw	r30, r14
    b7a0:	81 81       	ldd	r24, Z+1	; 0x01
    b7a2:	92 81       	ldd	r25, Z+2	; 0x02
    b7a4:	a3 81       	ldd	r26, Z+3	; 0x03
    b7a6:	89 83       	std	Y+1, r24	; 0x01
    b7a8:	9a 83       	std	Y+2, r25	; 0x02
    b7aa:	ab 83       	std	Y+3, r26	; 0x03
    b7ac:	28 c0       	rjmp	.+80     	; 0xb7fe <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b7ae:	82 30       	cpi	r24, 0x02	; 2
    b7b0:	31 f5       	brne	.+76     	; 0xb7fe <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b7b2:	c4 2e       	mov	r12, r20
    b7b4:	d1 2c       	mov	r13, r1
    b7b6:	48 e2       	ldi	r20, 0x28	; 40
    b7b8:	65 e0       	ldi	r22, 0x05	; 5
    b7ba:	70 e0       	ldi	r23, 0x00	; 0
    b7bc:	c6 01       	movw	r24, r12
    b7be:	06 96       	adiw	r24, 0x06	; 6
    b7c0:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b7c4:	23 e0       	ldi	r18, 0x03	; 3
    b7c6:	a7 01       	movw	r20, r14
    b7c8:	4f 5f       	subi	r20, 0xFF	; 255
    b7ca:	5f 4f       	sbci	r21, 0xFF	; 255
    b7cc:	65 e0       	ldi	r22, 0x05	; 5
    b7ce:	87 e0       	ldi	r24, 0x07	; 7
    b7d0:	8b 0d       	add	r24, r11
    b7d2:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b7d6:	49 e2       	ldi	r20, 0x29	; 41
    b7d8:	65 e0       	ldi	r22, 0x05	; 5
    b7da:	70 e0       	ldi	r23, 0x00	; 0
    b7dc:	c6 01       	movw	r24, r12
    b7de:	0a 96       	adiw	r24, 0x0a	; 10
    b7e0:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		MapSprite2(idx, map_none, 0);
    b7e4:	40 e0       	ldi	r20, 0x00	; 0
    b7e6:	69 e5       	ldi	r22, 0x59	; 89
    b7e8:	71 e3       	ldi	r23, 0x31	; 49
    b7ea:	81 2f       	mov	r24, r17
    b7ec:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b7f0:	40 e0       	ldi	r20, 0x00	; 0
    b7f2:	69 e5       	ldi	r22, 0x59	; 89
    b7f4:	71 e3       	ldi	r23, 0x31	; 49
    b7f6:	81 e0       	ldi	r24, 0x01	; 1
    b7f8:	81 0f       	add	r24, r17
    b7fa:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b7fe:	f7 01       	movw	r30, r14
    b800:	60 81       	ld	r22, Z
    b802:	68 5f       	subi	r22, 0xF8	; 248
    b804:	23 e0       	ldi	r18, 0x03	; 3
    b806:	ae 01       	movw	r20, r28
    b808:	4f 5f       	subi	r20, 0xFF	; 255
    b80a:	5f 4f       	sbci	r21, 0xFF	; 255
    b80c:	85 e0       	ldi	r24, 0x05	; 5
    b80e:	8b 0d       	add	r24, r11
    b810:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
}
    b814:	0f 90       	pop	r0
    b816:	0f 90       	pop	r0
    b818:	0f 90       	pop	r0
    b81a:	df 91       	pop	r29
    b81c:	cf 91       	pop	r28
    b81e:	1f 91       	pop	r17
    b820:	0f 91       	pop	r16
    b822:	ff 90       	pop	r15
    b824:	ef 90       	pop	r14
    b826:	df 90       	pop	r13
    b828:	cf 90       	pop	r12
    b82a:	bf 90       	pop	r11
    b82c:	af 90       	pop	r10
    b82e:	08 95       	ret

0000b830 <load_handle_select>:

void load_handle_select()
{
    b830:	8f 92       	push	r8
    b832:	9f 92       	push	r9
    b834:	af 92       	push	r10
    b836:	bf 92       	push	r11
    b838:	cf 92       	push	r12
    b83a:	df 92       	push	r13
    b83c:	ef 92       	push	r14
    b83e:	ff 92       	push	r15
    b840:	0f 93       	push	r16
    b842:	1f 93       	push	r17
    b844:	cf 93       	push	r28
    b846:	df 93       	push	r29
	player1.netMessage.ps.select_state = SELECTING;
    b848:	10 92 2e 0c 	sts	0x0C2E, r1
	player2.netMessage.ps.select_state = SELECTING;
    b84c:	10 92 a4 0f 	sts	0x0FA4, r1
	player1.netMessage.ps.handle_id = 0;
    b850:	10 92 29 0c 	sts	0x0C29, r1
	player2.netMessage.ps.handle_id = 0;
    b854:	10 92 9f 0f 	sts	0x0F9F, r1
	player1.netMessage.ps.char_index = 0;
    b858:	10 92 2d 0c 	sts	0x0C2D, r1
	player2.netMessage.ps.char_index = 0;
    b85c:	10 92 a3 0f 	sts	0x0FA3, r1
	game.current_screen = HANDLE_SELECT;
    b860:	82 e0       	ldi	r24, 0x02	; 2
    b862:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b866:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    b86a:	47 e9       	ldi	r20, 0x97	; 151
    b86c:	5a e6       	ldi	r21, 0x6A	; 106
    b86e:	64 e0       	ldi	r22, 0x04	; 4
    b870:	83 e0       	ldi	r24, 0x03	; 3
    b872:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    b876:	41 e9       	ldi	r20, 0x91	; 145
    b878:	5a e6       	ldi	r21, 0x6A	; 106
    b87a:	64 e0       	ldi	r22, 0x04	; 4
    b87c:	84 e1       	ldi	r24, 0x14	; 20
    b87e:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    b882:	4f e3       	ldi	r20, 0x3F	; 63
    b884:	54 e0       	ldi	r21, 0x04	; 4
    b886:	61 e0       	ldi	r22, 0x01	; 1
    b888:	70 e0       	ldi	r23, 0x00	; 0
    b88a:	89 e0       	ldi	r24, 0x09	; 9
    b88c:	90 e0       	ldi	r25, 0x00	; 0
    b88e:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(6, 5, (char*) strPlayer1);
    b892:	4e e2       	ldi	r20, 0x2E	; 46
    b894:	54 e0       	ldi	r21, 0x04	; 4
    b896:	65 e0       	ldi	r22, 0x05	; 5
    b898:	70 e0       	ldi	r23, 0x00	; 0
    b89a:	86 e0       	ldi	r24, 0x06	; 6
    b89c:	90 e0       	ldi	r25, 0x00	; 0
    b89e:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(23, 5, (char*) strPlayer2);
    b8a2:	4b e2       	ldi	r20, 0x2B	; 43
    b8a4:	54 e0       	ldi	r21, 0x04	; 4
    b8a6:	65 e0       	ldi	r22, 0x05	; 5
    b8a8:	70 e0       	ldi	r23, 0x00	; 0
    b8aa:	87 e1       	ldi	r24, 0x17	; 23
    b8ac:	90 e0       	ldi	r25, 0x00	; 0
    b8ae:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b8b2:	88 e5       	ldi	r24, 0x58	; 88
    b8b4:	e8 2e       	mov	r14, r24
    b8b6:	8b e0       	ldi	r24, 0x0B	; 11
    b8b8:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b8ba:	c0 e0       	ldi	r28, 0x00	; 0
    b8bc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b8be:	93 e0       	ldi	r25, 0x03	; 3
    b8c0:	a9 2e       	mov	r10, r25
    b8c2:	b1 2c       	mov	r11, r1
    b8c4:	67 01       	movw	r12, r14
    b8c6:	ce 01       	movw	r24, r28
    b8c8:	b5 01       	movw	r22, r10
    b8ca:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    b8ce:	4c 01       	movw	r8, r24
    b8d0:	8b 01       	movw	r16, r22
    b8d2:	08 5f       	subi	r16, 0xF8	; 248
    b8d4:	1f 4f       	sbci	r17, 0xFF	; 255
    b8d6:	f7 01       	movw	r30, r14
    b8d8:	41 91       	ld	r20, Z+
    b8da:	7f 01       	movw	r14, r30
    b8dc:	b8 01       	movw	r22, r16
    b8de:	03 96       	adiw	r24, 0x03	; 3
    b8e0:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b8e4:	f6 01       	movw	r30, r12
    b8e6:	40 81       	ld	r20, Z
    b8e8:	b8 01       	movw	r22, r16
    b8ea:	c4 01       	movw	r24, r8
    b8ec:	44 96       	adiw	r24, 0x14	; 20
    b8ee:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b8f2:	21 96       	adiw	r28, 0x01	; 1
    b8f4:	cb 31       	cpi	r28, 0x1B	; 27
    b8f6:	d1 05       	cpc	r29, r1
    b8f8:	29 f7       	brne	.-54     	; 0xb8c4 <load_handle_select+0x94>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    b8fa:	4a e6       	ldi	r20, 0x6A	; 106
    b8fc:	54 e0       	ldi	r21, 0x04	; 4
    b8fe:	65 e1       	ldi	r22, 0x15	; 21
    b900:	70 e0       	ldi	r23, 0x00	; 0
    b902:	85 e0       	ldi	r24, 0x05	; 5
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 22, (char*) strConfirmHandle);
    b90a:	4d e9       	ldi	r20, 0x9D	; 157
    b90c:	54 e0       	ldi	r21, 0x04	; 4
    b90e:	66 e1       	ldi	r22, 0x16	; 22
    b910:	70 e0       	ldi	r23, 0x00	; 0
    b912:	85 e0       	ldi	r24, 0x05	; 5
    b914:	90 e0       	ldi	r25, 0x00	; 0
    b916:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 23, (char*) strCancelHandle);
    b91a:	49 e7       	ldi	r20, 0x79	; 121
    b91c:	54 e0       	ldi	r21, 0x04	; 4
    b91e:	67 e1       	ldi	r22, 0x17	; 23
    b920:	70 e0       	ldi	r23, 0x00	; 0
    b922:	85 e0       	ldi	r24, 0x05	; 5
    b924:	90 e0       	ldi	r25, 0x00	; 0
    b926:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 24, (char*) strChangeHandle);
    b92a:	4c e1       	ldi	r20, 0x1C	; 28
    b92c:	54 e0       	ldi	r21, 0x04	; 4
    b92e:	68 e1       	ldi	r22, 0x18	; 24
    b930:	70 e0       	ldi	r23, 0x00	; 0
    b932:	85 e0       	ldi	r24, 0x05	; 5
    b934:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b936:	df 91       	pop	r29
    b938:	cf 91       	pop	r28
    b93a:	1f 91       	pop	r17
    b93c:	0f 91       	pop	r16
    b93e:	ff 90       	pop	r15
    b940:	ef 90       	pop	r14
    b942:	df 90       	pop	r13
    b944:	cf 90       	pop	r12
    b946:	bf 90       	pop	r11
    b948:	af 90       	pop	r10
    b94a:	9f 90       	pop	r9
    b94c:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    b94e:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b952 <load_host_net_game>:
#if JAMMA
#else

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    b952:	84 e0       	ldi	r24, 0x04	; 4
    b954:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b958:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	if (hostNetGame((char*)gameId) == WIFI_OK)
    b95c:	82 e0       	ldi	r24, 0x02	; 2
    b95e:	91 e0       	ldi	r25, 0x01	; 1
    b960:	0e 94 73 4c 	call	0x98e6	; 0x98e6 <hostNetGame>
    b964:	81 11       	cpse	r24, r1
    b966:	24 c0       	rjmp	.+72     	; 0xb9b0 <load_host_net_game+0x5e>
	{
		Print(5, 1, (char*) strShareGameId);
    b968:	49 ef       	ldi	r20, 0xF9	; 249
    b96a:	54 e0       	ldi	r21, 0x04	; 4
    b96c:	61 e0       	ldi	r22, 0x01	; 1
    b96e:	70 e0       	ldi	r23, 0x00	; 0
    b970:	85 e0       	ldi	r24, 0x05	; 5
    b972:	90 e0       	ldi	r25, 0x00	; 0
    b974:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		LBPrintStr(10, 10, gameId, 8);
    b978:	28 e0       	ldi	r18, 0x08	; 8
    b97a:	42 e0       	ldi	r20, 0x02	; 2
    b97c:	51 e0       	ldi	r21, 0x01	; 1
    b97e:	6a e0       	ldi	r22, 0x0A	; 10
    b980:	8a e0       	ldi	r24, 0x0A	; 10
    b982:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
		Print(2, 18, (char*) strWaitingForNetOppenent);
    b986:	4e ed       	ldi	r20, 0xDE	; 222
    b988:	54 e0       	ldi	r21, 0x04	; 4
    b98a:	62 e1       	ldi	r22, 0x12	; 18
    b98c:	70 e0       	ldi	r23, 0x00	; 0
    b98e:	82 e0       	ldi	r24, 0x02	; 2
    b990:	90 e0       	ldi	r25, 0x00	; 0
    b992:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		DrawMap2(7, 10, map_green_tank);
    b996:	47 e9       	ldi	r20, 0x97	; 151
    b998:	5a e6       	ldi	r21, 0x6A	; 106
    b99a:	6a e0       	ldi	r22, 0x0A	; 10
    b99c:	87 e0       	ldi	r24, 0x07	; 7
    b99e:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    b9a2:	41 e9       	ldi	r20, 0x91	; 145
    b9a4:	5a e6       	ldi	r21, 0x6A	; 106
    b9a6:	6a e0       	ldi	r22, 0x0A	; 10
    b9a8:	83 e1       	ldi	r24, 0x13	; 19
    b9aa:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    b9ae:	08 c0       	rjmp	.+16     	; 0xb9c0 <load_host_net_game+0x6e>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
    b9b0:	4f ea       	ldi	r20, 0xAF	; 175
    b9b2:	54 e0       	ldi	r21, 0x04	; 4
    b9b4:	6a e0       	ldi	r22, 0x0A	; 10
    b9b6:	70 e0       	ldi	r23, 0x00	; 0
    b9b8:	87 e0       	ldi	r24, 0x07	; 7
    b9ba:	90 e0       	ldi	r25, 0x00	; 0
    b9bc:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	}
	Print(9, 23, (char*) strCancelHandle);
    b9c0:	49 e7       	ldi	r20, 0x79	; 121
    b9c2:	54 e0       	ldi	r21, 0x04	; 4
    b9c4:	67 e1       	ldi	r22, 0x17	; 23
    b9c6:	70 e0       	ldi	r23, 0x00	; 0
    b9c8:	89 e0       	ldi	r24, 0x09	; 9
    b9ca:	90 e0       	ldi	r25, 0x00	; 0
    b9cc:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b9d0 <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    b9d0:	fc 01       	movw	r30, r24
    b9d2:	80 81       	ld	r24, Z
    b9d4:	91 81       	ldd	r25, Z+1	; 0x01
    b9d6:	91 ff       	sbrs	r25, 1
    b9d8:	0d c0       	rjmp	.+26     	; 0xb9f4 <update_host_net_game+0x24>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b9da:	24 e0       	ldi	r18, 0x04	; 4
    b9dc:	40 91 28 0f 	lds	r20, 0x0F28
    b9e0:	60 91 b2 0b 	lds	r22, 0x0BB2
    b9e4:	80 91 89 0b 	lds	r24, 0x0B89
    b9e8:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    b9ec:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_splash();
    b9f0:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <load_splash>
	} 
	else if (player2.netMessage.code == NETJOINED)
    b9f4:	80 91 8a 0f 	lds	r24, 0x0F8A
    b9f8:	8a 30       	cpi	r24, 0x0A	; 10
    b9fa:	a9 f4       	brne	.+42     	; 0xba26 <update_host_net_game+0x56>
	{
		game.demo_counter = 0;
    b9fc:	10 92 80 0b 	sts	0x0B80, r1
    ba00:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    ba04:	24 e0       	ldi	r18, 0x04	; 4
    ba06:	40 91 28 0f 	lds	r20, 0x0F28
    ba0a:	60 91 b2 0b 	lds	r22, 0x0BB2
    ba0e:	80 91 89 0b 	lds	r24, 0x0B89
    ba12:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    ba16:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_eeprom(&handles);
    ba1a:	86 e5       	ldi	r24, 0x56	; 86
    ba1c:	9b e0       	ldi	r25, 0x0B	; 11
    ba1e:	0e 94 04 4f 	call	0x9e08	; 0x9e08 <load_eeprom>
		load_handle_select();
    ba22:	0c 94 18 5c 	jmp	0xb830	; 0xb830 <load_handle_select>
    ba26:	08 95       	ret

0000ba28 <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    ba28:	85 e0       	ldi	r24, 0x05	; 5
    ba2a:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    ba2e:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
	Print(5, 1, (char*) strEnterGameId);
    ba32:	4d eb       	ldi	r20, 0xBD	; 189
    ba34:	54 e0       	ldi	r21, 0x04	; 4
    ba36:	61 e0       	ldi	r22, 0x01	; 1
    ba38:	70 e0       	ldi	r23, 0x00	; 0
    ba3a:	85 e0       	ldi	r24, 0x05	; 5
    ba3c:	90 e0       	ldi	r25, 0x00	; 0
    ba3e:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	LBPrintStr(10, 10, gameId, 8);
    ba42:	28 e0       	ldi	r18, 0x08	; 8
    ba44:	42 e0       	ldi	r20, 0x02	; 2
    ba46:	51 e0       	ldi	r21, 0x01	; 1
    ba48:	6a e0       	ldi	r22, 0x0A	; 10
    ba4a:	8a e0       	ldi	r24, 0x0A	; 10
    ba4c:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
	DrawMap2(7, 10, map_green_tank);
    ba50:	47 e9       	ldi	r20, 0x97	; 151
    ba52:	5a e6       	ldi	r21, 0x6A	; 106
    ba54:	6a e0       	ldi	r22, 0x0A	; 10
    ba56:	87 e0       	ldi	r24, 0x07	; 7
    ba58:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	DrawMap2(19, 10, map_blue_tank);
    ba5c:	41 e9       	ldi	r20, 0x91	; 145
    ba5e:	5a e6       	ldi	r21, 0x6A	; 106
    ba60:	6a e0       	ldi	r22, 0x0A	; 10
    ba62:	83 e1       	ldi	r24, 0x13	; 19
    ba64:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	Print(5, 22, (char*) strConfirmHandle);
    ba68:	4d e9       	ldi	r20, 0x9D	; 157
    ba6a:	54 e0       	ldi	r21, 0x04	; 4
    ba6c:	66 e1       	ldi	r22, 0x16	; 22
    ba6e:	70 e0       	ldi	r23, 0x00	; 0
    ba70:	85 e0       	ldi	r24, 0x05	; 5
    ba72:	90 e0       	ldi	r25, 0x00	; 0
    ba74:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(9, 23, (char*) strCancelHandle);
    ba78:	49 e7       	ldi	r20, 0x79	; 121
    ba7a:	54 e0       	ldi	r21, 0x04	; 4
    ba7c:	67 e1       	ldi	r22, 0x17	; 23
    ba7e:	70 e0       	ldi	r23, 0x00	; 0
    ba80:	89 e0       	ldi	r24, 0x09	; 9
    ba82:	90 e0       	ldi	r25, 0x00	; 0
    ba84:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	gameIdIndex = 2;
    ba88:	82 e0       	ldi	r24, 0x02	; 2
    ba8a:	80 93 01 01 	sts	0x0101, r24
    ba8e:	08 95       	ret

0000ba90 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    ba90:	0f 93       	push	r16
    ba92:	cf 93       	push	r28
    ba94:	df 93       	push	r29
    ba96:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    ba98:	90 91 89 0b 	lds	r25, 0x0B89
    ba9c:	92 30       	cpi	r25, 0x02	; 2
    ba9e:	a9 f0       	breq	.+42     	; 0xbaca <update_splash+0x3a>
    baa0:	44 f4       	brge	.+16     	; 0xbab2 <update_splash+0x22>
    baa2:	99 23       	and	r25, r25
    baa4:	71 f0       	breq	.+28     	; 0xbac2 <update_splash+0x32>
    baa6:	91 30       	cpi	r25, 0x01	; 1
    baa8:	d9 f4       	brne	.+54     	; 0xbae0 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    baaa:	01 e0       	ldi	r16, 0x01	; 1
    baac:	21 e0       	ldi	r18, 0x01	; 1
    baae:	40 e7       	ldi	r20, 0x70	; 112
    bab0:	13 c0       	rjmp	.+38     	; 0xbad8 <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bab2:	93 30       	cpi	r25, 0x03	; 3
    bab4:	71 f0       	breq	.+28     	; 0xbad2 <update_splash+0x42>
    bab6:	94 30       	cpi	r25, 0x04	; 4
    bab8:	99 f4       	brne	.+38     	; 0xbae0 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    baba:	01 e0       	ldi	r16, 0x01	; 1
    babc:	21 e0       	ldi	r18, 0x01	; 1
    babe:	48 e8       	ldi	r20, 0x88	; 136
    bac0:	0b c0       	rjmp	.+22     	; 0xbad8 <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    bac2:	01 e0       	ldi	r16, 0x01	; 1
    bac4:	21 e0       	ldi	r18, 0x01	; 1
    bac6:	48 e6       	ldi	r20, 0x68	; 104
    bac8:	07 c0       	rjmp	.+14     	; 0xbad8 <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    baca:	01 e0       	ldi	r16, 0x01	; 1
    bacc:	21 e0       	ldi	r18, 0x01	; 1
    bace:	48 e7       	ldi	r20, 0x78	; 120
    bad0:	03 c0       	rjmp	.+6      	; 0xbad8 <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    bad2:	01 e0       	ldi	r16, 0x01	; 1
    bad4:	21 e0       	ldi	r18, 0x01	; 1
    bad6:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bad8:	60 e3       	ldi	r22, 0x30	; 48
    bada:	80 e0       	ldi	r24, 0x00	; 0
    badc:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    bae0:	4a e6       	ldi	r20, 0x6A	; 106
    bae2:	54 e0       	ldi	r21, 0x04	; 4
    bae4:	65 e1       	ldi	r22, 0x15	; 21
    bae6:	70 e0       	ldi	r23, 0x00	; 0
    bae8:	86 e0       	ldi	r24, 0x06	; 6
    baea:	90 e0       	ldi	r25, 0x00	; 0
    baec:	0e 94 06 49 	call	0x920c	; 0x920c <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    baf0:	28 81       	ld	r18, Y
    baf2:	39 81       	ldd	r19, Y+1	; 0x01
    baf4:	21 15       	cp	r18, r1
    baf6:	31 05       	cpc	r19, r1
    baf8:	21 f0       	breq	.+8      	; 0xbb02 <update_splash+0x72>
    bafa:	10 92 80 0b 	sts	0x0B80, r1
    bafe:	10 92 7f 0b 	sts	0x0B7F, r1
	
	if (p1->pressed & BTN_UP)
    bb02:	24 ff       	sbrs	r18, 4
    bb04:	16 c0       	rjmp	.+44     	; 0xbb32 <update_splash+0xa2>
	{
		game.selection--;
    bb06:	80 91 89 0b 	lds	r24, 0x0B89
    bb0a:	9f ef       	ldi	r25, 0xFF	; 255
    bb0c:	98 0f       	add	r25, r24
    bb0e:	90 93 89 0b 	sts	0x0B89, r25
		if (game.selection == JOINNETGAME && wifi_status != WIFI_OK) game.selection -= 2;
    bb12:	93 30       	cpi	r25, 0x03	; 3
    bb14:	39 f4       	brne	.+14     	; 0xbb24 <update_splash+0x94>
    bb16:	90 91 a7 0b 	lds	r25, 0x0BA7
    bb1a:	99 23       	and	r25, r25
    bb1c:	19 f0       	breq	.+6      	; 0xbb24 <update_splash+0x94>
    bb1e:	83 50       	subi	r24, 0x03	; 3
    bb20:	80 93 89 0b 	sts	0x0B89, r24
		if (game.selection < PVCPU) game.selection = PVCPU;
    bb24:	80 91 89 0b 	lds	r24, 0x0B89
    bb28:	87 ff       	sbrs	r24, 7
    bb2a:	1b c0       	rjmp	.+54     	; 0xbb62 <update_splash+0xd2>
    bb2c:	10 92 89 0b 	sts	0x0B89, r1
    bb30:	18 c0       	rjmp	.+48     	; 0xbb62 <update_splash+0xd2>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if (p1->pressed & BTN_DOWN)
    bb32:	25 ff       	sbrs	r18, 5
    bb34:	20 c0       	rjmp	.+64     	; 0xbb76 <update_splash+0xe6>
	{
		game.selection++;
    bb36:	80 91 89 0b 	lds	r24, 0x0B89
    bb3a:	91 e0       	ldi	r25, 0x01	; 1
    bb3c:	98 0f       	add	r25, r24
    bb3e:	90 93 89 0b 	sts	0x0B89, r25
		if (game.selection == HOSTNETGAME && wifi_status != WIFI_OK) game.selection += 2;
    bb42:	92 30       	cpi	r25, 0x02	; 2
    bb44:	39 f4       	brne	.+14     	; 0xbb54 <update_splash+0xc4>
    bb46:	90 91 a7 0b 	lds	r25, 0x0BA7
    bb4a:	99 23       	and	r25, r25
    bb4c:	19 f0       	breq	.+6      	; 0xbb54 <update_splash+0xc4>
    bb4e:	8d 5f       	subi	r24, 0xFD	; 253
    bb50:	80 93 89 0b 	sts	0x0B89, r24
		if (game.selection > TR) game.selection = TR;
    bb54:	80 91 89 0b 	lds	r24, 0x0B89
    bb58:	85 30       	cpi	r24, 0x05	; 5
    bb5a:	1c f0       	brlt	.+6      	; 0xbb62 <update_splash+0xd2>
    bb5c:	84 e0       	ldi	r24, 0x04	; 4
    bb5e:	80 93 89 0b 	sts	0x0B89, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bb62:	24 e0       	ldi	r18, 0x04	; 4
    bb64:	40 91 28 0f 	lds	r20, 0x0F28
    bb68:	60 91 b2 0b 	lds	r22, 0x0BB2
    bb6c:	80 91 89 0b 	lds	r24, 0x0B89
    bb70:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
    bb74:	b4 c0       	rjmp	.+360    	; 0xbcde <update_splash+0x24e>
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    bb76:	ce 01       	movw	r24, r28
    bb78:	0e 94 87 59 	call	0xb30e	; 0xb30e <select_pressed>
    bb7c:	88 23       	and	r24, r24
    bb7e:	09 f4       	brne	.+2      	; 0xbb82 <update_splash+0xf2>
    bb80:	5a c0       	rjmp	.+180    	; 0xbc36 <update_splash+0x1a6>
    bb82:	80 91 89 0b 	lds	r24, 0x0B89
    bb86:	82 30       	cpi	r24, 0x02	; 2
    bb88:	b0 f4       	brcc	.+44     	; 0xbbb6 <update_splash+0x126>
	{
		game.demo_counter = 0;
    bb8a:	10 92 80 0b 	sts	0x0B80, r1
    bb8e:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bb92:	24 e0       	ldi	r18, 0x04	; 4
    bb94:	40 91 28 0f 	lds	r20, 0x0F28
    bb98:	60 91 b2 0b 	lds	r22, 0x0BB2
    bb9c:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    bba0:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_eeprom(&handles);
    bba4:	86 e5       	ldi	r24, 0x56	; 86
    bba6:	9b e0       	ldi	r25, 0x0B	; 11
    bba8:	0e 94 04 4f 	call	0x9e08	; 0x9e08 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bbac:	df 91       	pop	r29
    bbae:	cf 91       	pop	r28
    bbb0:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    bbb2:	0c 94 18 5c 	jmp	0xb830	; 0xb830 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    bbb6:	82 30       	cpi	r24, 0x02	; 2
    bbb8:	91 f4       	brne	.+36     	; 0xbbde <update_splash+0x14e>
	{
		game.demo_counter = 0;
    bbba:	10 92 80 0b 	sts	0x0B80, r1
    bbbe:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bbc2:	24 e0       	ldi	r18, 0x04	; 4
    bbc4:	40 91 28 0f 	lds	r20, 0x0F28
    bbc8:	60 91 b2 0b 	lds	r22, 0x0BB2
    bbcc:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    bbd0:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bbd4:	df 91       	pop	r29
    bbd6:	cf 91       	pop	r28
    bbd8:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_host_net_game();
    bbda:	0c 94 a9 5c 	jmp	0xb952	; 0xb952 <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    bbde:	83 30       	cpi	r24, 0x03	; 3
    bbe0:	91 f4       	brne	.+36     	; 0xbc06 <update_splash+0x176>
	{
		game.demo_counter = 0;
    bbe2:	10 92 80 0b 	sts	0x0B80, r1
    bbe6:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bbea:	24 e0       	ldi	r18, 0x04	; 4
    bbec:	40 91 28 0f 	lds	r20, 0x0F28
    bbf0:	60 91 b2 0b 	lds	r22, 0x0BB2
    bbf4:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    bbf8:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bbfc:	df 91       	pop	r29
    bbfe:	cf 91       	pop	r28
    bc00:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_join_net_game();
    bc02:	0c 94 14 5d 	jmp	0xba28	; 0xba28 <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    bc06:	84 30       	cpi	r24, 0x04	; 4
    bc08:	b1 f4       	brne	.+44     	; 0xbc36 <update_splash+0x1a6>
	{
		game.demo_counter = 0;
    bc0a:	10 92 80 0b 	sts	0x0B80, r1
    bc0e:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bc12:	24 e0       	ldi	r18, 0x04	; 4
    bc14:	40 91 28 0f 	lds	r20, 0x0F28
    bc18:	60 91 b2 0b 	lds	r22, 0x0BB2
    bc1c:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    bc20:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_eeprom(&scores);
    bc24:	86 e3       	ldi	r24, 0x36	; 54
    bc26:	9b e0       	ldi	r25, 0x0B	; 11
    bc28:	0e 94 04 4f 	call	0x9e08	; 0x9e08 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bc2c:	df 91       	pop	r29
    bc2e:	cf 91       	pop	r28
    bc30:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    bc32:	0c 94 91 59 	jmp	0xb322	; 0xb322 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    bc36:	80 91 7f 0b 	lds	r24, 0x0B7F
    bc3a:	90 91 80 0b 	lds	r25, 0x0B80
    bc3e:	88 35       	cpi	r24, 0x58	; 88
    bc40:	92 40       	sbci	r25, 0x02	; 2
    bc42:	08 f4       	brcc	.+2      	; 0xbc46 <update_splash+0x1b6>
    bc44:	4c c0       	rjmp	.+152    	; 0xbcde <update_splash+0x24e>
	{
		game.demo_counter = 0;
    bc46:	10 92 80 0b 	sts	0x0B80, r1
    bc4a:	10 92 7f 0b 	sts	0x0B7F, r1
		if (game.demo_choice % 2 == 0)
    bc4e:	80 91 7e 0b 	lds	r24, 0x0B7E
    bc52:	80 fd       	sbrc	r24, 0
    bc54:	2d c0       	rjmp	.+90     	; 0xbcb0 <update_splash+0x220>
		{
			game.selection = CPUVCPU;
    bc56:	86 e0       	ldi	r24, 0x06	; 6
    bc58:	80 93 89 0b 	sts	0x0B89, r24
			player1.handle_id = 9;
    bc5c:	29 e0       	ldi	r18, 0x09	; 9
    bc5e:	20 93 a8 0b 	sts	0x0BA8, r18
			memcpy(player1.handle, &handles.data[9*3], 3);
    bc62:	80 91 73 0b 	lds	r24, 0x0B73
    bc66:	90 91 74 0b 	lds	r25, 0x0B74
    bc6a:	a0 91 75 0b 	lds	r26, 0x0B75
    bc6e:	80 93 a9 0b 	sts	0x0BA9, r24
    bc72:	90 93 aa 0b 	sts	0x0BAA, r25
    bc76:	a0 93 ab 0b 	sts	0x0BAB, r26
			player2.handle_id = 9;
    bc7a:	20 93 1e 0f 	sts	0x0F1E, r18
			memcpy(player2.handle, &handles.data[9*3], 3);
    bc7e:	80 93 1f 0f 	sts	0x0F1F, r24
    bc82:	90 93 20 0f 	sts	0x0F20, r25
    bc86:	a0 93 21 0f 	sts	0x0F21, r26
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bc8a:	24 e0       	ldi	r18, 0x04	; 4
    bc8c:	40 91 28 0f 	lds	r20, 0x0F28
    bc90:	60 91 b2 0b 	lds	r22, 0x0BB2
    bc94:	86 e0       	ldi	r24, 0x06	; 6
    bc96:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			clear_sprites();
    bc9a:	0e 94 20 4f 	call	0x9e40	; 0x9e40 <clear_sprites>
			fade_through();
    bc9e:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
			level_transition(LBRandom(0, 10));
    bca2:	6a e0       	ldi	r22, 0x0A	; 10
    bca4:	80 e0       	ldi	r24, 0x00	; 0
    bca6:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    bcaa:	0e 94 42 58 	call	0xb084	; 0xb084 <level_transition>
    bcae:	11 c0       	rjmp	.+34     	; 0xbcd2 <update_splash+0x242>
		}
		else
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bcb0:	24 e0       	ldi	r18, 0x04	; 4
    bcb2:	40 91 28 0f 	lds	r20, 0x0F28
    bcb6:	60 91 b2 0b 	lds	r22, 0x0BB2
    bcba:	80 91 89 0b 	lds	r24, 0x0B89
    bcbe:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			fade_through();
    bcc2:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
			load_eeprom(&scores);
    bcc6:	86 e3       	ldi	r24, 0x36	; 54
    bcc8:	9b e0       	ldi	r25, 0x0B	; 11
    bcca:	0e 94 04 4f 	call	0x9e08	; 0x9e08 <load_eeprom>
			load_tank_rank();
    bcce:	0e 94 91 59 	call	0xb322	; 0xb322 <load_tank_rank>
		}
		game.demo_choice++;
    bcd2:	80 91 7e 0b 	lds	r24, 0x0B7E
    bcd6:	8f 5f       	subi	r24, 0xFF	; 255
    bcd8:	80 93 7e 0b 	sts	0x0B7E, r24
		return;
    bcdc:	09 c0       	rjmp	.+18     	; 0xbcf0 <update_splash+0x260>
		
	}
	game.demo_counter++;
    bcde:	80 91 7f 0b 	lds	r24, 0x0B7F
    bce2:	90 91 80 0b 	lds	r25, 0x0B80
    bce6:	01 96       	adiw	r24, 0x01	; 1
    bce8:	90 93 80 0b 	sts	0x0B80, r25
    bcec:	80 93 7f 0b 	sts	0x0B7F, r24
#endif
}
    bcf0:	df 91       	pop	r29
    bcf2:	cf 91       	pop	r28
    bcf4:	0f 91       	pop	r16
    bcf6:	08 95       	ret

0000bcf8 <update_join_net_game>:
	Print(9, 23, (char*) strCancelHandle);
	gameIdIndex = 2;
}

void update_join_net_game(JoyPadState* p1)
{
    bcf8:	ef 92       	push	r14
    bcfa:	ff 92       	push	r15
    bcfc:	0f 93       	push	r16
    bcfe:	cf 93       	push	r28
    bd00:	df 93       	push	r29
    bd02:	7c 01       	movw	r14, r24
	MapSprite2(0, map_down_arrow, 0);
    bd04:	40 e0       	ldi	r20, 0x00	; 0
    bd06:	64 e1       	ldi	r22, 0x14	; 20
    bd08:	71 e3       	ldi	r23, 0x31	; 49
    bd0a:	80 e0       	ldi	r24, 0x00	; 0
    bd0c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	MapSprite2(1, map_up_arrow, 0);
    bd10:	40 e0       	ldi	r20, 0x00	; 0
    bd12:	61 e1       	ldi	r22, 0x11	; 17
    bd14:	71 e3       	ldi	r23, 0x31	; 49
    bd16:	81 e0       	ldi	r24, 0x01	; 1
    bd18:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	MoveSprite(0, 8*10 + gameIdIndex*8, 9*8, 1, 1);
    bd1c:	60 91 01 01 	lds	r22, 0x0101
    bd20:	66 0f       	add	r22, r22
    bd22:	66 0f       	add	r22, r22
    bd24:	66 0f       	add	r22, r22
    bd26:	60 5b       	subi	r22, 0xB0	; 176
    bd28:	01 e0       	ldi	r16, 0x01	; 1
    bd2a:	21 e0       	ldi	r18, 0x01	; 1
    bd2c:	48 e4       	ldi	r20, 0x48	; 72
    bd2e:	80 e0       	ldi	r24, 0x00	; 0
    bd30:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
	MoveSprite(1, 8*10 + gameIdIndex*8, 11*8, 1, 1);
    bd34:	60 91 01 01 	lds	r22, 0x0101
    bd38:	66 0f       	add	r22, r22
    bd3a:	66 0f       	add	r22, r22
    bd3c:	66 0f       	add	r22, r22
    bd3e:	60 5b       	subi	r22, 0xB0	; 176
    bd40:	21 e0       	ldi	r18, 0x01	; 1
    bd42:	48 e5       	ldi	r20, 0x58	; 88
    bd44:	81 e0       	ldi	r24, 0x01	; 1
    bd46:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
	LBPrintStr(10, 10, (u8*) gameId, 8);
    bd4a:	28 e0       	ldi	r18, 0x08	; 8
    bd4c:	42 e0       	ldi	r20, 0x02	; 2
    bd4e:	51 e0       	ldi	r21, 0x01	; 1
    bd50:	6a e0       	ldi	r22, 0x0A	; 10
    bd52:	8a e0       	ldi	r24, 0x0A	; 10
    bd54:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
		
	if (p1->pressed & BTN_X)
    bd58:	f7 01       	movw	r30, r14
    bd5a:	c0 81       	ld	r28, Z
    bd5c:	d1 81       	ldd	r29, Z+1	; 0x01
    bd5e:	d1 ff       	sbrs	r29, 1
    bd60:	12 c0       	rjmp	.+36     	; 0xbd86 <update_join_net_game+0x8e>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd62:	24 e0       	ldi	r18, 0x04	; 4
    bd64:	40 91 28 0f 	lds	r20, 0x0F28
    bd68:	60 91 b2 0b 	lds	r22, 0x0BB2
    bd6c:	80 91 89 0b 	lds	r24, 0x0B89
    bd70:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		fade_through();
    bd74:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bd78:	df 91       	pop	r29
    bd7a:	cf 91       	pop	r28
    bd7c:	0f 91       	pop	r16
    bd7e:	ff 90       	pop	r15
    bd80:	ef 90       	pop	r14
		
	if (p1->pressed & BTN_X)
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_splash();
    bd82:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <load_splash>
	}
	else if (select_pressed(p1))
    bd86:	c7 01       	movw	r24, r14
    bd88:	0e 94 87 59 	call	0xb30e	; 0xb30e <select_pressed>
    bd8c:	88 23       	and	r24, r24
    bd8e:	e1 f1       	breq	.+120    	; 0xbe08 <update_join_net_game+0x110>
	{
		Print(7, 18, (char*) strConnecting);
    bd90:	40 ed       	ldi	r20, 0xD0	; 208
    bd92:	54 e0       	ldi	r21, 0x04	; 4
    bd94:	62 e1       	ldi	r22, 0x12	; 18
    bd96:	70 e0       	ldi	r23, 0x00	; 0
    bd98:	87 e0       	ldi	r24, 0x07	; 7
    bd9a:	90 e0       	ldi	r25, 0x00	; 0
    bd9c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		if (joinNetGame((char*)gameId) == WIFI_OK)
    bda0:	82 e0       	ldi	r24, 0x02	; 2
    bda2:	91 e0       	ldi	r25, 0x01	; 1
    bda4:	0e 94 f8 4c 	call	0x99f0	; 0x99f0 <joinNetGame>
    bda8:	81 11       	cpse	r24, r1
    bdaa:	21 c0       	rjmp	.+66     	; 0xbdee <update_join_net_game+0xf6>
		{
			player2.netMessage.code = NETJOINED;
    bdac:	8a e0       	ldi	r24, 0x0A	; 10
    bdae:	80 93 8a 0f 	sts	0x0F8A, r24
			sendNetMessage(&player2.netMessage);
    bdb2:	8a e8       	ldi	r24, 0x8A	; 138
    bdb4:	9f e0       	ldi	r25, 0x0F	; 15
    bdb6:	0e 94 6d 4c 	call	0x98da	; 0x98da <sendNetMessage>
			game.demo_counter = 0;
    bdba:	10 92 80 0b 	sts	0x0B80, r1
    bdbe:	10 92 7f 0b 	sts	0x0B7F, r1
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bdc2:	24 e0       	ldi	r18, 0x04	; 4
    bdc4:	40 91 28 0f 	lds	r20, 0x0F28
    bdc8:	60 91 b2 0b 	lds	r22, 0x0BB2
    bdcc:	80 91 89 0b 	lds	r24, 0x0B89
    bdd0:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			fade_through();
    bdd4:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
			load_eeprom(&handles);
    bdd8:	86 e5       	ldi	r24, 0x56	; 86
    bdda:	9b e0       	ldi	r25, 0x0B	; 11
    bddc:	0e 94 04 4f 	call	0x9e08	; 0x9e08 <load_eeprom>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bde0:	df 91       	pop	r29
    bde2:	cf 91       	pop	r28
    bde4:	0f 91       	pop	r16
    bde6:	ff 90       	pop	r15
    bde8:	ef 90       	pop	r14
			sendNetMessage(&player2.netMessage);
			game.demo_counter = 0;
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			fade_through();
			load_eeprom(&handles);
			load_handle_select();
    bdea:	0c 94 18 5c 	jmp	0xb830	; 0xb830 <load_handle_select>
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    bdee:	4f ea       	ldi	r20, 0xAF	; 175
    bdf0:	54 e0       	ldi	r21, 0x04	; 4
    bdf2:	62 e1       	ldi	r22, 0x12	; 18
    bdf4:	70 e0       	ldi	r23, 0x00	; 0
    bdf6:	87 e0       	ldi	r24, 0x07	; 7
    bdf8:	90 e0       	ldi	r25, 0x00	; 0
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bdfa:	df 91       	pop	r29
    bdfc:	cf 91       	pop	r28
    bdfe:	0f 91       	pop	r16
    be00:	ff 90       	pop	r15
    be02:	ef 90       	pop	r14
			load_eeprom(&handles);
			load_handle_select();
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    be04:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>
		}
	}
	else if ((p1->pressed & BTN_UP))
    be08:	c4 ff       	sbrs	r28, 4
    be0a:	13 c0       	rjmp	.+38     	; 0xbe32 <update_join_net_game+0x13a>
	{
		gameId[gameIdIndex]--;
    be0c:	e0 91 01 01 	lds	r30, 0x0101
    be10:	f0 e0       	ldi	r31, 0x00	; 0
    be12:	ee 5f       	subi	r30, 0xFE	; 254
    be14:	fe 4f       	sbci	r31, 0xFE	; 254
    be16:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    be18:	95 ec       	ldi	r25, 0xC5	; 197
    be1a:	98 0f       	add	r25, r24
    be1c:	97 30       	cpi	r25, 0x07	; 7
    be1e:	10 f0       	brcs	.+4      	; 0xbe24 <update_join_net_game+0x12c>
			Print(7, 18, (char*) strNetworkError);
		}
	}
	else if ((p1->pressed & BTN_UP))
	{
		gameId[gameIdIndex]--;
    be20:	81 50       	subi	r24, 0x01	; 1
    be22:	01 c0       	rjmp	.+2      	; 0xbe26 <update_join_net_game+0x12e>
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    be24:	89 e3       	ldi	r24, 0x39	; 57
    be26:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
    be28:	80 81       	ld	r24, Z
    be2a:	80 33       	cpi	r24, 0x30	; 48
    be2c:	58 f5       	brcc	.+86     	; 0xbe84 <update_join_net_game+0x18c>
    be2e:	8a e5       	ldi	r24, 0x5A	; 90
    be30:	14 c0       	rjmp	.+40     	; 0xbe5a <update_join_net_game+0x162>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
    be32:	c5 ff       	sbrs	r28, 5
    be34:	14 c0       	rjmp	.+40     	; 0xbe5e <update_join_net_game+0x166>
	{
		gameId[gameIdIndex]++;
    be36:	e0 91 01 01 	lds	r30, 0x0101
    be3a:	f0 e0       	ldi	r31, 0x00	; 0
    be3c:	ee 5f       	subi	r30, 0xFE	; 254
    be3e:	fe 4f       	sbci	r31, 0xFE	; 254
    be40:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    be42:	97 ec       	ldi	r25, 0xC7	; 199
    be44:	98 0f       	add	r25, r24
    be46:	97 30       	cpi	r25, 0x07	; 7
    be48:	10 f0       	brcs	.+4      	; 0xbe4e <update_join_net_game+0x156>
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
	{
		gameId[gameIdIndex]++;
    be4a:	8f 5f       	subi	r24, 0xFF	; 255
    be4c:	01 c0       	rjmp	.+2      	; 0xbe50 <update_join_net_game+0x158>
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    be4e:	81 e4       	ldi	r24, 0x41	; 65
    be50:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] > 'Z') gameId[gameIdIndex] = '0';
    be52:	80 81       	ld	r24, Z
    be54:	8b 35       	cpi	r24, 0x5B	; 91
    be56:	b0 f0       	brcs	.+44     	; 0xbe84 <update_join_net_game+0x18c>
    be58:	80 e3       	ldi	r24, 0x30	; 48
    be5a:	80 83       	st	Z, r24
    be5c:	13 c0       	rjmp	.+38     	; 0xbe84 <update_join_net_game+0x18c>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_RIGHT))
    be5e:	c7 ff       	sbrs	r28, 7
    be60:	07 c0       	rjmp	.+14     	; 0xbe70 <update_join_net_game+0x178>
	{
		gameIdIndex++;
    be62:	80 91 01 01 	lds	r24, 0x0101
    be66:	8f 5f       	subi	r24, 0xFF	; 255
		if (gameIdIndex > 7) gameIdIndex = 7;
    be68:	88 30       	cpi	r24, 0x08	; 8
    be6a:	50 f0       	brcs	.+20     	; 0xbe80 <update_join_net_game+0x188>
    be6c:	87 e0       	ldi	r24, 0x07	; 7
    be6e:	08 c0       	rjmp	.+16     	; 0xbe80 <update_join_net_game+0x188>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_LEFT))
    be70:	c6 ff       	sbrs	r28, 6
    be72:	16 c0       	rjmp	.+44     	; 0xbea0 <update_join_net_game+0x1a8>
	{
		gameIdIndex--;
    be74:	80 91 01 01 	lds	r24, 0x0101
    be78:	81 50       	subi	r24, 0x01	; 1
		if (gameIdIndex < 2) gameIdIndex= 2;
    be7a:	82 30       	cpi	r24, 0x02	; 2
    be7c:	08 f4       	brcc	.+2      	; 0xbe80 <update_join_net_game+0x188>
    be7e:	82 e0       	ldi	r24, 0x02	; 2
    be80:	80 93 01 01 	sts	0x0101, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be84:	24 e0       	ldi	r18, 0x04	; 4
    be86:	40 91 28 0f 	lds	r20, 0x0F28
    be8a:	60 91 b2 0b 	lds	r22, 0x0BB2
    be8e:	80 91 89 0b 	lds	r24, 0x0B89
	}
}
    be92:	df 91       	pop	r29
    be94:	cf 91       	pop	r28
    be96:	0f 91       	pop	r16
    be98:	ff 90       	pop	r15
    be9a:	ef 90       	pop	r14
	}
	else if ((p1->pressed & BTN_LEFT))
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be9c:	0c 94 b7 4a 	jmp	0x956e	; 0x956e <LBPlaySound>
	}
}
    bea0:	df 91       	pop	r29
    bea2:	cf 91       	pop	r28
    bea4:	0f 91       	pop	r16
    bea6:	ff 90       	pop	r15
    bea8:	ef 90       	pop	r14
    beaa:	08 95       	ret

0000beac <button_map>:
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    beac:	00 97       	sbiw	r24, 0x00	; 0
    beae:	41 f0       	breq	.+16     	; 0xbec0 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    beb0:	81 30       	cpi	r24, 0x01	; 1
    beb2:	91 05       	cpc	r25, r1
    beb4:	41 f0       	breq	.+16     	; 0xbec6 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    beb6:	82 30       	cpi	r24, 0x02	; 2
    beb8:	91 05       	cpc	r25, r1
    beba:	41 f0       	breq	.+16     	; 0xbecc <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    bebc:	03 97       	sbiw	r24, 0x03	; 3
    bebe:	49 f0       	breq	.+18     	; 0xbed2 <button_map+0x26>
}
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    bec0:	80 e1       	ldi	r24, 0x10	; 16
    bec2:	90 e0       	ldi	r25, 0x00	; 0
    bec4:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    bec6:	80 e2       	ldi	r24, 0x20	; 32
    bec8:	90 e0       	ldi	r25, 0x00	; 0
    beca:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    becc:	80 e4       	ldi	r24, 0x40	; 64
    bece:	90 e0       	ldi	r25, 0x00	; 0
    bed0:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    bed2:	80 e8       	ldi	r24, 0x80	; 128
    bed4:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    bed6:	08 95       	ret

0000bed8 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    bed8:	8f 92       	push	r8
    beda:	9f 92       	push	r9
    bedc:	af 92       	push	r10
    bede:	bf 92       	push	r11
    bee0:	cf 92       	push	r12
    bee2:	df 92       	push	r13
    bee4:	ef 92       	push	r14
    bee6:	ff 92       	push	r15
    bee8:	0f 93       	push	r16
    beea:	1f 93       	push	r17
    beec:	cf 93       	push	r28
    beee:	df 93       	push	r29
    bef0:	f8 2e       	mov	r15, r24
    bef2:	e6 2e       	mov	r14, r22
    bef4:	d4 2e       	mov	r13, r20
    bef6:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    bef8:	88 89       	ldd	r24, Y+16	; 0x10
    befa:	88 23       	and	r24, r24
    befc:	09 f4       	brne	.+2      	; 0xbf00 <crash_and_turn+0x28>
    befe:	aa c0       	rjmp	.+340    	; 0xc054 <crash_and_turn+0x17c>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    bf00:	f8 01       	movw	r30, r16
    bf02:	c4 80       	ldd	r12, Z+4	; 0x04
    bf04:	c4 fe       	sbrs	r12, 4
    bf06:	23 c0       	rjmp	.+70     	; 0xbf4e <crash_and_turn+0x76>
    bf08:	fe e1       	ldi	r31, 0x1E	; 30
    bf0a:	6f 02       	muls	r22, r31
    bf0c:	40 01       	movw	r8, r0
    bf0e:	11 24       	eor	r1, r1
    bf10:	af 2c       	mov	r10, r15
    bf12:	bb 24       	eor	r11, r11
    bf14:	a7 fc       	sbrc	r10, 7
    bf16:	b0 94       	com	r11
    bf18:	c4 01       	movw	r24, r8
    bf1a:	8a 0d       	add	r24, r10
    bf1c:	9b 1d       	adc	r25, r11
    bf1e:	01 97       	sbiw	r24, 0x01	; 1
    bf20:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf24:	81 11       	cpse	r24, r1
    bf26:	13 c0       	rjmp	.+38     	; 0xbf4e <crash_and_turn+0x76>
    bf28:	c4 01       	movw	r24, r8
    bf2a:	8a 0d       	add	r24, r10
    bf2c:	9b 1d       	adc	r25, r11
    bf2e:	4d 96       	adiw	r24, 0x1d	; 29
    bf30:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf34:	81 11       	cpse	r24, r1
    bf36:	0b c0       	rjmp	.+22     	; 0xbf4e <crash_and_turn+0x76>
    bf38:	c4 01       	movw	r24, r8
    bf3a:	8a 0d       	add	r24, r10
    bf3c:	9b 1d       	adc	r25, r11
    bf3e:	cb 96       	adiw	r24, 0x3b	; 59
    bf40:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf44:	81 11       	cpse	r24, r1
    bf46:	03 c0       	rjmp	.+6      	; 0xbf4e <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    bf48:	80 e4       	ldi	r24, 0x40	; 64
    bf4a:	90 e0       	ldi	r25, 0x00	; 0
    bf4c:	6f c0       	rjmp	.+222    	; 0xc02c <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    bf4e:	c6 fe       	sbrs	r12, 6
    bf50:	23 c0       	rjmp	.+70     	; 0xbf98 <crash_and_turn+0xc0>
    bf52:	8e 2d       	mov	r24, r14
    bf54:	99 27       	eor	r25, r25
    bf56:	87 fd       	sbrc	r24, 7
    bf58:	90 95       	com	r25
    bf5a:	02 96       	adiw	r24, 0x02	; 2
    bf5c:	2e e1       	ldi	r18, 0x1E	; 30
    bf5e:	28 9f       	mul	r18, r24
    bf60:	50 01       	movw	r10, r0
    bf62:	29 9f       	mul	r18, r25
    bf64:	b0 0c       	add	r11, r0
    bf66:	11 24       	eor	r1, r1
    bf68:	af 0c       	add	r10, r15
    bf6a:	b1 1c       	adc	r11, r1
    bf6c:	f7 fc       	sbrc	r15, 7
    bf6e:	ba 94       	dec	r11
    bf70:	c5 01       	movw	r24, r10
    bf72:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf76:	81 11       	cpse	r24, r1
    bf78:	0f c0       	rjmp	.+30     	; 0xbf98 <crash_and_turn+0xc0>
    bf7a:	c5 01       	movw	r24, r10
    bf7c:	01 96       	adiw	r24, 0x01	; 1
    bf7e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf82:	81 11       	cpse	r24, r1
    bf84:	09 c0       	rjmp	.+18     	; 0xbf98 <crash_and_turn+0xc0>
    bf86:	c5 01       	movw	r24, r10
    bf88:	02 96       	adiw	r24, 0x02	; 2
    bf8a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bf8e:	81 11       	cpse	r24, r1
    bf90:	03 c0       	rjmp	.+6      	; 0xbf98 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    bf92:	80 e2       	ldi	r24, 0x20	; 32
    bf94:	90 e0       	ldi	r25, 0x00	; 0
    bf96:	4a c0       	rjmp	.+148    	; 0xc02c <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    bf98:	c5 fe       	sbrs	r12, 5
    bf9a:	24 c0       	rjmp	.+72     	; 0xbfe4 <crash_and_turn+0x10c>
    bf9c:	fe 2d       	mov	r31, r14
    bf9e:	8e e1       	ldi	r24, 0x1E	; 30
    bfa0:	f8 02       	muls	r31, r24
    bfa2:	40 01       	movw	r8, r0
    bfa4:	11 24       	eor	r1, r1
    bfa6:	af 2c       	mov	r10, r15
    bfa8:	bb 24       	eor	r11, r11
    bfaa:	a7 fc       	sbrc	r10, 7
    bfac:	b0 94       	com	r11
    bfae:	c4 01       	movw	r24, r8
    bfb0:	8a 0d       	add	r24, r10
    bfb2:	9b 1d       	adc	r25, r11
    bfb4:	02 96       	adiw	r24, 0x02	; 2
    bfb6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bfba:	81 11       	cpse	r24, r1
    bfbc:	13 c0       	rjmp	.+38     	; 0xbfe4 <crash_and_turn+0x10c>
    bfbe:	c4 01       	movw	r24, r8
    bfc0:	8a 0d       	add	r24, r10
    bfc2:	9b 1d       	adc	r25, r11
    bfc4:	80 96       	adiw	r24, 0x20	; 32
    bfc6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bfca:	81 11       	cpse	r24, r1
    bfcc:	0b c0       	rjmp	.+22     	; 0xbfe4 <crash_and_turn+0x10c>
    bfce:	c4 01       	movw	r24, r8
    bfd0:	8a 0d       	add	r24, r10
    bfd2:	9b 1d       	adc	r25, r11
    bfd4:	ce 96       	adiw	r24, 0x3e	; 62
    bfd6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bfda:	81 11       	cpse	r24, r1
    bfdc:	03 c0       	rjmp	.+6      	; 0xbfe4 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    bfde:	80 e8       	ldi	r24, 0x80	; 128
    bfe0:	90 e0       	ldi	r25, 0x00	; 0
    bfe2:	24 c0       	rjmp	.+72     	; 0xc02c <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    bfe4:	c7 fe       	sbrs	r12, 7
    bfe6:	2b c0       	rjmp	.+86     	; 0xc03e <crash_and_turn+0x166>
    bfe8:	8e 2d       	mov	r24, r14
    bfea:	99 27       	eor	r25, r25
    bfec:	87 fd       	sbrc	r24, 7
    bfee:	90 95       	com	r25
    bff0:	01 97       	sbiw	r24, 0x01	; 1
    bff2:	2e e1       	ldi	r18, 0x1E	; 30
    bff4:	28 9f       	mul	r18, r24
    bff6:	50 01       	movw	r10, r0
    bff8:	29 9f       	mul	r18, r25
    bffa:	b0 0c       	add	r11, r0
    bffc:	11 24       	eor	r1, r1
    bffe:	af 0c       	add	r10, r15
    c000:	b1 1c       	adc	r11, r1
    c002:	f7 fc       	sbrc	r15, 7
    c004:	ba 94       	dec	r11
    c006:	c5 01       	movw	r24, r10
    c008:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    c00c:	81 11       	cpse	r24, r1
    c00e:	17 c0       	rjmp	.+46     	; 0xc03e <crash_and_turn+0x166>
    c010:	c5 01       	movw	r24, r10
    c012:	01 96       	adiw	r24, 0x01	; 1
    c014:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    c018:	81 11       	cpse	r24, r1
    c01a:	11 c0       	rjmp	.+34     	; 0xc03e <crash_and_turn+0x166>
    c01c:	c5 01       	movw	r24, r10
    c01e:	02 96       	adiw	r24, 0x02	; 2
    c020:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    c024:	81 11       	cpse	r24, r1
    c026:	0b c0       	rjmp	.+22     	; 0xc03e <crash_and_turn+0x166>
		{
			p->held = BTN_UP;
    c028:	80 e1       	ldi	r24, 0x10	; 16
    c02a:	90 e0       	ldi	r25, 0x00	; 0
    c02c:	f8 01       	movw	r30, r16
    c02e:	95 83       	std	Z+5, r25	; 0x05
    c030:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->netMessage.shared);
    c032:	ce 01       	movw	r24, r28
    c034:	8e 58       	subi	r24, 0x8E	; 142
    c036:	9f 4f       	sbci	r25, 0xFF	; 255
    c038:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
			recoiled = 0;
    c03c:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    c03e:	f8 01       	movw	r30, r16
    c040:	24 81       	ldd	r18, Z+4	; 0x04
    c042:	35 81       	ldd	r19, Z+5	; 0x05
    c044:	8c 89       	ldd	r24, Y+20	; 0x14
    c046:	9d 89       	ldd	r25, Y+21	; 0x15
    c048:	82 23       	and	r24, r18
    c04a:	93 23       	and	r25, r19
    c04c:	89 2b       	or	r24, r25
    c04e:	11 f0       	breq	.+4      	; 0xc054 <crash_and_turn+0x17c>
		{
			player->feeling_my_way = 0;
    c050:	18 8a       	std	Y+16, r1	; 0x10
    c052:	1c c0       	rjmp	.+56     	; 0xc08c <crash_and_turn+0x1b4>
			recoiled = 0;
		}
	}
	if (recoiled)
    c054:	dd 20       	and	r13, r13
    c056:	d1 f0       	breq	.+52     	; 0xc08c <crash_and_turn+0x1b4>
	{
		if (p->held & BTN_LEFT)
    c058:	f8 01       	movw	r30, r16
    c05a:	84 81       	ldd	r24, Z+4	; 0x04
    c05c:	86 ff       	sbrs	r24, 6
    c05e:	03 c0       	rjmp	.+6      	; 0xc066 <crash_and_turn+0x18e>
		{
			p->held = BTN_UP;
    c060:	80 e1       	ldi	r24, 0x10	; 16
    c062:	90 e0       	ldi	r25, 0x00	; 0
    c064:	0f c0       	rjmp	.+30     	; 0xc084 <crash_and_turn+0x1ac>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    c066:	84 ff       	sbrs	r24, 4
    c068:	03 c0       	rjmp	.+6      	; 0xc070 <crash_and_turn+0x198>
		{
			p->held = BTN_RIGHT;
    c06a:	80 e8       	ldi	r24, 0x80	; 128
    c06c:	90 e0       	ldi	r25, 0x00	; 0
    c06e:	09 c0       	rjmp	.+18     	; 0xc082 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    c070:	87 ff       	sbrs	r24, 7
    c072:	03 c0       	rjmp	.+6      	; 0xc07a <crash_and_turn+0x1a2>
		{
			p->held = BTN_DOWN;
    c074:	80 e2       	ldi	r24, 0x20	; 32
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	04 c0       	rjmp	.+8      	; 0xc082 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    c07a:	85 ff       	sbrs	r24, 5
    c07c:	07 c0       	rjmp	.+14     	; 0xc08c <crash_and_turn+0x1b4>
		{
			p->held = BTN_LEFT;
    c07e:	80 e4       	ldi	r24, 0x40	; 64
    c080:	90 e0       	ldi	r25, 0x00	; 0
    c082:	f8 01       	movw	r30, r16
    c084:	95 83       	std	Z+5, r25	; 0x05
    c086:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    c088:	81 e0       	ldi	r24, 0x01	; 1
    c08a:	88 8b       	std	Y+16, r24	; 0x10
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c08c:	8c 89       	ldd	r24, Y+20	; 0x14
    c08e:	9d 89       	ldd	r25, Y+21	; 0x15
    c090:	80 31       	cpi	r24, 0x10	; 16
    c092:	91 05       	cpc	r25, r1
    c094:	19 f0       	breq	.+6      	; 0xc09c <crash_and_turn+0x1c4>
    c096:	80 32       	cpi	r24, 0x20	; 32
    c098:	91 05       	cpc	r25, r1
    c09a:	19 f4       	brne	.+6      	; 0xc0a2 <crash_and_turn+0x1ca>
    c09c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    c09e:	e2 16       	cp	r14, r18
    c0a0:	59 f0       	breq	.+22     	; 0xc0b8 <crash_and_turn+0x1e0>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c0a2:	80 34       	cpi	r24, 0x40	; 64
    c0a4:	91 05       	cpc	r25, r1
    c0a6:	19 f0       	breq	.+6      	; 0xc0ae <crash_and_turn+0x1d6>
    c0a8:	80 38       	cpi	r24, 0x80	; 128
    c0aa:	91 05       	cpc	r25, r1
    c0ac:	39 f4       	brne	.+14     	; 0xc0bc <crash_and_turn+0x1e4>
    c0ae:	81 e0       	ldi	r24, 0x01	; 1
    c0b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    c0b2:	f9 12       	cpse	r15, r25
    c0b4:	03 c0       	rjmp	.+6      	; 0xc0bc <crash_and_turn+0x1e4>
    c0b6:	03 c0       	rjmp	.+6      	; 0xc0be <crash_and_turn+0x1e6>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c0b8:	81 e0       	ldi	r24, 0x01	; 1
    c0ba:	01 c0       	rjmp	.+2      	; 0xc0be <crash_and_turn+0x1e6>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c0bc:	80 e0       	ldi	r24, 0x00	; 0
}
    c0be:	df 91       	pop	r29
    c0c0:	cf 91       	pop	r28
    c0c2:	1f 91       	pop	r17
    c0c4:	0f 91       	pop	r16
    c0c6:	ff 90       	pop	r15
    c0c8:	ef 90       	pop	r14
    c0ca:	df 90       	pop	r13
    c0cc:	cf 90       	pop	r12
    c0ce:	bf 90       	pop	r11
    c0d0:	af 90       	pop	r10
    c0d2:	9f 90       	pop	r9
    c0d4:	8f 90       	pop	r8
    c0d6:	08 95       	ret

0000c0d8 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    c0d8:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c0da:	26 2f       	mov	r18, r22
    c0dc:	33 27       	eor	r19, r19
    c0de:	27 fd       	sbrc	r18, 7
    c0e0:	30 95       	com	r19
    c0e2:	37 ff       	sbrs	r19, 7
    c0e4:	03 c0       	rjmp	.+6      	; 0xc0ec <get_cpu_goal_direction+0x14>
    c0e6:	31 95       	neg	r19
    c0e8:	21 95       	neg	r18
    c0ea:	31 09       	sbc	r19, r1
    c0ec:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c0ee:	24 2f       	mov	r18, r20
    c0f0:	33 27       	eor	r19, r19
    c0f2:	27 fd       	sbrc	r18, 7
    c0f4:	30 95       	com	r19
    c0f6:	37 ff       	sbrs	r19, 7
    c0f8:	03 c0       	rjmp	.+6      	; 0xc100 <get_cpu_goal_direction+0x28>
    c0fa:	31 95       	neg	r19
    c0fc:	21 95       	neg	r18
    c0fe:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    c100:	81 89       	ldd	r24, Z+17	; 0x11
    c102:	81 11       	cpse	r24, r1
    c104:	08 c0       	rjmp	.+16     	; 0xc116 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    c106:	29 17       	cp	r18, r25
    c108:	1c f4       	brge	.+6      	; 0xc110 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    c10a:	16 16       	cp	r1, r22
    c10c:	94 f0       	brlt	.+36     	; 0xc132 <get_cpu_goal_direction+0x5a>
    c10e:	0b c0       	rjmp	.+22     	; 0xc126 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    c110:	14 16       	cp	r1, r20
    c112:	94 f0       	brlt	.+36     	; 0xc138 <get_cpu_goal_direction+0x60>
    c114:	0b c0       	rjmp	.+22     	; 0xc12c <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    c116:	29 17       	cp	r18, r25
    c118:	1c f4       	brge	.+6      	; 0xc120 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    c11a:	16 16       	cp	r1, r22
    c11c:	24 f0       	brlt	.+8      	; 0xc126 <get_cpu_goal_direction+0x4e>
    c11e:	09 c0       	rjmp	.+18     	; 0xc132 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    c120:	14 16       	cp	r1, r20
    c122:	24 f0       	brlt	.+8      	; 0xc12c <get_cpu_goal_direction+0x54>
    c124:	09 c0       	rjmp	.+18     	; 0xc138 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    c126:	80 e4       	ldi	r24, 0x40	; 64
    c128:	90 e0       	ldi	r25, 0x00	; 0
    c12a:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    c12c:	80 e1       	ldi	r24, 0x10	; 16
    c12e:	90 e0       	ldi	r25, 0x00	; 0
    c130:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    c132:	80 e8       	ldi	r24, 0x80	; 128
    c134:	90 e0       	ldi	r25, 0x00	; 0
    c136:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    c138:	80 e2       	ldi	r24, 0x20	; 32
    c13a:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    c13c:	08 95       	ret

0000c13e <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c13e:	2f 92       	push	r2
    c140:	3f 92       	push	r3
    c142:	4f 92       	push	r4
    c144:	5f 92       	push	r5
    c146:	6f 92       	push	r6
    c148:	7f 92       	push	r7
    c14a:	8f 92       	push	r8
    c14c:	9f 92       	push	r9
    c14e:	af 92       	push	r10
    c150:	bf 92       	push	r11
    c152:	cf 92       	push	r12
    c154:	df 92       	push	r13
    c156:	ef 92       	push	r14
    c158:	ff 92       	push	r15
    c15a:	0f 93       	push	r16
    c15c:	1f 93       	push	r17
    c15e:	cf 93       	push	r28
    c160:	df 93       	push	r29
    c162:	00 d0       	rcall	.+0      	; 0xc164 <get_cpu_joypad_state+0x26>
    c164:	00 d0       	rcall	.+0      	; 0xc166 <get_cpu_joypad_state+0x28>
    c166:	00 d0       	rcall	.+0      	; 0xc168 <get_cpu_joypad_state+0x2a>
    c168:	cd b7       	in	r28, 0x3d	; 61
    c16a:	de b7       	in	r29, 0x3e	; 62
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c16c:	3b 01       	movw	r6, r22
    c16e:	26 e7       	ldi	r18, 0x76	; 118
    c170:	62 0e       	add	r6, r18
    c172:	71 1c       	adc	r7, r1
    c174:	d3 01       	movw	r26, r6
    c176:	0d 91       	ld	r16, X+
    c178:	1c 91       	ld	r17, X
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c17a:	fb 01       	movw	r30, r22
    c17c:	e8 58       	subi	r30, 0x88	; 136
    c17e:	ff 4f       	sbci	r31, 0xFF	; 255
    c180:	fc 83       	std	Y+4, r31	; 0x04
    c182:	eb 83       	std	Y+3, r30	; 0x03
    c184:	40 80       	ld	r4, Z
    c186:	51 80       	ldd	r5, Z+1	; 0x01
	player_x = player->netMessage.shared.x / 800;
    c188:	5c 01       	movw	r10, r24
    c18a:	f6 e7       	ldi	r31, 0x76	; 118
    c18c:	af 0e       	add	r10, r31
    c18e:	b1 1c       	adc	r11, r1
    c190:	d5 01       	movw	r26, r10
    c192:	2d 90       	ld	r2, X+
    c194:	3c 90       	ld	r3, X
	player_y =  player->netMessage.shared.y / 800 - 3;
    c196:	4c 01       	movw	r8, r24
    c198:	b8 e7       	ldi	r27, 0x78	; 120
    c19a:	8b 0e       	add	r8, r27
    c19c:	91 1c       	adc	r9, r1
    c19e:	f4 01       	movw	r30, r8
    c1a0:	01 90       	ld	r0, Z+
    c1a2:	f0 81       	ld	r31, Z
    c1a4:	e0 2d       	mov	r30, r0
    c1a6:	fa 83       	std	Y+2, r31	; 0x02
    c1a8:	e9 83       	std	Y+1, r30	; 0x01
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c1aa:	dc 01       	movw	r26, r24
    c1ac:	1b 96       	adiw	r26, 0x0b	; 11
    c1ae:	2c 91       	ld	r18, X
    c1b0:	21 11       	cpse	r18, r1
    c1b2:	04 c0       	rjmp	.+8      	; 0xc1bc <get_cpu_joypad_state+0x7e>
	{
		p->held = 0;
    c1b4:	fa 01       	movw	r30, r20
    c1b6:	15 82       	std	Z+5, r1	; 0x05
    c1b8:	14 82       	std	Z+4, r1	; 0x04
		return;
    c1ba:	dc c1       	rjmp	.+952    	; 0xc574 <get_cpu_joypad_state+0x436>
    c1bc:	6a 01       	movw	r12, r20
    c1be:	7b 01       	movw	r14, r22
    c1c0:	9e 83       	std	Y+6, r25	; 0x06
    c1c2:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	// Shot
	if (shoot_pressed(p))
    c1c4:	ca 01       	movw	r24, r20
    c1c6:	0e 94 98 50 	call	0xa130	; 0xa130 <shoot_pressed>
    c1ca:	88 23       	and	r24, r24
    c1cc:	19 f0       	breq	.+6      	; 0xc1d4 <get_cpu_joypad_state+0x96>
	{
		p->pressed = 0;
    c1ce:	d6 01       	movw	r26, r12
    c1d0:	1d 92       	st	X+, r1
    c1d2:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c1d4:	20 91 0b 01 	lds	r18, 0x010B
    c1d8:	30 91 0c 01 	lds	r19, 0x010C
    c1dc:	c9 01       	movw	r24, r18
    c1de:	6a e0       	ldi	r22, 0x0A	; 10
    c1e0:	70 e0       	ldi	r23, 0x00	; 0
    c1e2:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c1e6:	89 2b       	or	r24, r25
    c1e8:	51 f4       	brne	.+20     	; 0xc1fe <get_cpu_joypad_state+0xc0>
    c1ea:	ed 81       	ldd	r30, Y+5	; 0x05
    c1ec:	fe 81       	ldd	r31, Y+6	; 0x06
    c1ee:	83 85       	ldd	r24, Z+11	; 0x0b
    c1f0:	83 33       	cpi	r24, 0x33	; 51
    c1f2:	28 f0       	brcs	.+10     	; 0xc1fe <get_cpu_joypad_state+0xc0>
	{
		p->pressed = BTN_B;
    c1f4:	81 e0       	ldi	r24, 0x01	; 1
    c1f6:	90 e0       	ldi	r25, 0x00	; 0
    c1f8:	d6 01       	movw	r26, r12
    c1fa:	8d 93       	st	X+, r24
    c1fc:	9c 93       	st	X, r25
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c1fe:	c9 01       	movw	r24, r18
    c200:	64 eb       	ldi	r22, 0xB4	; 180
    c202:	70 e0       	ldi	r23, 0x00	; 0
    c204:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c208:	89 2b       	or	r24, r25
    c20a:	49 f0       	breq	.+18     	; 0xc21e <get_cpu_joypad_state+0xe0>
    c20c:	ed 81       	ldd	r30, Y+5	; 0x05
    c20e:	fe 81       	ldd	r31, Y+6	; 0x06
    c210:	83 85       	ldd	r24, Z+11	; 0x0b
    c212:	8a 30       	cpi	r24, 0x0A	; 10
    c214:	21 f0       	breq	.+8      	; 0xc21e <get_cpu_joypad_state+0xe0>
    c216:	83 8d       	ldd	r24, Z+27	; 0x1b
    c218:	88 23       	and	r24, r24
    c21a:	09 f4       	brne	.+2      	; 0xc21e <get_cpu_joypad_state+0xe0>
    c21c:	5a c0       	rjmp	.+180    	; 0xc2d2 <get_cpu_joypad_state+0x194>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c21e:	20 e2       	ldi	r18, 0x20	; 32
    c220:	33 e0       	ldi	r19, 0x03	; 3
    c222:	c8 01       	movw	r24, r16
    c224:	b9 01       	movw	r22, r18
    c226:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c22a:	16 2f       	mov	r17, r22
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c22c:	c2 01       	movw	r24, r4
    c22e:	b9 01       	movw	r22, r18
    c230:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c234:	46 2f       	mov	r20, r22
	player_x = player->netMessage.shared.x / 800;
    c236:	c1 01       	movw	r24, r2
    c238:	b9 01       	movw	r22, r18
    c23a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
	player_y =  player->netMessage.shared.y / 800 - 3;
	distance_x = goal_x - player_x;
    c23e:	e1 2f       	mov	r30, r17
    c240:	e6 1b       	sub	r30, r22
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
	goal_y = other_player->netMessage.shared.y / 800 - 3;
	player_x = player->netMessage.shared.x / 800;
	player_y =  player->netMessage.shared.y / 800 - 3;
    c242:	89 81       	ldd	r24, Y+1	; 0x01
    c244:	9a 81       	ldd	r25, Y+2	; 0x02
    c246:	b9 01       	movw	r22, r18
    c248:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c24c:	0d ef       	ldi	r16, 0xFD	; 253
    c24e:	04 0f       	add	r16, r20
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c250:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c252:	ad 81       	ldd	r26, Y+5	; 0x05
    c254:	be 81       	ldd	r27, Y+6	; 0x06
    c256:	5b 96       	adiw	r26, 0x1b	; 27
    c258:	1c 92       	st	X, r1
    c25a:	5b 97       	sbiw	r26, 0x1b	; 27
		player->feeling_my_way = 0;
    c25c:	50 96       	adiw	r26, 0x10	; 16
    c25e:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c260:	82 e0       	ldi	r24, 0x02	; 2
    c262:	8e 0f       	add	r24, r30
    c264:	85 30       	cpi	r24, 0x05	; 5
    c266:	c0 f4       	brcc	.+48     	; 0xc298 <get_cpu_joypad_state+0x15a>
    c268:	4e 3f       	cpi	r20, 0xFE	; 254
    c26a:	b4 f0       	brlt	.+44     	; 0xc298 <get_cpu_joypad_state+0x15a>
    c26c:	43 30       	cpi	r20, 0x03	; 3
    c26e:	a4 f4       	brge	.+40     	; 0xc298 <get_cpu_joypad_state+0x15a>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c270:	64 e0       	ldi	r22, 0x04	; 4
    c272:	80 e0       	ldi	r24, 0x00	; 0
    c274:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    c278:	90 e0       	ldi	r25, 0x00	; 0
    c27a:	0e 94 56 5f 	call	0xbeac	; 0xbeac <button_map>
    c27e:	ed 81       	ldd	r30, Y+5	; 0x05
    c280:	fe 81       	ldd	r31, Y+6	; 0x06
    c282:	95 8b       	std	Z+21, r25	; 0x15
    c284:	84 8b       	std	Z+20, r24	; 0x14
			player->goal = LBRandom(5, 18);
    c286:	62 e1       	ldi	r22, 0x12	; 18
    c288:	85 e0       	ldi	r24, 0x05	; 5
    c28a:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    c28e:	ad 81       	ldd	r26, Y+5	; 0x05
    c290:	be 81       	ldd	r27, Y+6	; 0x06
    c292:	5a 96       	adiw	r26, 0x1a	; 26
    c294:	8c 93       	st	X, r24
    c296:	14 c0       	rjmp	.+40     	; 0xc2c0 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c298:	6e 2f       	mov	r22, r30
    c29a:	8d 81       	ldd	r24, Y+5	; 0x05
    c29c:	9e 81       	ldd	r25, Y+6	; 0x06
    c29e:	0e 94 6c 60 	call	0xc0d8	; 0xc0d8 <get_cpu_goal_direction>
    c2a2:	ed 81       	ldd	r30, Y+5	; 0x05
    c2a4:	fe 81       	ldd	r31, Y+6	; 0x06
    c2a6:	95 8b       	std	Z+21, r25	; 0x15
    c2a8:	84 8b       	std	Z+20, r24	; 0x14
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c2aa:	80 31       	cpi	r24, 0x10	; 16
    c2ac:	91 05       	cpc	r25, r1
    c2ae:	21 f0       	breq	.+8      	; 0xc2b8 <get_cpu_joypad_state+0x17a>
    c2b0:	80 97       	sbiw	r24, 0x20	; 32
    c2b2:	11 f0       	breq	.+4      	; 0xc2b8 <get_cpu_joypad_state+0x17a>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c2b4:	12 8f       	std	Z+26, r17	; 0x1a
    c2b6:	04 c0       	rjmp	.+8      	; 0xc2c0 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c2b8:	ad 81       	ldd	r26, Y+5	; 0x05
    c2ba:	be 81       	ldd	r27, Y+6	; 0x06
    c2bc:	5a 96       	adiw	r26, 0x1a	; 26
    c2be:	0c 93       	st	X, r16
		}
		p->held = player->goal_direction;
    c2c0:	ed 81       	ldd	r30, Y+5	; 0x05
    c2c2:	fe 81       	ldd	r31, Y+6	; 0x06
    c2c4:	84 89       	ldd	r24, Z+20	; 0x14
    c2c6:	95 89       	ldd	r25, Z+21	; 0x15
    c2c8:	d6 01       	movw	r26, r12
    c2ca:	15 96       	adiw	r26, 0x05	; 5
    c2cc:	9c 93       	st	X, r25
    c2ce:	8e 93       	st	-X, r24
    c2d0:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->netMessage.shared.x != player->old_x)
    c2d2:	f5 01       	movw	r30, r10
    c2d4:	20 81       	ld	r18, Z
    c2d6:	31 81       	ldd	r19, Z+1	; 0x01
    c2d8:	ad 81       	ldd	r26, Y+5	; 0x05
    c2da:	be 81       	ldd	r27, Y+6	; 0x06
    c2dc:	5e 96       	adiw	r26, 0x1e	; 30
    c2de:	8d 91       	ld	r24, X+
    c2e0:	9c 91       	ld	r25, X
    c2e2:	5f 97       	sbiw	r26, 0x1f	; 31
    c2e4:	28 17       	cp	r18, r24
    c2e6:	39 07       	cpc	r19, r25
    c2e8:	29 f0       	breq	.+10     	; 0xc2f4 <get_cpu_joypad_state+0x1b6>
		player->deadlock_count_x = 0;
    c2ea:	57 96       	adiw	r26, 0x17	; 23
    c2ec:	1c 92       	st	X, r1
    c2ee:	1e 92       	st	-X, r1
    c2f0:	56 97       	sbiw	r26, 0x16	; 22
    c2f2:	07 c0       	rjmp	.+14     	; 0xc302 <get_cpu_joypad_state+0x1c4>
	else 
		player->deadlock_count_x++;
    c2f4:	ed 81       	ldd	r30, Y+5	; 0x05
    c2f6:	fe 81       	ldd	r31, Y+6	; 0x06
    c2f8:	86 89       	ldd	r24, Z+22	; 0x16
    c2fa:	97 89       	ldd	r25, Z+23	; 0x17
    c2fc:	01 96       	adiw	r24, 0x01	; 1
    c2fe:	97 8b       	std	Z+23, r25	; 0x17
    c300:	86 8b       	std	Z+22, r24	; 0x16
	if (player->netMessage.shared.y != player->old_y)
    c302:	d4 01       	movw	r26, r8
    c304:	8d 91       	ld	r24, X+
    c306:	9c 91       	ld	r25, X
    c308:	ed 81       	ldd	r30, Y+5	; 0x05
    c30a:	fe 81       	ldd	r31, Y+6	; 0x06
    c30c:	40 a1       	ldd	r20, Z+32	; 0x20
    c30e:	51 a1       	ldd	r21, Z+33	; 0x21
    c310:	84 17       	cp	r24, r20
    c312:	95 07       	cpc	r25, r21
    c314:	19 f0       	breq	.+6      	; 0xc31c <get_cpu_joypad_state+0x1de>
		player->deadlock_count_y = 0;
    c316:	11 8e       	std	Z+25, r1	; 0x19
    c318:	10 8e       	std	Z+24, r1	; 0x18
    c31a:	0c c0       	rjmp	.+24     	; 0xc334 <get_cpu_joypad_state+0x1f6>
	else
		player->deadlock_count_y++;
    c31c:	ad 81       	ldd	r26, Y+5	; 0x05
    c31e:	be 81       	ldd	r27, Y+6	; 0x06
    c320:	58 96       	adiw	r26, 0x18	; 24
    c322:	4d 91       	ld	r20, X+
    c324:	5c 91       	ld	r21, X
    c326:	59 97       	sbiw	r26, 0x19	; 25
    c328:	4f 5f       	subi	r20, 0xFF	; 255
    c32a:	5f 4f       	sbci	r21, 0xFF	; 255
    c32c:	59 96       	adiw	r26, 0x19	; 25
    c32e:	5c 93       	st	X, r21
    c330:	4e 93       	st	-X, r20
    c332:	58 97       	sbiw	r26, 0x18	; 24
	player->old_x = player->netMessage.shared.x;
    c334:	ed 81       	ldd	r30, Y+5	; 0x05
    c336:	fe 81       	ldd	r31, Y+6	; 0x06
    c338:	37 8f       	std	Z+31, r19	; 0x1f
    c33a:	26 8f       	std	Z+30, r18	; 0x1e
	player->old_y = player->netMessage.shared.y;
    c33c:	91 a3       	std	Z+33, r25	; 0x21
    c33e:	80 a3       	std	Z+32, r24	; 0x20
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c340:	46 89       	ldd	r20, Z+22	; 0x16
    c342:	57 89       	ldd	r21, Z+23	; 0x17
    c344:	40 34       	cpi	r20, 0x40	; 64
    c346:	51 40       	sbci	r21, 0x01	; 1
    c348:	88 f0       	brcs	.+34     	; 0xc36c <get_cpu_joypad_state+0x22e>
	{
		p->held = button_map(LBRandom(2, 4));
    c34a:	64 e0       	ldi	r22, 0x04	; 4
    c34c:	82 e0       	ldi	r24, 0x02	; 2
    c34e:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    c352:	90 e0       	ldi	r25, 0x00	; 0
    c354:	0e 94 56 5f 	call	0xbeac	; 0xbeac <button_map>
    c358:	d6 01       	movw	r26, r12
    c35a:	15 96       	adiw	r26, 0x05	; 5
    c35c:	9c 93       	st	X, r25
    c35e:	8e 93       	st	-X, r24
    c360:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c362:	ed 81       	ldd	r30, Y+5	; 0x05
    c364:	fe 81       	ldd	r31, Y+6	; 0x06
    c366:	17 8a       	std	Z+23, r1	; 0x17
    c368:	16 8a       	std	Z+22, r1	; 0x16
    c36a:	33 c0       	rjmp	.+102    	; 0xc3d2 <get_cpu_joypad_state+0x294>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c36c:	ad 81       	ldd	r26, Y+5	; 0x05
    c36e:	be 81       	ldd	r27, Y+6	; 0x06
    c370:	58 96       	adiw	r26, 0x18	; 24
    c372:	4d 91       	ld	r20, X+
    c374:	5c 91       	ld	r21, X
    c376:	59 97       	sbiw	r26, 0x19	; 25
    c378:	40 34       	cpi	r20, 0x40	; 64
    c37a:	51 40       	sbci	r21, 0x01	; 1
    c37c:	88 f0       	brcs	.+34     	; 0xc3a0 <get_cpu_joypad_state+0x262>
	{
		p->held = button_map(LBRandom(0, 2));
    c37e:	62 e0       	ldi	r22, 0x02	; 2
    c380:	80 e0       	ldi	r24, 0x00	; 0
    c382:	0e 94 83 4a 	call	0x9506	; 0x9506 <LBRandom>
    c386:	90 e0       	ldi	r25, 0x00	; 0
    c388:	0e 94 56 5f 	call	0xbeac	; 0xbeac <button_map>
    c38c:	f6 01       	movw	r30, r12
    c38e:	95 83       	std	Z+5, r25	; 0x05
    c390:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c392:	ad 81       	ldd	r26, Y+5	; 0x05
    c394:	be 81       	ldd	r27, Y+6	; 0x06
    c396:	59 96       	adiw	r26, 0x19	; 25
    c398:	1c 92       	st	X, r1
    c39a:	1e 92       	st	-X, r1
    c39c:	58 97       	sbiw	r26, 0x18	; 24
    c39e:	19 c0       	rjmp	.+50     	; 0xc3d2 <get_cpu_joypad_state+0x294>
	}
	else player->goal_reached = crash_and_turn(player->netMessage.shared.x / 800, player->netMessage.shared.y / 800 - 3, player->netMessage.shared.recoiled, player, p);
    c3a0:	00 e2       	ldi	r16, 0x20	; 32
    c3a2:	13 e0       	ldi	r17, 0x03	; 3
    c3a4:	b8 01       	movw	r22, r16
    c3a6:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c3aa:	ed ef       	ldi	r30, 0xFD	; 253
    c3ac:	e6 0f       	add	r30, r22
    c3ae:	c9 01       	movw	r24, r18
    c3b0:	b8 01       	movw	r22, r16
    c3b2:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    c3b6:	86 2f       	mov	r24, r22
    c3b8:	86 01       	movw	r16, r12
    c3ba:	2d 81       	ldd	r18, Y+5	; 0x05
    c3bc:	3e 81       	ldd	r19, Y+6	; 0x06
    c3be:	d9 01       	movw	r26, r18
    c3c0:	ab 58       	subi	r26, 0x8B	; 139
    c3c2:	bf 4f       	sbci	r27, 0xFF	; 255
    c3c4:	4c 91       	ld	r20, X
    c3c6:	6e 2f       	mov	r22, r30
    c3c8:	0e 94 6c 5f 	call	0xbed8	; 0xbed8 <crash_and_turn>
    c3cc:	ed 81       	ldd	r30, Y+5	; 0x05
    c3ce:	fe 81       	ldd	r31, Y+6	; 0x06
    c3d0:	83 8f       	std	Z+27, r24	; 0x1b
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c3d2:	ad 81       	ldd	r26, Y+5	; 0x05
    c3d4:	be 81       	ldd	r27, Y+6	; 0x06
    c3d6:	52 96       	adiw	r26, 0x12	; 18
    c3d8:	8c 91       	ld	r24, X
    c3da:	81 30       	cpi	r24, 0x01	; 1
    c3dc:	09 f0       	breq	.+2      	; 0xc3e0 <get_cpu_joypad_state+0x2a2>
    c3de:	ca c0       	rjmp	.+404    	; 0xc574 <get_cpu_joypad_state+0x436>
    c3e0:	f7 01       	movw	r30, r14
    c3e2:	95 81       	ldd	r25, Z+5	; 0x05
    c3e4:	84 81       	ldd	r24, Z+4	; 0x04
    c3e6:	98 17       	cp	r25, r24
    c3e8:	08 f0       	brcs	.+2      	; 0xc3ec <get_cpu_joypad_state+0x2ae>
    c3ea:	c4 c0       	rjmp	.+392    	; 0xc574 <get_cpu_joypad_state+0x436>
	{
		if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c3ec:	ab 81       	ldd	r26, Y+3	; 0x03
    c3ee:	bc 81       	ldd	r27, Y+4	; 0x04
    c3f0:	2d 91       	ld	r18, X+
    c3f2:	3c 91       	ld	r19, X
    c3f4:	f4 01       	movw	r30, r8
    c3f6:	80 81       	ld	r24, Z
    c3f8:	91 81       	ldd	r25, Z+1	; 0x01
    c3fa:	28 17       	cp	r18, r24
    c3fc:	39 07       	cpc	r19, r25
    c3fe:	08 f0       	brcs	.+2      	; 0xc402 <get_cpu_joypad_state+0x2c4>
    c400:	5a c0       	rjmp	.+180    	; 0xc4b6 <get_cpu_joypad_state+0x378>
    c402:	d3 01       	movw	r26, r6
    c404:	2d 91       	ld	r18, X+
    c406:	3c 91       	ld	r19, X
    c408:	f5 01       	movw	r30, r10
    c40a:	80 81       	ld	r24, Z
    c40c:	91 81       	ldd	r25, Z+1	; 0x01
    c40e:	28 17       	cp	r18, r24
    c410:	39 07       	cpc	r19, r25
    c412:	68 f5       	brcc	.+90     	; 0xc46e <get_cpu_joypad_state+0x330>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_LEFT)
    c414:	f7 01       	movw	r30, r14
    c416:	ee 58       	subi	r30, 0x8E	; 142
    c418:	ff 4f       	sbci	r31, 0xFF	; 255
    c41a:	80 81       	ld	r24, Z
    c41c:	82 30       	cpi	r24, 0x02	; 2
    c41e:	a9 f4       	brne	.+42     	; 0xc44a <get_cpu_joypad_state+0x30c>
    c420:	ad 81       	ldd	r26, Y+5	; 0x05
    c422:	be 81       	ldd	r27, Y+6	; 0x06
    c424:	ae 58       	subi	r26, 0x8E	; 142
    c426:	bf 4f       	sbci	r27, 0xFF	; 255
    c428:	8c 91       	ld	r24, X
    c42a:	83 30       	cpi	r24, 0x03	; 3
    c42c:	71 f4       	brne	.+28     	; 0xc44a <get_cpu_joypad_state+0x30c>
			{
				p->held = BTN_RIGHT;
    c42e:	80 e8       	ldi	r24, 0x80	; 128
    c430:	90 e0       	ldi	r25, 0x00	; 0
    c432:	d6 01       	movw	r26, r12
    c434:	15 96       	adiw	r26, 0x05	; 5
    c436:	9c 93       	st	X, r25
    c438:	8e 93       	st	-X, r24
    c43a:	14 97       	sbiw	r26, 0x04	; 4
				player->goal_reached = 0;
    c43c:	ad 81       	ldd	r26, Y+5	; 0x05
    c43e:	be 81       	ldd	r27, Y+6	; 0x06
    c440:	5b 96       	adiw	r26, 0x1b	; 27
    c442:	1c 92       	st	X, r1
    c444:	5b 97       	sbiw	r26, 0x1b	; 27
				player->feeling_my_way = 0;
    c446:	50 96       	adiw	r26, 0x10	; 16
    c448:	1c 92       	st	X, r1
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_UP)
    c44a:	80 81       	ld	r24, Z
    c44c:	81 30       	cpi	r24, 0x01	; 1
    c44e:	09 f0       	breq	.+2      	; 0xc452 <get_cpu_joypad_state+0x314>
    c450:	91 c0       	rjmp	.+290    	; 0xc574 <get_cpu_joypad_state+0x436>
    c452:	ed 81       	ldd	r30, Y+5	; 0x05
    c454:	fe 81       	ldd	r31, Y+6	; 0x06
    c456:	ee 58       	subi	r30, 0x8E	; 142
    c458:	ff 4f       	sbci	r31, 0xFF	; 255
    c45a:	80 81       	ld	r24, Z
    c45c:	81 11       	cpse	r24, r1
    c45e:	8a c0       	rjmp	.+276    	; 0xc574 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c460:	ed 81       	ldd	r30, Y+5	; 0x05
    c462:	fe 81       	ldd	r31, Y+6	; 0x06
    c464:	13 8e       	std	Z+27, r1	; 0x1b
				player->feeling_my_way = 0;
    c466:	10 8a       	std	Z+16, r1	; 0x10
				p->held = BTN_DOWN;
    c468:	80 e2       	ldi	r24, 0x20	; 32
    c46a:	90 e0       	ldi	r25, 0x00	; 0
    c46c:	5c c0       	rjmp	.+184    	; 0xc526 <get_cpu_joypad_state+0x3e8>
			}
		}
		else if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c46e:	82 17       	cp	r24, r18
    c470:	93 07       	cpc	r25, r19
    c472:	08 f0       	brcs	.+2      	; 0xc476 <get_cpu_joypad_state+0x338>
    c474:	7f c0       	rjmp	.+254    	; 0xc574 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_RIGHT)
    c476:	f7 01       	movw	r30, r14
    c478:	ee 58       	subi	r30, 0x8E	; 142
    c47a:	ff 4f       	sbci	r31, 0xFF	; 255
    c47c:	80 81       	ld	r24, Z
    c47e:	82 30       	cpi	r24, 0x02	; 2
    c480:	a9 f4       	brne	.+42     	; 0xc4ac <get_cpu_joypad_state+0x36e>
    c482:	ad 81       	ldd	r26, Y+5	; 0x05
    c484:	be 81       	ldd	r27, Y+6	; 0x06
    c486:	ae 58       	subi	r26, 0x8E	; 142
    c488:	bf 4f       	sbci	r27, 0xFF	; 255
    c48a:	8c 91       	ld	r24, X
    c48c:	81 30       	cpi	r24, 0x01	; 1
    c48e:	71 f4       	brne	.+28     	; 0xc4ac <get_cpu_joypad_state+0x36e>
			{
				player->goal_reached = 0;
    c490:	ad 81       	ldd	r26, Y+5	; 0x05
    c492:	be 81       	ldd	r27, Y+6	; 0x06
    c494:	5b 96       	adiw	r26, 0x1b	; 27
    c496:	1c 92       	st	X, r1
    c498:	5b 97       	sbiw	r26, 0x1b	; 27
				player->feeling_my_way = 0;
    c49a:	50 96       	adiw	r26, 0x10	; 16
    c49c:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c49e:	80 e4       	ldi	r24, 0x40	; 64
    c4a0:	90 e0       	ldi	r25, 0x00	; 0
    c4a2:	d6 01       	movw	r26, r12
    c4a4:	15 96       	adiw	r26, 0x05	; 5
    c4a6:	9c 93       	st	X, r25
    c4a8:	8e 93       	st	-X, r24
    c4aa:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_UP)
    c4ac:	80 81       	ld	r24, Z
    c4ae:	83 30       	cpi	r24, 0x03	; 3
    c4b0:	09 f0       	breq	.+2      	; 0xc4b4 <get_cpu_joypad_state+0x376>
    c4b2:	60 c0       	rjmp	.+192    	; 0xc574 <get_cpu_joypad_state+0x436>
    c4b4:	ce cf       	rjmp	.-100    	; 0xc452 <get_cpu_joypad_state+0x314>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c4b6:	82 17       	cp	r24, r18
    c4b8:	93 07       	cpc	r25, r19
    c4ba:	08 f0       	brcs	.+2      	; 0xc4be <get_cpu_joypad_state+0x380>
    c4bc:	5b c0       	rjmp	.+182    	; 0xc574 <get_cpu_joypad_state+0x436>
    c4be:	f3 01       	movw	r30, r6
    c4c0:	20 81       	ld	r18, Z
    c4c2:	31 81       	ldd	r19, Z+1	; 0x01
    c4c4:	d5 01       	movw	r26, r10
    c4c6:	8d 91       	ld	r24, X+
    c4c8:	9c 91       	ld	r25, X
    c4ca:	28 17       	cp	r18, r24
    c4cc:	39 07       	cpc	r19, r25
    c4ce:	88 f5       	brcc	.+98     	; 0xc532 <get_cpu_joypad_state+0x3f4>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_LEFT)
    c4d0:	f7 01       	movw	r30, r14
    c4d2:	ee 58       	subi	r30, 0x8E	; 142
    c4d4:	ff 4f       	sbci	r31, 0xFF	; 255
    c4d6:	80 81       	ld	r24, Z
    c4d8:	81 11       	cpse	r24, r1
    c4da:	15 c0       	rjmp	.+42     	; 0xc506 <get_cpu_joypad_state+0x3c8>
    c4dc:	ad 81       	ldd	r26, Y+5	; 0x05
    c4de:	be 81       	ldd	r27, Y+6	; 0x06
    c4e0:	ae 58       	subi	r26, 0x8E	; 142
    c4e2:	bf 4f       	sbci	r27, 0xFF	; 255
    c4e4:	8c 91       	ld	r24, X
    c4e6:	83 30       	cpi	r24, 0x03	; 3
    c4e8:	71 f4       	brne	.+28     	; 0xc506 <get_cpu_joypad_state+0x3c8>
			{
				player->goal_reached = 0;
    c4ea:	ad 81       	ldd	r26, Y+5	; 0x05
    c4ec:	be 81       	ldd	r27, Y+6	; 0x06
    c4ee:	5b 96       	adiw	r26, 0x1b	; 27
    c4f0:	1c 92       	st	X, r1
    c4f2:	5b 97       	sbiw	r26, 0x1b	; 27
				player->feeling_my_way = 0;
    c4f4:	50 96       	adiw	r26, 0x10	; 16
    c4f6:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c4f8:	80 e8       	ldi	r24, 0x80	; 128
    c4fa:	90 e0       	ldi	r25, 0x00	; 0
    c4fc:	d6 01       	movw	r26, r12
    c4fe:	15 96       	adiw	r26, 0x05	; 5
    c500:	9c 93       	st	X, r25
    c502:	8e 93       	st	-X, r24
    c504:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_DOWN)
    c506:	80 81       	ld	r24, Z
    c508:	81 30       	cpi	r24, 0x01	; 1
    c50a:	a1 f5       	brne	.+104    	; 0xc574 <get_cpu_joypad_state+0x436>
    c50c:	ed 81       	ldd	r30, Y+5	; 0x05
    c50e:	fe 81       	ldd	r31, Y+6	; 0x06
    c510:	ee 58       	subi	r30, 0x8E	; 142
    c512:	ff 4f       	sbci	r31, 0xFF	; 255
    c514:	80 81       	ld	r24, Z
    c516:	82 30       	cpi	r24, 0x02	; 2
    c518:	69 f5       	brne	.+90     	; 0xc574 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c51a:	ed 81       	ldd	r30, Y+5	; 0x05
    c51c:	fe 81       	ldd	r31, Y+6	; 0x06
    c51e:	13 8e       	std	Z+27, r1	; 0x1b
				player->feeling_my_way = 0;
    c520:	10 8a       	std	Z+16, r1	; 0x10
				p->held = BTN_UP;
    c522:	80 e1       	ldi	r24, 0x10	; 16
    c524:	90 e0       	ldi	r25, 0x00	; 0
    c526:	d6 01       	movw	r26, r12
    c528:	15 96       	adiw	r26, 0x05	; 5
    c52a:	9c 93       	st	X, r25
    c52c:	8e 93       	st	-X, r24
    c52e:	14 97       	sbiw	r26, 0x04	; 4
    c530:	21 c0       	rjmp	.+66     	; 0xc574 <get_cpu_joypad_state+0x436>
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c532:	82 17       	cp	r24, r18
    c534:	93 07       	cpc	r25, r19
    c536:	f0 f4       	brcc	.+60     	; 0xc574 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_RIGHT)
    c538:	f7 01       	movw	r30, r14
    c53a:	ee 58       	subi	r30, 0x8E	; 142
    c53c:	ff 4f       	sbci	r31, 0xFF	; 255
    c53e:	80 81       	ld	r24, Z
    c540:	81 11       	cpse	r24, r1
    c542:	15 c0       	rjmp	.+42     	; 0xc56e <get_cpu_joypad_state+0x430>
    c544:	ad 81       	ldd	r26, Y+5	; 0x05
    c546:	be 81       	ldd	r27, Y+6	; 0x06
    c548:	ae 58       	subi	r26, 0x8E	; 142
    c54a:	bf 4f       	sbci	r27, 0xFF	; 255
    c54c:	8c 91       	ld	r24, X
    c54e:	81 30       	cpi	r24, 0x01	; 1
    c550:	71 f4       	brne	.+28     	; 0xc56e <get_cpu_joypad_state+0x430>
			{
				player->goal_reached = 0;
    c552:	ad 81       	ldd	r26, Y+5	; 0x05
    c554:	be 81       	ldd	r27, Y+6	; 0x06
    c556:	5b 96       	adiw	r26, 0x1b	; 27
    c558:	1c 92       	st	X, r1
    c55a:	5b 97       	sbiw	r26, 0x1b	; 27
				player->feeling_my_way = 0;
    c55c:	50 96       	adiw	r26, 0x10	; 16
    c55e:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c560:	80 e4       	ldi	r24, 0x40	; 64
    c562:	90 e0       	ldi	r25, 0x00	; 0
    c564:	d6 01       	movw	r26, r12
    c566:	15 96       	adiw	r26, 0x05	; 5
    c568:	9c 93       	st	X, r25
    c56a:	8e 93       	st	-X, r24
    c56c:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_DOWN){
    c56e:	80 81       	ld	r24, Z
    c570:	83 30       	cpi	r24, 0x03	; 3
    c572:	61 f2       	breq	.-104    	; 0xc50c <get_cpu_joypad_state+0x3ce>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c574:	26 96       	adiw	r28, 0x06	; 6
    c576:	0f b6       	in	r0, 0x3f	; 63
    c578:	f8 94       	cli
    c57a:	de bf       	out	0x3e, r29	; 62
    c57c:	0f be       	out	0x3f, r0	; 63
    c57e:	cd bf       	out	0x3d, r28	; 61
    c580:	df 91       	pop	r29
    c582:	cf 91       	pop	r28
    c584:	1f 91       	pop	r17
    c586:	0f 91       	pop	r16
    c588:	ff 90       	pop	r15
    c58a:	ef 90       	pop	r14
    c58c:	df 90       	pop	r13
    c58e:	cf 90       	pop	r12
    c590:	bf 90       	pop	r11
    c592:	af 90       	pop	r10
    c594:	9f 90       	pop	r9
    c596:	8f 90       	pop	r8
    c598:	7f 90       	pop	r7
    c59a:	6f 90       	pop	r6
    c59c:	5f 90       	pop	r5
    c59e:	4f 90       	pop	r4
    c5a0:	3f 90       	pop	r3
    c5a2:	2f 90       	pop	r2
    c5a4:	08 95       	ret

0000c5a6 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c5a6:	bf 92       	push	r11
    c5a8:	cf 92       	push	r12
    c5aa:	df 92       	push	r13
    c5ac:	ef 92       	push	r14
    c5ae:	ff 92       	push	r15
    c5b0:	0f 93       	push	r16
    c5b2:	1f 93       	push	r17
    c5b4:	cf 93       	push	r28
    c5b6:	df 93       	push	r29
    c5b8:	1f 92       	push	r1
    c5ba:	cd b7       	in	r28, 0x3d	; 61
    c5bc:	de b7       	in	r29, 0x3e	; 62
    c5be:	8c 01       	movw	r16, r24
    c5c0:	f6 2e       	mov	r15, r22
    c5c2:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c5c4:	8f e0       	ldi	r24, 0x0F	; 15
    c5c6:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c5c8:	f8 01       	movw	r30, r16
    c5ca:	84 91       	lpm	r24, Z
    c5cc:	83 32       	cpi	r24, 0x23	; 35
    c5ce:	01 f1       	breq	.+64     	; 0xc610 <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c5d0:	6f ef       	ldi	r22, 0xFF	; 255
    c5d2:	70 e0       	ldi	r23, 0x00	; 0
    c5d4:	c8 01       	movw	r24, r16
    c5d6:	0e 94 a0 70 	call	0xe140	; 0xe140 <strnlen_P>
		x = 15 - ln / 2;
    c5da:	86 95       	lsr	r24
    c5dc:	eb 2c       	mov	r14, r11
    c5de:	e8 1a       	sub	r14, r24
    c5e0:	e0 1a       	sub	r14, r16
    c5e2:	8e 2d       	mov	r24, r14
    c5e4:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c5e6:	0f 5f       	subi	r16, 0xFF	; 255
    c5e8:	1f 4f       	sbci	r17, 0xFF	; 255
    c5ea:	f8 01       	movw	r30, r16
    c5ec:	31 97       	sbiw	r30, 0x01	; 1
    c5ee:	e4 91       	lpm	r30, Z
    c5f0:	e9 83       	std	Y+1, r30	; 0x01
    c5f2:	ee 23       	and	r30, r30
    c5f4:	59 f0       	breq	.+22     	; 0xc60c <stream_text_middle+0x66>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c5f6:	21 e0       	ldi	r18, 0x01	; 1
    c5f8:	ae 01       	movw	r20, r28
    c5fa:	4f 5f       	subi	r20, 0xFF	; 255
    c5fc:	5f 4f       	sbci	r21, 0xFF	; 255
    c5fe:	6f 2d       	mov	r22, r15
    c600:	0e 94 2a 4a 	call	0x9454	; 0x9454 <LBPrintStr>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    c604:	c6 01       	movw	r24, r12
    c606:	0e 94 84 3a 	call	0x7508	; 0x7508 <WaitUs>
    c60a:	eb cf       	rjmp	.-42     	; 0xc5e2 <stream_text_middle+0x3c>
			LBWaitUs(delay);
		}
		y++;
    c60c:	f3 94       	inc	r15
    c60e:	dc cf       	rjmp	.-72     	; 0xc5c8 <stream_text_middle+0x22>
	}
}
    c610:	0f 90       	pop	r0
    c612:	df 91       	pop	r29
    c614:	cf 91       	pop	r28
    c616:	1f 91       	pop	r17
    c618:	0f 91       	pop	r16
    c61a:	ff 90       	pop	r15
    c61c:	ef 90       	pop	r14
    c61e:	df 90       	pop	r13
    c620:	cf 90       	pop	r12
    c622:	bf 90       	pop	r11
    c624:	08 95       	ret

0000c626 <load_credits>:

void load_credits()
{
	fade_through();
    c626:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    c62a:	44 e6       	ldi	r20, 0x64	; 100
    c62c:	50 e0       	ldi	r21, 0x00	; 0
    c62e:	65 e0       	ldi	r22, 0x05	; 5
    c630:	89 e9       	ldi	r24, 0x99	; 153
    c632:	92 e0       	ldi	r25, 0x02	; 2
    c634:	0e 94 d3 62 	call	0xc5a6	; 0xc5a6 <stream_text_middle>
#define NETRESUME 13
#define NETBLOCKHIT 14
#define NETACK 15

u8 activateNet() {
	return initWifi();
    c638:	0e 94 25 4c 	call	0x984a	; 0x984a <initWifi>
#if JAMMA
	wifi_status = WIFI_TIMEOUT;
#else
	wifi_status = activateNet();
    c63c:	80 93 a7 0b 	sts	0x0BA7, r24
#endif
	LBWaitSeconds(4);
    c640:	84 e0       	ldi	r24, 0x04	; 4
    c642:	0e 94 9e 4a 	call	0x953c	; 0x953c <LBWaitSeconds>
	fade_through();
    c646:	0c 94 16 4f 	jmp	0x9e2c	; 0x9e2c <fade_through>

0000c64a <send_net_message>:
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
	u8 counter = 0;
	u8 result = 0;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c64a:	90 91 89 0b 	lds	r25, 0x0B89
    c64e:	3e ef       	ldi	r19, 0xFE	; 254
    c650:	39 0f       	add	r19, r25
    c652:	32 30       	cpi	r19, 0x02	; 2
    c654:	70 f4       	brcc	.+28     	; 0xc672 <send_net_message+0x28>
	if (game.selection == JOINNETGAME)
    c656:	93 30       	cpi	r25, 0x03	; 3
    c658:	19 f4       	brne	.+6      	; 0xc660 <send_net_message+0x16>
	{
		netMessage = &player2.netMessage;
    c65a:	ea e8       	ldi	r30, 0x8A	; 138
    c65c:	ff e0       	ldi	r31, 0x0F	; 15
    c65e:	02 c0       	rjmp	.+4      	; 0xc664 <send_net_message+0x1a>
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
    c660:	e4 e1       	ldi	r30, 0x14	; 20
    c662:	fc e0       	ldi	r31, 0x0C	; 12
	if (game.selection == JOINNETGAME)
	{
		netMessage = &player2.netMessage;
		otherNetMessage = &player1.netMessage;
	}
	netMessage->code = code;
    c664:	80 83       	st	Z, r24
	netMessage->send_ack = acknowledge;
    c666:	21 83       	std	Z+1, r18	; 0x01
	netMessage->object_pos_x = object_pos_x;
    c668:	62 83       	std	Z+2, r22	; 0x02
	netMessage->object_pos_y = object_pos_y;
    c66a:	43 83       	std	Z+3, r20	; 0x03
	sendNetMessage(netMessage);
    c66c:	cf 01       	movw	r24, r30
    c66e:	0c 94 6d 4c 	jmp	0x98da	; 0x98da <sendNetMessage>
    c672:	08 95       	ret

0000c674 <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code, u8 acknowlege)
{
    c674:	54 2f       	mov	r21, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    c676:	30 91 89 0b 	lds	r19, 0x0B89
    c67a:	32 30       	cpi	r19, 0x02	; 2
    c67c:	41 f4       	brne	.+16     	; 0xc68e <send_smart_net_message+0x1a>
    c67e:	88 5a       	subi	r24, 0xA8	; 168
    c680:	9b 40       	sbci	r25, 0x0B	; 11
    c682:	51 f4       	brne	.+20     	; 0xc698 <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0, acknowlege);
    c684:	40 e0       	ldi	r20, 0x00	; 0
    c686:	60 e0       	ldi	r22, 0x00	; 0
    c688:	85 2f       	mov	r24, r21
    c68a:	0c 94 25 63 	jmp	0xc64a	; 0xc64a <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    c68e:	33 30       	cpi	r19, 0x03	; 3
    c690:	19 f4       	brne	.+6      	; 0xc698 <send_smart_net_message+0x24>
    c692:	8e 51       	subi	r24, 0x1E	; 30
    c694:	9f 40       	sbci	r25, 0x0F	; 15
    c696:	b1 f3       	breq	.-20     	; 0xc684 <send_smart_net_message+0x10>
    c698:	08 95       	ret

0000c69a <get_net_message>:
		}
	}*/
}

void get_net_message(u8 use_current_message)
{
    c69a:	af 92       	push	r10
    c69c:	bf 92       	push	r11
    c69e:	cf 92       	push	r12
    c6a0:	df 92       	push	r13
    c6a2:	ef 92       	push	r14
    c6a4:	ff 92       	push	r15
    c6a6:	0f 93       	push	r16
    c6a8:	1f 93       	push	r17
    c6aa:	cf 93       	push	r28
    c6ac:	df 93       	push	r29
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
    c6ae:	90 91 8f 0f 	lds	r25, 0x0F8F
    c6b2:	90 93 31 0f 	sts	0x0F31, r25
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c6b6:	90 91 89 0b 	lds	r25, 0x0B89
    c6ba:	2e ef       	ldi	r18, 0xFE	; 254
    c6bc:	29 0f       	add	r18, r25
    c6be:	22 30       	cpi	r18, 0x02	; 2
    c6c0:	08 f0       	brcs	.+2      	; 0xc6c4 <get_net_message+0x2a>
    c6c2:	75 c1       	rjmp	.+746    	; 0xc9ae <get_net_message+0x314>
	if (game.selection == JOINNETGAME)
    c6c4:	93 30       	cpi	r25, 0x03	; 3
    c6c6:	a1 f4       	brne	.+40     	; 0xc6f0 <get_net_message+0x56>
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
    c6c8:	90 91 19 0c 	lds	r25, 0x0C19
    c6cc:	90 93 bb 0b 	sts	0x0BBB, r25
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
    c6d0:	4f e0       	ldi	r20, 0x0F	; 15
    c6d2:	c4 2e       	mov	r12, r20
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
    c6d4:	d1 2c       	mov	r13, r1
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
    c6d6:	5e e1       	ldi	r21, 0x1E	; 30
    c6d8:	e5 2e       	mov	r14, r21
    c6da:	5f e0       	ldi	r21, 0x0F	; 15
    c6dc:	f5 2e       	mov	r15, r21
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
    c6de:	c4 e1       	ldi	r28, 0x14	; 20
    c6e0:	dc e0       	ldi	r29, 0x0C	; 12
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
    c6e2:	62 e2       	ldi	r22, 0x22	; 34
    c6e4:	a6 2e       	mov	r10, r22
    c6e6:	6c e0       	ldi	r22, 0x0C	; 12
    c6e8:	b6 2e       	mov	r11, r22
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    c6ea:	08 ea       	ldi	r16, 0xA8	; 168
    c6ec:	1b e0       	ldi	r17, 0x0B	; 11
    c6ee:	0f c0       	rjmp	.+30     	; 0xc70e <get_net_message+0x74>
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
    c6f0:	c1 2c       	mov	r12, r1
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
    c6f2:	9f e0       	ldi	r25, 0x0F	; 15
    c6f4:	d9 2e       	mov	r13, r25
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
    c6f6:	28 ea       	ldi	r18, 0xA8	; 168
    c6f8:	e2 2e       	mov	r14, r18
    c6fa:	2b e0       	ldi	r18, 0x0B	; 11
    c6fc:	f2 2e       	mov	r15, r18

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
    c6fe:	ca e8       	ldi	r28, 0x8A	; 138
    c700:	df e0       	ldi	r29, 0x0F	; 15
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
    c702:	38 e9       	ldi	r19, 0x98	; 152
    c704:	a3 2e       	mov	r10, r19
    c706:	3f e0       	ldi	r19, 0x0F	; 15
    c708:	b3 2e       	mov	r11, r19
	}*/
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
    c70a:	0e e1       	ldi	r16, 0x1E	; 30
    c70c:	1f e0       	ldi	r17, 0x0F	; 15
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
    c70e:	9b e0       	ldi	r25, 0x0B	; 11
    c710:	98 83       	st	Y, r25
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c712:	88 23       	and	r24, r24
    c714:	d1 f0       	breq	.+52     	; 0xc74a <get_net_message+0xb0>
		{
			otherNetMessage->code = NETACK;
			sendNetMessage(otherNetMessage);
		}*/
		// Act on message code
		if (netMessage->code == NETITEMSPEED)
    c716:	98 81       	ld	r25, Y
    c718:	93 30       	cpi	r25, 0x03	; 3
    c71a:	01 f5       	brne	.+64     	; 0xc75c <get_net_message+0xc2>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c71c:	eb 81       	ldd	r30, Y+3	; 0x03
    c71e:	8e e1       	ldi	r24, 0x1E	; 30
    c720:	e8 9f       	mul	r30, r24
    c722:	f0 01       	movw	r30, r0
    c724:	11 24       	eor	r1, r1
    c726:	8a 81       	ldd	r24, Y+2	; 0x02
    c728:	e1 5d       	subi	r30, 0xD1	; 209
    c72a:	f3 4f       	sbci	r31, 0xF3	; 243
    c72c:	e8 0f       	add	r30, r24
    c72e:	f1 1d       	adc	r31, r1
    c730:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c732:	84 e6       	ldi	r24, 0x64	; 100
    c734:	99 e1       	ldi	r25, 0x19	; 25
    c736:	f8 01       	movw	r30, r16
    c738:	95 87       	std	Z+13, r25	; 0x0d
    c73a:	84 87       	std	Z+12, r24	; 0x0c
			player->has_over_speed = true;
    c73c:	81 e0       	ldi	r24, 0x01	; 1
    c73e:	87 87       	std	Z+15, r24	; 0x0f
			DrawMap2(playerHudX+10, 1, map_speed_itm);
    c740:	41 ec       	ldi	r20, 0xC1	; 193
    c742:	5a e6       	ldi	r21, 0x6A	; 106
    c744:	61 e0       	ldi	r22, 0x01	; 1
    c746:	8a e0       	ldi	r24, 0x0A	; 10
    c748:	1d c0       	rjmp	.+58     	; 0xc784 <get_net_message+0xea>
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c74a:	ce 01       	movw	r24, r28
    c74c:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <getNetMessage>
    c750:	82 30       	cpi	r24, 0x02	; 2
    c752:	09 f7       	brne	.-62     	; 0xc716 <get_net_message+0x7c>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		}
	}
	else
	{
		state->pressed = 0;
    c754:	f5 01       	movw	r30, r10
    c756:	11 82       	std	Z+1, r1	; 0x01
    c758:	10 82       	st	Z, r1
    c75a:	29 c1       	rjmp	.+594    	; 0xc9ae <get_net_message+0x314>
			player->has_over_speed = true;
			DrawMap2(playerHudX+10, 1, map_speed_itm);
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETITEMROCKET)
    c75c:	94 30       	cpi	r25, 0x04	; 4
    c75e:	e9 f4       	brne	.+58     	; 0xc79a <get_net_message+0x100>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c760:	eb 81       	ldd	r30, Y+3	; 0x03
    c762:	8e e1       	ldi	r24, 0x1E	; 30
    c764:	e8 9f       	mul	r30, r24
    c766:	f0 01       	movw	r30, r0
    c768:	11 24       	eor	r1, r1
    c76a:	8a 81       	ldd	r24, Y+2	; 0x02
    c76c:	e1 5d       	subi	r30, 0xD1	; 209
    c76e:	f3 4f       	sbci	r31, 0xF3	; 243
    c770:	e8 0f       	add	r30, r24
    c772:	f1 1d       	adc	r31, r1
    c774:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c776:	81 e0       	ldi	r24, 0x01	; 1
    c778:	f8 01       	movw	r30, r16
    c77a:	86 87       	std	Z+14, r24	; 0x0e
			DrawMap2(playerHudX+11, 1, map_rocket_itm);
    c77c:	4b eb       	ldi	r20, 0xBB	; 187
    c77e:	5a e6       	ldi	r21, 0x6A	; 106
    c780:	61 e0       	ldi	r22, 0x01	; 1
    c782:	8b e0       	ldi	r24, 0x0B	; 11
    c784:	8d 0d       	add	r24, r13
    c786:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c78a:	40 e0       	ldi	r20, 0x00	; 0
    c78c:	50 e0       	ldi	r21, 0x00	; 0
    c78e:	6b 81       	ldd	r22, Y+3	; 0x03
    c790:	8a 81       	ldd	r24, Y+2	; 0x02
    c792:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    c796:	22 e0       	ldi	r18, 0x02	; 2
    c798:	f8 c0       	rjmp	.+496    	; 0xc98a <get_net_message+0x2f0>
		}
		else if (netMessage->code == NETTURRETHIT)
    c79a:	9c 30       	cpi	r25, 0x0C	; 12
    c79c:	c1 f4       	brne	.+48     	; 0xc7ce <get_net_message+0x134>
		{
			if (netMessage->object_pos_x == 1)
    c79e:	9a 81       	ldd	r25, Y+2	; 0x02
    c7a0:	8b 81       	ldd	r24, Y+3	; 0x03
    c7a2:	91 30       	cpi	r25, 0x01	; 1
    c7a4:	19 f4       	brne	.+6      	; 0xc7ac <get_net_message+0x112>
			{
				turret1.lives = netMessage->object_pos_y;
    c7a6:	80 93 f8 0f 	sts	0x0FF8, r24
    c7aa:	02 c0       	rjmp	.+4      	; 0xc7b0 <get_net_message+0x116>
				
			}
			else
			{
				turret2.lives = netMessage->object_pos_y;
    c7ac:	80 93 c9 0f 	sts	0x0FC9, r24
			}
			init_shot_state(&game.boss_fight_player->shot[0], game.boss_fight_player->shot[0].shot_type);
    c7b0:	80 91 85 0b 	lds	r24, 0x0B85
    c7b4:	90 91 86 0b 	lds	r25, 0x0B86
    c7b8:	fc 01       	movw	r30, r24
    c7ba:	62 a5       	ldd	r22, Z+42	; 0x2a
    c7bc:	82 96       	adiw	r24, 0x22	; 34
    c7be:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    c7c2:	e0 91 85 0b 	lds	r30, 0x0B85
    c7c6:	f0 91 86 0b 	lds	r31, 0x0B86
    c7ca:	14 82       	std	Z+4, r1	; 0x04
    c7cc:	69 c0       	rjmp	.+210    	; 0xc8a0 <get_net_message+0x206>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETPAUSE)
    c7ce:	97 30       	cpi	r25, 0x07	; 7
    c7d0:	69 f4       	brne	.+26     	; 0xc7ec <get_net_message+0x152>
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c7d2:	24 e0       	ldi	r18, 0x04	; 4
    c7d4:	40 91 28 0f 	lds	r20, 0x0F28
    c7d8:	60 91 b2 0b 	lds	r22, 0x0BB2
    c7dc:	80 91 89 0b 	lds	r24, 0x0B89
    c7e0:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			game.paused = 1;
    c7e4:	81 e0       	ldi	r24, 0x01	; 1
    c7e6:	80 93 78 0b 	sts	0x0B78, r24
    c7ea:	0d c0       	rjmp	.+26     	; 0xc806 <get_net_message+0x16c>
			load_level_tiles(false);
		}
		else if (netMessage->code == NETRESUME)
    c7ec:	9d 30       	cpi	r25, 0x0D	; 13
    c7ee:	c1 f4       	brne	.+48     	; 0xc820 <get_net_message+0x186>
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c7f0:	24 e0       	ldi	r18, 0x04	; 4
    c7f2:	40 91 28 0f 	lds	r20, 0x0F28
    c7f6:	60 91 b2 0b 	lds	r22, 0x0BB2
    c7fa:	80 91 89 0b 	lds	r24, 0x0B89
    c7fe:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			game.paused = 0;
    c802:	10 92 78 0b 	sts	0x0B78, r1
			load_level_tiles(false);
    c806:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		state->pressed = 0;
	}
}
    c808:	df 91       	pop	r29
    c80a:	cf 91       	pop	r28
    c80c:	1f 91       	pop	r17
    c80e:	0f 91       	pop	r16
    c810:	ff 90       	pop	r15
    c812:	ef 90       	pop	r14
    c814:	df 90       	pop	r13
    c816:	cf 90       	pop	r12
    c818:	bf 90       	pop	r11
    c81a:	af 90       	pop	r10
		}
		else if (netMessage->code == NETRESUME)
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			game.paused = 0;
			load_level_tiles(false);
    c81c:	0c 94 02 57 	jmp	0xae04	; 0xae04 <load_level_tiles>
		}
		else if (netMessage->code == NETHIT)
    c820:	91 11       	cpse	r25, r1
    c822:	2a c0       	rjmp	.+84     	; 0xc878 <get_net_message+0x1de>
		{
			// Ensure scoring message are idempotent
			if (netMessage->level_score != 0 && (netMessage->level_score  > player->old_level_score+1 || netMessage->level_score == player->old_level_score))
    c824:	8d 81       	ldd	r24, Y+5	; 0x05
    c826:	88 23       	and	r24, r24
    c828:	79 f0       	breq	.+30     	; 0xc848 <get_net_message+0x1ae>
    c82a:	f8 01       	movw	r30, r16
    c82c:	93 89       	ldd	r25, Z+19	; 0x13
    c82e:	48 2f       	mov	r20, r24
    c830:	50 e0       	ldi	r21, 0x00	; 0
    c832:	29 2f       	mov	r18, r25
    c834:	30 e0       	ldi	r19, 0x00	; 0
    c836:	2f 5f       	subi	r18, 0xFF	; 255
    c838:	3f 4f       	sbci	r19, 0xFF	; 255
    c83a:	24 17       	cp	r18, r20
    c83c:	35 07       	cpc	r19, r21
    c83e:	0c f4       	brge	.+2      	; 0xc842 <get_net_message+0x1a8>
    c840:	b6 c0       	rjmp	.+364    	; 0xc9ae <get_net_message+0x314>
    c842:	89 17       	cp	r24, r25
    c844:	09 f4       	brne	.+2      	; 0xc848 <get_net_message+0x1ae>
    c846:	b3 c0       	rjmp	.+358    	; 0xc9ae <get_net_message+0x314>
			{
				return;
			}
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    c848:	f7 01       	movw	r30, r14
    c84a:	62 a5       	ldd	r22, Z+42	; 0x2a
    c84c:	c7 01       	movw	r24, r14
    c84e:	82 96       	adiw	r24, 0x22	; 34
    c850:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			otherPlayer->active_shots = 0;
    c854:	f7 01       	movw	r30, r14
    c856:	14 82       	std	Z+4, r1	; 0x04
			otherPlayer->netMessage.level_score++;
    c858:	ef 58       	subi	r30, 0x8F	; 143
    c85a:	ff 4f       	sbci	r31, 0xFF	; 255
    c85c:	80 81       	ld	r24, Z
    c85e:	8f 5f       	subi	r24, 0xFF	; 255
    c860:	80 83       	st	Z, r24
			otherPlayer->netMessage.score++;
    c862:	31 97       	sbiw	r30, 0x01	; 1
    c864:	80 81       	ld	r24, Z
    c866:	8f 5f       	subi	r24, 0xFF	; 255
    c868:	80 83       	st	Z, r24
			render_score(otherPlayer, otherPlayerHudX);
    c86a:	6c 2d       	mov	r22, r12
    c86c:	c7 01       	movw	r24, r14
    c86e:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
			kill_player(player, playerHudX);
    c872:	6d 2d       	mov	r22, r13
    c874:	c8 01       	movw	r24, r16
    c876:	12 c0       	rjmp	.+36     	; 0xc89c <get_net_message+0x202>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETHITBYTURRET)
    c878:	91 30       	cpi	r25, 0x01	; 1
    c87a:	f9 f4       	brne	.+62     	; 0xc8ba <get_net_message+0x220>
		{
			game.boss_fight_player_lives--;
    c87c:	80 91 7b 0b 	lds	r24, 0x0B7B
    c880:	81 50       	subi	r24, 0x01	; 1
    c882:	80 93 7b 0b 	sts	0x0B7B, r24
			if (game.boss_fight_player_lives <= 0)
    c886:	81 11       	cpse	r24, r1
    c888:	03 c0       	rjmp	.+6      	; 0xc890 <get_net_message+0x1f6>
			{
				game.boss_fight_status = BOSS_FIGHT_LOST;
    c88a:	80 e1       	ldi	r24, 0x10	; 16
    c88c:	80 93 79 0b 	sts	0x0B79, r24
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c890:	60 91 7a 0b 	lds	r22, 0x0B7A
    c894:	80 91 85 0b 	lds	r24, 0x0B85
    c898:	90 91 86 0b 	lds	r25, 0x0B86
    c89c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    c8a0:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		state->pressed = 0;
	}
}
    c8a2:	df 91       	pop	r29
    c8a4:	cf 91       	pop	r28
    c8a6:	1f 91       	pop	r17
    c8a8:	0f 91       	pop	r16
    c8aa:	ff 90       	pop	r15
    c8ac:	ef 90       	pop	r14
    c8ae:	df 90       	pop	r13
    c8b0:	cf 90       	pop	r12
    c8b2:	bf 90       	pop	r11
    c8b4:	af 90       	pop	r10
    c8b6:	0c 94 8a 49 	jmp	0x9314	; 0x9314 <LBPlaySound.part.2>
				game.boss_fight_status = BOSS_FIGHT_LOST;
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETITEMBOMB)
    c8ba:	95 30       	cpi	r25, 0x05	; 5
    c8bc:	d9 f5       	brne	.+118    	; 0xc934 <get_net_message+0x29a>
		{
			if (netMessage->level_score != 0 && (netMessage->level_score  > player->old_level_score+1 || netMessage->level_score == player->old_level_score))
    c8be:	8d 81       	ldd	r24, Y+5	; 0x05
    c8c0:	88 23       	and	r24, r24
    c8c2:	79 f0       	breq	.+30     	; 0xc8e2 <get_net_message+0x248>
    c8c4:	f8 01       	movw	r30, r16
    c8c6:	93 89       	ldd	r25, Z+19	; 0x13
    c8c8:	48 2f       	mov	r20, r24
    c8ca:	50 e0       	ldi	r21, 0x00	; 0
    c8cc:	29 2f       	mov	r18, r25
    c8ce:	30 e0       	ldi	r19, 0x00	; 0
    c8d0:	2f 5f       	subi	r18, 0xFF	; 255
    c8d2:	3f 4f       	sbci	r19, 0xFF	; 255
    c8d4:	24 17       	cp	r18, r20
    c8d6:	35 07       	cpc	r19, r21
    c8d8:	0c f4       	brge	.+2      	; 0xc8dc <get_net_message+0x242>
    c8da:	69 c0       	rjmp	.+210    	; 0xc9ae <get_net_message+0x314>
    c8dc:	89 17       	cp	r24, r25
    c8de:	09 f4       	brne	.+2      	; 0xc8e2 <get_net_message+0x248>
    c8e0:	66 c0       	rjmp	.+204    	; 0xc9ae <get_net_message+0x314>
			{
				return;
			}
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c8e2:	6b 81       	ldd	r22, Y+3	; 0x03
    c8e4:	8a 81       	ldd	r24, Y+2	; 0x02
    c8e6:	9e e1       	ldi	r25, 0x1E	; 30
    c8e8:	69 9f       	mul	r22, r25
    c8ea:	f0 01       	movw	r30, r0
    c8ec:	11 24       	eor	r1, r1
    c8ee:	e1 5d       	subi	r30, 0xD1	; 209
    c8f0:	f3 4f       	sbci	r31, 0xF3	; 243
    c8f2:	e8 0f       	add	r30, r24
    c8f4:	f1 1d       	adc	r31, r1
    c8f6:	11 82       	std	Z+1, r1	; 0x01
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c8f8:	40 e0       	ldi	r20, 0x00	; 0
    c8fa:	50 e0       	ldi	r21, 0x00	; 0
    c8fc:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
			if (!(otherPlayer->flags & EXPLODING_FLAG))
    c900:	f7 01       	movw	r30, r14
    c902:	82 85       	ldd	r24, Z+10	; 0x0a
    c904:	80 fd       	sbrc	r24, 0
    c906:	07 c0       	rjmp	.+14     	; 0xc916 <get_net_message+0x27c>
			{
				kill_player(otherPlayer, otherPlayerHudX);
    c908:	6c 2d       	mov	r22, r12
    c90a:	c7 01       	movw	r24, r14
    c90c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    c910:	86 e0       	ldi	r24, 0x06	; 6
    c912:	0e 94 8a 49 	call	0x9314	; 0x9314 <LBPlaySound.part.2>
				LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
			}
			player->netMessage.level_score++;
    c916:	f8 01       	movw	r30, r16
    c918:	ef 58       	subi	r30, 0x8F	; 143
    c91a:	ff 4f       	sbci	r31, 0xFF	; 255
    c91c:	80 81       	ld	r24, Z
    c91e:	8f 5f       	subi	r24, 0xFF	; 255
    c920:	80 83       	st	Z, r24
			player->netMessage.score++;
    c922:	31 97       	sbiw	r30, 0x01	; 1
    c924:	80 81       	ld	r24, Z
    c926:	8f 5f       	subi	r24, 0xFF	; 255
    c928:	80 83       	st	Z, r24
			render_score(player, playerHudX);
    c92a:	6d 2d       	mov	r22, r13
    c92c:	c8 01       	movw	r24, r16
    c92e:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
    c932:	31 cf       	rjmp	.-414    	; 0xc796 <get_net_message+0xfc>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETBLOCKHIT)
    c934:	9e 30       	cpi	r25, 0x0E	; 14
    c936:	31 f5       	brne	.+76     	; 0xc984 <get_net_message+0x2ea>
		{
			explode_tile(&tile_animations, netMessage->object_pos_y * 30 + netMessage->object_pos_x);
    c938:	8b 81       	ldd	r24, Y+3	; 0x03
    c93a:	6a 81       	ldd	r22, Y+2	; 0x02
    c93c:	70 e0       	ldi	r23, 0x00	; 0
    c93e:	fe e1       	ldi	r31, 0x1E	; 30
    c940:	8f 9f       	mul	r24, r31
    c942:	60 0d       	add	r22, r0
    c944:	71 1d       	adc	r23, r1
    c946:	11 24       	eor	r1, r1
    c948:	8a e8       	ldi	r24, 0x8A	; 138
    c94a:	9b e0       	ldi	r25, 0x0B	; 11
    c94c:	0e 94 e7 55 	call	0xabce	; 0xabce <explode_tile>
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c950:	eb 81       	ldd	r30, Y+3	; 0x03
    c952:	8e e1       	ldi	r24, 0x1E	; 30
    c954:	e8 9f       	mul	r30, r24
    c956:	f0 01       	movw	r30, r0
    c958:	11 24       	eor	r1, r1
    c95a:	8a 81       	ldd	r24, Y+2	; 0x02
    c95c:	e1 5d       	subi	r30, 0xD1	; 209
    c95e:	f3 4f       	sbci	r31, 0xF3	; 243
    c960:	e8 0f       	add	r30, r24
    c962:	f1 1d       	adc	r31, r1
    c964:	11 82       	std	Z+1, r1	; 0x01
			player->shot[0].hit_count--;
    c966:	f8 01       	movw	r30, r16
    c968:	83 a5       	ldd	r24, Z+43	; 0x2b
    c96a:	81 50       	subi	r24, 0x01	; 1
    c96c:	83 a7       	std	Z+43, r24	; 0x2b
			if (player->shot[0].hit_count <= 0)
    c96e:	81 11       	cpse	r24, r1
    c970:	07 c0       	rjmp	.+14     	; 0xc980 <get_net_message+0x2e6>
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
    c972:	62 a5       	ldd	r22, Z+42	; 0x2a
    c974:	c8 01       	movw	r24, r16
    c976:	82 96       	adiw	r24, 0x22	; 34
    c978:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
				player->active_shots = 0;
    c97c:	f8 01       	movw	r30, r16
    c97e:	14 82       	std	Z+4, r1	; 0x04
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    c980:	20 e0       	ldi	r18, 0x00	; 0
    c982:	03 c0       	rjmp	.+6      	; 0xc98a <get_net_message+0x2f0>
		}
		else if (netMessage->code == NETHANDLESELECT)
    c984:	99 30       	cpi	r25, 0x09	; 9
    c986:	99 f4       	brne	.+38     	; 0xc9ae <get_net_message+0x314>
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c988:	24 e0       	ldi	r18, 0x04	; 4
    c98a:	40 91 28 0f 	lds	r20, 0x0F28
    c98e:	60 91 b2 0b 	lds	r22, 0x0BB2
    c992:	80 91 89 0b 	lds	r24, 0x0B89
	}
	else
	{
		state->pressed = 0;
	}
}
    c996:	df 91       	pop	r29
    c998:	cf 91       	pop	r28
    c99a:	1f 91       	pop	r17
    c99c:	0f 91       	pop	r16
    c99e:	ff 90       	pop	r15
    c9a0:	ef 90       	pop	r14
    c9a2:	df 90       	pop	r13
    c9a4:	cf 90       	pop	r12
    c9a6:	bf 90       	pop	r11
    c9a8:	af 90       	pop	r10
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
		}
		else if (netMessage->code == NETHANDLESELECT)
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c9aa:	0c 94 b7 4a 	jmp	0x956e	; 0x956e <LBPlaySound>
	}
	else
	{
		state->pressed = 0;
	}
}
    c9ae:	df 91       	pop	r29
    c9b0:	cf 91       	pop	r28
    c9b2:	1f 91       	pop	r17
    c9b4:	0f 91       	pop	r16
    c9b6:	ff 90       	pop	r15
    c9b8:	ef 90       	pop	r14
    c9ba:	df 90       	pop	r13
    c9bc:	cf 90       	pop	r12
    c9be:	bf 90       	pop	r11
    c9c0:	af 90       	pop	r10
    c9c2:	08 95       	ret

0000c9c4 <is_net_player>:

u8 is_net_player(Player* player)
{
    c9c4:	9c 01       	movw	r18, r24
	if (game.selection == HOSTNETGAME && player == &player2) return 1;
    c9c6:	80 91 89 0b 	lds	r24, 0x0B89
    c9ca:	82 30       	cpi	r24, 0x02	; 2
    c9cc:	29 f4       	brne	.+10     	; 0xc9d8 <is_net_player+0x14>
    c9ce:	81 e0       	ldi	r24, 0x01	; 1
    c9d0:	2e 51       	subi	r18, 0x1E	; 30
    c9d2:	3f 40       	sbci	r19, 0x0F	; 15
    c9d4:	39 f4       	brne	.+14     	; 0xc9e4 <is_net_player+0x20>
    c9d6:	07 c0       	rjmp	.+14     	; 0xc9e6 <is_net_player+0x22>
	if (game.selection == JOINNETGAME && player == &player1) return 1;
    c9d8:	83 30       	cpi	r24, 0x03	; 3
    c9da:	21 f4       	brne	.+8      	; 0xc9e4 <is_net_player+0x20>
    c9dc:	81 e0       	ldi	r24, 0x01	; 1
    c9de:	28 5a       	subi	r18, 0xA8	; 168
    c9e0:	3b 40       	sbci	r19, 0x0B	; 11
    c9e2:	09 f0       	breq	.+2      	; 0xc9e6 <is_net_player+0x22>
	return 0;
    c9e4:	80 e0       	ldi	r24, 0x00	; 0
}
    c9e6:	08 95       	ret

0000c9e8 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    c9e8:	2f 92       	push	r2
    c9ea:	3f 92       	push	r3
    c9ec:	4f 92       	push	r4
    c9ee:	5f 92       	push	r5
    c9f0:	6f 92       	push	r6
    c9f2:	7f 92       	push	r7
    c9f4:	8f 92       	push	r8
    c9f6:	9f 92       	push	r9
    c9f8:	af 92       	push	r10
    c9fa:	bf 92       	push	r11
    c9fc:	cf 92       	push	r12
    c9fe:	df 92       	push	r13
    ca00:	ef 92       	push	r14
    ca02:	ff 92       	push	r15
    ca04:	0f 93       	push	r16
    ca06:	1f 93       	push	r17
    ca08:	cf 93       	push	r28
    ca0a:	df 93       	push	r29
    ca0c:	cd b7       	in	r28, 0x3d	; 61
    ca0e:	de b7       	in	r29, 0x3e	; 62
    ca10:	2a 97       	sbiw	r28, 0x0a	; 10
    ca12:	0f b6       	in	r0, 0x3f	; 63
    ca14:	f8 94       	cli
    ca16:	de bf       	out	0x3e, r29	; 62
    ca18:	0f be       	out	0x3f, r0	; 63
    ca1a:	cd bf       	out	0x3d, r28	; 61
    ca1c:	3c 01       	movw	r6, r24
    ca1e:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    ca20:	1a 82       	std	Y+2, r1	; 0x02
    ca22:	19 82       	std	Y+1, r1	; 0x01
    ca24:	1c 82       	std	Y+4, r1	; 0x04
    ca26:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 800;
	u8 y = shot->shared.y / 800 - 3;
    ca28:	db 01       	movw	r26, r22
    ca2a:	16 96       	adiw	r26, 0x06	; 6
    ca2c:	8d 91       	ld	r24, X+
    ca2e:	9c 91       	ld	r25, X
    ca30:	17 97       	sbiw	r26, 0x07	; 7
    ca32:	20 e2       	ldi	r18, 0x20	; 32
    ca34:	33 e0       	ldi	r19, 0x03	; 3
    ca36:	b9 01       	movw	r22, r18
    ca38:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    ca3c:	4d ef       	ldi	r20, 0xFD	; 253
    ca3e:	46 0f       	add	r20, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 800;
    ca40:	f4 01       	movw	r30, r8
    ca42:	84 81       	ldd	r24, Z+4	; 0x04
    ca44:	95 81       	ldd	r25, Z+5	; 0x05
    ca46:	b9 01       	movw	r22, r18
    ca48:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    ca4c:	20 81       	ld	r18, Z
    ca4e:	ce 01       	movw	r24, r28
    ca50:	01 96       	adiw	r24, 0x01	; 1
    ca52:	0e 94 c5 55 	call	0xab8a	; 0xab8a <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    ca56:	c4 01       	movw	r24, r8
    ca58:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <collision_detect_boundries>
    ca5c:	88 23       	and	r24, r24
    ca5e:	49 f0       	breq	.+18     	; 0xca72 <collision_detect_shot+0x8a>
	{
		init_shot_state(shot, shot->shot_type);
    ca60:	d4 01       	movw	r26, r8
    ca62:	18 96       	adiw	r26, 0x08	; 8
    ca64:	6c 91       	ld	r22, X
    ca66:	c4 01       	movw	r24, r8
    ca68:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
		player->active_shots = 0;
    ca6c:	f3 01       	movw	r30, r6
    ca6e:	14 82       	std	Z+4, r1	; 0x04
		return;
    ca70:	ed c1       	rjmp	.+986    	; 0xce4c <collision_detect_shot+0x464>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
    ca72:	b4 01       	movw	r22, r8
    ca74:	88 ea       	ldi	r24, 0xA8	; 168
    ca76:	9b e0       	ldi	r25, 0x0B	; 11
    ca78:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    ca7c:	88 23       	and	r24, r24
    ca7e:	41 f1       	breq	.+80     	; 0xcad0 <collision_detect_shot+0xe8>
    ca80:	80 91 b2 0b 	lds	r24, 0x0BB2
    ca84:	80 fd       	sbrc	r24, 0
    ca86:	24 c0       	rjmp	.+72     	; 0xcad0 <collision_detect_shot+0xe8>
    ca88:	88 ea       	ldi	r24, 0xA8	; 168
    ca8a:	9b e0       	ldi	r25, 0x0B	; 11
    ca8c:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    ca90:	81 11       	cpse	r24, r1
    ca92:	1e c0       	rjmp	.+60     	; 0xcad0 <collision_detect_shot+0xe8>
	{
		p = &player1;
		hud_x = 0;
		player2.netMessage.level_score++;
    ca94:	80 91 8f 0f 	lds	r24, 0x0F8F
    ca98:	8f 5f       	subi	r24, 0xFF	; 255
    ca9a:	80 93 8f 0f 	sts	0x0F8F, r24
		player2.netMessage.score++;
    ca9e:	80 91 8e 0f 	lds	r24, 0x0F8E
    caa2:	8f 5f       	subi	r24, 0xFF	; 255
    caa4:	80 93 8e 0f 	sts	0x0F8E, r24
		render_score(&player2, 15);
    caa8:	6f e0       	ldi	r22, 0x0F	; 15
    caaa:	8e e1       	ldi	r24, 0x1E	; 30
    caac:	9f e0       	ldi	r25, 0x0F	; 15
    caae:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
		send_net_message(NETHIT, 0, 0, player2.netMessage.level_score >= MAX_LEVEL_SCORE);
    cab2:	21 e0       	ldi	r18, 0x01	; 1
    cab4:	80 91 8f 0f 	lds	r24, 0x0F8F
    cab8:	82 30       	cpi	r24, 0x02	; 2
    caba:	08 f4       	brcc	.+2      	; 0xcabe <collision_detect_shot+0xd6>
    cabc:	20 e0       	ldi	r18, 0x00	; 0
    cabe:	40 e0       	ldi	r20, 0x00	; 0
    cac0:	60 e0       	ldi	r22, 0x00	; 0
    cac2:	80 e0       	ldi	r24, 0x00	; 0
    cac4:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
	{
		p = &player1;
    cac8:	08 ea       	ldi	r16, 0xA8	; 168
    caca:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    cacc:	f1 2c       	mov	r15, r1
		player2.netMessage.level_score++;
		player2.netMessage.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, player2.netMessage.level_score >= MAX_LEVEL_SCORE);
    cace:	8b c0       	rjmp	.+278    	; 0xcbe6 <collision_detect_shot+0x1fe>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
    cad0:	b4 01       	movw	r22, r8
    cad2:	8e e1       	ldi	r24, 0x1E	; 30
    cad4:	9f e0       	ldi	r25, 0x0F	; 15
    cad6:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    cada:	90 91 79 0b 	lds	r25, 0x0B79
    cade:	88 23       	and	r24, r24
    cae0:	59 f1       	breq	.+86     	; 0xcb38 <collision_detect_shot+0x150>
    cae2:	80 91 28 0f 	lds	r24, 0x0F28
    cae6:	80 fd       	sbrc	r24, 0
    cae8:	27 c0       	rjmp	.+78     	; 0xcb38 <collision_detect_shot+0x150>
    caea:	91 11       	cpse	r25, r1
    caec:	25 c0       	rjmp	.+74     	; 0xcb38 <collision_detect_shot+0x150>
    caee:	8e e1       	ldi	r24, 0x1E	; 30
    caf0:	9f e0       	ldi	r25, 0x0F	; 15
    caf2:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    caf6:	81 11       	cpse	r24, r1
    caf8:	79 c0       	rjmp	.+242    	; 0xcbec <collision_detect_shot+0x204>
	{
		p = &player2;
		hud_x = 15;
		player1.netMessage.level_score++;
    cafa:	80 91 19 0c 	lds	r24, 0x0C19
    cafe:	8f 5f       	subi	r24, 0xFF	; 255
    cb00:	80 93 19 0c 	sts	0x0C19, r24
		player1.netMessage.score++;
    cb04:	80 91 18 0c 	lds	r24, 0x0C18
    cb08:	8f 5f       	subi	r24, 0xFF	; 255
    cb0a:	80 93 18 0c 	sts	0x0C18, r24
		render_score(&player1, 0);
    cb0e:	60 e0       	ldi	r22, 0x00	; 0
    cb10:	88 ea       	ldi	r24, 0xA8	; 168
    cb12:	9b e0       	ldi	r25, 0x0B	; 11
    cb14:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <render_score>
		send_net_message(NETHIT, 0, 0, player1.netMessage.level_score >= MAX_LEVEL_SCORE);
    cb18:	21 e0       	ldi	r18, 0x01	; 1
    cb1a:	80 91 19 0c 	lds	r24, 0x0C19
    cb1e:	82 30       	cpi	r24, 0x02	; 2
    cb20:	08 f4       	brcc	.+2      	; 0xcb24 <collision_detect_shot+0x13c>
    cb22:	20 e0       	ldi	r18, 0x00	; 0
    cb24:	40 e0       	ldi	r20, 0x00	; 0
    cb26:	60 e0       	ldi	r22, 0x00	; 0
    cb28:	80 e0       	ldi	r24, 0x00	; 0
    cb2a:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, player2.netMessage.level_score >= MAX_LEVEL_SCORE);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
	{
		p = &player2;
    cb2e:	0e e1       	ldi	r16, 0x1E	; 30
    cb30:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    cb32:	ef e0       	ldi	r30, 0x0F	; 15
    cb34:	fe 2e       	mov	r15, r30
		player1.netMessage.level_score++;
		player1.netMessage.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0, player1.netMessage.level_score >= MAX_LEVEL_SCORE);
    cb36:	57 c0       	rjmp	.+174    	; 0xcbe6 <collision_detect_shot+0x1fe>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cb38:	94 30       	cpi	r25, 0x04	; 4
    cb3a:	09 f0       	breq	.+2      	; 0xcb3e <collision_detect_shot+0x156>
    cb3c:	57 c0       	rjmp	.+174    	; 0xcbec <collision_detect_shot+0x204>
	{
		if (turret_shot(&turret1, shot) && !is_net_player(game.boss_fight_player))
    cb3e:	b4 01       	movw	r22, r8
    cb40:	80 ef       	ldi	r24, 0xF0	; 240
    cb42:	9f e0       	ldi	r25, 0x0F	; 15
    cb44:	0e 94 de 54 	call	0xa9bc	; 0xa9bc <turret_shot>
    cb48:	88 23       	and	r24, r24
    cb4a:	11 f1       	breq	.+68     	; 0xcb90 <collision_detect_shot+0x1a8>
    cb4c:	80 91 85 0b 	lds	r24, 0x0B85
    cb50:	90 91 86 0b 	lds	r25, 0x0B86
    cb54:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    cb58:	81 11       	cpse	r24, r1
    cb5a:	1a c0       	rjmp	.+52     	; 0xcb90 <collision_detect_shot+0x1a8>
		{
			turret1.lives--;
    cb5c:	80 91 f8 0f 	lds	r24, 0x0FF8
    cb60:	81 50       	subi	r24, 0x01	; 1
    cb62:	80 93 f8 0f 	sts	0x0FF8, r24
			init_shot_state(shot, shot->shot_type);
    cb66:	d4 01       	movw	r26, r8
    cb68:	18 96       	adiw	r26, 0x08	; 8
    cb6a:	6c 91       	ld	r22, X
    cb6c:	c4 01       	movw	r24, r8
    cb6e:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    cb72:	e0 91 85 0b 	lds	r30, 0x0B85
    cb76:	f0 91 86 0b 	lds	r31, 0x0B86
    cb7a:	14 82       	std	Z+4, r1	; 0x04
    cb7c:	86 e0       	ldi	r24, 0x06	; 6
    cb7e:	0e 94 8a 49 	call	0x9314	; 0x9314 <LBPlaySound.part.2>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 1, turret1.lives, turret1.lives == 0);
    cb82:	40 91 f8 0f 	lds	r20, 0x0FF8
    cb86:	21 e0       	ldi	r18, 0x01	; 1
    cb88:	41 11       	cpse	r20, r1
    cb8a:	20 e0       	ldi	r18, 0x00	; 0
    cb8c:	61 e0       	ldi	r22, 0x01	; 1
    cb8e:	27 c0       	rjmp	.+78     	; 0xcbde <collision_detect_shot+0x1f6>
		}
		else if (turret_shot(&turret2, shot) && !is_net_player(game.boss_fight_player))
    cb90:	b4 01       	movw	r22, r8
    cb92:	81 ec       	ldi	r24, 0xC1	; 193
    cb94:	9f e0       	ldi	r25, 0x0F	; 15
    cb96:	0e 94 de 54 	call	0xa9bc	; 0xa9bc <turret_shot>
    cb9a:	88 23       	and	r24, r24
    cb9c:	39 f1       	breq	.+78     	; 0xcbec <collision_detect_shot+0x204>
    cb9e:	80 91 85 0b 	lds	r24, 0x0B85
    cba2:	90 91 86 0b 	lds	r25, 0x0B86
    cba6:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    cbaa:	81 11       	cpse	r24, r1
    cbac:	1f c0       	rjmp	.+62     	; 0xcbec <collision_detect_shot+0x204>
		{
			turret2.lives--;
    cbae:	80 91 c9 0f 	lds	r24, 0x0FC9
    cbb2:	81 50       	subi	r24, 0x01	; 1
    cbb4:	80 93 c9 0f 	sts	0x0FC9, r24
			init_shot_state(shot, shot->shot_type);
    cbb8:	f4 01       	movw	r30, r8
    cbba:	60 85       	ldd	r22, Z+8	; 0x08
    cbbc:	c4 01       	movw	r24, r8
    cbbe:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    cbc2:	e0 91 85 0b 	lds	r30, 0x0B85
    cbc6:	f0 91 86 0b 	lds	r31, 0x0B86
    cbca:	14 82       	std	Z+4, r1	; 0x04
    cbcc:	86 e0       	ldi	r24, 0x06	; 6
    cbce:	0e 94 8a 49 	call	0x9314	; 0x9314 <LBPlaySound.part.2>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
    cbd2:	40 91 c9 0f 	lds	r20, 0x0FC9
    cbd6:	21 e0       	ldi	r18, 0x01	; 1
    cbd8:	41 11       	cpse	r20, r1
    cbda:	20 e0       	ldi	r18, 0x00	; 0
    cbdc:	62 e0       	ldi	r22, 0x02	; 2
    cbde:	8c e0       	ldi	r24, 0x0C	; 12
    cbe0:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
    cbe4:	03 c0       	rjmp	.+6      	; 0xcbec <collision_detect_shot+0x204>
		}
	}
	if (p)
    cbe6:	01 15       	cp	r16, r1
    cbe8:	11 05       	cpc	r17, r1
    cbea:	81 f4       	brne	.+32     	; 0xcc0c <collision_detect_shot+0x224>
    cbec:	ce 01       	movw	r24, r28
    cbee:	01 96       	adiw	r24, 0x01	; 1
    cbf0:	9a 87       	std	Y+10, r25	; 0x0a
    cbf2:	89 87       	std	Y+9, r24	; 0x09
    cbf4:	1e 82       	std	Y+6, r1	; 0x06
    cbf6:	18 86       	std	Y+8, r1	; 0x08
    cbf8:	1f 82       	std	Y+7, r1	; 0x07
    cbfa:	1d 82       	std	Y+5, r1	; 0x05
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    cbfc:	6e e1       	ldi	r22, 0x1E	; 30
    cbfe:	26 2e       	mov	r2, r22
    cc00:	31 2c       	mov	r3, r1
    cc02:	70 e2       	ldi	r23, 0x20	; 32
    cc04:	47 2e       	mov	r4, r23
    cc06:	73 e0       	ldi	r23, 0x03	; 3
    cc08:	57 2e       	mov	r5, r23
    cc0a:	31 c0       	rjmp	.+98     	; 0xcc6e <collision_detect_shot+0x286>
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    cc0c:	d4 01       	movw	r26, r8
    cc0e:	18 96       	adiw	r26, 0x08	; 8
    cc10:	6c 91       	ld	r22, X
    cc12:	c4 01       	movw	r24, r8
    cc14:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
		player->active_shots = 0;
    cc18:	f3 01       	movw	r30, r6
    cc1a:	14 82       	std	Z+4, r1	; 0x04
		kill_player(p, hud_x);
    cc1c:	6f 2d       	mov	r22, r15
    cc1e:	c8 01       	movw	r24, r16
    cc20:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    cc24:	86 e0       	ldi	r24, 0x06	; 6
    cc26:	0e 94 8a 49 	call	0x9314	; 0x9314 <LBPlaySound.part.2>
    cc2a:	10 c1       	rjmp	.+544    	; 0xce4c <collision_detect_shot+0x464>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
    cc2c:	c7 01       	movw	r24, r14
    cc2e:	0e 94 a0 52 	call	0xa540	; 0xa540 <solid_directional_tile>
    cc32:	88 23       	and	r24, r24
    cc34:	49 f1       	breq	.+82     	; 0xcc88 <collision_detect_shot+0x2a0>
    cc36:	f4 01       	movw	r30, r8
    cc38:	46 81       	ldd	r20, Z+6	; 0x06
    cc3a:	57 81       	ldd	r21, Z+7	; 0x07
    cc3c:	48 53       	subi	r20, 0x38	; 56
    cc3e:	5f 4f       	sbci	r21, 0xFF	; 255
    cc40:	64 81       	ldd	r22, Z+4	; 0x04
    cc42:	75 81       	ldd	r23, Z+5	; 0x05
    cc44:	68 53       	subi	r22, 0x38	; 56
    cc46:	7f 4f       	sbci	r23, 0xFF	; 255
    cc48:	00 e9       	ldi	r16, 0x90	; 144
    cc4a:	11 e0       	ldi	r17, 0x01	; 1
    cc4c:	20 e9       	ldi	r18, 0x90	; 144
    cc4e:	31 e0       	ldi	r19, 0x01	; 1
    cc50:	c7 01       	movw	r24, r14
    cc52:	0e 94 ca 52 	call	0xa594	; 0xa594 <collides_directional_tile>
    cc56:	88 23       	and	r24, r24
    cc58:	b9 f0       	breq	.+46     	; 0xcc88 <collision_detect_shot+0x2a0>
		{
			hit = hit | HIT_ANGLE;
    cc5a:	fd 81       	ldd	r31, Y+5	; 0x05
    cc5c:	f4 60       	ori	r31, 0x04	; 4
    cc5e:	fd 83       	std	Y+5, r31	; 0x05
			angle_tile = tile;
    cc60:	d8 86       	std	Y+8, r13	; 0x08
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    cc62:	2e 81       	ldd	r18, Y+6	; 0x06
    cc64:	21 30       	cpi	r18, 0x01	; 1
    cc66:	09 f4       	brne	.+2      	; 0xcc6a <collision_detect_shot+0x282>
    cc68:	7f c0       	rjmp	.+254    	; 0xcd68 <collision_detect_shot+0x380>
    cc6a:	f1 e0       	ldi	r31, 0x01	; 1
    cc6c:	fe 83       	std	Y+6, r31	; 0x06
	{
		tile = level.level_map[tiles[i]];
    cc6e:	a9 85       	ldd	r26, Y+9	; 0x09
    cc70:	ba 85       	ldd	r27, Y+10	; 0x0a
    cc72:	ed 90       	ld	r14, X+
    cc74:	fd 90       	ld	r15, X+
    cc76:	ba 87       	std	Y+10, r27	; 0x0a
    cc78:	a9 87       	std	Y+9, r26	; 0x09
    cc7a:	f7 01       	movw	r30, r14
    cc7c:	e1 5d       	subi	r30, 0xD1	; 209
    cc7e:	f3 4f       	sbci	r31, 0xF3	; 243
    cc80:	d1 80       	ldd	r13, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    cc82:	dd 20       	and	r13, r13
    cc84:	71 f3       	breq	.-36     	; 0xcc62 <collision_detect_shot+0x27a>
    cc86:	d2 cf       	rjmp	.-92     	; 0xcc2c <collision_detect_shot+0x244>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    cc88:	21 e0       	ldi	r18, 0x01	; 1
    cc8a:	d2 12       	cpse	r13, r18
    cc8c:	36 c0       	rjmp	.+108    	; 0xccfa <collision_detect_shot+0x312>
    cc8e:	c7 01       	movw	r24, r14
    cc90:	b1 01       	movw	r22, r2
    cc92:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    cc96:	64 9d       	mul	r22, r4
    cc98:	70 01       	movw	r14, r0
    cc9a:	65 9d       	mul	r22, r5
    cc9c:	f0 0c       	add	r15, r0
    cc9e:	74 9d       	mul	r23, r4
    cca0:	f0 0c       	add	r15, r0
    cca2:	11 24       	eor	r1, r1
    cca4:	a0 ea       	ldi	r26, 0xA0	; 160
    cca6:	ea 1a       	sub	r14, r26
    cca8:	a6 ef       	ldi	r26, 0xF6	; 246
    ccaa:	fa 0a       	sbc	r15, r26
    ccac:	84 9d       	mul	r24, r4
    ccae:	80 01       	movw	r16, r0
    ccb0:	85 9d       	mul	r24, r5
    ccb2:	10 0d       	add	r17, r0
    ccb4:	94 9d       	mul	r25, r4
    ccb6:	10 0d       	add	r17, r0
    ccb8:	11 24       	eor	r1, r1
    ccba:	f4 01       	movw	r30, r8
    ccbc:	66 81       	ldd	r22, Z+6	; 0x06
    ccbe:	77 81       	ldd	r23, Z+7	; 0x07
    ccc0:	68 53       	subi	r22, 0x38	; 56
    ccc2:	7f 4f       	sbci	r23, 0xFF	; 255
    ccc4:	84 81       	ldd	r24, Z+4	; 0x04
    ccc6:	95 81       	ldd	r25, Z+5	; 0x05
    ccc8:	40 e2       	ldi	r20, 0x20	; 32
    ccca:	a4 2e       	mov	r10, r20
    cccc:	43 e0       	ldi	r20, 0x03	; 3
    ccce:	b4 2e       	mov	r11, r20
    ccd0:	50 e2       	ldi	r21, 0x20	; 32
    ccd2:	c5 2e       	mov	r12, r21
    ccd4:	53 e0       	ldi	r21, 0x03	; 3
    ccd6:	d5 2e       	mov	r13, r21
    ccd8:	20 e9       	ldi	r18, 0x90	; 144
    ccda:	31 e0       	ldi	r19, 0x01	; 1
    ccdc:	40 e9       	ldi	r20, 0x90	; 144
    ccde:	51 e0       	ldi	r21, 0x01	; 1
    cce0:	88 53       	subi	r24, 0x38	; 56
    cce2:	9f 4f       	sbci	r25, 0xFF	; 255
    cce4:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
    cce8:	88 23       	and	r24, r24
    ccea:	09 f4       	brne	.+2      	; 0xccee <collision_detect_shot+0x306>
    ccec:	ba cf       	rjmp	.-140    	; 0xcc62 <collision_detect_shot+0x27a>
		{
			hit = hit | HIT_BRICK;
    ccee:	fd 81       	ldd	r31, Y+5	; 0x05
    ccf0:	f2 60       	ori	r31, 0x02	; 2
    ccf2:	fd 83       	std	Y+5, r31	; 0x05
			brick_index = i;
    ccf4:	2e 81       	ldd	r18, Y+6	; 0x06
    ccf6:	2f 83       	std	Y+7, r18	; 0x07
    ccf8:	b4 cf       	rjmp	.-152    	; 0xcc62 <collision_detect_shot+0x27a>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    ccfa:	82 e0       	ldi	r24, 0x02	; 2
    ccfc:	d8 12       	cpse	r13, r24
    ccfe:	b1 cf       	rjmp	.-158    	; 0xcc62 <collision_detect_shot+0x27a>
    cd00:	c7 01       	movw	r24, r14
    cd02:	b1 01       	movw	r22, r2
    cd04:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    cd08:	64 9d       	mul	r22, r4
    cd0a:	70 01       	movw	r14, r0
    cd0c:	65 9d       	mul	r22, r5
    cd0e:	f0 0c       	add	r15, r0
    cd10:	74 9d       	mul	r23, r4
    cd12:	f0 0c       	add	r15, r0
    cd14:	11 24       	eor	r1, r1
    cd16:	a0 ea       	ldi	r26, 0xA0	; 160
    cd18:	ea 1a       	sub	r14, r26
    cd1a:	a6 ef       	ldi	r26, 0xF6	; 246
    cd1c:	fa 0a       	sbc	r15, r26
    cd1e:	84 9d       	mul	r24, r4
    cd20:	80 01       	movw	r16, r0
    cd22:	85 9d       	mul	r24, r5
    cd24:	10 0d       	add	r17, r0
    cd26:	94 9d       	mul	r25, r4
    cd28:	10 0d       	add	r17, r0
    cd2a:	11 24       	eor	r1, r1
    cd2c:	f4 01       	movw	r30, r8
    cd2e:	66 81       	ldd	r22, Z+6	; 0x06
    cd30:	77 81       	ldd	r23, Z+7	; 0x07
    cd32:	68 53       	subi	r22, 0x38	; 56
    cd34:	7f 4f       	sbci	r23, 0xFF	; 255
    cd36:	84 81       	ldd	r24, Z+4	; 0x04
    cd38:	95 81       	ldd	r25, Z+5	; 0x05
    cd3a:	20 e2       	ldi	r18, 0x20	; 32
    cd3c:	a2 2e       	mov	r10, r18
    cd3e:	23 e0       	ldi	r18, 0x03	; 3
    cd40:	b2 2e       	mov	r11, r18
    cd42:	30 e2       	ldi	r19, 0x20	; 32
    cd44:	c3 2e       	mov	r12, r19
    cd46:	33 e0       	ldi	r19, 0x03	; 3
    cd48:	d3 2e       	mov	r13, r19
    cd4a:	20 e9       	ldi	r18, 0x90	; 144
    cd4c:	31 e0       	ldi	r19, 0x01	; 1
    cd4e:	40 e9       	ldi	r20, 0x90	; 144
    cd50:	51 e0       	ldi	r21, 0x01	; 1
    cd52:	88 53       	subi	r24, 0x38	; 56
    cd54:	9f 4f       	sbci	r25, 0xFF	; 255
    cd56:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
    cd5a:	88 23       	and	r24, r24
    cd5c:	09 f4       	brne	.+2      	; 0xcd60 <collision_detect_shot+0x378>
    cd5e:	81 cf       	rjmp	.-254    	; 0xcc62 <collision_detect_shot+0x27a>
        {
		    hit = hit | HIT_METAL;
    cd60:	fd 81       	ldd	r31, Y+5	; 0x05
    cd62:	f1 60       	ori	r31, 0x01	; 1
    cd64:	fd 83       	std	Y+5, r31	; 0x05
    cd66:	7d cf       	rjmp	.-262    	; 0xcc62 <collision_detect_shot+0x27a>
        }
	}
	
	if (hit & HIT_ANGLE)
    cd68:	8d 81       	ldd	r24, Y+5	; 0x05
    cd6a:	82 ff       	sbrs	r24, 2
    cd6c:	1a c0       	rjmp	.+52     	; 0xcda2 <collision_detect_shot+0x3ba>
	{
		recoil_sprite_fine(player, &shot->shared);
    cd6e:	b4 01       	movw	r22, r8
    cd70:	c3 01       	movw	r24, r6
    cd72:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    cd76:	b4 01       	movw	r22, r8
    cd78:	88 85       	ldd	r24, Y+8	; 0x08
    cd7a:	0e 94 25 56 	call	0xac4a	; 0xac4a <richochet>
		shot->rebounds--;
    cd7e:	d4 01       	movw	r26, r8
    cd80:	1a 96       	adiw	r26, 0x0a	; 10
    cd82:	8c 91       	ld	r24, X
    cd84:	1a 97       	sbiw	r26, 0x0a	; 10
    cd86:	81 50       	subi	r24, 0x01	; 1
    cd88:	1a 96       	adiw	r26, 0x0a	; 10
    cd8a:	8c 93       	st	X, r24
    cd8c:	1a 97       	sbiw	r26, 0x0a	; 10
		if (shot->rebounds <= 0)
    cd8e:	81 11       	cpse	r24, r1
    cd90:	54 c0       	rjmp	.+168    	; 0xce3a <collision_detect_shot+0x452>
		{
			init_shot_state(shot, shot->shot_type);
    cd92:	18 96       	adiw	r26, 0x08	; 8
    cd94:	6c 91       	ld	r22, X
    cd96:	c4 01       	movw	r24, r8
    cd98:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			player->active_shots = 0;
    cd9c:	f3 01       	movw	r30, r6
    cd9e:	14 82       	std	Z+4, r1	; 0x04
    cda0:	4c c0       	rjmp	.+152    	; 0xce3a <collision_detect_shot+0x452>
		}
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
	else if ((hit & HIT_BRICK) && !is_net_player(player))
    cda2:	fd 81       	ldd	r31, Y+5	; 0x05
    cda4:	f1 ff       	sbrs	r31, 1
    cda6:	3e c0       	rjmp	.+124    	; 0xce24 <collision_detect_shot+0x43c>
    cda8:	c3 01       	movw	r24, r6
    cdaa:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    cdae:	81 11       	cpse	r24, r1
    cdb0:	39 c0       	rjmp	.+114    	; 0xce24 <collision_detect_shot+0x43c>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    cdb2:	2f 81       	ldd	r18, Y+7	; 0x07
    cdb4:	42 2e       	mov	r4, r18
    cdb6:	51 2c       	mov	r5, r1
    cdb8:	44 0c       	add	r4, r4
    cdba:	55 1c       	adc	r5, r5
    cdbc:	01 e0       	ldi	r16, 0x01	; 1
    cdbe:	10 e0       	ldi	r17, 0x00	; 0
    cdc0:	0c 0f       	add	r16, r28
    cdc2:	1d 1f       	adc	r17, r29
    cdc4:	04 0d       	add	r16, r4
    cdc6:	15 1d       	adc	r17, r5
    cdc8:	d8 01       	movw	r26, r16
    cdca:	6d 91       	ld	r22, X+
    cdcc:	7c 91       	ld	r23, X
    cdce:	8a e8       	ldi	r24, 0x8A	; 138
    cdd0:	9b e0       	ldi	r25, 0x0B	; 11
    cdd2:	0e 94 e7 55 	call	0xabce	; 0xabce <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    cdd6:	d8 01       	movw	r26, r16
    cdd8:	ed 91       	ld	r30, X+
    cdda:	fc 91       	ld	r31, X
    cddc:	e1 5d       	subi	r30, 0xD1	; 209
    cdde:	f3 4f       	sbci	r31, 0xF3	; 243
    cde0:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    cde2:	f4 01       	movw	r30, r8
    cde4:	81 85       	ldd	r24, Z+9	; 0x09
    cde6:	81 50       	subi	r24, 0x01	; 1
    cde8:	81 87       	std	Z+9, r24	; 0x09
		if (shot->hit_count <= 0)
    cdea:	81 11       	cpse	r24, r1
    cdec:	07 c0       	rjmp	.+14     	; 0xcdfc <collision_detect_shot+0x414>
		{
			init_shot_state(shot, shot->shot_type);
    cdee:	60 85       	ldd	r22, Z+8	; 0x08
    cdf0:	c4 01       	movw	r24, r8
    cdf2:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
			player->active_shots = 0;
    cdf6:	d3 01       	movw	r26, r6
    cdf8:	14 96       	adiw	r26, 0x04	; 4
    cdfa:	1c 92       	st	X, r1
		}
		send_net_message(NETBLOCKHIT, tiles[brick_index] % 30, tiles[brick_index] / 30, 0);
    cdfc:	e1 e0       	ldi	r30, 0x01	; 1
    cdfe:	f0 e0       	ldi	r31, 0x00	; 0
    ce00:	ec 0f       	add	r30, r28
    ce02:	fd 1f       	adc	r31, r29
    ce04:	e4 0d       	add	r30, r4
    ce06:	f5 1d       	adc	r31, r5
    ce08:	80 81       	ld	r24, Z
    ce0a:	91 81       	ldd	r25, Z+1	; 0x01
    ce0c:	6e e1       	ldi	r22, 0x1E	; 30
    ce0e:	70 e0       	ldi	r23, 0x00	; 0
    ce10:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    ce14:	46 2f       	mov	r20, r22
    ce16:	20 e0       	ldi	r18, 0x00	; 0
    ce18:	68 2f       	mov	r22, r24
    ce1a:	8e e0       	ldi	r24, 0x0E	; 14
    ce1c:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    ce20:	20 e0       	ldi	r18, 0x00	; 0
    ce22:	0c c0       	rjmp	.+24     	; 0xce3c <collision_detect_shot+0x454>
	}
	else if (hit & HIT_METAL)
    ce24:	bd 81       	ldd	r27, Y+5	; 0x05
    ce26:	b0 ff       	sbrs	r27, 0
    ce28:	11 c0       	rjmp	.+34     	; 0xce4c <collision_detect_shot+0x464>
	{
        init_shot_state(shot, shot->shot_type);
    ce2a:	f4 01       	movw	r30, r8
    ce2c:	60 85       	ldd	r22, Z+8	; 0x08
    ce2e:	c4 01       	movw	r24, r8
    ce30:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
        player->active_shots = 0;
    ce34:	d3 01       	movw	r26, r6
    ce36:	14 96       	adiw	r26, 0x04	; 4
    ce38:	1c 92       	st	X, r1
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
    ce3a:	23 e0       	ldi	r18, 0x03	; 3
    ce3c:	40 91 28 0f 	lds	r20, 0x0F28
    ce40:	60 91 b2 0b 	lds	r22, 0x0BB2
    ce44:	80 91 89 0b 	lds	r24, 0x0B89
    ce48:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
	}
}
    ce4c:	2a 96       	adiw	r28, 0x0a	; 10
    ce4e:	0f b6       	in	r0, 0x3f	; 63
    ce50:	f8 94       	cli
    ce52:	de bf       	out	0x3e, r29	; 62
    ce54:	0f be       	out	0x3f, r0	; 63
    ce56:	cd bf       	out	0x3d, r28	; 61
    ce58:	df 91       	pop	r29
    ce5a:	cf 91       	pop	r28
    ce5c:	1f 91       	pop	r17
    ce5e:	0f 91       	pop	r16
    ce60:	ff 90       	pop	r15
    ce62:	ef 90       	pop	r14
    ce64:	df 90       	pop	r13
    ce66:	cf 90       	pop	r12
    ce68:	bf 90       	pop	r11
    ce6a:	af 90       	pop	r10
    ce6c:	9f 90       	pop	r9
    ce6e:	8f 90       	pop	r8
    ce70:	7f 90       	pop	r7
    ce72:	6f 90       	pop	r6
    ce74:	5f 90       	pop	r5
    ce76:	4f 90       	pop	r4
    ce78:	3f 90       	pop	r3
    ce7a:	2f 90       	pop	r2
    ce7c:	08 95       	ret

0000ce7e <update_player>:
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
}

void update_player(JoyPadState* p, Player* player)
{
    ce7e:	df 92       	push	r13
    ce80:	ef 92       	push	r14
    ce82:	ff 92       	push	r15
    ce84:	0f 93       	push	r16
    ce86:	1f 93       	push	r17
    ce88:	cf 93       	push	r28
    ce8a:	df 93       	push	r29
    ce8c:	8c 01       	movw	r16, r24
    ce8e:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->netMessage.shared.recoiled = 0;
    ce90:	fb 01       	movw	r30, r22
    ce92:	eb 58       	subi	r30, 0x8B	; 139
    ce94:	ff 4f       	sbci	r31, 0xFF	; 255
    ce96:	10 82       	st	Z, r1
	player->old_active_shots = player->active_shots;
    ce98:	8c 81       	ldd	r24, Y+4	; 0x04
    ce9a:	8d 83       	std	Y+5, r24	; 0x05
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
    ce9c:	d8 01       	movw	r26, r16
    ce9e:	8c 91       	ld	r24, X
    cea0:	83 ff       	sbrs	r24, 3
    cea2:	25 c0       	rjmp	.+74     	; 0xceee <update_player+0x70>
    cea4:	80 91 79 0b 	lds	r24, 0x0B79
    cea8:	81 11       	cpse	r24, r1
    ceaa:	21 c0       	rjmp	.+66     	; 0xceee <update_player+0x70>
    ceac:	cb 01       	movw	r24, r22
    ceae:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    ceb2:	81 11       	cpse	r24, r1
    ceb4:	1c c0       	rjmp	.+56     	; 0xceee <update_player+0x70>
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    ceb6:	24 e0       	ldi	r18, 0x04	; 4
    ceb8:	40 91 28 0f 	lds	r20, 0x0F28
    cebc:	60 91 b2 0b 	lds	r22, 0x0BB2
    cec0:	80 91 89 0b 	lds	r24, 0x0B89
    cec4:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		game.paused = game.paused ^ 1;
    cec8:	90 91 78 0b 	lds	r25, 0x0B78
    cecc:	81 e0       	ldi	r24, 0x01	; 1
		if (game.paused)
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    cece:	21 e0       	ldi	r18, 0x01	; 1
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		game.paused = game.paused ^ 1;
    ced0:	89 27       	eor	r24, r25
    ced2:	80 93 78 0b 	sts	0x0B78, r24
		if (game.paused)
    ced6:	88 23       	and	r24, r24
    ced8:	11 f0       	breq	.+4      	; 0xcede <update_player+0x60>
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    ceda:	47 e0       	ldi	r20, 0x07	; 7
    cedc:	01 c0       	rjmp	.+2      	; 0xcee0 <update_player+0x62>
		}
		else
		{
			send_smart_net_message(player, p, NETRESUME, 1);
    cede:	4d e0       	ldi	r20, 0x0D	; 13
    cee0:	b8 01       	movw	r22, r16
    cee2:	ce 01       	movw	r24, r28
    cee4:	0e 94 3a 63 	call	0xc674	; 0xc674 <send_smart_net_message>
		}
		load_level_tiles(false);
    cee8:	80 e0       	ldi	r24, 0x00	; 0
    ceea:	0e 94 02 57 	call	0xae04	; 0xae04 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    ceee:	80 91 78 0b 	lds	r24, 0x0B78
    cef2:	81 11       	cpse	r24, r1
    cef4:	9e c0       	rjmp	.+316    	; 0xd032 <update_player+0x1b4>
    cef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    cef8:	80 fd       	sbrc	r24, 0
    cefa:	9b c0       	rjmp	.+310    	; 0xd032 <update_player+0x1b4>
	{
		player->netMessage.shared.speed = player->max_speed;
    cefc:	fe 01       	movw	r30, r28
    cefe:	ed 58       	subi	r30, 0x8D	; 141
    cf00:	ff 4f       	sbci	r31, 0xFF	; 255
    cf02:	8c 85       	ldd	r24, Y+12	; 0x0c
    cf04:	9d 85       	ldd	r25, Y+13	; 0x0d
    cf06:	91 83       	std	Z+1, r25	; 0x01
    cf08:	80 83       	st	Z, r24
		if ((p->held & BTN_UP))
    cf0a:	d8 01       	movw	r26, r16
    cf0c:	14 96       	adiw	r26, 0x04	; 4
    cf0e:	8c 91       	ld	r24, X
    cf10:	84 ff       	sbrs	r24, 4
    cf12:	0c c0       	rjmp	.+24     	; 0xcf2c <update_player+0xae>
		{
			player->netMessage.shared.direction = D_UP;
    cf14:	be 01       	movw	r22, r28
    cf16:	6e 58       	subi	r22, 0x8E	; 142
    cf18:	7f 4f       	sbci	r23, 0xFF	; 255
    cf1a:	fb 01       	movw	r30, r22
    cf1c:	10 82       	st	Z, r1
			player->netMessage.shared.y -= get_delta(player, &player->netMessage.shared);
    cf1e:	ce 01       	movw	r24, r28
    cf20:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    cf24:	fe 01       	movw	r30, r28
    cf26:	e8 58       	subi	r30, 0x88	; 136
    cf28:	ff 4f       	sbci	r31, 0xFF	; 255
    cf2a:	32 c0       	rjmp	.+100    	; 0xcf90 <update_player+0x112>
		}
		else if ((p->held & BTN_RIGHT))
    cf2c:	87 ff       	sbrs	r24, 7
    cf2e:	0d c0       	rjmp	.+26     	; 0xcf4a <update_player+0xcc>
		{
			player->netMessage.shared.direction = D_RIGHT;
    cf30:	81 e0       	ldi	r24, 0x01	; 1
    cf32:	be 01       	movw	r22, r28
    cf34:	6e 58       	subi	r22, 0x8E	; 142
    cf36:	7f 4f       	sbci	r23, 0xFF	; 255
    cf38:	db 01       	movw	r26, r22
    cf3a:	8c 93       	st	X, r24
			player->netMessage.shared.x += get_delta(player, &player->netMessage.shared);
    cf3c:	ce 01       	movw	r24, r28
    cf3e:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    cf42:	fe 01       	movw	r30, r28
    cf44:	ea 58       	subi	r30, 0x8A	; 138
    cf46:	ff 4f       	sbci	r31, 0xFF	; 255
    cf48:	0e c0       	rjmp	.+28     	; 0xcf66 <update_player+0xe8>
		}
		else if ((p->held & BTN_DOWN))
    cf4a:	85 ff       	sbrs	r24, 5
    cf4c:	13 c0       	rjmp	.+38     	; 0xcf74 <update_player+0xf6>
		{
			player->netMessage.shared.direction = D_DOWN;
    cf4e:	82 e0       	ldi	r24, 0x02	; 2
    cf50:	be 01       	movw	r22, r28
    cf52:	6e 58       	subi	r22, 0x8E	; 142
    cf54:	7f 4f       	sbci	r23, 0xFF	; 255
    cf56:	fb 01       	movw	r30, r22
    cf58:	80 83       	st	Z, r24
			player->netMessage.shared.y += get_delta(player, &player->netMessage.shared);
    cf5a:	ce 01       	movw	r24, r28
    cf5c:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    cf60:	fe 01       	movw	r30, r28
    cf62:	e8 58       	subi	r30, 0x88	; 136
    cf64:	ff 4f       	sbci	r31, 0xFF	; 255
    cf66:	20 81       	ld	r18, Z
    cf68:	31 81       	ldd	r19, Z+1	; 0x01
    cf6a:	82 0f       	add	r24, r18
    cf6c:	93 1f       	adc	r25, r19
    cf6e:	91 83       	std	Z+1, r25	; 0x01
    cf70:	80 83       	st	Z, r24
    cf72:	17 c0       	rjmp	.+46     	; 0xcfa2 <update_player+0x124>
		}
		else if ((p->held & BTN_LEFT))
    cf74:	86 ff       	sbrs	r24, 6
    cf76:	13 c0       	rjmp	.+38     	; 0xcf9e <update_player+0x120>
		{
			player->netMessage.shared.direction = D_LEFT;
    cf78:	83 e0       	ldi	r24, 0x03	; 3
    cf7a:	be 01       	movw	r22, r28
    cf7c:	6e 58       	subi	r22, 0x8E	; 142
    cf7e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf80:	db 01       	movw	r26, r22
    cf82:	8c 93       	st	X, r24
			player->netMessage.shared.x -= get_delta(player, &player->netMessage.shared);
    cf84:	ce 01       	movw	r24, r28
    cf86:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    cf8a:	fe 01       	movw	r30, r28
    cf8c:	ea 58       	subi	r30, 0x8A	; 138
    cf8e:	ff 4f       	sbci	r31, 0xFF	; 255
    cf90:	20 81       	ld	r18, Z
    cf92:	31 81       	ldd	r19, Z+1	; 0x01
    cf94:	28 1b       	sub	r18, r24
    cf96:	39 0b       	sbc	r19, r25
    cf98:	31 83       	std	Z+1, r19	; 0x01
    cf9a:	20 83       	st	Z, r18
    cf9c:	02 c0       	rjmp	.+4      	; 0xcfa2 <update_player+0x124>
		}
		else
		{
			player->netMessage.shared.speed = 0;
    cf9e:	11 82       	std	Z+1, r1	; 0x01
    cfa0:	10 82       	st	Z, r1
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    cfa2:	c8 01       	movw	r24, r16
    cfa4:	0e 94 98 50 	call	0xa130	; 0xa130 <shoot_pressed>
    cfa8:	88 23       	and	r24, r24
    cfaa:	09 f4       	brne	.+2      	; 0xcfae <update_player+0x130>
    cfac:	42 c0       	rjmp	.+132    	; 0xd032 <update_player+0x1b4>
    cfae:	8c 81       	ldd	r24, Y+4	; 0x04
    cfb0:	81 11       	cpse	r24, r1
    cfb2:	3f c0       	rjmp	.+126    	; 0xd032 <update_player+0x1b4>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    cfb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    cfb6:	81 11       	cpse	r24, r1
    cfb8:	3c c0       	rjmp	.+120    	; 0xd032 <update_player+0x1b4>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    cfba:	7e 01       	movw	r14, r28
    cfbc:	b2 e2       	ldi	r27, 0x22	; 34
    cfbe:	eb 0e       	add	r14, r27
    cfc0:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					send_smart_net_message(player, p, NETSHOOT, 0);
    cfc2:	20 e0       	ldi	r18, 0x00	; 0
    cfc4:	42 e0       	ldi	r20, 0x02	; 2
    cfc6:	b8 01       	movw	r22, r16
    cfc8:	ce 01       	movw	r24, r28
    cfca:	0e 94 3a 63 	call	0xc674	; 0xc674 <send_smart_net_message>
					if (player->has_rocket)
    cfce:	8e 85       	ldd	r24, Y+14	; 0x0e
    cfd0:	88 23       	and	r24, r24
    cfd2:	51 f0       	breq	.+20     	; 0xcfe8 <update_player+0x16a>
					{
						init_shot_state(shot, ROCKET_SHOT);
    cfd4:	61 e0       	ldi	r22, 0x01	; 1
    cfd6:	c7 01       	movw	r24, r14
    cfd8:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    cfdc:	61 e0       	ldi	r22, 0x01	; 1
    cfde:	c7 01       	movw	r24, r14
    cfe0:	0e 94 db 4d 	call	0x9bb6	; 0x9bb6 <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ROCKET);
    cfe4:	25 e0       	ldi	r18, 0x05	; 5
    cfe6:	09 c0       	rjmp	.+18     	; 0xcffa <update_player+0x17c>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    cfe8:	60 e0       	ldi	r22, 0x00	; 0
    cfea:	c7 01       	movw	r24, r14
    cfec:	0e 94 c1 4d 	call	0x9b82	; 0x9b82 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    cff0:	60 e0       	ldi	r22, 0x00	; 0
    cff2:	c7 01       	movw	r24, r14
    cff4:	0e 94 db 4d 	call	0x9bb6	; 0x9bb6 <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    cff8:	21 e0       	ldi	r18, 0x01	; 1
    cffa:	40 91 28 0f 	lds	r20, 0x0F28
    cffe:	60 91 b2 0b 	lds	r22, 0x0BB2
    d002:	80 91 89 0b 	lds	r24, 0x0B89
    d006:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
					}
					player->active_shots = 1;
    d00a:	dd 24       	eor	r13, r13
    d00c:	d3 94       	inc	r13
    d00e:	dc 82       	std	Y+4, r13	; 0x04
					shot->shared.direction = player->netMessage.shared.direction;
    d010:	fe 01       	movw	r30, r28
    d012:	ee 58       	subi	r30, 0x8E	; 142
    d014:	ff 4f       	sbci	r31, 0xFF	; 255
    d016:	80 81       	ld	r24, Z
    d018:	8a a3       	std	Y+34, r24	; 0x22
					position_shot(player, shot);
    d01a:	b7 01       	movw	r22, r14
    d01c:	ce 01       	movw	r24, r28
    d01e:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <position_shot>
					shot->active = 1;
    d022:	dd a6       	std	Y+45, r13	; 0x2d
					if (player->has_over_speed)
    d024:	8f 85       	ldd	r24, Y+15	; 0x0f
    d026:	88 23       	and	r24, r24
    d028:	21 f0       	breq	.+8      	; 0xd032 <update_player+0x1b4>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d02a:	88 e6       	ldi	r24, 0x68	; 104
    d02c:	92 e4       	ldi	r25, 0x42	; 66
    d02e:	9c a3       	std	Y+36, r25	; 0x24
    d030:	8b a3       	std	Y+35, r24	; 0x23
				}
			}
		}
	}
	
	if (!game.paused)
    d032:	80 91 78 0b 	lds	r24, 0x0B78
    d036:	81 11       	cpse	r24, r1
    d038:	57 c0       	rjmp	.+174    	; 0xd0e8 <update_player+0x26a>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d03a:	8e 01       	movw	r16, r28
    d03c:	0e 5d       	subi	r16, 0xDE	; 222
    d03e:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d040:	8d a5       	ldd	r24, Y+45	; 0x2d
    d042:	88 23       	and	r24, r24
    d044:	09 f4       	brne	.+2      	; 0xd048 <update_player+0x1ca>
    d046:	6d c0       	rjmp	.+218    	; 0xd122 <update_player+0x2a4>
			{
				switch (shot->shared.direction)
    d048:	8a a1       	ldd	r24, Y+34	; 0x22
    d04a:	81 30       	cpi	r24, 0x01	; 1
    d04c:	d9 f0       	breq	.+54     	; 0xd084 <update_player+0x206>
    d04e:	78 f0       	brcs	.+30     	; 0xd06e <update_player+0x1f0>
    d050:	82 30       	cpi	r24, 0x02	; 2
    d052:	19 f1       	breq	.+70     	; 0xd09a <update_player+0x21c>
    d054:	83 30       	cpi	r24, 0x03	; 3
    d056:	59 f5       	brne	.+86     	; 0xd0ae <update_player+0x230>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d058:	b8 01       	movw	r22, r16
    d05a:	ce 01       	movw	r24, r28
    d05c:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    d060:	2e a1       	ldd	r18, Y+38	; 0x26
    d062:	3f a1       	ldd	r19, Y+39	; 0x27
    d064:	28 1b       	sub	r18, r24
    d066:	39 0b       	sbc	r19, r25
    d068:	3f a3       	std	Y+39, r19	; 0x27
    d06a:	2e a3       	std	Y+38, r18	; 0x26
    d06c:	20 c0       	rjmp	.+64     	; 0xd0ae <update_player+0x230>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d06e:	b8 01       	movw	r22, r16
    d070:	ce 01       	movw	r24, r28
    d072:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    d076:	28 a5       	ldd	r18, Y+40	; 0x28
    d078:	39 a5       	ldd	r19, Y+41	; 0x29
    d07a:	28 1b       	sub	r18, r24
    d07c:	39 0b       	sbc	r19, r25
    d07e:	39 a7       	std	Y+41, r19	; 0x29
    d080:	28 a7       	std	Y+40, r18	; 0x28
    d082:	15 c0       	rjmp	.+42     	; 0xd0ae <update_player+0x230>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d084:	b8 01       	movw	r22, r16
    d086:	ce 01       	movw	r24, r28
    d088:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    d08c:	2e a1       	ldd	r18, Y+38	; 0x26
    d08e:	3f a1       	ldd	r19, Y+39	; 0x27
    d090:	82 0f       	add	r24, r18
    d092:	93 1f       	adc	r25, r19
    d094:	9f a3       	std	Y+39, r25	; 0x27
    d096:	8e a3       	std	Y+38, r24	; 0x26
    d098:	0a c0       	rjmp	.+20     	; 0xd0ae <update_player+0x230>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d09a:	b8 01       	movw	r22, r16
    d09c:	ce 01       	movw	r24, r28
    d09e:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    d0a2:	28 a5       	ldd	r18, Y+40	; 0x28
    d0a4:	39 a5       	ldd	r19, Y+41	; 0x29
    d0a6:	82 0f       	add	r24, r18
    d0a8:	93 1f       	adc	r25, r19
    d0aa:	99 a7       	std	Y+41, r25	; 0x29
    d0ac:	88 a7       	std	Y+40, r24	; 0x28
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d0ae:	ee a4       	ldd	r14, Y+46	; 0x2e
    d0b0:	ff a4       	ldd	r15, Y+47	; 0x2f
    d0b2:	e1 e2       	ldi	r30, 0x21	; 33
    d0b4:	ee 16       	cp	r14, r30
    d0b6:	e3 e0       	ldi	r30, 0x03	; 3
    d0b8:	fe 06       	cpc	r15, r30
    d0ba:	28 f4       	brcc	.+10     	; 0xd0c6 <update_player+0x248>
    d0bc:	b8 01       	movw	r22, r16
    d0be:	ce 01       	movw	r24, r28
    d0c0:	0e 94 a2 50 	call	0xa144	; 0xa144 <get_delta>
    d0c4:	02 c0       	rjmp	.+4      	; 0xd0ca <update_player+0x24c>
    d0c6:	80 e0       	ldi	r24, 0x00	; 0
    d0c8:	90 e0       	ldi	r25, 0x00	; 0
    d0ca:	e8 0e       	add	r14, r24
    d0cc:	f9 1e       	adc	r15, r25
    d0ce:	ff a6       	std	Y+47, r15	; 0x2f
    d0d0:	ee a6       	std	Y+46, r14	; 0x2e
				collision_detect_shot(player, shot);
    d0d2:	b8 01       	movw	r22, r16
    d0d4:	ce 01       	movw	r24, r28
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
		}
	}
}
    d0d6:	df 91       	pop	r29
    d0d8:	cf 91       	pop	r28
    d0da:	1f 91       	pop	r17
    d0dc:	0f 91       	pop	r16
    d0de:	ff 90       	pop	r15
    d0e0:	ef 90       	pop	r14
    d0e2:	df 90       	pop	r13
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d0e4:	0c 94 f4 64 	jmp	0xc9e8	; 0xc9e8 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d0e8:	d8 01       	movw	r26, r16
    d0ea:	8d 91       	ld	r24, X+
    d0ec:	9c 91       	ld	r25, X
    d0ee:	91 ff       	sbrs	r25, 1
    d0f0:	18 c0       	rjmp	.+48     	; 0xd122 <update_player+0x2a4>
		{
			send_smart_net_message(player, p, NETEXIT, 1);
    d0f2:	21 e0       	ldi	r18, 0x01	; 1
    d0f4:	48 e0       	ldi	r20, 0x08	; 8
    d0f6:	b8 01       	movw	r22, r16
    d0f8:	ce 01       	movw	r24, r28
    d0fa:	0e 94 3a 63 	call	0xc674	; 0xc674 <send_smart_net_message>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d0fe:	24 e0       	ldi	r18, 0x04	; 4
    d100:	40 91 28 0f 	lds	r20, 0x0F28
    d104:	60 91 b2 0b 	lds	r22, 0x0BB2
    d108:	80 91 89 0b 	lds	r24, 0x0B89
    d10c:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			exit_game();
		}
	}
}
    d110:	df 91       	pop	r29
    d112:	cf 91       	pop	r28
    d114:	1f 91       	pop	r17
    d116:	0f 91       	pop	r16
    d118:	ff 90       	pop	r15
    d11a:	ef 90       	pop	r14
    d11c:	df 90       	pop	r13
	{
		if (p->pressed & BTN_X)
		{
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
    d11e:	0c 94 2c 5a 	jmp	0xb458	; 0xb458 <exit_game>
		}
	}
}
    d122:	df 91       	pop	r29
    d124:	cf 91       	pop	r28
    d126:	1f 91       	pop	r17
    d128:	0f 91       	pop	r16
    d12a:	ff 90       	pop	r15
    d12c:	ef 90       	pop	r14
    d12e:	df 90       	pop	r13
    d130:	08 95       	ret

0000d132 <collision_detect_player>:
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    d132:	2f 92       	push	r2
    d134:	3f 92       	push	r3
    d136:	4f 92       	push	r4
    d138:	5f 92       	push	r5
    d13a:	6f 92       	push	r6
    d13c:	7f 92       	push	r7
    d13e:	8f 92       	push	r8
    d140:	9f 92       	push	r9
    d142:	af 92       	push	r10
    d144:	bf 92       	push	r11
    d146:	cf 92       	push	r12
    d148:	df 92       	push	r13
    d14a:	ef 92       	push	r14
    d14c:	ff 92       	push	r15
    d14e:	0f 93       	push	r16
    d150:	1f 93       	push	r17
    d152:	cf 93       	push	r28
    d154:	df 93       	push	r29
    d156:	cd b7       	in	r28, 0x3d	; 61
    d158:	de b7       	in	r29, 0x3e	; 62
    d15a:	6a 97       	sbiw	r28, 0x1a	; 26
    d15c:	0f b6       	in	r0, 0x3f	; 63
    d15e:	f8 94       	cli
    d160:	de bf       	out	0x3e, r29	; 62
    d162:	0f be       	out	0x3f, r0	; 63
    d164:	cd bf       	out	0x3d, r28	; 61
    d166:	4c 01       	movw	r8, r24
    d168:	36 2f       	mov	r19, r22
	int tiles[3] = {0,0,0};
    d16a:	1a 82       	std	Y+2, r1	; 0x02
    d16c:	19 82       	std	Y+1, r1	; 0x01
    d16e:	1c 82       	std	Y+4, r1	; 0x04
    d170:	1b 82       	std	Y+3, r1	; 0x03
    d172:	1e 82       	std	Y+6, r1	; 0x06
    d174:	1d 82       	std	Y+5, r1	; 0x05
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d176:	1c 01       	movw	r2, r24
    d178:	82 e7       	ldi	r24, 0x72	; 114
    d17a:	28 0e       	add	r2, r24
    d17c:	31 1c       	adc	r3, r1

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    d17e:	d4 01       	movw	r26, r8
    d180:	a8 58       	subi	r26, 0x88	; 136
    d182:	bf 4f       	sbci	r27, 0xFF	; 255
    d184:	bf 87       	std	Y+15, r27	; 0x0f
    d186:	ae 87       	std	Y+14, r26	; 0x0e
    d188:	8d 91       	ld	r24, X+
    d18a:	9c 91       	ld	r25, X
    d18c:	e0 e2       	ldi	r30, 0x20	; 32
    d18e:	f3 e0       	ldi	r31, 0x03	; 3
    d190:	bf 01       	movw	r22, r30
    d192:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    d196:	4d ef       	ldi	r20, 0xFD	; 253
    d198:	46 0f       	add	r20, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
    d19a:	84 01       	movw	r16, r8
    d19c:	0a 58       	subi	r16, 0x8A	; 138
    d19e:	1f 4f       	sbci	r17, 0xFF	; 255
    d1a0:	d8 01       	movw	r26, r16
    d1a2:	8d 91       	ld	r24, X+
    d1a4:	9c 91       	ld	r25, X
    d1a6:	bf 01       	movw	r22, r30
    d1a8:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d1ac:	f1 01       	movw	r30, r2
    d1ae:	20 81       	ld	r18, Z
    d1b0:	ce 01       	movw	r24, r28
    d1b2:	01 96       	adiw	r24, 0x01	; 1
    d1b4:	3a 8f       	std	Y+26, r19	; 0x1a
    d1b6:	0e 94 46 56 	call	0xac8c	; 0xac8c <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d1ba:	c1 01       	movw	r24, r2
    d1bc:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <collision_detect_boundries>
    d1c0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    d1c2:	88 23       	and	r24, r24
    d1c4:	51 f0       	breq	.+20     	; 0xd1da <collision_detect_player+0xa8>
	{
		recoil_sprite(&player->netMessage.shared);
    d1c6:	c1 01       	movw	r24, r2
    d1c8:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
		player->netMessage.shared.speed = 0;
    d1cc:	f4 01       	movw	r30, r8
    d1ce:	ed 58       	subi	r30, 0x8D	; 141
    d1d0:	ff 4f       	sbci	r31, 0xFF	; 255
    d1d2:	11 82       	std	Z+1, r1	; 0x01
    d1d4:	10 82       	st	Z, r1
		return explode;
    d1d6:	1a 8a       	std	Y+18, r1	; 0x12
    d1d8:	77 c1       	rjmp	.+750    	; 0xd4c8 <collision_detect_player+0x396>
    d1da:	ce 01       	movw	r24, r28
    d1dc:	01 96       	adiw	r24, 0x01	; 1
    d1de:	98 87       	std	Y+8, r25	; 0x08
    d1e0:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d1e2:	1d 86       	std	Y+13, r1	; 0x0d
    d1e4:	1c 86       	std	Y+12, r1	; 0x0c
    d1e6:	1b 86       	std	Y+11, r1	; 0x0b
    d1e8:	1a 8a       	std	Y+18, r1	; 0x12
    d1ea:	1b 8a       	std	Y+19, r1	; 0x13
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d1ec:	9b e0       	ldi	r25, 0x0B	; 11
    d1ee:	93 0f       	add	r25, r19
    d1f0:	98 8f       	std	Y+24, r25	; 0x18
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d1f2:	36 5f       	subi	r19, 0xF6	; 246
    d1f4:	39 8f       	std	Y+25, r19	; 0x19
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d1f6:	50 e2       	ldi	r21, 0x20	; 32
    d1f8:	45 2e       	mov	r4, r21
    d1fa:	53 e0       	ldi	r21, 0x03	; 3
    d1fc:	55 2e       	mov	r5, r21
    d1fe:	19 8b       	std	Y+17, r17	; 0x11
    d200:	08 8b       	std	Y+16, r16	; 0x10
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
			player->netMessage.shared.speed = 0;
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d202:	ae 85       	ldd	r26, Y+14	; 0x0e
    d204:	bf 85       	ldd	r27, Y+15	; 0x0f
    d206:	bd 8b       	std	Y+21, r27	; 0x15
    d208:	ac 8b       	std	Y+20, r26	; 0x14
		{
			collision_count++;
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d20a:	f4 01       	movw	r30, r8
    d20c:	ed 58       	subi	r30, 0x8D	; 141
    d20e:	ff 4f       	sbci	r31, 0xFF	; 255
    d210:	ff 8b       	std	Y+23, r31	; 0x17
    d212:	ee 8b       	std	Y+22, r30	; 0x16
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    d214:	af 81       	ldd	r26, Y+7	; 0x07
    d216:	b8 85       	ldd	r27, Y+8	; 0x08
    d218:	0d 90       	ld	r0, X+
    d21a:	bc 91       	ld	r27, X
    d21c:	a0 2d       	mov	r26, r0
    d21e:	ba 87       	std	Y+10, r27	; 0x0a
    d220:	a9 87       	std	Y+9, r26	; 0x09
    d222:	cd 01       	movw	r24, r26
    d224:	6e e1       	ldi	r22, 0x1E	; 30
    d226:	70 e0       	ldi	r23, 0x00	; 0
    d228:	0e 94 83 70 	call	0xe106	; 0xe106 <__divmodhi4>
    d22c:	68 2e       	mov	r6, r24
		tile_y = 3 + tiles[i] / 30;
    d22e:	43 e0       	ldi	r20, 0x03	; 3
    d230:	74 2e       	mov	r7, r20
    d232:	76 0e       	add	r7, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
    d234:	89 85       	ldd	r24, Y+9	; 0x09
    d236:	9a 85       	ldd	r25, Y+10	; 0x0a
    d238:	0e 94 a0 52 	call	0xa540	; 0xa540 <solid_directional_tile>
    d23c:	88 23       	and	r24, r24
    d23e:	19 f1       	breq	.+70     	; 0xd286 <collision_detect_player+0x154>
    d240:	ec 89       	ldd	r30, Y+20	; 0x14
    d242:	fd 89       	ldd	r31, Y+21	; 0x15
    d244:	40 81       	ld	r20, Z
    d246:	51 81       	ldd	r21, Z+1	; 0x01
    d248:	a8 89       	ldd	r26, Y+16	; 0x10
    d24a:	b9 89       	ldd	r27, Y+17	; 0x11
    d24c:	6d 91       	ld	r22, X+
    d24e:	7c 91       	ld	r23, X
    d250:	00 e4       	ldi	r16, 0x40	; 64
    d252:	16 e0       	ldi	r17, 0x06	; 6
    d254:	20 e4       	ldi	r18, 0x40	; 64
    d256:	36 e0       	ldi	r19, 0x06	; 6
    d258:	89 85       	ldd	r24, Y+9	; 0x09
    d25a:	9a 85       	ldd	r25, Y+10	; 0x0a
    d25c:	0e 94 ca 52 	call	0xa594	; 0xa594 <collides_directional_tile>
    d260:	88 23       	and	r24, r24
    d262:	89 f0       	breq	.+34     	; 0xd286 <collision_detect_player+0x154>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
    d264:	f4 01       	movw	r30, r8
    d266:	80 81       	ld	r24, Z
    d268:	89 30       	cpi	r24, 0x09	; 9
    d26a:	21 f4       	brne	.+8      	; 0xd274 <collision_detect_player+0x142>
    d26c:	c1 01       	movw	r24, r2
    d26e:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
    d272:	04 c0       	rjmp	.+8      	; 0xd27c <collision_detect_player+0x14a>
    d274:	b1 01       	movw	r22, r2
    d276:	c4 01       	movw	r24, r8
    d278:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <recoil_sprite_fine>
			player->netMessage.shared.speed = 0;
    d27c:	ae 89       	ldd	r26, Y+22	; 0x16
    d27e:	bf 89       	ldd	r27, Y+23	; 0x17
    d280:	1d 92       	st	X+, r1
    d282:	1c 92       	st	X, r1
    d284:	e9 c0       	rjmp	.+466    	; 0xd458 <collision_detect_player+0x326>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d286:	89 85       	ldd	r24, Y+9	; 0x09
    d288:	9a 85       	ldd	r25, Y+10	; 0x0a
    d28a:	0e 94 8e 52 	call	0xa51c	; 0xa51c <solid_square_tile>
    d28e:	88 23       	and	r24, r24
    d290:	61 f1       	breq	.+88     	; 0xd2ea <collision_detect_player+0x1b8>
    d292:	74 9c       	mul	r7, r4
    d294:	70 01       	movw	r14, r0
    d296:	75 9c       	mul	r7, r5
    d298:	f0 0c       	add	r15, r0
    d29a:	11 24       	eor	r1, r1
    d29c:	64 9c       	mul	r6, r4
    d29e:	80 01       	movw	r16, r0
    d2a0:	65 9c       	mul	r6, r5
    d2a2:	10 0d       	add	r17, r0
    d2a4:	11 24       	eor	r1, r1
    d2a6:	ec 89       	ldd	r30, Y+20	; 0x14
    d2a8:	fd 89       	ldd	r31, Y+21	; 0x15
    d2aa:	60 81       	ld	r22, Z
    d2ac:	71 81       	ldd	r23, Z+1	; 0x01
    d2ae:	20 e2       	ldi	r18, 0x20	; 32
    d2b0:	a2 2e       	mov	r10, r18
    d2b2:	23 e0       	ldi	r18, 0x03	; 3
    d2b4:	b2 2e       	mov	r11, r18
    d2b6:	30 e2       	ldi	r19, 0x20	; 32
    d2b8:	c3 2e       	mov	r12, r19
    d2ba:	33 e0       	ldi	r19, 0x03	; 3
    d2bc:	d3 2e       	mov	r13, r19
    d2be:	20 e4       	ldi	r18, 0x40	; 64
    d2c0:	36 e0       	ldi	r19, 0x06	; 6
    d2c2:	40 e4       	ldi	r20, 0x40	; 64
    d2c4:	56 e0       	ldi	r21, 0x06	; 6
    d2c6:	a8 89       	ldd	r26, Y+16	; 0x10
    d2c8:	b9 89       	ldd	r27, Y+17	; 0x11
    d2ca:	8d 91       	ld	r24, X+
    d2cc:	9c 91       	ld	r25, X
    d2ce:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
    d2d2:	88 23       	and	r24, r24
    d2d4:	51 f0       	breq	.+20     	; 0xd2ea <collision_detect_player+0x1b8>
		{
			collision_count++;
    d2d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    d2d8:	bf 5f       	subi	r27, 0xFF	; 255
    d2da:	bc 87       	std	Y+12, r27	; 0x0c
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d2dc:	ee 89       	ldd	r30, Y+22	; 0x16
    d2de:	ff 89       	ldd	r31, Y+23	; 0x17
    d2e0:	11 82       	std	Z+1, r1	; 0x01
    d2e2:	10 82       	st	Z, r1
    d2e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    d2e6:	fb 87       	std	Y+11, r31	; 0x0b
    d2e8:	b7 c0       	rjmp	.+366    	; 0xd458 <collision_detect_player+0x326>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d2ea:	e9 85       	ldd	r30, Y+9	; 0x09
    d2ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    d2ee:	e1 5d       	subi	r30, 0xD1	; 209
    d2f0:	f3 4f       	sbci	r31, 0xF3	; 243
    d2f2:	81 81       	ldd	r24, Z+1	; 0x01
    d2f4:	8d 34       	cpi	r24, 0x4D	; 77
    d2f6:	69 f5       	brne	.+90     	; 0xd352 <collision_detect_player+0x220>
    d2f8:	74 9c       	mul	r7, r4
    d2fa:	70 01       	movw	r14, r0
    d2fc:	75 9c       	mul	r7, r5
    d2fe:	f0 0c       	add	r15, r0
    d300:	11 24       	eor	r1, r1
    d302:	64 9c       	mul	r6, r4
    d304:	80 01       	movw	r16, r0
    d306:	65 9c       	mul	r6, r5
    d308:	10 0d       	add	r17, r0
    d30a:	11 24       	eor	r1, r1
    d30c:	ae 85       	ldd	r26, Y+14	; 0x0e
    d30e:	bf 85       	ldd	r27, Y+15	; 0x0f
    d310:	6d 91       	ld	r22, X+
    d312:	7c 91       	ld	r23, X
    d314:	80 e2       	ldi	r24, 0x20	; 32
    d316:	a8 2e       	mov	r10, r24
    d318:	83 e0       	ldi	r24, 0x03	; 3
    d31a:	b8 2e       	mov	r11, r24
    d31c:	90 e2       	ldi	r25, 0x20	; 32
    d31e:	c9 2e       	mov	r12, r25
    d320:	93 e0       	ldi	r25, 0x03	; 3
    d322:	d9 2e       	mov	r13, r25
    d324:	20 e4       	ldi	r18, 0x40	; 64
    d326:	36 e0       	ldi	r19, 0x06	; 6
    d328:	40 e4       	ldi	r20, 0x40	; 64
    d32a:	56 e0       	ldi	r21, 0x06	; 6
    d32c:	e8 89       	ldd	r30, Y+16	; 0x10
    d32e:	f9 89       	ldd	r31, Y+17	; 0x11
    d330:	80 81       	ld	r24, Z
    d332:	91 81       	ldd	r25, Z+1	; 0x01
    d334:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <LBCollides>
    d338:	88 23       	and	r24, r24
    d33a:	09 f4       	brne	.+2      	; 0xd33e <collision_detect_player+0x20c>
    d33c:	8d c0       	rjmp	.+282    	; 0xd458 <collision_detect_player+0x326>
		{
			player->max_speed = WATER_SPEED;
    d33e:	e4 ec       	ldi	r30, 0xC4	; 196
    d340:	f9 e0       	ldi	r31, 0x09	; 9
    d342:	d4 01       	movw	r26, r8
    d344:	1d 96       	adiw	r26, 0x0d	; 13
    d346:	fc 93       	st	X, r31
    d348:	ee 93       	st	-X, r30
    d34a:	1c 97       	sbiw	r26, 0x0c	; 12
    d34c:	f1 e0       	ldi	r31, 0x01	; 1
    d34e:	fb 8b       	std	Y+19, r31	; 0x13
    d350:	9b c0       	rjmp	.+310    	; 0xd488 <collision_detect_player+0x356>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d352:	8c 32       	cpi	r24, 0x2C	; 44
    d354:	89 f2       	breq	.-94     	; 0xd2f8 <collision_detect_player+0x1c6>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d356:	87 30       	cpi	r24, 0x07	; 7
    d358:	19 f5       	brne	.+70     	; 0xd3a0 <collision_detect_player+0x26e>
    d35a:	d4 01       	movw	r26, r8
    d35c:	1a 96       	adiw	r26, 0x0a	; 10
    d35e:	8c 91       	ld	r24, X
    d360:	80 fd       	sbrc	r24, 0
    d362:	7a c0       	rjmp	.+244    	; 0xd458 <collision_detect_player+0x326>
    d364:	c4 01       	movw	r24, r8
    d366:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    d36a:	81 11       	cpse	r24, r1
    d36c:	75 c0       	rjmp	.+234    	; 0xd458 <collision_detect_player+0x326>
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
    d36e:	21 e0       	ldi	r18, 0x01	; 1
    d370:	47 2d       	mov	r20, r7
    d372:	66 2d       	mov	r22, r6
    d374:	83 e0       	ldi	r24, 0x03	; 3
    d376:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d37a:	af 81       	ldd	r26, Y+7	; 0x07
    d37c:	b8 85       	ldd	r27, Y+8	; 0x08
    d37e:	ed 91       	ld	r30, X+
    d380:	fc 91       	ld	r31, X
    d382:	e1 5d       	subi	r30, 0xD1	; 209
    d384:	f3 4f       	sbci	r31, 0xF3	; 243
    d386:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    d388:	84 e6       	ldi	r24, 0x64	; 100
    d38a:	99 e1       	ldi	r25, 0x19	; 25
    d38c:	f4 01       	movw	r30, r8
    d38e:	95 87       	std	Z+13, r25	; 0x0d
    d390:	84 87       	std	Z+12, r24	; 0x0c
			player->has_over_speed = true;
    d392:	91 e0       	ldi	r25, 0x01	; 1
    d394:	97 87       	std	Z+15, r25	; 0x0f
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d396:	41 ec       	ldi	r20, 0xC1	; 193
    d398:	5a e6       	ldi	r21, 0x6A	; 106
    d39a:	61 e0       	ldi	r22, 0x01	; 1
    d39c:	89 8d       	ldd	r24, Y+25	; 0x19
    d39e:	20 c0       	rjmp	.+64     	; 0xd3e0 <collision_detect_player+0x2ae>
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d3a0:	89 30       	cpi	r24, 0x09	; 9
    d3a2:	81 f5       	brne	.+96     	; 0xd404 <collision_detect_player+0x2d2>
    d3a4:	d4 01       	movw	r26, r8
    d3a6:	1a 96       	adiw	r26, 0x0a	; 10
    d3a8:	8c 91       	ld	r24, X
    d3aa:	80 fd       	sbrc	r24, 0
    d3ac:	55 c0       	rjmp	.+170    	; 0xd458 <collision_detect_player+0x326>
    d3ae:	c4 01       	movw	r24, r8
    d3b0:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    d3b4:	81 11       	cpse	r24, r1
    d3b6:	50 c0       	rjmp	.+160    	; 0xd458 <collision_detect_player+0x326>
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
    d3b8:	21 e0       	ldi	r18, 0x01	; 1
    d3ba:	47 2d       	mov	r20, r7
    d3bc:	66 2d       	mov	r22, r6
    d3be:	84 e0       	ldi	r24, 0x04	; 4
    d3c0:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d3c4:	af 81       	ldd	r26, Y+7	; 0x07
    d3c6:	b8 85       	ldd	r27, Y+8	; 0x08
    d3c8:	ed 91       	ld	r30, X+
    d3ca:	fc 91       	ld	r31, X
    d3cc:	e1 5d       	subi	r30, 0xD1	; 209
    d3ce:	f3 4f       	sbci	r31, 0xF3	; 243
    d3d0:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    d3d2:	81 e0       	ldi	r24, 0x01	; 1
    d3d4:	f4 01       	movw	r30, r8
    d3d6:	86 87       	std	Z+14, r24	; 0x0e
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d3d8:	4b eb       	ldi	r20, 0xBB	; 187
    d3da:	5a e6       	ldi	r21, 0x6A	; 106
    d3dc:	61 e0       	ldi	r22, 0x01	; 1
    d3de:	88 8d       	ldd	r24, Y+24	; 0x18
    d3e0:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
			SetTile(tile_x, tile_y, 0);
    d3e4:	40 e0       	ldi	r20, 0x00	; 0
    d3e6:	50 e0       	ldi	r21, 0x00	; 0
    d3e8:	67 2d       	mov	r22, r7
    d3ea:	86 2d       	mov	r24, r6
    d3ec:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d3f0:	22 e0       	ldi	r18, 0x02	; 2
    d3f2:	40 91 28 0f 	lds	r20, 0x0F28
    d3f6:	60 91 b2 0b 	lds	r22, 0x0BB2
    d3fa:	80 91 89 0b 	lds	r24, 0x0B89
    d3fe:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
    d402:	2a c0       	rjmp	.+84     	; 0xd458 <collision_detect_player+0x326>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d404:	88 30       	cpi	r24, 0x08	; 8
    d406:	41 f5       	brne	.+80     	; 0xd458 <collision_detect_player+0x326>
    d408:	d4 01       	movw	r26, r8
    d40a:	1a 96       	adiw	r26, 0x0a	; 10
    d40c:	8c 91       	ld	r24, X
    d40e:	80 fd       	sbrc	r24, 0
    d410:	23 c0       	rjmp	.+70     	; 0xd458 <collision_detect_player+0x326>
    d412:	c4 01       	movw	r24, r8
    d414:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    d418:	81 11       	cpse	r24, r1
    d41a:	1e c0       	rjmp	.+60     	; 0xd458 <collision_detect_player+0x326>
		{
			send_net_message(NETITEMBOMB, tile_x, tile_y, 1);
    d41c:	21 e0       	ldi	r18, 0x01	; 1
    d41e:	47 2d       	mov	r20, r7
    d420:	66 2d       	mov	r22, r6
    d422:	85 e0       	ldi	r24, 0x05	; 5
    d424:	0e 94 25 63 	call	0xc64a	; 0xc64a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d428:	af 81       	ldd	r26, Y+7	; 0x07
    d42a:	b8 85       	ldd	r27, Y+8	; 0x08
    d42c:	ed 91       	ld	r30, X+
    d42e:	fc 91       	ld	r31, X
    d430:	e1 5d       	subi	r30, 0xD1	; 209
    d432:	f3 4f       	sbci	r31, 0xF3	; 243
    d434:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    d436:	40 e0       	ldi	r20, 0x00	; 0
    d438:	50 e0       	ldi	r21, 0x00	; 0
    d43a:	67 2d       	mov	r22, r7
    d43c:	86 2d       	mov	r24, r6
    d43e:	0e 94 4e 3a 	call	0x749c	; 0x749c <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d442:	22 e0       	ldi	r18, 0x02	; 2
    d444:	40 91 28 0f 	lds	r20, 0x0F28
    d448:	60 91 b2 0b 	lds	r22, 0x0BB2
    d44c:	80 91 89 0b 	lds	r24, 0x0B89
    d450:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
			explode = 1;
    d454:	b1 e0       	ldi	r27, 0x01	; 1
    d456:	ba 8b       	std	Y+18, r27	; 0x12
		}
		
		if (!hit_water)
    d458:	eb 89       	ldd	r30, Y+19	; 0x13
    d45a:	e1 11       	cpse	r30, r1
    d45c:	13 c0       	rjmp	.+38     	; 0xd484 <collision_detect_player+0x352>
		{
			player->max_speed = MAX_SPEED;
    d45e:	e8 e8       	ldi	r30, 0x88	; 136
    d460:	f3 e1       	ldi	r31, 0x13	; 19
    d462:	d4 01       	movw	r26, r8
    d464:	1d 96       	adiw	r26, 0x0d	; 13
    d466:	fc 93       	st	X, r31
    d468:	ee 93       	st	-X, r30
    d46a:	1c 97       	sbiw	r26, 0x0c	; 12
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    d46c:	1f 96       	adiw	r26, 0x0f	; 15
    d46e:	8c 91       	ld	r24, X
    d470:	1f 97       	sbiw	r26, 0x0f	; 15
    d472:	88 23       	and	r24, r24
    d474:	49 f0       	breq	.+18     	; 0xd488 <collision_detect_player+0x356>
    d476:	84 e6       	ldi	r24, 0x64	; 100
    d478:	99 e1       	ldi	r25, 0x19	; 25
    d47a:	1d 96       	adiw	r26, 0x0d	; 13
    d47c:	9c 93       	st	X, r25
    d47e:	8e 93       	st	-X, r24
    d480:	1c 97       	sbiw	r26, 0x0c	; 12
    d482:	02 c0       	rjmp	.+4      	; 0xd488 <collision_detect_player+0x356>
    d484:	91 e0       	ldi	r25, 0x01	; 1
    d486:	9b 8b       	std	Y+19, r25	; 0x13
		player->netMessage.shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    d488:	ad 85       	ldd	r26, Y+13	; 0x0d
    d48a:	af 5f       	subi	r26, 0xFF	; 255
    d48c:	ad 87       	std	Y+13, r26	; 0x0d
    d48e:	ef 81       	ldd	r30, Y+7	; 0x07
    d490:	f8 85       	ldd	r31, Y+8	; 0x08
    d492:	32 96       	adiw	r30, 0x02	; 2
    d494:	f8 87       	std	Y+8, r31	; 0x08
    d496:	ef 83       	std	Y+7, r30	; 0x07
    d498:	a3 30       	cpi	r26, 0x03	; 3
    d49a:	09 f0       	breq	.+2      	; 0xd49e <collision_detect_player+0x36c>
    d49c:	bb ce       	rjmp	.-650    	; 0xd214 <collision_detect_player+0xe2>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->netMessage.shared);
    d49e:	fc 85       	ldd	r31, Y+12	; 0x0c
    d4a0:	ff 23       	and	r31, r31
    d4a2:	91 f0       	breq	.+36     	; 0xd4c8 <collision_detect_player+0x396>
    d4a4:	c1 01       	movw	r24, r2
    d4a6:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
	if (collision_count == 1)
    d4aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    d4ac:	81 30       	cpi	r24, 0x01	; 1
    d4ae:	61 f4       	brne	.+24     	; 0xd4c8 <collision_detect_player+0x396>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    d4b0:	fe 01       	movw	r30, r28
    d4b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    d4b4:	e9 0f       	add	r30, r25
    d4b6:	f1 1d       	adc	r31, r1
    d4b8:	e9 0f       	add	r30, r25
    d4ba:	f1 1d       	adc	r31, r1
    d4bc:	41 81       	ldd	r20, Z+1	; 0x01
    d4be:	52 81       	ldd	r21, Z+2	; 0x02
    d4c0:	69 2f       	mov	r22, r25
    d4c2:	c4 01       	movw	r24, r8
    d4c4:	0e 94 9a 56 	call	0xad34	; 0xad34 <slide>
	}
	return explode;
}
    d4c8:	8a 89       	ldd	r24, Y+18	; 0x12
    d4ca:	6a 96       	adiw	r28, 0x1a	; 26
    d4cc:	0f b6       	in	r0, 0x3f	; 63
    d4ce:	f8 94       	cli
    d4d0:	de bf       	out	0x3e, r29	; 62
    d4d2:	0f be       	out	0x3f, r0	; 63
    d4d4:	cd bf       	out	0x3d, r28	; 61
    d4d6:	df 91       	pop	r29
    d4d8:	cf 91       	pop	r28
    d4da:	1f 91       	pop	r17
    d4dc:	0f 91       	pop	r16
    d4de:	ff 90       	pop	r15
    d4e0:	ef 90       	pop	r14
    d4e2:	df 90       	pop	r13
    d4e4:	cf 90       	pop	r12
    d4e6:	bf 90       	pop	r11
    d4e8:	af 90       	pop	r10
    d4ea:	9f 90       	pop	r9
    d4ec:	8f 90       	pop	r8
    d4ee:	7f 90       	pop	r7
    d4f0:	6f 90       	pop	r6
    d4f2:	5f 90       	pop	r5
    d4f4:	4f 90       	pop	r4
    d4f6:	3f 90       	pop	r3
    d4f8:	2f 90       	pop	r2
    d4fa:	08 95       	ret

0000d4fc <update_turret_shot>:
		}
	}
}

void update_turret_shot(Turret* t, Shot* s)
{	
    d4fc:	0f 93       	push	r16
    d4fe:	1f 93       	push	r17
    d500:	cf 93       	push	r28
    d502:	df 93       	push	r29
    d504:	fc 01       	movw	r30, r24
    d506:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d508:	80 85       	ldd	r24, Z+8	; 0x08
    d50a:	81 11       	cpse	r24, r1
    d50c:	02 c0       	rjmp	.+4      	; 0xd512 <update_turret_shot+0x16>
	{
		s->active = 0;
    d50e:	1b 86       	std	Y+11, r1	; 0x0b
		return;
    d510:	59 c0       	rjmp	.+178    	; 0xd5c4 <update_turret_shot+0xc8>
	}
	if (!s->active)
    d512:	8b 85       	ldd	r24, Y+11	; 0x0b
    d514:	81 11       	cpse	r24, r1
    d516:	17 c0       	rjmp	.+46     	; 0xd546 <update_turret_shot+0x4a>
	{
		s->active = 1;
    d518:	81 e0       	ldi	r24, 0x01	; 1
    d51a:	8b 87       	std	Y+11, r24	; 0x0b
		s->shared.x = t->shared.x+300;
    d51c:	84 81       	ldd	r24, Z+4	; 0x04
    d51e:	95 81       	ldd	r25, Z+5	; 0x05
    d520:	84 5d       	subi	r24, 0xD4	; 212
    d522:	9e 4f       	sbci	r25, 0xFE	; 254
    d524:	9d 83       	std	Y+5, r25	; 0x05
    d526:	8c 83       	std	Y+4, r24	; 0x04
		s->shared.y = t->shared.y+300;
    d528:	86 81       	ldd	r24, Z+6	; 0x06
    d52a:	97 81       	ldd	r25, Z+7	; 0x07
    d52c:	84 5d       	subi	r24, 0xD4	; 212
    d52e:	9e 4f       	sbci	r25, 0xFE	; 254
    d530:	9f 83       	std	Y+7, r25	; 0x07
    d532:	8e 83       	std	Y+6, r24	; 0x06
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    d534:	21 e0       	ldi	r18, 0x01	; 1
    d536:	40 91 28 0f 	lds	r20, 0x0F28
    d53a:	60 91 b2 0b 	lds	r22, 0x0BB2
    d53e:	80 91 89 0b 	lds	r24, 0x0B89
    d542:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
	}
	s->shared.y += BOSS_TURRET_SHOT_SPEED / FRAME_TIME_INVERTED;
    d546:	8e 81       	ldd	r24, Y+6	; 0x06
    d548:	9f 81       	ldd	r25, Y+7	; 0x07
    d54a:	9c 01       	movw	r18, r24
    d54c:	20 56       	subi	r18, 0x60	; 96
    d54e:	3e 4f       	sbci	r19, 0xFE	; 254
    d550:	3f 83       	std	Y+7, r19	; 0x07
    d552:	2e 83       	std	Y+6, r18	; 0x06
	
	/* Level boundries first */
	if (s->shared.y + 800 > 21600)
    d554:	80 54       	subi	r24, 0x40	; 64
    d556:	9b 4f       	sbci	r25, 0xFB	; 251
    d558:	81 36       	cpi	r24, 0x61	; 97
    d55a:	94 45       	sbci	r25, 0x54	; 84
    d55c:	c0 f6       	brcc	.-80     	; 0xd50e <update_turret_shot+0x12>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG) && !is_net_player(game.boss_fight_player))
    d55e:	00 91 85 0b 	lds	r16, 0x0B85
    d562:	10 91 86 0b 	lds	r17, 0x0B86
    d566:	be 01       	movw	r22, r28
    d568:	c8 01       	movw	r24, r16
    d56a:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    d56e:	88 23       	and	r24, r24
    d570:	49 f1       	breq	.+82     	; 0xd5c4 <update_turret_shot+0xc8>
    d572:	f8 01       	movw	r30, r16
    d574:	82 85       	ldd	r24, Z+10	; 0x0a
    d576:	80 fd       	sbrc	r24, 0
    d578:	25 c0       	rjmp	.+74     	; 0xd5c4 <update_turret_shot+0xc8>
    d57a:	c8 01       	movw	r24, r16
    d57c:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    d580:	81 11       	cpse	r24, r1
    d582:	20 c0       	rjmp	.+64     	; 0xd5c4 <update_turret_shot+0xc8>
	{
		game.boss_fight_player_lives--;
    d584:	80 91 7b 0b 	lds	r24, 0x0B7B
    d588:	81 50       	subi	r24, 0x01	; 1
    d58a:	80 93 7b 0b 	sts	0x0B7B, r24
		if (game.boss_fight_player_lives <= 0)
    d58e:	81 11       	cpse	r24, r1
    d590:	03 c0       	rjmp	.+6      	; 0xd598 <update_turret_shot+0x9c>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d592:	80 e1       	ldi	r24, 0x10	; 16
    d594:	80 93 79 0b 	sts	0x0B79, r24
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d598:	60 91 7a 0b 	lds	r22, 0x0B7A
    d59c:	c8 01       	movw	r24, r16
    d59e:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    d5a2:	86 e0       	ldi	r24, 0x06	; 6
    d5a4:	0e 94 8a 49 	call	0x9314	; 0x9314 <LBPlaySound.part.2>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d5a8:	21 e0       	ldi	r18, 0x01	; 1
    d5aa:	80 91 7b 0b 	lds	r24, 0x0B7B
    d5ae:	81 11       	cpse	r24, r1
    d5b0:	20 e0       	ldi	r18, 0x00	; 0
    d5b2:	40 e0       	ldi	r20, 0x00	; 0
    d5b4:	60 e0       	ldi	r22, 0x00	; 0
    d5b6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    d5b8:	df 91       	pop	r29
    d5ba:	cf 91       	pop	r28
    d5bc:	1f 91       	pop	r17
    d5be:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d5c0:	0c 94 25 63 	jmp	0xc64a	; 0xc64a <send_net_message>
	}
}
    d5c4:	df 91       	pop	r29
    d5c6:	cf 91       	pop	r28
    d5c8:	1f 91       	pop	r17
    d5ca:	0f 91       	pop	r16
    d5cc:	08 95       	ret

0000d5ce <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d5ce:	df 92       	push	r13
    d5d0:	ef 92       	push	r14
    d5d2:	ff 92       	push	r15
    d5d4:	0f 93       	push	r16
    d5d6:	1f 93       	push	r17
    d5d8:	cf 93       	push	r28
    d5da:	df 93       	push	r29
    d5dc:	8c 01       	movw	r16, r24
    d5de:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    d5e0:	80 91 78 0b 	lds	r24, 0x0B78
    d5e4:	88 23       	and	r24, r24
    d5e6:	19 f1       	breq	.+70     	; 0xd62e <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    d5e8:	0e 94 ad 4a 	call	0x955a	; 0x955a <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    d5ec:	40 e2       	ldi	r20, 0x20	; 32
    d5ee:	5b e6       	ldi	r21, 0x6B	; 107
    d5f0:	6c e0       	ldi	r22, 0x0C	; 12
    d5f2:	88 e0       	ldi	r24, 0x08	; 8
    d5f4:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		Print(12, 13, (char*) strPaused);
    d5f8:	4a ee       	ldi	r20, 0xEA	; 234
    d5fa:	53 e0       	ldi	r21, 0x03	; 3
    d5fc:	6d e0       	ldi	r22, 0x0D	; 13
    d5fe:	70 e0       	ldi	r23, 0x00	; 0
    d600:	8c e0       	ldi	r24, 0x0C	; 12
    d602:	90 e0       	ldi	r25, 0x00	; 0
    d604:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		Print(11, 14, (char*) strExit);
    d608:	41 ef       	ldi	r20, 0xF1	; 241
    d60a:	53 e0       	ldi	r21, 0x03	; 3
    d60c:	6e e0       	ldi	r22, 0x0E	; 14
    d60e:	70 e0       	ldi	r23, 0x00	; 0
    d610:	8b e0       	ldi	r24, 0x0B	; 11
    d612:	90 e0       	ldi	r25, 0x00	; 0
    d614:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		
		// Update
		update_player(p1, &player1);
    d618:	68 ea       	ldi	r22, 0xA8	; 168
    d61a:	7b e0       	ldi	r23, 0x0B	; 11
    d61c:	c8 01       	movw	r24, r16
    d61e:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
		update_player(p2, &player2);
    d622:	6e e1       	ldi	r22, 0x1E	; 30
    d624:	7f e0       	ldi	r23, 0x0F	; 15
    d626:	ce 01       	movw	r24, r28
    d628:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
    d62c:	ca c1       	rjmp	.+916    	; 0xd9c2 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d62e:	90 91 79 0b 	lds	r25, 0x0B79
    d632:	91 30       	cpi	r25, 0x01	; 1
    d634:	19 f4       	brne	.+6      	; 0xd63c <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    d636:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <render_boss_fight_scope_load>
    d63a:	05 c0       	rjmp	.+10     	; 0xd646 <update_level+0x78>
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
		
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d63c:	92 30       	cpi	r25, 0x02	; 2
    d63e:	09 f0       	breq	.+2      	; 0xd642 <update_level+0x74>
    d640:	4e c0       	rjmp	.+156    	; 0xd6de <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    d642:	0e 94 85 58 	call	0xb10a	; 0xb10a <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d646:	60 e0       	ldi	r22, 0x00	; 0
    d648:	80 91 85 0b 	lds	r24, 0x0B85
    d64c:	90 91 86 0b 	lds	r25, 0x0B86
    d650:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <tank_map>
    d654:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d656:	40 e0       	ldi	r20, 0x00	; 0
    d658:	63 e5       	ldi	r22, 0x53	; 83
    d65a:	71 e3       	ldi	r23, 0x31	; 49
    d65c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d660:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d662:	6c 2f       	mov	r22, r28
    d664:	80 91 85 0b 	lds	r24, 0x0B85
    d668:	90 91 86 0b 	lds	r25, 0x0B86
    d66c:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d670:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d672:	40 e0       	ldi	r20, 0x00	; 0
    d674:	69 e5       	ldi	r22, 0x59	; 89
    d676:	71 e3       	ldi	r23, 0x31	; 49
    d678:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d67c:	6c 2f       	mov	r22, r28
    d67e:	80 91 85 0b 	lds	r24, 0x0B85
    d682:	90 91 86 0b 	lds	r25, 0x0B86
    d686:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d68a:	60 e0       	ldi	r22, 0x00	; 0
    d68c:	80 91 85 0b 	lds	r24, 0x0B85
    d690:	90 91 86 0b 	lds	r25, 0x0B86
    d694:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d698:	6c 2f       	mov	r22, r28
    d69a:	80 91 85 0b 	lds	r24, 0x0B85
    d69e:	90 91 86 0b 	lds	r25, 0x0B86
    d6a2:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_shot(&player2, p2_shot_index);
    d6a6:	6d 2f       	mov	r22, r29
    d6a8:	8e e1       	ldi	r24, 0x1E	; 30
    d6aa:	9f e0       	ldi	r25, 0x0F	; 15
    d6ac:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_tile_explosions(&tile_animations);
    d6b0:	8a e8       	ldi	r24, 0x8A	; 138
    d6b2:	9b e0       	ldi	r25, 0x0B	; 11
    d6b4:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d6b8:	60 91 85 0b 	lds	r22, 0x0B85
    d6bc:	70 91 86 0b 	lds	r23, 0x0B86
    d6c0:	80 91 87 0b 	lds	r24, 0x0B87
    d6c4:	90 91 88 0b 	lds	r25, 0x0B88
    d6c8:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d6cc:	60 91 7a 0b 	lds	r22, 0x0B7A
    d6d0:	80 91 85 0b 	lds	r24, 0x0B85
    d6d4:	90 91 86 0b 	lds	r25, 0x0B86
    d6d8:	0e 94 99 68 	call	0xd132	; 0xd132 <collision_detect_player>
    d6dc:	72 c1       	rjmp	.+740    	; 0xd9c2 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d6de:	94 30       	cpi	r25, 0x04	; 4
    d6e0:	09 f0       	breq	.+2      	; 0xd6e4 <update_level+0x116>
    d6e2:	98 c0       	rjmp	.+304    	; 0xd814 <update_level+0x246>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d6e4:	80 91 f8 0f 	lds	r24, 0x0FF8
    d6e8:	81 11       	cpse	r24, r1
    d6ea:	07 c0       	rjmp	.+14     	; 0xd6fa <update_level+0x12c>
    d6ec:	80 91 c9 0f 	lds	r24, 0x0FC9
    d6f0:	81 11       	cpse	r24, r1
    d6f2:	03 c0       	rjmp	.+6      	; 0xd6fa <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d6f4:	80 e2       	ldi	r24, 0x20	; 32
    d6f6:	80 93 79 0b 	sts	0x0B79, r24
		}
		
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d6fa:	60 e0       	ldi	r22, 0x00	; 0
    d6fc:	80 91 85 0b 	lds	r24, 0x0B85
    d700:	90 91 86 0b 	lds	r25, 0x0B86
    d704:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <tank_map>
    d708:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d70a:	68 2f       	mov	r22, r24
    d70c:	80 91 85 0b 	lds	r24, 0x0B85
    d710:	90 91 86 0b 	lds	r25, 0x0B86
    d714:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d718:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d71a:	01 e0       	ldi	r16, 0x01	; 1
    d71c:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d71e:	12 e0       	ldi	r17, 0x02	; 2
    d720:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d722:	d3 e0       	ldi	r29, 0x03	; 3
    d724:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d726:	80 91 f8 0f 	lds	r24, 0x0FF8
    d72a:	88 23       	and	r24, r24
    d72c:	19 f0       	breq	.+6      	; 0xd734 <update_level+0x166>
	return (char*) map_sub_turret;
    d72e:	6b e0       	ldi	r22, 0x0B	; 11
    d730:	71 e3       	ldi	r23, 0x31	; 49
    d732:	02 c0       	rjmp	.+4      	; 0xd738 <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d734:	69 e5       	ldi	r22, 0x59	; 89
    d736:	71 e3       	ldi	r23, 0x31	; 49
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d738:	40 e0       	ldi	r20, 0x00	; 0
    d73a:	8c 2f       	mov	r24, r28
    d73c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d740:	80 91 f8 0f 	lds	r24, 0x0FF8
    d744:	88 23       	and	r24, r24
    d746:	19 f0       	breq	.+6      	; 0xd74e <update_level+0x180>
	return (char*) map_sub_shot;
    d748:	6e e0       	ldi	r22, 0x0E	; 14
    d74a:	71 e3       	ldi	r23, 0x31	; 49
    d74c:	02 c0       	rjmp	.+4      	; 0xd752 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d74e:	69 e5       	ldi	r22, 0x59	; 89
    d750:	71 e3       	ldi	r23, 0x31	; 49
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d752:	40 e0       	ldi	r20, 0x00	; 0
    d754:	80 2f       	mov	r24, r16
    d756:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d75a:	80 91 c9 0f 	lds	r24, 0x0FC9
    d75e:	88 23       	and	r24, r24
    d760:	19 f0       	breq	.+6      	; 0xd768 <update_level+0x19a>
	return (char*) map_sub_turret;
    d762:	6b e0       	ldi	r22, 0x0B	; 11
    d764:	71 e3       	ldi	r23, 0x31	; 49
    d766:	02 c0       	rjmp	.+4      	; 0xd76c <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d768:	69 e5       	ldi	r22, 0x59	; 89
    d76a:	71 e3       	ldi	r23, 0x31	; 49
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d76c:	40 e0       	ldi	r20, 0x00	; 0
    d76e:	81 2f       	mov	r24, r17
    d770:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d774:	80 91 c9 0f 	lds	r24, 0x0FC9
    d778:	88 23       	and	r24, r24
    d77a:	19 f0       	breq	.+6      	; 0xd782 <update_level+0x1b4>
	return (char*) map_sub_shot;
    d77c:	6e e0       	ldi	r22, 0x0E	; 14
    d77e:	71 e3       	ldi	r23, 0x31	; 49
    d780:	02 c0       	rjmp	.+4      	; 0xd786 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d782:	69 e5       	ldi	r22, 0x59	; 89
    d784:	71 e3       	ldi	r23, 0x31	; 49
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d786:	40 e0       	ldi	r20, 0x00	; 0
    d788:	8d 2f       	mov	r24, r29
    d78a:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d78e:	60 e0       	ldi	r22, 0x00	; 0
    d790:	80 91 85 0b 	lds	r24, 0x0B85
    d794:	90 91 86 0b 	lds	r25, 0x0B86
    d798:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d79c:	6f 2d       	mov	r22, r15
    d79e:	80 91 85 0b 	lds	r24, 0x0B85
    d7a2:	90 91 86 0b 	lds	r25, 0x0B86
    d7a6:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_tile_explosions(&tile_animations);
    d7aa:	8a e8       	ldi	r24, 0x8A	; 138
    d7ac:	9b e0       	ldi	r25, 0x0B	; 11
    d7ae:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d7b2:	6c 2f       	mov	r22, r28
    d7b4:	80 ef       	ldi	r24, 0xF0	; 240
    d7b6:	9f e0       	ldi	r25, 0x0F	; 15
    d7b8:	0e 94 bb 58 	call	0xb176	; 0xb176 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d7bc:	60 2f       	mov	r22, r16
    d7be:	80 ef       	ldi	r24, 0xF0	; 240
    d7c0:	9f e0       	ldi	r25, 0x0F	; 15
    d7c2:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d7c6:	61 2f       	mov	r22, r17
    d7c8:	81 ec       	ldi	r24, 0xC1	; 193
    d7ca:	9f e0       	ldi	r25, 0x0F	; 15
    d7cc:	0e 94 bb 58 	call	0xb176	; 0xb176 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d7d0:	6d 2f       	mov	r22, r29
    d7d2:	81 ec       	ldi	r24, 0xC1	; 193
    d7d4:	9f e0       	ldi	r25, 0x0F	; 15
    d7d6:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d7da:	40 e8       	ldi	r20, 0x80	; 128
    d7dc:	55 e2       	ldi	r21, 0x25	; 37
    d7de:	60 ea       	ldi	r22, 0xA0	; 160
    d7e0:	7f e0       	ldi	r23, 0x0F	; 15
    d7e2:	80 ef       	ldi	r24, 0xF0	; 240
    d7e4:	9f e0       	ldi	r25, 0x0F	; 15
    d7e6:	0e 94 ed 58 	call	0xb1da	; 0xb1da <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d7ea:	40 e0       	ldi	r20, 0x00	; 0
    d7ec:	5b e4       	ldi	r21, 0x4B	; 75
    d7ee:	60 e2       	ldi	r22, 0x20	; 32
    d7f0:	75 e3       	ldi	r23, 0x35	; 53
    d7f2:	81 ec       	ldi	r24, 0xC1	; 193
    d7f4:	9f e0       	ldi	r25, 0x0F	; 15
    d7f6:	0e 94 ed 58 	call	0xb1da	; 0xb1da <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d7fa:	69 ef       	ldi	r22, 0xF9	; 249
    d7fc:	7f e0       	ldi	r23, 0x0F	; 15
    d7fe:	80 ef       	ldi	r24, 0xF0	; 240
    d800:	9f e0       	ldi	r25, 0x0F	; 15
    d802:	0e 94 7e 6a 	call	0xd4fc	; 0xd4fc <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d806:	6a ec       	ldi	r22, 0xCA	; 202
    d808:	7f e0       	ldi	r23, 0x0F	; 15
    d80a:	81 ec       	ldi	r24, 0xC1	; 193
    d80c:	9f e0       	ldi	r25, 0x0F	; 15
    d80e:	0e 94 7e 6a 	call	0xd4fc	; 0xd4fc <update_turret_shot>
    d812:	52 cf       	rjmp	.-348    	; 0xd6b8 <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d814:	90 32       	cpi	r25, 0x20	; 32
    d816:	09 f0       	breq	.+2      	; 0xd81a <update_level+0x24c>
    d818:	55 c0       	rjmp	.+170    	; 0xd8c4 <update_level+0x2f6>
	{
		// Render
		render_boss_fight_sub_sinking();
    d81a:	0e 94 a6 58 	call	0xb14c	; 0xb14c <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d81e:	60 e0       	ldi	r22, 0x00	; 0
    d820:	80 91 85 0b 	lds	r24, 0x0B85
    d824:	90 91 86 0b 	lds	r25, 0x0B86
    d828:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <tank_map>
    d82c:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d82e:	40 e0       	ldi	r20, 0x00	; 0
    d830:	63 e5       	ldi	r22, 0x53	; 83
    d832:	71 e3       	ldi	r23, 0x31	; 49
    d834:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d838:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d83a:	6c 2f       	mov	r22, r28
    d83c:	80 91 85 0b 	lds	r24, 0x0B85
    d840:	90 91 86 0b 	lds	r25, 0x0B86
    d844:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d848:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d84a:	40 e0       	ldi	r20, 0x00	; 0
    d84c:	69 e5       	ldi	r22, 0x59	; 89
    d84e:	71 e3       	ldi	r23, 0x31	; 49
    d850:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d854:	6c 2f       	mov	r22, r28
    d856:	80 91 85 0b 	lds	r24, 0x0B85
    d85a:	90 91 86 0b 	lds	r25, 0x0B86
    d85e:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d862:	60 e0       	ldi	r22, 0x00	; 0
    d864:	80 91 85 0b 	lds	r24, 0x0B85
    d868:	90 91 86 0b 	lds	r25, 0x0B86
    d86c:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d870:	6c 2f       	mov	r22, r28
    d872:	80 91 85 0b 	lds	r24, 0x0B85
    d876:	90 91 86 0b 	lds	r25, 0x0B86
    d87a:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_shot(&player2, p2_shot_index);
    d87e:	6d 2f       	mov	r22, r29
    d880:	8e e1       	ldi	r24, 0x1E	; 30
    d882:	9f e0       	ldi	r25, 0x0F	; 15
    d884:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_tile_explosions(&tile_animations);
    d888:	8a e8       	ldi	r24, 0x8A	; 138
    d88a:	9b e0       	ldi	r25, 0x0B	; 11
    d88c:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d890:	60 91 85 0b 	lds	r22, 0x0B85
    d894:	70 91 86 0b 	lds	r23, 0x0B86
    d898:	80 91 87 0b 	lds	r24, 0x0B87
    d89c:	90 91 88 0b 	lds	r25, 0x0B88
    d8a0:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d8a4:	60 91 7a 0b 	lds	r22, 0x0B7A
    d8a8:	80 91 85 0b 	lds	r24, 0x0B85
    d8ac:	90 91 86 0b 	lds	r25, 0x0B86
    d8b0:	0e 94 99 68 	call	0xd132	; 0xd132 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    d8b4:	80 91 79 0b 	lds	r24, 0x0B79
    d8b8:	80 32       	cpi	r24, 0x20	; 32
    d8ba:	09 f4       	brne	.+2      	; 0xd8be <update_level+0x2f0>
    d8bc:	82 c0       	rjmp	.+260    	; 0xd9c2 <update_level+0x3f4>
		{
			resolve_scoring();
    d8be:	0e 94 34 5a 	call	0xb468	; 0xb468 <resolve_scoring>
    d8c2:	7f c0       	rjmp	.+254    	; 0xd9c2 <update_level+0x3f4>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    d8c4:	90 31       	cpi	r25, 0x10	; 16
    d8c6:	d9 f3       	breq	.-10     	; 0xd8be <update_level+0x2f0>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    d8c8:	91 11       	cpse	r25, r1
    d8ca:	7b c0       	rjmp	.+246    	; 0xd9c2 <update_level+0x3f4>
	{
		p2_index = tank_map(&player1, p1_index);
    d8cc:	60 e0       	ldi	r22, 0x00	; 0
    d8ce:	88 ea       	ldi	r24, 0xA8	; 168
    d8d0:	9b e0       	ldi	r25, 0x0B	; 11
    d8d2:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <tank_map>
    d8d6:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d8d8:	68 2f       	mov	r22, r24
    d8da:	8e e1       	ldi	r24, 0x1E	; 30
    d8dc:	9f e0       	ldi	r25, 0x0F	; 15
    d8de:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <tank_map>
    d8e2:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d8e4:	68 2f       	mov	r22, r24
    d8e6:	88 ea       	ldi	r24, 0xA8	; 168
    d8e8:	9b e0       	ldi	r25, 0x0B	; 11
    d8ea:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d8ee:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    d8f0:	68 2f       	mov	r22, r24
    d8f2:	8e e1       	ldi	r24, 0x1E	; 30
    d8f4:	9f e0       	ldi	r25, 0x0F	; 15
    d8f6:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(&player1, p1_index);
    d8fa:	60 e0       	ldi	r22, 0x00	; 0
    d8fc:	88 ea       	ldi	r24, 0xA8	; 168
    d8fe:	9b e0       	ldi	r25, 0x0B	; 11
    d900:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <render_player>
		render_player(&player2, p2_index);
    d904:	6d 2d       	mov	r22, r13
    d906:	8e e1       	ldi	r24, 0x1E	; 30
    d908:	9f e0       	ldi	r25, 0x0F	; 15
    d90a:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <render_player>
		render_shot(&player1, p1_shot_index);
    d90e:	6e 2d       	mov	r22, r14
    d910:	88 ea       	ldi	r24, 0xA8	; 168
    d912:	9b e0       	ldi	r25, 0x0B	; 11
    d914:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_shot(&player2, p2_shot_index);
    d918:	6f 2d       	mov	r22, r15
    d91a:	8e e1       	ldi	r24, 0x1E	; 30
    d91c:	9f e0       	ldi	r25, 0x0F	; 15
    d91e:	0e 94 11 51 	call	0xa222	; 0xa222 <render_shot>
		render_tile_explosions(&tile_animations);
    d922:	8a e8       	ldi	r24, 0x8A	; 138
    d924:	9b e0       	ldi	r25, 0x0B	; 11
    d926:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d92a:	80 91 81 0b 	lds	r24, 0x0B81
    d92e:	90 91 82 0b 	lds	r25, 0x0B82
    d932:	89 3e       	cpi	r24, 0xE9	; 233
    d934:	93 40       	sbci	r25, 0x03	; 3
    d936:	88 f0       	brcs	.+34     	; 0xd95a <update_level+0x38c>
    d938:	80 91 bf 0f 	lds	r24, 0x0FBF
    d93c:	90 91 c0 0f 	lds	r25, 0x0FC0
    d940:	18 16       	cp	r1, r24
    d942:	19 06       	cpc	r1, r25
    d944:	54 f4       	brge	.+20     	; 0xd95a <update_level+0x38c>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d946:	83 eb       	ldi	r24, 0xB3	; 179
    d948:	9f e0       	ldi	r25, 0x0F	; 15
    d94a:	0e 94 64 51 	call	0xa2c8	; 0xa2c8 <render_scope>
    d94e:	88 23       	and	r24, r24
    d950:	21 f0       	breq	.+8      	; 0xd95a <update_level+0x38c>
    d952:	10 92 82 0b 	sts	0x0B82, r1
    d956:	10 92 81 0b 	sts	0x0B81, r1
		}
		game.scope_counter++;
    d95a:	20 91 81 0b 	lds	r18, 0x0B81
    d95e:	30 91 82 0b 	lds	r19, 0x0B82
    d962:	2f 5f       	subi	r18, 0xFF	; 255
    d964:	3f 4f       	sbci	r19, 0xFF	; 255
    d966:	30 93 82 0b 	sts	0x0B82, r19
    d96a:	20 93 81 0b 	sts	0x0B81, r18
		
		// Update
		update_player(p1, &player1);
    d96e:	68 ea       	ldi	r22, 0xA8	; 168
    d970:	7b e0       	ldi	r23, 0x0B	; 11
    d972:	c8 01       	movw	r24, r16
    d974:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
		update_player(p2, &player2);
    d978:	6e e1       	ldi	r22, 0x1E	; 30
    d97a:	7f e0       	ldi	r23, 0x0F	; 15
    d97c:	ce 01       	movw	r24, r28
    d97e:	0e 94 3f 67 	call	0xce7e	; 0xce7e <update_player>
		resolve_scoring();
    d982:	0e 94 34 5a 	call	0xb468	; 0xb468 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d986:	60 e0       	ldi	r22, 0x00	; 0
    d988:	88 ea       	ldi	r24, 0xA8	; 168
    d98a:	9b e0       	ldi	r25, 0x0B	; 11
    d98c:	0e 94 99 68 	call	0xd132	; 0xd132 <collision_detect_player>
    d990:	88 23       	and	r24, r24
    d992:	41 f0       	breq	.+16     	; 0xd9a4 <update_level+0x3d6>
    d994:	2f e0       	ldi	r18, 0x0F	; 15
    d996:	40 e0       	ldi	r20, 0x00	; 0
    d998:	6e e1       	ldi	r22, 0x1E	; 30
    d99a:	7f e0       	ldi	r23, 0x0F	; 15
    d99c:	88 ea       	ldi	r24, 0xA8	; 168
    d99e:	9b e0       	ldi	r25, 0x0B	; 11
    d9a0:	0e 94 76 56 	call	0xacec	; 0xacec <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d9a4:	6f e0       	ldi	r22, 0x0F	; 15
    d9a6:	8e e1       	ldi	r24, 0x1E	; 30
    d9a8:	9f e0       	ldi	r25, 0x0F	; 15
    d9aa:	0e 94 99 68 	call	0xd132	; 0xd132 <collision_detect_player>
    d9ae:	88 23       	and	r24, r24
    d9b0:	41 f0       	breq	.+16     	; 0xd9c2 <update_level+0x3f4>
    d9b2:	20 e0       	ldi	r18, 0x00	; 0
    d9b4:	4f e0       	ldi	r20, 0x0F	; 15
    d9b6:	68 ea       	ldi	r22, 0xA8	; 168
    d9b8:	7b e0       	ldi	r23, 0x0B	; 11
    d9ba:	8e e1       	ldi	r24, 0x1E	; 30
    d9bc:	9f e0       	ldi	r25, 0x0F	; 15
    d9be:	0e 94 76 56 	call	0xacec	; 0xacec <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d9c2:	80 91 89 0b 	lds	r24, 0x0B89
    d9c6:	86 30       	cpi	r24, 0x06	; 6
    d9c8:	71 f5       	brne	.+92     	; 0xda26 <update_level+0x458>
	{
		game.demo_counter++;
    d9ca:	80 91 7f 0b 	lds	r24, 0x0B7F
    d9ce:	90 91 80 0b 	lds	r25, 0x0B80
    d9d2:	01 96       	adiw	r24, 0x01	; 1
    d9d4:	90 93 80 0b 	sts	0x0B80, r25
    d9d8:	80 93 7f 0b 	sts	0x0B7F, r24
		held = ReadJoypad(0);
    d9dc:	80 e0       	ldi	r24, 0x00	; 0
    d9de:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d9e2:	80 e0       	ldi	r24, 0x00	; 0
    d9e4:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <ReadJoypad>
    d9e8:	89 2b       	or	r24, r25
    d9ea:	89 f0       	breq	.+34     	; 0xda0e <update_level+0x440>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    d9ec:	10 92 80 0b 	sts	0x0B80, r1
    d9f0:	10 92 7f 0b 	sts	0x0B7F, r1
			fade_through();
    d9f4:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
			init_game_state();
    d9f8:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <init_game_state>
			load_splash();
#endif
		}
	}
}
    d9fc:	df 91       	pop	r29
    d9fe:	cf 91       	pop	r28
    da00:	1f 91       	pop	r17
    da02:	0f 91       	pop	r16
    da04:	ff 90       	pop	r15
    da06:	ef 90       	pop	r14
    da08:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    da0a:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    da0e:	81 e0       	ldi	r24, 0x01	; 1
    da10:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <ReadJoypad>
    da14:	89 2b       	or	r24, r25
    da16:	51 f7       	brne	.-44     	; 0xd9ec <update_level+0x41e>
    da18:	80 91 7f 0b 	lds	r24, 0x0B7F
    da1c:	90 91 80 0b 	lds	r25, 0x0B80
    da20:	88 30       	cpi	r24, 0x08	; 8
    da22:	97 40       	sbci	r25, 0x07	; 7
    da24:	18 f7       	brcc	.-58     	; 0xd9ec <update_level+0x41e>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    da26:	df 91       	pop	r29
    da28:	cf 91       	pop	r28
    da2a:	1f 91       	pop	r17
    da2c:	0f 91       	pop	r16
    da2e:	ff 90       	pop	r15
    da30:	ef 90       	pop	r14
    da32:	df 90       	pop	r13
    da34:	08 95       	ret

0000da36 <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{	
    da36:	4f 92       	push	r4
    da38:	5f 92       	push	r5
    da3a:	7f 92       	push	r7
    da3c:	8f 92       	push	r8
    da3e:	9f 92       	push	r9
    da40:	af 92       	push	r10
    da42:	bf 92       	push	r11
    da44:	cf 92       	push	r12
    da46:	df 92       	push	r13
    da48:	ef 92       	push	r14
    da4a:	ff 92       	push	r15
    da4c:	0f 93       	push	r16
    da4e:	1f 93       	push	r17
    da50:	cf 93       	push	r28
    da52:	df 93       	push	r29
    da54:	1f 92       	push	r1
    da56:	cd b7       	in	r28, 0x3d	; 61
    da58:	de b7       	in	r29, 0x3e	; 62
    da5a:	2c 01       	movw	r4, r24
    da5c:	7b 01       	movw	r14, r22
    da5e:	8a 01       	movw	r16, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING) && !is_net_player(player))
    da60:	db 01       	movw	r26, r22
    da62:	cd 90       	ld	r12, X+
    da64:	dc 90       	ld	r13, X
    da66:	46 01       	movw	r8, r12
    da68:	b0 e1       	ldi	r27, 0x10	; 16
    da6a:	8b 22       	and	r8, r27
    da6c:	99 24       	eor	r9, r9
    da6e:	c4 fe       	sbrs	r12, 4
    da70:	11 c0       	rjmp	.+34     	; 0xda94 <_handle_select_helper+0x5e>
    da72:	fc 01       	movw	r30, r24
    da74:	85 81       	ldd	r24, Z+5	; 0x05
    da76:	81 11       	cpse	r24, r1
    da78:	0d c0       	rjmp	.+26     	; 0xda94 <_handle_select_helper+0x5e>
    da7a:	ca 01       	movw	r24, r20
    da7c:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    da80:	81 11       	cpse	r24, r1
    da82:	08 c0       	rjmp	.+16     	; 0xda94 <_handle_select_helper+0x5e>
	{
		ps->handle_id--;
    da84:	d2 01       	movw	r26, r4
    da86:	8c 91       	ld	r24, X
    da88:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    da8a:	87 ff       	sbrs	r24, 7
    da8c:	1c c0       	rjmp	.+56     	; 0xdac6 <_handle_select_helper+0x90>
    da8e:	f2 01       	movw	r30, r4
    da90:	10 82       	st	Z, r1
    da92:	bc c0       	rjmp	.+376    	; 0xdc0c <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
    da94:	56 01       	movw	r10, r12
    da96:	f0 e2       	ldi	r31, 0x20	; 32
    da98:	af 22       	and	r10, r31
    da9a:	bb 24       	eor	r11, r11
    da9c:	c5 fe       	sbrs	r12, 5
    da9e:	15 c0       	rjmp	.+42     	; 0xdaca <_handle_select_helper+0x94>
    daa0:	d2 01       	movw	r26, r4
    daa2:	15 96       	adiw	r26, 0x05	; 5
    daa4:	8c 91       	ld	r24, X
    daa6:	81 11       	cpse	r24, r1
    daa8:	10 c0       	rjmp	.+32     	; 0xdaca <_handle_select_helper+0x94>
    daaa:	c8 01       	movw	r24, r16
    daac:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dab0:	81 11       	cpse	r24, r1
    dab2:	0b c0       	rjmp	.+22     	; 0xdaca <_handle_select_helper+0x94>
	{
		ps->handle_id++;
    dab4:	f2 01       	movw	r30, r4
    dab6:	80 81       	ld	r24, Z
    dab8:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    daba:	89 30       	cpi	r24, 0x09	; 9
    dabc:	14 f4       	brge	.+4      	; 0xdac2 <_handle_select_helper+0x8c>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
	{
		ps->handle_id++;
    dabe:	80 83       	st	Z, r24
    dac0:	a5 c0       	rjmp	.+330    	; 0xdc0c <_handle_select_helper+0x1d6>
		if (ps->handle_id > 8) ps->handle_id = 8;
    dac2:	88 e0       	ldi	r24, 0x08	; 8
    dac4:	d2 01       	movw	r26, r4
    dac6:	8c 93       	st	X, r24
    dac8:	a1 c0       	rjmp	.+322    	; 0xdc0c <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING) && !is_net_player(player))
    daca:	c7 01       	movw	r24, r14
    dacc:	0e 94 87 59 	call	0xb30e	; 0xb30e <select_pressed>
    dad0:	78 2e       	mov	r7, r24
    dad2:	88 23       	and	r24, r24
    dad4:	f1 f1       	breq	.+124    	; 0xdb52 <_handle_select_helper+0x11c>
    dad6:	f2 01       	movw	r30, r4
    dad8:	85 81       	ldd	r24, Z+5	; 0x05
    dada:	81 11       	cpse	r24, r1
    dadc:	3a c0       	rjmp	.+116    	; 0xdb52 <_handle_select_helper+0x11c>
    dade:	c8 01       	movw	r24, r16
    dae0:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dae4:	81 11       	cpse	r24, r1
    dae6:	35 c0       	rjmp	.+106    	; 0xdb52 <_handle_select_helper+0x11c>
	{
		ps->select_state = EDITING;
    dae8:	81 e0       	ldi	r24, 0x01	; 1
    daea:	d2 01       	movw	r26, r4
    daec:	15 96       	adiw	r26, 0x05	; 5
    daee:	8c 93       	st	X, r24
    daf0:	15 97       	sbiw	r26, 0x05	; 5
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
    daf2:	ec 91       	ld	r30, X
    daf4:	b3 e0       	ldi	r27, 0x03	; 3
    daf6:	eb 02       	muls	r30, r27
    daf8:	f0 01       	movw	r30, r0
    dafa:	11 24       	eor	r1, r1
    dafc:	e8 5a       	subi	r30, 0xA8	; 168
    dafe:	f4 4f       	sbci	r31, 0xF4	; 244
    db00:	80 81       	ld	r24, Z
    db02:	91 81       	ldd	r25, Z+1	; 0x01
    db04:	a2 81       	ldd	r26, Z+2	; 0x02
    db06:	f2 01       	movw	r30, r4
    db08:	81 83       	std	Z+1, r24	; 0x01
    db0a:	92 83       	std	Z+2, r25	; 0x02
    db0c:	a3 83       	std	Z+3, r26	; 0x03
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    db0e:	24 e0       	ldi	r18, 0x04	; 4
    db10:	40 91 28 0f 	lds	r20, 0x0F28
    db14:	60 91 b2 0b 	lds	r22, 0x0BB2
    db18:	80 91 89 0b 	lds	r24, 0x0B89
    db1c:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		p->pressed = 0;
    db20:	d7 01       	movw	r26, r14
    db22:	1d 92       	st	X+, r1
    db24:	1c 92       	st	X, r1
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    db26:	21 e0       	ldi	r18, 0x01	; 1
    db28:	49 e0       	ldi	r20, 0x09	; 9
    db2a:	b7 01       	movw	r22, r14
    db2c:	c8 01       	movw	r24, r16
	{
		fade_through();
		load_splash();
	}
#endif
}
    db2e:	0f 90       	pop	r0
    db30:	df 91       	pop	r29
    db32:	cf 91       	pop	r28
    db34:	1f 91       	pop	r17
    db36:	0f 91       	pop	r16
    db38:	ff 90       	pop	r15
    db3a:	ef 90       	pop	r14
    db3c:	df 90       	pop	r13
    db3e:	cf 90       	pop	r12
    db40:	bf 90       	pop	r11
    db42:	af 90       	pop	r10
    db44:	9f 90       	pop	r9
    db46:	8f 90       	pop	r8
    db48:	7f 90       	pop	r7
    db4a:	5f 90       	pop	r5
    db4c:	4f 90       	pop	r4
	{
		ps->select_state = EDITING;
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    db4e:	0c 94 3a 63 	jmp	0xc674	; 0xc674 <send_smart_net_message>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
    db52:	c7 fe       	sbrs	r12, 7
    db54:	17 c0       	rjmp	.+46     	; 0xdb84 <_handle_select_helper+0x14e>
    db56:	f2 01       	movw	r30, r4
    db58:	85 81       	ldd	r24, Z+5	; 0x05
    db5a:	81 30       	cpi	r24, 0x01	; 1
    db5c:	99 f4       	brne	.+38     	; 0xdb84 <_handle_select_helper+0x14e>
    db5e:	c8 01       	movw	r24, r16
    db60:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    db64:	81 11       	cpse	r24, r1
    db66:	0e c0       	rjmp	.+28     	; 0xdb84 <_handle_select_helper+0x14e>
	{
		ps->char_index++;
    db68:	d2 01       	movw	r26, r4
    db6a:	14 96       	adiw	r26, 0x04	; 4
    db6c:	8c 91       	ld	r24, X
    db6e:	14 97       	sbiw	r26, 0x04	; 4
    db70:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    db72:	83 30       	cpi	r24, 0x03	; 3
    db74:	1c f4       	brge	.+6      	; 0xdb7c <_handle_select_helper+0x146>
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
	{
		ps->char_index++;
    db76:	14 96       	adiw	r26, 0x04	; 4
    db78:	8c 93       	st	X, r24
    db7a:	48 c0       	rjmp	.+144    	; 0xdc0c <_handle_select_helper+0x1d6>
		if (ps->char_index > 2) ps->char_index = 2;
    db7c:	82 e0       	ldi	r24, 0x02	; 2
    db7e:	f2 01       	movw	r30, r4
    db80:	84 83       	std	Z+4, r24	; 0x04
    db82:	44 c0       	rjmp	.+136    	; 0xdc0c <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING) && !is_net_player(player))
    db84:	c6 fe       	sbrs	r12, 6
    db86:	12 c0       	rjmp	.+36     	; 0xdbac <_handle_select_helper+0x176>
    db88:	d2 01       	movw	r26, r4
    db8a:	15 96       	adiw	r26, 0x05	; 5
    db8c:	2c 91       	ld	r18, X
    db8e:	21 30       	cpi	r18, 0x01	; 1
    db90:	09 f0       	breq	.+2      	; 0xdb94 <_handle_select_helper+0x15e>
    db92:	8d c0       	rjmp	.+282    	; 0xdcae <_handle_select_helper+0x278>
    db94:	c8 01       	movw	r24, r16
    db96:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    db9a:	81 11       	cpse	r24, r1
    db9c:	42 c0       	rjmp	.+132    	; 0xdc22 <_handle_select_helper+0x1ec>
	{
		ps->char_index--;
    db9e:	f2 01       	movw	r30, r4
    dba0:	84 81       	ldd	r24, Z+4	; 0x04
    dba2:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    dba4:	87 ff       	sbrs	r24, 7
    dba6:	ec cf       	rjmp	.-40     	; 0xdb80 <_handle_select_helper+0x14a>
    dba8:	14 82       	std	Z+4, r1	; 0x04
    dbaa:	30 c0       	rjmp	.+96     	; 0xdc0c <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    dbac:	89 28       	or	r8, r9
    dbae:	b1 f0       	breq	.+44     	; 0xdbdc <_handle_select_helper+0x1a6>
    dbb0:	f2 01       	movw	r30, r4
    dbb2:	25 81       	ldd	r18, Z+5	; 0x05
    dbb4:	21 30       	cpi	r18, 0x01	; 1
    dbb6:	09 f0       	breq	.+2      	; 0xdbba <_handle_select_helper+0x184>
    dbb8:	7d c0       	rjmp	.+250    	; 0xdcb4 <_handle_select_helper+0x27e>
    dbba:	c8 01       	movw	r24, r16
    dbbc:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dbc0:	81 11       	cpse	r24, r1
    dbc2:	31 c0       	rjmp	.+98     	; 0xdc26 <_handle_select_helper+0x1f0>
	{
		ps->handle[(u8) ps->char_index]--;
    dbc4:	d2 01       	movw	r26, r4
    dbc6:	14 96       	adiw	r26, 0x04	; 4
    dbc8:	8c 91       	ld	r24, X
    dbca:	f2 01       	movw	r30, r4
    dbcc:	e8 0f       	add	r30, r24
    dbce:	f1 1d       	adc	r31, r1
    dbd0:	81 81       	ldd	r24, Z+1	; 0x01
    dbd2:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
    dbd4:	81 34       	cpi	r24, 0x41	; 65
    dbd6:	c8 f4       	brcc	.+50     	; 0xdc0a <_handle_select_helper+0x1d4>
    dbd8:	8a e5       	ldi	r24, 0x5A	; 90
    dbda:	17 c0       	rjmp	.+46     	; 0xdc0a <_handle_select_helper+0x1d4>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dbdc:	ab 28       	or	r10, r11
    dbde:	29 f1       	breq	.+74     	; 0xdc2a <_handle_select_helper+0x1f4>
    dbe0:	f2 01       	movw	r30, r4
    dbe2:	25 81       	ldd	r18, Z+5	; 0x05
    dbe4:	21 30       	cpi	r18, 0x01	; 1
    dbe6:	09 f0       	breq	.+2      	; 0xdbea <_handle_select_helper+0x1b4>
    dbe8:	65 c0       	rjmp	.+202    	; 0xdcb4 <_handle_select_helper+0x27e>
    dbea:	c8 01       	movw	r24, r16
    dbec:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dbf0:	81 11       	cpse	r24, r1
    dbf2:	ef c0       	rjmp	.+478    	; 0xddd2 <_handle_select_helper+0x39c>
	{
		ps->handle[(u8) ps->char_index]++;
    dbf4:	d2 01       	movw	r26, r4
    dbf6:	14 96       	adiw	r26, 0x04	; 4
    dbf8:	8c 91       	ld	r24, X
    dbfa:	f2 01       	movw	r30, r4
    dbfc:	e8 0f       	add	r30, r24
    dbfe:	f1 1d       	adc	r31, r1
    dc00:	81 81       	ldd	r24, Z+1	; 0x01
    dc02:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
    dc04:	8b 35       	cpi	r24, 0x5B	; 91
    dc06:	08 f0       	brcs	.+2      	; 0xdc0a <_handle_select_helper+0x1d4>
    dc08:	81 e4       	ldi	r24, 0x41	; 65
    dc0a:	81 83       	std	Z+1, r24	; 0x01
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dc0c:	24 e0       	ldi	r18, 0x04	; 4
    dc0e:	40 91 28 0f 	lds	r20, 0x0F28
    dc12:	60 91 b2 0b 	lds	r22, 0x0BB2
    dc16:	80 91 89 0b 	lds	r24, 0x0B89
    dc1a:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
    dc1e:	20 e0       	ldi	r18, 0x00	; 0
    dc20:	83 cf       	rjmp	.-250    	; 0xdb28 <_handle_select_helper+0xf2>
		ps->char_index--;
		if (ps->char_index < 0) ps->char_index = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    dc22:	89 28       	or	r8, r9
    dc24:	51 f6       	brne	.-108    	; 0xdbba <_handle_select_helper+0x184>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dc26:	ab 28       	or	r10, r11
    dc28:	01 f7       	brne	.-64     	; 0xdbea <_handle_select_helper+0x1b4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    dc2a:	77 20       	and	r7, r7
    dc2c:	09 f4       	brne	.+2      	; 0xdc30 <_handle_select_helper+0x1fa>
    dc2e:	7d c0       	rjmp	.+250    	; 0xdd2a <_handle_select_helper+0x2f4>
    dc30:	f2 01       	movw	r30, r4
    dc32:	25 81       	ldd	r18, Z+5	; 0x05
    dc34:	21 30       	cpi	r18, 0x01	; 1
    dc36:	09 f0       	breq	.+2      	; 0xdc3a <_handle_select_helper+0x204>
    dc38:	3f c0       	rjmp	.+126    	; 0xdcb8 <_handle_select_helper+0x282>
    dc3a:	c8 01       	movw	r24, r16
    dc3c:	29 83       	std	Y+1, r18	; 0x01
    dc3e:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dc42:	29 81       	ldd	r18, Y+1	; 0x01
    dc44:	81 11       	cpse	r24, r1
    dc46:	6f c0       	rjmp	.+222    	; 0xdd26 <_handle_select_helper+0x2f0>
	{
		ps->select_state = CONFIRMED;
    dc48:	82 e0       	ldi	r24, 0x02	; 2
    dc4a:	d2 01       	movw	r26, r4
    dc4c:	15 96       	adiw	r26, 0x05	; 5
    dc4e:	8c 93       	st	X, r24
    dc50:	15 97       	sbiw	r26, 0x05	; 5
		player->handle_id = ps->handle_id;
    dc52:	8c 91       	ld	r24, X
    dc54:	f8 01       	movw	r30, r16
    dc56:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    dc58:	11 96       	adiw	r26, 0x01	; 1
    dc5a:	8d 91       	ld	r24, X+
    dc5c:	9d 91       	ld	r25, X+
    dc5e:	ac 91       	ld	r26, X
    dc60:	81 83       	std	Z+1, r24	; 0x01
    dc62:	92 83       	std	Z+2, r25	; 0x02
    dc64:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    dc66:	d2 01       	movw	r26, r4
    dc68:	ec 91       	ld	r30, X
    dc6a:	b3 e0       	ldi	r27, 0x03	; 3
    dc6c:	eb 02       	muls	r30, r27
    dc6e:	f0 01       	movw	r30, r0
    dc70:	11 24       	eor	r1, r1
    dc72:	9f 01       	movw	r18, r30
    dc74:	28 5a       	subi	r18, 0xA8	; 168
    dc76:	34 4f       	sbci	r19, 0xF4	; 244
    dc78:	f2 01       	movw	r30, r4
    dc7a:	81 81       	ldd	r24, Z+1	; 0x01
    dc7c:	92 81       	ldd	r25, Z+2	; 0x02
    dc7e:	a3 81       	ldd	r26, Z+3	; 0x03
    dc80:	f9 01       	movw	r30, r18
    dc82:	80 83       	st	Z, r24
    dc84:	91 83       	std	Z+1, r25	; 0x01
    dc86:	a2 83       	std	Z+2, r26	; 0x02
		if (!is_net_player(player)) LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dc88:	c8 01       	movw	r24, r16
    dc8a:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dc8e:	81 11       	cpse	r24, r1
    dc90:	09 c0       	rjmp	.+18     	; 0xdca4 <_handle_select_helper+0x26e>
    dc92:	24 e0       	ldi	r18, 0x04	; 4
    dc94:	40 91 28 0f 	lds	r20, 0x0F28
    dc98:	60 91 b2 0b 	lds	r22, 0x0BB2
    dc9c:	80 91 89 0b 	lds	r24, 0x0B89
    dca0:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dca4:	86 e5       	ldi	r24, 0x56	; 86
    dca6:	9b e0       	ldi	r25, 0x0B	; 11
    dca8:	0e 94 c9 3b 	call	0x7792	; 0x7792 <EepromWriteBlock>
    dcac:	3c cf       	rjmp	.-392    	; 0xdb26 <_handle_select_helper+0xf0>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dcae:	ab 28       	or	r10, r11
    dcb0:	09 f4       	brne	.+2      	; 0xdcb4 <_handle_select_helper+0x27e>
    dcb2:	bb cf       	rjmp	.-138    	; 0xdc2a <_handle_select_helper+0x1f4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    dcb4:	77 20       	and	r7, r7
    dcb6:	c9 f1       	breq	.+114    	; 0xdd2a <_handle_select_helper+0x2f4>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		if (!is_net_player(player)) LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		save_eeprom(&handles);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    dcb8:	22 30       	cpi	r18, 0x02	; 2
    dcba:	b9 f5       	brne	.+110    	; 0xdd2a <_handle_select_helper+0x2f4>
    dcbc:	c8 01       	movw	r24, r16
    dcbe:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dcc2:	88 23       	and	r24, r24
    dcc4:	91 f1       	breq	.+100    	; 0xdd2a <_handle_select_helper+0x2f4>
	{
		player->handle_id = ps->handle_id;
    dcc6:	d2 01       	movw	r26, r4
    dcc8:	8c 91       	ld	r24, X
    dcca:	f8 01       	movw	r30, r16
    dccc:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    dcce:	11 96       	adiw	r26, 0x01	; 1
    dcd0:	8d 91       	ld	r24, X+
    dcd2:	9d 91       	ld	r25, X+
    dcd4:	ac 91       	ld	r26, X
    dcd6:	81 83       	std	Z+1, r24	; 0x01
    dcd8:	92 83       	std	Z+2, r25	; 0x02
    dcda:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    dcdc:	d2 01       	movw	r26, r4
    dcde:	ec 91       	ld	r30, X
    dce0:	b3 e0       	ldi	r27, 0x03	; 3
    dce2:	eb 02       	muls	r30, r27
    dce4:	f0 01       	movw	r30, r0
    dce6:	11 24       	eor	r1, r1
    dce8:	9f 01       	movw	r18, r30
    dcea:	28 5a       	subi	r18, 0xA8	; 168
    dcec:	34 4f       	sbci	r19, 0xF4	; 244
    dcee:	f2 01       	movw	r30, r4
    dcf0:	81 81       	ldd	r24, Z+1	; 0x01
    dcf2:	92 81       	ldd	r25, Z+2	; 0x02
    dcf4:	a3 81       	ldd	r26, Z+3	; 0x03
    dcf6:	f9 01       	movw	r30, r18
    dcf8:	80 83       	st	Z, r24
    dcfa:	91 83       	std	Z+1, r25	; 0x01
    dcfc:	a2 83       	std	Z+2, r26	; 0x02
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dcfe:	86 e5       	ldi	r24, 0x56	; 86
    dd00:	9b e0       	ldi	r25, 0x0B	; 11
	{
		fade_through();
		load_splash();
	}
#endif
}
    dd02:	0f 90       	pop	r0
    dd04:	df 91       	pop	r29
    dd06:	cf 91       	pop	r28
    dd08:	1f 91       	pop	r17
    dd0a:	0f 91       	pop	r16
    dd0c:	ff 90       	pop	r15
    dd0e:	ef 90       	pop	r14
    dd10:	df 90       	pop	r13
    dd12:	cf 90       	pop	r12
    dd14:	bf 90       	pop	r11
    dd16:	af 90       	pop	r10
    dd18:	9f 90       	pop	r9
    dd1a:	8f 90       	pop	r8
    dd1c:	7f 90       	pop	r7
    dd1e:	5f 90       	pop	r5
    dd20:	4f 90       	pop	r4
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dd22:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <EepromWriteBlock>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		if (!is_net_player(player)) LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		save_eeprom(&handles);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    dd26:	22 30       	cpi	r18, 0x02	; 2
    dd28:	71 f2       	breq	.-100    	; 0xdcc6 <_handle_select_helper+0x290>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING) && !is_net_player(player))
    dd2a:	d1 fe       	sbrs	r13, 1
    dd2c:	58 c0       	rjmp	.+176    	; 0xddde <_handle_select_helper+0x3a8>
    dd2e:	d2 01       	movw	r26, r4
    dd30:	15 96       	adiw	r26, 0x05	; 5
    dd32:	8c 91       	ld	r24, X
    dd34:	81 30       	cpi	r24, 0x01	; 1
    dd36:	41 f4       	brne	.+16     	; 0xdd48 <_handle_select_helper+0x312>
    dd38:	c8 01       	movw	r24, r16
    dd3a:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dd3e:	81 11       	cpse	r24, r1
    dd40:	4e c0       	rjmp	.+156    	; 0xddde <_handle_select_helper+0x3a8>
	{
		ps->select_state = SELECTING;
    dd42:	f2 01       	movw	r30, r4
    dd44:	15 82       	std	Z+5, r1	; 0x05
    dd46:	0b c0       	rjmp	.+22     	; 0xdd5e <_handle_select_helper+0x328>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED) && !is_net_player(player))
    dd48:	82 30       	cpi	r24, 0x02	; 2
    dd4a:	99 f4       	brne	.+38     	; 0xdd72 <_handle_select_helper+0x33c>
    dd4c:	c8 01       	movw	r24, r16
    dd4e:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dd52:	81 11       	cpse	r24, r1
    dd54:	44 c0       	rjmp	.+136    	; 0xddde <_handle_select_helper+0x3a8>
	{
		ps->select_state = EDITING;
    dd56:	81 e0       	ldi	r24, 0x01	; 1
    dd58:	d2 01       	movw	r26, r4
    dd5a:	15 96       	adiw	r26, 0x05	; 5
    dd5c:	8c 93       	st	X, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dd5e:	24 e0       	ldi	r18, 0x04	; 4
    dd60:	40 91 28 0f 	lds	r20, 0x0F28
    dd64:	60 91 b2 0b 	lds	r22, 0x0BB2
    dd68:	80 91 89 0b 	lds	r24, 0x0B89
    dd6c:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
    dd70:	da ce       	rjmp	.-588    	; 0xdb26 <_handle_select_helper+0xf0>
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if (p->pressed & BTN_X && (ps->select_state == SELECTING) && !is_net_player(player))
    dd72:	81 11       	cpse	r24, r1
    dd74:	34 c0       	rjmp	.+104    	; 0xddde <_handle_select_helper+0x3a8>
    dd76:	c8 01       	movw	r24, r16
    dd78:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dd7c:	81 11       	cpse	r24, r1
    dd7e:	10 c0       	rjmp	.+32     	; 0xdda0 <_handle_select_helper+0x36a>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dd80:	21 e0       	ldi	r18, 0x01	; 1
    dd82:	49 e0       	ldi	r20, 0x09	; 9
    dd84:	b7 01       	movw	r22, r14
    dd86:	c8 01       	movw	r24, r16
    dd88:	0e 94 3a 63 	call	0xc674	; 0xc674 <send_smart_net_message>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dd8c:	24 e0       	ldi	r18, 0x04	; 4
    dd8e:	40 91 28 0f 	lds	r20, 0x0F28
    dd92:	60 91 b2 0b 	lds	r22, 0x0BB2
    dd96:	80 91 89 0b 	lds	r24, 0x0B89
    dd9a:	0e 94 b7 4a 	call	0x956e	; 0x956e <LBPlaySound>
    dd9e:	05 c0       	rjmp	.+10     	; 0xddaa <_handle_select_helper+0x374>
		fade_through();
		load_splash();
	}
	else if (p->pressed & BTN_X && (ps->select_state == SELECTING) && is_net_player(player))
    dda0:	c8 01       	movw	r24, r16
    dda2:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <is_net_player>
    dda6:	88 23       	and	r24, r24
    dda8:	d1 f0       	breq	.+52     	; 0xddde <_handle_select_helper+0x3a8>
	{
		fade_through();
    ddaa:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <fade_through>
		load_splash();
	}
#endif
}
    ddae:	0f 90       	pop	r0
    ddb0:	df 91       	pop	r29
    ddb2:	cf 91       	pop	r28
    ddb4:	1f 91       	pop	r17
    ddb6:	0f 91       	pop	r16
    ddb8:	ff 90       	pop	r15
    ddba:	ef 90       	pop	r14
    ddbc:	df 90       	pop	r13
    ddbe:	cf 90       	pop	r12
    ddc0:	bf 90       	pop	r11
    ddc2:	af 90       	pop	r10
    ddc4:	9f 90       	pop	r9
    ddc6:	8f 90       	pop	r8
    ddc8:	7f 90       	pop	r7
    ddca:	5f 90       	pop	r5
    ddcc:	4f 90       	pop	r4
		load_splash();
	}
	else if (p->pressed & BTN_X && (ps->select_state == SELECTING) && is_net_player(player))
	{
		fade_through();
		load_splash();
    ddce:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <load_splash>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    ddd2:	77 20       	and	r7, r7
    ddd4:	09 f4       	brne	.+2      	; 0xddd8 <_handle_select_helper+0x3a2>
    ddd6:	a9 cf       	rjmp	.-174    	; 0xdd2a <_handle_select_helper+0x2f4>
    ddd8:	f2 01       	movw	r30, r4
    ddda:	25 81       	ldd	r18, Z+5	; 0x05
    dddc:	2e cf       	rjmp	.-420    	; 0xdc3a <_handle_select_helper+0x204>
	{
		fade_through();
		load_splash();
	}
#endif
}
    ddde:	0f 90       	pop	r0
    dde0:	df 91       	pop	r29
    dde2:	cf 91       	pop	r28
    dde4:	1f 91       	pop	r17
    dde6:	0f 91       	pop	r16
    dde8:	ff 90       	pop	r15
    ddea:	ef 90       	pop	r14
    ddec:	df 90       	pop	r13
    ddee:	cf 90       	pop	r12
    ddf0:	bf 90       	pop	r11
    ddf2:	af 90       	pop	r10
    ddf4:	9f 90       	pop	r9
    ddf6:	8f 90       	pop	r8
    ddf8:	7f 90       	pop	r7
    ddfa:	5f 90       	pop	r5
    ddfc:	4f 90       	pop	r4
    ddfe:	08 95       	ret

0000de00 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    de00:	0f 93       	push	r16
    de02:	1f 93       	push	r17
    de04:	cf 93       	push	r28
    de06:	df 93       	push	r29
    de08:	ec 01       	movw	r28, r24
    de0a:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&player1.netMessage.ps, p1, 2, 6);
    de0c:	26 e0       	ldi	r18, 0x06	; 6
    de0e:	42 e0       	ldi	r20, 0x02	; 2
    de10:	bc 01       	movw	r22, r24
    de12:	89 e2       	ldi	r24, 0x29	; 41
    de14:	9c e0       	ldi	r25, 0x0C	; 12
    de16:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    de1a:	80 91 89 0b 	lds	r24, 0x0B89
    de1e:	88 23       	and	r24, r24
    de20:	49 f0       	breq	.+18     	; 0xde34 <update_handle_select+0x34>
    de22:	86 30       	cpi	r24, 0x06	; 6
    de24:	39 f0       	breq	.+14     	; 0xde34 <update_handle_select+0x34>
	{
		_handle_select_render_helper(&player2.netMessage.ps, p2, 19, 8);
    de26:	28 e0       	ldi	r18, 0x08	; 8
    de28:	43 e1       	ldi	r20, 0x13	; 19
    de2a:	b8 01       	movw	r22, r16
    de2c:	8f e9       	ldi	r24, 0x9F	; 159
    de2e:	9f e0       	ldi	r25, 0x0F	; 15
    de30:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&player1.netMessage.ps, p1, &player1);
    de34:	48 ea       	ldi	r20, 0xA8	; 168
    de36:	5b e0       	ldi	r21, 0x0B	; 11
    de38:	be 01       	movw	r22, r28
    de3a:	89 e2       	ldi	r24, 0x29	; 41
    de3c:	9c e0       	ldi	r25, 0x0C	; 12
    de3e:	0e 94 1b 6d 	call	0xda36	; 0xda36 <_handle_select_helper>
	if (player1.netMessage.ps.select_state == CONFIRMED) start_game = 1;
    de42:	c1 e0       	ldi	r28, 0x01	; 1
    de44:	80 91 2e 0c 	lds	r24, 0x0C2E
    de48:	82 30       	cpi	r24, 0x02	; 2
    de4a:	09 f0       	breq	.+2      	; 0xde4e <update_handle_select+0x4e>
    de4c:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    de4e:	80 91 89 0b 	lds	r24, 0x0B89
    de52:	88 23       	and	r24, r24
    de54:	49 f1       	breq	.+82     	; 0xdea8 <update_handle_select+0xa8>
    de56:	86 30       	cpi	r24, 0x06	; 6
    de58:	51 f1       	breq	.+84     	; 0xdeae <update_handle_select+0xae>
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
    de5a:	4e e1       	ldi	r20, 0x1E	; 30
    de5c:	5f e0       	ldi	r21, 0x0F	; 15
    de5e:	b8 01       	movw	r22, r16
    de60:	8f e9       	ldi	r24, 0x9F	; 159
    de62:	9f e0       	ldi	r25, 0x0F	; 15
    de64:	0e 94 1b 6d 	call	0xda36	; 0xda36 <_handle_select_helper>
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
    de68:	80 91 a4 0f 	lds	r24, 0x0FA4
    de6c:	82 30       	cpi	r24, 0x02	; 2
    de6e:	09 f5       	brne	.+66     	; 0xdeb2 <update_handle_select+0xb2>
	}
	if (start_game)
    de70:	cc 23       	and	r28, r28
    de72:	f9 f0       	breq	.+62     	; 0xdeb2 <update_handle_select+0xb2>
	{
		if (game.selection == PVCPU)
    de74:	80 91 89 0b 	lds	r24, 0x0B89
    de78:	81 11       	cpse	r24, r1
    de7a:	0f c0       	rjmp	.+30     	; 0xde9a <update_handle_select+0x9a>
		{
			player2.handle_id = 9;
    de7c:	89 e0       	ldi	r24, 0x09	; 9
    de7e:	80 93 1e 0f 	sts	0x0F1E, r24
			memcpy(player2.handle, &handles.data[9*3], 3);
    de82:	80 91 73 0b 	lds	r24, 0x0B73
    de86:	90 91 74 0b 	lds	r25, 0x0B74
    de8a:	a0 91 75 0b 	lds	r26, 0x0B75
    de8e:	80 93 1f 0f 	sts	0x0F1F, r24
    de92:	90 93 20 0f 	sts	0x0F20, r25
    de96:	a0 93 21 0f 	sts	0x0F21, r26
		}
		level_transition(0);
    de9a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    de9c:	df 91       	pop	r29
    de9e:	cf 91       	pop	r28
    dea0:	1f 91       	pop	r17
    dea2:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    dea4:	0c 94 42 58 	jmp	0xb084	; 0xb084 <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dea8:	c1 11       	cpse	r28, r1
    deaa:	e8 cf       	rjmp	.-48     	; 0xde7c <update_handle_select+0x7c>
    deac:	02 c0       	rjmp	.+4      	; 0xdeb2 <update_handle_select+0xb2>
    deae:	c1 11       	cpse	r28, r1
    deb0:	f4 cf       	rjmp	.-24     	; 0xde9a <update_handle_select+0x9a>
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    deb2:	df 91       	pop	r29
    deb4:	cf 91       	pop	r28
    deb6:	1f 91       	pop	r17
    deb8:	0f 91       	pop	r16
    deba:	08 95       	ret

0000debc <player_posture_changed>:
	player->old_held = player->netMessage.joyPadState.held;
}

u8 player_posture_changed(Player* player)
{
	if ((player->old_held & BTN_UP) != (player->netMessage.joyPadState.held & BTN_UP)) return 1;
    debc:	fc 01       	movw	r30, r24
    debe:	e2 58       	subi	r30, 0x82	; 130
    dec0:	ff 4f       	sbci	r31, 0xFF	; 255
    dec2:	20 81       	ld	r18, Z
    dec4:	31 81       	ldd	r19, Z+1	; 0x01
    dec6:	fc 01       	movw	r30, r24
    dec8:	84 8d       	ldd	r24, Z+28	; 0x1c
    deca:	95 8d       	ldd	r25, Z+29	; 0x1d
    decc:	28 27       	eor	r18, r24
    dece:	39 27       	eor	r19, r25
    ded0:	20 7f       	andi	r18, 0xF0	; 240
    ded2:	33 27       	eor	r19, r19
	if ((player->old_held & BTN_DOWN) != (player->netMessage.joyPadState.held & BTN_DOWN)) return 1;
	if ((player->old_held & BTN_LEFT) != (player->netMessage.joyPadState.held & BTN_LEFT)) return 1;
	if ((player->old_held & BTN_RIGHT) != (player->netMessage.joyPadState.held & BTN_RIGHT)) return 1;
    ded4:	81 e0       	ldi	r24, 0x01	; 1
    ded6:	23 2b       	or	r18, r19
    ded8:	09 f4       	brne	.+2      	; 0xdedc <player_posture_changed+0x20>
    deda:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    dedc:	08 95       	ret

0000dede <main>:

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    dede:	0e 94 c6 3a 	call	0x758c	; 0x758c <GetTrueRandomSeed>
    dee2:	0e 94 81 3c 	call	0x7902	; 0x7902 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    dee6:	87 e4       	ldi	r24, 0x47	; 71
    dee8:	95 e0       	ldi	r25, 0x05	; 5
    deea:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <InitMusicPlayer>
	SetMasterVolume(0xff);
    deee:	8f ef       	ldi	r24, 0xFF	; 255
    def0:	0e 94 a9 40 	call	0x8152	; 0x8152 <SetMasterVolume>
	SetTileTable(tiles_data);
    def4:	8c e5       	ldi	r24, 0x5C	; 92
    def6:	91 e3       	ldi	r25, 0x31	; 49
    def8:	0e 94 5f 3a 	call	0x74be	; 0x74be <SetTileTable>
	SetSpritesTileTable(sprites_data);
    defc:	8b ec       	ldi	r24, 0xCB	; 203
    defe:	97 e2       	ldi	r25, 0x27	; 39
    df00:	0e 94 3b 3a 	call	0x7476	; 0x7476 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    df04:	8b e9       	ldi	r24, 0x9B	; 155
    df06:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    df0a:	60 e0       	ldi	r22, 0x00	; 0
    df0c:	83 e0       	ldi	r24, 0x03	; 3
    df0e:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	ClearVram();
    df12:	0e 94 40 3a 	call	0x7480	; 0x7480 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    df16:	86 e3       	ldi	r24, 0x36	; 54
    df18:	9b e0       	ldi	r25, 0x0B	; 11
    df1a:	0e 94 56 4d 	call	0x9aac	; 0x9aac <init_scores>
	init_handles(&handles);
    df1e:	86 e5       	ldi	r24, 0x56	; 86
    df20:	9b e0       	ldi	r25, 0x0B	; 11
    df22:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <init_handles>
	init_game_state();
    df26:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <init_game_state>
	load_credits();
    df2a:	0e 94 13 63 	call	0xc626	; 0xc626 <load_credits>
	load_splash();
    df2e:	0e 94 3b 59 	call	0xb276	; 0xb276 <load_splash>
	
	while (1)
	{
		waitForVSync();
    df32:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <waitForVSync>
		get_net_message(0);
    df36:	80 e0       	ldi	r24, 0x00	; 0
    df38:	0e 94 4d 63 	call	0xc69a	; 0xc69a <get_net_message>
		switch (game.current_screen)
    df3c:	80 91 76 0b 	lds	r24, 0x0B76
    df40:	82 30       	cpi	r24, 0x02	; 2
    df42:	61 f1       	breq	.+88     	; 0xdf9c <main+0xbe>
    df44:	78 f4       	brcc	.+30     	; 0xdf64 <main+0x86>
    df46:	88 23       	and	r24, r24
    df48:	e9 f0       	breq	.+58     	; 0xdf84 <main+0xa6>
    df4a:	81 30       	cpi	r24, 0x01	; 1
    df4c:	09 f0       	breq	.+2      	; 0xdf50 <main+0x72>
    df4e:	b1 c0       	rjmp	.+354    	; 0xe0b2 <main+0x1d4>
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    df50:	60 e0       	ldi	r22, 0x00	; 0
    df52:	82 e2       	ldi	r24, 0x22	; 34
    df54:	9c e0       	ldi	r25, 0x0C	; 12
    df56:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				update_tank_rank(&player1.netMessage.joyPadState);
    df5a:	82 e2       	ldi	r24, 0x22	; 34
    df5c:	9c e0       	ldi	r25, 0x0C	; 12
    df5e:	0e 94 f9 5a 	call	0xb5f2	; 0xb5f2 <update_tank_rank>
				break;
    df62:	a7 c0       	rjmp	.+334    	; 0xe0b2 <main+0x1d4>
	
	while (1)
	{
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
    df64:	84 30       	cpi	r24, 0x04	; 4
    df66:	a1 f1       	breq	.+104    	; 0xdfd0 <main+0xf2>
    df68:	e8 f1       	brcs	.+122    	; 0xdfe4 <main+0x106>
    df6a:	85 30       	cpi	r24, 0x05	; 5
    df6c:	09 f0       	breq	.+2      	; 0xdf70 <main+0x92>
    df6e:	a1 c0       	rjmp	.+322    	; 0xe0b2 <main+0x1d4>
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_host_net_game(&player1.netMessage.joyPadState);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    df70:	60 e0       	ldi	r22, 0x00	; 0
    df72:	82 e2       	ldi	r24, 0x22	; 34
    df74:	9c e0       	ldi	r25, 0x0C	; 12
    df76:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				update_join_net_game(&player1.netMessage.joyPadState);
    df7a:	82 e2       	ldi	r24, 0x22	; 34
    df7c:	9c e0       	ldi	r25, 0x0C	; 12
    df7e:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <update_join_net_game>
				break;
    df82:	97 c0       	rjmp	.+302    	; 0xe0b2 <main+0x1d4>
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    df84:	60 e0       	ldi	r22, 0x00	; 0
    df86:	82 e2       	ldi	r24, 0x22	; 34
    df88:	9c e0       	ldi	r25, 0x0C	; 12
    df8a:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    df8e:	68 e9       	ldi	r22, 0x98	; 152
    df90:	7f e0       	ldi	r23, 0x0F	; 15
    df92:	82 e2       	ldi	r24, 0x22	; 34
    df94:	9c e0       	ldi	r25, 0x0C	; 12
    df96:	0e 94 48 5d 	call	0xba90	; 0xba90 <update_splash>
				break;
    df9a:	8b c0       	rjmp	.+278    	; 0xe0b2 <main+0x1d4>
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    df9c:	80 91 89 0b 	lds	r24, 0x0B89
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    dfa0:	60 e0       	ldi	r22, 0x00	; 0
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    dfa2:	82 30       	cpi	r24, 0x02	; 2
    dfa4:	19 f4       	brne	.+6      	; 0xdfac <main+0xce>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    dfa6:	82 e2       	ldi	r24, 0x22	; 34
    dfa8:	9c e0       	ldi	r25, 0x0C	; 12
    dfaa:	09 c0       	rjmp	.+18     	; 0xdfbe <main+0xe0>
				}
				else if (game.selection == JOINNETGAME)
    dfac:	83 30       	cpi	r24, 0x03	; 3
    dfae:	29 f0       	breq	.+10     	; 0xdfba <main+0xdc>
				{
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    dfb0:	82 e2       	ldi	r24, 0x22	; 34
    dfb2:	9c e0       	ldi	r25, 0x0C	; 12
    dfb4:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    dfb8:	61 e0       	ldi	r22, 0x01	; 1
    dfba:	88 e9       	ldi	r24, 0x98	; 152
    dfbc:	9f e0       	ldi	r25, 0x0F	; 15
    dfbe:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				}
				update_handle_select(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    dfc2:	68 e9       	ldi	r22, 0x98	; 152
    dfc4:	7f e0       	ldi	r23, 0x0F	; 15
    dfc6:	82 e2       	ldi	r24, 0x22	; 34
    dfc8:	9c e0       	ldi	r25, 0x0C	; 12
    dfca:	0e 94 00 6f 	call	0xde00	; 0xde00 <update_handle_select>
				break;
    dfce:	71 c0       	rjmp	.+226    	; 0xe0b2 <main+0x1d4>
#if JAMMA
#else
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    dfd0:	60 e0       	ldi	r22, 0x00	; 0
    dfd2:	82 e2       	ldi	r24, 0x22	; 34
    dfd4:	9c e0       	ldi	r25, 0x0C	; 12
    dfd6:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				update_host_net_game(&player1.netMessage.joyPadState);
    dfda:	82 e2       	ldi	r24, 0x22	; 34
    dfdc:	9c e0       	ldi	r25, 0x0C	; 12
    dfde:	0e 94 e8 5c 	call	0xb9d0	; 0xb9d0 <update_host_net_game>
				break;
    dfe2:	67 c0       	rjmp	.+206    	; 0xe0b2 <main+0x1d4>
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_join_net_game(&player1.netMessage.joyPadState);
				break;
#endif
			case LEVEL:
				if (game.selection == PVCPU)
    dfe4:	80 91 89 0b 	lds	r24, 0x0B89
    dfe8:	81 11       	cpse	r24, r1
    dfea:	06 c0       	rjmp	.+12     	; 0xdff8 <main+0x11a>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    dfec:	60 e0       	ldi	r22, 0x00	; 0
    dfee:	82 e2       	ldi	r24, 0x22	; 34
    dff0:	9c e0       	ldi	r25, 0x0C	; 12
    dff2:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
    dff6:	0a c0       	rjmp	.+20     	; 0xe00c <main+0x12e>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == CPUVCPU)
    dff8:	86 30       	cpi	r24, 0x06	; 6
    dffa:	89 f4       	brne	.+34     	; 0xe01e <main+0x140>
				{
					get_cpu_joypad_state(&player1, &player2, &player1.netMessage.joyPadState);
    dffc:	42 e2       	ldi	r20, 0x22	; 34
    dffe:	5c e0       	ldi	r21, 0x0C	; 12
    e000:	6e e1       	ldi	r22, 0x1E	; 30
    e002:	7f e0       	ldi	r23, 0x0F	; 15
    e004:	88 ea       	ldi	r24, 0xA8	; 168
    e006:	9b e0       	ldi	r25, 0x0B	; 11
    e008:	0e 94 9f 60 	call	0xc13e	; 0xc13e <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
    e00c:	48 e9       	ldi	r20, 0x98	; 152
    e00e:	5f e0       	ldi	r21, 0x0F	; 15
    e010:	68 ea       	ldi	r22, 0xA8	; 168
    e012:	7b e0       	ldi	r23, 0x0B	; 11
    e014:	8e e1       	ldi	r24, 0x1E	; 30
    e016:	9f e0       	ldi	r25, 0x0F	; 15
    e018:	0e 94 9f 60 	call	0xc13e	; 0xc13e <get_cpu_joypad_state>
    e01c:	44 c0       	rjmp	.+136    	; 0xe0a6 <main+0x1c8>
				}
				else if (game.selection == HOSTNETGAME)
    e01e:	82 30       	cpi	r24, 0x02	; 2
    e020:	d1 f4       	brne	.+52     	; 0xe056 <main+0x178>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e022:	80 91 26 0c 	lds	r24, 0x0C26
    e026:	90 91 27 0c 	lds	r25, 0x0C27
    e02a:	90 93 c5 0b 	sts	0x0BC5, r25
    e02e:	80 93 c4 0b 	sts	0x0BC4, r24
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == HOSTNETGAME)
				{
					record_player_posture(&player1);
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e032:	60 e0       	ldi	r22, 0x00	; 0
    e034:	82 e2       	ldi	r24, 0x22	; 34
    e036:	9c e0       	ldi	r25, 0x0C	; 12
    e038:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
					if (player_posture_changed(&player1)) send_smart_net_message(&player1, &player1.netMessage.joyPadState, NETPOSCHANGE, 0);
    e03c:	88 ea       	ldi	r24, 0xA8	; 168
    e03e:	9b e0       	ldi	r25, 0x0B	; 11
    e040:	0e 94 5e 6f 	call	0xdebc	; 0xdebc <player_posture_changed>
    e044:	88 23       	and	r24, r24
    e046:	79 f1       	breq	.+94     	; 0xe0a6 <main+0x1c8>
    e048:	20 e0       	ldi	r18, 0x00	; 0
    e04a:	46 e0       	ldi	r20, 0x06	; 6
    e04c:	62 e2       	ldi	r22, 0x22	; 34
    e04e:	7c e0       	ldi	r23, 0x0C	; 12
    e050:	88 ea       	ldi	r24, 0xA8	; 168
    e052:	9b e0       	ldi	r25, 0x0B	; 11
    e054:	1b c0       	rjmp	.+54     	; 0xe08c <main+0x1ae>
					
				}
				else if (game.selection == JOINNETGAME)
    e056:	83 30       	cpi	r24, 0x03	; 3
    e058:	e1 f4       	brne	.+56     	; 0xe092 <main+0x1b4>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e05a:	80 91 9c 0f 	lds	r24, 0x0F9C
    e05e:	90 91 9d 0f 	lds	r25, 0x0F9D
    e062:	90 93 3b 0f 	sts	0x0F3B, r25
    e066:	80 93 3a 0f 	sts	0x0F3A, r24
					
				}
				else if (game.selection == JOINNETGAME)
				{
					record_player_posture(&player2);
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
    e06a:	60 e0       	ldi	r22, 0x00	; 0
    e06c:	88 e9       	ldi	r24, 0x98	; 152
    e06e:	9f e0       	ldi	r25, 0x0F	; 15
    e070:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
					if (player_posture_changed(&player2)) send_smart_net_message(&player2, &player2.netMessage.joyPadState, NETPOSCHANGE, 0);
    e074:	8e e1       	ldi	r24, 0x1E	; 30
    e076:	9f e0       	ldi	r25, 0x0F	; 15
    e078:	0e 94 5e 6f 	call	0xdebc	; 0xdebc <player_posture_changed>
    e07c:	88 23       	and	r24, r24
    e07e:	99 f0       	breq	.+38     	; 0xe0a6 <main+0x1c8>
    e080:	20 e0       	ldi	r18, 0x00	; 0
    e082:	46 e0       	ldi	r20, 0x06	; 6
    e084:	68 e9       	ldi	r22, 0x98	; 152
    e086:	7f e0       	ldi	r23, 0x0F	; 15
    e088:	8e e1       	ldi	r24, 0x1E	; 30
    e08a:	9f e0       	ldi	r25, 0x0F	; 15
    e08c:	0e 94 3a 63 	call	0xc674	; 0xc674 <send_smart_net_message>
    e090:	0a c0       	rjmp	.+20     	; 0xe0a6 <main+0x1c8>
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e092:	60 e0       	ldi	r22, 0x00	; 0
    e094:	82 e2       	ldi	r24, 0x22	; 34
    e096:	9c e0       	ldi	r25, 0x0C	; 12
    e098:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    e09c:	61 e0       	ldi	r22, 0x01	; 1
    e09e:	88 e9       	ldi	r24, 0x98	; 152
    e0a0:	9f e0       	ldi	r25, 0x0F	; 15
    e0a2:	0e 94 df 49 	call	0x93be	; 0x93be <LBGetJoyPadState>
				}
				update_level(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e0a6:	68 e9       	ldi	r22, 0x98	; 152
    e0a8:	7f e0       	ldi	r23, 0x0F	; 15
    e0aa:	82 e2       	ldi	r24, 0x22	; 34
    e0ac:	9c e0       	ldi	r25, 0x0C	; 12
    e0ae:	0e 94 e7 6a 	call	0xd5ce	; 0xd5ce <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e0b2:	80 91 0b 01 	lds	r24, 0x010B
    e0b6:	90 91 0c 01 	lds	r25, 0x010C
    e0ba:	01 96       	adiw	r24, 0x01	; 1
    e0bc:	90 93 0c 01 	sts	0x010C, r25
    e0c0:	80 93 0b 01 	sts	0x010B, r24
	}
    e0c4:	36 cf       	rjmp	.-404    	; 0xdf32 <main+0x54>

0000e0c6 <__udivmodqi4>:
    e0c6:	99 1b       	sub	r25, r25
    e0c8:	79 e0       	ldi	r23, 0x09	; 9
    e0ca:	04 c0       	rjmp	.+8      	; 0xe0d4 <__udivmodqi4_ep>

0000e0cc <__udivmodqi4_loop>:
    e0cc:	99 1f       	adc	r25, r25
    e0ce:	96 17       	cp	r25, r22
    e0d0:	08 f0       	brcs	.+2      	; 0xe0d4 <__udivmodqi4_ep>
    e0d2:	96 1b       	sub	r25, r22

0000e0d4 <__udivmodqi4_ep>:
    e0d4:	88 1f       	adc	r24, r24
    e0d6:	7a 95       	dec	r23
    e0d8:	c9 f7       	brne	.-14     	; 0xe0cc <__udivmodqi4_loop>
    e0da:	80 95       	com	r24
    e0dc:	08 95       	ret

0000e0de <__udivmodhi4>:
    e0de:	aa 1b       	sub	r26, r26
    e0e0:	bb 1b       	sub	r27, r27
    e0e2:	51 e1       	ldi	r21, 0x11	; 17
    e0e4:	07 c0       	rjmp	.+14     	; 0xe0f4 <__udivmodhi4_ep>

0000e0e6 <__udivmodhi4_loop>:
    e0e6:	aa 1f       	adc	r26, r26
    e0e8:	bb 1f       	adc	r27, r27
    e0ea:	a6 17       	cp	r26, r22
    e0ec:	b7 07       	cpc	r27, r23
    e0ee:	10 f0       	brcs	.+4      	; 0xe0f4 <__udivmodhi4_ep>
    e0f0:	a6 1b       	sub	r26, r22
    e0f2:	b7 0b       	sbc	r27, r23

0000e0f4 <__udivmodhi4_ep>:
    e0f4:	88 1f       	adc	r24, r24
    e0f6:	99 1f       	adc	r25, r25
    e0f8:	5a 95       	dec	r21
    e0fa:	a9 f7       	brne	.-22     	; 0xe0e6 <__udivmodhi4_loop>
    e0fc:	80 95       	com	r24
    e0fe:	90 95       	com	r25
    e100:	bc 01       	movw	r22, r24
    e102:	cd 01       	movw	r24, r26
    e104:	08 95       	ret

0000e106 <__divmodhi4>:
    e106:	97 fb       	bst	r25, 7
    e108:	07 2e       	mov	r0, r23
    e10a:	16 f4       	brtc	.+4      	; 0xe110 <__divmodhi4+0xa>
    e10c:	00 94       	com	r0
    e10e:	07 d0       	rcall	.+14     	; 0xe11e <__divmodhi4_neg1>
    e110:	77 fd       	sbrc	r23, 7
    e112:	09 d0       	rcall	.+18     	; 0xe126 <__divmodhi4_neg2>
    e114:	0e 94 6f 70 	call	0xe0de	; 0xe0de <__udivmodhi4>
    e118:	07 fc       	sbrc	r0, 7
    e11a:	05 d0       	rcall	.+10     	; 0xe126 <__divmodhi4_neg2>
    e11c:	3e f4       	brtc	.+14     	; 0xe12c <__divmodhi4_exit>

0000e11e <__divmodhi4_neg1>:
    e11e:	90 95       	com	r25
    e120:	81 95       	neg	r24
    e122:	9f 4f       	sbci	r25, 0xFF	; 255
    e124:	08 95       	ret

0000e126 <__divmodhi4_neg2>:
    e126:	70 95       	com	r23
    e128:	61 95       	neg	r22
    e12a:	7f 4f       	sbci	r23, 0xFF	; 255

0000e12c <__divmodhi4_exit>:
    e12c:	08 95       	ret

0000e12e <memcpy_P>:
    e12e:	fb 01       	movw	r30, r22
    e130:	dc 01       	movw	r26, r24
    e132:	02 c0       	rjmp	.+4      	; 0xe138 <memcpy_P+0xa>
    e134:	05 90       	lpm	r0, Z+
    e136:	0d 92       	st	X+, r0
    e138:	41 50       	subi	r20, 0x01	; 1
    e13a:	50 40       	sbci	r21, 0x00	; 0
    e13c:	d8 f7       	brcc	.-10     	; 0xe134 <memcpy_P+0x6>
    e13e:	08 95       	ret

0000e140 <strnlen_P>:
    e140:	fc 01       	movw	r30, r24
    e142:	05 90       	lpm	r0, Z+
    e144:	61 50       	subi	r22, 0x01	; 1
    e146:	70 40       	sbci	r23, 0x00	; 0
    e148:	01 10       	cpse	r0, r1
    e14a:	d8 f7       	brcc	.-10     	; 0xe142 <strnlen_P+0x2>
    e14c:	80 95       	com	r24
    e14e:	90 95       	com	r25
    e150:	8e 0f       	add	r24, r30
    e152:	9f 1f       	adc	r25, r31
    e154:	08 95       	ret

0000e156 <strupr>:
    e156:	dc 01       	movw	r26, r24
    e158:	6c 91       	ld	r22, X
    e15a:	61 56       	subi	r22, 0x61	; 97
    e15c:	6a 31       	cpi	r22, 0x1A	; 26
    e15e:	08 f0       	brcs	.+2      	; 0xe162 <strupr+0xc>
    e160:	60 5e       	subi	r22, 0xE0	; 224
    e162:	6f 5b       	subi	r22, 0xBF	; 191
    e164:	6d 93       	st	X+, r22
    e166:	c1 f7       	brne	.-16     	; 0xe158 <strupr+0x2>
    e168:	08 95       	ret

0000e16a <sprintf>:
    e16a:	ae e0       	ldi	r26, 0x0E	; 14
    e16c:	b0 e0       	ldi	r27, 0x00	; 0
    e16e:	eb eb       	ldi	r30, 0xBB	; 187
    e170:	f0 e7       	ldi	r31, 0x70	; 112
    e172:	0c 94 59 73 	jmp	0xe6b2	; 0xe6b2 <__prologue_saves__+0x1c>
    e176:	0d 89       	ldd	r16, Y+21	; 0x15
    e178:	1e 89       	ldd	r17, Y+22	; 0x16
    e17a:	86 e0       	ldi	r24, 0x06	; 6
    e17c:	8c 83       	std	Y+4, r24	; 0x04
    e17e:	1a 83       	std	Y+2, r17	; 0x02
    e180:	09 83       	std	Y+1, r16	; 0x01
    e182:	8f ef       	ldi	r24, 0xFF	; 255
    e184:	9f e7       	ldi	r25, 0x7F	; 127
    e186:	9e 83       	std	Y+6, r25	; 0x06
    e188:	8d 83       	std	Y+5, r24	; 0x05
    e18a:	ae 01       	movw	r20, r28
    e18c:	47 5e       	subi	r20, 0xE7	; 231
    e18e:	5f 4f       	sbci	r21, 0xFF	; 255
    e190:	6f 89       	ldd	r22, Y+23	; 0x17
    e192:	78 8d       	ldd	r23, Y+24	; 0x18
    e194:	ce 01       	movw	r24, r28
    e196:	01 96       	adiw	r24, 0x01	; 1
    e198:	0e 94 d8 70 	call	0xe1b0	; 0xe1b0 <vfprintf>
    e19c:	2f 81       	ldd	r18, Y+7	; 0x07
    e19e:	38 85       	ldd	r19, Y+8	; 0x08
    e1a0:	f8 01       	movw	r30, r16
    e1a2:	e2 0f       	add	r30, r18
    e1a4:	f3 1f       	adc	r31, r19
    e1a6:	10 82       	st	Z, r1
    e1a8:	2e 96       	adiw	r28, 0x0e	; 14
    e1aa:	e4 e0       	ldi	r30, 0x04	; 4
    e1ac:	0c 94 75 73 	jmp	0xe6ea	; 0xe6ea <__epilogue_restores__+0x1c>

0000e1b0 <vfprintf>:
    e1b0:	ac e0       	ldi	r26, 0x0C	; 12
    e1b2:	b0 e0       	ldi	r27, 0x00	; 0
    e1b4:	ee ed       	ldi	r30, 0xDE	; 222
    e1b6:	f0 e7       	ldi	r31, 0x70	; 112
    e1b8:	0c 94 4b 73 	jmp	0xe696	; 0xe696 <__prologue_saves__>
    e1bc:	7c 01       	movw	r14, r24
    e1be:	6b 01       	movw	r12, r22
    e1c0:	8a 01       	movw	r16, r20
    e1c2:	fc 01       	movw	r30, r24
    e1c4:	17 82       	std	Z+7, r1	; 0x07
    e1c6:	16 82       	std	Z+6, r1	; 0x06
    e1c8:	83 81       	ldd	r24, Z+3	; 0x03
    e1ca:	81 ff       	sbrs	r24, 1
    e1cc:	bd c1       	rjmp	.+890    	; 0xe548 <vfprintf+0x398>
    e1ce:	ce 01       	movw	r24, r28
    e1d0:	01 96       	adiw	r24, 0x01	; 1
    e1d2:	4c 01       	movw	r8, r24
    e1d4:	f7 01       	movw	r30, r14
    e1d6:	93 81       	ldd	r25, Z+3	; 0x03
    e1d8:	f6 01       	movw	r30, r12
    e1da:	93 fd       	sbrc	r25, 3
    e1dc:	85 91       	lpm	r24, Z+
    e1de:	93 ff       	sbrs	r25, 3
    e1e0:	81 91       	ld	r24, Z+
    e1e2:	6f 01       	movw	r12, r30
    e1e4:	88 23       	and	r24, r24
    e1e6:	09 f4       	brne	.+2      	; 0xe1ea <vfprintf+0x3a>
    e1e8:	ab c1       	rjmp	.+854    	; 0xe540 <vfprintf+0x390>
    e1ea:	85 32       	cpi	r24, 0x25	; 37
    e1ec:	39 f4       	brne	.+14     	; 0xe1fc <vfprintf+0x4c>
    e1ee:	93 fd       	sbrc	r25, 3
    e1f0:	85 91       	lpm	r24, Z+
    e1f2:	93 ff       	sbrs	r25, 3
    e1f4:	81 91       	ld	r24, Z+
    e1f6:	6f 01       	movw	r12, r30
    e1f8:	85 32       	cpi	r24, 0x25	; 37
    e1fa:	29 f4       	brne	.+10     	; 0xe206 <vfprintf+0x56>
    e1fc:	b7 01       	movw	r22, r14
    e1fe:	90 e0       	ldi	r25, 0x00	; 0
    e200:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e204:	e7 cf       	rjmp	.-50     	; 0xe1d4 <vfprintf+0x24>
    e206:	51 2c       	mov	r5, r1
    e208:	31 2c       	mov	r3, r1
    e20a:	20 e0       	ldi	r18, 0x00	; 0
    e20c:	20 32       	cpi	r18, 0x20	; 32
    e20e:	a0 f4       	brcc	.+40     	; 0xe238 <vfprintf+0x88>
    e210:	8b 32       	cpi	r24, 0x2B	; 43
    e212:	69 f0       	breq	.+26     	; 0xe22e <vfprintf+0x7e>
    e214:	30 f4       	brcc	.+12     	; 0xe222 <vfprintf+0x72>
    e216:	80 32       	cpi	r24, 0x20	; 32
    e218:	59 f0       	breq	.+22     	; 0xe230 <vfprintf+0x80>
    e21a:	83 32       	cpi	r24, 0x23	; 35
    e21c:	69 f4       	brne	.+26     	; 0xe238 <vfprintf+0x88>
    e21e:	20 61       	ori	r18, 0x10	; 16
    e220:	2c c0       	rjmp	.+88     	; 0xe27a <vfprintf+0xca>
    e222:	8d 32       	cpi	r24, 0x2D	; 45
    e224:	39 f0       	breq	.+14     	; 0xe234 <vfprintf+0x84>
    e226:	80 33       	cpi	r24, 0x30	; 48
    e228:	39 f4       	brne	.+14     	; 0xe238 <vfprintf+0x88>
    e22a:	21 60       	ori	r18, 0x01	; 1
    e22c:	26 c0       	rjmp	.+76     	; 0xe27a <vfprintf+0xca>
    e22e:	22 60       	ori	r18, 0x02	; 2
    e230:	24 60       	ori	r18, 0x04	; 4
    e232:	23 c0       	rjmp	.+70     	; 0xe27a <vfprintf+0xca>
    e234:	28 60       	ori	r18, 0x08	; 8
    e236:	21 c0       	rjmp	.+66     	; 0xe27a <vfprintf+0xca>
    e238:	27 fd       	sbrc	r18, 7
    e23a:	27 c0       	rjmp	.+78     	; 0xe28a <vfprintf+0xda>
    e23c:	30 ed       	ldi	r19, 0xD0	; 208
    e23e:	38 0f       	add	r19, r24
    e240:	3a 30       	cpi	r19, 0x0A	; 10
    e242:	78 f4       	brcc	.+30     	; 0xe262 <vfprintf+0xb2>
    e244:	26 ff       	sbrs	r18, 6
    e246:	06 c0       	rjmp	.+12     	; 0xe254 <vfprintf+0xa4>
    e248:	fa e0       	ldi	r31, 0x0A	; 10
    e24a:	5f 9e       	mul	r5, r31
    e24c:	30 0d       	add	r19, r0
    e24e:	11 24       	eor	r1, r1
    e250:	53 2e       	mov	r5, r19
    e252:	13 c0       	rjmp	.+38     	; 0xe27a <vfprintf+0xca>
    e254:	8a e0       	ldi	r24, 0x0A	; 10
    e256:	38 9e       	mul	r3, r24
    e258:	30 0d       	add	r19, r0
    e25a:	11 24       	eor	r1, r1
    e25c:	33 2e       	mov	r3, r19
    e25e:	20 62       	ori	r18, 0x20	; 32
    e260:	0c c0       	rjmp	.+24     	; 0xe27a <vfprintf+0xca>
    e262:	8e 32       	cpi	r24, 0x2E	; 46
    e264:	21 f4       	brne	.+8      	; 0xe26e <vfprintf+0xbe>
    e266:	26 fd       	sbrc	r18, 6
    e268:	6b c1       	rjmp	.+726    	; 0xe540 <vfprintf+0x390>
    e26a:	20 64       	ori	r18, 0x40	; 64
    e26c:	06 c0       	rjmp	.+12     	; 0xe27a <vfprintf+0xca>
    e26e:	8c 36       	cpi	r24, 0x6C	; 108
    e270:	11 f4       	brne	.+4      	; 0xe276 <vfprintf+0xc6>
    e272:	20 68       	ori	r18, 0x80	; 128
    e274:	02 c0       	rjmp	.+4      	; 0xe27a <vfprintf+0xca>
    e276:	88 36       	cpi	r24, 0x68	; 104
    e278:	41 f4       	brne	.+16     	; 0xe28a <vfprintf+0xda>
    e27a:	f6 01       	movw	r30, r12
    e27c:	93 fd       	sbrc	r25, 3
    e27e:	85 91       	lpm	r24, Z+
    e280:	93 ff       	sbrs	r25, 3
    e282:	81 91       	ld	r24, Z+
    e284:	6f 01       	movw	r12, r30
    e286:	81 11       	cpse	r24, r1
    e288:	c1 cf       	rjmp	.-126    	; 0xe20c <vfprintf+0x5c>
    e28a:	98 2f       	mov	r25, r24
    e28c:	9f 7d       	andi	r25, 0xDF	; 223
    e28e:	95 54       	subi	r25, 0x45	; 69
    e290:	93 30       	cpi	r25, 0x03	; 3
    e292:	28 f4       	brcc	.+10     	; 0xe29e <vfprintf+0xee>
    e294:	0c 5f       	subi	r16, 0xFC	; 252
    e296:	1f 4f       	sbci	r17, 0xFF	; 255
    e298:	ff e3       	ldi	r31, 0x3F	; 63
    e29a:	f9 83       	std	Y+1, r31	; 0x01
    e29c:	0d c0       	rjmp	.+26     	; 0xe2b8 <vfprintf+0x108>
    e29e:	83 36       	cpi	r24, 0x63	; 99
    e2a0:	31 f0       	breq	.+12     	; 0xe2ae <vfprintf+0xfe>
    e2a2:	83 37       	cpi	r24, 0x73	; 115
    e2a4:	71 f0       	breq	.+28     	; 0xe2c2 <vfprintf+0x112>
    e2a6:	83 35       	cpi	r24, 0x53	; 83
    e2a8:	09 f0       	breq	.+2      	; 0xe2ac <vfprintf+0xfc>
    e2aa:	5b c0       	rjmp	.+182    	; 0xe362 <vfprintf+0x1b2>
    e2ac:	22 c0       	rjmp	.+68     	; 0xe2f2 <vfprintf+0x142>
    e2ae:	f8 01       	movw	r30, r16
    e2b0:	80 81       	ld	r24, Z
    e2b2:	89 83       	std	Y+1, r24	; 0x01
    e2b4:	0e 5f       	subi	r16, 0xFE	; 254
    e2b6:	1f 4f       	sbci	r17, 0xFF	; 255
    e2b8:	44 24       	eor	r4, r4
    e2ba:	43 94       	inc	r4
    e2bc:	51 2c       	mov	r5, r1
    e2be:	54 01       	movw	r10, r8
    e2c0:	15 c0       	rjmp	.+42     	; 0xe2ec <vfprintf+0x13c>
    e2c2:	38 01       	movw	r6, r16
    e2c4:	f2 e0       	ldi	r31, 0x02	; 2
    e2c6:	6f 0e       	add	r6, r31
    e2c8:	71 1c       	adc	r7, r1
    e2ca:	f8 01       	movw	r30, r16
    e2cc:	a0 80       	ld	r10, Z
    e2ce:	b1 80       	ldd	r11, Z+1	; 0x01
    e2d0:	26 ff       	sbrs	r18, 6
    e2d2:	03 c0       	rjmp	.+6      	; 0xe2da <vfprintf+0x12a>
    e2d4:	65 2d       	mov	r22, r5
    e2d6:	70 e0       	ldi	r23, 0x00	; 0
    e2d8:	02 c0       	rjmp	.+4      	; 0xe2de <vfprintf+0x12e>
    e2da:	6f ef       	ldi	r22, 0xFF	; 255
    e2dc:	7f ef       	ldi	r23, 0xFF	; 255
    e2de:	c5 01       	movw	r24, r10
    e2e0:	2c 87       	std	Y+12, r18	; 0x0c
    e2e2:	0e 94 aa 72 	call	0xe554	; 0xe554 <strnlen>
    e2e6:	2c 01       	movw	r4, r24
    e2e8:	83 01       	movw	r16, r6
    e2ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    e2ec:	2f 77       	andi	r18, 0x7F	; 127
    e2ee:	22 2e       	mov	r2, r18
    e2f0:	17 c0       	rjmp	.+46     	; 0xe320 <vfprintf+0x170>
    e2f2:	38 01       	movw	r6, r16
    e2f4:	f2 e0       	ldi	r31, 0x02	; 2
    e2f6:	6f 0e       	add	r6, r31
    e2f8:	71 1c       	adc	r7, r1
    e2fa:	f8 01       	movw	r30, r16
    e2fc:	a0 80       	ld	r10, Z
    e2fe:	b1 80       	ldd	r11, Z+1	; 0x01
    e300:	26 ff       	sbrs	r18, 6
    e302:	03 c0       	rjmp	.+6      	; 0xe30a <vfprintf+0x15a>
    e304:	65 2d       	mov	r22, r5
    e306:	70 e0       	ldi	r23, 0x00	; 0
    e308:	02 c0       	rjmp	.+4      	; 0xe30e <vfprintf+0x15e>
    e30a:	6f ef       	ldi	r22, 0xFF	; 255
    e30c:	7f ef       	ldi	r23, 0xFF	; 255
    e30e:	c5 01       	movw	r24, r10
    e310:	2c 87       	std	Y+12, r18	; 0x0c
    e312:	0e 94 a0 70 	call	0xe140	; 0xe140 <strnlen_P>
    e316:	2c 01       	movw	r4, r24
    e318:	2c 85       	ldd	r18, Y+12	; 0x0c
    e31a:	20 68       	ori	r18, 0x80	; 128
    e31c:	22 2e       	mov	r2, r18
    e31e:	83 01       	movw	r16, r6
    e320:	23 fc       	sbrc	r2, 3
    e322:	1b c0       	rjmp	.+54     	; 0xe35a <vfprintf+0x1aa>
    e324:	83 2d       	mov	r24, r3
    e326:	90 e0       	ldi	r25, 0x00	; 0
    e328:	48 16       	cp	r4, r24
    e32a:	59 06       	cpc	r5, r25
    e32c:	b0 f4       	brcc	.+44     	; 0xe35a <vfprintf+0x1aa>
    e32e:	b7 01       	movw	r22, r14
    e330:	80 e2       	ldi	r24, 0x20	; 32
    e332:	90 e0       	ldi	r25, 0x00	; 0
    e334:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e338:	3a 94       	dec	r3
    e33a:	f4 cf       	rjmp	.-24     	; 0xe324 <vfprintf+0x174>
    e33c:	f5 01       	movw	r30, r10
    e33e:	27 fc       	sbrc	r2, 7
    e340:	85 91       	lpm	r24, Z+
    e342:	27 fe       	sbrs	r2, 7
    e344:	81 91       	ld	r24, Z+
    e346:	5f 01       	movw	r10, r30
    e348:	b7 01       	movw	r22, r14
    e34a:	90 e0       	ldi	r25, 0x00	; 0
    e34c:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e350:	31 10       	cpse	r3, r1
    e352:	3a 94       	dec	r3
    e354:	f1 e0       	ldi	r31, 0x01	; 1
    e356:	4f 1a       	sub	r4, r31
    e358:	51 08       	sbc	r5, r1
    e35a:	41 14       	cp	r4, r1
    e35c:	51 04       	cpc	r5, r1
    e35e:	71 f7       	brne	.-36     	; 0xe33c <vfprintf+0x18c>
    e360:	e5 c0       	rjmp	.+458    	; 0xe52c <vfprintf+0x37c>
    e362:	84 36       	cpi	r24, 0x64	; 100
    e364:	11 f0       	breq	.+4      	; 0xe36a <vfprintf+0x1ba>
    e366:	89 36       	cpi	r24, 0x69	; 105
    e368:	39 f5       	brne	.+78     	; 0xe3b8 <vfprintf+0x208>
    e36a:	f8 01       	movw	r30, r16
    e36c:	27 ff       	sbrs	r18, 7
    e36e:	07 c0       	rjmp	.+14     	; 0xe37e <vfprintf+0x1ce>
    e370:	60 81       	ld	r22, Z
    e372:	71 81       	ldd	r23, Z+1	; 0x01
    e374:	82 81       	ldd	r24, Z+2	; 0x02
    e376:	93 81       	ldd	r25, Z+3	; 0x03
    e378:	0c 5f       	subi	r16, 0xFC	; 252
    e37a:	1f 4f       	sbci	r17, 0xFF	; 255
    e37c:	08 c0       	rjmp	.+16     	; 0xe38e <vfprintf+0x1de>
    e37e:	60 81       	ld	r22, Z
    e380:	71 81       	ldd	r23, Z+1	; 0x01
    e382:	88 27       	eor	r24, r24
    e384:	77 fd       	sbrc	r23, 7
    e386:	80 95       	com	r24
    e388:	98 2f       	mov	r25, r24
    e38a:	0e 5f       	subi	r16, 0xFE	; 254
    e38c:	1f 4f       	sbci	r17, 0xFF	; 255
    e38e:	2f 76       	andi	r18, 0x6F	; 111
    e390:	72 2e       	mov	r7, r18
    e392:	97 ff       	sbrs	r25, 7
    e394:	09 c0       	rjmp	.+18     	; 0xe3a8 <vfprintf+0x1f8>
    e396:	90 95       	com	r25
    e398:	80 95       	com	r24
    e39a:	70 95       	com	r23
    e39c:	61 95       	neg	r22
    e39e:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a0:	8f 4f       	sbci	r24, 0xFF	; 255
    e3a2:	9f 4f       	sbci	r25, 0xFF	; 255
    e3a4:	20 68       	ori	r18, 0x80	; 128
    e3a6:	72 2e       	mov	r7, r18
    e3a8:	2a e0       	ldi	r18, 0x0A	; 10
    e3aa:	30 e0       	ldi	r19, 0x00	; 0
    e3ac:	a4 01       	movw	r20, r8
    e3ae:	0e 94 ed 72 	call	0xe5da	; 0xe5da <__ultoa_invert>
    e3b2:	a8 2e       	mov	r10, r24
    e3b4:	a8 18       	sub	r10, r8
    e3b6:	44 c0       	rjmp	.+136    	; 0xe440 <vfprintf+0x290>
    e3b8:	85 37       	cpi	r24, 0x75	; 117
    e3ba:	29 f4       	brne	.+10     	; 0xe3c6 <vfprintf+0x216>
    e3bc:	2f 7e       	andi	r18, 0xEF	; 239
    e3be:	b2 2e       	mov	r11, r18
    e3c0:	2a e0       	ldi	r18, 0x0A	; 10
    e3c2:	30 e0       	ldi	r19, 0x00	; 0
    e3c4:	25 c0       	rjmp	.+74     	; 0xe410 <vfprintf+0x260>
    e3c6:	f2 2f       	mov	r31, r18
    e3c8:	f9 7f       	andi	r31, 0xF9	; 249
    e3ca:	bf 2e       	mov	r11, r31
    e3cc:	8f 36       	cpi	r24, 0x6F	; 111
    e3ce:	c1 f0       	breq	.+48     	; 0xe400 <vfprintf+0x250>
    e3d0:	18 f4       	brcc	.+6      	; 0xe3d8 <vfprintf+0x228>
    e3d2:	88 35       	cpi	r24, 0x58	; 88
    e3d4:	79 f0       	breq	.+30     	; 0xe3f4 <vfprintf+0x244>
    e3d6:	b4 c0       	rjmp	.+360    	; 0xe540 <vfprintf+0x390>
    e3d8:	80 37       	cpi	r24, 0x70	; 112
    e3da:	19 f0       	breq	.+6      	; 0xe3e2 <vfprintf+0x232>
    e3dc:	88 37       	cpi	r24, 0x78	; 120
    e3de:	21 f0       	breq	.+8      	; 0xe3e8 <vfprintf+0x238>
    e3e0:	af c0       	rjmp	.+350    	; 0xe540 <vfprintf+0x390>
    e3e2:	2f 2f       	mov	r18, r31
    e3e4:	20 61       	ori	r18, 0x10	; 16
    e3e6:	b2 2e       	mov	r11, r18
    e3e8:	b4 fe       	sbrs	r11, 4
    e3ea:	0d c0       	rjmp	.+26     	; 0xe406 <vfprintf+0x256>
    e3ec:	8b 2d       	mov	r24, r11
    e3ee:	84 60       	ori	r24, 0x04	; 4
    e3f0:	b8 2e       	mov	r11, r24
    e3f2:	09 c0       	rjmp	.+18     	; 0xe406 <vfprintf+0x256>
    e3f4:	24 ff       	sbrs	r18, 4
    e3f6:	0a c0       	rjmp	.+20     	; 0xe40c <vfprintf+0x25c>
    e3f8:	9f 2f       	mov	r25, r31
    e3fa:	96 60       	ori	r25, 0x06	; 6
    e3fc:	b9 2e       	mov	r11, r25
    e3fe:	06 c0       	rjmp	.+12     	; 0xe40c <vfprintf+0x25c>
    e400:	28 e0       	ldi	r18, 0x08	; 8
    e402:	30 e0       	ldi	r19, 0x00	; 0
    e404:	05 c0       	rjmp	.+10     	; 0xe410 <vfprintf+0x260>
    e406:	20 e1       	ldi	r18, 0x10	; 16
    e408:	30 e0       	ldi	r19, 0x00	; 0
    e40a:	02 c0       	rjmp	.+4      	; 0xe410 <vfprintf+0x260>
    e40c:	20 e1       	ldi	r18, 0x10	; 16
    e40e:	32 e0       	ldi	r19, 0x02	; 2
    e410:	f8 01       	movw	r30, r16
    e412:	b7 fe       	sbrs	r11, 7
    e414:	07 c0       	rjmp	.+14     	; 0xe424 <vfprintf+0x274>
    e416:	60 81       	ld	r22, Z
    e418:	71 81       	ldd	r23, Z+1	; 0x01
    e41a:	82 81       	ldd	r24, Z+2	; 0x02
    e41c:	93 81       	ldd	r25, Z+3	; 0x03
    e41e:	0c 5f       	subi	r16, 0xFC	; 252
    e420:	1f 4f       	sbci	r17, 0xFF	; 255
    e422:	06 c0       	rjmp	.+12     	; 0xe430 <vfprintf+0x280>
    e424:	60 81       	ld	r22, Z
    e426:	71 81       	ldd	r23, Z+1	; 0x01
    e428:	80 e0       	ldi	r24, 0x00	; 0
    e42a:	90 e0       	ldi	r25, 0x00	; 0
    e42c:	0e 5f       	subi	r16, 0xFE	; 254
    e42e:	1f 4f       	sbci	r17, 0xFF	; 255
    e430:	a4 01       	movw	r20, r8
    e432:	0e 94 ed 72 	call	0xe5da	; 0xe5da <__ultoa_invert>
    e436:	a8 2e       	mov	r10, r24
    e438:	a8 18       	sub	r10, r8
    e43a:	fb 2d       	mov	r31, r11
    e43c:	ff 77       	andi	r31, 0x7F	; 127
    e43e:	7f 2e       	mov	r7, r31
    e440:	76 fe       	sbrs	r7, 6
    e442:	0b c0       	rjmp	.+22     	; 0xe45a <vfprintf+0x2aa>
    e444:	37 2d       	mov	r19, r7
    e446:	3e 7f       	andi	r19, 0xFE	; 254
    e448:	a5 14       	cp	r10, r5
    e44a:	50 f4       	brcc	.+20     	; 0xe460 <vfprintf+0x2b0>
    e44c:	74 fe       	sbrs	r7, 4
    e44e:	0a c0       	rjmp	.+20     	; 0xe464 <vfprintf+0x2b4>
    e450:	72 fc       	sbrc	r7, 2
    e452:	08 c0       	rjmp	.+16     	; 0xe464 <vfprintf+0x2b4>
    e454:	37 2d       	mov	r19, r7
    e456:	3e 7e       	andi	r19, 0xEE	; 238
    e458:	05 c0       	rjmp	.+10     	; 0xe464 <vfprintf+0x2b4>
    e45a:	ba 2c       	mov	r11, r10
    e45c:	37 2d       	mov	r19, r7
    e45e:	03 c0       	rjmp	.+6      	; 0xe466 <vfprintf+0x2b6>
    e460:	ba 2c       	mov	r11, r10
    e462:	01 c0       	rjmp	.+2      	; 0xe466 <vfprintf+0x2b6>
    e464:	b5 2c       	mov	r11, r5
    e466:	34 ff       	sbrs	r19, 4
    e468:	0d c0       	rjmp	.+26     	; 0xe484 <vfprintf+0x2d4>
    e46a:	fe 01       	movw	r30, r28
    e46c:	ea 0d       	add	r30, r10
    e46e:	f1 1d       	adc	r31, r1
    e470:	80 81       	ld	r24, Z
    e472:	80 33       	cpi	r24, 0x30	; 48
    e474:	11 f4       	brne	.+4      	; 0xe47a <vfprintf+0x2ca>
    e476:	39 7e       	andi	r19, 0xE9	; 233
    e478:	09 c0       	rjmp	.+18     	; 0xe48c <vfprintf+0x2dc>
    e47a:	32 ff       	sbrs	r19, 2
    e47c:	06 c0       	rjmp	.+12     	; 0xe48a <vfprintf+0x2da>
    e47e:	b3 94       	inc	r11
    e480:	b3 94       	inc	r11
    e482:	04 c0       	rjmp	.+8      	; 0xe48c <vfprintf+0x2dc>
    e484:	83 2f       	mov	r24, r19
    e486:	86 78       	andi	r24, 0x86	; 134
    e488:	09 f0       	breq	.+2      	; 0xe48c <vfprintf+0x2dc>
    e48a:	b3 94       	inc	r11
    e48c:	33 fd       	sbrc	r19, 3
    e48e:	13 c0       	rjmp	.+38     	; 0xe4b6 <vfprintf+0x306>
    e490:	30 ff       	sbrs	r19, 0
    e492:	06 c0       	rjmp	.+12     	; 0xe4a0 <vfprintf+0x2f0>
    e494:	5a 2c       	mov	r5, r10
    e496:	b3 14       	cp	r11, r3
    e498:	18 f4       	brcc	.+6      	; 0xe4a0 <vfprintf+0x2f0>
    e49a:	53 0c       	add	r5, r3
    e49c:	5b 18       	sub	r5, r11
    e49e:	b3 2c       	mov	r11, r3
    e4a0:	b3 14       	cp	r11, r3
    e4a2:	68 f4       	brcc	.+26     	; 0xe4be <vfprintf+0x30e>
    e4a4:	b7 01       	movw	r22, r14
    e4a6:	80 e2       	ldi	r24, 0x20	; 32
    e4a8:	90 e0       	ldi	r25, 0x00	; 0
    e4aa:	3c 87       	std	Y+12, r19	; 0x0c
    e4ac:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e4b0:	b3 94       	inc	r11
    e4b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    e4b4:	f5 cf       	rjmp	.-22     	; 0xe4a0 <vfprintf+0x2f0>
    e4b6:	b3 14       	cp	r11, r3
    e4b8:	10 f4       	brcc	.+4      	; 0xe4be <vfprintf+0x30e>
    e4ba:	3b 18       	sub	r3, r11
    e4bc:	01 c0       	rjmp	.+2      	; 0xe4c0 <vfprintf+0x310>
    e4be:	31 2c       	mov	r3, r1
    e4c0:	34 ff       	sbrs	r19, 4
    e4c2:	12 c0       	rjmp	.+36     	; 0xe4e8 <vfprintf+0x338>
    e4c4:	b7 01       	movw	r22, r14
    e4c6:	80 e3       	ldi	r24, 0x30	; 48
    e4c8:	90 e0       	ldi	r25, 0x00	; 0
    e4ca:	3c 87       	std	Y+12, r19	; 0x0c
    e4cc:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e4d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    e4d2:	32 ff       	sbrs	r19, 2
    e4d4:	17 c0       	rjmp	.+46     	; 0xe504 <vfprintf+0x354>
    e4d6:	31 fd       	sbrc	r19, 1
    e4d8:	03 c0       	rjmp	.+6      	; 0xe4e0 <vfprintf+0x330>
    e4da:	88 e7       	ldi	r24, 0x78	; 120
    e4dc:	90 e0       	ldi	r25, 0x00	; 0
    e4de:	02 c0       	rjmp	.+4      	; 0xe4e4 <vfprintf+0x334>
    e4e0:	88 e5       	ldi	r24, 0x58	; 88
    e4e2:	90 e0       	ldi	r25, 0x00	; 0
    e4e4:	b7 01       	movw	r22, r14
    e4e6:	0c c0       	rjmp	.+24     	; 0xe500 <vfprintf+0x350>
    e4e8:	83 2f       	mov	r24, r19
    e4ea:	86 78       	andi	r24, 0x86	; 134
    e4ec:	59 f0       	breq	.+22     	; 0xe504 <vfprintf+0x354>
    e4ee:	31 ff       	sbrs	r19, 1
    e4f0:	02 c0       	rjmp	.+4      	; 0xe4f6 <vfprintf+0x346>
    e4f2:	8b e2       	ldi	r24, 0x2B	; 43
    e4f4:	01 c0       	rjmp	.+2      	; 0xe4f8 <vfprintf+0x348>
    e4f6:	80 e2       	ldi	r24, 0x20	; 32
    e4f8:	37 fd       	sbrc	r19, 7
    e4fa:	8d e2       	ldi	r24, 0x2D	; 45
    e4fc:	b7 01       	movw	r22, r14
    e4fe:	90 e0       	ldi	r25, 0x00	; 0
    e500:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e504:	a5 14       	cp	r10, r5
    e506:	38 f4       	brcc	.+14     	; 0xe516 <vfprintf+0x366>
    e508:	b7 01       	movw	r22, r14
    e50a:	80 e3       	ldi	r24, 0x30	; 48
    e50c:	90 e0       	ldi	r25, 0x00	; 0
    e50e:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e512:	5a 94       	dec	r5
    e514:	f7 cf       	rjmp	.-18     	; 0xe504 <vfprintf+0x354>
    e516:	aa 94       	dec	r10
    e518:	f4 01       	movw	r30, r8
    e51a:	ea 0d       	add	r30, r10
    e51c:	f1 1d       	adc	r31, r1
    e51e:	80 81       	ld	r24, Z
    e520:	b7 01       	movw	r22, r14
    e522:	90 e0       	ldi	r25, 0x00	; 0
    e524:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e528:	a1 10       	cpse	r10, r1
    e52a:	f5 cf       	rjmp	.-22     	; 0xe516 <vfprintf+0x366>
    e52c:	33 20       	and	r3, r3
    e52e:	09 f4       	brne	.+2      	; 0xe532 <vfprintf+0x382>
    e530:	51 ce       	rjmp	.-862    	; 0xe1d4 <vfprintf+0x24>
    e532:	b7 01       	movw	r22, r14
    e534:	80 e2       	ldi	r24, 0x20	; 32
    e536:	90 e0       	ldi	r25, 0x00	; 0
    e538:	0e 94 b5 72 	call	0xe56a	; 0xe56a <fputc>
    e53c:	3a 94       	dec	r3
    e53e:	f6 cf       	rjmp	.-20     	; 0xe52c <vfprintf+0x37c>
    e540:	f7 01       	movw	r30, r14
    e542:	86 81       	ldd	r24, Z+6	; 0x06
    e544:	97 81       	ldd	r25, Z+7	; 0x07
    e546:	02 c0       	rjmp	.+4      	; 0xe54c <vfprintf+0x39c>
    e548:	8f ef       	ldi	r24, 0xFF	; 255
    e54a:	9f ef       	ldi	r25, 0xFF	; 255
    e54c:	2c 96       	adiw	r28, 0x0c	; 12
    e54e:	e2 e1       	ldi	r30, 0x12	; 18
    e550:	0c 94 67 73 	jmp	0xe6ce	; 0xe6ce <__epilogue_restores__>

0000e554 <strnlen>:
    e554:	fc 01       	movw	r30, r24
    e556:	61 50       	subi	r22, 0x01	; 1
    e558:	70 40       	sbci	r23, 0x00	; 0
    e55a:	01 90       	ld	r0, Z+
    e55c:	01 10       	cpse	r0, r1
    e55e:	d8 f7       	brcc	.-10     	; 0xe556 <strnlen+0x2>
    e560:	80 95       	com	r24
    e562:	90 95       	com	r25
    e564:	8e 0f       	add	r24, r30
    e566:	9f 1f       	adc	r25, r31
    e568:	08 95       	ret

0000e56a <fputc>:
    e56a:	0f 93       	push	r16
    e56c:	1f 93       	push	r17
    e56e:	cf 93       	push	r28
    e570:	df 93       	push	r29
    e572:	fb 01       	movw	r30, r22
    e574:	23 81       	ldd	r18, Z+3	; 0x03
    e576:	21 fd       	sbrc	r18, 1
    e578:	03 c0       	rjmp	.+6      	; 0xe580 <fputc+0x16>
    e57a:	8f ef       	ldi	r24, 0xFF	; 255
    e57c:	9f ef       	ldi	r25, 0xFF	; 255
    e57e:	28 c0       	rjmp	.+80     	; 0xe5d0 <fputc+0x66>
    e580:	22 ff       	sbrs	r18, 2
    e582:	16 c0       	rjmp	.+44     	; 0xe5b0 <fputc+0x46>
    e584:	46 81       	ldd	r20, Z+6	; 0x06
    e586:	57 81       	ldd	r21, Z+7	; 0x07
    e588:	24 81       	ldd	r18, Z+4	; 0x04
    e58a:	35 81       	ldd	r19, Z+5	; 0x05
    e58c:	42 17       	cp	r20, r18
    e58e:	53 07       	cpc	r21, r19
    e590:	44 f4       	brge	.+16     	; 0xe5a2 <fputc+0x38>
    e592:	a0 81       	ld	r26, Z
    e594:	b1 81       	ldd	r27, Z+1	; 0x01
    e596:	9d 01       	movw	r18, r26
    e598:	2f 5f       	subi	r18, 0xFF	; 255
    e59a:	3f 4f       	sbci	r19, 0xFF	; 255
    e59c:	31 83       	std	Z+1, r19	; 0x01
    e59e:	20 83       	st	Z, r18
    e5a0:	8c 93       	st	X, r24
    e5a2:	26 81       	ldd	r18, Z+6	; 0x06
    e5a4:	37 81       	ldd	r19, Z+7	; 0x07
    e5a6:	2f 5f       	subi	r18, 0xFF	; 255
    e5a8:	3f 4f       	sbci	r19, 0xFF	; 255
    e5aa:	37 83       	std	Z+7, r19	; 0x07
    e5ac:	26 83       	std	Z+6, r18	; 0x06
    e5ae:	10 c0       	rjmp	.+32     	; 0xe5d0 <fputc+0x66>
    e5b0:	eb 01       	movw	r28, r22
    e5b2:	09 2f       	mov	r16, r25
    e5b4:	18 2f       	mov	r17, r24
    e5b6:	00 84       	ldd	r0, Z+8	; 0x08
    e5b8:	f1 85       	ldd	r31, Z+9	; 0x09
    e5ba:	e0 2d       	mov	r30, r0
    e5bc:	09 95       	icall
    e5be:	89 2b       	or	r24, r25
    e5c0:	e1 f6       	brne	.-72     	; 0xe57a <fputc+0x10>
    e5c2:	8e 81       	ldd	r24, Y+6	; 0x06
    e5c4:	9f 81       	ldd	r25, Y+7	; 0x07
    e5c6:	01 96       	adiw	r24, 0x01	; 1
    e5c8:	9f 83       	std	Y+7, r25	; 0x07
    e5ca:	8e 83       	std	Y+6, r24	; 0x06
    e5cc:	81 2f       	mov	r24, r17
    e5ce:	90 2f       	mov	r25, r16
    e5d0:	df 91       	pop	r29
    e5d2:	cf 91       	pop	r28
    e5d4:	1f 91       	pop	r17
    e5d6:	0f 91       	pop	r16
    e5d8:	08 95       	ret

0000e5da <__ultoa_invert>:
    e5da:	fa 01       	movw	r30, r20
    e5dc:	aa 27       	eor	r26, r26
    e5de:	28 30       	cpi	r18, 0x08	; 8
    e5e0:	51 f1       	breq	.+84     	; 0xe636 <__ultoa_invert+0x5c>
    e5e2:	20 31       	cpi	r18, 0x10	; 16
    e5e4:	81 f1       	breq	.+96     	; 0xe646 <__ultoa_invert+0x6c>
    e5e6:	e8 94       	clt
    e5e8:	6f 93       	push	r22
    e5ea:	6e 7f       	andi	r22, 0xFE	; 254
    e5ec:	6e 5f       	subi	r22, 0xFE	; 254
    e5ee:	7f 4f       	sbci	r23, 0xFF	; 255
    e5f0:	8f 4f       	sbci	r24, 0xFF	; 255
    e5f2:	9f 4f       	sbci	r25, 0xFF	; 255
    e5f4:	af 4f       	sbci	r26, 0xFF	; 255
    e5f6:	b1 e0       	ldi	r27, 0x01	; 1
    e5f8:	3e d0       	rcall	.+124    	; 0xe676 <__ultoa_invert+0x9c>
    e5fa:	b4 e0       	ldi	r27, 0x04	; 4
    e5fc:	3c d0       	rcall	.+120    	; 0xe676 <__ultoa_invert+0x9c>
    e5fe:	67 0f       	add	r22, r23
    e600:	78 1f       	adc	r23, r24
    e602:	89 1f       	adc	r24, r25
    e604:	9a 1f       	adc	r25, r26
    e606:	a1 1d       	adc	r26, r1
    e608:	68 0f       	add	r22, r24
    e60a:	79 1f       	adc	r23, r25
    e60c:	8a 1f       	adc	r24, r26
    e60e:	91 1d       	adc	r25, r1
    e610:	a1 1d       	adc	r26, r1
    e612:	6a 0f       	add	r22, r26
    e614:	71 1d       	adc	r23, r1
    e616:	81 1d       	adc	r24, r1
    e618:	91 1d       	adc	r25, r1
    e61a:	a1 1d       	adc	r26, r1
    e61c:	20 d0       	rcall	.+64     	; 0xe65e <__ultoa_invert+0x84>
    e61e:	09 f4       	brne	.+2      	; 0xe622 <__ultoa_invert+0x48>
    e620:	68 94       	set
    e622:	3f 91       	pop	r19
    e624:	2a e0       	ldi	r18, 0x0A	; 10
    e626:	26 9f       	mul	r18, r22
    e628:	11 24       	eor	r1, r1
    e62a:	30 19       	sub	r19, r0
    e62c:	30 5d       	subi	r19, 0xD0	; 208
    e62e:	31 93       	st	Z+, r19
    e630:	de f6       	brtc	.-74     	; 0xe5e8 <__ultoa_invert+0xe>
    e632:	cf 01       	movw	r24, r30
    e634:	08 95       	ret
    e636:	46 2f       	mov	r20, r22
    e638:	47 70       	andi	r20, 0x07	; 7
    e63a:	40 5d       	subi	r20, 0xD0	; 208
    e63c:	41 93       	st	Z+, r20
    e63e:	b3 e0       	ldi	r27, 0x03	; 3
    e640:	0f d0       	rcall	.+30     	; 0xe660 <__ultoa_invert+0x86>
    e642:	c9 f7       	brne	.-14     	; 0xe636 <__ultoa_invert+0x5c>
    e644:	f6 cf       	rjmp	.-20     	; 0xe632 <__ultoa_invert+0x58>
    e646:	46 2f       	mov	r20, r22
    e648:	4f 70       	andi	r20, 0x0F	; 15
    e64a:	40 5d       	subi	r20, 0xD0	; 208
    e64c:	4a 33       	cpi	r20, 0x3A	; 58
    e64e:	18 f0       	brcs	.+6      	; 0xe656 <__ultoa_invert+0x7c>
    e650:	49 5d       	subi	r20, 0xD9	; 217
    e652:	31 fd       	sbrc	r19, 1
    e654:	40 52       	subi	r20, 0x20	; 32
    e656:	41 93       	st	Z+, r20
    e658:	02 d0       	rcall	.+4      	; 0xe65e <__ultoa_invert+0x84>
    e65a:	a9 f7       	brne	.-22     	; 0xe646 <__ultoa_invert+0x6c>
    e65c:	ea cf       	rjmp	.-44     	; 0xe632 <__ultoa_invert+0x58>
    e65e:	b4 e0       	ldi	r27, 0x04	; 4
    e660:	a6 95       	lsr	r26
    e662:	97 95       	ror	r25
    e664:	87 95       	ror	r24
    e666:	77 95       	ror	r23
    e668:	67 95       	ror	r22
    e66a:	ba 95       	dec	r27
    e66c:	c9 f7       	brne	.-14     	; 0xe660 <__ultoa_invert+0x86>
    e66e:	00 97       	sbiw	r24, 0x00	; 0
    e670:	61 05       	cpc	r22, r1
    e672:	71 05       	cpc	r23, r1
    e674:	08 95       	ret
    e676:	9b 01       	movw	r18, r22
    e678:	ac 01       	movw	r20, r24
    e67a:	0a 2e       	mov	r0, r26
    e67c:	06 94       	lsr	r0
    e67e:	57 95       	ror	r21
    e680:	47 95       	ror	r20
    e682:	37 95       	ror	r19
    e684:	27 95       	ror	r18
    e686:	ba 95       	dec	r27
    e688:	c9 f7       	brne	.-14     	; 0xe67c <__ultoa_invert+0xa2>
    e68a:	62 0f       	add	r22, r18
    e68c:	73 1f       	adc	r23, r19
    e68e:	84 1f       	adc	r24, r20
    e690:	95 1f       	adc	r25, r21
    e692:	a0 1d       	adc	r26, r0
    e694:	08 95       	ret

0000e696 <__prologue_saves__>:
    e696:	2f 92       	push	r2
    e698:	3f 92       	push	r3
    e69a:	4f 92       	push	r4
    e69c:	5f 92       	push	r5
    e69e:	6f 92       	push	r6
    e6a0:	7f 92       	push	r7
    e6a2:	8f 92       	push	r8
    e6a4:	9f 92       	push	r9
    e6a6:	af 92       	push	r10
    e6a8:	bf 92       	push	r11
    e6aa:	cf 92       	push	r12
    e6ac:	df 92       	push	r13
    e6ae:	ef 92       	push	r14
    e6b0:	ff 92       	push	r15
    e6b2:	0f 93       	push	r16
    e6b4:	1f 93       	push	r17
    e6b6:	cf 93       	push	r28
    e6b8:	df 93       	push	r29
    e6ba:	cd b7       	in	r28, 0x3d	; 61
    e6bc:	de b7       	in	r29, 0x3e	; 62
    e6be:	ca 1b       	sub	r28, r26
    e6c0:	db 0b       	sbc	r29, r27
    e6c2:	0f b6       	in	r0, 0x3f	; 63
    e6c4:	f8 94       	cli
    e6c6:	de bf       	out	0x3e, r29	; 62
    e6c8:	0f be       	out	0x3f, r0	; 63
    e6ca:	cd bf       	out	0x3d, r28	; 61
    e6cc:	09 94       	ijmp

0000e6ce <__epilogue_restores__>:
    e6ce:	2a 88       	ldd	r2, Y+18	; 0x12
    e6d0:	39 88       	ldd	r3, Y+17	; 0x11
    e6d2:	48 88       	ldd	r4, Y+16	; 0x10
    e6d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    e6d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    e6d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    e6da:	8c 84       	ldd	r8, Y+12	; 0x0c
    e6dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    e6de:	aa 84       	ldd	r10, Y+10	; 0x0a
    e6e0:	b9 84       	ldd	r11, Y+9	; 0x09
    e6e2:	c8 84       	ldd	r12, Y+8	; 0x08
    e6e4:	df 80       	ldd	r13, Y+7	; 0x07
    e6e6:	ee 80       	ldd	r14, Y+6	; 0x06
    e6e8:	fd 80       	ldd	r15, Y+5	; 0x05
    e6ea:	0c 81       	ldd	r16, Y+4	; 0x04
    e6ec:	1b 81       	ldd	r17, Y+3	; 0x03
    e6ee:	aa 81       	ldd	r26, Y+2	; 0x02
    e6f0:	b9 81       	ldd	r27, Y+1	; 0x01
    e6f2:	ce 0f       	add	r28, r30
    e6f4:	d1 1d       	adc	r29, r1
    e6f6:	0f b6       	in	r0, 0x3f	; 63
    e6f8:	f8 94       	cli
    e6fa:	de bf       	out	0x3e, r29	; 62
    e6fc:	0f be       	out	0x3f, r0	; 63
    e6fe:	cd bf       	out	0x3d, r28	; 61
    e700:	ed 01       	movw	r28, r26
    e702:	08 95       	ret

0000e704 <_exit>:
    e704:	f8 94       	cli

0000e706 <__stop_program>:
    e706:	ff cf       	rjmp	.-2      	; 0xe706 <__stop_program>
